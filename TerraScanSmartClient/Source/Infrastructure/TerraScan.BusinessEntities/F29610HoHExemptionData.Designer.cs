//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1433
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace TerraScan.BusinessEntities {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("F29610HoHExemptionData")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class F29610HoHExemptionData : global::System.Data.DataSet {
        
        private GetHoHExemptionDetailsDataTable tableGetHoHExemptionDetails;
        
        private GetCalculationHeadOfHouseholdDataTable tableGetCalculationHeadOfHousehold;
        
        private GetOwnerPercentDataTable tableGetOwnerPercent;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public F29610HoHExemptionData() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected F29610HoHExemptionData(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["GetHoHExemptionDetails"] != null)) {
                    base.Tables.Add(new GetHoHExemptionDetailsDataTable(ds.Tables["GetHoHExemptionDetails"]));
                }
                if ((ds.Tables["GetCalculationHeadOfHousehold"] != null)) {
                    base.Tables.Add(new GetCalculationHeadOfHouseholdDataTable(ds.Tables["GetCalculationHeadOfHousehold"]));
                }
                if ((ds.Tables["GetOwnerPercent"] != null)) {
                    base.Tables.Add(new GetOwnerPercentDataTable(ds.Tables["GetOwnerPercent"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GetHoHExemptionDetailsDataTable GetHoHExemptionDetails {
            get {
                return this.tableGetHoHExemptionDetails;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GetCalculationHeadOfHouseholdDataTable GetCalculationHeadOfHousehold {
            get {
                return this.tableGetCalculationHeadOfHousehold;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GetOwnerPercentDataTable GetOwnerPercent {
            get {
                return this.tableGetOwnerPercent;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            F29610HoHExemptionData cln = ((F29610HoHExemptionData)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["GetHoHExemptionDetails"] != null)) {
                    base.Tables.Add(new GetHoHExemptionDetailsDataTable(ds.Tables["GetHoHExemptionDetails"]));
                }
                if ((ds.Tables["GetCalculationHeadOfHousehold"] != null)) {
                    base.Tables.Add(new GetCalculationHeadOfHouseholdDataTable(ds.Tables["GetCalculationHeadOfHousehold"]));
                }
                if ((ds.Tables["GetOwnerPercent"] != null)) {
                    base.Tables.Add(new GetOwnerPercentDataTable(ds.Tables["GetOwnerPercent"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableGetHoHExemptionDetails = ((GetHoHExemptionDetailsDataTable)(base.Tables["GetHoHExemptionDetails"]));
            if ((initTable == true)) {
                if ((this.tableGetHoHExemptionDetails != null)) {
                    this.tableGetHoHExemptionDetails.InitVars();
                }
            }
            this.tableGetCalculationHeadOfHousehold = ((GetCalculationHeadOfHouseholdDataTable)(base.Tables["GetCalculationHeadOfHousehold"]));
            if ((initTable == true)) {
                if ((this.tableGetCalculationHeadOfHousehold != null)) {
                    this.tableGetCalculationHeadOfHousehold.InitVars();
                }
            }
            this.tableGetOwnerPercent = ((GetOwnerPercentDataTable)(base.Tables["GetOwnerPercent"]));
            if ((initTable == true)) {
                if ((this.tableGetOwnerPercent != null)) {
                    this.tableGetOwnerPercent.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "F29610HoHExemptionData";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/F29610HoHExemptionData.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableGetHoHExemptionDetails = new GetHoHExemptionDetailsDataTable();
            base.Tables.Add(this.tableGetHoHExemptionDetails);
            this.tableGetCalculationHeadOfHousehold = new GetCalculationHeadOfHouseholdDataTable();
            base.Tables.Add(this.tableGetCalculationHeadOfHousehold);
            this.tableGetOwnerPercent = new GetOwnerPercentDataTable();
            base.Tables.Add(this.tableGetOwnerPercent);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeGetHoHExemptionDetails() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeGetCalculationHeadOfHousehold() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeGetOwnerPercent() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            F29610HoHExemptionData ds = new F29610HoHExemptionData();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void GetHoHExemptionDetailsRowChangeEventHandler(object sender, GetHoHExemptionDetailsRowChangeEvent e);
        
        public delegate void GetCalculationHeadOfHouseholdRowChangeEventHandler(object sender, GetCalculationHeadOfHouseholdRowChangeEvent e);
        
        public delegate void GetOwnerPercentRowChangeEventHandler(object sender, GetOwnerPercentRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class GetHoHExemptionDetailsDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnExemptionID;
            
            private global::System.Data.DataColumn columnOwnerID;
            
            private global::System.Data.DataColumn columnIsQualified;
            
            private global::System.Data.DataColumn columnEventID;
            
            private global::System.Data.DataColumn columnEffectiveDate;
            
            private global::System.Data.DataColumn columnThroughDate;
            
            private global::System.Data.DataColumn columnOwnerName;
            
            private global::System.Data.DataColumn columnAddress;
            
            private global::System.Data.DataColumn columnStateDetail;
            
            private global::System.Data.DataColumn columnOwnerPercent;
            
            private global::System.Data.DataColumn columnO1Value;
            
            private global::System.Data.DataColumn columnReductionValue;
            
            private global::System.Data.DataColumn columnResultingTaxable;
            
            private global::System.Data.DataColumn columnExemptionID1;
            
            private global::System.Data.DataColumn columnScheduleID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetHoHExemptionDetailsDataTable() {
                this.TableName = "GetHoHExemptionDetails";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetHoHExemptionDetailsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected GetHoHExemptionDetailsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ExemptionIDColumn {
                get {
                    return this.columnExemptionID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OwnerIDColumn {
                get {
                    return this.columnOwnerID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsQualifiedColumn {
                get {
                    return this.columnIsQualified;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EventIDColumn {
                get {
                    return this.columnEventID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EffectiveDateColumn {
                get {
                    return this.columnEffectiveDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ThroughDateColumn {
                get {
                    return this.columnThroughDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OwnerNameColumn {
                get {
                    return this.columnOwnerName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AddressColumn {
                get {
                    return this.columnAddress;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StateDetailColumn {
                get {
                    return this.columnStateDetail;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OwnerPercentColumn {
                get {
                    return this.columnOwnerPercent;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn O1ValueColumn {
                get {
                    return this.columnO1Value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ReductionValueColumn {
                get {
                    return this.columnReductionValue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ResultingTaxableColumn {
                get {
                    return this.columnResultingTaxable;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ExemptionID1Column {
                get {
                    return this.columnExemptionID1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ScheduleIDColumn {
                get {
                    return this.columnScheduleID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetHoHExemptionDetailsRow this[int index] {
                get {
                    return ((GetHoHExemptionDetailsRow)(this.Rows[index]));
                }
            }
            
            public event GetHoHExemptionDetailsRowChangeEventHandler GetHoHExemptionDetailsRowChanging;
            
            public event GetHoHExemptionDetailsRowChangeEventHandler GetHoHExemptionDetailsRowChanged;
            
            public event GetHoHExemptionDetailsRowChangeEventHandler GetHoHExemptionDetailsRowDeleting;
            
            public event GetHoHExemptionDetailsRowChangeEventHandler GetHoHExemptionDetailsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddGetHoHExemptionDetailsRow(GetHoHExemptionDetailsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetHoHExemptionDetailsRow AddGetHoHExemptionDetailsRow(int OwnerID, bool IsQualified, int EventID, string EffectiveDate, string ThroughDate, string OwnerName, string Address, string StateDetail, int OwnerPercent, int O1Value, decimal ReductionValue, decimal ResultingTaxable, int ExemptionID1, int ScheduleID) {
                GetHoHExemptionDetailsRow rowGetHoHExemptionDetailsRow = ((GetHoHExemptionDetailsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        OwnerID,
                        IsQualified,
                        EventID,
                        EffectiveDate,
                        ThroughDate,
                        OwnerName,
                        Address,
                        StateDetail,
                        OwnerPercent,
                        O1Value,
                        ReductionValue,
                        ResultingTaxable,
                        ExemptionID1,
                        ScheduleID};
                rowGetHoHExemptionDetailsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowGetHoHExemptionDetailsRow);
                return rowGetHoHExemptionDetailsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                GetHoHExemptionDetailsDataTable cln = ((GetHoHExemptionDetailsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new GetHoHExemptionDetailsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnExemptionID = base.Columns["ExemptionID"];
                this.columnOwnerID = base.Columns["OwnerID"];
                this.columnIsQualified = base.Columns["IsQualified"];
                this.columnEventID = base.Columns["EventID"];
                this.columnEffectiveDate = base.Columns["EffectiveDate"];
                this.columnThroughDate = base.Columns["ThroughDate"];
                this.columnOwnerName = base.Columns["OwnerName"];
                this.columnAddress = base.Columns["Address"];
                this.columnStateDetail = base.Columns["StateDetail"];
                this.columnOwnerPercent = base.Columns["OwnerPercent"];
                this.columnO1Value = base.Columns["O1Value"];
                this.columnReductionValue = base.Columns["ReductionValue"];
                this.columnResultingTaxable = base.Columns["ResultingTaxable"];
                this.columnExemptionID1 = base.Columns["ExemptionID1"];
                this.columnScheduleID = base.Columns["ScheduleID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnExemptionID = new global::System.Data.DataColumn("ExemptionID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnExemptionID);
                this.columnOwnerID = new global::System.Data.DataColumn("OwnerID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOwnerID);
                this.columnIsQualified = new global::System.Data.DataColumn("IsQualified", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsQualified);
                this.columnEventID = new global::System.Data.DataColumn("EventID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEventID);
                this.columnEffectiveDate = new global::System.Data.DataColumn("EffectiveDate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEffectiveDate);
                this.columnThroughDate = new global::System.Data.DataColumn("ThroughDate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnThroughDate);
                this.columnOwnerName = new global::System.Data.DataColumn("OwnerName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOwnerName);
                this.columnAddress = new global::System.Data.DataColumn("Address", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAddress);
                this.columnStateDetail = new global::System.Data.DataColumn("StateDetail", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStateDetail);
                this.columnOwnerPercent = new global::System.Data.DataColumn("OwnerPercent", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOwnerPercent);
                this.columnO1Value = new global::System.Data.DataColumn("O1Value", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnO1Value);
                this.columnReductionValue = new global::System.Data.DataColumn("ReductionValue", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnReductionValue);
                this.columnResultingTaxable = new global::System.Data.DataColumn("ResultingTaxable", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnResultingTaxable);
                this.columnExemptionID1 = new global::System.Data.DataColumn("ExemptionID1", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnExemptionID1);
                this.columnScheduleID = new global::System.Data.DataColumn("ScheduleID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnScheduleID);
                this.columnExemptionID.AutoIncrement = true;
                this.columnExemptionID.AllowDBNull = false;
                this.columnExemptionID.ReadOnly = true;
                this.columnOwnerName.ReadOnly = true;
                this.columnOwnerName.MaxLength = 103;
                this.columnAddress.ReadOnly = true;
                this.columnAddress.MaxLength = 103;
                this.columnStateDetail.ReadOnly = true;
                this.columnStateDetail.MaxLength = 154;
                this.columnOwnerPercent.ReadOnly = true;
                this.columnO1Value.ReadOnly = true;
                this.columnExemptionID1.ReadOnly = true;
                this.columnScheduleID.ReadOnly = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetHoHExemptionDetailsRow NewGetHoHExemptionDetailsRow() {
                return ((GetHoHExemptionDetailsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new GetHoHExemptionDetailsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(GetHoHExemptionDetailsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GetHoHExemptionDetailsRowChanged != null)) {
                    this.GetHoHExemptionDetailsRowChanged(this, new GetHoHExemptionDetailsRowChangeEvent(((GetHoHExemptionDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GetHoHExemptionDetailsRowChanging != null)) {
                    this.GetHoHExemptionDetailsRowChanging(this, new GetHoHExemptionDetailsRowChangeEvent(((GetHoHExemptionDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GetHoHExemptionDetailsRowDeleted != null)) {
                    this.GetHoHExemptionDetailsRowDeleted(this, new GetHoHExemptionDetailsRowChangeEvent(((GetHoHExemptionDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GetHoHExemptionDetailsRowDeleting != null)) {
                    this.GetHoHExemptionDetailsRowDeleting(this, new GetHoHExemptionDetailsRowChangeEvent(((GetHoHExemptionDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveGetHoHExemptionDetailsRow(GetHoHExemptionDetailsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F29610HoHExemptionData ds = new F29610HoHExemptionData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "GetHoHExemptionDetailsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class GetCalculationHeadOfHouseholdDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnReductionValue;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetCalculationHeadOfHouseholdDataTable() {
                this.TableName = "GetCalculationHeadOfHousehold";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetCalculationHeadOfHouseholdDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected GetCalculationHeadOfHouseholdDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ReductionValueColumn {
                get {
                    return this.columnReductionValue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetCalculationHeadOfHouseholdRow this[int index] {
                get {
                    return ((GetCalculationHeadOfHouseholdRow)(this.Rows[index]));
                }
            }
            
            public event GetCalculationHeadOfHouseholdRowChangeEventHandler GetCalculationHeadOfHouseholdRowChanging;
            
            public event GetCalculationHeadOfHouseholdRowChangeEventHandler GetCalculationHeadOfHouseholdRowChanged;
            
            public event GetCalculationHeadOfHouseholdRowChangeEventHandler GetCalculationHeadOfHouseholdRowDeleting;
            
            public event GetCalculationHeadOfHouseholdRowChangeEventHandler GetCalculationHeadOfHouseholdRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddGetCalculationHeadOfHouseholdRow(GetCalculationHeadOfHouseholdRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetCalculationHeadOfHouseholdRow AddGetCalculationHeadOfHouseholdRow(int ReductionValue) {
                GetCalculationHeadOfHouseholdRow rowGetCalculationHeadOfHouseholdRow = ((GetCalculationHeadOfHouseholdRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ReductionValue};
                rowGetCalculationHeadOfHouseholdRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowGetCalculationHeadOfHouseholdRow);
                return rowGetCalculationHeadOfHouseholdRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                GetCalculationHeadOfHouseholdDataTable cln = ((GetCalculationHeadOfHouseholdDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new GetCalculationHeadOfHouseholdDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnReductionValue = base.Columns["ReductionValue"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnReductionValue = new global::System.Data.DataColumn("ReductionValue", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnReductionValue);
                this.columnReductionValue.ReadOnly = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetCalculationHeadOfHouseholdRow NewGetCalculationHeadOfHouseholdRow() {
                return ((GetCalculationHeadOfHouseholdRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new GetCalculationHeadOfHouseholdRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(GetCalculationHeadOfHouseholdRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GetCalculationHeadOfHouseholdRowChanged != null)) {
                    this.GetCalculationHeadOfHouseholdRowChanged(this, new GetCalculationHeadOfHouseholdRowChangeEvent(((GetCalculationHeadOfHouseholdRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GetCalculationHeadOfHouseholdRowChanging != null)) {
                    this.GetCalculationHeadOfHouseholdRowChanging(this, new GetCalculationHeadOfHouseholdRowChangeEvent(((GetCalculationHeadOfHouseholdRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GetCalculationHeadOfHouseholdRowDeleted != null)) {
                    this.GetCalculationHeadOfHouseholdRowDeleted(this, new GetCalculationHeadOfHouseholdRowChangeEvent(((GetCalculationHeadOfHouseholdRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GetCalculationHeadOfHouseholdRowDeleting != null)) {
                    this.GetCalculationHeadOfHouseholdRowDeleting(this, new GetCalculationHeadOfHouseholdRowChangeEvent(((GetCalculationHeadOfHouseholdRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveGetCalculationHeadOfHouseholdRow(GetCalculationHeadOfHouseholdRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F29610HoHExemptionData ds = new F29610HoHExemptionData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "GetCalculationHeadOfHouseholdDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class GetOwnerPercentDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnOwnerPercent;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetOwnerPercentDataTable() {
                this.TableName = "GetOwnerPercent";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetOwnerPercentDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected GetOwnerPercentDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OwnerPercentColumn {
                get {
                    return this.columnOwnerPercent;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetOwnerPercentRow this[int index] {
                get {
                    return ((GetOwnerPercentRow)(this.Rows[index]));
                }
            }
            
            public event GetOwnerPercentRowChangeEventHandler GetOwnerPercentRowChanging;
            
            public event GetOwnerPercentRowChangeEventHandler GetOwnerPercentRowChanged;
            
            public event GetOwnerPercentRowChangeEventHandler GetOwnerPercentRowDeleting;
            
            public event GetOwnerPercentRowChangeEventHandler GetOwnerPercentRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddGetOwnerPercentRow(GetOwnerPercentRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetOwnerPercentRow AddGetOwnerPercentRow(decimal OwnerPercent) {
                GetOwnerPercentRow rowGetOwnerPercentRow = ((GetOwnerPercentRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        OwnerPercent};
                rowGetOwnerPercentRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowGetOwnerPercentRow);
                return rowGetOwnerPercentRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                GetOwnerPercentDataTable cln = ((GetOwnerPercentDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new GetOwnerPercentDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnOwnerPercent = base.Columns["OwnerPercent"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnOwnerPercent = new global::System.Data.DataColumn("OwnerPercent", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOwnerPercent);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetOwnerPercentRow NewGetOwnerPercentRow() {
                return ((GetOwnerPercentRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new GetOwnerPercentRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(GetOwnerPercentRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GetOwnerPercentRowChanged != null)) {
                    this.GetOwnerPercentRowChanged(this, new GetOwnerPercentRowChangeEvent(((GetOwnerPercentRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GetOwnerPercentRowChanging != null)) {
                    this.GetOwnerPercentRowChanging(this, new GetOwnerPercentRowChangeEvent(((GetOwnerPercentRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GetOwnerPercentRowDeleted != null)) {
                    this.GetOwnerPercentRowDeleted(this, new GetOwnerPercentRowChangeEvent(((GetOwnerPercentRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GetOwnerPercentRowDeleting != null)) {
                    this.GetOwnerPercentRowDeleting(this, new GetOwnerPercentRowChangeEvent(((GetOwnerPercentRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveGetOwnerPercentRow(GetOwnerPercentRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F29610HoHExemptionData ds = new F29610HoHExemptionData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "GetOwnerPercentDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class GetHoHExemptionDetailsRow : global::System.Data.DataRow {
            
            private GetHoHExemptionDetailsDataTable tableGetHoHExemptionDetails;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetHoHExemptionDetailsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableGetHoHExemptionDetails = ((GetHoHExemptionDetailsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ExemptionID {
                get {
                    return ((int)(this[this.tableGetHoHExemptionDetails.ExemptionIDColumn]));
                }
                set {
                    this[this.tableGetHoHExemptionDetails.ExemptionIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int OwnerID {
                get {
                    try {
                        return ((int)(this[this.tableGetHoHExemptionDetails.OwnerIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OwnerID\' in table \'GetHoHExemptionDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetHoHExemptionDetails.OwnerIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsQualified {
                get {
                    try {
                        return ((bool)(this[this.tableGetHoHExemptionDetails.IsQualifiedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsQualified\' in table \'GetHoHExemptionDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetHoHExemptionDetails.IsQualifiedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int EventID {
                get {
                    try {
                        return ((int)(this[this.tableGetHoHExemptionDetails.EventIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EventID\' in table \'GetHoHExemptionDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetHoHExemptionDetails.EventIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EffectiveDate {
                get {
                    try {
                        return ((string)(this[this.tableGetHoHExemptionDetails.EffectiveDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EffectiveDate\' in table \'GetHoHExemptionDetails\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableGetHoHExemptionDetails.EffectiveDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ThroughDate {
                get {
                    try {
                        return ((string)(this[this.tableGetHoHExemptionDetails.ThroughDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ThroughDate\' in table \'GetHoHExemptionDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetHoHExemptionDetails.ThroughDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string OwnerName {
                get {
                    try {
                        return ((string)(this[this.tableGetHoHExemptionDetails.OwnerNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OwnerName\' in table \'GetHoHExemptionDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetHoHExemptionDetails.OwnerNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Address {
                get {
                    try {
                        return ((string)(this[this.tableGetHoHExemptionDetails.AddressColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Address\' in table \'GetHoHExemptionDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetHoHExemptionDetails.AddressColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string StateDetail {
                get {
                    try {
                        return ((string)(this[this.tableGetHoHExemptionDetails.StateDetailColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StateDetail\' in table \'GetHoHExemptionDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetHoHExemptionDetails.StateDetailColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int OwnerPercent {
                get {
                    try {
                        return ((int)(this[this.tableGetHoHExemptionDetails.OwnerPercentColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OwnerPercent\' in table \'GetHoHExemptionDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetHoHExemptionDetails.OwnerPercentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int O1Value {
                get {
                    try {
                        return ((int)(this[this.tableGetHoHExemptionDetails.O1ValueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'O1Value\' in table \'GetHoHExemptionDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetHoHExemptionDetails.O1ValueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal ReductionValue {
                get {
                    try {
                        return ((decimal)(this[this.tableGetHoHExemptionDetails.ReductionValueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ReductionValue\' in table \'GetHoHExemptionDetails\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableGetHoHExemptionDetails.ReductionValueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal ResultingTaxable {
                get {
                    try {
                        return ((decimal)(this[this.tableGetHoHExemptionDetails.ResultingTaxableColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ResultingTaxable\' in table \'GetHoHExemptionDetails\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableGetHoHExemptionDetails.ResultingTaxableColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ExemptionID1 {
                get {
                    try {
                        return ((int)(this[this.tableGetHoHExemptionDetails.ExemptionID1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ExemptionID1\' in table \'GetHoHExemptionDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetHoHExemptionDetails.ExemptionID1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ScheduleID {
                get {
                    try {
                        return ((int)(this[this.tableGetHoHExemptionDetails.ScheduleIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ScheduleID\' in table \'GetHoHExemptionDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetHoHExemptionDetails.ScheduleIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOwnerIDNull() {
                return this.IsNull(this.tableGetHoHExemptionDetails.OwnerIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOwnerIDNull() {
                this[this.tableGetHoHExemptionDetails.OwnerIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsQualifiedNull() {
                return this.IsNull(this.tableGetHoHExemptionDetails.IsQualifiedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsQualifiedNull() {
                this[this.tableGetHoHExemptionDetails.IsQualifiedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEventIDNull() {
                return this.IsNull(this.tableGetHoHExemptionDetails.EventIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEventIDNull() {
                this[this.tableGetHoHExemptionDetails.EventIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEffectiveDateNull() {
                return this.IsNull(this.tableGetHoHExemptionDetails.EffectiveDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEffectiveDateNull() {
                this[this.tableGetHoHExemptionDetails.EffectiveDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsThroughDateNull() {
                return this.IsNull(this.tableGetHoHExemptionDetails.ThroughDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetThroughDateNull() {
                this[this.tableGetHoHExemptionDetails.ThroughDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOwnerNameNull() {
                return this.IsNull(this.tableGetHoHExemptionDetails.OwnerNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOwnerNameNull() {
                this[this.tableGetHoHExemptionDetails.OwnerNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAddressNull() {
                return this.IsNull(this.tableGetHoHExemptionDetails.AddressColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAddressNull() {
                this[this.tableGetHoHExemptionDetails.AddressColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStateDetailNull() {
                return this.IsNull(this.tableGetHoHExemptionDetails.StateDetailColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStateDetailNull() {
                this[this.tableGetHoHExemptionDetails.StateDetailColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOwnerPercentNull() {
                return this.IsNull(this.tableGetHoHExemptionDetails.OwnerPercentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOwnerPercentNull() {
                this[this.tableGetHoHExemptionDetails.OwnerPercentColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsO1ValueNull() {
                return this.IsNull(this.tableGetHoHExemptionDetails.O1ValueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetO1ValueNull() {
                this[this.tableGetHoHExemptionDetails.O1ValueColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsReductionValueNull() {
                return this.IsNull(this.tableGetHoHExemptionDetails.ReductionValueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetReductionValueNull() {
                this[this.tableGetHoHExemptionDetails.ReductionValueColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsResultingTaxableNull() {
                return this.IsNull(this.tableGetHoHExemptionDetails.ResultingTaxableColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetResultingTaxableNull() {
                this[this.tableGetHoHExemptionDetails.ResultingTaxableColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsExemptionID1Null() {
                return this.IsNull(this.tableGetHoHExemptionDetails.ExemptionID1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetExemptionID1Null() {
                this[this.tableGetHoHExemptionDetails.ExemptionID1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsScheduleIDNull() {
                return this.IsNull(this.tableGetHoHExemptionDetails.ScheduleIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetScheduleIDNull() {
                this[this.tableGetHoHExemptionDetails.ScheduleIDColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class GetCalculationHeadOfHouseholdRow : global::System.Data.DataRow {
            
            private GetCalculationHeadOfHouseholdDataTable tableGetCalculationHeadOfHousehold;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetCalculationHeadOfHouseholdRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableGetCalculationHeadOfHousehold = ((GetCalculationHeadOfHouseholdDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ReductionValue {
                get {
                    try {
                        return ((int)(this[this.tableGetCalculationHeadOfHousehold.ReductionValueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ReductionValue\' in table \'GetCalculationHeadOfHousehold\' is" +
                                " DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetCalculationHeadOfHousehold.ReductionValueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsReductionValueNull() {
                return this.IsNull(this.tableGetCalculationHeadOfHousehold.ReductionValueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetReductionValueNull() {
                this[this.tableGetCalculationHeadOfHousehold.ReductionValueColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class GetOwnerPercentRow : global::System.Data.DataRow {
            
            private GetOwnerPercentDataTable tableGetOwnerPercent;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetOwnerPercentRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableGetOwnerPercent = ((GetOwnerPercentDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal OwnerPercent {
                get {
                    try {
                        return ((decimal)(this[this.tableGetOwnerPercent.OwnerPercentColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OwnerPercent\' in table \'GetOwnerPercent\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetOwnerPercent.OwnerPercentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOwnerPercentNull() {
                return this.IsNull(this.tableGetOwnerPercent.OwnerPercentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOwnerPercentNull() {
                this[this.tableGetOwnerPercent.OwnerPercentColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class GetHoHExemptionDetailsRowChangeEvent : global::System.EventArgs {
            
            private GetHoHExemptionDetailsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetHoHExemptionDetailsRowChangeEvent(GetHoHExemptionDetailsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetHoHExemptionDetailsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class GetCalculationHeadOfHouseholdRowChangeEvent : global::System.EventArgs {
            
            private GetCalculationHeadOfHouseholdRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetCalculationHeadOfHouseholdRowChangeEvent(GetCalculationHeadOfHouseholdRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetCalculationHeadOfHouseholdRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class GetOwnerPercentRowChangeEvent : global::System.EventArgs {
            
            private GetOwnerPercentRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetOwnerPercentRowChangeEvent(GetOwnerPercentRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetOwnerPercentRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591