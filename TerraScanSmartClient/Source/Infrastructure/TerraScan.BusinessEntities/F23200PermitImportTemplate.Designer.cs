//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4984
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace TerraScan.BusinessEntities {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("F23200PermitImportTemplate")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class F23200PermitImportTemplate : global::System.Data.DataSet {
        
        private ListPermitImportFileTypeDataTable tableListPermitImportFileType;
        
        private GetPermitImportTemplateDataTable tableGetPermitImportTemplate;
        
        private SavePermitImportTemplateDataTable tableSavePermitImportTemplate;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public F23200PermitImportTemplate() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected F23200PermitImportTemplate(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["ListPermitImportFileType"] != null)) {
                    base.Tables.Add(new ListPermitImportFileTypeDataTable(ds.Tables["ListPermitImportFileType"]));
                }
                if ((ds.Tables["GetPermitImportTemplate"] != null)) {
                    base.Tables.Add(new GetPermitImportTemplateDataTable(ds.Tables["GetPermitImportTemplate"]));
                }
                if ((ds.Tables["SavePermitImportTemplate"] != null)) {
                    base.Tables.Add(new SavePermitImportTemplateDataTable(ds.Tables["SavePermitImportTemplate"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ListPermitImportFileTypeDataTable ListPermitImportFileType {
            get {
                return this.tableListPermitImportFileType;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GetPermitImportTemplateDataTable GetPermitImportTemplate {
            get {
                return this.tableGetPermitImportTemplate;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SavePermitImportTemplateDataTable SavePermitImportTemplate {
            get {
                return this.tableSavePermitImportTemplate;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            F23200PermitImportTemplate cln = ((F23200PermitImportTemplate)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["ListPermitImportFileType"] != null)) {
                    base.Tables.Add(new ListPermitImportFileTypeDataTable(ds.Tables["ListPermitImportFileType"]));
                }
                if ((ds.Tables["GetPermitImportTemplate"] != null)) {
                    base.Tables.Add(new GetPermitImportTemplateDataTable(ds.Tables["GetPermitImportTemplate"]));
                }
                if ((ds.Tables["SavePermitImportTemplate"] != null)) {
                    base.Tables.Add(new SavePermitImportTemplateDataTable(ds.Tables["SavePermitImportTemplate"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableListPermitImportFileType = ((ListPermitImportFileTypeDataTable)(base.Tables["ListPermitImportFileType"]));
            if ((initTable == true)) {
                if ((this.tableListPermitImportFileType != null)) {
                    this.tableListPermitImportFileType.InitVars();
                }
            }
            this.tableGetPermitImportTemplate = ((GetPermitImportTemplateDataTable)(base.Tables["GetPermitImportTemplate"]));
            if ((initTable == true)) {
                if ((this.tableGetPermitImportTemplate != null)) {
                    this.tableGetPermitImportTemplate.InitVars();
                }
            }
            this.tableSavePermitImportTemplate = ((SavePermitImportTemplateDataTable)(base.Tables["SavePermitImportTemplate"]));
            if ((initTable == true)) {
                if ((this.tableSavePermitImportTemplate != null)) {
                    this.tableSavePermitImportTemplate.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "F23200PermitImportTemplate";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/F23200PermitImportTemplate.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableListPermitImportFileType = new ListPermitImportFileTypeDataTable();
            base.Tables.Add(this.tableListPermitImportFileType);
            this.tableGetPermitImportTemplate = new GetPermitImportTemplateDataTable();
            base.Tables.Add(this.tableGetPermitImportTemplate);
            this.tableSavePermitImportTemplate = new SavePermitImportTemplateDataTable();
            base.Tables.Add(this.tableSavePermitImportTemplate);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeListPermitImportFileType() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeGetPermitImportTemplate() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSavePermitImportTemplate() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            F23200PermitImportTemplate ds = new F23200PermitImportTemplate();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void ListPermitImportFileTypeRowChangeEventHandler(object sender, ListPermitImportFileTypeRowChangeEvent e);
        
        public delegate void GetPermitImportTemplateRowChangeEventHandler(object sender, GetPermitImportTemplateRowChangeEvent e);
        
        public delegate void SavePermitImportTemplateRowChangeEventHandler(object sender, SavePermitImportTemplateRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ListPermitImportFileTypeDataTable : global::System.Data.TypedTableBase<ListPermitImportFileTypeRow> {
            
            private global::System.Data.DataColumn columnTypeID;
            
            private global::System.Data.DataColumn columnTypeName;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListPermitImportFileTypeDataTable() {
                this.TableName = "ListPermitImportFileType";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListPermitImportFileTypeDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ListPermitImportFileTypeDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TypeIDColumn {
                get {
                    return this.columnTypeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TypeNameColumn {
                get {
                    return this.columnTypeName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListPermitImportFileTypeRow this[int index] {
                get {
                    return ((ListPermitImportFileTypeRow)(this.Rows[index]));
                }
            }
            
            public event ListPermitImportFileTypeRowChangeEventHandler ListPermitImportFileTypeRowChanging;
            
            public event ListPermitImportFileTypeRowChangeEventHandler ListPermitImportFileTypeRowChanged;
            
            public event ListPermitImportFileTypeRowChangeEventHandler ListPermitImportFileTypeRowDeleting;
            
            public event ListPermitImportFileTypeRowChangeEventHandler ListPermitImportFileTypeRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddListPermitImportFileTypeRow(ListPermitImportFileTypeRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListPermitImportFileTypeRow AddListPermitImportFileTypeRow(byte TypeID, string TypeName) {
                ListPermitImportFileTypeRow rowListPermitImportFileTypeRow = ((ListPermitImportFileTypeRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        TypeID,
                        TypeName};
                rowListPermitImportFileTypeRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowListPermitImportFileTypeRow);
                return rowListPermitImportFileTypeRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListPermitImportFileTypeRow FindByTypeID(byte TypeID) {
                return ((ListPermitImportFileTypeRow)(this.Rows.Find(new object[] {
                            TypeID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ListPermitImportFileTypeDataTable cln = ((ListPermitImportFileTypeDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ListPermitImportFileTypeDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnTypeID = base.Columns["TypeID"];
                this.columnTypeName = base.Columns["TypeName"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnTypeID = new global::System.Data.DataColumn("TypeID", typeof(byte), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTypeID);
                this.columnTypeName = new global::System.Data.DataColumn("TypeName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTypeName);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnTypeID}, true));
                this.columnTypeID.AllowDBNull = false;
                this.columnTypeID.Unique = true;
                this.columnTypeName.AllowDBNull = false;
                this.columnTypeName.MaxLength = 30;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListPermitImportFileTypeRow NewListPermitImportFileTypeRow() {
                return ((ListPermitImportFileTypeRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ListPermitImportFileTypeRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ListPermitImportFileTypeRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ListPermitImportFileTypeRowChanged != null)) {
                    this.ListPermitImportFileTypeRowChanged(this, new ListPermitImportFileTypeRowChangeEvent(((ListPermitImportFileTypeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ListPermitImportFileTypeRowChanging != null)) {
                    this.ListPermitImportFileTypeRowChanging(this, new ListPermitImportFileTypeRowChangeEvent(((ListPermitImportFileTypeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ListPermitImportFileTypeRowDeleted != null)) {
                    this.ListPermitImportFileTypeRowDeleted(this, new ListPermitImportFileTypeRowChangeEvent(((ListPermitImportFileTypeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ListPermitImportFileTypeRowDeleting != null)) {
                    this.ListPermitImportFileTypeRowDeleting(this, new ListPermitImportFileTypeRowChangeEvent(((ListPermitImportFileTypeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveListPermitImportFileTypeRow(ListPermitImportFileTypeRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F23200PermitImportTemplate ds = new F23200PermitImportTemplate();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ListPermitImportFileTypeDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class GetPermitImportTemplateDataTable : global::System.Data.TypedTableBase<GetPermitImportTemplateRow> {
            
            private global::System.Data.DataColumn columnTemplateID;
            
            private global::System.Data.DataColumn columnTemplateName;
            
            private global::System.Data.DataColumn columnTypeID;
            
            private global::System.Data.DataColumn columnTypeName;
            
            private global::System.Data.DataColumn columnDescription;
            
            private global::System.Data.DataColumn columnFilePath;
            
            private global::System.Data.DataColumn columnParcelNumber_Pos;
            
            private global::System.Data.DataColumn columnParcelNumber_Wid;
            
            private global::System.Data.DataColumn columnRollYear_Pos;
            
            private global::System.Data.DataColumn columnRollYear_Wid;
            
            private global::System.Data.DataColumn columnPermitNumber_Pos;
            
            private global::System.Data.DataColumn columnPermitNumber_Wid;
            
            private global::System.Data.DataColumn columnDateOpened_Pos;
            
            private global::System.Data.DataColumn columnDateOpened_Wid;
            
            private global::System.Data.DataColumn columnDateClosed_Pos;
            
            private global::System.Data.DataColumn columnDateClosed_Wid;
            
            private global::System.Data.DataColumn columnEstValue_Pos;
            
            private global::System.Data.DataColumn columnEstValue_Wid;
            
            private global::System.Data.DataColumn columnAssignedAppraiserUserName_Pos;
            
            private global::System.Data.DataColumn columnAssignedAppraiserUserName_Wid;
            
            private global::System.Data.DataColumn columnPermitType_Pos;
            
            private global::System.Data.DataColumn columnPermitType_Wid;
            
            private global::System.Data.DataColumn columnPercentComplete_Pos;
            
            private global::System.Data.DataColumn columnPercentComplete_Wid;
            
            private global::System.Data.DataColumn columnPermitDescription_Pos;
            
            private global::System.Data.DataColumn columnPermitDescription_Wid;
            
            private global::System.Data.DataColumn columnDateLastVisit_Pos;
            
            private global::System.Data.DataColumn columnDateLastVisit_Wid;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetPermitImportTemplateDataTable() {
                this.TableName = "GetPermitImportTemplate";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetPermitImportTemplateDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected GetPermitImportTemplateDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TemplateIDColumn {
                get {
                    return this.columnTemplateID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TemplateNameColumn {
                get {
                    return this.columnTemplateName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TypeIDColumn {
                get {
                    return this.columnTypeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TypeNameColumn {
                get {
                    return this.columnTypeName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FilePathColumn {
                get {
                    return this.columnFilePath;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ParcelNumber_PosColumn {
                get {
                    return this.columnParcelNumber_Pos;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ParcelNumber_WidColumn {
                get {
                    return this.columnParcelNumber_Wid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RollYear_PosColumn {
                get {
                    return this.columnRollYear_Pos;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RollYear_WidColumn {
                get {
                    return this.columnRollYear_Wid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PermitNumber_PosColumn {
                get {
                    return this.columnPermitNumber_Pos;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PermitNumber_WidColumn {
                get {
                    return this.columnPermitNumber_Wid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DateOpened_PosColumn {
                get {
                    return this.columnDateOpened_Pos;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DateOpened_WidColumn {
                get {
                    return this.columnDateOpened_Wid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DateClosed_PosColumn {
                get {
                    return this.columnDateClosed_Pos;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DateClosed_WidColumn {
                get {
                    return this.columnDateClosed_Wid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EstValue_PosColumn {
                get {
                    return this.columnEstValue_Pos;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EstValue_WidColumn {
                get {
                    return this.columnEstValue_Wid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AssignedAppraiserUserName_PosColumn {
                get {
                    return this.columnAssignedAppraiserUserName_Pos;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AssignedAppraiserUserName_WidColumn {
                get {
                    return this.columnAssignedAppraiserUserName_Wid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PermitType_PosColumn {
                get {
                    return this.columnPermitType_Pos;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PermitType_WidColumn {
                get {
                    return this.columnPermitType_Wid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PercentComplete_PosColumn {
                get {
                    return this.columnPercentComplete_Pos;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PercentComplete_WidColumn {
                get {
                    return this.columnPercentComplete_Wid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PermitDescription_PosColumn {
                get {
                    return this.columnPermitDescription_Pos;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PermitDescription_WidColumn {
                get {
                    return this.columnPermitDescription_Wid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DateLastVisit_PosColumn {
                get {
                    return this.columnDateLastVisit_Pos;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DateLastVisit_WidColumn {
                get {
                    return this.columnDateLastVisit_Wid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetPermitImportTemplateRow this[int index] {
                get {
                    return ((GetPermitImportTemplateRow)(this.Rows[index]));
                }
            }
            
            public event GetPermitImportTemplateRowChangeEventHandler GetPermitImportTemplateRowChanging;
            
            public event GetPermitImportTemplateRowChangeEventHandler GetPermitImportTemplateRowChanged;
            
            public event GetPermitImportTemplateRowChangeEventHandler GetPermitImportTemplateRowDeleting;
            
            public event GetPermitImportTemplateRowChangeEventHandler GetPermitImportTemplateRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddGetPermitImportTemplateRow(GetPermitImportTemplateRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetPermitImportTemplateRow AddGetPermitImportTemplateRow(
                        string TemplateName, 
                        byte TypeID, 
                        string TypeName, 
                        string Description, 
                        string FilePath, 
                        short ParcelNumber_Pos, 
                        short ParcelNumber_Wid, 
                        short RollYear_Pos, 
                        short RollYear_Wid, 
                        int PermitNumber_Pos, 
                        short PermitNumber_Wid, 
                        short DateOpened_Pos, 
                        short DateOpened_Wid, 
                        short DateClosed_Pos, 
                        short DateClosed_Wid, 
                        int EstValue_Pos, 
                        short EstValue_Wid, 
                        short AssignedAppraiserUserName_Pos, 
                        short AssignedAppraiserUserName_Wid, 
                        short PermitType_Pos, 
                        short PermitType_Wid, 
                        int PercentComplete_Pos, 
                        int PercentComplete_Wid, 
                        int PermitDescription_Pos, 
                        int PermitDescription_Wid, 
                        string DateLastVisit_Pos, 
                        string DateLastVisit_Wid) {
                GetPermitImportTemplateRow rowGetPermitImportTemplateRow = ((GetPermitImportTemplateRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        TemplateName,
                        TypeID,
                        TypeName,
                        Description,
                        FilePath,
                        ParcelNumber_Pos,
                        ParcelNumber_Wid,
                        RollYear_Pos,
                        RollYear_Wid,
                        PermitNumber_Pos,
                        PermitNumber_Wid,
                        DateOpened_Pos,
                        DateOpened_Wid,
                        DateClosed_Pos,
                        DateClosed_Wid,
                        EstValue_Pos,
                        EstValue_Wid,
                        AssignedAppraiserUserName_Pos,
                        AssignedAppraiserUserName_Wid,
                        PermitType_Pos,
                        PermitType_Wid,
                        PercentComplete_Pos,
                        PercentComplete_Wid,
                        PermitDescription_Pos,
                        PermitDescription_Wid,
                        DateLastVisit_Pos,
                        DateLastVisit_Wid};
                rowGetPermitImportTemplateRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowGetPermitImportTemplateRow);
                return rowGetPermitImportTemplateRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                GetPermitImportTemplateDataTable cln = ((GetPermitImportTemplateDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new GetPermitImportTemplateDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnTemplateID = base.Columns["TemplateID"];
                this.columnTemplateName = base.Columns["TemplateName"];
                this.columnTypeID = base.Columns["TypeID"];
                this.columnTypeName = base.Columns["TypeName"];
                this.columnDescription = base.Columns["Description"];
                this.columnFilePath = base.Columns["FilePath"];
                this.columnParcelNumber_Pos = base.Columns["ParcelNumber_Pos"];
                this.columnParcelNumber_Wid = base.Columns["ParcelNumber_Wid"];
                this.columnRollYear_Pos = base.Columns["RollYear_Pos"];
                this.columnRollYear_Wid = base.Columns["RollYear_Wid"];
                this.columnPermitNumber_Pos = base.Columns["PermitNumber_Pos"];
                this.columnPermitNumber_Wid = base.Columns["PermitNumber_Wid"];
                this.columnDateOpened_Pos = base.Columns["DateOpened_Pos"];
                this.columnDateOpened_Wid = base.Columns["DateOpened_Wid"];
                this.columnDateClosed_Pos = base.Columns["DateClosed_Pos"];
                this.columnDateClosed_Wid = base.Columns["DateClosed_Wid"];
                this.columnEstValue_Pos = base.Columns["EstValue_Pos"];
                this.columnEstValue_Wid = base.Columns["EstValue_Wid"];
                this.columnAssignedAppraiserUserName_Pos = base.Columns["AssignedAppraiserUserName_Pos"];
                this.columnAssignedAppraiserUserName_Wid = base.Columns["AssignedAppraiserUserName_Wid"];
                this.columnPermitType_Pos = base.Columns["PermitType_Pos"];
                this.columnPermitType_Wid = base.Columns["PermitType_Wid"];
                this.columnPercentComplete_Pos = base.Columns["PercentComplete_Pos"];
                this.columnPercentComplete_Wid = base.Columns["PercentComplete_Wid"];
                this.columnPermitDescription_Pos = base.Columns["PermitDescription_Pos"];
                this.columnPermitDescription_Wid = base.Columns["PermitDescription_Wid"];
                this.columnDateLastVisit_Pos = base.Columns["DateLastVisit_Pos"];
                this.columnDateLastVisit_Wid = base.Columns["DateLastVisit_Wid"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnTemplateID = new global::System.Data.DataColumn("TemplateID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTemplateID);
                this.columnTemplateName = new global::System.Data.DataColumn("TemplateName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTemplateName);
                this.columnTypeID = new global::System.Data.DataColumn("TypeID", typeof(byte), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTypeID);
                this.columnTypeName = new global::System.Data.DataColumn("TypeName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTypeName);
                this.columnDescription = new global::System.Data.DataColumn("Description", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescription);
                this.columnFilePath = new global::System.Data.DataColumn("FilePath", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFilePath);
                this.columnParcelNumber_Pos = new global::System.Data.DataColumn("ParcelNumber_Pos", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnParcelNumber_Pos);
                this.columnParcelNumber_Wid = new global::System.Data.DataColumn("ParcelNumber_Wid", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnParcelNumber_Wid);
                this.columnRollYear_Pos = new global::System.Data.DataColumn("RollYear_Pos", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRollYear_Pos);
                this.columnRollYear_Wid = new global::System.Data.DataColumn("RollYear_Wid", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRollYear_Wid);
                this.columnPermitNumber_Pos = new global::System.Data.DataColumn("PermitNumber_Pos", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPermitNumber_Pos);
                this.columnPermitNumber_Wid = new global::System.Data.DataColumn("PermitNumber_Wid", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPermitNumber_Wid);
                this.columnDateOpened_Pos = new global::System.Data.DataColumn("DateOpened_Pos", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDateOpened_Pos);
                this.columnDateOpened_Wid = new global::System.Data.DataColumn("DateOpened_Wid", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDateOpened_Wid);
                this.columnDateClosed_Pos = new global::System.Data.DataColumn("DateClosed_Pos", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDateClosed_Pos);
                this.columnDateClosed_Wid = new global::System.Data.DataColumn("DateClosed_Wid", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDateClosed_Wid);
                this.columnEstValue_Pos = new global::System.Data.DataColumn("EstValue_Pos", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEstValue_Pos);
                this.columnEstValue_Wid = new global::System.Data.DataColumn("EstValue_Wid", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEstValue_Wid);
                this.columnAssignedAppraiserUserName_Pos = new global::System.Data.DataColumn("AssignedAppraiserUserName_Pos", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAssignedAppraiserUserName_Pos);
                this.columnAssignedAppraiserUserName_Wid = new global::System.Data.DataColumn("AssignedAppraiserUserName_Wid", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAssignedAppraiserUserName_Wid);
                this.columnPermitType_Pos = new global::System.Data.DataColumn("PermitType_Pos", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPermitType_Pos);
                this.columnPermitType_Wid = new global::System.Data.DataColumn("PermitType_Wid", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPermitType_Wid);
                this.columnPercentComplete_Pos = new global::System.Data.DataColumn("PercentComplete_Pos", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPercentComplete_Pos);
                this.columnPercentComplete_Wid = new global::System.Data.DataColumn("PercentComplete_Wid", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPercentComplete_Wid);
                this.columnPermitDescription_Pos = new global::System.Data.DataColumn("PermitDescription_Pos", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPermitDescription_Pos);
                this.columnPermitDescription_Wid = new global::System.Data.DataColumn("PermitDescription_Wid", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPermitDescription_Wid);
                this.columnDateLastVisit_Pos = new global::System.Data.DataColumn("DateLastVisit_Pos", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDateLastVisit_Pos);
                this.columnDateLastVisit_Wid = new global::System.Data.DataColumn("DateLastVisit_Wid", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDateLastVisit_Wid);
                this.columnTemplateID.AutoIncrement = true;
                this.columnTemplateID.AllowDBNull = false;
                this.columnTemplateID.ReadOnly = true;
                this.columnTemplateName.AllowDBNull = false;
                this.columnTemplateName.MaxLength = 50;
                this.columnTypeID.AllowDBNull = false;
                this.columnTypeName.AllowDBNull = false;
                this.columnTypeName.MaxLength = 50;
                this.columnDescription.MaxLength = 250;
                this.columnFilePath.AllowDBNull = false;
                this.columnFilePath.MaxLength = 250;
                this.columnParcelNumber_Pos.Caption = "StatementID_Pos";
                this.columnParcelNumber_Wid.Caption = "StatementID_Wid";
                this.columnRollYear_Pos.Caption = "StatementNum_Pos";
                this.columnRollYear_Wid.Caption = "Amount_Pos";
                this.columnPermitNumber_Pos.Caption = "Amount_wid";
                this.columnPermitNumber_Wid.Caption = "Comment_Pos";
                this.columnDateOpened_Pos.Caption = "Comment_Wid";
                this.columnDateOpened_Wid.Caption = "BankCode_pos";
                this.columnDateClosed_Pos.Caption = "TaxPayName_Pos";
                this.columnDateClosed_Wid.Caption = "TaxPayName_Wid";
                this.columnEstValue_Pos.Caption = "PostType_Pos";
                this.columnEstValue_Wid.Caption = "OwnerID_Pos";
                this.columnAssignedAppraiserUserName_Pos.Caption = "CartID_Pos";
                this.columnAssignedAppraiserUserName_Wid.Caption = "CartID_Wid";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetPermitImportTemplateRow NewGetPermitImportTemplateRow() {
                return ((GetPermitImportTemplateRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new GetPermitImportTemplateRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(GetPermitImportTemplateRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GetPermitImportTemplateRowChanged != null)) {
                    this.GetPermitImportTemplateRowChanged(this, new GetPermitImportTemplateRowChangeEvent(((GetPermitImportTemplateRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GetPermitImportTemplateRowChanging != null)) {
                    this.GetPermitImportTemplateRowChanging(this, new GetPermitImportTemplateRowChangeEvent(((GetPermitImportTemplateRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GetPermitImportTemplateRowDeleted != null)) {
                    this.GetPermitImportTemplateRowDeleted(this, new GetPermitImportTemplateRowChangeEvent(((GetPermitImportTemplateRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GetPermitImportTemplateRowDeleting != null)) {
                    this.GetPermitImportTemplateRowDeleting(this, new GetPermitImportTemplateRowChangeEvent(((GetPermitImportTemplateRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveGetPermitImportTemplateRow(GetPermitImportTemplateRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F23200PermitImportTemplate ds = new F23200PermitImportTemplate();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "GetPermitImportTemplateDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SavePermitImportTemplateDataTable : global::System.Data.TypedTableBase<SavePermitImportTemplateRow> {
            
            private global::System.Data.DataColumn columnTemplateName;
            
            private global::System.Data.DataColumn columnTypeID;
            
            private global::System.Data.DataColumn columnDescription;
            
            private global::System.Data.DataColumn columnFilePath;
            
            private global::System.Data.DataColumn columnParcelNumber_Pos;
            
            private global::System.Data.DataColumn columnParcelNumber_Wid;
            
            private global::System.Data.DataColumn columnRollYear_Pos;
            
            private global::System.Data.DataColumn columnRollYear_Wid;
            
            private global::System.Data.DataColumn columnPermitNumber_Pos;
            
            private global::System.Data.DataColumn columnPermitNumber_Wid;
            
            private global::System.Data.DataColumn columnDateOpened_Pos;
            
            private global::System.Data.DataColumn columnDateOpened_Wid;
            
            private global::System.Data.DataColumn columnDateLastVisit_Pos;
            
            private global::System.Data.DataColumn columnDateLastVisit_Wid;
            
            private global::System.Data.DataColumn columnDateClosed_Pos;
            
            private global::System.Data.DataColumn columnDateClosed_Wid;
            
            private global::System.Data.DataColumn columnEstValue_Pos;
            
            private global::System.Data.DataColumn columnEstValue_Wid;
            
            private global::System.Data.DataColumn columnAssignedAppraiserUserName_Pos;
            
            private global::System.Data.DataColumn columnAssignedAppraiserUserName_Wid;
            
            private global::System.Data.DataColumn columnPermitType_Pos;
            
            private global::System.Data.DataColumn columnPermitType_Wid;
            
            private global::System.Data.DataColumn columnPercentComplete_Pos;
            
            private global::System.Data.DataColumn columnPercentComplete_Wid;
            
            private global::System.Data.DataColumn columnPermitDescription_Pos;
            
            private global::System.Data.DataColumn columnPermitDescription_Wid;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SavePermitImportTemplateDataTable() {
                this.TableName = "SavePermitImportTemplate";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SavePermitImportTemplateDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SavePermitImportTemplateDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TemplateNameColumn {
                get {
                    return this.columnTemplateName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TypeIDColumn {
                get {
                    return this.columnTypeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FilePathColumn {
                get {
                    return this.columnFilePath;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ParcelNumber_PosColumn {
                get {
                    return this.columnParcelNumber_Pos;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ParcelNumber_WidColumn {
                get {
                    return this.columnParcelNumber_Wid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RollYear_PosColumn {
                get {
                    return this.columnRollYear_Pos;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RollYear_WidColumn {
                get {
                    return this.columnRollYear_Wid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PermitNumber_PosColumn {
                get {
                    return this.columnPermitNumber_Pos;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PermitNumber_WidColumn {
                get {
                    return this.columnPermitNumber_Wid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DateOpened_PosColumn {
                get {
                    return this.columnDateOpened_Pos;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DateOpened_WidColumn {
                get {
                    return this.columnDateOpened_Wid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DateLastVisit_PosColumn {
                get {
                    return this.columnDateLastVisit_Pos;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DateLastVisit_WidColumn {
                get {
                    return this.columnDateLastVisit_Wid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DateClosed_PosColumn {
                get {
                    return this.columnDateClosed_Pos;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DateClosed_WidColumn {
                get {
                    return this.columnDateClosed_Wid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EstValue_PosColumn {
                get {
                    return this.columnEstValue_Pos;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EstValue_WidColumn {
                get {
                    return this.columnEstValue_Wid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AssignedAppraiserUserName_PosColumn {
                get {
                    return this.columnAssignedAppraiserUserName_Pos;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AssignedAppraiserUserName_WidColumn {
                get {
                    return this.columnAssignedAppraiserUserName_Wid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PermitType_PosColumn {
                get {
                    return this.columnPermitType_Pos;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PermitType_WidColumn {
                get {
                    return this.columnPermitType_Wid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PercentComplete_PosColumn {
                get {
                    return this.columnPercentComplete_Pos;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PercentComplete_WidColumn {
                get {
                    return this.columnPercentComplete_Wid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PermitDescription_PosColumn {
                get {
                    return this.columnPermitDescription_Pos;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PermitDescription_WidColumn {
                get {
                    return this.columnPermitDescription_Wid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SavePermitImportTemplateRow this[int index] {
                get {
                    return ((SavePermitImportTemplateRow)(this.Rows[index]));
                }
            }
            
            public event SavePermitImportTemplateRowChangeEventHandler SavePermitImportTemplateRowChanging;
            
            public event SavePermitImportTemplateRowChangeEventHandler SavePermitImportTemplateRowChanged;
            
            public event SavePermitImportTemplateRowChangeEventHandler SavePermitImportTemplateRowDeleting;
            
            public event SavePermitImportTemplateRowChangeEventHandler SavePermitImportTemplateRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSavePermitImportTemplateRow(SavePermitImportTemplateRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SavePermitImportTemplateRow AddSavePermitImportTemplateRow(
                        string TemplateName, 
                        int TypeID, 
                        string Description, 
                        string FilePath, 
                        int ParcelNumber_Pos, 
                        int ParcelNumber_Wid, 
                        int RollYear_Pos, 
                        int RollYear_Wid, 
                        int PermitNumber_Pos, 
                        int PermitNumber_Wid, 
                        int DateOpened_Pos, 
                        int DateOpened_Wid, 
                        int DateLastVisit_Pos, 
                        int DateLastVisit_Wid, 
                        int DateClosed_Pos, 
                        int DateClosed_Wid, 
                        int EstValue_Pos, 
                        int EstValue_Wid, 
                        int AssignedAppraiserUserName_Pos, 
                        int AssignedAppraiserUserName_Wid, 
                        int PermitType_Pos, 
                        int PermitType_Wid, 
                        int PercentComplete_Pos, 
                        int PercentComplete_Wid, 
                        int PermitDescription_Pos, 
                        int PermitDescription_Wid) {
                SavePermitImportTemplateRow rowSavePermitImportTemplateRow = ((SavePermitImportTemplateRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        TemplateName,
                        TypeID,
                        Description,
                        FilePath,
                        ParcelNumber_Pos,
                        ParcelNumber_Wid,
                        RollYear_Pos,
                        RollYear_Wid,
                        PermitNumber_Pos,
                        PermitNumber_Wid,
                        DateOpened_Pos,
                        DateOpened_Wid,
                        DateLastVisit_Pos,
                        DateLastVisit_Wid,
                        DateClosed_Pos,
                        DateClosed_Wid,
                        EstValue_Pos,
                        EstValue_Wid,
                        AssignedAppraiserUserName_Pos,
                        AssignedAppraiserUserName_Wid,
                        PermitType_Pos,
                        PermitType_Wid,
                        PercentComplete_Pos,
                        PercentComplete_Wid,
                        PermitDescription_Pos,
                        PermitDescription_Wid};
                rowSavePermitImportTemplateRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowSavePermitImportTemplateRow);
                return rowSavePermitImportTemplateRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                SavePermitImportTemplateDataTable cln = ((SavePermitImportTemplateDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new SavePermitImportTemplateDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnTemplateName = base.Columns["TemplateName"];
                this.columnTypeID = base.Columns["TypeID"];
                this.columnDescription = base.Columns["Description"];
                this.columnFilePath = base.Columns["FilePath"];
                this.columnParcelNumber_Pos = base.Columns["ParcelNumber_Pos"];
                this.columnParcelNumber_Wid = base.Columns["ParcelNumber_Wid"];
                this.columnRollYear_Pos = base.Columns["RollYear_Pos"];
                this.columnRollYear_Wid = base.Columns["RollYear_Wid"];
                this.columnPermitNumber_Pos = base.Columns["PermitNumber_Pos"];
                this.columnPermitNumber_Wid = base.Columns["PermitNumber_Wid"];
                this.columnDateOpened_Pos = base.Columns["DateOpened_Pos"];
                this.columnDateOpened_Wid = base.Columns["DateOpened_Wid"];
                this.columnDateLastVisit_Pos = base.Columns["DateLastVisit_Pos"];
                this.columnDateLastVisit_Wid = base.Columns["DateLastVisit_Wid"];
                this.columnDateClosed_Pos = base.Columns["DateClosed_Pos"];
                this.columnDateClosed_Wid = base.Columns["DateClosed_Wid"];
                this.columnEstValue_Pos = base.Columns["EstValue_Pos"];
                this.columnEstValue_Wid = base.Columns["EstValue_Wid"];
                this.columnAssignedAppraiserUserName_Pos = base.Columns["AssignedAppraiserUserName_Pos"];
                this.columnAssignedAppraiserUserName_Wid = base.Columns["AssignedAppraiserUserName_Wid"];
                this.columnPermitType_Pos = base.Columns["PermitType_Pos"];
                this.columnPermitType_Wid = base.Columns["PermitType_Wid"];
                this.columnPercentComplete_Pos = base.Columns["PercentComplete_Pos"];
                this.columnPercentComplete_Wid = base.Columns["PercentComplete_Wid"];
                this.columnPermitDescription_Pos = base.Columns["PermitDescription_Pos"];
                this.columnPermitDescription_Wid = base.Columns["PermitDescription_Wid"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnTemplateName = new global::System.Data.DataColumn("TemplateName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTemplateName);
                this.columnTypeID = new global::System.Data.DataColumn("TypeID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTypeID);
                this.columnDescription = new global::System.Data.DataColumn("Description", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescription);
                this.columnFilePath = new global::System.Data.DataColumn("FilePath", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFilePath);
                this.columnParcelNumber_Pos = new global::System.Data.DataColumn("ParcelNumber_Pos", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnParcelNumber_Pos);
                this.columnParcelNumber_Wid = new global::System.Data.DataColumn("ParcelNumber_Wid", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnParcelNumber_Wid);
                this.columnRollYear_Pos = new global::System.Data.DataColumn("RollYear_Pos", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRollYear_Pos);
                this.columnRollYear_Wid = new global::System.Data.DataColumn("RollYear_Wid", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRollYear_Wid);
                this.columnPermitNumber_Pos = new global::System.Data.DataColumn("PermitNumber_Pos", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPermitNumber_Pos);
                this.columnPermitNumber_Wid = new global::System.Data.DataColumn("PermitNumber_Wid", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPermitNumber_Wid);
                this.columnDateOpened_Pos = new global::System.Data.DataColumn("DateOpened_Pos", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDateOpened_Pos);
                this.columnDateOpened_Wid = new global::System.Data.DataColumn("DateOpened_Wid", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDateOpened_Wid);
                this.columnDateLastVisit_Pos = new global::System.Data.DataColumn("DateLastVisit_Pos", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDateLastVisit_Pos);
                this.columnDateLastVisit_Wid = new global::System.Data.DataColumn("DateLastVisit_Wid", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDateLastVisit_Wid);
                this.columnDateClosed_Pos = new global::System.Data.DataColumn("DateClosed_Pos", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDateClosed_Pos);
                this.columnDateClosed_Wid = new global::System.Data.DataColumn("DateClosed_Wid", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDateClosed_Wid);
                this.columnEstValue_Pos = new global::System.Data.DataColumn("EstValue_Pos", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEstValue_Pos);
                this.columnEstValue_Wid = new global::System.Data.DataColumn("EstValue_Wid", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEstValue_Wid);
                this.columnAssignedAppraiserUserName_Pos = new global::System.Data.DataColumn("AssignedAppraiserUserName_Pos", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAssignedAppraiserUserName_Pos);
                this.columnAssignedAppraiserUserName_Wid = new global::System.Data.DataColumn("AssignedAppraiserUserName_Wid", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAssignedAppraiserUserName_Wid);
                this.columnPermitType_Pos = new global::System.Data.DataColumn("PermitType_Pos", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPermitType_Pos);
                this.columnPermitType_Wid = new global::System.Data.DataColumn("PermitType_Wid", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPermitType_Wid);
                this.columnPercentComplete_Pos = new global::System.Data.DataColumn("PercentComplete_Pos", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPercentComplete_Pos);
                this.columnPercentComplete_Wid = new global::System.Data.DataColumn("PercentComplete_Wid", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPercentComplete_Wid);
                this.columnPermitDescription_Pos = new global::System.Data.DataColumn("PermitDescription_Pos", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPermitDescription_Pos);
                this.columnPermitDescription_Wid = new global::System.Data.DataColumn("PermitDescription_Wid", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPermitDescription_Wid);
                this.columnTemplateName.AllowDBNull = false;
                this.columnTemplateName.MaxLength = 50;
                this.columnTypeID.AllowDBNull = false;
                this.columnDescription.MaxLength = 250;
                this.columnFilePath.AllowDBNull = false;
                this.columnFilePath.MaxLength = 250;
                this.columnDateOpened_Wid.Caption = "BankCode_pos";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SavePermitImportTemplateRow NewSavePermitImportTemplateRow() {
                return ((SavePermitImportTemplateRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new SavePermitImportTemplateRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(SavePermitImportTemplateRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SavePermitImportTemplateRowChanged != null)) {
                    this.SavePermitImportTemplateRowChanged(this, new SavePermitImportTemplateRowChangeEvent(((SavePermitImportTemplateRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SavePermitImportTemplateRowChanging != null)) {
                    this.SavePermitImportTemplateRowChanging(this, new SavePermitImportTemplateRowChangeEvent(((SavePermitImportTemplateRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SavePermitImportTemplateRowDeleted != null)) {
                    this.SavePermitImportTemplateRowDeleted(this, new SavePermitImportTemplateRowChangeEvent(((SavePermitImportTemplateRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SavePermitImportTemplateRowDeleting != null)) {
                    this.SavePermitImportTemplateRowDeleting(this, new SavePermitImportTemplateRowChangeEvent(((SavePermitImportTemplateRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSavePermitImportTemplateRow(SavePermitImportTemplateRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F23200PermitImportTemplate ds = new F23200PermitImportTemplate();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SavePermitImportTemplateDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ListPermitImportFileTypeRow : global::System.Data.DataRow {
            
            private ListPermitImportFileTypeDataTable tableListPermitImportFileType;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListPermitImportFileTypeRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableListPermitImportFileType = ((ListPermitImportFileTypeDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte TypeID {
                get {
                    return ((byte)(this[this.tableListPermitImportFileType.TypeIDColumn]));
                }
                set {
                    this[this.tableListPermitImportFileType.TypeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TypeName {
                get {
                    return ((string)(this[this.tableListPermitImportFileType.TypeNameColumn]));
                }
                set {
                    this[this.tableListPermitImportFileType.TypeNameColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class GetPermitImportTemplateRow : global::System.Data.DataRow {
            
            private GetPermitImportTemplateDataTable tableGetPermitImportTemplate;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetPermitImportTemplateRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableGetPermitImportTemplate = ((GetPermitImportTemplateDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TemplateID {
                get {
                    return ((int)(this[this.tableGetPermitImportTemplate.TemplateIDColumn]));
                }
                set {
                    this[this.tableGetPermitImportTemplate.TemplateIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TemplateName {
                get {
                    return ((string)(this[this.tableGetPermitImportTemplate.TemplateNameColumn]));
                }
                set {
                    this[this.tableGetPermitImportTemplate.TemplateNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte TypeID {
                get {
                    return ((byte)(this[this.tableGetPermitImportTemplate.TypeIDColumn]));
                }
                set {
                    this[this.tableGetPermitImportTemplate.TypeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TypeName {
                get {
                    return ((string)(this[this.tableGetPermitImportTemplate.TypeNameColumn]));
                }
                set {
                    this[this.tableGetPermitImportTemplate.TypeNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Description {
                get {
                    try {
                        return ((string)(this[this.tableGetPermitImportTemplate.DescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Description\' in table \'GetPermitImportTemplate\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetPermitImportTemplate.DescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FilePath {
                get {
                    return ((string)(this[this.tableGetPermitImportTemplate.FilePathColumn]));
                }
                set {
                    this[this.tableGetPermitImportTemplate.FilePathColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short ParcelNumber_Pos {
                get {
                    try {
                        return ((short)(this[this.tableGetPermitImportTemplate.ParcelNumber_PosColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ParcelNumber_Pos\' in table \'GetPermitImportTemplate\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableGetPermitImportTemplate.ParcelNumber_PosColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short ParcelNumber_Wid {
                get {
                    try {
                        return ((short)(this[this.tableGetPermitImportTemplate.ParcelNumber_WidColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ParcelNumber_Wid\' in table \'GetPermitImportTemplate\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableGetPermitImportTemplate.ParcelNumber_WidColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short RollYear_Pos {
                get {
                    try {
                        return ((short)(this[this.tableGetPermitImportTemplate.RollYear_PosColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RollYear_Pos\' in table \'GetPermitImportTemplate\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableGetPermitImportTemplate.RollYear_PosColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short RollYear_Wid {
                get {
                    try {
                        return ((short)(this[this.tableGetPermitImportTemplate.RollYear_WidColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RollYear_Wid\' in table \'GetPermitImportTemplate\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableGetPermitImportTemplate.RollYear_WidColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PermitNumber_Pos {
                get {
                    try {
                        return ((int)(this[this.tableGetPermitImportTemplate.PermitNumber_PosColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PermitNumber_Pos\' in table \'GetPermitImportTemplate\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableGetPermitImportTemplate.PermitNumber_PosColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short PermitNumber_Wid {
                get {
                    try {
                        return ((short)(this[this.tableGetPermitImportTemplate.PermitNumber_WidColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PermitNumber_Wid\' in table \'GetPermitImportTemplate\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableGetPermitImportTemplate.PermitNumber_WidColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short DateOpened_Pos {
                get {
                    try {
                        return ((short)(this[this.tableGetPermitImportTemplate.DateOpened_PosColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DateOpened_Pos\' in table \'GetPermitImportTemplate\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableGetPermitImportTemplate.DateOpened_PosColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short DateOpened_Wid {
                get {
                    try {
                        return ((short)(this[this.tableGetPermitImportTemplate.DateOpened_WidColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DateOpened_Wid\' in table \'GetPermitImportTemplate\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableGetPermitImportTemplate.DateOpened_WidColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short DateClosed_Pos {
                get {
                    try {
                        return ((short)(this[this.tableGetPermitImportTemplate.DateClosed_PosColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DateClosed_Pos\' in table \'GetPermitImportTemplate\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableGetPermitImportTemplate.DateClosed_PosColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short DateClosed_Wid {
                get {
                    try {
                        return ((short)(this[this.tableGetPermitImportTemplate.DateClosed_WidColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DateClosed_Wid\' in table \'GetPermitImportTemplate\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableGetPermitImportTemplate.DateClosed_WidColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int EstValue_Pos {
                get {
                    try {
                        return ((int)(this[this.tableGetPermitImportTemplate.EstValue_PosColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EstValue_Pos\' in table \'GetPermitImportTemplate\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableGetPermitImportTemplate.EstValue_PosColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short EstValue_Wid {
                get {
                    try {
                        return ((short)(this[this.tableGetPermitImportTemplate.EstValue_WidColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EstValue_Wid\' in table \'GetPermitImportTemplate\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableGetPermitImportTemplate.EstValue_WidColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short AssignedAppraiserUserName_Pos {
                get {
                    try {
                        return ((short)(this[this.tableGetPermitImportTemplate.AssignedAppraiserUserName_PosColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AssignedAppraiserUserName_Pos\' in table \'GetPermitImportTem" +
                                "plate\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetPermitImportTemplate.AssignedAppraiserUserName_PosColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short AssignedAppraiserUserName_Wid {
                get {
                    try {
                        return ((short)(this[this.tableGetPermitImportTemplate.AssignedAppraiserUserName_WidColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AssignedAppraiserUserName_Wid\' in table \'GetPermitImportTem" +
                                "plate\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetPermitImportTemplate.AssignedAppraiserUserName_WidColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short PermitType_Pos {
                get {
                    try {
                        return ((short)(this[this.tableGetPermitImportTemplate.PermitType_PosColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PermitType_Pos\' in table \'GetPermitImportTemplate\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableGetPermitImportTemplate.PermitType_PosColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short PermitType_Wid {
                get {
                    try {
                        return ((short)(this[this.tableGetPermitImportTemplate.PermitType_WidColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PermitType_Wid\' in table \'GetPermitImportTemplate\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableGetPermitImportTemplate.PermitType_WidColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PercentComplete_Pos {
                get {
                    try {
                        return ((int)(this[this.tableGetPermitImportTemplate.PercentComplete_PosColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PercentComplete_Pos\' in table \'GetPermitImportTemplate\' is " +
                                "DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetPermitImportTemplate.PercentComplete_PosColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PercentComplete_Wid {
                get {
                    try {
                        return ((int)(this[this.tableGetPermitImportTemplate.PercentComplete_WidColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PercentComplete_Wid\' in table \'GetPermitImportTemplate\' is " +
                                "DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetPermitImportTemplate.PercentComplete_WidColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PermitDescription_Pos {
                get {
                    try {
                        return ((int)(this[this.tableGetPermitImportTemplate.PermitDescription_PosColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PermitDescription_Pos\' in table \'GetPermitImportTemplate\' i" +
                                "s DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetPermitImportTemplate.PermitDescription_PosColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PermitDescription_Wid {
                get {
                    try {
                        return ((int)(this[this.tableGetPermitImportTemplate.PermitDescription_WidColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PermitDescription_Wid\' in table \'GetPermitImportTemplate\' i" +
                                "s DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetPermitImportTemplate.PermitDescription_WidColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DateLastVisit_Pos {
                get {
                    try {
                        return ((string)(this[this.tableGetPermitImportTemplate.DateLastVisit_PosColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DateLastVisit_Pos\' in table \'GetPermitImportTemplate\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tableGetPermitImportTemplate.DateLastVisit_PosColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DateLastVisit_Wid {
                get {
                    try {
                        return ((string)(this[this.tableGetPermitImportTemplate.DateLastVisit_WidColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DateLastVisit_Wid\' in table \'GetPermitImportTemplate\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tableGetPermitImportTemplate.DateLastVisit_WidColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDescriptionNull() {
                return this.IsNull(this.tableGetPermitImportTemplate.DescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDescriptionNull() {
                this[this.tableGetPermitImportTemplate.DescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsParcelNumber_PosNull() {
                return this.IsNull(this.tableGetPermitImportTemplate.ParcelNumber_PosColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetParcelNumber_PosNull() {
                this[this.tableGetPermitImportTemplate.ParcelNumber_PosColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsParcelNumber_WidNull() {
                return this.IsNull(this.tableGetPermitImportTemplate.ParcelNumber_WidColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetParcelNumber_WidNull() {
                this[this.tableGetPermitImportTemplate.ParcelNumber_WidColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRollYear_PosNull() {
                return this.IsNull(this.tableGetPermitImportTemplate.RollYear_PosColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRollYear_PosNull() {
                this[this.tableGetPermitImportTemplate.RollYear_PosColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRollYear_WidNull() {
                return this.IsNull(this.tableGetPermitImportTemplate.RollYear_WidColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRollYear_WidNull() {
                this[this.tableGetPermitImportTemplate.RollYear_WidColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPermitNumber_PosNull() {
                return this.IsNull(this.tableGetPermitImportTemplate.PermitNumber_PosColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPermitNumber_PosNull() {
                this[this.tableGetPermitImportTemplate.PermitNumber_PosColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPermitNumber_WidNull() {
                return this.IsNull(this.tableGetPermitImportTemplate.PermitNumber_WidColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPermitNumber_WidNull() {
                this[this.tableGetPermitImportTemplate.PermitNumber_WidColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDateOpened_PosNull() {
                return this.IsNull(this.tableGetPermitImportTemplate.DateOpened_PosColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDateOpened_PosNull() {
                this[this.tableGetPermitImportTemplate.DateOpened_PosColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDateOpened_WidNull() {
                return this.IsNull(this.tableGetPermitImportTemplate.DateOpened_WidColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDateOpened_WidNull() {
                this[this.tableGetPermitImportTemplate.DateOpened_WidColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDateClosed_PosNull() {
                return this.IsNull(this.tableGetPermitImportTemplate.DateClosed_PosColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDateClosed_PosNull() {
                this[this.tableGetPermitImportTemplate.DateClosed_PosColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDateClosed_WidNull() {
                return this.IsNull(this.tableGetPermitImportTemplate.DateClosed_WidColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDateClosed_WidNull() {
                this[this.tableGetPermitImportTemplate.DateClosed_WidColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEstValue_PosNull() {
                return this.IsNull(this.tableGetPermitImportTemplate.EstValue_PosColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEstValue_PosNull() {
                this[this.tableGetPermitImportTemplate.EstValue_PosColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEstValue_WidNull() {
                return this.IsNull(this.tableGetPermitImportTemplate.EstValue_WidColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEstValue_WidNull() {
                this[this.tableGetPermitImportTemplate.EstValue_WidColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAssignedAppraiserUserName_PosNull() {
                return this.IsNull(this.tableGetPermitImportTemplate.AssignedAppraiserUserName_PosColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAssignedAppraiserUserName_PosNull() {
                this[this.tableGetPermitImportTemplate.AssignedAppraiserUserName_PosColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAssignedAppraiserUserName_WidNull() {
                return this.IsNull(this.tableGetPermitImportTemplate.AssignedAppraiserUserName_WidColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAssignedAppraiserUserName_WidNull() {
                this[this.tableGetPermitImportTemplate.AssignedAppraiserUserName_WidColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPermitType_PosNull() {
                return this.IsNull(this.tableGetPermitImportTemplate.PermitType_PosColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPermitType_PosNull() {
                this[this.tableGetPermitImportTemplate.PermitType_PosColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPermitType_WidNull() {
                return this.IsNull(this.tableGetPermitImportTemplate.PermitType_WidColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPermitType_WidNull() {
                this[this.tableGetPermitImportTemplate.PermitType_WidColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPercentComplete_PosNull() {
                return this.IsNull(this.tableGetPermitImportTemplate.PercentComplete_PosColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPercentComplete_PosNull() {
                this[this.tableGetPermitImportTemplate.PercentComplete_PosColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPercentComplete_WidNull() {
                return this.IsNull(this.tableGetPermitImportTemplate.PercentComplete_WidColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPercentComplete_WidNull() {
                this[this.tableGetPermitImportTemplate.PercentComplete_WidColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPermitDescription_PosNull() {
                return this.IsNull(this.tableGetPermitImportTemplate.PermitDescription_PosColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPermitDescription_PosNull() {
                this[this.tableGetPermitImportTemplate.PermitDescription_PosColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPermitDescription_WidNull() {
                return this.IsNull(this.tableGetPermitImportTemplate.PermitDescription_WidColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPermitDescription_WidNull() {
                this[this.tableGetPermitImportTemplate.PermitDescription_WidColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDateLastVisit_PosNull() {
                return this.IsNull(this.tableGetPermitImportTemplate.DateLastVisit_PosColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDateLastVisit_PosNull() {
                this[this.tableGetPermitImportTemplate.DateLastVisit_PosColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDateLastVisit_WidNull() {
                return this.IsNull(this.tableGetPermitImportTemplate.DateLastVisit_WidColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDateLastVisit_WidNull() {
                this[this.tableGetPermitImportTemplate.DateLastVisit_WidColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SavePermitImportTemplateRow : global::System.Data.DataRow {
            
            private SavePermitImportTemplateDataTable tableSavePermitImportTemplate;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SavePermitImportTemplateRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSavePermitImportTemplate = ((SavePermitImportTemplateDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TemplateName {
                get {
                    return ((string)(this[this.tableSavePermitImportTemplate.TemplateNameColumn]));
                }
                set {
                    this[this.tableSavePermitImportTemplate.TemplateNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TypeID {
                get {
                    return ((int)(this[this.tableSavePermitImportTemplate.TypeIDColumn]));
                }
                set {
                    this[this.tableSavePermitImportTemplate.TypeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Description {
                get {
                    try {
                        return ((string)(this[this.tableSavePermitImportTemplate.DescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Description\' in table \'SavePermitImportTemplate\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableSavePermitImportTemplate.DescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FilePath {
                get {
                    return ((string)(this[this.tableSavePermitImportTemplate.FilePathColumn]));
                }
                set {
                    this[this.tableSavePermitImportTemplate.FilePathColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ParcelNumber_Pos {
                get {
                    try {
                        return ((int)(this[this.tableSavePermitImportTemplate.ParcelNumber_PosColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ParcelNumber_Pos\' in table \'SavePermitImportTemplate\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tableSavePermitImportTemplate.ParcelNumber_PosColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ParcelNumber_Wid {
                get {
                    try {
                        return ((int)(this[this.tableSavePermitImportTemplate.ParcelNumber_WidColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ParcelNumber_Wid\' in table \'SavePermitImportTemplate\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tableSavePermitImportTemplate.ParcelNumber_WidColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RollYear_Pos {
                get {
                    try {
                        return ((int)(this[this.tableSavePermitImportTemplate.RollYear_PosColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RollYear_Pos\' in table \'SavePermitImportTemplate\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableSavePermitImportTemplate.RollYear_PosColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RollYear_Wid {
                get {
                    try {
                        return ((int)(this[this.tableSavePermitImportTemplate.RollYear_WidColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RollYear_Wid\' in table \'SavePermitImportTemplate\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableSavePermitImportTemplate.RollYear_WidColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PermitNumber_Pos {
                get {
                    try {
                        return ((int)(this[this.tableSavePermitImportTemplate.PermitNumber_PosColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PermitNumber_Pos\' in table \'SavePermitImportTemplate\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tableSavePermitImportTemplate.PermitNumber_PosColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PermitNumber_Wid {
                get {
                    try {
                        return ((int)(this[this.tableSavePermitImportTemplate.PermitNumber_WidColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PermitNumber_Wid\' in table \'SavePermitImportTemplate\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tableSavePermitImportTemplate.PermitNumber_WidColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int DateOpened_Pos {
                get {
                    try {
                        return ((int)(this[this.tableSavePermitImportTemplate.DateOpened_PosColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DateOpened_Pos\' in table \'SavePermitImportTemplate\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableSavePermitImportTemplate.DateOpened_PosColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int DateOpened_Wid {
                get {
                    try {
                        return ((int)(this[this.tableSavePermitImportTemplate.DateOpened_WidColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DateOpened_Wid\' in table \'SavePermitImportTemplate\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableSavePermitImportTemplate.DateOpened_WidColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int DateLastVisit_Pos {
                get {
                    try {
                        return ((int)(this[this.tableSavePermitImportTemplate.DateLastVisit_PosColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DateLastVisit_Pos\' in table \'SavePermitImportTemplate\' is D" +
                                "BNull.", e);
                    }
                }
                set {
                    this[this.tableSavePermitImportTemplate.DateLastVisit_PosColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int DateLastVisit_Wid {
                get {
                    try {
                        return ((int)(this[this.tableSavePermitImportTemplate.DateLastVisit_WidColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DateLastVisit_Wid\' in table \'SavePermitImportTemplate\' is D" +
                                "BNull.", e);
                    }
                }
                set {
                    this[this.tableSavePermitImportTemplate.DateLastVisit_WidColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int DateClosed_Pos {
                get {
                    try {
                        return ((int)(this[this.tableSavePermitImportTemplate.DateClosed_PosColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DateClosed_Pos\' in table \'SavePermitImportTemplate\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableSavePermitImportTemplate.DateClosed_PosColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int DateClosed_Wid {
                get {
                    try {
                        return ((int)(this[this.tableSavePermitImportTemplate.DateClosed_WidColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DateClosed_Wid\' in table \'SavePermitImportTemplate\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableSavePermitImportTemplate.DateClosed_WidColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int EstValue_Pos {
                get {
                    try {
                        return ((int)(this[this.tableSavePermitImportTemplate.EstValue_PosColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EstValue_Pos\' in table \'SavePermitImportTemplate\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableSavePermitImportTemplate.EstValue_PosColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int EstValue_Wid {
                get {
                    try {
                        return ((int)(this[this.tableSavePermitImportTemplate.EstValue_WidColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EstValue_Wid\' in table \'SavePermitImportTemplate\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableSavePermitImportTemplate.EstValue_WidColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int AssignedAppraiserUserName_Pos {
                get {
                    try {
                        return ((int)(this[this.tableSavePermitImportTemplate.AssignedAppraiserUserName_PosColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AssignedAppraiserUserName_Pos\' in table \'SavePermitImportTe" +
                                "mplate\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSavePermitImportTemplate.AssignedAppraiserUserName_PosColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int AssignedAppraiserUserName_Wid {
                get {
                    try {
                        return ((int)(this[this.tableSavePermitImportTemplate.AssignedAppraiserUserName_WidColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AssignedAppraiserUserName_Wid\' in table \'SavePermitImportTe" +
                                "mplate\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSavePermitImportTemplate.AssignedAppraiserUserName_WidColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PermitType_Pos {
                get {
                    try {
                        return ((int)(this[this.tableSavePermitImportTemplate.PermitType_PosColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PermitType_Pos\' in table \'SavePermitImportTemplate\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableSavePermitImportTemplate.PermitType_PosColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PermitType_Wid {
                get {
                    try {
                        return ((int)(this[this.tableSavePermitImportTemplate.PermitType_WidColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PermitType_Wid\' in table \'SavePermitImportTemplate\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableSavePermitImportTemplate.PermitType_WidColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PercentComplete_Pos {
                get {
                    try {
                        return ((int)(this[this.tableSavePermitImportTemplate.PercentComplete_PosColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PercentComplete_Pos\' in table \'SavePermitImportTemplate\' is" +
                                " DBNull.", e);
                    }
                }
                set {
                    this[this.tableSavePermitImportTemplate.PercentComplete_PosColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PercentComplete_Wid {
                get {
                    try {
                        return ((int)(this[this.tableSavePermitImportTemplate.PercentComplete_WidColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PercentComplete_Wid\' in table \'SavePermitImportTemplate\' is" +
                                " DBNull.", e);
                    }
                }
                set {
                    this[this.tableSavePermitImportTemplate.PercentComplete_WidColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PermitDescription_Pos {
                get {
                    try {
                        return ((int)(this[this.tableSavePermitImportTemplate.PermitDescription_PosColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PermitDescription_Pos\' in table \'SavePermitImportTemplate\' " +
                                "is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSavePermitImportTemplate.PermitDescription_PosColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PermitDescription_Wid {
                get {
                    try {
                        return ((int)(this[this.tableSavePermitImportTemplate.PermitDescription_WidColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PermitDescription_Wid\' in table \'SavePermitImportTemplate\' " +
                                "is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSavePermitImportTemplate.PermitDescription_WidColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDescriptionNull() {
                return this.IsNull(this.tableSavePermitImportTemplate.DescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDescriptionNull() {
                this[this.tableSavePermitImportTemplate.DescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsParcelNumber_PosNull() {
                return this.IsNull(this.tableSavePermitImportTemplate.ParcelNumber_PosColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetParcelNumber_PosNull() {
                this[this.tableSavePermitImportTemplate.ParcelNumber_PosColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsParcelNumber_WidNull() {
                return this.IsNull(this.tableSavePermitImportTemplate.ParcelNumber_WidColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetParcelNumber_WidNull() {
                this[this.tableSavePermitImportTemplate.ParcelNumber_WidColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRollYear_PosNull() {
                return this.IsNull(this.tableSavePermitImportTemplate.RollYear_PosColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRollYear_PosNull() {
                this[this.tableSavePermitImportTemplate.RollYear_PosColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRollYear_WidNull() {
                return this.IsNull(this.tableSavePermitImportTemplate.RollYear_WidColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRollYear_WidNull() {
                this[this.tableSavePermitImportTemplate.RollYear_WidColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPermitNumber_PosNull() {
                return this.IsNull(this.tableSavePermitImportTemplate.PermitNumber_PosColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPermitNumber_PosNull() {
                this[this.tableSavePermitImportTemplate.PermitNumber_PosColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPermitNumber_WidNull() {
                return this.IsNull(this.tableSavePermitImportTemplate.PermitNumber_WidColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPermitNumber_WidNull() {
                this[this.tableSavePermitImportTemplate.PermitNumber_WidColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDateOpened_PosNull() {
                return this.IsNull(this.tableSavePermitImportTemplate.DateOpened_PosColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDateOpened_PosNull() {
                this[this.tableSavePermitImportTemplate.DateOpened_PosColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDateOpened_WidNull() {
                return this.IsNull(this.tableSavePermitImportTemplate.DateOpened_WidColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDateOpened_WidNull() {
                this[this.tableSavePermitImportTemplate.DateOpened_WidColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDateLastVisit_PosNull() {
                return this.IsNull(this.tableSavePermitImportTemplate.DateLastVisit_PosColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDateLastVisit_PosNull() {
                this[this.tableSavePermitImportTemplate.DateLastVisit_PosColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDateLastVisit_WidNull() {
                return this.IsNull(this.tableSavePermitImportTemplate.DateLastVisit_WidColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDateLastVisit_WidNull() {
                this[this.tableSavePermitImportTemplate.DateLastVisit_WidColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDateClosed_PosNull() {
                return this.IsNull(this.tableSavePermitImportTemplate.DateClosed_PosColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDateClosed_PosNull() {
                this[this.tableSavePermitImportTemplate.DateClosed_PosColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDateClosed_WidNull() {
                return this.IsNull(this.tableSavePermitImportTemplate.DateClosed_WidColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDateClosed_WidNull() {
                this[this.tableSavePermitImportTemplate.DateClosed_WidColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEstValue_PosNull() {
                return this.IsNull(this.tableSavePermitImportTemplate.EstValue_PosColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEstValue_PosNull() {
                this[this.tableSavePermitImportTemplate.EstValue_PosColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEstValue_WidNull() {
                return this.IsNull(this.tableSavePermitImportTemplate.EstValue_WidColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEstValue_WidNull() {
                this[this.tableSavePermitImportTemplate.EstValue_WidColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAssignedAppraiserUserName_PosNull() {
                return this.IsNull(this.tableSavePermitImportTemplate.AssignedAppraiserUserName_PosColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAssignedAppraiserUserName_PosNull() {
                this[this.tableSavePermitImportTemplate.AssignedAppraiserUserName_PosColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAssignedAppraiserUserName_WidNull() {
                return this.IsNull(this.tableSavePermitImportTemplate.AssignedAppraiserUserName_WidColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAssignedAppraiserUserName_WidNull() {
                this[this.tableSavePermitImportTemplate.AssignedAppraiserUserName_WidColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPermitType_PosNull() {
                return this.IsNull(this.tableSavePermitImportTemplate.PermitType_PosColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPermitType_PosNull() {
                this[this.tableSavePermitImportTemplate.PermitType_PosColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPermitType_WidNull() {
                return this.IsNull(this.tableSavePermitImportTemplate.PermitType_WidColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPermitType_WidNull() {
                this[this.tableSavePermitImportTemplate.PermitType_WidColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPercentComplete_PosNull() {
                return this.IsNull(this.tableSavePermitImportTemplate.PercentComplete_PosColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPercentComplete_PosNull() {
                this[this.tableSavePermitImportTemplate.PercentComplete_PosColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPercentComplete_WidNull() {
                return this.IsNull(this.tableSavePermitImportTemplate.PercentComplete_WidColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPercentComplete_WidNull() {
                this[this.tableSavePermitImportTemplate.PercentComplete_WidColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPermitDescription_PosNull() {
                return this.IsNull(this.tableSavePermitImportTemplate.PermitDescription_PosColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPermitDescription_PosNull() {
                this[this.tableSavePermitImportTemplate.PermitDescription_PosColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPermitDescription_WidNull() {
                return this.IsNull(this.tableSavePermitImportTemplate.PermitDescription_WidColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPermitDescription_WidNull() {
                this[this.tableSavePermitImportTemplate.PermitDescription_WidColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ListPermitImportFileTypeRowChangeEvent : global::System.EventArgs {
            
            private ListPermitImportFileTypeRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListPermitImportFileTypeRowChangeEvent(ListPermitImportFileTypeRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListPermitImportFileTypeRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class GetPermitImportTemplateRowChangeEvent : global::System.EventArgs {
            
            private GetPermitImportTemplateRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetPermitImportTemplateRowChangeEvent(GetPermitImportTemplateRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetPermitImportTemplateRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SavePermitImportTemplateRowChangeEvent : global::System.EventArgs {
            
            private SavePermitImportTemplateRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SavePermitImportTemplateRowChangeEvent(SavePermitImportTemplateRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SavePermitImportTemplateRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace TerraScan.BusinessEntities.F23200PermitImportTemplateTableAdapters {
    
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class ListPermitImportFileTypeTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ListPermitImportFileTypeTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "ListPermitImportFileType";
            tableMapping.ColumnMappings.Add("TypeID", "TypeID");
            tableMapping.ColumnMappings.Add("TypeName", "TypeName");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::TerraScan.BusinessEntities.Properties.Settings.Default.T2TerrascanConnectionString2;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "dbo.f1010_pclst_MortgageImportFileType";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.StoredProcedure;
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RETURN_VALUE", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.ReturnValue, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(F23200PermitImportTemplate.ListPermitImportFileTypeDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual F23200PermitImportTemplate.ListPermitImportFileTypeDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            F23200PermitImportTemplate.ListPermitImportFileTypeDataTable dataTable = new F23200PermitImportTemplate.ListPermitImportFileTypeDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD" +
        "esigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")]
    public partial class TableAdapterManager : global::System.ComponentModel.Component {
        
        private UpdateOrderOption _updateOrder;
        
        private bool _backupDataSetBeforeUpdate;
        
        private global::System.Data.IDbConnection _connection;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public UpdateOrderOption UpdateOrder {
            get {
                return this._updateOrder;
            }
            set {
                this._updateOrder = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool BackupDataSetBeforeUpdate {
            get {
                return this._backupDataSetBeforeUpdate;
            }
            set {
                this._backupDataSetBeforeUpdate = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public global::System.Data.IDbConnection Connection {
            get {
                if ((this._connection != null)) {
                    return this._connection;
                }
                return null;
            }
            set {
                this._connection = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public int TableAdapterInstanceCount {
            get {
                int count = 0;
                return count;
            }
        }
        
        /// <summary>
        ///Update rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateUpdatedRows(F23200PermitImportTemplate dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            return result;
        }
        
        /// <summary>
        ///Insert rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateInsertedRows(F23200PermitImportTemplate dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            return result;
        }
        
        /// <summary>
        ///Delete rows in bottom-up order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateDeletedRows(F23200PermitImportTemplate dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows) {
            int result = 0;
            return result;
        }
        
        /// <summary>
        ///Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.DataRow[] GetRealUpdatedRows(global::System.Data.DataRow[] updatedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            if (((updatedRows == null) 
                        || (updatedRows.Length < 1))) {
                return updatedRows;
            }
            if (((allAddedRows == null) 
                        || (allAddedRows.Count < 1))) {
                return updatedRows;
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> realUpdatedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            for (int i = 0; (i < updatedRows.Length); i = (i + 1)) {
                global::System.Data.DataRow row = updatedRows[i];
                if ((allAddedRows.Contains(row) == false)) {
                    realUpdatedRows.Add(row);
                }
            }
            return realUpdatedRows.ToArray();
        }
        
        /// <summary>
        ///Update all changes to the dataset.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int UpdateAll(F23200PermitImportTemplate dataSet) {
            if ((dataSet == null)) {
                throw new global::System.ArgumentNullException("dataSet");
            }
            if ((dataSet.HasChanges() == false)) {
                return 0;
            }
            global::System.Data.IDbConnection workConnection = this.Connection;
            if ((workConnection == null)) {
                throw new global::System.ApplicationException("TableAdapterManager contains no connection information. Set each TableAdapterMana" +
                        "ger TableAdapter property to a valid TableAdapter instance.");
            }
            bool workConnOpened = false;
            if (((workConnection.State & global::System.Data.ConnectionState.Broken) 
                        == global::System.Data.ConnectionState.Broken)) {
                workConnection.Close();
            }
            if ((workConnection.State == global::System.Data.ConnectionState.Closed)) {
                workConnection.Open();
                workConnOpened = true;
            }
            global::System.Data.IDbTransaction workTransaction = workConnection.BeginTransaction();
            if ((workTransaction == null)) {
                throw new global::System.ApplicationException("The transaction cannot begin. The current data connection does not support transa" +
                        "ctions or the current state is not allowing the transaction to begin.");
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter> adaptersWithAcceptChangesDuringUpdate = new global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter>();
            global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection> revertConnections = new global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection>();
            int result = 0;
            global::System.Data.DataSet backupDataSet = null;
            if (this.BackupDataSetBeforeUpdate) {
                backupDataSet = new global::System.Data.DataSet();
                backupDataSet.Merge(dataSet);
            }
            try {
                // ---- Prepare for update -----------
                //
                // 
                //---- Perform updates -----------
                //
                if ((this.UpdateOrder == UpdateOrderOption.UpdateInsertDelete)) {
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                }
                else {
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                }
                result = (result + this.UpdateDeletedRows(dataSet, allChangedRows));
                // 
                //---- Commit updates -----------
                //
                workTransaction.Commit();
                if ((0 < allAddedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                    allAddedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
                if ((0 < allChangedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allChangedRows.Count];
                    allChangedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
            }
            catch (global::System.Exception ex) {
                workTransaction.Rollback();
                // ---- Restore the dataset -----------
                if (this.BackupDataSetBeforeUpdate) {
                    global::System.Diagnostics.Debug.Assert((backupDataSet != null));
                    dataSet.Clear();
                    dataSet.Merge(backupDataSet);
                }
                else {
                    if ((0 < allAddedRows.Count)) {
                        global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                        allAddedRows.CopyTo(rows);
                        for (int i = 0; (i < rows.Length); i = (i + 1)) {
                            global::System.Data.DataRow row = rows[i];
                            row.AcceptChanges();
                            row.SetAdded();
                        }
                    }
                }
                throw ex;
            }
            finally {
                if (workConnOpened) {
                    workConnection.Close();
                }
                if ((0 < adaptersWithAcceptChangesDuringUpdate.Count)) {
                    global::System.Data.Common.DataAdapter[] adapters = new System.Data.Common.DataAdapter[adaptersWithAcceptChangesDuringUpdate.Count];
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters);
                    for (int i = 0; (i < adapters.Length); i = (i + 1)) {
                        global::System.Data.Common.DataAdapter adapter = adapters[i];
                        adapter.AcceptChangesDuringUpdate = true;
                    }
                }
            }
            return result;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected virtual void SortSelfReferenceRows(global::System.Data.DataRow[] rows, global::System.Data.DataRelation relation, bool childFirst) {
            global::System.Array.Sort<global::System.Data.DataRow>(rows, new SelfReferenceComparer(relation, childFirst));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected virtual bool MatchTableAdapterConnection(global::System.Data.IDbConnection inputConnection) {
            if ((this._connection != null)) {
                return true;
            }
            if (((this.Connection == null) 
                        || (inputConnection == null))) {
                return true;
            }
            if (string.Equals(this.Connection.ConnectionString, inputConnection.ConnectionString, global::System.StringComparison.Ordinal)) {
                return true;
            }
            return false;
        }
        
        /// <summary>
        ///Update Order Option
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public enum UpdateOrderOption {
            
            InsertUpdateDelete = 0,
            
            UpdateInsertDelete = 1,
        }
        
        /// <summary>
        ///Used to sort self-referenced table's rows
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        private class SelfReferenceComparer : object, global::System.Collections.Generic.IComparer<global::System.Data.DataRow> {
            
            private global::System.Data.DataRelation _relation;
            
            private int _childFirst;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SelfReferenceComparer(global::System.Data.DataRelation relation, bool childFirst) {
                this._relation = relation;
                if (childFirst) {
                    this._childFirst = -1;
                }
                else {
                    this._childFirst = 1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool IsChildAndParent(global::System.Data.DataRow child, global::System.Data.DataRow parent) {
                global::System.Diagnostics.Debug.Assert((child != null));
                global::System.Diagnostics.Debug.Assert((parent != null));
                global::System.Data.DataRow newParent = child.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                for (
                ; ((newParent != null) 
                            && ((object.ReferenceEquals(newParent, child) == false) 
                            && (object.ReferenceEquals(newParent, parent) == false))); 
                ) {
                    newParent = newParent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                }
                if ((newParent == null)) {
                    for (newParent = child.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original); ((newParent != null) 
                                && ((object.ReferenceEquals(newParent, child) == false) 
                                && (object.ReferenceEquals(newParent, parent) == false))); 
                    ) {
                        newParent = newParent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original);
                    }
                }
                if (object.ReferenceEquals(newParent, parent)) {
                    return true;
                }
                return false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Compare(global::System.Data.DataRow row1, global::System.Data.DataRow row2) {
                if (object.ReferenceEquals(row1, row2)) {
                    return 0;
                }
                if ((row1 == null)) {
                    return -1;
                }
                if ((row2 == null)) {
                    return 1;
                }

                // Is row1 the child or grandchild of row2
                if (this.IsChildAndParent(row1, row2)) {
                    return this._childFirst;
                }

                // Is row2 the child or grandchild of row1
                if (this.IsChildAndParent(row2, row1)) {
                    return (-1 * this._childFirst);
                }
                return 0;
            }
        }
    }
}

#pragma warning restore 1591