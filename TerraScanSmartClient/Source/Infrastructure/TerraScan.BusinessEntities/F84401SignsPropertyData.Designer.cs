//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3082
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace TerraScan.BusinessEntities {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("F84401SignsPropertyData")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class F84401SignsPropertyData : global::System.Data.DataSet {
        
        private GetSignsPropertyDataTable tableGetSignsProperty;
        
        private SignsPropertyDataTable tableSignsProperty;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public F84401SignsPropertyData() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected F84401SignsPropertyData(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["GetSignsProperty"] != null)) {
                    base.Tables.Add(new GetSignsPropertyDataTable(ds.Tables["GetSignsProperty"]));
                }
                if ((ds.Tables["SignsProperty"] != null)) {
                    base.Tables.Add(new SignsPropertyDataTable(ds.Tables["SignsProperty"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GetSignsPropertyDataTable GetSignsProperty {
            get {
                return this.tableGetSignsProperty;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SignsPropertyDataTable SignsProperty {
            get {
                return this.tableSignsProperty;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            F84401SignsPropertyData cln = ((F84401SignsPropertyData)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["GetSignsProperty"] != null)) {
                    base.Tables.Add(new GetSignsPropertyDataTable(ds.Tables["GetSignsProperty"]));
                }
                if ((ds.Tables["SignsProperty"] != null)) {
                    base.Tables.Add(new SignsPropertyDataTable(ds.Tables["SignsProperty"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableGetSignsProperty = ((GetSignsPropertyDataTable)(base.Tables["GetSignsProperty"]));
            if ((initTable == true)) {
                if ((this.tableGetSignsProperty != null)) {
                    this.tableGetSignsProperty.InitVars();
                }
            }
            this.tableSignsProperty = ((SignsPropertyDataTable)(base.Tables["SignsProperty"]));
            if ((initTable == true)) {
                if ((this.tableSignsProperty != null)) {
                    this.tableSignsProperty.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "F84401SignsPropertyData";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/F84401SignsPropertyData.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableGetSignsProperty = new GetSignsPropertyDataTable();
            base.Tables.Add(this.tableGetSignsProperty);
            this.tableSignsProperty = new SignsPropertyDataTable();
            base.Tables.Add(this.tableSignsProperty);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeGetSignsProperty() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSignsProperty() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            F84401SignsPropertyData ds = new F84401SignsPropertyData();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void GetSignsPropertyRowChangeEventHandler(object sender, GetSignsPropertyRowChangeEvent e);
        
        public delegate void SignsPropertyRowChangeEventHandler(object sender, SignsPropertyRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class GetSignsPropertyDataTable : global::System.Data.TypedTableBase<GetSignsPropertyRow> {
            
            private global::System.Data.DataColumn columnCID;
            
            private global::System.Data.DataColumn columnFeatureClassID;
            
            private global::System.Data.DataColumn columnSignText;
            
            private global::System.Data.DataColumn columnSign01_ID;
            
            private global::System.Data.DataColumn columnSign02_ID;
            
            private global::System.Data.DataColumn columnSign03_ID;
            
            private global::System.Data.DataColumn columnSign04_ID;
            
            private global::System.Data.DataColumn columnSign05_ID;
            
            private global::System.Data.DataColumn columnSign06_ID;
            
            private global::System.Data.DataColumn columnSign07_ID;
            
            private global::System.Data.DataColumn columnPrimary_StreetID;
            
            private global::System.Data.DataColumn columnCross_StreetID;
            
            private global::System.Data.DataColumn columnOffset;
            
            private global::System.Data.DataColumn columnDistFromCrossSt;
            
            private global::System.Data.DataColumn columnAspect;
            
            private global::System.Data.DataColumn columnWidth;
            
            private global::System.Data.DataColumn columnHeight;
            
            private global::System.Data.DataColumn columnGPX_X;
            
            private global::System.Data.DataColumn columnGPX_Y;
            
            private global::System.Data.DataColumn columnSign01Value;
            
            private global::System.Data.DataColumn columnSign02Value;
            
            private global::System.Data.DataColumn columnSign03Value;
            
            private global::System.Data.DataColumn columnSign04Value;
            
            private global::System.Data.DataColumn columnSign05Value;
            
            private global::System.Data.DataColumn columnSign06Value;
            
            private global::System.Data.DataColumn columnSign07Value;
            
            private global::System.Data.DataColumn columnPrimarySTValue;
            
            private global::System.Data.DataColumn columnCrossSTValue;
            
            private global::System.Data.DataColumn columnSign01LabelValue;
            
            private global::System.Data.DataColumn columnSign02LabelValue;
            
            private global::System.Data.DataColumn columnSign03LabelValue;
            
            private global::System.Data.DataColumn columnSign04LabelValue;
            
            private global::System.Data.DataColumn columnSign05LabelValue;
            
            private global::System.Data.DataColumn columnSign06LabelValue;
            
            private global::System.Data.DataColumn columnSign07LabelValue;
            
            private global::System.Data.DataColumn columnSignHeight;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetSignsPropertyDataTable() {
                this.TableName = "GetSignsProperty";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetSignsPropertyDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected GetSignsPropertyDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CIDColumn {
                get {
                    return this.columnCID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FeatureClassIDColumn {
                get {
                    return this.columnFeatureClassID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SignTextColumn {
                get {
                    return this.columnSignText;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Sign01_IDColumn {
                get {
                    return this.columnSign01_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Sign02_IDColumn {
                get {
                    return this.columnSign02_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Sign03_IDColumn {
                get {
                    return this.columnSign03_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Sign04_IDColumn {
                get {
                    return this.columnSign04_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Sign05_IDColumn {
                get {
                    return this.columnSign05_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Sign06_IDColumn {
                get {
                    return this.columnSign06_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Sign07_IDColumn {
                get {
                    return this.columnSign07_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Primary_StreetIDColumn {
                get {
                    return this.columnPrimary_StreetID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Cross_StreetIDColumn {
                get {
                    return this.columnCross_StreetID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OffsetColumn {
                get {
                    return this.columnOffset;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DistFromCrossStColumn {
                get {
                    return this.columnDistFromCrossSt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AspectColumn {
                get {
                    return this.columnAspect;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WidthColumn {
                get {
                    return this.columnWidth;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HeightColumn {
                get {
                    return this.columnHeight;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GPX_XColumn {
                get {
                    return this.columnGPX_X;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GPX_YColumn {
                get {
                    return this.columnGPX_Y;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Sign01ValueColumn {
                get {
                    return this.columnSign01Value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Sign02ValueColumn {
                get {
                    return this.columnSign02Value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Sign03ValueColumn {
                get {
                    return this.columnSign03Value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Sign04ValueColumn {
                get {
                    return this.columnSign04Value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Sign05ValueColumn {
                get {
                    return this.columnSign05Value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Sign06ValueColumn {
                get {
                    return this.columnSign06Value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Sign07ValueColumn {
                get {
                    return this.columnSign07Value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PrimarySTValueColumn {
                get {
                    return this.columnPrimarySTValue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CrossSTValueColumn {
                get {
                    return this.columnCrossSTValue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Sign01LabelValueColumn {
                get {
                    return this.columnSign01LabelValue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Sign02LabelValueColumn {
                get {
                    return this.columnSign02LabelValue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Sign03LabelValueColumn {
                get {
                    return this.columnSign03LabelValue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Sign04LabelValueColumn {
                get {
                    return this.columnSign04LabelValue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Sign05LabelValueColumn {
                get {
                    return this.columnSign05LabelValue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Sign06LabelValueColumn {
                get {
                    return this.columnSign06LabelValue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Sign07LabelValueColumn {
                get {
                    return this.columnSign07LabelValue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SignHeightColumn {
                get {
                    return this.columnSignHeight;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetSignsPropertyRow this[int index] {
                get {
                    return ((GetSignsPropertyRow)(this.Rows[index]));
                }
            }
            
            public event GetSignsPropertyRowChangeEventHandler GetSignsPropertyRowChanging;
            
            public event GetSignsPropertyRowChangeEventHandler GetSignsPropertyRowChanged;
            
            public event GetSignsPropertyRowChangeEventHandler GetSignsPropertyRowDeleting;
            
            public event GetSignsPropertyRowChangeEventHandler GetSignsPropertyRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddGetSignsPropertyRow(GetSignsPropertyRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetSignsPropertyRow AddGetSignsPropertyRow(
                        string CID, 
                        int FeatureClassID, 
                        string SignText, 
                        int Sign01_ID, 
                        int Sign02_ID, 
                        int Sign03_ID, 
                        int Sign04_ID, 
                        int Sign05_ID, 
                        int Sign06_ID, 
                        int Sign07_ID, 
                        int Primary_StreetID, 
                        int Cross_StreetID, 
                        decimal Offset, 
                        decimal DistFromCrossSt, 
                        string Aspect, 
                        decimal Width, 
                        decimal Height, 
                        decimal GPX_X, 
                        decimal GPX_Y, 
                        string Sign01Value, 
                        string Sign02Value, 
                        string Sign03Value, 
                        string Sign04Value, 
                        string Sign05Value, 
                        string Sign06Value, 
                        string Sign07Value, 
                        string PrimarySTValue, 
                        string CrossSTValue, 
                        string Sign01LabelValue, 
                        string Sign02LabelValue, 
                        string Sign03LabelValue, 
                        string Sign04LabelValue, 
                        string Sign05LabelValue, 
                        string Sign06LabelValue, 
                        string Sign07LabelValue, 
                        decimal SignHeight) {
                GetSignsPropertyRow rowGetSignsPropertyRow = ((GetSignsPropertyRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        CID,
                        FeatureClassID,
                        SignText,
                        Sign01_ID,
                        Sign02_ID,
                        Sign03_ID,
                        Sign04_ID,
                        Sign05_ID,
                        Sign06_ID,
                        Sign07_ID,
                        Primary_StreetID,
                        Cross_StreetID,
                        Offset,
                        DistFromCrossSt,
                        Aspect,
                        Width,
                        Height,
                        GPX_X,
                        GPX_Y,
                        Sign01Value,
                        Sign02Value,
                        Sign03Value,
                        Sign04Value,
                        Sign05Value,
                        Sign06Value,
                        Sign07Value,
                        PrimarySTValue,
                        CrossSTValue,
                        Sign01LabelValue,
                        Sign02LabelValue,
                        Sign03LabelValue,
                        Sign04LabelValue,
                        Sign05LabelValue,
                        Sign06LabelValue,
                        Sign07LabelValue,
                        SignHeight};
                rowGetSignsPropertyRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowGetSignsPropertyRow);
                return rowGetSignsPropertyRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                GetSignsPropertyDataTable cln = ((GetSignsPropertyDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new GetSignsPropertyDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCID = base.Columns["CID"];
                this.columnFeatureClassID = base.Columns["FeatureClassID"];
                this.columnSignText = base.Columns["SignText"];
                this.columnSign01_ID = base.Columns["Sign01_ID"];
                this.columnSign02_ID = base.Columns["Sign02_ID"];
                this.columnSign03_ID = base.Columns["Sign03_ID"];
                this.columnSign04_ID = base.Columns["Sign04_ID"];
                this.columnSign05_ID = base.Columns["Sign05_ID"];
                this.columnSign06_ID = base.Columns["Sign06_ID"];
                this.columnSign07_ID = base.Columns["Sign07_ID"];
                this.columnPrimary_StreetID = base.Columns["Primary_StreetID"];
                this.columnCross_StreetID = base.Columns["Cross_StreetID"];
                this.columnOffset = base.Columns["Offset"];
                this.columnDistFromCrossSt = base.Columns["DistFromCrossSt"];
                this.columnAspect = base.Columns["Aspect"];
                this.columnWidth = base.Columns["Width"];
                this.columnHeight = base.Columns["Height"];
                this.columnGPX_X = base.Columns["GPX_X"];
                this.columnGPX_Y = base.Columns["GPX_Y"];
                this.columnSign01Value = base.Columns["Sign01Value"];
                this.columnSign02Value = base.Columns["Sign02Value"];
                this.columnSign03Value = base.Columns["Sign03Value"];
                this.columnSign04Value = base.Columns["Sign04Value"];
                this.columnSign05Value = base.Columns["Sign05Value"];
                this.columnSign06Value = base.Columns["Sign06Value"];
                this.columnSign07Value = base.Columns["Sign07Value"];
                this.columnPrimarySTValue = base.Columns["PrimarySTValue"];
                this.columnCrossSTValue = base.Columns["CrossSTValue"];
                this.columnSign01LabelValue = base.Columns["Sign01LabelValue"];
                this.columnSign02LabelValue = base.Columns["Sign02LabelValue"];
                this.columnSign03LabelValue = base.Columns["Sign03LabelValue"];
                this.columnSign04LabelValue = base.Columns["Sign04LabelValue"];
                this.columnSign05LabelValue = base.Columns["Sign05LabelValue"];
                this.columnSign06LabelValue = base.Columns["Sign06LabelValue"];
                this.columnSign07LabelValue = base.Columns["Sign07LabelValue"];
                this.columnSignHeight = base.Columns["SignHeight"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCID = new global::System.Data.DataColumn("CID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCID);
                this.columnFeatureClassID = new global::System.Data.DataColumn("FeatureClassID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFeatureClassID);
                this.columnSignText = new global::System.Data.DataColumn("SignText", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSignText);
                this.columnSign01_ID = new global::System.Data.DataColumn("Sign01_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSign01_ID);
                this.columnSign02_ID = new global::System.Data.DataColumn("Sign02_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSign02_ID);
                this.columnSign03_ID = new global::System.Data.DataColumn("Sign03_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSign03_ID);
                this.columnSign04_ID = new global::System.Data.DataColumn("Sign04_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSign04_ID);
                this.columnSign05_ID = new global::System.Data.DataColumn("Sign05_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSign05_ID);
                this.columnSign06_ID = new global::System.Data.DataColumn("Sign06_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSign06_ID);
                this.columnSign07_ID = new global::System.Data.DataColumn("Sign07_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSign07_ID);
                this.columnPrimary_StreetID = new global::System.Data.DataColumn("Primary_StreetID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPrimary_StreetID);
                this.columnCross_StreetID = new global::System.Data.DataColumn("Cross_StreetID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCross_StreetID);
                this.columnOffset = new global::System.Data.DataColumn("Offset", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOffset);
                this.columnDistFromCrossSt = new global::System.Data.DataColumn("DistFromCrossSt", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDistFromCrossSt);
                this.columnAspect = new global::System.Data.DataColumn("Aspect", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAspect);
                this.columnWidth = new global::System.Data.DataColumn("Width", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWidth);
                this.columnHeight = new global::System.Data.DataColumn("Height", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHeight);
                this.columnGPX_X = new global::System.Data.DataColumn("GPX_X", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGPX_X);
                this.columnGPX_Y = new global::System.Data.DataColumn("GPX_Y", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGPX_Y);
                this.columnSign01Value = new global::System.Data.DataColumn("Sign01Value", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSign01Value);
                this.columnSign02Value = new global::System.Data.DataColumn("Sign02Value", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSign02Value);
                this.columnSign03Value = new global::System.Data.DataColumn("Sign03Value", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSign03Value);
                this.columnSign04Value = new global::System.Data.DataColumn("Sign04Value", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSign04Value);
                this.columnSign05Value = new global::System.Data.DataColumn("Sign05Value", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSign05Value);
                this.columnSign06Value = new global::System.Data.DataColumn("Sign06Value", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSign06Value);
                this.columnSign07Value = new global::System.Data.DataColumn("Sign07Value", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSign07Value);
                this.columnPrimarySTValue = new global::System.Data.DataColumn("PrimarySTValue", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPrimarySTValue);
                this.columnCrossSTValue = new global::System.Data.DataColumn("CrossSTValue", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCrossSTValue);
                this.columnSign01LabelValue = new global::System.Data.DataColumn("Sign01LabelValue", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSign01LabelValue);
                this.columnSign02LabelValue = new global::System.Data.DataColumn("Sign02LabelValue", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSign02LabelValue);
                this.columnSign03LabelValue = new global::System.Data.DataColumn("Sign03LabelValue", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSign03LabelValue);
                this.columnSign04LabelValue = new global::System.Data.DataColumn("Sign04LabelValue", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSign04LabelValue);
                this.columnSign05LabelValue = new global::System.Data.DataColumn("Sign05LabelValue", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSign05LabelValue);
                this.columnSign06LabelValue = new global::System.Data.DataColumn("Sign06LabelValue", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSign06LabelValue);
                this.columnSign07LabelValue = new global::System.Data.DataColumn("Sign07LabelValue", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSign07LabelValue);
                this.columnSignHeight = new global::System.Data.DataColumn("SignHeight", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSignHeight);
                this.columnCID.MaxLength = 15;
                this.columnSignText.MaxLength = 500;
                this.columnAspect.MaxLength = 15;
                this.columnSign01Value.ReadOnly = true;
                this.columnSign01Value.MaxLength = 50;
                this.columnSign02Value.ReadOnly = true;
                this.columnSign02Value.MaxLength = 50;
                this.columnSign03Value.ReadOnly = true;
                this.columnSign03Value.MaxLength = 50;
                this.columnSign04Value.ReadOnly = true;
                this.columnSign04Value.MaxLength = 50;
                this.columnSign05Value.ReadOnly = true;
                this.columnSign05Value.MaxLength = 50;
                this.columnSign06Value.ReadOnly = true;
                this.columnSign06Value.MaxLength = 50;
                this.columnSign07Value.ReadOnly = true;
                this.columnSign07Value.MaxLength = 50;
                this.columnPrimarySTValue.ReadOnly = true;
                this.columnPrimarySTValue.MaxLength = 75;
                this.columnCrossSTValue.ReadOnly = true;
                this.columnCrossSTValue.MaxLength = 75;
                this.columnSign01LabelValue.ReadOnly = true;
                this.columnSign01LabelValue.MaxLength = 1000;
                this.columnSign02LabelValue.ReadOnly = true;
                this.columnSign02LabelValue.MaxLength = 1000;
                this.columnSign03LabelValue.ReadOnly = true;
                this.columnSign03LabelValue.MaxLength = 1000;
                this.columnSign04LabelValue.ReadOnly = true;
                this.columnSign04LabelValue.MaxLength = 1000;
                this.columnSign05LabelValue.ReadOnly = true;
                this.columnSign05LabelValue.MaxLength = 1000;
                this.columnSign06LabelValue.ReadOnly = true;
                this.columnSign06LabelValue.MaxLength = 1000;
                this.columnSign07LabelValue.ReadOnly = true;
                this.columnSign07LabelValue.MaxLength = 1000;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetSignsPropertyRow NewGetSignsPropertyRow() {
                return ((GetSignsPropertyRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new GetSignsPropertyRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(GetSignsPropertyRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GetSignsPropertyRowChanged != null)) {
                    this.GetSignsPropertyRowChanged(this, new GetSignsPropertyRowChangeEvent(((GetSignsPropertyRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GetSignsPropertyRowChanging != null)) {
                    this.GetSignsPropertyRowChanging(this, new GetSignsPropertyRowChangeEvent(((GetSignsPropertyRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GetSignsPropertyRowDeleted != null)) {
                    this.GetSignsPropertyRowDeleted(this, new GetSignsPropertyRowChangeEvent(((GetSignsPropertyRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GetSignsPropertyRowDeleting != null)) {
                    this.GetSignsPropertyRowDeleting(this, new GetSignsPropertyRowChangeEvent(((GetSignsPropertyRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveGetSignsPropertyRow(GetSignsPropertyRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F84401SignsPropertyData ds = new F84401SignsPropertyData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "GetSignsPropertyDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SignsPropertyDataTable : global::System.Data.TypedTableBase<SignsPropertyRow> {
            
            private global::System.Data.DataColumn columnCID;
            
            private global::System.Data.DataColumn columnFeatureClassID;
            
            private global::System.Data.DataColumn columnSignText;
            
            private global::System.Data.DataColumn columnSign01_ID;
            
            private global::System.Data.DataColumn columnSign02_ID;
            
            private global::System.Data.DataColumn columnSign03_ID;
            
            private global::System.Data.DataColumn columnSign04_ID;
            
            private global::System.Data.DataColumn columnSign05_ID;
            
            private global::System.Data.DataColumn columnSign06_ID;
            
            private global::System.Data.DataColumn columnSign07_ID;
            
            private global::System.Data.DataColumn columnPrimary_StreetID;
            
            private global::System.Data.DataColumn columnCross_StreetID;
            
            private global::System.Data.DataColumn columnOffset;
            
            private global::System.Data.DataColumn columnDistFromCrossSt;
            
            private global::System.Data.DataColumn columnAspect;
            
            private global::System.Data.DataColumn columnWidth;
            
            private global::System.Data.DataColumn columnHeight;
            
            private global::System.Data.DataColumn columnGPX_X;
            
            private global::System.Data.DataColumn columnGPX_Y;
            
            private global::System.Data.DataColumn columnSignHeight;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SignsPropertyDataTable() {
                this.TableName = "SignsProperty";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SignsPropertyDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SignsPropertyDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CIDColumn {
                get {
                    return this.columnCID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FeatureClassIDColumn {
                get {
                    return this.columnFeatureClassID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SignTextColumn {
                get {
                    return this.columnSignText;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Sign01_IDColumn {
                get {
                    return this.columnSign01_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Sign02_IDColumn {
                get {
                    return this.columnSign02_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Sign03_IDColumn {
                get {
                    return this.columnSign03_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Sign04_IDColumn {
                get {
                    return this.columnSign04_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Sign05_IDColumn {
                get {
                    return this.columnSign05_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Sign06_IDColumn {
                get {
                    return this.columnSign06_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Sign07_IDColumn {
                get {
                    return this.columnSign07_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Primary_StreetIDColumn {
                get {
                    return this.columnPrimary_StreetID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Cross_StreetIDColumn {
                get {
                    return this.columnCross_StreetID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OffsetColumn {
                get {
                    return this.columnOffset;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DistFromCrossStColumn {
                get {
                    return this.columnDistFromCrossSt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AspectColumn {
                get {
                    return this.columnAspect;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WidthColumn {
                get {
                    return this.columnWidth;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HeightColumn {
                get {
                    return this.columnHeight;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GPX_XColumn {
                get {
                    return this.columnGPX_X;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GPX_YColumn {
                get {
                    return this.columnGPX_Y;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SignHeightColumn {
                get {
                    return this.columnSignHeight;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SignsPropertyRow this[int index] {
                get {
                    return ((SignsPropertyRow)(this.Rows[index]));
                }
            }
            
            public event SignsPropertyRowChangeEventHandler SignsPropertyRowChanging;
            
            public event SignsPropertyRowChangeEventHandler SignsPropertyRowChanged;
            
            public event SignsPropertyRowChangeEventHandler SignsPropertyRowDeleting;
            
            public event SignsPropertyRowChangeEventHandler SignsPropertyRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSignsPropertyRow(SignsPropertyRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SignsPropertyRow AddSignsPropertyRow(
                        string CID, 
                        int FeatureClassID, 
                        string SignText, 
                        int Sign01_ID, 
                        int Sign02_ID, 
                        int Sign03_ID, 
                        int Sign04_ID, 
                        int Sign05_ID, 
                        int Sign06_ID, 
                        int Sign07_ID, 
                        int Primary_StreetID, 
                        int Cross_StreetID, 
                        decimal Offset, 
                        decimal DistFromCrossSt, 
                        string Aspect, 
                        decimal Width, 
                        decimal Height, 
                        decimal GPX_X, 
                        decimal GPX_Y, 
                        decimal SignHeight) {
                SignsPropertyRow rowSignsPropertyRow = ((SignsPropertyRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        CID,
                        FeatureClassID,
                        SignText,
                        Sign01_ID,
                        Sign02_ID,
                        Sign03_ID,
                        Sign04_ID,
                        Sign05_ID,
                        Sign06_ID,
                        Sign07_ID,
                        Primary_StreetID,
                        Cross_StreetID,
                        Offset,
                        DistFromCrossSt,
                        Aspect,
                        Width,
                        Height,
                        GPX_X,
                        GPX_Y,
                        SignHeight};
                rowSignsPropertyRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowSignsPropertyRow);
                return rowSignsPropertyRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                SignsPropertyDataTable cln = ((SignsPropertyDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new SignsPropertyDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCID = base.Columns["CID"];
                this.columnFeatureClassID = base.Columns["FeatureClassID"];
                this.columnSignText = base.Columns["SignText"];
                this.columnSign01_ID = base.Columns["Sign01_ID"];
                this.columnSign02_ID = base.Columns["Sign02_ID"];
                this.columnSign03_ID = base.Columns["Sign03_ID"];
                this.columnSign04_ID = base.Columns["Sign04_ID"];
                this.columnSign05_ID = base.Columns["Sign05_ID"];
                this.columnSign06_ID = base.Columns["Sign06_ID"];
                this.columnSign07_ID = base.Columns["Sign07_ID"];
                this.columnPrimary_StreetID = base.Columns["Primary_StreetID"];
                this.columnCross_StreetID = base.Columns["Cross_StreetID"];
                this.columnOffset = base.Columns["Offset"];
                this.columnDistFromCrossSt = base.Columns["DistFromCrossSt"];
                this.columnAspect = base.Columns["Aspect"];
                this.columnWidth = base.Columns["Width"];
                this.columnHeight = base.Columns["Height"];
                this.columnGPX_X = base.Columns["GPX_X"];
                this.columnGPX_Y = base.Columns["GPX_Y"];
                this.columnSignHeight = base.Columns["SignHeight"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCID = new global::System.Data.DataColumn("CID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCID);
                this.columnFeatureClassID = new global::System.Data.DataColumn("FeatureClassID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFeatureClassID);
                this.columnSignText = new global::System.Data.DataColumn("SignText", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSignText);
                this.columnSign01_ID = new global::System.Data.DataColumn("Sign01_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSign01_ID);
                this.columnSign02_ID = new global::System.Data.DataColumn("Sign02_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSign02_ID);
                this.columnSign03_ID = new global::System.Data.DataColumn("Sign03_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSign03_ID);
                this.columnSign04_ID = new global::System.Data.DataColumn("Sign04_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSign04_ID);
                this.columnSign05_ID = new global::System.Data.DataColumn("Sign05_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSign05_ID);
                this.columnSign06_ID = new global::System.Data.DataColumn("Sign06_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSign06_ID);
                this.columnSign07_ID = new global::System.Data.DataColumn("Sign07_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSign07_ID);
                this.columnPrimary_StreetID = new global::System.Data.DataColumn("Primary_StreetID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPrimary_StreetID);
                this.columnCross_StreetID = new global::System.Data.DataColumn("Cross_StreetID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCross_StreetID);
                this.columnOffset = new global::System.Data.DataColumn("Offset", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOffset);
                this.columnDistFromCrossSt = new global::System.Data.DataColumn("DistFromCrossSt", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDistFromCrossSt);
                this.columnAspect = new global::System.Data.DataColumn("Aspect", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAspect);
                this.columnWidth = new global::System.Data.DataColumn("Width", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWidth);
                this.columnHeight = new global::System.Data.DataColumn("Height", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHeight);
                this.columnGPX_X = new global::System.Data.DataColumn("GPX_X", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGPX_X);
                this.columnGPX_Y = new global::System.Data.DataColumn("GPX_Y", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGPX_Y);
                this.columnSignHeight = new global::System.Data.DataColumn("SignHeight", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSignHeight);
                this.columnCID.MaxLength = 15;
                this.columnSignText.MaxLength = 500;
                this.columnAspect.MaxLength = 15;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SignsPropertyRow NewSignsPropertyRow() {
                return ((SignsPropertyRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new SignsPropertyRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(SignsPropertyRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SignsPropertyRowChanged != null)) {
                    this.SignsPropertyRowChanged(this, new SignsPropertyRowChangeEvent(((SignsPropertyRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SignsPropertyRowChanging != null)) {
                    this.SignsPropertyRowChanging(this, new SignsPropertyRowChangeEvent(((SignsPropertyRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SignsPropertyRowDeleted != null)) {
                    this.SignsPropertyRowDeleted(this, new SignsPropertyRowChangeEvent(((SignsPropertyRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SignsPropertyRowDeleting != null)) {
                    this.SignsPropertyRowDeleting(this, new SignsPropertyRowChangeEvent(((SignsPropertyRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSignsPropertyRow(SignsPropertyRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F84401SignsPropertyData ds = new F84401SignsPropertyData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SignsPropertyDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class GetSignsPropertyRow : global::System.Data.DataRow {
            
            private GetSignsPropertyDataTable tableGetSignsProperty;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetSignsPropertyRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableGetSignsProperty = ((GetSignsPropertyDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CID {
                get {
                    try {
                        return ((string)(this[this.tableGetSignsProperty.CIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CID\' in table \'GetSignsProperty\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetSignsProperty.CIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int FeatureClassID {
                get {
                    try {
                        return ((int)(this[this.tableGetSignsProperty.FeatureClassIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FeatureClassID\' in table \'GetSignsProperty\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetSignsProperty.FeatureClassIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SignText {
                get {
                    try {
                        return ((string)(this[this.tableGetSignsProperty.SignTextColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SignText\' in table \'GetSignsProperty\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetSignsProperty.SignTextColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Sign01_ID {
                get {
                    try {
                        return ((int)(this[this.tableGetSignsProperty.Sign01_IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Sign01_ID\' in table \'GetSignsProperty\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetSignsProperty.Sign01_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Sign02_ID {
                get {
                    try {
                        return ((int)(this[this.tableGetSignsProperty.Sign02_IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Sign02_ID\' in table \'GetSignsProperty\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetSignsProperty.Sign02_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Sign03_ID {
                get {
                    try {
                        return ((int)(this[this.tableGetSignsProperty.Sign03_IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Sign03_ID\' in table \'GetSignsProperty\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetSignsProperty.Sign03_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Sign04_ID {
                get {
                    try {
                        return ((int)(this[this.tableGetSignsProperty.Sign04_IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Sign04_ID\' in table \'GetSignsProperty\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetSignsProperty.Sign04_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Sign05_ID {
                get {
                    try {
                        return ((int)(this[this.tableGetSignsProperty.Sign05_IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Sign05_ID\' in table \'GetSignsProperty\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetSignsProperty.Sign05_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Sign06_ID {
                get {
                    try {
                        return ((int)(this[this.tableGetSignsProperty.Sign06_IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Sign06_ID\' in table \'GetSignsProperty\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetSignsProperty.Sign06_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Sign07_ID {
                get {
                    try {
                        return ((int)(this[this.tableGetSignsProperty.Sign07_IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Sign07_ID\' in table \'GetSignsProperty\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetSignsProperty.Sign07_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Primary_StreetID {
                get {
                    try {
                        return ((int)(this[this.tableGetSignsProperty.Primary_StreetIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Primary_StreetID\' in table \'GetSignsProperty\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetSignsProperty.Primary_StreetIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Cross_StreetID {
                get {
                    try {
                        return ((int)(this[this.tableGetSignsProperty.Cross_StreetIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Cross_StreetID\' in table \'GetSignsProperty\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetSignsProperty.Cross_StreetIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Offset {
                get {
                    try {
                        return ((decimal)(this[this.tableGetSignsProperty.OffsetColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Offset\' in table \'GetSignsProperty\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetSignsProperty.OffsetColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal DistFromCrossSt {
                get {
                    try {
                        return ((decimal)(this[this.tableGetSignsProperty.DistFromCrossStColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DistFromCrossSt\' in table \'GetSignsProperty\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetSignsProperty.DistFromCrossStColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Aspect {
                get {
                    try {
                        return ((string)(this[this.tableGetSignsProperty.AspectColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Aspect\' in table \'GetSignsProperty\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetSignsProperty.AspectColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Width {
                get {
                    try {
                        return ((decimal)(this[this.tableGetSignsProperty.WidthColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Width\' in table \'GetSignsProperty\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetSignsProperty.WidthColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Height {
                get {
                    try {
                        return ((decimal)(this[this.tableGetSignsProperty.HeightColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Height\' in table \'GetSignsProperty\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetSignsProperty.HeightColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal GPX_X {
                get {
                    try {
                        return ((decimal)(this[this.tableGetSignsProperty.GPX_XColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GPX_X\' in table \'GetSignsProperty\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetSignsProperty.GPX_XColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal GPX_Y {
                get {
                    try {
                        return ((decimal)(this[this.tableGetSignsProperty.GPX_YColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GPX_Y\' in table \'GetSignsProperty\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetSignsProperty.GPX_YColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Sign01Value {
                get {
                    try {
                        return ((string)(this[this.tableGetSignsProperty.Sign01ValueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Sign01Value\' in table \'GetSignsProperty\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetSignsProperty.Sign01ValueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Sign02Value {
                get {
                    try {
                        return ((string)(this[this.tableGetSignsProperty.Sign02ValueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Sign02Value\' in table \'GetSignsProperty\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetSignsProperty.Sign02ValueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Sign03Value {
                get {
                    try {
                        return ((string)(this[this.tableGetSignsProperty.Sign03ValueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Sign03Value\' in table \'GetSignsProperty\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetSignsProperty.Sign03ValueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Sign04Value {
                get {
                    try {
                        return ((string)(this[this.tableGetSignsProperty.Sign04ValueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Sign04Value\' in table \'GetSignsProperty\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetSignsProperty.Sign04ValueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Sign05Value {
                get {
                    try {
                        return ((string)(this[this.tableGetSignsProperty.Sign05ValueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Sign05Value\' in table \'GetSignsProperty\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetSignsProperty.Sign05ValueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Sign06Value {
                get {
                    try {
                        return ((string)(this[this.tableGetSignsProperty.Sign06ValueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Sign06Value\' in table \'GetSignsProperty\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetSignsProperty.Sign06ValueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Sign07Value {
                get {
                    try {
                        return ((string)(this[this.tableGetSignsProperty.Sign07ValueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Sign07Value\' in table \'GetSignsProperty\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetSignsProperty.Sign07ValueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PrimarySTValue {
                get {
                    try {
                        return ((string)(this[this.tableGetSignsProperty.PrimarySTValueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PrimarySTValue\' in table \'GetSignsProperty\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetSignsProperty.PrimarySTValueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CrossSTValue {
                get {
                    try {
                        return ((string)(this[this.tableGetSignsProperty.CrossSTValueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CrossSTValue\' in table \'GetSignsProperty\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetSignsProperty.CrossSTValueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Sign01LabelValue {
                get {
                    try {
                        return ((string)(this[this.tableGetSignsProperty.Sign01LabelValueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Sign01LabelValue\' in table \'GetSignsProperty\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetSignsProperty.Sign01LabelValueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Sign02LabelValue {
                get {
                    try {
                        return ((string)(this[this.tableGetSignsProperty.Sign02LabelValueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Sign02LabelValue\' in table \'GetSignsProperty\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetSignsProperty.Sign02LabelValueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Sign03LabelValue {
                get {
                    try {
                        return ((string)(this[this.tableGetSignsProperty.Sign03LabelValueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Sign03LabelValue\' in table \'GetSignsProperty\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetSignsProperty.Sign03LabelValueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Sign04LabelValue {
                get {
                    try {
                        return ((string)(this[this.tableGetSignsProperty.Sign04LabelValueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Sign04LabelValue\' in table \'GetSignsProperty\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetSignsProperty.Sign04LabelValueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Sign05LabelValue {
                get {
                    try {
                        return ((string)(this[this.tableGetSignsProperty.Sign05LabelValueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Sign05LabelValue\' in table \'GetSignsProperty\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetSignsProperty.Sign05LabelValueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Sign06LabelValue {
                get {
                    try {
                        return ((string)(this[this.tableGetSignsProperty.Sign06LabelValueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Sign06LabelValue\' in table \'GetSignsProperty\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetSignsProperty.Sign06LabelValueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Sign07LabelValue {
                get {
                    try {
                        return ((string)(this[this.tableGetSignsProperty.Sign07LabelValueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Sign07LabelValue\' in table \'GetSignsProperty\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetSignsProperty.Sign07LabelValueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal SignHeight {
                get {
                    try {
                        return ((decimal)(this[this.tableGetSignsProperty.SignHeightColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SignHeight\' in table \'GetSignsProperty\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetSignsProperty.SignHeightColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCIDNull() {
                return this.IsNull(this.tableGetSignsProperty.CIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCIDNull() {
                this[this.tableGetSignsProperty.CIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFeatureClassIDNull() {
                return this.IsNull(this.tableGetSignsProperty.FeatureClassIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFeatureClassIDNull() {
                this[this.tableGetSignsProperty.FeatureClassIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSignTextNull() {
                return this.IsNull(this.tableGetSignsProperty.SignTextColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSignTextNull() {
                this[this.tableGetSignsProperty.SignTextColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSign01_IDNull() {
                return this.IsNull(this.tableGetSignsProperty.Sign01_IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSign01_IDNull() {
                this[this.tableGetSignsProperty.Sign01_IDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSign02_IDNull() {
                return this.IsNull(this.tableGetSignsProperty.Sign02_IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSign02_IDNull() {
                this[this.tableGetSignsProperty.Sign02_IDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSign03_IDNull() {
                return this.IsNull(this.tableGetSignsProperty.Sign03_IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSign03_IDNull() {
                this[this.tableGetSignsProperty.Sign03_IDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSign04_IDNull() {
                return this.IsNull(this.tableGetSignsProperty.Sign04_IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSign04_IDNull() {
                this[this.tableGetSignsProperty.Sign04_IDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSign05_IDNull() {
                return this.IsNull(this.tableGetSignsProperty.Sign05_IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSign05_IDNull() {
                this[this.tableGetSignsProperty.Sign05_IDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSign06_IDNull() {
                return this.IsNull(this.tableGetSignsProperty.Sign06_IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSign06_IDNull() {
                this[this.tableGetSignsProperty.Sign06_IDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSign07_IDNull() {
                return this.IsNull(this.tableGetSignsProperty.Sign07_IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSign07_IDNull() {
                this[this.tableGetSignsProperty.Sign07_IDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPrimary_StreetIDNull() {
                return this.IsNull(this.tableGetSignsProperty.Primary_StreetIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPrimary_StreetIDNull() {
                this[this.tableGetSignsProperty.Primary_StreetIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCross_StreetIDNull() {
                return this.IsNull(this.tableGetSignsProperty.Cross_StreetIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCross_StreetIDNull() {
                this[this.tableGetSignsProperty.Cross_StreetIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOffsetNull() {
                return this.IsNull(this.tableGetSignsProperty.OffsetColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOffsetNull() {
                this[this.tableGetSignsProperty.OffsetColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDistFromCrossStNull() {
                return this.IsNull(this.tableGetSignsProperty.DistFromCrossStColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDistFromCrossStNull() {
                this[this.tableGetSignsProperty.DistFromCrossStColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAspectNull() {
                return this.IsNull(this.tableGetSignsProperty.AspectColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAspectNull() {
                this[this.tableGetSignsProperty.AspectColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWidthNull() {
                return this.IsNull(this.tableGetSignsProperty.WidthColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWidthNull() {
                this[this.tableGetSignsProperty.WidthColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHeightNull() {
                return this.IsNull(this.tableGetSignsProperty.HeightColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHeightNull() {
                this[this.tableGetSignsProperty.HeightColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGPX_XNull() {
                return this.IsNull(this.tableGetSignsProperty.GPX_XColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGPX_XNull() {
                this[this.tableGetSignsProperty.GPX_XColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGPX_YNull() {
                return this.IsNull(this.tableGetSignsProperty.GPX_YColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGPX_YNull() {
                this[this.tableGetSignsProperty.GPX_YColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSign01ValueNull() {
                return this.IsNull(this.tableGetSignsProperty.Sign01ValueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSign01ValueNull() {
                this[this.tableGetSignsProperty.Sign01ValueColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSign02ValueNull() {
                return this.IsNull(this.tableGetSignsProperty.Sign02ValueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSign02ValueNull() {
                this[this.tableGetSignsProperty.Sign02ValueColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSign03ValueNull() {
                return this.IsNull(this.tableGetSignsProperty.Sign03ValueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSign03ValueNull() {
                this[this.tableGetSignsProperty.Sign03ValueColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSign04ValueNull() {
                return this.IsNull(this.tableGetSignsProperty.Sign04ValueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSign04ValueNull() {
                this[this.tableGetSignsProperty.Sign04ValueColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSign05ValueNull() {
                return this.IsNull(this.tableGetSignsProperty.Sign05ValueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSign05ValueNull() {
                this[this.tableGetSignsProperty.Sign05ValueColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSign06ValueNull() {
                return this.IsNull(this.tableGetSignsProperty.Sign06ValueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSign06ValueNull() {
                this[this.tableGetSignsProperty.Sign06ValueColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSign07ValueNull() {
                return this.IsNull(this.tableGetSignsProperty.Sign07ValueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSign07ValueNull() {
                this[this.tableGetSignsProperty.Sign07ValueColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPrimarySTValueNull() {
                return this.IsNull(this.tableGetSignsProperty.PrimarySTValueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPrimarySTValueNull() {
                this[this.tableGetSignsProperty.PrimarySTValueColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCrossSTValueNull() {
                return this.IsNull(this.tableGetSignsProperty.CrossSTValueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCrossSTValueNull() {
                this[this.tableGetSignsProperty.CrossSTValueColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSign01LabelValueNull() {
                return this.IsNull(this.tableGetSignsProperty.Sign01LabelValueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSign01LabelValueNull() {
                this[this.tableGetSignsProperty.Sign01LabelValueColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSign02LabelValueNull() {
                return this.IsNull(this.tableGetSignsProperty.Sign02LabelValueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSign02LabelValueNull() {
                this[this.tableGetSignsProperty.Sign02LabelValueColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSign03LabelValueNull() {
                return this.IsNull(this.tableGetSignsProperty.Sign03LabelValueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSign03LabelValueNull() {
                this[this.tableGetSignsProperty.Sign03LabelValueColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSign04LabelValueNull() {
                return this.IsNull(this.tableGetSignsProperty.Sign04LabelValueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSign04LabelValueNull() {
                this[this.tableGetSignsProperty.Sign04LabelValueColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSign05LabelValueNull() {
                return this.IsNull(this.tableGetSignsProperty.Sign05LabelValueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSign05LabelValueNull() {
                this[this.tableGetSignsProperty.Sign05LabelValueColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSign06LabelValueNull() {
                return this.IsNull(this.tableGetSignsProperty.Sign06LabelValueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSign06LabelValueNull() {
                this[this.tableGetSignsProperty.Sign06LabelValueColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSign07LabelValueNull() {
                return this.IsNull(this.tableGetSignsProperty.Sign07LabelValueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSign07LabelValueNull() {
                this[this.tableGetSignsProperty.Sign07LabelValueColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSignHeightNull() {
                return this.IsNull(this.tableGetSignsProperty.SignHeightColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSignHeightNull() {
                this[this.tableGetSignsProperty.SignHeightColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SignsPropertyRow : global::System.Data.DataRow {
            
            private SignsPropertyDataTable tableSignsProperty;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SignsPropertyRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSignsProperty = ((SignsPropertyDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CID {
                get {
                    try {
                        return ((string)(this[this.tableSignsProperty.CIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CID\' in table \'SignsProperty\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSignsProperty.CIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int FeatureClassID {
                get {
                    try {
                        return ((int)(this[this.tableSignsProperty.FeatureClassIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FeatureClassID\' in table \'SignsProperty\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSignsProperty.FeatureClassIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SignText {
                get {
                    try {
                        return ((string)(this[this.tableSignsProperty.SignTextColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SignText\' in table \'SignsProperty\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSignsProperty.SignTextColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Sign01_ID {
                get {
                    try {
                        return ((int)(this[this.tableSignsProperty.Sign01_IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Sign01_ID\' in table \'SignsProperty\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSignsProperty.Sign01_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Sign02_ID {
                get {
                    try {
                        return ((int)(this[this.tableSignsProperty.Sign02_IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Sign02_ID\' in table \'SignsProperty\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSignsProperty.Sign02_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Sign03_ID {
                get {
                    try {
                        return ((int)(this[this.tableSignsProperty.Sign03_IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Sign03_ID\' in table \'SignsProperty\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSignsProperty.Sign03_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Sign04_ID {
                get {
                    try {
                        return ((int)(this[this.tableSignsProperty.Sign04_IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Sign04_ID\' in table \'SignsProperty\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSignsProperty.Sign04_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Sign05_ID {
                get {
                    try {
                        return ((int)(this[this.tableSignsProperty.Sign05_IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Sign05_ID\' in table \'SignsProperty\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSignsProperty.Sign05_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Sign06_ID {
                get {
                    try {
                        return ((int)(this[this.tableSignsProperty.Sign06_IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Sign06_ID\' in table \'SignsProperty\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSignsProperty.Sign06_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Sign07_ID {
                get {
                    try {
                        return ((int)(this[this.tableSignsProperty.Sign07_IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Sign07_ID\' in table \'SignsProperty\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSignsProperty.Sign07_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Primary_StreetID {
                get {
                    try {
                        return ((int)(this[this.tableSignsProperty.Primary_StreetIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Primary_StreetID\' in table \'SignsProperty\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSignsProperty.Primary_StreetIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Cross_StreetID {
                get {
                    try {
                        return ((int)(this[this.tableSignsProperty.Cross_StreetIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Cross_StreetID\' in table \'SignsProperty\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSignsProperty.Cross_StreetIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Offset {
                get {
                    try {
                        return ((decimal)(this[this.tableSignsProperty.OffsetColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Offset\' in table \'SignsProperty\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSignsProperty.OffsetColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal DistFromCrossSt {
                get {
                    try {
                        return ((decimal)(this[this.tableSignsProperty.DistFromCrossStColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DistFromCrossSt\' in table \'SignsProperty\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSignsProperty.DistFromCrossStColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Aspect {
                get {
                    try {
                        return ((string)(this[this.tableSignsProperty.AspectColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Aspect\' in table \'SignsProperty\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSignsProperty.AspectColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Width {
                get {
                    try {
                        return ((decimal)(this[this.tableSignsProperty.WidthColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Width\' in table \'SignsProperty\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSignsProperty.WidthColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Height {
                get {
                    try {
                        return ((decimal)(this[this.tableSignsProperty.HeightColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Height\' in table \'SignsProperty\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSignsProperty.HeightColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal GPX_X {
                get {
                    try {
                        return ((decimal)(this[this.tableSignsProperty.GPX_XColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GPX_X\' in table \'SignsProperty\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSignsProperty.GPX_XColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal GPX_Y {
                get {
                    try {
                        return ((decimal)(this[this.tableSignsProperty.GPX_YColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GPX_Y\' in table \'SignsProperty\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSignsProperty.GPX_YColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal SignHeight {
                get {
                    try {
                        return ((decimal)(this[this.tableSignsProperty.SignHeightColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SignHeight\' in table \'SignsProperty\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSignsProperty.SignHeightColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCIDNull() {
                return this.IsNull(this.tableSignsProperty.CIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCIDNull() {
                this[this.tableSignsProperty.CIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFeatureClassIDNull() {
                return this.IsNull(this.tableSignsProperty.FeatureClassIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFeatureClassIDNull() {
                this[this.tableSignsProperty.FeatureClassIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSignTextNull() {
                return this.IsNull(this.tableSignsProperty.SignTextColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSignTextNull() {
                this[this.tableSignsProperty.SignTextColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSign01_IDNull() {
                return this.IsNull(this.tableSignsProperty.Sign01_IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSign01_IDNull() {
                this[this.tableSignsProperty.Sign01_IDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSign02_IDNull() {
                return this.IsNull(this.tableSignsProperty.Sign02_IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSign02_IDNull() {
                this[this.tableSignsProperty.Sign02_IDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSign03_IDNull() {
                return this.IsNull(this.tableSignsProperty.Sign03_IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSign03_IDNull() {
                this[this.tableSignsProperty.Sign03_IDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSign04_IDNull() {
                return this.IsNull(this.tableSignsProperty.Sign04_IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSign04_IDNull() {
                this[this.tableSignsProperty.Sign04_IDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSign05_IDNull() {
                return this.IsNull(this.tableSignsProperty.Sign05_IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSign05_IDNull() {
                this[this.tableSignsProperty.Sign05_IDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSign06_IDNull() {
                return this.IsNull(this.tableSignsProperty.Sign06_IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSign06_IDNull() {
                this[this.tableSignsProperty.Sign06_IDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSign07_IDNull() {
                return this.IsNull(this.tableSignsProperty.Sign07_IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSign07_IDNull() {
                this[this.tableSignsProperty.Sign07_IDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPrimary_StreetIDNull() {
                return this.IsNull(this.tableSignsProperty.Primary_StreetIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPrimary_StreetIDNull() {
                this[this.tableSignsProperty.Primary_StreetIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCross_StreetIDNull() {
                return this.IsNull(this.tableSignsProperty.Cross_StreetIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCross_StreetIDNull() {
                this[this.tableSignsProperty.Cross_StreetIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOffsetNull() {
                return this.IsNull(this.tableSignsProperty.OffsetColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOffsetNull() {
                this[this.tableSignsProperty.OffsetColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDistFromCrossStNull() {
                return this.IsNull(this.tableSignsProperty.DistFromCrossStColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDistFromCrossStNull() {
                this[this.tableSignsProperty.DistFromCrossStColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAspectNull() {
                return this.IsNull(this.tableSignsProperty.AspectColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAspectNull() {
                this[this.tableSignsProperty.AspectColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWidthNull() {
                return this.IsNull(this.tableSignsProperty.WidthColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWidthNull() {
                this[this.tableSignsProperty.WidthColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHeightNull() {
                return this.IsNull(this.tableSignsProperty.HeightColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHeightNull() {
                this[this.tableSignsProperty.HeightColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGPX_XNull() {
                return this.IsNull(this.tableSignsProperty.GPX_XColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGPX_XNull() {
                this[this.tableSignsProperty.GPX_XColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGPX_YNull() {
                return this.IsNull(this.tableSignsProperty.GPX_YColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGPX_YNull() {
                this[this.tableSignsProperty.GPX_YColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSignHeightNull() {
                return this.IsNull(this.tableSignsProperty.SignHeightColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSignHeightNull() {
                this[this.tableSignsProperty.SignHeightColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class GetSignsPropertyRowChangeEvent : global::System.EventArgs {
            
            private GetSignsPropertyRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetSignsPropertyRowChangeEvent(GetSignsPropertyRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetSignsPropertyRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SignsPropertyRowChangeEvent : global::System.EventArgs {
            
            private SignsPropertyRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SignsPropertyRowChangeEvent(SignsPropertyRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SignsPropertyRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591