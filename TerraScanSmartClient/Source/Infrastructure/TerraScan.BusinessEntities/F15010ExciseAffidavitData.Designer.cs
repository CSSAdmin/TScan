//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.8689
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace TerraScan.BusinessEntities {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("F15010ExciseAffidavitData")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class F15010ExciseAffidavitData : global::System.Data.DataSet {
        
        private GeneralDataTable tableGeneral;
        
        private PartiesHeaderDataTable tablePartiesHeader;
        
        private ParcelHeaderDataTable tableParcelHeader;
        
        private AffidavitDataTable tableAffidavit;
        
        private AmountDueDataTable tableAmountDue;
        
        private SupplimentDataTable tableSuppliment;
        
        private ListAffidavitStatementIdDataTable tableListAffidavitStatementId;
        
        private ListPartiesOwnerDetailDataTable tableListPartiesOwnerDetail;
        
        private ListAffidavitDistrictSelectionDataTable tableListAffidavitDistrictSelection;
        
        private CalAmountDueDataTable tableCalAmountDue;
        
        private ExciseIndividualTypeDataTable tableExciseIndividualType;
        
        private MobileHomeDataTable tableMobileHome;
        
        private ListPartiesOwnerDetail2DataTable tableListPartiesOwnerDetail2;
        
        private ListParcelDetailTableDataTable tableListParcelDetailTable;
        
        private ListExciseWACDataTable tableListExciseWAC;
        
        private ListExciseIndividualDataTable tableListExciseIndividual;
        
        private ExciseSourceDataTable tableExciseSource;
        
        private ExciseDeedTypeDataTable tableExciseDeedType;
        
        private PartiesOwnerDetailDataTable tablePartiesOwnerDetail;
        
        private ExciseUseCodeDataTable tableExciseUseCode;
        
        private DorSubmitTableDataTable tableDorSubmitTable;
        
        private OpenSpaceDataDataTable tableOpenSpaceData;
        
        private ConfiguredRollYearDataTable tableConfiguredRollYear;
        
        private OwnerStatusLowDataTable tableOwnerStatusLow;
        
        private OwnerStatusHighDataTable tableOwnerStatusHigh;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public F15010ExciseAffidavitData() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected F15010ExciseAffidavitData(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["General"] != null)) {
                    base.Tables.Add(new GeneralDataTable(ds.Tables["General"]));
                }
                if ((ds.Tables["PartiesHeader"] != null)) {
                    base.Tables.Add(new PartiesHeaderDataTable(ds.Tables["PartiesHeader"]));
                }
                if ((ds.Tables["ParcelHeader"] != null)) {
                    base.Tables.Add(new ParcelHeaderDataTable(ds.Tables["ParcelHeader"]));
                }
                if ((ds.Tables["Affidavit"] != null)) {
                    base.Tables.Add(new AffidavitDataTable(ds.Tables["Affidavit"]));
                }
                if ((ds.Tables["AmountDue"] != null)) {
                    base.Tables.Add(new AmountDueDataTable(ds.Tables["AmountDue"]));
                }
                if ((ds.Tables["Suppliment"] != null)) {
                    base.Tables.Add(new SupplimentDataTable(ds.Tables["Suppliment"]));
                }
                if ((ds.Tables["ListAffidavitStatementId"] != null)) {
                    base.Tables.Add(new ListAffidavitStatementIdDataTable(ds.Tables["ListAffidavitStatementId"]));
                }
                if ((ds.Tables["ListPartiesOwnerDetail"] != null)) {
                    base.Tables.Add(new ListPartiesOwnerDetailDataTable(ds.Tables["ListPartiesOwnerDetail"]));
                }
                if ((ds.Tables["ListAffidavitDistrictSelection"] != null)) {
                    base.Tables.Add(new ListAffidavitDistrictSelectionDataTable(ds.Tables["ListAffidavitDistrictSelection"]));
                }
                if ((ds.Tables["CalAmountDue"] != null)) {
                    base.Tables.Add(new CalAmountDueDataTable(ds.Tables["CalAmountDue"]));
                }
                if ((ds.Tables["ExciseIndividualType"] != null)) {
                    base.Tables.Add(new ExciseIndividualTypeDataTable(ds.Tables["ExciseIndividualType"]));
                }
                if ((ds.Tables["MobileHome"] != null)) {
                    base.Tables.Add(new MobileHomeDataTable(ds.Tables["MobileHome"]));
                }
                if ((ds.Tables["ListPartiesOwnerDetail2"] != null)) {
                    base.Tables.Add(new ListPartiesOwnerDetail2DataTable(ds.Tables["ListPartiesOwnerDetail2"]));
                }
                if ((ds.Tables["ListParcelDetailTable"] != null)) {
                    base.Tables.Add(new ListParcelDetailTableDataTable(ds.Tables["ListParcelDetailTable"]));
                }
                if ((ds.Tables["ListExciseWAC"] != null)) {
                    base.Tables.Add(new ListExciseWACDataTable(ds.Tables["ListExciseWAC"]));
                }
                if ((ds.Tables["ListExciseIndividual"] != null)) {
                    base.Tables.Add(new ListExciseIndividualDataTable(ds.Tables["ListExciseIndividual"]));
                }
                if ((ds.Tables["ExciseSource"] != null)) {
                    base.Tables.Add(new ExciseSourceDataTable(ds.Tables["ExciseSource"]));
                }
                if ((ds.Tables["ExciseDeedType"] != null)) {
                    base.Tables.Add(new ExciseDeedTypeDataTable(ds.Tables["ExciseDeedType"]));
                }
                if ((ds.Tables["PartiesOwnerDetail"] != null)) {
                    base.Tables.Add(new PartiesOwnerDetailDataTable(ds.Tables["PartiesOwnerDetail"]));
                }
                if ((ds.Tables["ExciseUseCode"] != null)) {
                    base.Tables.Add(new ExciseUseCodeDataTable(ds.Tables["ExciseUseCode"]));
                }
                if ((ds.Tables["DorSubmitTable"] != null)) {
                    base.Tables.Add(new DorSubmitTableDataTable(ds.Tables["DorSubmitTable"]));
                }
                if ((ds.Tables["OpenSpaceData"] != null)) {
                    base.Tables.Add(new OpenSpaceDataDataTable(ds.Tables["OpenSpaceData"]));
                }
                if ((ds.Tables["ConfiguredRollYear"] != null)) {
                    base.Tables.Add(new ConfiguredRollYearDataTable(ds.Tables["ConfiguredRollYear"]));
                }
                if ((ds.Tables["OwnerStatusLow"] != null)) {
                    base.Tables.Add(new OwnerStatusLowDataTable(ds.Tables["OwnerStatusLow"]));
                }
                if ((ds.Tables["OwnerStatusHigh"] != null)) {
                    base.Tables.Add(new OwnerStatusHighDataTable(ds.Tables["OwnerStatusHigh"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GeneralDataTable General {
            get {
                return this.tableGeneral;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PartiesHeaderDataTable PartiesHeader {
            get {
                return this.tablePartiesHeader;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ParcelHeaderDataTable ParcelHeader {
            get {
                return this.tableParcelHeader;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public AffidavitDataTable Affidavit {
            get {
                return this.tableAffidavit;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public AmountDueDataTable AmountDue {
            get {
                return this.tableAmountDue;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SupplimentDataTable Suppliment {
            get {
                return this.tableSuppliment;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ListAffidavitStatementIdDataTable ListAffidavitStatementId {
            get {
                return this.tableListAffidavitStatementId;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ListPartiesOwnerDetailDataTable ListPartiesOwnerDetail {
            get {
                return this.tableListPartiesOwnerDetail;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ListAffidavitDistrictSelectionDataTable ListAffidavitDistrictSelection {
            get {
                return this.tableListAffidavitDistrictSelection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CalAmountDueDataTable CalAmountDue {
            get {
                return this.tableCalAmountDue;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ExciseIndividualTypeDataTable ExciseIndividualType {
            get {
                return this.tableExciseIndividualType;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public MobileHomeDataTable MobileHome {
            get {
                return this.tableMobileHome;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ListPartiesOwnerDetail2DataTable ListPartiesOwnerDetail2 {
            get {
                return this.tableListPartiesOwnerDetail2;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ListParcelDetailTableDataTable ListParcelDetailTable {
            get {
                return this.tableListParcelDetailTable;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ListExciseWACDataTable ListExciseWAC {
            get {
                return this.tableListExciseWAC;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ListExciseIndividualDataTable ListExciseIndividual {
            get {
                return this.tableListExciseIndividual;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ExciseSourceDataTable ExciseSource {
            get {
                return this.tableExciseSource;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ExciseDeedTypeDataTable ExciseDeedType {
            get {
                return this.tableExciseDeedType;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PartiesOwnerDetailDataTable PartiesOwnerDetail {
            get {
                return this.tablePartiesOwnerDetail;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ExciseUseCodeDataTable ExciseUseCode {
            get {
                return this.tableExciseUseCode;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DorSubmitTableDataTable DorSubmitTable {
            get {
                return this.tableDorSubmitTable;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public OpenSpaceDataDataTable OpenSpaceData {
            get {
                return this.tableOpenSpaceData;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ConfiguredRollYearDataTable ConfiguredRollYear {
            get {
                return this.tableConfiguredRollYear;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public OwnerStatusLowDataTable OwnerStatusLow {
            get {
                return this.tableOwnerStatusLow;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public OwnerStatusHighDataTable OwnerStatusHigh {
            get {
                return this.tableOwnerStatusHigh;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            F15010ExciseAffidavitData cln = ((F15010ExciseAffidavitData)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["General"] != null)) {
                    base.Tables.Add(new GeneralDataTable(ds.Tables["General"]));
                }
                if ((ds.Tables["PartiesHeader"] != null)) {
                    base.Tables.Add(new PartiesHeaderDataTable(ds.Tables["PartiesHeader"]));
                }
                if ((ds.Tables["ParcelHeader"] != null)) {
                    base.Tables.Add(new ParcelHeaderDataTable(ds.Tables["ParcelHeader"]));
                }
                if ((ds.Tables["Affidavit"] != null)) {
                    base.Tables.Add(new AffidavitDataTable(ds.Tables["Affidavit"]));
                }
                if ((ds.Tables["AmountDue"] != null)) {
                    base.Tables.Add(new AmountDueDataTable(ds.Tables["AmountDue"]));
                }
                if ((ds.Tables["Suppliment"] != null)) {
                    base.Tables.Add(new SupplimentDataTable(ds.Tables["Suppliment"]));
                }
                if ((ds.Tables["ListAffidavitStatementId"] != null)) {
                    base.Tables.Add(new ListAffidavitStatementIdDataTable(ds.Tables["ListAffidavitStatementId"]));
                }
                if ((ds.Tables["ListPartiesOwnerDetail"] != null)) {
                    base.Tables.Add(new ListPartiesOwnerDetailDataTable(ds.Tables["ListPartiesOwnerDetail"]));
                }
                if ((ds.Tables["ListAffidavitDistrictSelection"] != null)) {
                    base.Tables.Add(new ListAffidavitDistrictSelectionDataTable(ds.Tables["ListAffidavitDistrictSelection"]));
                }
                if ((ds.Tables["CalAmountDue"] != null)) {
                    base.Tables.Add(new CalAmountDueDataTable(ds.Tables["CalAmountDue"]));
                }
                if ((ds.Tables["ExciseIndividualType"] != null)) {
                    base.Tables.Add(new ExciseIndividualTypeDataTable(ds.Tables["ExciseIndividualType"]));
                }
                if ((ds.Tables["MobileHome"] != null)) {
                    base.Tables.Add(new MobileHomeDataTable(ds.Tables["MobileHome"]));
                }
                if ((ds.Tables["ListPartiesOwnerDetail2"] != null)) {
                    base.Tables.Add(new ListPartiesOwnerDetail2DataTable(ds.Tables["ListPartiesOwnerDetail2"]));
                }
                if ((ds.Tables["ListParcelDetailTable"] != null)) {
                    base.Tables.Add(new ListParcelDetailTableDataTable(ds.Tables["ListParcelDetailTable"]));
                }
                if ((ds.Tables["ListExciseWAC"] != null)) {
                    base.Tables.Add(new ListExciseWACDataTable(ds.Tables["ListExciseWAC"]));
                }
                if ((ds.Tables["ListExciseIndividual"] != null)) {
                    base.Tables.Add(new ListExciseIndividualDataTable(ds.Tables["ListExciseIndividual"]));
                }
                if ((ds.Tables["ExciseSource"] != null)) {
                    base.Tables.Add(new ExciseSourceDataTable(ds.Tables["ExciseSource"]));
                }
                if ((ds.Tables["ExciseDeedType"] != null)) {
                    base.Tables.Add(new ExciseDeedTypeDataTable(ds.Tables["ExciseDeedType"]));
                }
                if ((ds.Tables["PartiesOwnerDetail"] != null)) {
                    base.Tables.Add(new PartiesOwnerDetailDataTable(ds.Tables["PartiesOwnerDetail"]));
                }
                if ((ds.Tables["ExciseUseCode"] != null)) {
                    base.Tables.Add(new ExciseUseCodeDataTable(ds.Tables["ExciseUseCode"]));
                }
                if ((ds.Tables["DorSubmitTable"] != null)) {
                    base.Tables.Add(new DorSubmitTableDataTable(ds.Tables["DorSubmitTable"]));
                }
                if ((ds.Tables["OpenSpaceData"] != null)) {
                    base.Tables.Add(new OpenSpaceDataDataTable(ds.Tables["OpenSpaceData"]));
                }
                if ((ds.Tables["ConfiguredRollYear"] != null)) {
                    base.Tables.Add(new ConfiguredRollYearDataTable(ds.Tables["ConfiguredRollYear"]));
                }
                if ((ds.Tables["OwnerStatusLow"] != null)) {
                    base.Tables.Add(new OwnerStatusLowDataTable(ds.Tables["OwnerStatusLow"]));
                }
                if ((ds.Tables["OwnerStatusHigh"] != null)) {
                    base.Tables.Add(new OwnerStatusHighDataTable(ds.Tables["OwnerStatusHigh"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableGeneral = ((GeneralDataTable)(base.Tables["General"]));
            if ((initTable == true)) {
                if ((this.tableGeneral != null)) {
                    this.tableGeneral.InitVars();
                }
            }
            this.tablePartiesHeader = ((PartiesHeaderDataTable)(base.Tables["PartiesHeader"]));
            if ((initTable == true)) {
                if ((this.tablePartiesHeader != null)) {
                    this.tablePartiesHeader.InitVars();
                }
            }
            this.tableParcelHeader = ((ParcelHeaderDataTable)(base.Tables["ParcelHeader"]));
            if ((initTable == true)) {
                if ((this.tableParcelHeader != null)) {
                    this.tableParcelHeader.InitVars();
                }
            }
            this.tableAffidavit = ((AffidavitDataTable)(base.Tables["Affidavit"]));
            if ((initTable == true)) {
                if ((this.tableAffidavit != null)) {
                    this.tableAffidavit.InitVars();
                }
            }
            this.tableAmountDue = ((AmountDueDataTable)(base.Tables["AmountDue"]));
            if ((initTable == true)) {
                if ((this.tableAmountDue != null)) {
                    this.tableAmountDue.InitVars();
                }
            }
            this.tableSuppliment = ((SupplimentDataTable)(base.Tables["Suppliment"]));
            if ((initTable == true)) {
                if ((this.tableSuppliment != null)) {
                    this.tableSuppliment.InitVars();
                }
            }
            this.tableListAffidavitStatementId = ((ListAffidavitStatementIdDataTable)(base.Tables["ListAffidavitStatementId"]));
            if ((initTable == true)) {
                if ((this.tableListAffidavitStatementId != null)) {
                    this.tableListAffidavitStatementId.InitVars();
                }
            }
            this.tableListPartiesOwnerDetail = ((ListPartiesOwnerDetailDataTable)(base.Tables["ListPartiesOwnerDetail"]));
            if ((initTable == true)) {
                if ((this.tableListPartiesOwnerDetail != null)) {
                    this.tableListPartiesOwnerDetail.InitVars();
                }
            }
            this.tableListAffidavitDistrictSelection = ((ListAffidavitDistrictSelectionDataTable)(base.Tables["ListAffidavitDistrictSelection"]));
            if ((initTable == true)) {
                if ((this.tableListAffidavitDistrictSelection != null)) {
                    this.tableListAffidavitDistrictSelection.InitVars();
                }
            }
            this.tableCalAmountDue = ((CalAmountDueDataTable)(base.Tables["CalAmountDue"]));
            if ((initTable == true)) {
                if ((this.tableCalAmountDue != null)) {
                    this.tableCalAmountDue.InitVars();
                }
            }
            this.tableExciseIndividualType = ((ExciseIndividualTypeDataTable)(base.Tables["ExciseIndividualType"]));
            if ((initTable == true)) {
                if ((this.tableExciseIndividualType != null)) {
                    this.tableExciseIndividualType.InitVars();
                }
            }
            this.tableMobileHome = ((MobileHomeDataTable)(base.Tables["MobileHome"]));
            if ((initTable == true)) {
                if ((this.tableMobileHome != null)) {
                    this.tableMobileHome.InitVars();
                }
            }
            this.tableListPartiesOwnerDetail2 = ((ListPartiesOwnerDetail2DataTable)(base.Tables["ListPartiesOwnerDetail2"]));
            if ((initTable == true)) {
                if ((this.tableListPartiesOwnerDetail2 != null)) {
                    this.tableListPartiesOwnerDetail2.InitVars();
                }
            }
            this.tableListParcelDetailTable = ((ListParcelDetailTableDataTable)(base.Tables["ListParcelDetailTable"]));
            if ((initTable == true)) {
                if ((this.tableListParcelDetailTable != null)) {
                    this.tableListParcelDetailTable.InitVars();
                }
            }
            this.tableListExciseWAC = ((ListExciseWACDataTable)(base.Tables["ListExciseWAC"]));
            if ((initTable == true)) {
                if ((this.tableListExciseWAC != null)) {
                    this.tableListExciseWAC.InitVars();
                }
            }
            this.tableListExciseIndividual = ((ListExciseIndividualDataTable)(base.Tables["ListExciseIndividual"]));
            if ((initTable == true)) {
                if ((this.tableListExciseIndividual != null)) {
                    this.tableListExciseIndividual.InitVars();
                }
            }
            this.tableExciseSource = ((ExciseSourceDataTable)(base.Tables["ExciseSource"]));
            if ((initTable == true)) {
                if ((this.tableExciseSource != null)) {
                    this.tableExciseSource.InitVars();
                }
            }
            this.tableExciseDeedType = ((ExciseDeedTypeDataTable)(base.Tables["ExciseDeedType"]));
            if ((initTable == true)) {
                if ((this.tableExciseDeedType != null)) {
                    this.tableExciseDeedType.InitVars();
                }
            }
            this.tablePartiesOwnerDetail = ((PartiesOwnerDetailDataTable)(base.Tables["PartiesOwnerDetail"]));
            if ((initTable == true)) {
                if ((this.tablePartiesOwnerDetail != null)) {
                    this.tablePartiesOwnerDetail.InitVars();
                }
            }
            this.tableExciseUseCode = ((ExciseUseCodeDataTable)(base.Tables["ExciseUseCode"]));
            if ((initTable == true)) {
                if ((this.tableExciseUseCode != null)) {
                    this.tableExciseUseCode.InitVars();
                }
            }
            this.tableDorSubmitTable = ((DorSubmitTableDataTable)(base.Tables["DorSubmitTable"]));
            if ((initTable == true)) {
                if ((this.tableDorSubmitTable != null)) {
                    this.tableDorSubmitTable.InitVars();
                }
            }
            this.tableOpenSpaceData = ((OpenSpaceDataDataTable)(base.Tables["OpenSpaceData"]));
            if ((initTable == true)) {
                if ((this.tableOpenSpaceData != null)) {
                    this.tableOpenSpaceData.InitVars();
                }
            }
            this.tableConfiguredRollYear = ((ConfiguredRollYearDataTable)(base.Tables["ConfiguredRollYear"]));
            if ((initTable == true)) {
                if ((this.tableConfiguredRollYear != null)) {
                    this.tableConfiguredRollYear.InitVars();
                }
            }
            this.tableOwnerStatusLow = ((OwnerStatusLowDataTable)(base.Tables["OwnerStatusLow"]));
            if ((initTable == true)) {
                if ((this.tableOwnerStatusLow != null)) {
                    this.tableOwnerStatusLow.InitVars();
                }
            }
            this.tableOwnerStatusHigh = ((OwnerStatusHighDataTable)(base.Tables["OwnerStatusHigh"]));
            if ((initTable == true)) {
                if ((this.tableOwnerStatusHigh != null)) {
                    this.tableOwnerStatusHigh.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "F15010ExciseAffidavitData";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/F15010ExciseAffidavitData.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableGeneral = new GeneralDataTable();
            base.Tables.Add(this.tableGeneral);
            this.tablePartiesHeader = new PartiesHeaderDataTable();
            base.Tables.Add(this.tablePartiesHeader);
            this.tableParcelHeader = new ParcelHeaderDataTable();
            base.Tables.Add(this.tableParcelHeader);
            this.tableAffidavit = new AffidavitDataTable();
            base.Tables.Add(this.tableAffidavit);
            this.tableAmountDue = new AmountDueDataTable();
            base.Tables.Add(this.tableAmountDue);
            this.tableSuppliment = new SupplimentDataTable();
            base.Tables.Add(this.tableSuppliment);
            this.tableListAffidavitStatementId = new ListAffidavitStatementIdDataTable();
            base.Tables.Add(this.tableListAffidavitStatementId);
            this.tableListPartiesOwnerDetail = new ListPartiesOwnerDetailDataTable();
            base.Tables.Add(this.tableListPartiesOwnerDetail);
            this.tableListAffidavitDistrictSelection = new ListAffidavitDistrictSelectionDataTable();
            base.Tables.Add(this.tableListAffidavitDistrictSelection);
            this.tableCalAmountDue = new CalAmountDueDataTable();
            base.Tables.Add(this.tableCalAmountDue);
            this.tableExciseIndividualType = new ExciseIndividualTypeDataTable();
            base.Tables.Add(this.tableExciseIndividualType);
            this.tableMobileHome = new MobileHomeDataTable();
            base.Tables.Add(this.tableMobileHome);
            this.tableListPartiesOwnerDetail2 = new ListPartiesOwnerDetail2DataTable();
            base.Tables.Add(this.tableListPartiesOwnerDetail2);
            this.tableListParcelDetailTable = new ListParcelDetailTableDataTable();
            base.Tables.Add(this.tableListParcelDetailTable);
            this.tableListExciseWAC = new ListExciseWACDataTable();
            base.Tables.Add(this.tableListExciseWAC);
            this.tableListExciseIndividual = new ListExciseIndividualDataTable();
            base.Tables.Add(this.tableListExciseIndividual);
            this.tableExciseSource = new ExciseSourceDataTable();
            base.Tables.Add(this.tableExciseSource);
            this.tableExciseDeedType = new ExciseDeedTypeDataTable();
            base.Tables.Add(this.tableExciseDeedType);
            this.tablePartiesOwnerDetail = new PartiesOwnerDetailDataTable();
            base.Tables.Add(this.tablePartiesOwnerDetail);
            this.tableExciseUseCode = new ExciseUseCodeDataTable();
            base.Tables.Add(this.tableExciseUseCode);
            this.tableDorSubmitTable = new DorSubmitTableDataTable();
            base.Tables.Add(this.tableDorSubmitTable);
            this.tableOpenSpaceData = new OpenSpaceDataDataTable();
            base.Tables.Add(this.tableOpenSpaceData);
            this.tableConfiguredRollYear = new ConfiguredRollYearDataTable();
            base.Tables.Add(this.tableConfiguredRollYear);
            this.tableOwnerStatusLow = new OwnerStatusLowDataTable();
            base.Tables.Add(this.tableOwnerStatusLow);
            this.tableOwnerStatusHigh = new OwnerStatusHighDataTable();
            base.Tables.Add(this.tableOwnerStatusHigh);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeGeneral() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializePartiesHeader() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeParcelHeader() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeAffidavit() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeAmountDue() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSuppliment() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeListAffidavitStatementId() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeListPartiesOwnerDetail() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeListAffidavitDistrictSelection() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeCalAmountDue() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeExciseIndividualType() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeMobileHome() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeListPartiesOwnerDetail2() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeListParcelDetailTable() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeListExciseWAC() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeListExciseIndividual() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeExciseSource() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeExciseDeedType() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializePartiesOwnerDetail() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeExciseUseCode() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeDorSubmitTable() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeOpenSpaceData() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeConfiguredRollYear() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeOwnerStatusLow() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeOwnerStatusHigh() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            F15010ExciseAffidavitData ds = new F15010ExciseAffidavitData();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void GeneralRowChangeEventHandler(object sender, GeneralRowChangeEvent e);
        
        public delegate void PartiesHeaderRowChangeEventHandler(object sender, PartiesHeaderRowChangeEvent e);
        
        public delegate void ParcelHeaderRowChangeEventHandler(object sender, ParcelHeaderRowChangeEvent e);
        
        public delegate void AffidavitRowChangeEventHandler(object sender, AffidavitRowChangeEvent e);
        
        public delegate void AmountDueRowChangeEventHandler(object sender, AmountDueRowChangeEvent e);
        
        public delegate void SupplimentRowChangeEventHandler(object sender, SupplimentRowChangeEvent e);
        
        public delegate void ListAffidavitStatementIdRowChangeEventHandler(object sender, ListAffidavitStatementIdRowChangeEvent e);
        
        public delegate void ListPartiesOwnerDetailRowChangeEventHandler(object sender, ListPartiesOwnerDetailRowChangeEvent e);
        
        public delegate void ListAffidavitDistrictSelectionRowChangeEventHandler(object sender, ListAffidavitDistrictSelectionRowChangeEvent e);
        
        public delegate void CalAmountDueRowChangeEventHandler(object sender, CalAmountDueRowChangeEvent e);
        
        public delegate void ExciseIndividualTypeRowChangeEventHandler(object sender, ExciseIndividualTypeRowChangeEvent e);
        
        public delegate void MobileHomeRowChangeEventHandler(object sender, MobileHomeRowChangeEvent e);
        
        public delegate void ListPartiesOwnerDetail2RowChangeEventHandler(object sender, ListPartiesOwnerDetail2RowChangeEvent e);
        
        public delegate void ListParcelDetailTableRowChangeEventHandler(object sender, ListParcelDetailTableRowChangeEvent e);
        
        public delegate void ListExciseWACRowChangeEventHandler(object sender, ListExciseWACRowChangeEvent e);
        
        public delegate void ListExciseIndividualRowChangeEventHandler(object sender, ListExciseIndividualRowChangeEvent e);
        
        public delegate void ExciseSourceRowChangeEventHandler(object sender, ExciseSourceRowChangeEvent e);
        
        public delegate void ExciseDeedTypeRowChangeEventHandler(object sender, ExciseDeedTypeRowChangeEvent e);
        
        public delegate void PartiesOwnerDetailRowChangeEventHandler(object sender, PartiesOwnerDetailRowChangeEvent e);
        
        public delegate void ExciseUseCodeRowChangeEventHandler(object sender, ExciseUseCodeRowChangeEvent e);
        
        public delegate void DorSubmitTableRowChangeEventHandler(object sender, DorSubmitTableRowChangeEvent e);
        
        public delegate void OpenSpaceDataRowChangeEventHandler(object sender, OpenSpaceDataRowChangeEvent e);
        
        public delegate void ConfiguredRollYearRowChangeEventHandler(object sender, ConfiguredRollYearRowChangeEvent e);
        
        public delegate void OwnerStatusLowRowChangeEventHandler(object sender, OwnerStatusLowRowChangeEvent e);
        
        public delegate void OwnerStatusHighRowChangeEventHandler(object sender, OwnerStatusHighRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class GeneralDataTable : global::System.Data.TypedTableBase<GeneralRow> {
            
            private global::System.Data.DataColumn columnStatementID;
            
            private global::System.Data.DataColumn columnStatementNumber;
            
            private global::System.Data.DataColumn columnPaymentDate;
            
            private global::System.Data.DataColumn columnFormDate;
            
            private global::System.Data.DataColumn columnDistrict;
            
            private global::System.Data.DataColumn columnSubmittedBy;
            
            private global::System.Data.DataColumn columnExciseRateID;
            
            private global::System.Data.DataColumn columnSubmittedDate;
            
            private global::System.Data.DataColumn columnSourceID;
            
            private global::System.Data.DataColumn columnSource;
            
            private global::System.Data.DataColumn columnIsExempt;
            
            private global::System.Data.DataColumn columnIsMobileHome;
            
            private global::System.Data.DataColumn columnReceiptID;
            
            private global::System.Data.DataColumn columnReceiptNumber;
            
            private global::System.Data.DataColumn columnRollYear;
            
            private global::System.Data.DataColumn columnDORNote;
            
            private global::System.Data.DataColumn columnDocumentType;
            
            private global::System.Data.DataColumn columnCreatedBy;
            
            private global::System.Data.DataColumn columnDocumentDate;
            
            private global::System.Data.DataColumn columnUserID;
            
            private global::System.Data.DataColumn columnIsEditableDate;
            
            private global::System.Data.DataColumn columnIsVoid;
            
            private global::System.Data.DataColumn columnIsExciseRateDisable;
            
            private global::System.Data.DataColumn columnAmendBy;
            
            private global::System.Data.DataColumn columnAmendDate;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GeneralDataTable() {
                this.TableName = "General";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GeneralDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected GeneralDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StatementIDColumn {
                get {
                    return this.columnStatementID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StatementNumberColumn {
                get {
                    return this.columnStatementNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PaymentDateColumn {
                get {
                    return this.columnPaymentDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FormDateColumn {
                get {
                    return this.columnFormDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DistrictColumn {
                get {
                    return this.columnDistrict;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SubmittedByColumn {
                get {
                    return this.columnSubmittedBy;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ExciseRateIDColumn {
                get {
                    return this.columnExciseRateID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SubmittedDateColumn {
                get {
                    return this.columnSubmittedDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SourceIDColumn {
                get {
                    return this.columnSourceID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SourceColumn {
                get {
                    return this.columnSource;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsExemptColumn {
                get {
                    return this.columnIsExempt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsMobileHomeColumn {
                get {
                    return this.columnIsMobileHome;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ReceiptIDColumn {
                get {
                    return this.columnReceiptID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ReceiptNumberColumn {
                get {
                    return this.columnReceiptNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RollYearColumn {
                get {
                    return this.columnRollYear;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DORNoteColumn {
                get {
                    return this.columnDORNote;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DocumentTypeColumn {
                get {
                    return this.columnDocumentType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CreatedByColumn {
                get {
                    return this.columnCreatedBy;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DocumentDateColumn {
                get {
                    return this.columnDocumentDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UserIDColumn {
                get {
                    return this.columnUserID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsEditableDateColumn {
                get {
                    return this.columnIsEditableDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsVoidColumn {
                get {
                    return this.columnIsVoid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsExciseRateDisableColumn {
                get {
                    return this.columnIsExciseRateDisable;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AmendByColumn {
                get {
                    return this.columnAmendBy;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AmendDateColumn {
                get {
                    return this.columnAmendDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GeneralRow this[int index] {
                get {
                    return ((GeneralRow)(this.Rows[index]));
                }
            }
            
            public event GeneralRowChangeEventHandler GeneralRowChanging;
            
            public event GeneralRowChangeEventHandler GeneralRowChanged;
            
            public event GeneralRowChangeEventHandler GeneralRowDeleting;
            
            public event GeneralRowChangeEventHandler GeneralRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddGeneralRow(GeneralRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GeneralRow AddGeneralRow(
                        int StatementID, 
                        string StatementNumber, 
                        string PaymentDate, 
                        string FormDate, 
                        string District, 
                        int SubmittedBy, 
                        int ExciseRateID, 
                        string SubmittedDate, 
                        long SourceID, 
                        string Source, 
                        bool IsExempt, 
                        bool IsMobileHome, 
                        int ReceiptID, 
                        string ReceiptNumber, 
                        int RollYear, 
                        string DORNote, 
                        string DocumentType, 
                        string CreatedBy, 
                        string DocumentDate, 
                        int UserID, 
                        int IsEditableDate, 
                        byte IsVoid, 
                        byte IsExciseRateDisable, 
                        int AmendBy, 
                        string AmendDate) {
                GeneralRow rowGeneralRow = ((GeneralRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        StatementID,
                        StatementNumber,
                        PaymentDate,
                        FormDate,
                        District,
                        SubmittedBy,
                        ExciseRateID,
                        SubmittedDate,
                        SourceID,
                        Source,
                        IsExempt,
                        IsMobileHome,
                        ReceiptID,
                        ReceiptNumber,
                        RollYear,
                        DORNote,
                        DocumentType,
                        CreatedBy,
                        DocumentDate,
                        UserID,
                        IsEditableDate,
                        IsVoid,
                        IsExciseRateDisable,
                        AmendBy,
                        AmendDate};
                rowGeneralRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowGeneralRow);
                return rowGeneralRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                GeneralDataTable cln = ((GeneralDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new GeneralDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnStatementID = base.Columns["StatementID"];
                this.columnStatementNumber = base.Columns["StatementNumber"];
                this.columnPaymentDate = base.Columns["PaymentDate"];
                this.columnFormDate = base.Columns["FormDate"];
                this.columnDistrict = base.Columns["District"];
                this.columnSubmittedBy = base.Columns["SubmittedBy"];
                this.columnExciseRateID = base.Columns["ExciseRateID"];
                this.columnSubmittedDate = base.Columns["SubmittedDate"];
                this.columnSourceID = base.Columns["SourceID"];
                this.columnSource = base.Columns["Source"];
                this.columnIsExempt = base.Columns["IsExempt"];
                this.columnIsMobileHome = base.Columns["IsMobileHome"];
                this.columnReceiptID = base.Columns["ReceiptID"];
                this.columnReceiptNumber = base.Columns["ReceiptNumber"];
                this.columnRollYear = base.Columns["RollYear"];
                this.columnDORNote = base.Columns["DORNote"];
                this.columnDocumentType = base.Columns["DocumentType"];
                this.columnCreatedBy = base.Columns["CreatedBy"];
                this.columnDocumentDate = base.Columns["DocumentDate"];
                this.columnUserID = base.Columns["UserID"];
                this.columnIsEditableDate = base.Columns["IsEditableDate"];
                this.columnIsVoid = base.Columns["IsVoid"];
                this.columnIsExciseRateDisable = base.Columns["IsExciseRateDisable"];
                this.columnAmendBy = base.Columns["AmendBy"];
                this.columnAmendDate = base.Columns["AmendDate"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnStatementID = new global::System.Data.DataColumn("StatementID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStatementID);
                this.columnStatementNumber = new global::System.Data.DataColumn("StatementNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStatementNumber);
                this.columnPaymentDate = new global::System.Data.DataColumn("PaymentDate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPaymentDate);
                this.columnFormDate = new global::System.Data.DataColumn("FormDate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFormDate);
                this.columnDistrict = new global::System.Data.DataColumn("District", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDistrict);
                this.columnSubmittedBy = new global::System.Data.DataColumn("SubmittedBy", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSubmittedBy);
                this.columnExciseRateID = new global::System.Data.DataColumn("ExciseRateID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnExciseRateID);
                this.columnSubmittedDate = new global::System.Data.DataColumn("SubmittedDate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSubmittedDate);
                this.columnSourceID = new global::System.Data.DataColumn("SourceID", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSourceID);
                this.columnSource = new global::System.Data.DataColumn("Source", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSource);
                this.columnIsExempt = new global::System.Data.DataColumn("IsExempt", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsExempt);
                this.columnIsMobileHome = new global::System.Data.DataColumn("IsMobileHome", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsMobileHome);
                this.columnReceiptID = new global::System.Data.DataColumn("ReceiptID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnReceiptID);
                this.columnReceiptNumber = new global::System.Data.DataColumn("ReceiptNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnReceiptNumber);
                this.columnRollYear = new global::System.Data.DataColumn("RollYear", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRollYear);
                this.columnDORNote = new global::System.Data.DataColumn("DORNote", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDORNote);
                this.columnDocumentType = new global::System.Data.DataColumn("DocumentType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDocumentType);
                this.columnCreatedBy = new global::System.Data.DataColumn("CreatedBy", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCreatedBy);
                this.columnDocumentDate = new global::System.Data.DataColumn("DocumentDate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDocumentDate);
                this.columnUserID = new global::System.Data.DataColumn("UserID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUserID);
                this.columnIsEditableDate = new global::System.Data.DataColumn("IsEditableDate", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsEditableDate);
                this.columnIsVoid = new global::System.Data.DataColumn("IsVoid", typeof(byte), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsVoid);
                this.columnIsExciseRateDisable = new global::System.Data.DataColumn("IsExciseRateDisable", typeof(byte), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsExciseRateDisable);
                this.columnAmendBy = new global::System.Data.DataColumn("AmendBy", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAmendBy);
                this.columnAmendDate = new global::System.Data.DataColumn("AmendDate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAmendDate);
                this.columnStatementNumber.MaxLength = 50;
                this.columnPaymentDate.MaxLength = 10;
                this.columnFormDate.MaxLength = 10;
                this.columnDistrict.MaxLength = 160;
                this.columnSubmittedDate.MaxLength = 10;
                this.columnReceiptNumber.MaxLength = 20;
                this.columnDORNote.MaxLength = 1000;
                this.columnDocumentType.MaxLength = 1000;
                this.columnCreatedBy.MaxLength = 50;
                this.columnDocumentDate.ReadOnly = true;
                this.columnDocumentDate.MaxLength = 10;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GeneralRow NewGeneralRow() {
                return ((GeneralRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new GeneralRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(GeneralRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GeneralRowChanged != null)) {
                    this.GeneralRowChanged(this, new GeneralRowChangeEvent(((GeneralRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GeneralRowChanging != null)) {
                    this.GeneralRowChanging(this, new GeneralRowChangeEvent(((GeneralRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GeneralRowDeleted != null)) {
                    this.GeneralRowDeleted(this, new GeneralRowChangeEvent(((GeneralRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GeneralRowDeleting != null)) {
                    this.GeneralRowDeleting(this, new GeneralRowChangeEvent(((GeneralRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveGeneralRow(GeneralRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F15010ExciseAffidavitData ds = new F15010ExciseAffidavitData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "GeneralDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class PartiesHeaderDataTable : global::System.Data.TypedTableBase<PartiesHeaderRow> {
            
            private global::System.Data.DataColumn columnName;
            
            private global::System.Data.DataColumn columnAddress;
            
            private global::System.Data.DataColumn columnCity;
            
            private global::System.Data.DataColumn columnIndividualType;
            
            private global::System.Data.DataColumn columnPhone;
            
            private global::System.Data.DataColumn columnPercentOwner;
            
            private global::System.Data.DataColumn columnAddress1;
            
            private global::System.Data.DataColumn columnAddress2;
            
            private global::System.Data.DataColumn columnState;
            
            private global::System.Data.DataColumn columnZip;
            
            private global::System.Data.DataColumn columnCountry;
            
            private global::System.Data.DataColumn columnIndividualID;
            
            private global::System.Data.DataColumn columnStatementID;
            
            private global::System.Data.DataColumn columnOwnerID;
            
            private global::System.Data.DataColumn columnIndividualAutoID;
            
            private global::System.Data.DataColumn columnIndividualTypeID;
            
            private global::System.Data.DataColumn columnStatus;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PartiesHeaderDataTable() {
                this.TableName = "PartiesHeader";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PartiesHeaderDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected PartiesHeaderDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AddressColumn {
                get {
                    return this.columnAddress;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CityColumn {
                get {
                    return this.columnCity;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IndividualTypeColumn {
                get {
                    return this.columnIndividualType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PhoneColumn {
                get {
                    return this.columnPhone;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PercentOwnerColumn {
                get {
                    return this.columnPercentOwner;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Address1Column {
                get {
                    return this.columnAddress1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Address2Column {
                get {
                    return this.columnAddress2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StateColumn {
                get {
                    return this.columnState;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ZipColumn {
                get {
                    return this.columnZip;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CountryColumn {
                get {
                    return this.columnCountry;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IndividualIDColumn {
                get {
                    return this.columnIndividualID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StatementIDColumn {
                get {
                    return this.columnStatementID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OwnerIDColumn {
                get {
                    return this.columnOwnerID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IndividualAutoIDColumn {
                get {
                    return this.columnIndividualAutoID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IndividualTypeIDColumn {
                get {
                    return this.columnIndividualTypeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StatusColumn {
                get {
                    return this.columnStatus;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PartiesHeaderRow this[int index] {
                get {
                    return ((PartiesHeaderRow)(this.Rows[index]));
                }
            }
            
            public event PartiesHeaderRowChangeEventHandler PartiesHeaderRowChanging;
            
            public event PartiesHeaderRowChangeEventHandler PartiesHeaderRowChanged;
            
            public event PartiesHeaderRowChangeEventHandler PartiesHeaderRowDeleting;
            
            public event PartiesHeaderRowChangeEventHandler PartiesHeaderRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddPartiesHeaderRow(PartiesHeaderRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PartiesHeaderRow AddPartiesHeaderRow(
                        string Name, 
                        string Address, 
                        string City, 
                        string IndividualType, 
                        string Phone, 
                        float PercentOwner, 
                        string Address1, 
                        string Address2, 
                        string State, 
                        string Zip, 
                        string Country, 
                        int IndividualID, 
                        int StatementID, 
                        int OwnerID, 
                        int IndividualAutoID, 
                        byte IndividualTypeID, 
                        string Status) {
                PartiesHeaderRow rowPartiesHeaderRow = ((PartiesHeaderRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Name,
                        Address,
                        City,
                        IndividualType,
                        Phone,
                        PercentOwner,
                        Address1,
                        Address2,
                        State,
                        Zip,
                        Country,
                        IndividualID,
                        StatementID,
                        OwnerID,
                        IndividualAutoID,
                        IndividualTypeID,
                        Status};
                rowPartiesHeaderRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowPartiesHeaderRow);
                return rowPartiesHeaderRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                PartiesHeaderDataTable cln = ((PartiesHeaderDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new PartiesHeaderDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnName = base.Columns["Name"];
                this.columnAddress = base.Columns["Address"];
                this.columnCity = base.Columns["City"];
                this.columnIndividualType = base.Columns["IndividualType"];
                this.columnPhone = base.Columns["Phone"];
                this.columnPercentOwner = base.Columns["PercentOwner"];
                this.columnAddress1 = base.Columns["Address1"];
                this.columnAddress2 = base.Columns["Address2"];
                this.columnState = base.Columns["State"];
                this.columnZip = base.Columns["Zip"];
                this.columnCountry = base.Columns["Country"];
                this.columnIndividualID = base.Columns["IndividualID"];
                this.columnStatementID = base.Columns["StatementID"];
                this.columnOwnerID = base.Columns["OwnerID"];
                this.columnIndividualAutoID = base.Columns["IndividualAutoID"];
                this.columnIndividualTypeID = base.Columns["IndividualTypeID"];
                this.columnStatus = base.Columns["Status"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnAddress = new global::System.Data.DataColumn("Address", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAddress);
                this.columnCity = new global::System.Data.DataColumn("City", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCity);
                this.columnIndividualType = new global::System.Data.DataColumn("IndividualType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIndividualType);
                this.columnPhone = new global::System.Data.DataColumn("Phone", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPhone);
                this.columnPercentOwner = new global::System.Data.DataColumn("PercentOwner", typeof(float), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPercentOwner);
                this.columnAddress1 = new global::System.Data.DataColumn("Address1", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAddress1);
                this.columnAddress2 = new global::System.Data.DataColumn("Address2", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAddress2);
                this.columnState = new global::System.Data.DataColumn("State", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnState);
                this.columnZip = new global::System.Data.DataColumn("Zip", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnZip);
                this.columnCountry = new global::System.Data.DataColumn("Country", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCountry);
                this.columnIndividualID = new global::System.Data.DataColumn("IndividualID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIndividualID);
                this.columnStatementID = new global::System.Data.DataColumn("StatementID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStatementID);
                this.columnOwnerID = new global::System.Data.DataColumn("OwnerID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOwnerID);
                this.columnIndividualAutoID = new global::System.Data.DataColumn("IndividualAutoID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIndividualAutoID);
                this.columnIndividualTypeID = new global::System.Data.DataColumn("IndividualTypeID", typeof(byte), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIndividualTypeID);
                this.columnStatus = new global::System.Data.DataColumn("Status", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStatus);
                this.columnName.MaxLength = 350;
                this.columnAddress.MaxLength = 301;
                this.columnCity.MaxLength = 50;
                this.columnIndividualType.MaxLength = 50;
                this.columnPhone.MaxLength = 50;
                this.columnAddress1.MaxLength = 150;
                this.columnAddress2.MaxLength = 150;
                this.columnState.MaxLength = 50;
                this.columnZip.MaxLength = 50;
                this.columnCountry.MaxLength = 100;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PartiesHeaderRow NewPartiesHeaderRow() {
                return ((PartiesHeaderRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new PartiesHeaderRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(PartiesHeaderRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PartiesHeaderRowChanged != null)) {
                    this.PartiesHeaderRowChanged(this, new PartiesHeaderRowChangeEvent(((PartiesHeaderRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PartiesHeaderRowChanging != null)) {
                    this.PartiesHeaderRowChanging(this, new PartiesHeaderRowChangeEvent(((PartiesHeaderRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PartiesHeaderRowDeleted != null)) {
                    this.PartiesHeaderRowDeleted(this, new PartiesHeaderRowChangeEvent(((PartiesHeaderRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PartiesHeaderRowDeleting != null)) {
                    this.PartiesHeaderRowDeleting(this, new PartiesHeaderRowChangeEvent(((PartiesHeaderRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovePartiesHeaderRow(PartiesHeaderRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F15010ExciseAffidavitData ds = new F15010ExciseAffidavitData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "PartiesHeaderDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ParcelHeaderDataTable : global::System.Data.TypedTableBase<ParcelHeaderRow> {
            
            private global::System.Data.DataColumn columnNumber;
            
            private global::System.Data.DataColumn columnIsPersonalProperty;
            
            private global::System.Data.DataColumn columnAssessedValue;
            
            private global::System.Data.DataColumn columnLegal;
            
            private global::System.Data.DataColumn columnSoldParcelID;
            
            private global::System.Data.DataColumn columnStatementID;
            
            private global::System.Data.DataColumn columnIsPersonalPropertyValue;
            
            private global::System.Data.DataColumn columnParcelID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ParcelHeaderDataTable() {
                this.TableName = "ParcelHeader";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ParcelHeaderDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ParcelHeaderDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NumberColumn {
                get {
                    return this.columnNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsPersonalPropertyColumn {
                get {
                    return this.columnIsPersonalProperty;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AssessedValueColumn {
                get {
                    return this.columnAssessedValue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LegalColumn {
                get {
                    return this.columnLegal;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SoldParcelIDColumn {
                get {
                    return this.columnSoldParcelID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StatementIDColumn {
                get {
                    return this.columnStatementID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsPersonalPropertyValueColumn {
                get {
                    return this.columnIsPersonalPropertyValue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ParcelIDColumn {
                get {
                    return this.columnParcelID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ParcelHeaderRow this[int index] {
                get {
                    return ((ParcelHeaderRow)(this.Rows[index]));
                }
            }
            
            public event ParcelHeaderRowChangeEventHandler ParcelHeaderRowChanging;
            
            public event ParcelHeaderRowChangeEventHandler ParcelHeaderRowChanged;
            
            public event ParcelHeaderRowChangeEventHandler ParcelHeaderRowDeleting;
            
            public event ParcelHeaderRowChangeEventHandler ParcelHeaderRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddParcelHeaderRow(ParcelHeaderRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ParcelHeaderRow AddParcelHeaderRow(string Number, bool IsPersonalProperty, decimal AssessedValue, string Legal, int SoldParcelID, int StatementID, string IsPersonalPropertyValue, string ParcelID) {
                ParcelHeaderRow rowParcelHeaderRow = ((ParcelHeaderRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Number,
                        IsPersonalProperty,
                        AssessedValue,
                        Legal,
                        SoldParcelID,
                        StatementID,
                        IsPersonalPropertyValue,
                        ParcelID};
                rowParcelHeaderRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowParcelHeaderRow);
                return rowParcelHeaderRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ParcelHeaderDataTable cln = ((ParcelHeaderDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ParcelHeaderDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnNumber = base.Columns["Number"];
                this.columnIsPersonalProperty = base.Columns["IsPersonalProperty"];
                this.columnAssessedValue = base.Columns["AssessedValue"];
                this.columnLegal = base.Columns["Legal"];
                this.columnSoldParcelID = base.Columns["SoldParcelID"];
                this.columnStatementID = base.Columns["StatementID"];
                this.columnIsPersonalPropertyValue = base.Columns["IsPersonalPropertyValue"];
                this.columnParcelID = base.Columns["ParcelID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnNumber = new global::System.Data.DataColumn("Number", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNumber);
                this.columnIsPersonalProperty = new global::System.Data.DataColumn("IsPersonalProperty", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsPersonalProperty);
                this.columnAssessedValue = new global::System.Data.DataColumn("AssessedValue", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAssessedValue);
                this.columnLegal = new global::System.Data.DataColumn("Legal", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLegal);
                this.columnSoldParcelID = new global::System.Data.DataColumn("SoldParcelID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSoldParcelID);
                this.columnStatementID = new global::System.Data.DataColumn("StatementID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStatementID);
                this.columnIsPersonalPropertyValue = new global::System.Data.DataColumn("IsPersonalPropertyValue", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsPersonalPropertyValue);
                this.columnParcelID = new global::System.Data.DataColumn("ParcelID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnParcelID);
                this.columnNumber.MaxLength = 50;
                this.columnLegal.MaxLength = 5000;
                this.columnIsPersonalPropertyValue.ReadOnly = true;
                this.columnIsPersonalPropertyValue.MaxLength = 3;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ParcelHeaderRow NewParcelHeaderRow() {
                return ((ParcelHeaderRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ParcelHeaderRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ParcelHeaderRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ParcelHeaderRowChanged != null)) {
                    this.ParcelHeaderRowChanged(this, new ParcelHeaderRowChangeEvent(((ParcelHeaderRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ParcelHeaderRowChanging != null)) {
                    this.ParcelHeaderRowChanging(this, new ParcelHeaderRowChangeEvent(((ParcelHeaderRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ParcelHeaderRowDeleted != null)) {
                    this.ParcelHeaderRowDeleted(this, new ParcelHeaderRowChangeEvent(((ParcelHeaderRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ParcelHeaderRowDeleting != null)) {
                    this.ParcelHeaderRowDeleting(this, new ParcelHeaderRowChangeEvent(((ParcelHeaderRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveParcelHeaderRow(ParcelHeaderRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F15010ExciseAffidavitData ds = new F15010ExciseAffidavitData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ParcelHeaderDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class AffidavitDataTable : global::System.Data.TypedTableBase<AffidavitRow> {
            
            private global::System.Data.DataColumn columnIsPartialSale;
            
            private global::System.Data.DataColumn columnIsSegregated;
            
            private global::System.Data.DataColumn columnStreetAddress;
            
            private global::System.Data.DataColumn columnLocationSale;
            
            private global::System.Data.DataColumn columnLocationName;
            
            private global::System.Data.DataColumn columnUseCode;
            
            private global::System.Data.DataColumn columnExemptRegNum;
            
            private global::System.Data.DataColumn columnIsForestLand;
            
            private global::System.Data.DataColumn columnIsOpenSpace;
            
            private global::System.Data.DataColumn columnIsHistoric;
            
            private global::System.Data.DataColumn columnHasContinuance;
            
            private global::System.Data.DataColumn columnPersonalPropDesc;
            
            private global::System.Data.DataColumn columnExemptionCode;
            
            private global::System.Data.DataColumn columnExemptionDesc;
            
            private global::System.Data.DataColumn columnLocationCode;
            
            private global::System.Data.DataColumn columnTotalDebt;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AffidavitDataTable() {
                this.TableName = "Affidavit";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal AffidavitDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected AffidavitDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsPartialSaleColumn {
                get {
                    return this.columnIsPartialSale;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsSegregatedColumn {
                get {
                    return this.columnIsSegregated;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StreetAddressColumn {
                get {
                    return this.columnStreetAddress;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LocationSaleColumn {
                get {
                    return this.columnLocationSale;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LocationNameColumn {
                get {
                    return this.columnLocationName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UseCodeColumn {
                get {
                    return this.columnUseCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ExemptRegNumColumn {
                get {
                    return this.columnExemptRegNum;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsForestLandColumn {
                get {
                    return this.columnIsForestLand;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsOpenSpaceColumn {
                get {
                    return this.columnIsOpenSpace;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsHistoricColumn {
                get {
                    return this.columnIsHistoric;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HasContinuanceColumn {
                get {
                    return this.columnHasContinuance;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PersonalPropDescColumn {
                get {
                    return this.columnPersonalPropDesc;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ExemptionCodeColumn {
                get {
                    return this.columnExemptionCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ExemptionDescColumn {
                get {
                    return this.columnExemptionDesc;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LocationCodeColumn {
                get {
                    return this.columnLocationCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalDebtColumn {
                get {
                    return this.columnTotalDebt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AffidavitRow this[int index] {
                get {
                    return ((AffidavitRow)(this.Rows[index]));
                }
            }
            
            public event AffidavitRowChangeEventHandler AffidavitRowChanging;
            
            public event AffidavitRowChangeEventHandler AffidavitRowChanged;
            
            public event AffidavitRowChangeEventHandler AffidavitRowDeleting;
            
            public event AffidavitRowChangeEventHandler AffidavitRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddAffidavitRow(AffidavitRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AffidavitRow AddAffidavitRow(
                        bool IsPartialSale, 
                        bool IsSegregated, 
                        string StreetAddress, 
                        int LocationSale, 
                        string LocationName, 
                        string UseCode, 
                        string ExemptRegNum, 
                        bool IsForestLand, 
                        bool IsOpenSpace, 
                        bool IsHistoric, 
                        bool HasContinuance, 
                        string PersonalPropDesc, 
                        string ExemptionCode, 
                        string ExemptionDesc, 
                        string LocationCode, 
                        decimal TotalDebt) {
                AffidavitRow rowAffidavitRow = ((AffidavitRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        IsPartialSale,
                        IsSegregated,
                        StreetAddress,
                        LocationSale,
                        LocationName,
                        UseCode,
                        ExemptRegNum,
                        IsForestLand,
                        IsOpenSpace,
                        IsHistoric,
                        HasContinuance,
                        PersonalPropDesc,
                        ExemptionCode,
                        ExemptionDesc,
                        LocationCode,
                        TotalDebt};
                rowAffidavitRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowAffidavitRow);
                return rowAffidavitRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                AffidavitDataTable cln = ((AffidavitDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new AffidavitDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnIsPartialSale = base.Columns["IsPartialSale"];
                this.columnIsSegregated = base.Columns["IsSegregated"];
                this.columnStreetAddress = base.Columns["StreetAddress"];
                this.columnLocationSale = base.Columns["LocationSale"];
                this.columnLocationName = base.Columns["LocationName"];
                this.columnUseCode = base.Columns["UseCode"];
                this.columnExemptRegNum = base.Columns["ExemptRegNum"];
                this.columnIsForestLand = base.Columns["IsForestLand"];
                this.columnIsOpenSpace = base.Columns["IsOpenSpace"];
                this.columnIsHistoric = base.Columns["IsHistoric"];
                this.columnHasContinuance = base.Columns["HasContinuance"];
                this.columnPersonalPropDesc = base.Columns["PersonalPropDesc"];
                this.columnExemptionCode = base.Columns["ExemptionCode"];
                this.columnExemptionDesc = base.Columns["ExemptionDesc"];
                this.columnLocationCode = base.Columns["LocationCode"];
                this.columnTotalDebt = base.Columns["TotalDebt"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnIsPartialSale = new global::System.Data.DataColumn("IsPartialSale", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsPartialSale);
                this.columnIsSegregated = new global::System.Data.DataColumn("IsSegregated", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsSegregated);
                this.columnStreetAddress = new global::System.Data.DataColumn("StreetAddress", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStreetAddress);
                this.columnLocationSale = new global::System.Data.DataColumn("LocationSale", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLocationSale);
                this.columnLocationName = new global::System.Data.DataColumn("LocationName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLocationName);
                this.columnUseCode = new global::System.Data.DataColumn("UseCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUseCode);
                this.columnExemptRegNum = new global::System.Data.DataColumn("ExemptRegNum", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnExemptRegNum);
                this.columnIsForestLand = new global::System.Data.DataColumn("IsForestLand", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsForestLand);
                this.columnIsOpenSpace = new global::System.Data.DataColumn("IsOpenSpace", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsOpenSpace);
                this.columnIsHistoric = new global::System.Data.DataColumn("IsHistoric", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsHistoric);
                this.columnHasContinuance = new global::System.Data.DataColumn("HasContinuance", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHasContinuance);
                this.columnPersonalPropDesc = new global::System.Data.DataColumn("PersonalPropDesc", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPersonalPropDesc);
                this.columnExemptionCode = new global::System.Data.DataColumn("ExemptionCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnExemptionCode);
                this.columnExemptionDesc = new global::System.Data.DataColumn("ExemptionDesc", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnExemptionDesc);
                this.columnLocationCode = new global::System.Data.DataColumn("LocationCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLocationCode);
                this.columnTotalDebt = new global::System.Data.DataColumn("TotalDebt", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalDebt);
                this.columnStreetAddress.MaxLength = 150;
                this.columnLocationName.MaxLength = 150;
                this.columnUseCode.MaxLength = 12;
                this.columnExemptRegNum.MaxLength = 9;
                this.columnPersonalPropDesc.MaxLength = 1000;
                this.columnExemptionCode.MaxLength = 32;
                this.columnExemptionDesc.MaxLength = 250;
                this.columnLocationCode.MaxLength = 6;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AffidavitRow NewAffidavitRow() {
                return ((AffidavitRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new AffidavitRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(AffidavitRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.AffidavitRowChanged != null)) {
                    this.AffidavitRowChanged(this, new AffidavitRowChangeEvent(((AffidavitRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.AffidavitRowChanging != null)) {
                    this.AffidavitRowChanging(this, new AffidavitRowChangeEvent(((AffidavitRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.AffidavitRowDeleted != null)) {
                    this.AffidavitRowDeleted(this, new AffidavitRowChangeEvent(((AffidavitRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.AffidavitRowDeleting != null)) {
                    this.AffidavitRowDeleting(this, new AffidavitRowChangeEvent(((AffidavitRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveAffidavitRow(AffidavitRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F15010ExciseAffidavitData ds = new F15010ExciseAffidavitData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "AffidavitDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class AmountDueDataTable : global::System.Data.TypedTableBase<AmountDueRow> {
            
            private global::System.Data.DataColumn columnGrossSalePrice;
            
            private global::System.Data.DataColumn columnPersonalPropAmt;
            
            private global::System.Data.DataColumn columnRealPropExemptAmt;
            
            private global::System.Data.DataColumn columnTaxableSalePrice;
            
            private global::System.Data.DataColumn columnExciseTaxState;
            
            private global::System.Data.DataColumn columnExciseTaxLocal;
            
            private global::System.Data.DataColumn columnDelinquentInterestState;
            
            private global::System.Data.DataColumn columnDelinquentInterestLocal;
            
            private global::System.Data.DataColumn columnDelinquentPenalty;
            
            private global::System.Data.DataColumn columnTechnologyFee;
            
            private global::System.Data.DataColumn columnTransactionFee;
            
            private global::System.Data.DataColumn columnSubTotal;
            
            private global::System.Data.DataColumn columnFees;
            
            private global::System.Data.DataColumn columnTotalAmountDue;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AmountDueDataTable() {
                this.TableName = "AmountDue";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal AmountDueDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected AmountDueDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GrossSalePriceColumn {
                get {
                    return this.columnGrossSalePrice;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PersonalPropAmtColumn {
                get {
                    return this.columnPersonalPropAmt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RealPropExemptAmtColumn {
                get {
                    return this.columnRealPropExemptAmt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TaxableSalePriceColumn {
                get {
                    return this.columnTaxableSalePrice;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ExciseTaxStateColumn {
                get {
                    return this.columnExciseTaxState;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ExciseTaxLocalColumn {
                get {
                    return this.columnExciseTaxLocal;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DelinquentInterestStateColumn {
                get {
                    return this.columnDelinquentInterestState;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DelinquentInterestLocalColumn {
                get {
                    return this.columnDelinquentInterestLocal;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DelinquentPenaltyColumn {
                get {
                    return this.columnDelinquentPenalty;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TechnologyFeeColumn {
                get {
                    return this.columnTechnologyFee;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TransactionFeeColumn {
                get {
                    return this.columnTransactionFee;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SubTotalColumn {
                get {
                    return this.columnSubTotal;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FeesColumn {
                get {
                    return this.columnFees;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalAmountDueColumn {
                get {
                    return this.columnTotalAmountDue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AmountDueRow this[int index] {
                get {
                    return ((AmountDueRow)(this.Rows[index]));
                }
            }
            
            public event AmountDueRowChangeEventHandler AmountDueRowChanging;
            
            public event AmountDueRowChangeEventHandler AmountDueRowChanged;
            
            public event AmountDueRowChangeEventHandler AmountDueRowDeleting;
            
            public event AmountDueRowChangeEventHandler AmountDueRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddAmountDueRow(AmountDueRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AmountDueRow AddAmountDueRow(decimal GrossSalePrice, decimal PersonalPropAmt, decimal RealPropExemptAmt, decimal TaxableSalePrice, decimal ExciseTaxState, decimal ExciseTaxLocal, decimal DelinquentInterestState, decimal DelinquentInterestLocal, decimal DelinquentPenalty, decimal TechnologyFee, decimal TransactionFee, decimal SubTotal, decimal Fees, decimal TotalAmountDue) {
                AmountDueRow rowAmountDueRow = ((AmountDueRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        GrossSalePrice,
                        PersonalPropAmt,
                        RealPropExemptAmt,
                        TaxableSalePrice,
                        ExciseTaxState,
                        ExciseTaxLocal,
                        DelinquentInterestState,
                        DelinquentInterestLocal,
                        DelinquentPenalty,
                        TechnologyFee,
                        TransactionFee,
                        SubTotal,
                        Fees,
                        TotalAmountDue};
                rowAmountDueRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowAmountDueRow);
                return rowAmountDueRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                AmountDueDataTable cln = ((AmountDueDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new AmountDueDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnGrossSalePrice = base.Columns["GrossSalePrice"];
                this.columnPersonalPropAmt = base.Columns["PersonalPropAmt"];
                this.columnRealPropExemptAmt = base.Columns["RealPropExemptAmt"];
                this.columnTaxableSalePrice = base.Columns["TaxableSalePrice"];
                this.columnExciseTaxState = base.Columns["ExciseTaxState"];
                this.columnExciseTaxLocal = base.Columns["ExciseTaxLocal"];
                this.columnDelinquentInterestState = base.Columns["DelinquentInterestState"];
                this.columnDelinquentInterestLocal = base.Columns["DelinquentInterestLocal"];
                this.columnDelinquentPenalty = base.Columns["DelinquentPenalty"];
                this.columnTechnologyFee = base.Columns["TechnologyFee"];
                this.columnTransactionFee = base.Columns["TransactionFee"];
                this.columnSubTotal = base.Columns["SubTotal"];
                this.columnFees = base.Columns["Fees"];
                this.columnTotalAmountDue = base.Columns["TotalAmountDue"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnGrossSalePrice = new global::System.Data.DataColumn("GrossSalePrice", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGrossSalePrice);
                this.columnPersonalPropAmt = new global::System.Data.DataColumn("PersonalPropAmt", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPersonalPropAmt);
                this.columnRealPropExemptAmt = new global::System.Data.DataColumn("RealPropExemptAmt", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRealPropExemptAmt);
                this.columnTaxableSalePrice = new global::System.Data.DataColumn("TaxableSalePrice", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTaxableSalePrice);
                this.columnExciseTaxState = new global::System.Data.DataColumn("ExciseTaxState", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnExciseTaxState);
                this.columnExciseTaxLocal = new global::System.Data.DataColumn("ExciseTaxLocal", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnExciseTaxLocal);
                this.columnDelinquentInterestState = new global::System.Data.DataColumn("DelinquentInterestState", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDelinquentInterestState);
                this.columnDelinquentInterestLocal = new global::System.Data.DataColumn("DelinquentInterestLocal", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDelinquentInterestLocal);
                this.columnDelinquentPenalty = new global::System.Data.DataColumn("DelinquentPenalty", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDelinquentPenalty);
                this.columnTechnologyFee = new global::System.Data.DataColumn("TechnologyFee", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTechnologyFee);
                this.columnTransactionFee = new global::System.Data.DataColumn("TransactionFee", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTransactionFee);
                this.columnSubTotal = new global::System.Data.DataColumn("SubTotal", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSubTotal);
                this.columnFees = new global::System.Data.DataColumn("Fees", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFees);
                this.columnTotalAmountDue = new global::System.Data.DataColumn("TotalAmountDue", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalAmountDue);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AmountDueRow NewAmountDueRow() {
                return ((AmountDueRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new AmountDueRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(AmountDueRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.AmountDueRowChanged != null)) {
                    this.AmountDueRowChanged(this, new AmountDueRowChangeEvent(((AmountDueRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.AmountDueRowChanging != null)) {
                    this.AmountDueRowChanging(this, new AmountDueRowChangeEvent(((AmountDueRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.AmountDueRowDeleted != null)) {
                    this.AmountDueRowDeleted(this, new AmountDueRowChangeEvent(((AmountDueRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.AmountDueRowDeleting != null)) {
                    this.AmountDueRowDeleting(this, new AmountDueRowChangeEvent(((AmountDueRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveAmountDueRow(AmountDueRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F15010ExciseAffidavitData ds = new F15010ExciseAffidavitData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "AmountDueDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SupplimentDataTable : global::System.Data.TypedTableBase<SupplimentRow> {
            
            private global::System.Data.DataColumn columnAgentName;
            
            private global::System.Data.DataColumn columnInstrumentType;
            
            private global::System.Data.DataColumn columnInstrumentDate;
            
            private global::System.Data.DataColumn columnFirmname;
            
            private global::System.Data.DataColumn columnReasonHeld;
            
            private global::System.Data.DataColumn columnGiftConsideration_A1;
            
            private global::System.Data.DataColumn columnTotalDebt_A1;
            
            private global::System.Data.DataColumn columnGranteePaysGrantor_A1;
            
            private global::System.Data.DataColumn columnGiftConsideration_A2;
            
            private global::System.Data.DataColumn columnTotalDebt_A2;
            
            private global::System.Data.DataColumn columnGranteePaysGrantor_A2;
            
            private global::System.Data.DataColumn columnDebtRate_A2;
            
            private global::System.Data.DataColumn columnGiftNoConsideration_B1;
            
            private global::System.Data.DataColumn columnGiftNoConsideration_B2;
            
            private global::System.Data.DataColumn columnTotalDebt_B2;
            
            private global::System.Data.DataColumn columnGiftNoConsideration_B3;
            
            private global::System.Data.DataColumn columnTotalDebt_B3;
            
            private global::System.Data.DataColumn columnGiftNoConsideration_B4;
            
            private global::System.Data.DataColumn columnIsRefinance;
            
            private global::System.Data.DataColumn columnGiftedEquity;
            
            private global::System.Data.DataColumn columnGrantorsSignature;
            
            private global::System.Data.DataColumn columnGranteesSignature;
            
            private global::System.Data.DataColumn columnFacilitatorName;
            
            private global::System.Data.DataColumn columnGranteeName;
            
            private global::System.Data.DataColumn columnTreasStatusModifiedDate;
            
            private global::System.Data.DataColumn columnAssessStatusModifiedDate;
            
            private global::System.Data.DataColumn columnTreasStatusModifiedBy_Name;
            
            private global::System.Data.DataColumn columnAssessStatusModifiedBy_Name;
            
            private global::System.Data.DataColumn columnTreasStatusModifiedBy;
            
            private global::System.Data.DataColumn columnAssessStatusModifiedBy;
            
            private global::System.Data.DataColumn columnTreasurerStatusID;
            
            private global::System.Data.DataColumn columnAssessorStatusID;
            
            private global::System.Data.DataColumn columnTreasurer;
            
            private global::System.Data.DataColumn columnAssessor;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SupplimentDataTable() {
                this.TableName = "Suppliment";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SupplimentDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SupplimentDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AgentNameColumn {
                get {
                    return this.columnAgentName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InstrumentTypeColumn {
                get {
                    return this.columnInstrumentType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InstrumentDateColumn {
                get {
                    return this.columnInstrumentDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FirmnameColumn {
                get {
                    return this.columnFirmname;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ReasonHeldColumn {
                get {
                    return this.columnReasonHeld;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GiftConsideration_A1Column {
                get {
                    return this.columnGiftConsideration_A1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalDebt_A1Column {
                get {
                    return this.columnTotalDebt_A1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GranteePaysGrantor_A1Column {
                get {
                    return this.columnGranteePaysGrantor_A1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GiftConsideration_A2Column {
                get {
                    return this.columnGiftConsideration_A2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalDebt_A2Column {
                get {
                    return this.columnTotalDebt_A2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GranteePaysGrantor_A2Column {
                get {
                    return this.columnGranteePaysGrantor_A2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DebtRate_A2Column {
                get {
                    return this.columnDebtRate_A2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GiftNoConsideration_B1Column {
                get {
                    return this.columnGiftNoConsideration_B1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GiftNoConsideration_B2Column {
                get {
                    return this.columnGiftNoConsideration_B2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalDebt_B2Column {
                get {
                    return this.columnTotalDebt_B2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GiftNoConsideration_B3Column {
                get {
                    return this.columnGiftNoConsideration_B3;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalDebt_B3Column {
                get {
                    return this.columnTotalDebt_B3;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GiftNoConsideration_B4Column {
                get {
                    return this.columnGiftNoConsideration_B4;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsRefinanceColumn {
                get {
                    return this.columnIsRefinance;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GiftedEquityColumn {
                get {
                    return this.columnGiftedEquity;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GrantorsSignatureColumn {
                get {
                    return this.columnGrantorsSignature;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GranteesSignatureColumn {
                get {
                    return this.columnGranteesSignature;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FacilitatorNameColumn {
                get {
                    return this.columnFacilitatorName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GranteeNameColumn {
                get {
                    return this.columnGranteeName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TreasStatusModifiedDateColumn {
                get {
                    return this.columnTreasStatusModifiedDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AssessStatusModifiedDateColumn {
                get {
                    return this.columnAssessStatusModifiedDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TreasStatusModifiedBy_NameColumn {
                get {
                    return this.columnTreasStatusModifiedBy_Name;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AssessStatusModifiedBy_NameColumn {
                get {
                    return this.columnAssessStatusModifiedBy_Name;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TreasStatusModifiedByColumn {
                get {
                    return this.columnTreasStatusModifiedBy;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AssessStatusModifiedByColumn {
                get {
                    return this.columnAssessStatusModifiedBy;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TreasurerStatusIDColumn {
                get {
                    return this.columnTreasurerStatusID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AssessorStatusIDColumn {
                get {
                    return this.columnAssessorStatusID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TreasurerColumn {
                get {
                    return this.columnTreasurer;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AssessorColumn {
                get {
                    return this.columnAssessor;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SupplimentRow this[int index] {
                get {
                    return ((SupplimentRow)(this.Rows[index]));
                }
            }
            
            public event SupplimentRowChangeEventHandler SupplimentRowChanging;
            
            public event SupplimentRowChangeEventHandler SupplimentRowChanged;
            
            public event SupplimentRowChangeEventHandler SupplimentRowDeleting;
            
            public event SupplimentRowChangeEventHandler SupplimentRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSupplimentRow(SupplimentRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SupplimentRow AddSupplimentRow(
                        string AgentName, 
                        string InstrumentType, 
                        string InstrumentDate, 
                        string Firmname, 
                        string ReasonHeld, 
                        bool GiftConsideration_A1, 
                        decimal TotalDebt_A1, 
                        decimal GranteePaysGrantor_A1, 
                        bool GiftConsideration_A2, 
                        decimal TotalDebt_A2, 
                        decimal GranteePaysGrantor_A2, 
                        float DebtRate_A2, 
                        bool GiftNoConsideration_B1, 
                        bool GiftNoConsideration_B2, 
                        decimal TotalDebt_B2, 
                        bool GiftNoConsideration_B3, 
                        decimal TotalDebt_B3, 
                        bool GiftNoConsideration_B4, 
                        bool IsRefinance, 
                        decimal GiftedEquity, 
                        string GrantorsSignature, 
                        string GranteesSignature, 
                        string FacilitatorName, 
                        string GranteeName, 
                        string TreasStatusModifiedDate, 
                        string AssessStatusModifiedDate, 
                        string TreasStatusModifiedBy_Name, 
                        string AssessStatusModifiedBy_Name, 
                        int TreasStatusModifiedBy, 
                        int AssessStatusModifiedBy, 
                        byte TreasurerStatusID, 
                        byte AssessorStatusID, 
                        string Treasurer, 
                        string Assessor) {
                SupplimentRow rowSupplimentRow = ((SupplimentRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        AgentName,
                        InstrumentType,
                        InstrumentDate,
                        Firmname,
                        ReasonHeld,
                        GiftConsideration_A1,
                        TotalDebt_A1,
                        GranteePaysGrantor_A1,
                        GiftConsideration_A2,
                        TotalDebt_A2,
                        GranteePaysGrantor_A2,
                        DebtRate_A2,
                        GiftNoConsideration_B1,
                        GiftNoConsideration_B2,
                        TotalDebt_B2,
                        GiftNoConsideration_B3,
                        TotalDebt_B3,
                        GiftNoConsideration_B4,
                        IsRefinance,
                        GiftedEquity,
                        GrantorsSignature,
                        GranteesSignature,
                        FacilitatorName,
                        GranteeName,
                        TreasStatusModifiedDate,
                        AssessStatusModifiedDate,
                        TreasStatusModifiedBy_Name,
                        AssessStatusModifiedBy_Name,
                        TreasStatusModifiedBy,
                        AssessStatusModifiedBy,
                        TreasurerStatusID,
                        AssessorStatusID,
                        Treasurer,
                        Assessor};
                rowSupplimentRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowSupplimentRow);
                return rowSupplimentRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                SupplimentDataTable cln = ((SupplimentDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new SupplimentDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnAgentName = base.Columns["AgentName"];
                this.columnInstrumentType = base.Columns["InstrumentType"];
                this.columnInstrumentDate = base.Columns["InstrumentDate"];
                this.columnFirmname = base.Columns["Firmname"];
                this.columnReasonHeld = base.Columns["ReasonHeld"];
                this.columnGiftConsideration_A1 = base.Columns["GiftConsideration_A1"];
                this.columnTotalDebt_A1 = base.Columns["TotalDebt_A1"];
                this.columnGranteePaysGrantor_A1 = base.Columns["GranteePaysGrantor_A1"];
                this.columnGiftConsideration_A2 = base.Columns["GiftConsideration_A2"];
                this.columnTotalDebt_A2 = base.Columns["TotalDebt_A2"];
                this.columnGranteePaysGrantor_A2 = base.Columns["GranteePaysGrantor_A2"];
                this.columnDebtRate_A2 = base.Columns["DebtRate_A2"];
                this.columnGiftNoConsideration_B1 = base.Columns["GiftNoConsideration_B1"];
                this.columnGiftNoConsideration_B2 = base.Columns["GiftNoConsideration_B2"];
                this.columnTotalDebt_B2 = base.Columns["TotalDebt_B2"];
                this.columnGiftNoConsideration_B3 = base.Columns["GiftNoConsideration_B3"];
                this.columnTotalDebt_B3 = base.Columns["TotalDebt_B3"];
                this.columnGiftNoConsideration_B4 = base.Columns["GiftNoConsideration_B4"];
                this.columnIsRefinance = base.Columns["IsRefinance"];
                this.columnGiftedEquity = base.Columns["GiftedEquity"];
                this.columnGrantorsSignature = base.Columns["GrantorsSignature"];
                this.columnGranteesSignature = base.Columns["GranteesSignature"];
                this.columnFacilitatorName = base.Columns["FacilitatorName"];
                this.columnGranteeName = base.Columns["GranteeName"];
                this.columnTreasStatusModifiedDate = base.Columns["TreasStatusModifiedDate"];
                this.columnAssessStatusModifiedDate = base.Columns["AssessStatusModifiedDate"];
                this.columnTreasStatusModifiedBy_Name = base.Columns["TreasStatusModifiedBy_Name"];
                this.columnAssessStatusModifiedBy_Name = base.Columns["AssessStatusModifiedBy_Name"];
                this.columnTreasStatusModifiedBy = base.Columns["TreasStatusModifiedBy"];
                this.columnAssessStatusModifiedBy = base.Columns["AssessStatusModifiedBy"];
                this.columnTreasurerStatusID = base.Columns["TreasurerStatusID"];
                this.columnAssessorStatusID = base.Columns["AssessorStatusID"];
                this.columnTreasurer = base.Columns["Treasurer"];
                this.columnAssessor = base.Columns["Assessor"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnAgentName = new global::System.Data.DataColumn("AgentName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAgentName);
                this.columnInstrumentType = new global::System.Data.DataColumn("InstrumentType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInstrumentType);
                this.columnInstrumentDate = new global::System.Data.DataColumn("InstrumentDate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInstrumentDate);
                this.columnFirmname = new global::System.Data.DataColumn("Firmname", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFirmname);
                this.columnReasonHeld = new global::System.Data.DataColumn("ReasonHeld", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnReasonHeld);
                this.columnGiftConsideration_A1 = new global::System.Data.DataColumn("GiftConsideration_A1", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGiftConsideration_A1);
                this.columnTotalDebt_A1 = new global::System.Data.DataColumn("TotalDebt_A1", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalDebt_A1);
                this.columnGranteePaysGrantor_A1 = new global::System.Data.DataColumn("GranteePaysGrantor_A1", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGranteePaysGrantor_A1);
                this.columnGiftConsideration_A2 = new global::System.Data.DataColumn("GiftConsideration_A2", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGiftConsideration_A2);
                this.columnTotalDebt_A2 = new global::System.Data.DataColumn("TotalDebt_A2", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalDebt_A2);
                this.columnGranteePaysGrantor_A2 = new global::System.Data.DataColumn("GranteePaysGrantor_A2", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGranteePaysGrantor_A2);
                this.columnDebtRate_A2 = new global::System.Data.DataColumn("DebtRate_A2", typeof(float), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDebtRate_A2);
                this.columnGiftNoConsideration_B1 = new global::System.Data.DataColumn("GiftNoConsideration_B1", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGiftNoConsideration_B1);
                this.columnGiftNoConsideration_B2 = new global::System.Data.DataColumn("GiftNoConsideration_B2", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGiftNoConsideration_B2);
                this.columnTotalDebt_B2 = new global::System.Data.DataColumn("TotalDebt_B2", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalDebt_B2);
                this.columnGiftNoConsideration_B3 = new global::System.Data.DataColumn("GiftNoConsideration_B3", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGiftNoConsideration_B3);
                this.columnTotalDebt_B3 = new global::System.Data.DataColumn("TotalDebt_B3", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalDebt_B3);
                this.columnGiftNoConsideration_B4 = new global::System.Data.DataColumn("GiftNoConsideration_B4", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGiftNoConsideration_B4);
                this.columnIsRefinance = new global::System.Data.DataColumn("IsRefinance", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsRefinance);
                this.columnGiftedEquity = new global::System.Data.DataColumn("GiftedEquity", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGiftedEquity);
                this.columnGrantorsSignature = new global::System.Data.DataColumn("GrantorsSignature", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGrantorsSignature);
                this.columnGranteesSignature = new global::System.Data.DataColumn("GranteesSignature", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGranteesSignature);
                this.columnFacilitatorName = new global::System.Data.DataColumn("FacilitatorName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFacilitatorName);
                this.columnGranteeName = new global::System.Data.DataColumn("GranteeName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGranteeName);
                this.columnTreasStatusModifiedDate = new global::System.Data.DataColumn("TreasStatusModifiedDate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTreasStatusModifiedDate);
                this.columnAssessStatusModifiedDate = new global::System.Data.DataColumn("AssessStatusModifiedDate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAssessStatusModifiedDate);
                this.columnTreasStatusModifiedBy_Name = new global::System.Data.DataColumn("TreasStatusModifiedBy_Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTreasStatusModifiedBy_Name);
                this.columnAssessStatusModifiedBy_Name = new global::System.Data.DataColumn("AssessStatusModifiedBy_Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAssessStatusModifiedBy_Name);
                this.columnTreasStatusModifiedBy = new global::System.Data.DataColumn("TreasStatusModifiedBy", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTreasStatusModifiedBy);
                this.columnAssessStatusModifiedBy = new global::System.Data.DataColumn("AssessStatusModifiedBy", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAssessStatusModifiedBy);
                this.columnTreasurerStatusID = new global::System.Data.DataColumn("TreasurerStatusID", typeof(byte), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTreasurerStatusID);
                this.columnAssessorStatusID = new global::System.Data.DataColumn("AssessorStatusID", typeof(byte), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAssessorStatusID);
                this.columnTreasurer = new global::System.Data.DataColumn("Treasurer", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTreasurer);
                this.columnAssessor = new global::System.Data.DataColumn("Assessor", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAssessor);
                this.columnAgentName.MaxLength = 150;
                this.columnInstrumentType.MaxLength = 150;
                this.columnInstrumentDate.MaxLength = 10;
                this.columnFirmname.MaxLength = 150;
                this.columnReasonHeld.MaxLength = 1000;
                this.columnGrantorsSignature.MaxLength = 350;
                this.columnGranteesSignature.MaxLength = 350;
                this.columnFacilitatorName.MaxLength = 150;
                this.columnGranteeName.MaxLength = 350;
                this.columnTreasStatusModifiedBy_Name.MaxLength = 50;
                this.columnAssessStatusModifiedBy_Name.MaxLength = 50;
                this.columnTreasurer.MaxLength = 50;
                this.columnAssessor.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SupplimentRow NewSupplimentRow() {
                return ((SupplimentRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new SupplimentRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(SupplimentRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SupplimentRowChanged != null)) {
                    this.SupplimentRowChanged(this, new SupplimentRowChangeEvent(((SupplimentRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SupplimentRowChanging != null)) {
                    this.SupplimentRowChanging(this, new SupplimentRowChangeEvent(((SupplimentRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SupplimentRowDeleted != null)) {
                    this.SupplimentRowDeleted(this, new SupplimentRowChangeEvent(((SupplimentRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SupplimentRowDeleting != null)) {
                    this.SupplimentRowDeleting(this, new SupplimentRowChangeEvent(((SupplimentRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSupplimentRow(SupplimentRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F15010ExciseAffidavitData ds = new F15010ExciseAffidavitData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SupplimentDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ListAffidavitStatementIdDataTable : global::System.Data.TypedTableBase<ListAffidavitStatementIdRow> {
            
            private global::System.Data.DataColumn columnKeyID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListAffidavitStatementIdDataTable() {
                this.TableName = "ListAffidavitStatementId";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListAffidavitStatementIdDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ListAffidavitStatementIdDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn KeyIDColumn {
                get {
                    return this.columnKeyID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListAffidavitStatementIdRow this[int index] {
                get {
                    return ((ListAffidavitStatementIdRow)(this.Rows[index]));
                }
            }
            
            public event ListAffidavitStatementIdRowChangeEventHandler ListAffidavitStatementIdRowChanging;
            
            public event ListAffidavitStatementIdRowChangeEventHandler ListAffidavitStatementIdRowChanged;
            
            public event ListAffidavitStatementIdRowChangeEventHandler ListAffidavitStatementIdRowDeleting;
            
            public event ListAffidavitStatementIdRowChangeEventHandler ListAffidavitStatementIdRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddListAffidavitStatementIdRow(ListAffidavitStatementIdRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListAffidavitStatementIdRow AddListAffidavitStatementIdRow(int KeyID) {
                ListAffidavitStatementIdRow rowListAffidavitStatementIdRow = ((ListAffidavitStatementIdRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        KeyID};
                rowListAffidavitStatementIdRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowListAffidavitStatementIdRow);
                return rowListAffidavitStatementIdRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ListAffidavitStatementIdDataTable cln = ((ListAffidavitStatementIdDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ListAffidavitStatementIdDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnKeyID = base.Columns["KeyID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnKeyID = new global::System.Data.DataColumn("KeyID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnKeyID);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListAffidavitStatementIdRow NewListAffidavitStatementIdRow() {
                return ((ListAffidavitStatementIdRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ListAffidavitStatementIdRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ListAffidavitStatementIdRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ListAffidavitStatementIdRowChanged != null)) {
                    this.ListAffidavitStatementIdRowChanged(this, new ListAffidavitStatementIdRowChangeEvent(((ListAffidavitStatementIdRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ListAffidavitStatementIdRowChanging != null)) {
                    this.ListAffidavitStatementIdRowChanging(this, new ListAffidavitStatementIdRowChangeEvent(((ListAffidavitStatementIdRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ListAffidavitStatementIdRowDeleted != null)) {
                    this.ListAffidavitStatementIdRowDeleted(this, new ListAffidavitStatementIdRowChangeEvent(((ListAffidavitStatementIdRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ListAffidavitStatementIdRowDeleting != null)) {
                    this.ListAffidavitStatementIdRowDeleting(this, new ListAffidavitStatementIdRowChangeEvent(((ListAffidavitStatementIdRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveListAffidavitStatementIdRow(ListAffidavitStatementIdRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F15010ExciseAffidavitData ds = new F15010ExciseAffidavitData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ListAffidavitStatementIdDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ListPartiesOwnerDetailDataTable : global::System.Data.TypedTableBase<ListPartiesOwnerDetailRow> {
            
            private global::System.Data.DataColumn columnOwnerID;
            
            private global::System.Data.DataColumn columnPOwnerID;
            
            private global::System.Data.DataColumn columnName;
            
            private global::System.Data.DataColumn columnAddress1;
            
            private global::System.Data.DataColumn columnAddress2;
            
            private global::System.Data.DataColumn columnAddress;
            
            private global::System.Data.DataColumn columnCity;
            
            private global::System.Data.DataColumn columnState;
            
            private global::System.Data.DataColumn columnIsActive;
            
            private global::System.Data.DataColumn columnIsPurchaser;
            
            private global::System.Data.DataColumn columnIsDeceased;
            
            private global::System.Data.DataColumn columnPhone;
            
            private global::System.Data.DataColumn columnEmail;
            
            private global::System.Data.DataColumn columnZip;
            
            private global::System.Data.DataColumn columnNameOwner;
            
            private global::System.Data.DataColumn columnStatus;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListPartiesOwnerDetailDataTable() {
                this.TableName = "ListPartiesOwnerDetail";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListPartiesOwnerDetailDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ListPartiesOwnerDetailDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OwnerIDColumn {
                get {
                    return this.columnOwnerID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn POwnerIDColumn {
                get {
                    return this.columnPOwnerID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Address1Column {
                get {
                    return this.columnAddress1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Address2Column {
                get {
                    return this.columnAddress2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AddressColumn {
                get {
                    return this.columnAddress;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CityColumn {
                get {
                    return this.columnCity;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StateColumn {
                get {
                    return this.columnState;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsActiveColumn {
                get {
                    return this.columnIsActive;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsPurchaserColumn {
                get {
                    return this.columnIsPurchaser;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsDeceasedColumn {
                get {
                    return this.columnIsDeceased;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PhoneColumn {
                get {
                    return this.columnPhone;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmailColumn {
                get {
                    return this.columnEmail;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ZipColumn {
                get {
                    return this.columnZip;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NameOwnerColumn {
                get {
                    return this.columnNameOwner;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StatusColumn {
                get {
                    return this.columnStatus;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListPartiesOwnerDetailRow this[int index] {
                get {
                    return ((ListPartiesOwnerDetailRow)(this.Rows[index]));
                }
            }
            
            public event ListPartiesOwnerDetailRowChangeEventHandler ListPartiesOwnerDetailRowChanging;
            
            public event ListPartiesOwnerDetailRowChangeEventHandler ListPartiesOwnerDetailRowChanged;
            
            public event ListPartiesOwnerDetailRowChangeEventHandler ListPartiesOwnerDetailRowDeleting;
            
            public event ListPartiesOwnerDetailRowChangeEventHandler ListPartiesOwnerDetailRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddListPartiesOwnerDetailRow(ListPartiesOwnerDetailRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListPartiesOwnerDetailRow AddListPartiesOwnerDetailRow(
                        string OwnerID, 
                        string POwnerID, 
                        string Name, 
                        string Address1, 
                        string Address2, 
                        string Address, 
                        string City, 
                        string State, 
                        bool IsActive, 
                        bool IsPurchaser, 
                        bool IsDeceased, 
                        string Phone, 
                        string Email, 
                        string Zip, 
                        string NameOwner, 
                        string Status) {
                ListPartiesOwnerDetailRow rowListPartiesOwnerDetailRow = ((ListPartiesOwnerDetailRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        OwnerID,
                        POwnerID,
                        Name,
                        Address1,
                        Address2,
                        Address,
                        City,
                        State,
                        IsActive,
                        IsPurchaser,
                        IsDeceased,
                        Phone,
                        Email,
                        Zip,
                        NameOwner,
                        Status};
                rowListPartiesOwnerDetailRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowListPartiesOwnerDetailRow);
                return rowListPartiesOwnerDetailRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ListPartiesOwnerDetailDataTable cln = ((ListPartiesOwnerDetailDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ListPartiesOwnerDetailDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnOwnerID = base.Columns["OwnerID"];
                this.columnPOwnerID = base.Columns["POwnerID"];
                this.columnName = base.Columns["Name"];
                this.columnAddress1 = base.Columns["Address1"];
                this.columnAddress2 = base.Columns["Address2"];
                this.columnAddress = base.Columns["Address"];
                this.columnCity = base.Columns["City"];
                this.columnState = base.Columns["State"];
                this.columnIsActive = base.Columns["IsActive"];
                this.columnIsPurchaser = base.Columns["IsPurchaser"];
                this.columnIsDeceased = base.Columns["IsDeceased"];
                this.columnPhone = base.Columns["Phone"];
                this.columnEmail = base.Columns["Email"];
                this.columnZip = base.Columns["Zip"];
                this.columnNameOwner = base.Columns["NameOwner"];
                this.columnStatus = base.Columns["Status"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnOwnerID = new global::System.Data.DataColumn("OwnerID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOwnerID);
                this.columnPOwnerID = new global::System.Data.DataColumn("POwnerID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPOwnerID);
                this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnAddress1 = new global::System.Data.DataColumn("Address1", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAddress1);
                this.columnAddress2 = new global::System.Data.DataColumn("Address2", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAddress2);
                this.columnAddress = new global::System.Data.DataColumn("Address", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAddress);
                this.columnCity = new global::System.Data.DataColumn("City", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCity);
                this.columnState = new global::System.Data.DataColumn("State", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnState);
                this.columnIsActive = new global::System.Data.DataColumn("IsActive", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsActive);
                this.columnIsPurchaser = new global::System.Data.DataColumn("IsPurchaser", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsPurchaser);
                this.columnIsDeceased = new global::System.Data.DataColumn("IsDeceased", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsDeceased);
                this.columnPhone = new global::System.Data.DataColumn("Phone", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPhone);
                this.columnEmail = new global::System.Data.DataColumn("Email", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmail);
                this.columnZip = new global::System.Data.DataColumn("Zip", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnZip);
                this.columnNameOwner = new global::System.Data.DataColumn("NameOwner", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNameOwner);
                this.columnStatus = new global::System.Data.DataColumn("Status", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStatus);
                this.columnName.MaxLength = 350;
                this.columnPhone.MaxLength = 50;
                this.columnEmail.MaxLength = 200;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListPartiesOwnerDetailRow NewListPartiesOwnerDetailRow() {
                return ((ListPartiesOwnerDetailRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ListPartiesOwnerDetailRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ListPartiesOwnerDetailRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ListPartiesOwnerDetailRowChanged != null)) {
                    this.ListPartiesOwnerDetailRowChanged(this, new ListPartiesOwnerDetailRowChangeEvent(((ListPartiesOwnerDetailRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ListPartiesOwnerDetailRowChanging != null)) {
                    this.ListPartiesOwnerDetailRowChanging(this, new ListPartiesOwnerDetailRowChangeEvent(((ListPartiesOwnerDetailRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ListPartiesOwnerDetailRowDeleted != null)) {
                    this.ListPartiesOwnerDetailRowDeleted(this, new ListPartiesOwnerDetailRowChangeEvent(((ListPartiesOwnerDetailRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ListPartiesOwnerDetailRowDeleting != null)) {
                    this.ListPartiesOwnerDetailRowDeleting(this, new ListPartiesOwnerDetailRowChangeEvent(((ListPartiesOwnerDetailRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveListPartiesOwnerDetailRow(ListPartiesOwnerDetailRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F15010ExciseAffidavitData ds = new F15010ExciseAffidavitData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ListPartiesOwnerDetailDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ListAffidavitDistrictSelectionDataTable : global::System.Data.TypedTableBase<ListAffidavitDistrictSelectionRow> {
            
            private global::System.Data.DataColumn columnDistrictID;
            
            private global::System.Data.DataColumn columnIsCounty;
            
            private global::System.Data.DataColumn columnLocationName;
            
            private global::System.Data.DataColumn columnLocationCode;
            
            private global::System.Data.DataColumn columnDescription;
            
            private global::System.Data.DataColumn columnDistrict;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListAffidavitDistrictSelectionDataTable() {
                this.TableName = "ListAffidavitDistrictSelection";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListAffidavitDistrictSelectionDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ListAffidavitDistrictSelectionDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DistrictIDColumn {
                get {
                    return this.columnDistrictID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsCountyColumn {
                get {
                    return this.columnIsCounty;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LocationNameColumn {
                get {
                    return this.columnLocationName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LocationCodeColumn {
                get {
                    return this.columnLocationCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DistrictColumn {
                get {
                    return this.columnDistrict;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListAffidavitDistrictSelectionRow this[int index] {
                get {
                    return ((ListAffidavitDistrictSelectionRow)(this.Rows[index]));
                }
            }
            
            public event ListAffidavitDistrictSelectionRowChangeEventHandler ListAffidavitDistrictSelectionRowChanging;
            
            public event ListAffidavitDistrictSelectionRowChangeEventHandler ListAffidavitDistrictSelectionRowChanged;
            
            public event ListAffidavitDistrictSelectionRowChangeEventHandler ListAffidavitDistrictSelectionRowDeleting;
            
            public event ListAffidavitDistrictSelectionRowChangeEventHandler ListAffidavitDistrictSelectionRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddListAffidavitDistrictSelectionRow(ListAffidavitDistrictSelectionRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListAffidavitDistrictSelectionRow AddListAffidavitDistrictSelectionRow(string DistrictID, int IsCounty, string LocationName, string LocationCode, string Description, string District) {
                ListAffidavitDistrictSelectionRow rowListAffidavitDistrictSelectionRow = ((ListAffidavitDistrictSelectionRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        DistrictID,
                        IsCounty,
                        LocationName,
                        LocationCode,
                        Description,
                        District};
                rowListAffidavitDistrictSelectionRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowListAffidavitDistrictSelectionRow);
                return rowListAffidavitDistrictSelectionRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ListAffidavitDistrictSelectionDataTable cln = ((ListAffidavitDistrictSelectionDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ListAffidavitDistrictSelectionDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnDistrictID = base.Columns["DistrictID"];
                this.columnIsCounty = base.Columns["IsCounty"];
                this.columnLocationName = base.Columns["LocationName"];
                this.columnLocationCode = base.Columns["LocationCode"];
                this.columnDescription = base.Columns["Description"];
                this.columnDistrict = base.Columns["District"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnDistrictID = new global::System.Data.DataColumn("DistrictID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDistrictID);
                this.columnIsCounty = new global::System.Data.DataColumn("IsCounty", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsCounty);
                this.columnLocationName = new global::System.Data.DataColumn("LocationName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLocationName);
                this.columnLocationCode = new global::System.Data.DataColumn("LocationCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLocationCode);
                this.columnDescription = new global::System.Data.DataColumn("Description", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescription);
                this.columnDistrict = new global::System.Data.DataColumn("District", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDistrict);
                this.columnLocationName.MaxLength = 150;
                this.columnLocationCode.MaxLength = 6;
                this.columnDistrict.MaxLength = 159;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListAffidavitDistrictSelectionRow NewListAffidavitDistrictSelectionRow() {
                return ((ListAffidavitDistrictSelectionRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ListAffidavitDistrictSelectionRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ListAffidavitDistrictSelectionRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ListAffidavitDistrictSelectionRowChanged != null)) {
                    this.ListAffidavitDistrictSelectionRowChanged(this, new ListAffidavitDistrictSelectionRowChangeEvent(((ListAffidavitDistrictSelectionRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ListAffidavitDistrictSelectionRowChanging != null)) {
                    this.ListAffidavitDistrictSelectionRowChanging(this, new ListAffidavitDistrictSelectionRowChangeEvent(((ListAffidavitDistrictSelectionRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ListAffidavitDistrictSelectionRowDeleted != null)) {
                    this.ListAffidavitDistrictSelectionRowDeleted(this, new ListAffidavitDistrictSelectionRowChangeEvent(((ListAffidavitDistrictSelectionRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ListAffidavitDistrictSelectionRowDeleting != null)) {
                    this.ListAffidavitDistrictSelectionRowDeleting(this, new ListAffidavitDistrictSelectionRowChangeEvent(((ListAffidavitDistrictSelectionRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveListAffidavitDistrictSelectionRow(ListAffidavitDistrictSelectionRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F15010ExciseAffidavitData ds = new F15010ExciseAffidavitData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ListAffidavitDistrictSelectionDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class CalAmountDueDataTable : global::System.Data.TypedTableBase<CalAmountDueRow> {
            
            private global::System.Data.DataColumn columnExciseTaxState;
            
            private global::System.Data.DataColumn columnExciseTaxLocal;
            
            private global::System.Data.DataColumn columnDelinquentInterestState;
            
            private global::System.Data.DataColumn columnDelinquentInterestLocal;
            
            private global::System.Data.DataColumn columnDelinquentPenalty;
            
            private global::System.Data.DataColumn columnTechnologyFee;
            
            private global::System.Data.DataColumn columnTransactionFee;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CalAmountDueDataTable() {
                this.TableName = "CalAmountDue";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CalAmountDueDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected CalAmountDueDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ExciseTaxStateColumn {
                get {
                    return this.columnExciseTaxState;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ExciseTaxLocalColumn {
                get {
                    return this.columnExciseTaxLocal;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DelinquentInterestStateColumn {
                get {
                    return this.columnDelinquentInterestState;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DelinquentInterestLocalColumn {
                get {
                    return this.columnDelinquentInterestLocal;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DelinquentPenaltyColumn {
                get {
                    return this.columnDelinquentPenalty;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TechnologyFeeColumn {
                get {
                    return this.columnTechnologyFee;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TransactionFeeColumn {
                get {
                    return this.columnTransactionFee;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CalAmountDueRow this[int index] {
                get {
                    return ((CalAmountDueRow)(this.Rows[index]));
                }
            }
            
            public event CalAmountDueRowChangeEventHandler CalAmountDueRowChanging;
            
            public event CalAmountDueRowChangeEventHandler CalAmountDueRowChanged;
            
            public event CalAmountDueRowChangeEventHandler CalAmountDueRowDeleting;
            
            public event CalAmountDueRowChangeEventHandler CalAmountDueRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddCalAmountDueRow(CalAmountDueRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CalAmountDueRow AddCalAmountDueRow(decimal ExciseTaxState, decimal ExciseTaxLocal, decimal DelinquentInterestState, decimal DelinquentInterestLocal, decimal DelinquentPenalty, decimal TechnologyFee, decimal TransactionFee) {
                CalAmountDueRow rowCalAmountDueRow = ((CalAmountDueRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ExciseTaxState,
                        ExciseTaxLocal,
                        DelinquentInterestState,
                        DelinquentInterestLocal,
                        DelinquentPenalty,
                        TechnologyFee,
                        TransactionFee};
                rowCalAmountDueRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowCalAmountDueRow);
                return rowCalAmountDueRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                CalAmountDueDataTable cln = ((CalAmountDueDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new CalAmountDueDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnExciseTaxState = base.Columns["ExciseTaxState"];
                this.columnExciseTaxLocal = base.Columns["ExciseTaxLocal"];
                this.columnDelinquentInterestState = base.Columns["DelinquentInterestState"];
                this.columnDelinquentInterestLocal = base.Columns["DelinquentInterestLocal"];
                this.columnDelinquentPenalty = base.Columns["DelinquentPenalty"];
                this.columnTechnologyFee = base.Columns["TechnologyFee"];
                this.columnTransactionFee = base.Columns["TransactionFee"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnExciseTaxState = new global::System.Data.DataColumn("ExciseTaxState", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnExciseTaxState);
                this.columnExciseTaxLocal = new global::System.Data.DataColumn("ExciseTaxLocal", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnExciseTaxLocal);
                this.columnDelinquentInterestState = new global::System.Data.DataColumn("DelinquentInterestState", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDelinquentInterestState);
                this.columnDelinquentInterestLocal = new global::System.Data.DataColumn("DelinquentInterestLocal", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDelinquentInterestLocal);
                this.columnDelinquentPenalty = new global::System.Data.DataColumn("DelinquentPenalty", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDelinquentPenalty);
                this.columnTechnologyFee = new global::System.Data.DataColumn("TechnologyFee", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTechnologyFee);
                this.columnTransactionFee = new global::System.Data.DataColumn("TransactionFee", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTransactionFee);
                this.columnExciseTaxState.ReadOnly = true;
                this.columnExciseTaxLocal.ReadOnly = true;
                this.columnDelinquentInterestState.ReadOnly = true;
                this.columnDelinquentInterestLocal.ReadOnly = true;
                this.columnDelinquentPenalty.ReadOnly = true;
                this.columnTechnologyFee.ReadOnly = true;
                this.columnTransactionFee.ReadOnly = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CalAmountDueRow NewCalAmountDueRow() {
                return ((CalAmountDueRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new CalAmountDueRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(CalAmountDueRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CalAmountDueRowChanged != null)) {
                    this.CalAmountDueRowChanged(this, new CalAmountDueRowChangeEvent(((CalAmountDueRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CalAmountDueRowChanging != null)) {
                    this.CalAmountDueRowChanging(this, new CalAmountDueRowChangeEvent(((CalAmountDueRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CalAmountDueRowDeleted != null)) {
                    this.CalAmountDueRowDeleted(this, new CalAmountDueRowChangeEvent(((CalAmountDueRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CalAmountDueRowDeleting != null)) {
                    this.CalAmountDueRowDeleting(this, new CalAmountDueRowChangeEvent(((CalAmountDueRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveCalAmountDueRow(CalAmountDueRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F15010ExciseAffidavitData ds = new F15010ExciseAffidavitData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "CalAmountDueDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ExciseIndividualTypeDataTable : global::System.Data.TypedTableBase<ExciseIndividualTypeRow> {
            
            private global::System.Data.DataColumn columnIndividualTypeID;
            
            private global::System.Data.DataColumn columnIndividualType;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ExciseIndividualTypeDataTable() {
                this.TableName = "ExciseIndividualType";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ExciseIndividualTypeDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ExciseIndividualTypeDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IndividualTypeIDColumn {
                get {
                    return this.columnIndividualTypeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IndividualTypeColumn {
                get {
                    return this.columnIndividualType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ExciseIndividualTypeRow this[int index] {
                get {
                    return ((ExciseIndividualTypeRow)(this.Rows[index]));
                }
            }
            
            public event ExciseIndividualTypeRowChangeEventHandler ExciseIndividualTypeRowChanging;
            
            public event ExciseIndividualTypeRowChangeEventHandler ExciseIndividualTypeRowChanged;
            
            public event ExciseIndividualTypeRowChangeEventHandler ExciseIndividualTypeRowDeleting;
            
            public event ExciseIndividualTypeRowChangeEventHandler ExciseIndividualTypeRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddExciseIndividualTypeRow(ExciseIndividualTypeRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ExciseIndividualTypeRow AddExciseIndividualTypeRow(byte IndividualTypeID, string IndividualType) {
                ExciseIndividualTypeRow rowExciseIndividualTypeRow = ((ExciseIndividualTypeRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        IndividualTypeID,
                        IndividualType};
                rowExciseIndividualTypeRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowExciseIndividualTypeRow);
                return rowExciseIndividualTypeRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ExciseIndividualTypeDataTable cln = ((ExciseIndividualTypeDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ExciseIndividualTypeDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnIndividualTypeID = base.Columns["IndividualTypeID"];
                this.columnIndividualType = base.Columns["IndividualType"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnIndividualTypeID = new global::System.Data.DataColumn("IndividualTypeID", typeof(byte), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIndividualTypeID);
                this.columnIndividualType = new global::System.Data.DataColumn("IndividualType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIndividualType);
                this.columnIndividualTypeID.AllowDBNull = false;
                this.columnIndividualType.AllowDBNull = false;
                this.columnIndividualType.MaxLength = 30;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ExciseIndividualTypeRow NewExciseIndividualTypeRow() {
                return ((ExciseIndividualTypeRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ExciseIndividualTypeRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ExciseIndividualTypeRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ExciseIndividualTypeRowChanged != null)) {
                    this.ExciseIndividualTypeRowChanged(this, new ExciseIndividualTypeRowChangeEvent(((ExciseIndividualTypeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ExciseIndividualTypeRowChanging != null)) {
                    this.ExciseIndividualTypeRowChanging(this, new ExciseIndividualTypeRowChangeEvent(((ExciseIndividualTypeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ExciseIndividualTypeRowDeleted != null)) {
                    this.ExciseIndividualTypeRowDeleted(this, new ExciseIndividualTypeRowChangeEvent(((ExciseIndividualTypeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ExciseIndividualTypeRowDeleting != null)) {
                    this.ExciseIndividualTypeRowDeleting(this, new ExciseIndividualTypeRowChangeEvent(((ExciseIndividualTypeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveExciseIndividualTypeRow(ExciseIndividualTypeRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F15010ExciseAffidavitData ds = new F15010ExciseAffidavitData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ExciseIndividualTypeDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class MobileHomeDataTable : global::System.Data.TypedTableBase<MobileHomeRow> {
            
            private global::System.Data.DataColumn columnMobileHomeID;
            
            private global::System.Data.DataColumn columnStatementID;
            
            private global::System.Data.DataColumn columnMake;
            
            private global::System.Data.DataColumn columnYear;
            
            private global::System.Data.DataColumn columnModel;
            
            private global::System.Data.DataColumn columnSize;
            
            private global::System.Data.DataColumn columnSerial;
            
            private global::System.Data.DataColumn columnTaxCode;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MobileHomeDataTable() {
                this.TableName = "MobileHome";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MobileHomeDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected MobileHomeDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MobileHomeIDColumn {
                get {
                    return this.columnMobileHomeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StatementIDColumn {
                get {
                    return this.columnStatementID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MakeColumn {
                get {
                    return this.columnMake;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn YearColumn {
                get {
                    return this.columnYear;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ModelColumn {
                get {
                    return this.columnModel;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SizeColumn {
                get {
                    return this.columnSize;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SerialColumn {
                get {
                    return this.columnSerial;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TaxCodeColumn {
                get {
                    return this.columnTaxCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MobileHomeRow this[int index] {
                get {
                    return ((MobileHomeRow)(this.Rows[index]));
                }
            }
            
            public event MobileHomeRowChangeEventHandler MobileHomeRowChanging;
            
            public event MobileHomeRowChangeEventHandler MobileHomeRowChanged;
            
            public event MobileHomeRowChangeEventHandler MobileHomeRowDeleting;
            
            public event MobileHomeRowChangeEventHandler MobileHomeRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddMobileHomeRow(MobileHomeRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MobileHomeRow AddMobileHomeRow(int MobileHomeID, int StatementID, string Make, string Year, string Model, string Size, string Serial, string TaxCode) {
                MobileHomeRow rowMobileHomeRow = ((MobileHomeRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        MobileHomeID,
                        StatementID,
                        Make,
                        Year,
                        Model,
                        Size,
                        Serial,
                        TaxCode};
                rowMobileHomeRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowMobileHomeRow);
                return rowMobileHomeRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                MobileHomeDataTable cln = ((MobileHomeDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new MobileHomeDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnMobileHomeID = base.Columns["MobileHomeID"];
                this.columnStatementID = base.Columns["StatementID"];
                this.columnMake = base.Columns["Make"];
                this.columnYear = base.Columns["Year"];
                this.columnModel = base.Columns["Model"];
                this.columnSize = base.Columns["Size"];
                this.columnSerial = base.Columns["Serial"];
                this.columnTaxCode = base.Columns["TaxCode"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnMobileHomeID = new global::System.Data.DataColumn("MobileHomeID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMobileHomeID);
                this.columnStatementID = new global::System.Data.DataColumn("StatementID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStatementID);
                this.columnMake = new global::System.Data.DataColumn("Make", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMake);
                this.columnYear = new global::System.Data.DataColumn("Year", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnYear);
                this.columnModel = new global::System.Data.DataColumn("Model", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnModel);
                this.columnSize = new global::System.Data.DataColumn("Size", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSize);
                this.columnSerial = new global::System.Data.DataColumn("Serial", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSerial);
                this.columnTaxCode = new global::System.Data.DataColumn("TaxCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTaxCode);
                this.columnMake.MaxLength = 100;
                this.columnModel.MaxLength = 100;
                this.columnSize.MaxLength = 50;
                this.columnSerial.MaxLength = 50;
                this.columnTaxCode.MaxLength = 100;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MobileHomeRow NewMobileHomeRow() {
                return ((MobileHomeRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new MobileHomeRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(MobileHomeRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.MobileHomeRowChanged != null)) {
                    this.MobileHomeRowChanged(this, new MobileHomeRowChangeEvent(((MobileHomeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.MobileHomeRowChanging != null)) {
                    this.MobileHomeRowChanging(this, new MobileHomeRowChangeEvent(((MobileHomeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.MobileHomeRowDeleted != null)) {
                    this.MobileHomeRowDeleted(this, new MobileHomeRowChangeEvent(((MobileHomeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.MobileHomeRowDeleting != null)) {
                    this.MobileHomeRowDeleting(this, new MobileHomeRowChangeEvent(((MobileHomeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveMobileHomeRow(MobileHomeRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F15010ExciseAffidavitData ds = new F15010ExciseAffidavitData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "MobileHomeDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ListPartiesOwnerDetail2DataTable : global::System.Data.TypedTableBase<ListPartiesOwnerDetail2Row> {
            
            private global::System.Data.DataColumn columnOwnerID;
            
            private global::System.Data.DataColumn columnPOwnerID;
            
            private global::System.Data.DataColumn columnName;
            
            private global::System.Data.DataColumn columnAddress1;
            
            private global::System.Data.DataColumn columnAddress2;
            
            private global::System.Data.DataColumn columnAddress;
            
            private global::System.Data.DataColumn columnCity;
            
            private global::System.Data.DataColumn columnState;
            
            private global::System.Data.DataColumn columnZip;
            
            private global::System.Data.DataColumn columnNameOwner;
            
            private global::System.Data.DataColumn columnStatus;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListPartiesOwnerDetail2DataTable() {
                this.TableName = "ListPartiesOwnerDetail2";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListPartiesOwnerDetail2DataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ListPartiesOwnerDetail2DataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OwnerIDColumn {
                get {
                    return this.columnOwnerID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn POwnerIDColumn {
                get {
                    return this.columnPOwnerID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Address1Column {
                get {
                    return this.columnAddress1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Address2Column {
                get {
                    return this.columnAddress2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AddressColumn {
                get {
                    return this.columnAddress;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CityColumn {
                get {
                    return this.columnCity;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StateColumn {
                get {
                    return this.columnState;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ZipColumn {
                get {
                    return this.columnZip;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NameOwnerColumn {
                get {
                    return this.columnNameOwner;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StatusColumn {
                get {
                    return this.columnStatus;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListPartiesOwnerDetail2Row this[int index] {
                get {
                    return ((ListPartiesOwnerDetail2Row)(this.Rows[index]));
                }
            }
            
            public event ListPartiesOwnerDetail2RowChangeEventHandler ListPartiesOwnerDetail2RowChanging;
            
            public event ListPartiesOwnerDetail2RowChangeEventHandler ListPartiesOwnerDetail2RowChanged;
            
            public event ListPartiesOwnerDetail2RowChangeEventHandler ListPartiesOwnerDetail2RowDeleting;
            
            public event ListPartiesOwnerDetail2RowChangeEventHandler ListPartiesOwnerDetail2RowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddListPartiesOwnerDetail2Row(ListPartiesOwnerDetail2Row row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListPartiesOwnerDetail2Row AddListPartiesOwnerDetail2Row(int POwnerID, string Name, string Address1, string Address2, string Address, string City, string State, string Zip, string NameOwner, string Status) {
                ListPartiesOwnerDetail2Row rowListPartiesOwnerDetail2Row = ((ListPartiesOwnerDetail2Row)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        POwnerID,
                        Name,
                        Address1,
                        Address2,
                        Address,
                        City,
                        State,
                        Zip,
                        NameOwner,
                        Status};
                rowListPartiesOwnerDetail2Row.ItemArray = columnValuesArray;
                this.Rows.Add(rowListPartiesOwnerDetail2Row);
                return rowListPartiesOwnerDetail2Row;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListPartiesOwnerDetail2Row FindByOwnerID(int OwnerID) {
                return ((ListPartiesOwnerDetail2Row)(this.Rows.Find(new object[] {
                            OwnerID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ListPartiesOwnerDetail2DataTable cln = ((ListPartiesOwnerDetail2DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ListPartiesOwnerDetail2DataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnOwnerID = base.Columns["OwnerID"];
                this.columnPOwnerID = base.Columns["POwnerID"];
                this.columnName = base.Columns["Name"];
                this.columnAddress1 = base.Columns["Address1"];
                this.columnAddress2 = base.Columns["Address2"];
                this.columnAddress = base.Columns["Address"];
                this.columnCity = base.Columns["City"];
                this.columnState = base.Columns["State"];
                this.columnZip = base.Columns["Zip"];
                this.columnNameOwner = base.Columns["NameOwner"];
                this.columnStatus = base.Columns["Status"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnOwnerID = new global::System.Data.DataColumn("OwnerID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOwnerID);
                this.columnPOwnerID = new global::System.Data.DataColumn("POwnerID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPOwnerID);
                this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnAddress1 = new global::System.Data.DataColumn("Address1", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAddress1);
                this.columnAddress2 = new global::System.Data.DataColumn("Address2", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAddress2);
                this.columnAddress = new global::System.Data.DataColumn("Address", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAddress);
                this.columnCity = new global::System.Data.DataColumn("City", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCity);
                this.columnState = new global::System.Data.DataColumn("State", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnState);
                this.columnZip = new global::System.Data.DataColumn("Zip", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnZip);
                this.columnNameOwner = new global::System.Data.DataColumn("NameOwner", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNameOwner);
                this.columnStatus = new global::System.Data.DataColumn("Status", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStatus);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnOwnerID}, true));
                this.columnOwnerID.AutoIncrement = true;
                this.columnOwnerID.AllowDBNull = false;
                this.columnOwnerID.ReadOnly = true;
                this.columnOwnerID.Unique = true;
                this.columnPOwnerID.ReadOnly = true;
                this.columnName.ReadOnly = true;
                this.columnName.MaxLength = 101;
                this.columnAddress1.MaxLength = 50;
                this.columnAddress2.MaxLength = 50;
                this.columnAddress.ReadOnly = true;
                this.columnAddress.MaxLength = 102;
                this.columnCity.MaxLength = 50;
                this.columnState.MaxLength = 50;
                this.columnZip.MaxLength = 50;
                this.columnNameOwner.ReadOnly = true;
                this.columnNameOwner.MaxLength = 102;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListPartiesOwnerDetail2Row NewListPartiesOwnerDetail2Row() {
                return ((ListPartiesOwnerDetail2Row)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ListPartiesOwnerDetail2Row(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ListPartiesOwnerDetail2Row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ListPartiesOwnerDetail2RowChanged != null)) {
                    this.ListPartiesOwnerDetail2RowChanged(this, new ListPartiesOwnerDetail2RowChangeEvent(((ListPartiesOwnerDetail2Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ListPartiesOwnerDetail2RowChanging != null)) {
                    this.ListPartiesOwnerDetail2RowChanging(this, new ListPartiesOwnerDetail2RowChangeEvent(((ListPartiesOwnerDetail2Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ListPartiesOwnerDetail2RowDeleted != null)) {
                    this.ListPartiesOwnerDetail2RowDeleted(this, new ListPartiesOwnerDetail2RowChangeEvent(((ListPartiesOwnerDetail2Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ListPartiesOwnerDetail2RowDeleting != null)) {
                    this.ListPartiesOwnerDetail2RowDeleting(this, new ListPartiesOwnerDetail2RowChangeEvent(((ListPartiesOwnerDetail2Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveListPartiesOwnerDetail2Row(ListPartiesOwnerDetail2Row row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F15010ExciseAffidavitData ds = new F15010ExciseAffidavitData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ListPartiesOwnerDetail2DataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ListParcelDetailTableDataTable : global::System.Data.TypedTableBase<ListParcelDetailTableRow> {
            
            private global::System.Data.DataColumn columnParcelNumber;
            
            private global::System.Data.DataColumn columnAssessedValue;
            
            private global::System.Data.DataColumn columnIsPersonalProperty;
            
            private global::System.Data.DataColumn columnLegal;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListParcelDetailTableDataTable() {
                this.TableName = "ListParcelDetailTable";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListParcelDetailTableDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ListParcelDetailTableDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ParcelNumberColumn {
                get {
                    return this.columnParcelNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AssessedValueColumn {
                get {
                    return this.columnAssessedValue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsPersonalPropertyColumn {
                get {
                    return this.columnIsPersonalProperty;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LegalColumn {
                get {
                    return this.columnLegal;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListParcelDetailTableRow this[int index] {
                get {
                    return ((ListParcelDetailTableRow)(this.Rows[index]));
                }
            }
            
            public event ListParcelDetailTableRowChangeEventHandler ListParcelDetailTableRowChanging;
            
            public event ListParcelDetailTableRowChangeEventHandler ListParcelDetailTableRowChanged;
            
            public event ListParcelDetailTableRowChangeEventHandler ListParcelDetailTableRowDeleting;
            
            public event ListParcelDetailTableRowChangeEventHandler ListParcelDetailTableRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddListParcelDetailTableRow(ListParcelDetailTableRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListParcelDetailTableRow AddListParcelDetailTableRow(string ParcelNumber, decimal AssessedValue, string IsPersonalProperty, string Legal) {
                ListParcelDetailTableRow rowListParcelDetailTableRow = ((ListParcelDetailTableRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ParcelNumber,
                        AssessedValue,
                        IsPersonalProperty,
                        Legal};
                rowListParcelDetailTableRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowListParcelDetailTableRow);
                return rowListParcelDetailTableRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ListParcelDetailTableDataTable cln = ((ListParcelDetailTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ListParcelDetailTableDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnParcelNumber = base.Columns["ParcelNumber"];
                this.columnAssessedValue = base.Columns["AssessedValue"];
                this.columnIsPersonalProperty = base.Columns["IsPersonalProperty"];
                this.columnLegal = base.Columns["Legal"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnParcelNumber = new global::System.Data.DataColumn("ParcelNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnParcelNumber);
                this.columnAssessedValue = new global::System.Data.DataColumn("AssessedValue", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAssessedValue);
                this.columnIsPersonalProperty = new global::System.Data.DataColumn("IsPersonalProperty", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsPersonalProperty);
                this.columnLegal = new global::System.Data.DataColumn("Legal", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLegal);
                this.columnParcelNumber.MaxLength = 50;
                this.columnIsPersonalProperty.ReadOnly = true;
                this.columnIsPersonalProperty.MaxLength = 5;
                this.columnLegal.ReadOnly = true;
                this.columnLegal.MaxLength = 5000;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListParcelDetailTableRow NewListParcelDetailTableRow() {
                return ((ListParcelDetailTableRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ListParcelDetailTableRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ListParcelDetailTableRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ListParcelDetailTableRowChanged != null)) {
                    this.ListParcelDetailTableRowChanged(this, new ListParcelDetailTableRowChangeEvent(((ListParcelDetailTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ListParcelDetailTableRowChanging != null)) {
                    this.ListParcelDetailTableRowChanging(this, new ListParcelDetailTableRowChangeEvent(((ListParcelDetailTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ListParcelDetailTableRowDeleted != null)) {
                    this.ListParcelDetailTableRowDeleted(this, new ListParcelDetailTableRowChangeEvent(((ListParcelDetailTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ListParcelDetailTableRowDeleting != null)) {
                    this.ListParcelDetailTableRowDeleting(this, new ListParcelDetailTableRowChangeEvent(((ListParcelDetailTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveListParcelDetailTableRow(ListParcelDetailTableRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F15010ExciseAffidavitData ds = new F15010ExciseAffidavitData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ListParcelDetailTableDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ListExciseWACDataTable : global::System.Data.TypedTableBase<ListExciseWACRow> {
            
            private global::System.Data.DataColumn columnWACID;
            
            private global::System.Data.DataColumn columnWAC;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListExciseWACDataTable() {
                this.TableName = "ListExciseWAC";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListExciseWACDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ListExciseWACDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WACIDColumn {
                get {
                    return this.columnWACID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WACColumn {
                get {
                    return this.columnWAC;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListExciseWACRow this[int index] {
                get {
                    return ((ListExciseWACRow)(this.Rows[index]));
                }
            }
            
            public event ListExciseWACRowChangeEventHandler ListExciseWACRowChanging;
            
            public event ListExciseWACRowChangeEventHandler ListExciseWACRowChanged;
            
            public event ListExciseWACRowChangeEventHandler ListExciseWACRowDeleting;
            
            public event ListExciseWACRowChangeEventHandler ListExciseWACRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddListExciseWACRow(ListExciseWACRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListExciseWACRow AddListExciseWACRow(string WAC) {
                ListExciseWACRow rowListExciseWACRow = ((ListExciseWACRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        WAC};
                rowListExciseWACRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowListExciseWACRow);
                return rowListExciseWACRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ListExciseWACDataTable cln = ((ListExciseWACDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ListExciseWACDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnWACID = base.Columns["WACID"];
                this.columnWAC = base.Columns["WAC"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnWACID = new global::System.Data.DataColumn("WACID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWACID);
                this.columnWAC = new global::System.Data.DataColumn("WAC", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWAC);
                this.columnWACID.AutoIncrement = true;
                this.columnWACID.AllowDBNull = false;
                this.columnWACID.ReadOnly = true;
                this.columnWAC.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListExciseWACRow NewListExciseWACRow() {
                return ((ListExciseWACRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ListExciseWACRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ListExciseWACRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ListExciseWACRowChanged != null)) {
                    this.ListExciseWACRowChanged(this, new ListExciseWACRowChangeEvent(((ListExciseWACRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ListExciseWACRowChanging != null)) {
                    this.ListExciseWACRowChanging(this, new ListExciseWACRowChangeEvent(((ListExciseWACRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ListExciseWACRowDeleted != null)) {
                    this.ListExciseWACRowDeleted(this, new ListExciseWACRowChangeEvent(((ListExciseWACRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ListExciseWACRowDeleting != null)) {
                    this.ListExciseWACRowDeleting(this, new ListExciseWACRowChangeEvent(((ListExciseWACRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveListExciseWACRow(ListExciseWACRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F15010ExciseAffidavitData ds = new F15010ExciseAffidavitData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ListExciseWACDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ListExciseIndividualDataTable : global::System.Data.TypedTableBase<ListExciseIndividualRow> {
            
            private global::System.Data.DataColumn columnIndividualID;
            
            private global::System.Data.DataColumn columnOwnerID;
            
            private global::System.Data.DataColumn columnStatementID;
            
            private global::System.Data.DataColumn columnIndividualTypeID;
            
            private global::System.Data.DataColumn columnName;
            
            private global::System.Data.DataColumn columnAddress1;
            
            private global::System.Data.DataColumn columnAddress2;
            
            private global::System.Data.DataColumn columnCity;
            
            private global::System.Data.DataColumn columnState;
            
            private global::System.Data.DataColumn columnZip;
            
            private global::System.Data.DataColumn columnCountry;
            
            private global::System.Data.DataColumn columnPhone;
            
            private global::System.Data.DataColumn columnPercentOwner;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListExciseIndividualDataTable() {
                this.TableName = "ListExciseIndividual";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListExciseIndividualDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ListExciseIndividualDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IndividualIDColumn {
                get {
                    return this.columnIndividualID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OwnerIDColumn {
                get {
                    return this.columnOwnerID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StatementIDColumn {
                get {
                    return this.columnStatementID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IndividualTypeIDColumn {
                get {
                    return this.columnIndividualTypeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Address1Column {
                get {
                    return this.columnAddress1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Address2Column {
                get {
                    return this.columnAddress2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CityColumn {
                get {
                    return this.columnCity;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StateColumn {
                get {
                    return this.columnState;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ZipColumn {
                get {
                    return this.columnZip;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CountryColumn {
                get {
                    return this.columnCountry;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PhoneColumn {
                get {
                    return this.columnPhone;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PercentOwnerColumn {
                get {
                    return this.columnPercentOwner;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListExciseIndividualRow this[int index] {
                get {
                    return ((ListExciseIndividualRow)(this.Rows[index]));
                }
            }
            
            public event ListExciseIndividualRowChangeEventHandler ListExciseIndividualRowChanging;
            
            public event ListExciseIndividualRowChangeEventHandler ListExciseIndividualRowChanged;
            
            public event ListExciseIndividualRowChangeEventHandler ListExciseIndividualRowDeleting;
            
            public event ListExciseIndividualRowChangeEventHandler ListExciseIndividualRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddListExciseIndividualRow(ListExciseIndividualRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListExciseIndividualRow AddListExciseIndividualRow(int IndividualID, int OwnerID, int StatementID, byte IndividualTypeID, string Name, string Address1, string Address2, string City, string State, string Zip, string Country, string Phone, float PercentOwner) {
                ListExciseIndividualRow rowListExciseIndividualRow = ((ListExciseIndividualRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        IndividualID,
                        OwnerID,
                        StatementID,
                        IndividualTypeID,
                        Name,
                        Address1,
                        Address2,
                        City,
                        State,
                        Zip,
                        Country,
                        Phone,
                        PercentOwner};
                rowListExciseIndividualRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowListExciseIndividualRow);
                return rowListExciseIndividualRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ListExciseIndividualDataTable cln = ((ListExciseIndividualDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ListExciseIndividualDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnIndividualID = base.Columns["IndividualID"];
                this.columnOwnerID = base.Columns["OwnerID"];
                this.columnStatementID = base.Columns["StatementID"];
                this.columnIndividualTypeID = base.Columns["IndividualTypeID"];
                this.columnName = base.Columns["Name"];
                this.columnAddress1 = base.Columns["Address1"];
                this.columnAddress2 = base.Columns["Address2"];
                this.columnCity = base.Columns["City"];
                this.columnState = base.Columns["State"];
                this.columnZip = base.Columns["Zip"];
                this.columnCountry = base.Columns["Country"];
                this.columnPhone = base.Columns["Phone"];
                this.columnPercentOwner = base.Columns["PercentOwner"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnIndividualID = new global::System.Data.DataColumn("IndividualID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIndividualID);
                this.columnOwnerID = new global::System.Data.DataColumn("OwnerID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOwnerID);
                this.columnStatementID = new global::System.Data.DataColumn("StatementID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStatementID);
                this.columnIndividualTypeID = new global::System.Data.DataColumn("IndividualTypeID", typeof(byte), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIndividualTypeID);
                this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnAddress1 = new global::System.Data.DataColumn("Address1", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAddress1);
                this.columnAddress2 = new global::System.Data.DataColumn("Address2", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAddress2);
                this.columnCity = new global::System.Data.DataColumn("City", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCity);
                this.columnState = new global::System.Data.DataColumn("State", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnState);
                this.columnZip = new global::System.Data.DataColumn("Zip", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnZip);
                this.columnCountry = new global::System.Data.DataColumn("Country", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCountry);
                this.columnPhone = new global::System.Data.DataColumn("Phone", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPhone);
                this.columnPercentOwner = new global::System.Data.DataColumn("PercentOwner", typeof(float), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPercentOwner);
                this.columnIndividualID.AllowDBNull = false;
                this.columnStatementID.AllowDBNull = false;
                this.columnIndividualTypeID.AllowDBNull = false;
                this.columnName.AllowDBNull = false;
                this.columnName.MaxLength = 350;
                this.columnAddress1.MaxLength = 150;
                this.columnAddress2.MaxLength = 150;
                this.columnCity.MaxLength = 50;
                this.columnState.MaxLength = 50;
                this.columnZip.MaxLength = 50;
                this.columnCountry.MaxLength = 100;
                this.columnPhone.MaxLength = 12;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListExciseIndividualRow NewListExciseIndividualRow() {
                return ((ListExciseIndividualRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ListExciseIndividualRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ListExciseIndividualRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ListExciseIndividualRowChanged != null)) {
                    this.ListExciseIndividualRowChanged(this, new ListExciseIndividualRowChangeEvent(((ListExciseIndividualRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ListExciseIndividualRowChanging != null)) {
                    this.ListExciseIndividualRowChanging(this, new ListExciseIndividualRowChangeEvent(((ListExciseIndividualRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ListExciseIndividualRowDeleted != null)) {
                    this.ListExciseIndividualRowDeleted(this, new ListExciseIndividualRowChangeEvent(((ListExciseIndividualRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ListExciseIndividualRowDeleting != null)) {
                    this.ListExciseIndividualRowDeleting(this, new ListExciseIndividualRowChangeEvent(((ListExciseIndividualRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveListExciseIndividualRow(ListExciseIndividualRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F15010ExciseAffidavitData ds = new F15010ExciseAffidavitData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ListExciseIndividualDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ExciseSourceDataTable : global::System.Data.TypedTableBase<ExciseSourceRow> {
            
            private global::System.Data.DataColumn columnSourceID;
            
            private global::System.Data.DataColumn columnSource;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ExciseSourceDataTable() {
                this.TableName = "ExciseSource";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ExciseSourceDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ExciseSourceDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SourceIDColumn {
                get {
                    return this.columnSourceID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SourceColumn {
                get {
                    return this.columnSource;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ExciseSourceRow this[int index] {
                get {
                    return ((ExciseSourceRow)(this.Rows[index]));
                }
            }
            
            public event ExciseSourceRowChangeEventHandler ExciseSourceRowChanging;
            
            public event ExciseSourceRowChangeEventHandler ExciseSourceRowChanged;
            
            public event ExciseSourceRowChangeEventHandler ExciseSourceRowDeleting;
            
            public event ExciseSourceRowChangeEventHandler ExciseSourceRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddExciseSourceRow(ExciseSourceRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ExciseSourceRow AddExciseSourceRow(int SourceID, string Source) {
                ExciseSourceRow rowExciseSourceRow = ((ExciseSourceRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        SourceID,
                        Source};
                rowExciseSourceRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowExciseSourceRow);
                return rowExciseSourceRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ExciseSourceDataTable cln = ((ExciseSourceDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ExciseSourceDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnSourceID = base.Columns["SourceID"];
                this.columnSource = base.Columns["Source"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnSourceID = new global::System.Data.DataColumn("SourceID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSourceID);
                this.columnSource = new global::System.Data.DataColumn("Source", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSource);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ExciseSourceRow NewExciseSourceRow() {
                return ((ExciseSourceRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ExciseSourceRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ExciseSourceRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ExciseSourceRowChanged != null)) {
                    this.ExciseSourceRowChanged(this, new ExciseSourceRowChangeEvent(((ExciseSourceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ExciseSourceRowChanging != null)) {
                    this.ExciseSourceRowChanging(this, new ExciseSourceRowChangeEvent(((ExciseSourceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ExciseSourceRowDeleted != null)) {
                    this.ExciseSourceRowDeleted(this, new ExciseSourceRowChangeEvent(((ExciseSourceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ExciseSourceRowDeleting != null)) {
                    this.ExciseSourceRowDeleting(this, new ExciseSourceRowChangeEvent(((ExciseSourceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveExciseSourceRow(ExciseSourceRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F15010ExciseAffidavitData ds = new F15010ExciseAffidavitData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ExciseSourceDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ExciseDeedTypeDataTable : global::System.Data.TypedTableBase<ExciseDeedTypeRow> {
            
            private global::System.Data.DataColumn columnDeedTypeID;
            
            private global::System.Data.DataColumn columnDeedType;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ExciseDeedTypeDataTable() {
                this.TableName = "ExciseDeedType";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ExciseDeedTypeDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ExciseDeedTypeDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeedTypeIDColumn {
                get {
                    return this.columnDeedTypeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeedTypeColumn {
                get {
                    return this.columnDeedType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ExciseDeedTypeRow this[int index] {
                get {
                    return ((ExciseDeedTypeRow)(this.Rows[index]));
                }
            }
            
            public event ExciseDeedTypeRowChangeEventHandler ExciseDeedTypeRowChanging;
            
            public event ExciseDeedTypeRowChangeEventHandler ExciseDeedTypeRowChanged;
            
            public event ExciseDeedTypeRowChangeEventHandler ExciseDeedTypeRowDeleting;
            
            public event ExciseDeedTypeRowChangeEventHandler ExciseDeedTypeRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddExciseDeedTypeRow(ExciseDeedTypeRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ExciseDeedTypeRow AddExciseDeedTypeRow(int DeedTypeID, string DeedType) {
                ExciseDeedTypeRow rowExciseDeedTypeRow = ((ExciseDeedTypeRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        DeedTypeID,
                        DeedType};
                rowExciseDeedTypeRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowExciseDeedTypeRow);
                return rowExciseDeedTypeRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ExciseDeedTypeDataTable cln = ((ExciseDeedTypeDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ExciseDeedTypeDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnDeedTypeID = base.Columns["DeedTypeID"];
                this.columnDeedType = base.Columns["DeedType"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnDeedTypeID = new global::System.Data.DataColumn("DeedTypeID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeedTypeID);
                this.columnDeedType = new global::System.Data.DataColumn("DeedType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeedType);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ExciseDeedTypeRow NewExciseDeedTypeRow() {
                return ((ExciseDeedTypeRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ExciseDeedTypeRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ExciseDeedTypeRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ExciseDeedTypeRowChanged != null)) {
                    this.ExciseDeedTypeRowChanged(this, new ExciseDeedTypeRowChangeEvent(((ExciseDeedTypeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ExciseDeedTypeRowChanging != null)) {
                    this.ExciseDeedTypeRowChanging(this, new ExciseDeedTypeRowChangeEvent(((ExciseDeedTypeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ExciseDeedTypeRowDeleted != null)) {
                    this.ExciseDeedTypeRowDeleted(this, new ExciseDeedTypeRowChangeEvent(((ExciseDeedTypeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ExciseDeedTypeRowDeleting != null)) {
                    this.ExciseDeedTypeRowDeleting(this, new ExciseDeedTypeRowChangeEvent(((ExciseDeedTypeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveExciseDeedTypeRow(ExciseDeedTypeRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F15010ExciseAffidavitData ds = new F15010ExciseAffidavitData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ExciseDeedTypeDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class PartiesOwnerDetailDataTable : global::System.Data.TypedTableBase<PartiesOwnerDetailRow> {
            
            private global::System.Data.DataColumn columnName;
            
            private global::System.Data.DataColumn columnPhone;
            
            private global::System.Data.DataColumn columnIndividualType;
            
            private global::System.Data.DataColumn columnIndividualTypeID;
            
            private global::System.Data.DataColumn columnPercentOwner;
            
            private global::System.Data.DataColumn columnAddress1;
            
            private global::System.Data.DataColumn columnAddress2;
            
            private global::System.Data.DataColumn columnCity;
            
            private global::System.Data.DataColumn columnState;
            
            private global::System.Data.DataColumn columnZip;
            
            private global::System.Data.DataColumn columnCountry;
            
            private global::System.Data.DataColumn columnOwnerID;
            
            private global::System.Data.DataColumn columnStatus;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PartiesOwnerDetailDataTable() {
                this.TableName = "PartiesOwnerDetail";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PartiesOwnerDetailDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected PartiesOwnerDetailDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PhoneColumn {
                get {
                    return this.columnPhone;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IndividualTypeColumn {
                get {
                    return this.columnIndividualType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IndividualTypeIDColumn {
                get {
                    return this.columnIndividualTypeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PercentOwnerColumn {
                get {
                    return this.columnPercentOwner;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Address1Column {
                get {
                    return this.columnAddress1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Address2Column {
                get {
                    return this.columnAddress2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CityColumn {
                get {
                    return this.columnCity;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StateColumn {
                get {
                    return this.columnState;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ZipColumn {
                get {
                    return this.columnZip;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CountryColumn {
                get {
                    return this.columnCountry;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OwnerIDColumn {
                get {
                    return this.columnOwnerID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StatusColumn {
                get {
                    return this.columnStatus;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PartiesOwnerDetailRow this[int index] {
                get {
                    return ((PartiesOwnerDetailRow)(this.Rows[index]));
                }
            }
            
            public event PartiesOwnerDetailRowChangeEventHandler PartiesOwnerDetailRowChanging;
            
            public event PartiesOwnerDetailRowChangeEventHandler PartiesOwnerDetailRowChanged;
            
            public event PartiesOwnerDetailRowChangeEventHandler PartiesOwnerDetailRowDeleting;
            
            public event PartiesOwnerDetailRowChangeEventHandler PartiesOwnerDetailRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddPartiesOwnerDetailRow(PartiesOwnerDetailRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PartiesOwnerDetailRow AddPartiesOwnerDetailRow(string Name, string Phone, string IndividualType, int IndividualTypeID, int PercentOwner, string Address1, string Address2, string City, string State, string Zip, string Country, int OwnerID, string Status) {
                PartiesOwnerDetailRow rowPartiesOwnerDetailRow = ((PartiesOwnerDetailRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Name,
                        Phone,
                        IndividualType,
                        IndividualTypeID,
                        PercentOwner,
                        Address1,
                        Address2,
                        City,
                        State,
                        Zip,
                        Country,
                        OwnerID,
                        Status};
                rowPartiesOwnerDetailRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowPartiesOwnerDetailRow);
                return rowPartiesOwnerDetailRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                PartiesOwnerDetailDataTable cln = ((PartiesOwnerDetailDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new PartiesOwnerDetailDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnName = base.Columns["Name"];
                this.columnPhone = base.Columns["Phone"];
                this.columnIndividualType = base.Columns["IndividualType"];
                this.columnIndividualTypeID = base.Columns["IndividualTypeID"];
                this.columnPercentOwner = base.Columns["PercentOwner"];
                this.columnAddress1 = base.Columns["Address1"];
                this.columnAddress2 = base.Columns["Address2"];
                this.columnCity = base.Columns["City"];
                this.columnState = base.Columns["State"];
                this.columnZip = base.Columns["Zip"];
                this.columnCountry = base.Columns["Country"];
                this.columnOwnerID = base.Columns["OwnerID"];
                this.columnStatus = base.Columns["Status"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnPhone = new global::System.Data.DataColumn("Phone", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPhone);
                this.columnIndividualType = new global::System.Data.DataColumn("IndividualType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIndividualType);
                this.columnIndividualTypeID = new global::System.Data.DataColumn("IndividualTypeID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIndividualTypeID);
                this.columnPercentOwner = new global::System.Data.DataColumn("PercentOwner", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPercentOwner);
                this.columnAddress1 = new global::System.Data.DataColumn("Address1", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAddress1);
                this.columnAddress2 = new global::System.Data.DataColumn("Address2", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAddress2);
                this.columnCity = new global::System.Data.DataColumn("City", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCity);
                this.columnState = new global::System.Data.DataColumn("State", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnState);
                this.columnZip = new global::System.Data.DataColumn("Zip", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnZip);
                this.columnCountry = new global::System.Data.DataColumn("Country", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCountry);
                this.columnOwnerID = new global::System.Data.DataColumn("OwnerID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOwnerID);
                this.columnStatus = new global::System.Data.DataColumn("Status", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStatus);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PartiesOwnerDetailRow NewPartiesOwnerDetailRow() {
                return ((PartiesOwnerDetailRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new PartiesOwnerDetailRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(PartiesOwnerDetailRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PartiesOwnerDetailRowChanged != null)) {
                    this.PartiesOwnerDetailRowChanged(this, new PartiesOwnerDetailRowChangeEvent(((PartiesOwnerDetailRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PartiesOwnerDetailRowChanging != null)) {
                    this.PartiesOwnerDetailRowChanging(this, new PartiesOwnerDetailRowChangeEvent(((PartiesOwnerDetailRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PartiesOwnerDetailRowDeleted != null)) {
                    this.PartiesOwnerDetailRowDeleted(this, new PartiesOwnerDetailRowChangeEvent(((PartiesOwnerDetailRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PartiesOwnerDetailRowDeleting != null)) {
                    this.PartiesOwnerDetailRowDeleting(this, new PartiesOwnerDetailRowChangeEvent(((PartiesOwnerDetailRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovePartiesOwnerDetailRow(PartiesOwnerDetailRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F15010ExciseAffidavitData ds = new F15010ExciseAffidavitData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "PartiesOwnerDetailDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ExciseUseCodeDataTable : global::System.Data.TypedTableBase<ExciseUseCodeRow> {
            
            private global::System.Data.DataColumn columnExciseRateID;
            
            private global::System.Data.DataColumn columnUseCode1;
            
            private global::System.Data.DataColumn columnUseCode2;
            
            private global::System.Data.DataColumn columnUseCode3;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ExciseUseCodeDataTable() {
                this.TableName = "ExciseUseCode";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ExciseUseCodeDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ExciseUseCodeDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ExciseRateIDColumn {
                get {
                    return this.columnExciseRateID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UseCode1Column {
                get {
                    return this.columnUseCode1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UseCode2Column {
                get {
                    return this.columnUseCode2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UseCode3Column {
                get {
                    return this.columnUseCode3;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ExciseUseCodeRow this[int index] {
                get {
                    return ((ExciseUseCodeRow)(this.Rows[index]));
                }
            }
            
            public event ExciseUseCodeRowChangeEventHandler ExciseUseCodeRowChanging;
            
            public event ExciseUseCodeRowChangeEventHandler ExciseUseCodeRowChanged;
            
            public event ExciseUseCodeRowChangeEventHandler ExciseUseCodeRowDeleting;
            
            public event ExciseUseCodeRowChangeEventHandler ExciseUseCodeRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddExciseUseCodeRow(ExciseUseCodeRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ExciseUseCodeRow AddExciseUseCodeRow(int ExciseRateID, string UseCode1, string UseCode2, string UseCode3) {
                ExciseUseCodeRow rowExciseUseCodeRow = ((ExciseUseCodeRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ExciseRateID,
                        UseCode1,
                        UseCode2,
                        UseCode3};
                rowExciseUseCodeRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowExciseUseCodeRow);
                return rowExciseUseCodeRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ExciseUseCodeDataTable cln = ((ExciseUseCodeDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ExciseUseCodeDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnExciseRateID = base.Columns["ExciseRateID"];
                this.columnUseCode1 = base.Columns["UseCode1"];
                this.columnUseCode2 = base.Columns["UseCode2"];
                this.columnUseCode3 = base.Columns["UseCode3"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnExciseRateID = new global::System.Data.DataColumn("ExciseRateID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnExciseRateID);
                this.columnUseCode1 = new global::System.Data.DataColumn("UseCode1", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUseCode1);
                this.columnUseCode2 = new global::System.Data.DataColumn("UseCode2", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUseCode2);
                this.columnUseCode3 = new global::System.Data.DataColumn("UseCode3", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUseCode3);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ExciseUseCodeRow NewExciseUseCodeRow() {
                return ((ExciseUseCodeRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ExciseUseCodeRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ExciseUseCodeRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ExciseUseCodeRowChanged != null)) {
                    this.ExciseUseCodeRowChanged(this, new ExciseUseCodeRowChangeEvent(((ExciseUseCodeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ExciseUseCodeRowChanging != null)) {
                    this.ExciseUseCodeRowChanging(this, new ExciseUseCodeRowChangeEvent(((ExciseUseCodeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ExciseUseCodeRowDeleted != null)) {
                    this.ExciseUseCodeRowDeleted(this, new ExciseUseCodeRowChangeEvent(((ExciseUseCodeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ExciseUseCodeRowDeleting != null)) {
                    this.ExciseUseCodeRowDeleting(this, new ExciseUseCodeRowChangeEvent(((ExciseUseCodeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveExciseUseCodeRow(ExciseUseCodeRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F15010ExciseAffidavitData ds = new F15010ExciseAffidavitData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ExciseUseCodeDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class DorSubmitTableDataTable : global::System.Data.TypedTableBase<DorSubmitTableRow> {
            
            private global::System.Data.DataColumn columnsubmittedID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DorSubmitTableDataTable() {
                this.TableName = "DorSubmitTable";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DorSubmitTableDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected DorSubmitTableDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn submittedIDColumn {
                get {
                    return this.columnsubmittedID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DorSubmitTableRow this[int index] {
                get {
                    return ((DorSubmitTableRow)(this.Rows[index]));
                }
            }
            
            public event DorSubmitTableRowChangeEventHandler DorSubmitTableRowChanging;
            
            public event DorSubmitTableRowChangeEventHandler DorSubmitTableRowChanged;
            
            public event DorSubmitTableRowChangeEventHandler DorSubmitTableRowDeleting;
            
            public event DorSubmitTableRowChangeEventHandler DorSubmitTableRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddDorSubmitTableRow(DorSubmitTableRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DorSubmitTableRow AddDorSubmitTableRow(int submittedID) {
                DorSubmitTableRow rowDorSubmitTableRow = ((DorSubmitTableRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        submittedID};
                rowDorSubmitTableRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowDorSubmitTableRow);
                return rowDorSubmitTableRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                DorSubmitTableDataTable cln = ((DorSubmitTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new DorSubmitTableDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnsubmittedID = base.Columns["submittedID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnsubmittedID = new global::System.Data.DataColumn("submittedID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsubmittedID);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DorSubmitTableRow NewDorSubmitTableRow() {
                return ((DorSubmitTableRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new DorSubmitTableRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(DorSubmitTableRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DorSubmitTableRowChanged != null)) {
                    this.DorSubmitTableRowChanged(this, new DorSubmitTableRowChangeEvent(((DorSubmitTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DorSubmitTableRowChanging != null)) {
                    this.DorSubmitTableRowChanging(this, new DorSubmitTableRowChangeEvent(((DorSubmitTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DorSubmitTableRowDeleted != null)) {
                    this.DorSubmitTableRowDeleted(this, new DorSubmitTableRowChangeEvent(((DorSubmitTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DorSubmitTableRowDeleting != null)) {
                    this.DorSubmitTableRowDeleting(this, new DorSubmitTableRowChangeEvent(((DorSubmitTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveDorSubmitTableRow(DorSubmitTableRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F15010ExciseAffidavitData ds = new F15010ExciseAffidavitData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "DorSubmitTableDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class OpenSpaceDataDataTable : global::System.Data.TypedTableBase<OpenSpaceDataRow> {
            
            private global::System.Data.DataColumn columnColumn1;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OpenSpaceDataDataTable() {
                this.TableName = "OpenSpaceData";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal OpenSpaceDataDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected OpenSpaceDataDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Column1Column {
                get {
                    return this.columnColumn1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OpenSpaceDataRow this[int index] {
                get {
                    return ((OpenSpaceDataRow)(this.Rows[index]));
                }
            }
            
            public event OpenSpaceDataRowChangeEventHandler OpenSpaceDataRowChanging;
            
            public event OpenSpaceDataRowChangeEventHandler OpenSpaceDataRowChanged;
            
            public event OpenSpaceDataRowChangeEventHandler OpenSpaceDataRowDeleting;
            
            public event OpenSpaceDataRowChangeEventHandler OpenSpaceDataRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddOpenSpaceDataRow(OpenSpaceDataRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OpenSpaceDataRow AddOpenSpaceDataRow(int Column1) {
                OpenSpaceDataRow rowOpenSpaceDataRow = ((OpenSpaceDataRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Column1};
                rowOpenSpaceDataRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowOpenSpaceDataRow);
                return rowOpenSpaceDataRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                OpenSpaceDataDataTable cln = ((OpenSpaceDataDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new OpenSpaceDataDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnColumn1 = base.Columns["Column1"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnColumn1 = new global::System.Data.DataColumn("Column1", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnColumn1);
                this.columnColumn1.ReadOnly = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OpenSpaceDataRow NewOpenSpaceDataRow() {
                return ((OpenSpaceDataRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new OpenSpaceDataRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(OpenSpaceDataRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.OpenSpaceDataRowChanged != null)) {
                    this.OpenSpaceDataRowChanged(this, new OpenSpaceDataRowChangeEvent(((OpenSpaceDataRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.OpenSpaceDataRowChanging != null)) {
                    this.OpenSpaceDataRowChanging(this, new OpenSpaceDataRowChangeEvent(((OpenSpaceDataRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.OpenSpaceDataRowDeleted != null)) {
                    this.OpenSpaceDataRowDeleted(this, new OpenSpaceDataRowChangeEvent(((OpenSpaceDataRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.OpenSpaceDataRowDeleting != null)) {
                    this.OpenSpaceDataRowDeleting(this, new OpenSpaceDataRowChangeEvent(((OpenSpaceDataRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveOpenSpaceDataRow(OpenSpaceDataRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F15010ExciseAffidavitData ds = new F15010ExciseAffidavitData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "OpenSpaceDataDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ConfiguredRollYearDataTable : global::System.Data.TypedTableBase<ConfiguredRollYearRow> {
            
            private global::System.Data.DataColumn columnConfiguredYear;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ConfiguredRollYearDataTable() {
                this.TableName = "ConfiguredRollYear";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ConfiguredRollYearDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ConfiguredRollYearDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ConfiguredYearColumn {
                get {
                    return this.columnConfiguredYear;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ConfiguredRollYearRow this[int index] {
                get {
                    return ((ConfiguredRollYearRow)(this.Rows[index]));
                }
            }
            
            public event ConfiguredRollYearRowChangeEventHandler ConfiguredRollYearRowChanging;
            
            public event ConfiguredRollYearRowChangeEventHandler ConfiguredRollYearRowChanged;
            
            public event ConfiguredRollYearRowChangeEventHandler ConfiguredRollYearRowDeleting;
            
            public event ConfiguredRollYearRowChangeEventHandler ConfiguredRollYearRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddConfiguredRollYearRow(ConfiguredRollYearRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ConfiguredRollYearRow AddConfiguredRollYearRow(string ConfiguredYear) {
                ConfiguredRollYearRow rowConfiguredRollYearRow = ((ConfiguredRollYearRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ConfiguredYear};
                rowConfiguredRollYearRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowConfiguredRollYearRow);
                return rowConfiguredRollYearRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ConfiguredRollYearDataTable cln = ((ConfiguredRollYearDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ConfiguredRollYearDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnConfiguredYear = base.Columns["ConfiguredYear"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnConfiguredYear = new global::System.Data.DataColumn("ConfiguredYear", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnConfiguredYear);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ConfiguredRollYearRow NewConfiguredRollYearRow() {
                return ((ConfiguredRollYearRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ConfiguredRollYearRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ConfiguredRollYearRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ConfiguredRollYearRowChanged != null)) {
                    this.ConfiguredRollYearRowChanged(this, new ConfiguredRollYearRowChangeEvent(((ConfiguredRollYearRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ConfiguredRollYearRowChanging != null)) {
                    this.ConfiguredRollYearRowChanging(this, new ConfiguredRollYearRowChangeEvent(((ConfiguredRollYearRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ConfiguredRollYearRowDeleted != null)) {
                    this.ConfiguredRollYearRowDeleted(this, new ConfiguredRollYearRowChangeEvent(((ConfiguredRollYearRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ConfiguredRollYearRowDeleting != null)) {
                    this.ConfiguredRollYearRowDeleting(this, new ConfiguredRollYearRowChangeEvent(((ConfiguredRollYearRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveConfiguredRollYearRow(ConfiguredRollYearRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F15010ExciseAffidavitData ds = new F15010ExciseAffidavitData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ConfiguredRollYearDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class OwnerStatusLowDataTable : global::System.Data.TypedTableBase<OwnerStatusLowRow> {
            
            private global::System.Data.DataColumn columnLow;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OwnerStatusLowDataTable() {
                this.TableName = "OwnerStatusLow";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal OwnerStatusLowDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected OwnerStatusLowDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LowColumn {
                get {
                    return this.columnLow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OwnerStatusLowRow this[int index] {
                get {
                    return ((OwnerStatusLowRow)(this.Rows[index]));
                }
            }
            
            public event OwnerStatusLowRowChangeEventHandler OwnerStatusLowRowChanging;
            
            public event OwnerStatusLowRowChangeEventHandler OwnerStatusLowRowChanged;
            
            public event OwnerStatusLowRowChangeEventHandler OwnerStatusLowRowDeleting;
            
            public event OwnerStatusLowRowChangeEventHandler OwnerStatusLowRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddOwnerStatusLowRow(OwnerStatusLowRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OwnerStatusLowRow AddOwnerStatusLowRow(int Low) {
                OwnerStatusLowRow rowOwnerStatusLowRow = ((OwnerStatusLowRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Low};
                rowOwnerStatusLowRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowOwnerStatusLowRow);
                return rowOwnerStatusLowRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                OwnerStatusLowDataTable cln = ((OwnerStatusLowDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new OwnerStatusLowDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnLow = base.Columns["Low"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnLow = new global::System.Data.DataColumn("Low", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OwnerStatusLowRow NewOwnerStatusLowRow() {
                return ((OwnerStatusLowRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new OwnerStatusLowRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(OwnerStatusLowRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.OwnerStatusLowRowChanged != null)) {
                    this.OwnerStatusLowRowChanged(this, new OwnerStatusLowRowChangeEvent(((OwnerStatusLowRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.OwnerStatusLowRowChanging != null)) {
                    this.OwnerStatusLowRowChanging(this, new OwnerStatusLowRowChangeEvent(((OwnerStatusLowRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.OwnerStatusLowRowDeleted != null)) {
                    this.OwnerStatusLowRowDeleted(this, new OwnerStatusLowRowChangeEvent(((OwnerStatusLowRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.OwnerStatusLowRowDeleting != null)) {
                    this.OwnerStatusLowRowDeleting(this, new OwnerStatusLowRowChangeEvent(((OwnerStatusLowRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveOwnerStatusLowRow(OwnerStatusLowRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F15010ExciseAffidavitData ds = new F15010ExciseAffidavitData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "OwnerStatusLowDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class OwnerStatusHighDataTable : global::System.Data.TypedTableBase<OwnerStatusHighRow> {
            
            private global::System.Data.DataColumn columnHigh;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OwnerStatusHighDataTable() {
                this.TableName = "OwnerStatusHigh";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal OwnerStatusHighDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected OwnerStatusHighDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HighColumn {
                get {
                    return this.columnHigh;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OwnerStatusHighRow this[int index] {
                get {
                    return ((OwnerStatusHighRow)(this.Rows[index]));
                }
            }
            
            public event OwnerStatusHighRowChangeEventHandler OwnerStatusHighRowChanging;
            
            public event OwnerStatusHighRowChangeEventHandler OwnerStatusHighRowChanged;
            
            public event OwnerStatusHighRowChangeEventHandler OwnerStatusHighRowDeleting;
            
            public event OwnerStatusHighRowChangeEventHandler OwnerStatusHighRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddOwnerStatusHighRow(OwnerStatusHighRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OwnerStatusHighRow AddOwnerStatusHighRow(int High) {
                OwnerStatusHighRow rowOwnerStatusHighRow = ((OwnerStatusHighRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        High};
                rowOwnerStatusHighRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowOwnerStatusHighRow);
                return rowOwnerStatusHighRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                OwnerStatusHighDataTable cln = ((OwnerStatusHighDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new OwnerStatusHighDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnHigh = base.Columns["High"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnHigh = new global::System.Data.DataColumn("High", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHigh);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OwnerStatusHighRow NewOwnerStatusHighRow() {
                return ((OwnerStatusHighRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new OwnerStatusHighRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(OwnerStatusHighRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.OwnerStatusHighRowChanged != null)) {
                    this.OwnerStatusHighRowChanged(this, new OwnerStatusHighRowChangeEvent(((OwnerStatusHighRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.OwnerStatusHighRowChanging != null)) {
                    this.OwnerStatusHighRowChanging(this, new OwnerStatusHighRowChangeEvent(((OwnerStatusHighRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.OwnerStatusHighRowDeleted != null)) {
                    this.OwnerStatusHighRowDeleted(this, new OwnerStatusHighRowChangeEvent(((OwnerStatusHighRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.OwnerStatusHighRowDeleting != null)) {
                    this.OwnerStatusHighRowDeleting(this, new OwnerStatusHighRowChangeEvent(((OwnerStatusHighRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveOwnerStatusHighRow(OwnerStatusHighRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F15010ExciseAffidavitData ds = new F15010ExciseAffidavitData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "OwnerStatusHighDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class GeneralRow : global::System.Data.DataRow {
            
            private GeneralDataTable tableGeneral;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GeneralRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableGeneral = ((GeneralDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int StatementID {
                get {
                    try {
                        return ((int)(this[this.tableGeneral.StatementIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StatementID\' in table \'General\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGeneral.StatementIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string StatementNumber {
                get {
                    try {
                        return ((string)(this[this.tableGeneral.StatementNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StatementNumber\' in table \'General\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGeneral.StatementNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PaymentDate {
                get {
                    try {
                        return ((string)(this[this.tableGeneral.PaymentDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PaymentDate\' in table \'General\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGeneral.PaymentDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FormDate {
                get {
                    try {
                        return ((string)(this[this.tableGeneral.FormDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FormDate\' in table \'General\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGeneral.FormDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string District {
                get {
                    try {
                        return ((string)(this[this.tableGeneral.DistrictColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'District\' in table \'General\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGeneral.DistrictColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SubmittedBy {
                get {
                    try {
                        return ((int)(this[this.tableGeneral.SubmittedByColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SubmittedBy\' in table \'General\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGeneral.SubmittedByColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ExciseRateID {
                get {
                    try {
                        return ((int)(this[this.tableGeneral.ExciseRateIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ExciseRateID\' in table \'General\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGeneral.ExciseRateIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SubmittedDate {
                get {
                    try {
                        return ((string)(this[this.tableGeneral.SubmittedDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SubmittedDate\' in table \'General\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGeneral.SubmittedDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long SourceID {
                get {
                    try {
                        return ((long)(this[this.tableGeneral.SourceIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SourceID\' in table \'General\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGeneral.SourceIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Source {
                get {
                    try {
                        return ((string)(this[this.tableGeneral.SourceColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Source\' in table \'General\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGeneral.SourceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsExempt {
                get {
                    try {
                        return ((bool)(this[this.tableGeneral.IsExemptColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsExempt\' in table \'General\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGeneral.IsExemptColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMobileHome {
                get {
                    try {
                        return ((bool)(this[this.tableGeneral.IsMobileHomeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsMobileHome\' in table \'General\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGeneral.IsMobileHomeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ReceiptID {
                get {
                    try {
                        return ((int)(this[this.tableGeneral.ReceiptIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ReceiptID\' in table \'General\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGeneral.ReceiptIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ReceiptNumber {
                get {
                    try {
                        return ((string)(this[this.tableGeneral.ReceiptNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ReceiptNumber\' in table \'General\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGeneral.ReceiptNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RollYear {
                get {
                    try {
                        return ((int)(this[this.tableGeneral.RollYearColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RollYear\' in table \'General\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGeneral.RollYearColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DORNote {
                get {
                    try {
                        return ((string)(this[this.tableGeneral.DORNoteColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DORNote\' in table \'General\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGeneral.DORNoteColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DocumentType {
                get {
                    try {
                        return ((string)(this[this.tableGeneral.DocumentTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DocumentType\' in table \'General\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGeneral.DocumentTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CreatedBy {
                get {
                    try {
                        return ((string)(this[this.tableGeneral.CreatedByColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CreatedBy\' in table \'General\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGeneral.CreatedByColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DocumentDate {
                get {
                    try {
                        return ((string)(this[this.tableGeneral.DocumentDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DocumentDate\' in table \'General\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGeneral.DocumentDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int UserID {
                get {
                    try {
                        return ((int)(this[this.tableGeneral.UserIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UserID\' in table \'General\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGeneral.UserIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int IsEditableDate {
                get {
                    try {
                        return ((int)(this[this.tableGeneral.IsEditableDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsEditableDate\' in table \'General\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGeneral.IsEditableDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte IsVoid {
                get {
                    try {
                        return ((byte)(this[this.tableGeneral.IsVoidColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsVoid\' in table \'General\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGeneral.IsVoidColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte IsExciseRateDisable {
                get {
                    try {
                        return ((byte)(this[this.tableGeneral.IsExciseRateDisableColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsExciseRateDisable\' in table \'General\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGeneral.IsExciseRateDisableColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int AmendBy {
                get {
                    try {
                        return ((int)(this[this.tableGeneral.AmendByColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AmendBy\' in table \'General\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGeneral.AmendByColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AmendDate {
                get {
                    try {
                        return ((string)(this[this.tableGeneral.AmendDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AmendDate\' in table \'General\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGeneral.AmendDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStatementIDNull() {
                return this.IsNull(this.tableGeneral.StatementIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStatementIDNull() {
                this[this.tableGeneral.StatementIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStatementNumberNull() {
                return this.IsNull(this.tableGeneral.StatementNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStatementNumberNull() {
                this[this.tableGeneral.StatementNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPaymentDateNull() {
                return this.IsNull(this.tableGeneral.PaymentDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPaymentDateNull() {
                this[this.tableGeneral.PaymentDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFormDateNull() {
                return this.IsNull(this.tableGeneral.FormDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFormDateNull() {
                this[this.tableGeneral.FormDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDistrictNull() {
                return this.IsNull(this.tableGeneral.DistrictColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDistrictNull() {
                this[this.tableGeneral.DistrictColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSubmittedByNull() {
                return this.IsNull(this.tableGeneral.SubmittedByColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSubmittedByNull() {
                this[this.tableGeneral.SubmittedByColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsExciseRateIDNull() {
                return this.IsNull(this.tableGeneral.ExciseRateIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetExciseRateIDNull() {
                this[this.tableGeneral.ExciseRateIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSubmittedDateNull() {
                return this.IsNull(this.tableGeneral.SubmittedDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSubmittedDateNull() {
                this[this.tableGeneral.SubmittedDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSourceIDNull() {
                return this.IsNull(this.tableGeneral.SourceIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSourceIDNull() {
                this[this.tableGeneral.SourceIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSourceNull() {
                return this.IsNull(this.tableGeneral.SourceColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSourceNull() {
                this[this.tableGeneral.SourceColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsExemptNull() {
                return this.IsNull(this.tableGeneral.IsExemptColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsExemptNull() {
                this[this.tableGeneral.IsExemptColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsMobileHomeNull() {
                return this.IsNull(this.tableGeneral.IsMobileHomeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsMobileHomeNull() {
                this[this.tableGeneral.IsMobileHomeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsReceiptIDNull() {
                return this.IsNull(this.tableGeneral.ReceiptIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetReceiptIDNull() {
                this[this.tableGeneral.ReceiptIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsReceiptNumberNull() {
                return this.IsNull(this.tableGeneral.ReceiptNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetReceiptNumberNull() {
                this[this.tableGeneral.ReceiptNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRollYearNull() {
                return this.IsNull(this.tableGeneral.RollYearColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRollYearNull() {
                this[this.tableGeneral.RollYearColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDORNoteNull() {
                return this.IsNull(this.tableGeneral.DORNoteColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDORNoteNull() {
                this[this.tableGeneral.DORNoteColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDocumentTypeNull() {
                return this.IsNull(this.tableGeneral.DocumentTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDocumentTypeNull() {
                this[this.tableGeneral.DocumentTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCreatedByNull() {
                return this.IsNull(this.tableGeneral.CreatedByColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCreatedByNull() {
                this[this.tableGeneral.CreatedByColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDocumentDateNull() {
                return this.IsNull(this.tableGeneral.DocumentDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDocumentDateNull() {
                this[this.tableGeneral.DocumentDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUserIDNull() {
                return this.IsNull(this.tableGeneral.UserIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUserIDNull() {
                this[this.tableGeneral.UserIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsEditableDateNull() {
                return this.IsNull(this.tableGeneral.IsEditableDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsEditableDateNull() {
                this[this.tableGeneral.IsEditableDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsVoidNull() {
                return this.IsNull(this.tableGeneral.IsVoidColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsVoidNull() {
                this[this.tableGeneral.IsVoidColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsExciseRateDisableNull() {
                return this.IsNull(this.tableGeneral.IsExciseRateDisableColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsExciseRateDisableNull() {
                this[this.tableGeneral.IsExciseRateDisableColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAmendByNull() {
                return this.IsNull(this.tableGeneral.AmendByColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAmendByNull() {
                this[this.tableGeneral.AmendByColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAmendDateNull() {
                return this.IsNull(this.tableGeneral.AmendDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAmendDateNull() {
                this[this.tableGeneral.AmendDateColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class PartiesHeaderRow : global::System.Data.DataRow {
            
            private PartiesHeaderDataTable tablePartiesHeader;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PartiesHeaderRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablePartiesHeader = ((PartiesHeaderDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    try {
                        return ((string)(this[this.tablePartiesHeader.NameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Name\' in table \'PartiesHeader\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePartiesHeader.NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Address {
                get {
                    try {
                        return ((string)(this[this.tablePartiesHeader.AddressColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Address\' in table \'PartiesHeader\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePartiesHeader.AddressColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string City {
                get {
                    try {
                        return ((string)(this[this.tablePartiesHeader.CityColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'City\' in table \'PartiesHeader\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePartiesHeader.CityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IndividualType {
                get {
                    try {
                        return ((string)(this[this.tablePartiesHeader.IndividualTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IndividualType\' in table \'PartiesHeader\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePartiesHeader.IndividualTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Phone {
                get {
                    try {
                        return ((string)(this[this.tablePartiesHeader.PhoneColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Phone\' in table \'PartiesHeader\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePartiesHeader.PhoneColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float PercentOwner {
                get {
                    try {
                        return ((float)(this[this.tablePartiesHeader.PercentOwnerColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PercentOwner\' in table \'PartiesHeader\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePartiesHeader.PercentOwnerColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Address1 {
                get {
                    try {
                        return ((string)(this[this.tablePartiesHeader.Address1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Address1\' in table \'PartiesHeader\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePartiesHeader.Address1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Address2 {
                get {
                    try {
                        return ((string)(this[this.tablePartiesHeader.Address2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Address2\' in table \'PartiesHeader\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePartiesHeader.Address2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string State {
                get {
                    try {
                        return ((string)(this[this.tablePartiesHeader.StateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'State\' in table \'PartiesHeader\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePartiesHeader.StateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Zip {
                get {
                    try {
                        return ((string)(this[this.tablePartiesHeader.ZipColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Zip\' in table \'PartiesHeader\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePartiesHeader.ZipColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Country {
                get {
                    try {
                        return ((string)(this[this.tablePartiesHeader.CountryColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Country\' in table \'PartiesHeader\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePartiesHeader.CountryColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int IndividualID {
                get {
                    try {
                        return ((int)(this[this.tablePartiesHeader.IndividualIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IndividualID\' in table \'PartiesHeader\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePartiesHeader.IndividualIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int StatementID {
                get {
                    try {
                        return ((int)(this[this.tablePartiesHeader.StatementIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StatementID\' in table \'PartiesHeader\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePartiesHeader.StatementIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int OwnerID {
                get {
                    try {
                        return ((int)(this[this.tablePartiesHeader.OwnerIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OwnerID\' in table \'PartiesHeader\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePartiesHeader.OwnerIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int IndividualAutoID {
                get {
                    try {
                        return ((int)(this[this.tablePartiesHeader.IndividualAutoIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IndividualAutoID\' in table \'PartiesHeader\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePartiesHeader.IndividualAutoIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte IndividualTypeID {
                get {
                    try {
                        return ((byte)(this[this.tablePartiesHeader.IndividualTypeIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IndividualTypeID\' in table \'PartiesHeader\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePartiesHeader.IndividualTypeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Status {
                get {
                    try {
                        return ((string)(this[this.tablePartiesHeader.StatusColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Status\' in table \'PartiesHeader\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePartiesHeader.StatusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNameNull() {
                return this.IsNull(this.tablePartiesHeader.NameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNameNull() {
                this[this.tablePartiesHeader.NameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAddressNull() {
                return this.IsNull(this.tablePartiesHeader.AddressColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAddressNull() {
                this[this.tablePartiesHeader.AddressColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCityNull() {
                return this.IsNull(this.tablePartiesHeader.CityColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCityNull() {
                this[this.tablePartiesHeader.CityColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIndividualTypeNull() {
                return this.IsNull(this.tablePartiesHeader.IndividualTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIndividualTypeNull() {
                this[this.tablePartiesHeader.IndividualTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPhoneNull() {
                return this.IsNull(this.tablePartiesHeader.PhoneColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPhoneNull() {
                this[this.tablePartiesHeader.PhoneColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPercentOwnerNull() {
                return this.IsNull(this.tablePartiesHeader.PercentOwnerColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPercentOwnerNull() {
                this[this.tablePartiesHeader.PercentOwnerColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAddress1Null() {
                return this.IsNull(this.tablePartiesHeader.Address1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAddress1Null() {
                this[this.tablePartiesHeader.Address1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAddress2Null() {
                return this.IsNull(this.tablePartiesHeader.Address2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAddress2Null() {
                this[this.tablePartiesHeader.Address2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStateNull() {
                return this.IsNull(this.tablePartiesHeader.StateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStateNull() {
                this[this.tablePartiesHeader.StateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsZipNull() {
                return this.IsNull(this.tablePartiesHeader.ZipColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetZipNull() {
                this[this.tablePartiesHeader.ZipColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCountryNull() {
                return this.IsNull(this.tablePartiesHeader.CountryColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCountryNull() {
                this[this.tablePartiesHeader.CountryColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIndividualIDNull() {
                return this.IsNull(this.tablePartiesHeader.IndividualIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIndividualIDNull() {
                this[this.tablePartiesHeader.IndividualIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStatementIDNull() {
                return this.IsNull(this.tablePartiesHeader.StatementIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStatementIDNull() {
                this[this.tablePartiesHeader.StatementIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOwnerIDNull() {
                return this.IsNull(this.tablePartiesHeader.OwnerIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOwnerIDNull() {
                this[this.tablePartiesHeader.OwnerIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIndividualAutoIDNull() {
                return this.IsNull(this.tablePartiesHeader.IndividualAutoIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIndividualAutoIDNull() {
                this[this.tablePartiesHeader.IndividualAutoIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIndividualTypeIDNull() {
                return this.IsNull(this.tablePartiesHeader.IndividualTypeIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIndividualTypeIDNull() {
                this[this.tablePartiesHeader.IndividualTypeIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStatusNull() {
                return this.IsNull(this.tablePartiesHeader.StatusColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStatusNull() {
                this[this.tablePartiesHeader.StatusColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ParcelHeaderRow : global::System.Data.DataRow {
            
            private ParcelHeaderDataTable tableParcelHeader;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ParcelHeaderRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableParcelHeader = ((ParcelHeaderDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Number {
                get {
                    try {
                        return ((string)(this[this.tableParcelHeader.NumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Number\' in table \'ParcelHeader\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableParcelHeader.NumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPersonalProperty {
                get {
                    try {
                        return ((bool)(this[this.tableParcelHeader.IsPersonalPropertyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsPersonalProperty\' in table \'ParcelHeader\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableParcelHeader.IsPersonalPropertyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal AssessedValue {
                get {
                    try {
                        return ((decimal)(this[this.tableParcelHeader.AssessedValueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AssessedValue\' in table \'ParcelHeader\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableParcelHeader.AssessedValueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Legal {
                get {
                    try {
                        return ((string)(this[this.tableParcelHeader.LegalColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Legal\' in table \'ParcelHeader\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableParcelHeader.LegalColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SoldParcelID {
                get {
                    try {
                        return ((int)(this[this.tableParcelHeader.SoldParcelIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SoldParcelID\' in table \'ParcelHeader\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableParcelHeader.SoldParcelIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int StatementID {
                get {
                    try {
                        return ((int)(this[this.tableParcelHeader.StatementIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StatementID\' in table \'ParcelHeader\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableParcelHeader.StatementIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IsPersonalPropertyValue {
                get {
                    try {
                        return ((string)(this[this.tableParcelHeader.IsPersonalPropertyValueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsPersonalPropertyValue\' in table \'ParcelHeader\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableParcelHeader.IsPersonalPropertyValueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ParcelID {
                get {
                    try {
                        return ((string)(this[this.tableParcelHeader.ParcelIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ParcelID\' in table \'ParcelHeader\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableParcelHeader.ParcelIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNumberNull() {
                return this.IsNull(this.tableParcelHeader.NumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNumberNull() {
                this[this.tableParcelHeader.NumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsPersonalPropertyNull() {
                return this.IsNull(this.tableParcelHeader.IsPersonalPropertyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsPersonalPropertyNull() {
                this[this.tableParcelHeader.IsPersonalPropertyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAssessedValueNull() {
                return this.IsNull(this.tableParcelHeader.AssessedValueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAssessedValueNull() {
                this[this.tableParcelHeader.AssessedValueColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLegalNull() {
                return this.IsNull(this.tableParcelHeader.LegalColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLegalNull() {
                this[this.tableParcelHeader.LegalColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSoldParcelIDNull() {
                return this.IsNull(this.tableParcelHeader.SoldParcelIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSoldParcelIDNull() {
                this[this.tableParcelHeader.SoldParcelIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStatementIDNull() {
                return this.IsNull(this.tableParcelHeader.StatementIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStatementIDNull() {
                this[this.tableParcelHeader.StatementIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsPersonalPropertyValueNull() {
                return this.IsNull(this.tableParcelHeader.IsPersonalPropertyValueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsPersonalPropertyValueNull() {
                this[this.tableParcelHeader.IsPersonalPropertyValueColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsParcelIDNull() {
                return this.IsNull(this.tableParcelHeader.ParcelIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetParcelIDNull() {
                this[this.tableParcelHeader.ParcelIDColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class AffidavitRow : global::System.Data.DataRow {
            
            private AffidavitDataTable tableAffidavit;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal AffidavitRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableAffidavit = ((AffidavitDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPartialSale {
                get {
                    try {
                        return ((bool)(this[this.tableAffidavit.IsPartialSaleColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsPartialSale\' in table \'Affidavit\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAffidavit.IsPartialSaleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSegregated {
                get {
                    try {
                        return ((bool)(this[this.tableAffidavit.IsSegregatedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsSegregated\' in table \'Affidavit\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAffidavit.IsSegregatedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string StreetAddress {
                get {
                    try {
                        return ((string)(this[this.tableAffidavit.StreetAddressColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StreetAddress\' in table \'Affidavit\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAffidavit.StreetAddressColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LocationSale {
                get {
                    try {
                        return ((int)(this[this.tableAffidavit.LocationSaleColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LocationSale\' in table \'Affidavit\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAffidavit.LocationSaleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LocationName {
                get {
                    try {
                        return ((string)(this[this.tableAffidavit.LocationNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LocationName\' in table \'Affidavit\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAffidavit.LocationNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UseCode {
                get {
                    try {
                        return ((string)(this[this.tableAffidavit.UseCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UseCode\' in table \'Affidavit\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAffidavit.UseCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ExemptRegNum {
                get {
                    try {
                        return ((string)(this[this.tableAffidavit.ExemptRegNumColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ExemptRegNum\' in table \'Affidavit\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAffidavit.ExemptRegNumColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsForestLand {
                get {
                    try {
                        return ((bool)(this[this.tableAffidavit.IsForestLandColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsForestLand\' in table \'Affidavit\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAffidavit.IsForestLandColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOpenSpace {
                get {
                    try {
                        return ((bool)(this[this.tableAffidavit.IsOpenSpaceColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsOpenSpace\' in table \'Affidavit\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAffidavit.IsOpenSpaceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHistoric {
                get {
                    try {
                        return ((bool)(this[this.tableAffidavit.IsHistoricColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsHistoric\' in table \'Affidavit\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAffidavit.IsHistoricColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool HasContinuance {
                get {
                    try {
                        return ((bool)(this[this.tableAffidavit.HasContinuanceColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'HasContinuance\' in table \'Affidavit\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAffidavit.HasContinuanceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PersonalPropDesc {
                get {
                    try {
                        return ((string)(this[this.tableAffidavit.PersonalPropDescColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PersonalPropDesc\' in table \'Affidavit\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAffidavit.PersonalPropDescColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ExemptionCode {
                get {
                    try {
                        return ((string)(this[this.tableAffidavit.ExemptionCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ExemptionCode\' in table \'Affidavit\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAffidavit.ExemptionCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ExemptionDesc {
                get {
                    try {
                        return ((string)(this[this.tableAffidavit.ExemptionDescColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ExemptionDesc\' in table \'Affidavit\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAffidavit.ExemptionDescColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LocationCode {
                get {
                    try {
                        return ((string)(this[this.tableAffidavit.LocationCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LocationCode\' in table \'Affidavit\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAffidavit.LocationCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TotalDebt {
                get {
                    try {
                        return ((decimal)(this[this.tableAffidavit.TotalDebtColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalDebt\' in table \'Affidavit\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAffidavit.TotalDebtColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsPartialSaleNull() {
                return this.IsNull(this.tableAffidavit.IsPartialSaleColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsPartialSaleNull() {
                this[this.tableAffidavit.IsPartialSaleColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsSegregatedNull() {
                return this.IsNull(this.tableAffidavit.IsSegregatedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsSegregatedNull() {
                this[this.tableAffidavit.IsSegregatedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStreetAddressNull() {
                return this.IsNull(this.tableAffidavit.StreetAddressColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStreetAddressNull() {
                this[this.tableAffidavit.StreetAddressColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLocationSaleNull() {
                return this.IsNull(this.tableAffidavit.LocationSaleColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLocationSaleNull() {
                this[this.tableAffidavit.LocationSaleColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLocationNameNull() {
                return this.IsNull(this.tableAffidavit.LocationNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLocationNameNull() {
                this[this.tableAffidavit.LocationNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUseCodeNull() {
                return this.IsNull(this.tableAffidavit.UseCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUseCodeNull() {
                this[this.tableAffidavit.UseCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsExemptRegNumNull() {
                return this.IsNull(this.tableAffidavit.ExemptRegNumColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetExemptRegNumNull() {
                this[this.tableAffidavit.ExemptRegNumColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsForestLandNull() {
                return this.IsNull(this.tableAffidavit.IsForestLandColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsForestLandNull() {
                this[this.tableAffidavit.IsForestLandColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsOpenSpaceNull() {
                return this.IsNull(this.tableAffidavit.IsOpenSpaceColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsOpenSpaceNull() {
                this[this.tableAffidavit.IsOpenSpaceColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsHistoricNull() {
                return this.IsNull(this.tableAffidavit.IsHistoricColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsHistoricNull() {
                this[this.tableAffidavit.IsHistoricColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHasContinuanceNull() {
                return this.IsNull(this.tableAffidavit.HasContinuanceColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHasContinuanceNull() {
                this[this.tableAffidavit.HasContinuanceColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPersonalPropDescNull() {
                return this.IsNull(this.tableAffidavit.PersonalPropDescColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPersonalPropDescNull() {
                this[this.tableAffidavit.PersonalPropDescColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsExemptionCodeNull() {
                return this.IsNull(this.tableAffidavit.ExemptionCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetExemptionCodeNull() {
                this[this.tableAffidavit.ExemptionCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsExemptionDescNull() {
                return this.IsNull(this.tableAffidavit.ExemptionDescColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetExemptionDescNull() {
                this[this.tableAffidavit.ExemptionDescColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLocationCodeNull() {
                return this.IsNull(this.tableAffidavit.LocationCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLocationCodeNull() {
                this[this.tableAffidavit.LocationCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalDebtNull() {
                return this.IsNull(this.tableAffidavit.TotalDebtColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalDebtNull() {
                this[this.tableAffidavit.TotalDebtColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class AmountDueRow : global::System.Data.DataRow {
            
            private AmountDueDataTable tableAmountDue;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal AmountDueRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableAmountDue = ((AmountDueDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal GrossSalePrice {
                get {
                    try {
                        return ((decimal)(this[this.tableAmountDue.GrossSalePriceColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GrossSalePrice\' in table \'AmountDue\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAmountDue.GrossSalePriceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal PersonalPropAmt {
                get {
                    try {
                        return ((decimal)(this[this.tableAmountDue.PersonalPropAmtColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PersonalPropAmt\' in table \'AmountDue\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAmountDue.PersonalPropAmtColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal RealPropExemptAmt {
                get {
                    try {
                        return ((decimal)(this[this.tableAmountDue.RealPropExemptAmtColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RealPropExemptAmt\' in table \'AmountDue\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAmountDue.RealPropExemptAmtColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TaxableSalePrice {
                get {
                    try {
                        return ((decimal)(this[this.tableAmountDue.TaxableSalePriceColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TaxableSalePrice\' in table \'AmountDue\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAmountDue.TaxableSalePriceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal ExciseTaxState {
                get {
                    try {
                        return ((decimal)(this[this.tableAmountDue.ExciseTaxStateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ExciseTaxState\' in table \'AmountDue\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAmountDue.ExciseTaxStateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal ExciseTaxLocal {
                get {
                    try {
                        return ((decimal)(this[this.tableAmountDue.ExciseTaxLocalColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ExciseTaxLocal\' in table \'AmountDue\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAmountDue.ExciseTaxLocalColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal DelinquentInterestState {
                get {
                    try {
                        return ((decimal)(this[this.tableAmountDue.DelinquentInterestStateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DelinquentInterestState\' in table \'AmountDue\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAmountDue.DelinquentInterestStateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal DelinquentInterestLocal {
                get {
                    try {
                        return ((decimal)(this[this.tableAmountDue.DelinquentInterestLocalColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DelinquentInterestLocal\' in table \'AmountDue\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAmountDue.DelinquentInterestLocalColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal DelinquentPenalty {
                get {
                    try {
                        return ((decimal)(this[this.tableAmountDue.DelinquentPenaltyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DelinquentPenalty\' in table \'AmountDue\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAmountDue.DelinquentPenaltyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TechnologyFee {
                get {
                    try {
                        return ((decimal)(this[this.tableAmountDue.TechnologyFeeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TechnologyFee\' in table \'AmountDue\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAmountDue.TechnologyFeeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TransactionFee {
                get {
                    try {
                        return ((decimal)(this[this.tableAmountDue.TransactionFeeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TransactionFee\' in table \'AmountDue\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAmountDue.TransactionFeeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal SubTotal {
                get {
                    try {
                        return ((decimal)(this[this.tableAmountDue.SubTotalColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SubTotal\' in table \'AmountDue\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAmountDue.SubTotalColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Fees {
                get {
                    try {
                        return ((decimal)(this[this.tableAmountDue.FeesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Fees\' in table \'AmountDue\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAmountDue.FeesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TotalAmountDue {
                get {
                    try {
                        return ((decimal)(this[this.tableAmountDue.TotalAmountDueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalAmountDue\' in table \'AmountDue\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAmountDue.TotalAmountDueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGrossSalePriceNull() {
                return this.IsNull(this.tableAmountDue.GrossSalePriceColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGrossSalePriceNull() {
                this[this.tableAmountDue.GrossSalePriceColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPersonalPropAmtNull() {
                return this.IsNull(this.tableAmountDue.PersonalPropAmtColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPersonalPropAmtNull() {
                this[this.tableAmountDue.PersonalPropAmtColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRealPropExemptAmtNull() {
                return this.IsNull(this.tableAmountDue.RealPropExemptAmtColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRealPropExemptAmtNull() {
                this[this.tableAmountDue.RealPropExemptAmtColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTaxableSalePriceNull() {
                return this.IsNull(this.tableAmountDue.TaxableSalePriceColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTaxableSalePriceNull() {
                this[this.tableAmountDue.TaxableSalePriceColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsExciseTaxStateNull() {
                return this.IsNull(this.tableAmountDue.ExciseTaxStateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetExciseTaxStateNull() {
                this[this.tableAmountDue.ExciseTaxStateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsExciseTaxLocalNull() {
                return this.IsNull(this.tableAmountDue.ExciseTaxLocalColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetExciseTaxLocalNull() {
                this[this.tableAmountDue.ExciseTaxLocalColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDelinquentInterestStateNull() {
                return this.IsNull(this.tableAmountDue.DelinquentInterestStateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDelinquentInterestStateNull() {
                this[this.tableAmountDue.DelinquentInterestStateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDelinquentInterestLocalNull() {
                return this.IsNull(this.tableAmountDue.DelinquentInterestLocalColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDelinquentInterestLocalNull() {
                this[this.tableAmountDue.DelinquentInterestLocalColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDelinquentPenaltyNull() {
                return this.IsNull(this.tableAmountDue.DelinquentPenaltyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDelinquentPenaltyNull() {
                this[this.tableAmountDue.DelinquentPenaltyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTechnologyFeeNull() {
                return this.IsNull(this.tableAmountDue.TechnologyFeeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTechnologyFeeNull() {
                this[this.tableAmountDue.TechnologyFeeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTransactionFeeNull() {
                return this.IsNull(this.tableAmountDue.TransactionFeeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTransactionFeeNull() {
                this[this.tableAmountDue.TransactionFeeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSubTotalNull() {
                return this.IsNull(this.tableAmountDue.SubTotalColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSubTotalNull() {
                this[this.tableAmountDue.SubTotalColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFeesNull() {
                return this.IsNull(this.tableAmountDue.FeesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFeesNull() {
                this[this.tableAmountDue.FeesColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalAmountDueNull() {
                return this.IsNull(this.tableAmountDue.TotalAmountDueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalAmountDueNull() {
                this[this.tableAmountDue.TotalAmountDueColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SupplimentRow : global::System.Data.DataRow {
            
            private SupplimentDataTable tableSuppliment;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SupplimentRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSuppliment = ((SupplimentDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AgentName {
                get {
                    try {
                        return ((string)(this[this.tableSuppliment.AgentNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AgentName\' in table \'Suppliment\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSuppliment.AgentNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string InstrumentType {
                get {
                    try {
                        return ((string)(this[this.tableSuppliment.InstrumentTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InstrumentType\' in table \'Suppliment\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSuppliment.InstrumentTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string InstrumentDate {
                get {
                    try {
                        return ((string)(this[this.tableSuppliment.InstrumentDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InstrumentDate\' in table \'Suppliment\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSuppliment.InstrumentDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Firmname {
                get {
                    try {
                        return ((string)(this[this.tableSuppliment.FirmnameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Firmname\' in table \'Suppliment\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSuppliment.FirmnameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ReasonHeld {
                get {
                    try {
                        return ((string)(this[this.tableSuppliment.ReasonHeldColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ReasonHeld\' in table \'Suppliment\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSuppliment.ReasonHeldColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool GiftConsideration_A1 {
                get {
                    try {
                        return ((bool)(this[this.tableSuppliment.GiftConsideration_A1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GiftConsideration_A1\' in table \'Suppliment\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSuppliment.GiftConsideration_A1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TotalDebt_A1 {
                get {
                    try {
                        return ((decimal)(this[this.tableSuppliment.TotalDebt_A1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalDebt_A1\' in table \'Suppliment\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSuppliment.TotalDebt_A1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal GranteePaysGrantor_A1 {
                get {
                    try {
                        return ((decimal)(this[this.tableSuppliment.GranteePaysGrantor_A1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GranteePaysGrantor_A1\' in table \'Suppliment\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSuppliment.GranteePaysGrantor_A1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool GiftConsideration_A2 {
                get {
                    try {
                        return ((bool)(this[this.tableSuppliment.GiftConsideration_A2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GiftConsideration_A2\' in table \'Suppliment\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSuppliment.GiftConsideration_A2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TotalDebt_A2 {
                get {
                    try {
                        return ((decimal)(this[this.tableSuppliment.TotalDebt_A2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalDebt_A2\' in table \'Suppliment\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSuppliment.TotalDebt_A2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal GranteePaysGrantor_A2 {
                get {
                    try {
                        return ((decimal)(this[this.tableSuppliment.GranteePaysGrantor_A2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GranteePaysGrantor_A2\' in table \'Suppliment\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSuppliment.GranteePaysGrantor_A2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float DebtRate_A2 {
                get {
                    try {
                        return ((float)(this[this.tableSuppliment.DebtRate_A2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DebtRate_A2\' in table \'Suppliment\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSuppliment.DebtRate_A2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool GiftNoConsideration_B1 {
                get {
                    try {
                        return ((bool)(this[this.tableSuppliment.GiftNoConsideration_B1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GiftNoConsideration_B1\' in table \'Suppliment\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSuppliment.GiftNoConsideration_B1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool GiftNoConsideration_B2 {
                get {
                    try {
                        return ((bool)(this[this.tableSuppliment.GiftNoConsideration_B2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GiftNoConsideration_B2\' in table \'Suppliment\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSuppliment.GiftNoConsideration_B2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TotalDebt_B2 {
                get {
                    try {
                        return ((decimal)(this[this.tableSuppliment.TotalDebt_B2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalDebt_B2\' in table \'Suppliment\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSuppliment.TotalDebt_B2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool GiftNoConsideration_B3 {
                get {
                    try {
                        return ((bool)(this[this.tableSuppliment.GiftNoConsideration_B3Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GiftNoConsideration_B3\' in table \'Suppliment\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSuppliment.GiftNoConsideration_B3Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TotalDebt_B3 {
                get {
                    try {
                        return ((decimal)(this[this.tableSuppliment.TotalDebt_B3Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalDebt_B3\' in table \'Suppliment\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSuppliment.TotalDebt_B3Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool GiftNoConsideration_B4 {
                get {
                    try {
                        return ((bool)(this[this.tableSuppliment.GiftNoConsideration_B4Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GiftNoConsideration_B4\' in table \'Suppliment\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSuppliment.GiftNoConsideration_B4Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRefinance {
                get {
                    try {
                        return ((bool)(this[this.tableSuppliment.IsRefinanceColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsRefinance\' in table \'Suppliment\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSuppliment.IsRefinanceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal GiftedEquity {
                get {
                    try {
                        return ((decimal)(this[this.tableSuppliment.GiftedEquityColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GiftedEquity\' in table \'Suppliment\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSuppliment.GiftedEquityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string GrantorsSignature {
                get {
                    try {
                        return ((string)(this[this.tableSuppliment.GrantorsSignatureColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GrantorsSignature\' in table \'Suppliment\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSuppliment.GrantorsSignatureColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string GranteesSignature {
                get {
                    try {
                        return ((string)(this[this.tableSuppliment.GranteesSignatureColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GranteesSignature\' in table \'Suppliment\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSuppliment.GranteesSignatureColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FacilitatorName {
                get {
                    try {
                        return ((string)(this[this.tableSuppliment.FacilitatorNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FacilitatorName\' in table \'Suppliment\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSuppliment.FacilitatorNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string GranteeName {
                get {
                    try {
                        return ((string)(this[this.tableSuppliment.GranteeNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GranteeName\' in table \'Suppliment\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSuppliment.GranteeNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TreasStatusModifiedDate {
                get {
                    try {
                        return ((string)(this[this.tableSuppliment.TreasStatusModifiedDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TreasStatusModifiedDate\' in table \'Suppliment\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSuppliment.TreasStatusModifiedDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AssessStatusModifiedDate {
                get {
                    try {
                        return ((string)(this[this.tableSuppliment.AssessStatusModifiedDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AssessStatusModifiedDate\' in table \'Suppliment\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSuppliment.AssessStatusModifiedDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TreasStatusModifiedBy_Name {
                get {
                    try {
                        return ((string)(this[this.tableSuppliment.TreasStatusModifiedBy_NameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TreasStatusModifiedBy_Name\' in table \'Suppliment\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableSuppliment.TreasStatusModifiedBy_NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AssessStatusModifiedBy_Name {
                get {
                    try {
                        return ((string)(this[this.tableSuppliment.AssessStatusModifiedBy_NameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AssessStatusModifiedBy_Name\' in table \'Suppliment\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableSuppliment.AssessStatusModifiedBy_NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TreasStatusModifiedBy {
                get {
                    try {
                        return ((int)(this[this.tableSuppliment.TreasStatusModifiedByColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TreasStatusModifiedBy\' in table \'Suppliment\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSuppliment.TreasStatusModifiedByColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int AssessStatusModifiedBy {
                get {
                    try {
                        return ((int)(this[this.tableSuppliment.AssessStatusModifiedByColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AssessStatusModifiedBy\' in table \'Suppliment\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSuppliment.AssessStatusModifiedByColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte TreasurerStatusID {
                get {
                    try {
                        return ((byte)(this[this.tableSuppliment.TreasurerStatusIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TreasurerStatusID\' in table \'Suppliment\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSuppliment.TreasurerStatusIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte AssessorStatusID {
                get {
                    try {
                        return ((byte)(this[this.tableSuppliment.AssessorStatusIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AssessorStatusID\' in table \'Suppliment\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSuppliment.AssessorStatusIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Treasurer {
                get {
                    try {
                        return ((string)(this[this.tableSuppliment.TreasurerColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Treasurer\' in table \'Suppliment\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSuppliment.TreasurerColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Assessor {
                get {
                    try {
                        return ((string)(this[this.tableSuppliment.AssessorColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Assessor\' in table \'Suppliment\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSuppliment.AssessorColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAgentNameNull() {
                return this.IsNull(this.tableSuppliment.AgentNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAgentNameNull() {
                this[this.tableSuppliment.AgentNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInstrumentTypeNull() {
                return this.IsNull(this.tableSuppliment.InstrumentTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInstrumentTypeNull() {
                this[this.tableSuppliment.InstrumentTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInstrumentDateNull() {
                return this.IsNull(this.tableSuppliment.InstrumentDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInstrumentDateNull() {
                this[this.tableSuppliment.InstrumentDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFirmnameNull() {
                return this.IsNull(this.tableSuppliment.FirmnameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFirmnameNull() {
                this[this.tableSuppliment.FirmnameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsReasonHeldNull() {
                return this.IsNull(this.tableSuppliment.ReasonHeldColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetReasonHeldNull() {
                this[this.tableSuppliment.ReasonHeldColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGiftConsideration_A1Null() {
                return this.IsNull(this.tableSuppliment.GiftConsideration_A1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGiftConsideration_A1Null() {
                this[this.tableSuppliment.GiftConsideration_A1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalDebt_A1Null() {
                return this.IsNull(this.tableSuppliment.TotalDebt_A1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalDebt_A1Null() {
                this[this.tableSuppliment.TotalDebt_A1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGranteePaysGrantor_A1Null() {
                return this.IsNull(this.tableSuppliment.GranteePaysGrantor_A1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGranteePaysGrantor_A1Null() {
                this[this.tableSuppliment.GranteePaysGrantor_A1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGiftConsideration_A2Null() {
                return this.IsNull(this.tableSuppliment.GiftConsideration_A2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGiftConsideration_A2Null() {
                this[this.tableSuppliment.GiftConsideration_A2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalDebt_A2Null() {
                return this.IsNull(this.tableSuppliment.TotalDebt_A2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalDebt_A2Null() {
                this[this.tableSuppliment.TotalDebt_A2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGranteePaysGrantor_A2Null() {
                return this.IsNull(this.tableSuppliment.GranteePaysGrantor_A2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGranteePaysGrantor_A2Null() {
                this[this.tableSuppliment.GranteePaysGrantor_A2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDebtRate_A2Null() {
                return this.IsNull(this.tableSuppliment.DebtRate_A2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDebtRate_A2Null() {
                this[this.tableSuppliment.DebtRate_A2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGiftNoConsideration_B1Null() {
                return this.IsNull(this.tableSuppliment.GiftNoConsideration_B1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGiftNoConsideration_B1Null() {
                this[this.tableSuppliment.GiftNoConsideration_B1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGiftNoConsideration_B2Null() {
                return this.IsNull(this.tableSuppliment.GiftNoConsideration_B2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGiftNoConsideration_B2Null() {
                this[this.tableSuppliment.GiftNoConsideration_B2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalDebt_B2Null() {
                return this.IsNull(this.tableSuppliment.TotalDebt_B2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalDebt_B2Null() {
                this[this.tableSuppliment.TotalDebt_B2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGiftNoConsideration_B3Null() {
                return this.IsNull(this.tableSuppliment.GiftNoConsideration_B3Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGiftNoConsideration_B3Null() {
                this[this.tableSuppliment.GiftNoConsideration_B3Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalDebt_B3Null() {
                return this.IsNull(this.tableSuppliment.TotalDebt_B3Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalDebt_B3Null() {
                this[this.tableSuppliment.TotalDebt_B3Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGiftNoConsideration_B4Null() {
                return this.IsNull(this.tableSuppliment.GiftNoConsideration_B4Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGiftNoConsideration_B4Null() {
                this[this.tableSuppliment.GiftNoConsideration_B4Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsRefinanceNull() {
                return this.IsNull(this.tableSuppliment.IsRefinanceColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsRefinanceNull() {
                this[this.tableSuppliment.IsRefinanceColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGiftedEquityNull() {
                return this.IsNull(this.tableSuppliment.GiftedEquityColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGiftedEquityNull() {
                this[this.tableSuppliment.GiftedEquityColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGrantorsSignatureNull() {
                return this.IsNull(this.tableSuppliment.GrantorsSignatureColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGrantorsSignatureNull() {
                this[this.tableSuppliment.GrantorsSignatureColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGranteesSignatureNull() {
                return this.IsNull(this.tableSuppliment.GranteesSignatureColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGranteesSignatureNull() {
                this[this.tableSuppliment.GranteesSignatureColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFacilitatorNameNull() {
                return this.IsNull(this.tableSuppliment.FacilitatorNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFacilitatorNameNull() {
                this[this.tableSuppliment.FacilitatorNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGranteeNameNull() {
                return this.IsNull(this.tableSuppliment.GranteeNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGranteeNameNull() {
                this[this.tableSuppliment.GranteeNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTreasStatusModifiedDateNull() {
                return this.IsNull(this.tableSuppliment.TreasStatusModifiedDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTreasStatusModifiedDateNull() {
                this[this.tableSuppliment.TreasStatusModifiedDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAssessStatusModifiedDateNull() {
                return this.IsNull(this.tableSuppliment.AssessStatusModifiedDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAssessStatusModifiedDateNull() {
                this[this.tableSuppliment.AssessStatusModifiedDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTreasStatusModifiedBy_NameNull() {
                return this.IsNull(this.tableSuppliment.TreasStatusModifiedBy_NameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTreasStatusModifiedBy_NameNull() {
                this[this.tableSuppliment.TreasStatusModifiedBy_NameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAssessStatusModifiedBy_NameNull() {
                return this.IsNull(this.tableSuppliment.AssessStatusModifiedBy_NameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAssessStatusModifiedBy_NameNull() {
                this[this.tableSuppliment.AssessStatusModifiedBy_NameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTreasStatusModifiedByNull() {
                return this.IsNull(this.tableSuppliment.TreasStatusModifiedByColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTreasStatusModifiedByNull() {
                this[this.tableSuppliment.TreasStatusModifiedByColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAssessStatusModifiedByNull() {
                return this.IsNull(this.tableSuppliment.AssessStatusModifiedByColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAssessStatusModifiedByNull() {
                this[this.tableSuppliment.AssessStatusModifiedByColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTreasurerStatusIDNull() {
                return this.IsNull(this.tableSuppliment.TreasurerStatusIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTreasurerStatusIDNull() {
                this[this.tableSuppliment.TreasurerStatusIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAssessorStatusIDNull() {
                return this.IsNull(this.tableSuppliment.AssessorStatusIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAssessorStatusIDNull() {
                this[this.tableSuppliment.AssessorStatusIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTreasurerNull() {
                return this.IsNull(this.tableSuppliment.TreasurerColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTreasurerNull() {
                this[this.tableSuppliment.TreasurerColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAssessorNull() {
                return this.IsNull(this.tableSuppliment.AssessorColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAssessorNull() {
                this[this.tableSuppliment.AssessorColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ListAffidavitStatementIdRow : global::System.Data.DataRow {
            
            private ListAffidavitStatementIdDataTable tableListAffidavitStatementId;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListAffidavitStatementIdRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableListAffidavitStatementId = ((ListAffidavitStatementIdDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int KeyID {
                get {
                    try {
                        return ((int)(this[this.tableListAffidavitStatementId.KeyIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'KeyID\' in table \'ListAffidavitStatementId\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListAffidavitStatementId.KeyIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsKeyIDNull() {
                return this.IsNull(this.tableListAffidavitStatementId.KeyIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetKeyIDNull() {
                this[this.tableListAffidavitStatementId.KeyIDColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ListPartiesOwnerDetailRow : global::System.Data.DataRow {
            
            private ListPartiesOwnerDetailDataTable tableListPartiesOwnerDetail;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListPartiesOwnerDetailRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableListPartiesOwnerDetail = ((ListPartiesOwnerDetailDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string OwnerID {
                get {
                    try {
                        return ((string)(this[this.tableListPartiesOwnerDetail.OwnerIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OwnerID\' in table \'ListPartiesOwnerDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListPartiesOwnerDetail.OwnerIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string POwnerID {
                get {
                    try {
                        return ((string)(this[this.tableListPartiesOwnerDetail.POwnerIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'POwnerID\' in table \'ListPartiesOwnerDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListPartiesOwnerDetail.POwnerIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    try {
                        return ((string)(this[this.tableListPartiesOwnerDetail.NameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Name\' in table \'ListPartiesOwnerDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListPartiesOwnerDetail.NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Address1 {
                get {
                    try {
                        return ((string)(this[this.tableListPartiesOwnerDetail.Address1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Address1\' in table \'ListPartiesOwnerDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListPartiesOwnerDetail.Address1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Address2 {
                get {
                    try {
                        return ((string)(this[this.tableListPartiesOwnerDetail.Address2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Address2\' in table \'ListPartiesOwnerDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListPartiesOwnerDetail.Address2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Address {
                get {
                    try {
                        return ((string)(this[this.tableListPartiesOwnerDetail.AddressColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Address\' in table \'ListPartiesOwnerDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListPartiesOwnerDetail.AddressColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string City {
                get {
                    try {
                        return ((string)(this[this.tableListPartiesOwnerDetail.CityColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'City\' in table \'ListPartiesOwnerDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListPartiesOwnerDetail.CityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string State {
                get {
                    try {
                        return ((string)(this[this.tableListPartiesOwnerDetail.StateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'State\' in table \'ListPartiesOwnerDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListPartiesOwnerDetail.StateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsActive {
                get {
                    try {
                        return ((bool)(this[this.tableListPartiesOwnerDetail.IsActiveColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsActive\' in table \'ListPartiesOwnerDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListPartiesOwnerDetail.IsActiveColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPurchaser {
                get {
                    try {
                        return ((bool)(this[this.tableListPartiesOwnerDetail.IsPurchaserColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsPurchaser\' in table \'ListPartiesOwnerDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListPartiesOwnerDetail.IsPurchaserColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDeceased {
                get {
                    try {
                        return ((bool)(this[this.tableListPartiesOwnerDetail.IsDeceasedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsDeceased\' in table \'ListPartiesOwnerDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListPartiesOwnerDetail.IsDeceasedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Phone {
                get {
                    try {
                        return ((string)(this[this.tableListPartiesOwnerDetail.PhoneColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Phone\' in table \'ListPartiesOwnerDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListPartiesOwnerDetail.PhoneColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Email {
                get {
                    try {
                        return ((string)(this[this.tableListPartiesOwnerDetail.EmailColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Email\' in table \'ListPartiesOwnerDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListPartiesOwnerDetail.EmailColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Zip {
                get {
                    try {
                        return ((string)(this[this.tableListPartiesOwnerDetail.ZipColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Zip\' in table \'ListPartiesOwnerDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListPartiesOwnerDetail.ZipColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NameOwner {
                get {
                    try {
                        return ((string)(this[this.tableListPartiesOwnerDetail.NameOwnerColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NameOwner\' in table \'ListPartiesOwnerDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListPartiesOwnerDetail.NameOwnerColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Status {
                get {
                    try {
                        return ((string)(this[this.tableListPartiesOwnerDetail.StatusColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Status\' in table \'ListPartiesOwnerDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListPartiesOwnerDetail.StatusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOwnerIDNull() {
                return this.IsNull(this.tableListPartiesOwnerDetail.OwnerIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOwnerIDNull() {
                this[this.tableListPartiesOwnerDetail.OwnerIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPOwnerIDNull() {
                return this.IsNull(this.tableListPartiesOwnerDetail.POwnerIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPOwnerIDNull() {
                this[this.tableListPartiesOwnerDetail.POwnerIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNameNull() {
                return this.IsNull(this.tableListPartiesOwnerDetail.NameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNameNull() {
                this[this.tableListPartiesOwnerDetail.NameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAddress1Null() {
                return this.IsNull(this.tableListPartiesOwnerDetail.Address1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAddress1Null() {
                this[this.tableListPartiesOwnerDetail.Address1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAddress2Null() {
                return this.IsNull(this.tableListPartiesOwnerDetail.Address2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAddress2Null() {
                this[this.tableListPartiesOwnerDetail.Address2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAddressNull() {
                return this.IsNull(this.tableListPartiesOwnerDetail.AddressColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAddressNull() {
                this[this.tableListPartiesOwnerDetail.AddressColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCityNull() {
                return this.IsNull(this.tableListPartiesOwnerDetail.CityColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCityNull() {
                this[this.tableListPartiesOwnerDetail.CityColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStateNull() {
                return this.IsNull(this.tableListPartiesOwnerDetail.StateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStateNull() {
                this[this.tableListPartiesOwnerDetail.StateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsActiveNull() {
                return this.IsNull(this.tableListPartiesOwnerDetail.IsActiveColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsActiveNull() {
                this[this.tableListPartiesOwnerDetail.IsActiveColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsPurchaserNull() {
                return this.IsNull(this.tableListPartiesOwnerDetail.IsPurchaserColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsPurchaserNull() {
                this[this.tableListPartiesOwnerDetail.IsPurchaserColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsDeceasedNull() {
                return this.IsNull(this.tableListPartiesOwnerDetail.IsDeceasedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsDeceasedNull() {
                this[this.tableListPartiesOwnerDetail.IsDeceasedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPhoneNull() {
                return this.IsNull(this.tableListPartiesOwnerDetail.PhoneColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPhoneNull() {
                this[this.tableListPartiesOwnerDetail.PhoneColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmailNull() {
                return this.IsNull(this.tableListPartiesOwnerDetail.EmailColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmailNull() {
                this[this.tableListPartiesOwnerDetail.EmailColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsZipNull() {
                return this.IsNull(this.tableListPartiesOwnerDetail.ZipColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetZipNull() {
                this[this.tableListPartiesOwnerDetail.ZipColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNameOwnerNull() {
                return this.IsNull(this.tableListPartiesOwnerDetail.NameOwnerColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNameOwnerNull() {
                this[this.tableListPartiesOwnerDetail.NameOwnerColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStatusNull() {
                return this.IsNull(this.tableListPartiesOwnerDetail.StatusColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStatusNull() {
                this[this.tableListPartiesOwnerDetail.StatusColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ListAffidavitDistrictSelectionRow : global::System.Data.DataRow {
            
            private ListAffidavitDistrictSelectionDataTable tableListAffidavitDistrictSelection;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListAffidavitDistrictSelectionRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableListAffidavitDistrictSelection = ((ListAffidavitDistrictSelectionDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DistrictID {
                get {
                    try {
                        return ((string)(this[this.tableListAffidavitDistrictSelection.DistrictIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DistrictID\' in table \'ListAffidavitDistrictSelection\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tableListAffidavitDistrictSelection.DistrictIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int IsCounty {
                get {
                    try {
                        return ((int)(this[this.tableListAffidavitDistrictSelection.IsCountyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsCounty\' in table \'ListAffidavitDistrictSelection\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableListAffidavitDistrictSelection.IsCountyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LocationName {
                get {
                    try {
                        return ((string)(this[this.tableListAffidavitDistrictSelection.LocationNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LocationName\' in table \'ListAffidavitDistrictSelection\' is " +
                                "DBNull.", e);
                    }
                }
                set {
                    this[this.tableListAffidavitDistrictSelection.LocationNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LocationCode {
                get {
                    try {
                        return ((string)(this[this.tableListAffidavitDistrictSelection.LocationCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LocationCode\' in table \'ListAffidavitDistrictSelection\' is " +
                                "DBNull.", e);
                    }
                }
                set {
                    this[this.tableListAffidavitDistrictSelection.LocationCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Description {
                get {
                    try {
                        return ((string)(this[this.tableListAffidavitDistrictSelection.DescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Description\' in table \'ListAffidavitDistrictSelection\' is D" +
                                "BNull.", e);
                    }
                }
                set {
                    this[this.tableListAffidavitDistrictSelection.DescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string District {
                get {
                    try {
                        return ((string)(this[this.tableListAffidavitDistrictSelection.DistrictColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'District\' in table \'ListAffidavitDistrictSelection\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableListAffidavitDistrictSelection.DistrictColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDistrictIDNull() {
                return this.IsNull(this.tableListAffidavitDistrictSelection.DistrictIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDistrictIDNull() {
                this[this.tableListAffidavitDistrictSelection.DistrictIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsCountyNull() {
                return this.IsNull(this.tableListAffidavitDistrictSelection.IsCountyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsCountyNull() {
                this[this.tableListAffidavitDistrictSelection.IsCountyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLocationNameNull() {
                return this.IsNull(this.tableListAffidavitDistrictSelection.LocationNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLocationNameNull() {
                this[this.tableListAffidavitDistrictSelection.LocationNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLocationCodeNull() {
                return this.IsNull(this.tableListAffidavitDistrictSelection.LocationCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLocationCodeNull() {
                this[this.tableListAffidavitDistrictSelection.LocationCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDescriptionNull() {
                return this.IsNull(this.tableListAffidavitDistrictSelection.DescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDescriptionNull() {
                this[this.tableListAffidavitDistrictSelection.DescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDistrictNull() {
                return this.IsNull(this.tableListAffidavitDistrictSelection.DistrictColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDistrictNull() {
                this[this.tableListAffidavitDistrictSelection.DistrictColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class CalAmountDueRow : global::System.Data.DataRow {
            
            private CalAmountDueDataTable tableCalAmountDue;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CalAmountDueRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableCalAmountDue = ((CalAmountDueDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal ExciseTaxState {
                get {
                    try {
                        return ((decimal)(this[this.tableCalAmountDue.ExciseTaxStateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ExciseTaxState\' in table \'CalAmountDue\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCalAmountDue.ExciseTaxStateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal ExciseTaxLocal {
                get {
                    try {
                        return ((decimal)(this[this.tableCalAmountDue.ExciseTaxLocalColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ExciseTaxLocal\' in table \'CalAmountDue\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCalAmountDue.ExciseTaxLocalColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal DelinquentInterestState {
                get {
                    try {
                        return ((decimal)(this[this.tableCalAmountDue.DelinquentInterestStateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DelinquentInterestState\' in table \'CalAmountDue\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableCalAmountDue.DelinquentInterestStateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal DelinquentInterestLocal {
                get {
                    try {
                        return ((decimal)(this[this.tableCalAmountDue.DelinquentInterestLocalColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DelinquentInterestLocal\' in table \'CalAmountDue\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableCalAmountDue.DelinquentInterestLocalColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal DelinquentPenalty {
                get {
                    try {
                        return ((decimal)(this[this.tableCalAmountDue.DelinquentPenaltyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DelinquentPenalty\' in table \'CalAmountDue\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCalAmountDue.DelinquentPenaltyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TechnologyFee {
                get {
                    try {
                        return ((decimal)(this[this.tableCalAmountDue.TechnologyFeeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TechnologyFee\' in table \'CalAmountDue\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCalAmountDue.TechnologyFeeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TransactionFee {
                get {
                    try {
                        return ((decimal)(this[this.tableCalAmountDue.TransactionFeeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TransactionFee\' in table \'CalAmountDue\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCalAmountDue.TransactionFeeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsExciseTaxStateNull() {
                return this.IsNull(this.tableCalAmountDue.ExciseTaxStateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetExciseTaxStateNull() {
                this[this.tableCalAmountDue.ExciseTaxStateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsExciseTaxLocalNull() {
                return this.IsNull(this.tableCalAmountDue.ExciseTaxLocalColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetExciseTaxLocalNull() {
                this[this.tableCalAmountDue.ExciseTaxLocalColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDelinquentInterestStateNull() {
                return this.IsNull(this.tableCalAmountDue.DelinquentInterestStateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDelinquentInterestStateNull() {
                this[this.tableCalAmountDue.DelinquentInterestStateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDelinquentInterestLocalNull() {
                return this.IsNull(this.tableCalAmountDue.DelinquentInterestLocalColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDelinquentInterestLocalNull() {
                this[this.tableCalAmountDue.DelinquentInterestLocalColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDelinquentPenaltyNull() {
                return this.IsNull(this.tableCalAmountDue.DelinquentPenaltyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDelinquentPenaltyNull() {
                this[this.tableCalAmountDue.DelinquentPenaltyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTechnologyFeeNull() {
                return this.IsNull(this.tableCalAmountDue.TechnologyFeeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTechnologyFeeNull() {
                this[this.tableCalAmountDue.TechnologyFeeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTransactionFeeNull() {
                return this.IsNull(this.tableCalAmountDue.TransactionFeeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTransactionFeeNull() {
                this[this.tableCalAmountDue.TransactionFeeColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ExciseIndividualTypeRow : global::System.Data.DataRow {
            
            private ExciseIndividualTypeDataTable tableExciseIndividualType;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ExciseIndividualTypeRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableExciseIndividualType = ((ExciseIndividualTypeDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte IndividualTypeID {
                get {
                    return ((byte)(this[this.tableExciseIndividualType.IndividualTypeIDColumn]));
                }
                set {
                    this[this.tableExciseIndividualType.IndividualTypeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IndividualType {
                get {
                    return ((string)(this[this.tableExciseIndividualType.IndividualTypeColumn]));
                }
                set {
                    this[this.tableExciseIndividualType.IndividualTypeColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class MobileHomeRow : global::System.Data.DataRow {
            
            private MobileHomeDataTable tableMobileHome;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MobileHomeRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableMobileHome = ((MobileHomeDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MobileHomeID {
                get {
                    try {
                        return ((int)(this[this.tableMobileHome.MobileHomeIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MobileHomeID\' in table \'MobileHome\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMobileHome.MobileHomeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int StatementID {
                get {
                    try {
                        return ((int)(this[this.tableMobileHome.StatementIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StatementID\' in table \'MobileHome\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMobileHome.StatementIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Make {
                get {
                    try {
                        return ((string)(this[this.tableMobileHome.MakeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Make\' in table \'MobileHome\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMobileHome.MakeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Year {
                get {
                    try {
                        return ((string)(this[this.tableMobileHome.YearColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Year\' in table \'MobileHome\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMobileHome.YearColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Model {
                get {
                    try {
                        return ((string)(this[this.tableMobileHome.ModelColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Model\' in table \'MobileHome\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMobileHome.ModelColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Size {
                get {
                    try {
                        return ((string)(this[this.tableMobileHome.SizeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Size\' in table \'MobileHome\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMobileHome.SizeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Serial {
                get {
                    try {
                        return ((string)(this[this.tableMobileHome.SerialColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Serial\' in table \'MobileHome\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMobileHome.SerialColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TaxCode {
                get {
                    try {
                        return ((string)(this[this.tableMobileHome.TaxCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TaxCode\' in table \'MobileHome\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMobileHome.TaxCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMobileHomeIDNull() {
                return this.IsNull(this.tableMobileHome.MobileHomeIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMobileHomeIDNull() {
                this[this.tableMobileHome.MobileHomeIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStatementIDNull() {
                return this.IsNull(this.tableMobileHome.StatementIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStatementIDNull() {
                this[this.tableMobileHome.StatementIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMakeNull() {
                return this.IsNull(this.tableMobileHome.MakeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMakeNull() {
                this[this.tableMobileHome.MakeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsYearNull() {
                return this.IsNull(this.tableMobileHome.YearColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetYearNull() {
                this[this.tableMobileHome.YearColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsModelNull() {
                return this.IsNull(this.tableMobileHome.ModelColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetModelNull() {
                this[this.tableMobileHome.ModelColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSizeNull() {
                return this.IsNull(this.tableMobileHome.SizeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSizeNull() {
                this[this.tableMobileHome.SizeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSerialNull() {
                return this.IsNull(this.tableMobileHome.SerialColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSerialNull() {
                this[this.tableMobileHome.SerialColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTaxCodeNull() {
                return this.IsNull(this.tableMobileHome.TaxCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTaxCodeNull() {
                this[this.tableMobileHome.TaxCodeColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ListPartiesOwnerDetail2Row : global::System.Data.DataRow {
            
            private ListPartiesOwnerDetail2DataTable tableListPartiesOwnerDetail2;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListPartiesOwnerDetail2Row(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableListPartiesOwnerDetail2 = ((ListPartiesOwnerDetail2DataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int OwnerID {
                get {
                    return ((int)(this[this.tableListPartiesOwnerDetail2.OwnerIDColumn]));
                }
                set {
                    this[this.tableListPartiesOwnerDetail2.OwnerIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int POwnerID {
                get {
                    try {
                        return ((int)(this[this.tableListPartiesOwnerDetail2.POwnerIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'POwnerID\' in table \'ListPartiesOwnerDetail2\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListPartiesOwnerDetail2.POwnerIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    try {
                        return ((string)(this[this.tableListPartiesOwnerDetail2.NameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Name\' in table \'ListPartiesOwnerDetail2\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListPartiesOwnerDetail2.NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Address1 {
                get {
                    try {
                        return ((string)(this[this.tableListPartiesOwnerDetail2.Address1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Address1\' in table \'ListPartiesOwnerDetail2\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListPartiesOwnerDetail2.Address1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Address2 {
                get {
                    try {
                        return ((string)(this[this.tableListPartiesOwnerDetail2.Address2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Address2\' in table \'ListPartiesOwnerDetail2\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListPartiesOwnerDetail2.Address2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Address {
                get {
                    try {
                        return ((string)(this[this.tableListPartiesOwnerDetail2.AddressColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Address\' in table \'ListPartiesOwnerDetail2\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListPartiesOwnerDetail2.AddressColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string City {
                get {
                    try {
                        return ((string)(this[this.tableListPartiesOwnerDetail2.CityColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'City\' in table \'ListPartiesOwnerDetail2\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListPartiesOwnerDetail2.CityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string State {
                get {
                    try {
                        return ((string)(this[this.tableListPartiesOwnerDetail2.StateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'State\' in table \'ListPartiesOwnerDetail2\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListPartiesOwnerDetail2.StateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Zip {
                get {
                    try {
                        return ((string)(this[this.tableListPartiesOwnerDetail2.ZipColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Zip\' in table \'ListPartiesOwnerDetail2\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListPartiesOwnerDetail2.ZipColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NameOwner {
                get {
                    try {
                        return ((string)(this[this.tableListPartiesOwnerDetail2.NameOwnerColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NameOwner\' in table \'ListPartiesOwnerDetail2\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListPartiesOwnerDetail2.NameOwnerColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Status {
                get {
                    try {
                        return ((string)(this[this.tableListPartiesOwnerDetail2.StatusColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Status\' in table \'ListPartiesOwnerDetail2\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListPartiesOwnerDetail2.StatusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPOwnerIDNull() {
                return this.IsNull(this.tableListPartiesOwnerDetail2.POwnerIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPOwnerIDNull() {
                this[this.tableListPartiesOwnerDetail2.POwnerIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNameNull() {
                return this.IsNull(this.tableListPartiesOwnerDetail2.NameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNameNull() {
                this[this.tableListPartiesOwnerDetail2.NameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAddress1Null() {
                return this.IsNull(this.tableListPartiesOwnerDetail2.Address1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAddress1Null() {
                this[this.tableListPartiesOwnerDetail2.Address1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAddress2Null() {
                return this.IsNull(this.tableListPartiesOwnerDetail2.Address2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAddress2Null() {
                this[this.tableListPartiesOwnerDetail2.Address2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAddressNull() {
                return this.IsNull(this.tableListPartiesOwnerDetail2.AddressColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAddressNull() {
                this[this.tableListPartiesOwnerDetail2.AddressColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCityNull() {
                return this.IsNull(this.tableListPartiesOwnerDetail2.CityColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCityNull() {
                this[this.tableListPartiesOwnerDetail2.CityColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStateNull() {
                return this.IsNull(this.tableListPartiesOwnerDetail2.StateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStateNull() {
                this[this.tableListPartiesOwnerDetail2.StateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsZipNull() {
                return this.IsNull(this.tableListPartiesOwnerDetail2.ZipColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetZipNull() {
                this[this.tableListPartiesOwnerDetail2.ZipColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNameOwnerNull() {
                return this.IsNull(this.tableListPartiesOwnerDetail2.NameOwnerColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNameOwnerNull() {
                this[this.tableListPartiesOwnerDetail2.NameOwnerColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStatusNull() {
                return this.IsNull(this.tableListPartiesOwnerDetail2.StatusColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStatusNull() {
                this[this.tableListPartiesOwnerDetail2.StatusColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ListParcelDetailTableRow : global::System.Data.DataRow {
            
            private ListParcelDetailTableDataTable tableListParcelDetailTable;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListParcelDetailTableRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableListParcelDetailTable = ((ListParcelDetailTableDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ParcelNumber {
                get {
                    try {
                        return ((string)(this[this.tableListParcelDetailTable.ParcelNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ParcelNumber\' in table \'ListParcelDetailTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListParcelDetailTable.ParcelNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal AssessedValue {
                get {
                    try {
                        return ((decimal)(this[this.tableListParcelDetailTable.AssessedValueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AssessedValue\' in table \'ListParcelDetailTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListParcelDetailTable.AssessedValueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IsPersonalProperty {
                get {
                    try {
                        return ((string)(this[this.tableListParcelDetailTable.IsPersonalPropertyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsPersonalProperty\' in table \'ListParcelDetailTable\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableListParcelDetailTable.IsPersonalPropertyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Legal {
                get {
                    try {
                        return ((string)(this[this.tableListParcelDetailTable.LegalColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Legal\' in table \'ListParcelDetailTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListParcelDetailTable.LegalColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsParcelNumberNull() {
                return this.IsNull(this.tableListParcelDetailTable.ParcelNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetParcelNumberNull() {
                this[this.tableListParcelDetailTable.ParcelNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAssessedValueNull() {
                return this.IsNull(this.tableListParcelDetailTable.AssessedValueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAssessedValueNull() {
                this[this.tableListParcelDetailTable.AssessedValueColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsPersonalPropertyNull() {
                return this.IsNull(this.tableListParcelDetailTable.IsPersonalPropertyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsPersonalPropertyNull() {
                this[this.tableListParcelDetailTable.IsPersonalPropertyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLegalNull() {
                return this.IsNull(this.tableListParcelDetailTable.LegalColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLegalNull() {
                this[this.tableListParcelDetailTable.LegalColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ListExciseWACRow : global::System.Data.DataRow {
            
            private ListExciseWACDataTable tableListExciseWAC;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListExciseWACRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableListExciseWAC = ((ListExciseWACDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int WACID {
                get {
                    return ((int)(this[this.tableListExciseWAC.WACIDColumn]));
                }
                set {
                    this[this.tableListExciseWAC.WACIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string WAC {
                get {
                    try {
                        return ((string)(this[this.tableListExciseWAC.WACColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'WAC\' in table \'ListExciseWAC\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListExciseWAC.WACColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWACNull() {
                return this.IsNull(this.tableListExciseWAC.WACColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWACNull() {
                this[this.tableListExciseWAC.WACColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ListExciseIndividualRow : global::System.Data.DataRow {
            
            private ListExciseIndividualDataTable tableListExciseIndividual;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListExciseIndividualRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableListExciseIndividual = ((ListExciseIndividualDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int IndividualID {
                get {
                    return ((int)(this[this.tableListExciseIndividual.IndividualIDColumn]));
                }
                set {
                    this[this.tableListExciseIndividual.IndividualIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int OwnerID {
                get {
                    try {
                        return ((int)(this[this.tableListExciseIndividual.OwnerIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OwnerID\' in table \'ListExciseIndividual\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListExciseIndividual.OwnerIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int StatementID {
                get {
                    return ((int)(this[this.tableListExciseIndividual.StatementIDColumn]));
                }
                set {
                    this[this.tableListExciseIndividual.StatementIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte IndividualTypeID {
                get {
                    return ((byte)(this[this.tableListExciseIndividual.IndividualTypeIDColumn]));
                }
                set {
                    this[this.tableListExciseIndividual.IndividualTypeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    return ((string)(this[this.tableListExciseIndividual.NameColumn]));
                }
                set {
                    this[this.tableListExciseIndividual.NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Address1 {
                get {
                    try {
                        return ((string)(this[this.tableListExciseIndividual.Address1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Address1\' in table \'ListExciseIndividual\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListExciseIndividual.Address1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Address2 {
                get {
                    try {
                        return ((string)(this[this.tableListExciseIndividual.Address2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Address2\' in table \'ListExciseIndividual\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListExciseIndividual.Address2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string City {
                get {
                    try {
                        return ((string)(this[this.tableListExciseIndividual.CityColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'City\' in table \'ListExciseIndividual\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListExciseIndividual.CityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string State {
                get {
                    try {
                        return ((string)(this[this.tableListExciseIndividual.StateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'State\' in table \'ListExciseIndividual\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListExciseIndividual.StateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Zip {
                get {
                    try {
                        return ((string)(this[this.tableListExciseIndividual.ZipColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Zip\' in table \'ListExciseIndividual\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListExciseIndividual.ZipColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Country {
                get {
                    try {
                        return ((string)(this[this.tableListExciseIndividual.CountryColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Country\' in table \'ListExciseIndividual\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListExciseIndividual.CountryColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Phone {
                get {
                    try {
                        return ((string)(this[this.tableListExciseIndividual.PhoneColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Phone\' in table \'ListExciseIndividual\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListExciseIndividual.PhoneColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float PercentOwner {
                get {
                    try {
                        return ((float)(this[this.tableListExciseIndividual.PercentOwnerColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PercentOwner\' in table \'ListExciseIndividual\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListExciseIndividual.PercentOwnerColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOwnerIDNull() {
                return this.IsNull(this.tableListExciseIndividual.OwnerIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOwnerIDNull() {
                this[this.tableListExciseIndividual.OwnerIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAddress1Null() {
                return this.IsNull(this.tableListExciseIndividual.Address1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAddress1Null() {
                this[this.tableListExciseIndividual.Address1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAddress2Null() {
                return this.IsNull(this.tableListExciseIndividual.Address2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAddress2Null() {
                this[this.tableListExciseIndividual.Address2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCityNull() {
                return this.IsNull(this.tableListExciseIndividual.CityColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCityNull() {
                this[this.tableListExciseIndividual.CityColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStateNull() {
                return this.IsNull(this.tableListExciseIndividual.StateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStateNull() {
                this[this.tableListExciseIndividual.StateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsZipNull() {
                return this.IsNull(this.tableListExciseIndividual.ZipColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetZipNull() {
                this[this.tableListExciseIndividual.ZipColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCountryNull() {
                return this.IsNull(this.tableListExciseIndividual.CountryColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCountryNull() {
                this[this.tableListExciseIndividual.CountryColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPhoneNull() {
                return this.IsNull(this.tableListExciseIndividual.PhoneColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPhoneNull() {
                this[this.tableListExciseIndividual.PhoneColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPercentOwnerNull() {
                return this.IsNull(this.tableListExciseIndividual.PercentOwnerColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPercentOwnerNull() {
                this[this.tableListExciseIndividual.PercentOwnerColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ExciseSourceRow : global::System.Data.DataRow {
            
            private ExciseSourceDataTable tableExciseSource;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ExciseSourceRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableExciseSource = ((ExciseSourceDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SourceID {
                get {
                    try {
                        return ((int)(this[this.tableExciseSource.SourceIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SourceID\' in table \'ExciseSource\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableExciseSource.SourceIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Source {
                get {
                    try {
                        return ((string)(this[this.tableExciseSource.SourceColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Source\' in table \'ExciseSource\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableExciseSource.SourceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSourceIDNull() {
                return this.IsNull(this.tableExciseSource.SourceIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSourceIDNull() {
                this[this.tableExciseSource.SourceIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSourceNull() {
                return this.IsNull(this.tableExciseSource.SourceColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSourceNull() {
                this[this.tableExciseSource.SourceColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ExciseDeedTypeRow : global::System.Data.DataRow {
            
            private ExciseDeedTypeDataTable tableExciseDeedType;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ExciseDeedTypeRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableExciseDeedType = ((ExciseDeedTypeDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int DeedTypeID {
                get {
                    try {
                        return ((int)(this[this.tableExciseDeedType.DeedTypeIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DeedTypeID\' in table \'ExciseDeedType\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableExciseDeedType.DeedTypeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DeedType {
                get {
                    try {
                        return ((string)(this[this.tableExciseDeedType.DeedTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DeedType\' in table \'ExciseDeedType\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableExciseDeedType.DeedTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDeedTypeIDNull() {
                return this.IsNull(this.tableExciseDeedType.DeedTypeIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDeedTypeIDNull() {
                this[this.tableExciseDeedType.DeedTypeIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDeedTypeNull() {
                return this.IsNull(this.tableExciseDeedType.DeedTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDeedTypeNull() {
                this[this.tableExciseDeedType.DeedTypeColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class PartiesOwnerDetailRow : global::System.Data.DataRow {
            
            private PartiesOwnerDetailDataTable tablePartiesOwnerDetail;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PartiesOwnerDetailRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablePartiesOwnerDetail = ((PartiesOwnerDetailDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    try {
                        return ((string)(this[this.tablePartiesOwnerDetail.NameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Name\' in table \'PartiesOwnerDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePartiesOwnerDetail.NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Phone {
                get {
                    try {
                        return ((string)(this[this.tablePartiesOwnerDetail.PhoneColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Phone\' in table \'PartiesOwnerDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePartiesOwnerDetail.PhoneColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IndividualType {
                get {
                    try {
                        return ((string)(this[this.tablePartiesOwnerDetail.IndividualTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IndividualType\' in table \'PartiesOwnerDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePartiesOwnerDetail.IndividualTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int IndividualTypeID {
                get {
                    try {
                        return ((int)(this[this.tablePartiesOwnerDetail.IndividualTypeIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IndividualTypeID\' in table \'PartiesOwnerDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePartiesOwnerDetail.IndividualTypeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PercentOwner {
                get {
                    try {
                        return ((int)(this[this.tablePartiesOwnerDetail.PercentOwnerColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PercentOwner\' in table \'PartiesOwnerDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePartiesOwnerDetail.PercentOwnerColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Address1 {
                get {
                    try {
                        return ((string)(this[this.tablePartiesOwnerDetail.Address1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Address1\' in table \'PartiesOwnerDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePartiesOwnerDetail.Address1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Address2 {
                get {
                    try {
                        return ((string)(this[this.tablePartiesOwnerDetail.Address2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Address2\' in table \'PartiesOwnerDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePartiesOwnerDetail.Address2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string City {
                get {
                    try {
                        return ((string)(this[this.tablePartiesOwnerDetail.CityColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'City\' in table \'PartiesOwnerDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePartiesOwnerDetail.CityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string State {
                get {
                    try {
                        return ((string)(this[this.tablePartiesOwnerDetail.StateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'State\' in table \'PartiesOwnerDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePartiesOwnerDetail.StateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Zip {
                get {
                    try {
                        return ((string)(this[this.tablePartiesOwnerDetail.ZipColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Zip\' in table \'PartiesOwnerDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePartiesOwnerDetail.ZipColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Country {
                get {
                    try {
                        return ((string)(this[this.tablePartiesOwnerDetail.CountryColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Country\' in table \'PartiesOwnerDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePartiesOwnerDetail.CountryColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int OwnerID {
                get {
                    try {
                        return ((int)(this[this.tablePartiesOwnerDetail.OwnerIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OwnerID\' in table \'PartiesOwnerDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePartiesOwnerDetail.OwnerIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Status {
                get {
                    try {
                        return ((string)(this[this.tablePartiesOwnerDetail.StatusColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Status\' in table \'PartiesOwnerDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePartiesOwnerDetail.StatusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNameNull() {
                return this.IsNull(this.tablePartiesOwnerDetail.NameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNameNull() {
                this[this.tablePartiesOwnerDetail.NameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPhoneNull() {
                return this.IsNull(this.tablePartiesOwnerDetail.PhoneColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPhoneNull() {
                this[this.tablePartiesOwnerDetail.PhoneColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIndividualTypeNull() {
                return this.IsNull(this.tablePartiesOwnerDetail.IndividualTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIndividualTypeNull() {
                this[this.tablePartiesOwnerDetail.IndividualTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIndividualTypeIDNull() {
                return this.IsNull(this.tablePartiesOwnerDetail.IndividualTypeIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIndividualTypeIDNull() {
                this[this.tablePartiesOwnerDetail.IndividualTypeIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPercentOwnerNull() {
                return this.IsNull(this.tablePartiesOwnerDetail.PercentOwnerColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPercentOwnerNull() {
                this[this.tablePartiesOwnerDetail.PercentOwnerColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAddress1Null() {
                return this.IsNull(this.tablePartiesOwnerDetail.Address1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAddress1Null() {
                this[this.tablePartiesOwnerDetail.Address1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAddress2Null() {
                return this.IsNull(this.tablePartiesOwnerDetail.Address2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAddress2Null() {
                this[this.tablePartiesOwnerDetail.Address2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCityNull() {
                return this.IsNull(this.tablePartiesOwnerDetail.CityColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCityNull() {
                this[this.tablePartiesOwnerDetail.CityColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStateNull() {
                return this.IsNull(this.tablePartiesOwnerDetail.StateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStateNull() {
                this[this.tablePartiesOwnerDetail.StateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsZipNull() {
                return this.IsNull(this.tablePartiesOwnerDetail.ZipColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetZipNull() {
                this[this.tablePartiesOwnerDetail.ZipColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCountryNull() {
                return this.IsNull(this.tablePartiesOwnerDetail.CountryColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCountryNull() {
                this[this.tablePartiesOwnerDetail.CountryColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOwnerIDNull() {
                return this.IsNull(this.tablePartiesOwnerDetail.OwnerIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOwnerIDNull() {
                this[this.tablePartiesOwnerDetail.OwnerIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStatusNull() {
                return this.IsNull(this.tablePartiesOwnerDetail.StatusColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStatusNull() {
                this[this.tablePartiesOwnerDetail.StatusColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ExciseUseCodeRow : global::System.Data.DataRow {
            
            private ExciseUseCodeDataTable tableExciseUseCode;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ExciseUseCodeRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableExciseUseCode = ((ExciseUseCodeDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ExciseRateID {
                get {
                    try {
                        return ((int)(this[this.tableExciseUseCode.ExciseRateIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ExciseRateID\' in table \'ExciseUseCode\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableExciseUseCode.ExciseRateIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UseCode1 {
                get {
                    try {
                        return ((string)(this[this.tableExciseUseCode.UseCode1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UseCode1\' in table \'ExciseUseCode\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableExciseUseCode.UseCode1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UseCode2 {
                get {
                    try {
                        return ((string)(this[this.tableExciseUseCode.UseCode2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UseCode2\' in table \'ExciseUseCode\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableExciseUseCode.UseCode2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UseCode3 {
                get {
                    try {
                        return ((string)(this[this.tableExciseUseCode.UseCode3Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UseCode3\' in table \'ExciseUseCode\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableExciseUseCode.UseCode3Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsExciseRateIDNull() {
                return this.IsNull(this.tableExciseUseCode.ExciseRateIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetExciseRateIDNull() {
                this[this.tableExciseUseCode.ExciseRateIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUseCode1Null() {
                return this.IsNull(this.tableExciseUseCode.UseCode1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUseCode1Null() {
                this[this.tableExciseUseCode.UseCode1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUseCode2Null() {
                return this.IsNull(this.tableExciseUseCode.UseCode2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUseCode2Null() {
                this[this.tableExciseUseCode.UseCode2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUseCode3Null() {
                return this.IsNull(this.tableExciseUseCode.UseCode3Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUseCode3Null() {
                this[this.tableExciseUseCode.UseCode3Column] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class DorSubmitTableRow : global::System.Data.DataRow {
            
            private DorSubmitTableDataTable tableDorSubmitTable;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DorSubmitTableRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableDorSubmitTable = ((DorSubmitTableDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int submittedID {
                get {
                    try {
                        return ((int)(this[this.tableDorSubmitTable.submittedIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'submittedID\' in table \'DorSubmitTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDorSubmitTable.submittedIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IssubmittedIDNull() {
                return this.IsNull(this.tableDorSubmitTable.submittedIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetsubmittedIDNull() {
                this[this.tableDorSubmitTable.submittedIDColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class OpenSpaceDataRow : global::System.Data.DataRow {
            
            private OpenSpaceDataDataTable tableOpenSpaceData;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal OpenSpaceDataRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableOpenSpaceData = ((OpenSpaceDataDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Column1 {
                get {
                    try {
                        return ((int)(this[this.tableOpenSpaceData.Column1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Column1\' in table \'OpenSpaceData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOpenSpaceData.Column1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsColumn1Null() {
                return this.IsNull(this.tableOpenSpaceData.Column1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetColumn1Null() {
                this[this.tableOpenSpaceData.Column1Column] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ConfiguredRollYearRow : global::System.Data.DataRow {
            
            private ConfiguredRollYearDataTable tableConfiguredRollYear;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ConfiguredRollYearRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableConfiguredRollYear = ((ConfiguredRollYearDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ConfiguredYear {
                get {
                    try {
                        return ((string)(this[this.tableConfiguredRollYear.ConfiguredYearColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ConfiguredYear\' in table \'ConfiguredRollYear\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableConfiguredRollYear.ConfiguredYearColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsConfiguredYearNull() {
                return this.IsNull(this.tableConfiguredRollYear.ConfiguredYearColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetConfiguredYearNull() {
                this[this.tableConfiguredRollYear.ConfiguredYearColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class OwnerStatusLowRow : global::System.Data.DataRow {
            
            private OwnerStatusLowDataTable tableOwnerStatusLow;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal OwnerStatusLowRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableOwnerStatusLow = ((OwnerStatusLowDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Low {
                get {
                    try {
                        return ((int)(this[this.tableOwnerStatusLow.LowColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Low\' in table \'OwnerStatusLow\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOwnerStatusLow.LowColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLowNull() {
                return this.IsNull(this.tableOwnerStatusLow.LowColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLowNull() {
                this[this.tableOwnerStatusLow.LowColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class OwnerStatusHighRow : global::System.Data.DataRow {
            
            private OwnerStatusHighDataTable tableOwnerStatusHigh;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal OwnerStatusHighRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableOwnerStatusHigh = ((OwnerStatusHighDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int High {
                get {
                    try {
                        return ((int)(this[this.tableOwnerStatusHigh.HighColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'High\' in table \'OwnerStatusHigh\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOwnerStatusHigh.HighColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHighNull() {
                return this.IsNull(this.tableOwnerStatusHigh.HighColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHighNull() {
                this[this.tableOwnerStatusHigh.HighColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class GeneralRowChangeEvent : global::System.EventArgs {
            
            private GeneralRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GeneralRowChangeEvent(GeneralRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GeneralRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class PartiesHeaderRowChangeEvent : global::System.EventArgs {
            
            private PartiesHeaderRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PartiesHeaderRowChangeEvent(PartiesHeaderRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PartiesHeaderRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ParcelHeaderRowChangeEvent : global::System.EventArgs {
            
            private ParcelHeaderRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ParcelHeaderRowChangeEvent(ParcelHeaderRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ParcelHeaderRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class AffidavitRowChangeEvent : global::System.EventArgs {
            
            private AffidavitRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AffidavitRowChangeEvent(AffidavitRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AffidavitRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class AmountDueRowChangeEvent : global::System.EventArgs {
            
            private AmountDueRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AmountDueRowChangeEvent(AmountDueRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AmountDueRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SupplimentRowChangeEvent : global::System.EventArgs {
            
            private SupplimentRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SupplimentRowChangeEvent(SupplimentRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SupplimentRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ListAffidavitStatementIdRowChangeEvent : global::System.EventArgs {
            
            private ListAffidavitStatementIdRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListAffidavitStatementIdRowChangeEvent(ListAffidavitStatementIdRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListAffidavitStatementIdRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ListPartiesOwnerDetailRowChangeEvent : global::System.EventArgs {
            
            private ListPartiesOwnerDetailRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListPartiesOwnerDetailRowChangeEvent(ListPartiesOwnerDetailRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListPartiesOwnerDetailRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ListAffidavitDistrictSelectionRowChangeEvent : global::System.EventArgs {
            
            private ListAffidavitDistrictSelectionRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListAffidavitDistrictSelectionRowChangeEvent(ListAffidavitDistrictSelectionRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListAffidavitDistrictSelectionRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class CalAmountDueRowChangeEvent : global::System.EventArgs {
            
            private CalAmountDueRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CalAmountDueRowChangeEvent(CalAmountDueRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CalAmountDueRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ExciseIndividualTypeRowChangeEvent : global::System.EventArgs {
            
            private ExciseIndividualTypeRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ExciseIndividualTypeRowChangeEvent(ExciseIndividualTypeRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ExciseIndividualTypeRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class MobileHomeRowChangeEvent : global::System.EventArgs {
            
            private MobileHomeRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MobileHomeRowChangeEvent(MobileHomeRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MobileHomeRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ListPartiesOwnerDetail2RowChangeEvent : global::System.EventArgs {
            
            private ListPartiesOwnerDetail2Row eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListPartiesOwnerDetail2RowChangeEvent(ListPartiesOwnerDetail2Row row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListPartiesOwnerDetail2Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ListParcelDetailTableRowChangeEvent : global::System.EventArgs {
            
            private ListParcelDetailTableRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListParcelDetailTableRowChangeEvent(ListParcelDetailTableRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListParcelDetailTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ListExciseWACRowChangeEvent : global::System.EventArgs {
            
            private ListExciseWACRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListExciseWACRowChangeEvent(ListExciseWACRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListExciseWACRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ListExciseIndividualRowChangeEvent : global::System.EventArgs {
            
            private ListExciseIndividualRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListExciseIndividualRowChangeEvent(ListExciseIndividualRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListExciseIndividualRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ExciseSourceRowChangeEvent : global::System.EventArgs {
            
            private ExciseSourceRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ExciseSourceRowChangeEvent(ExciseSourceRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ExciseSourceRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ExciseDeedTypeRowChangeEvent : global::System.EventArgs {
            
            private ExciseDeedTypeRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ExciseDeedTypeRowChangeEvent(ExciseDeedTypeRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ExciseDeedTypeRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class PartiesOwnerDetailRowChangeEvent : global::System.EventArgs {
            
            private PartiesOwnerDetailRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PartiesOwnerDetailRowChangeEvent(PartiesOwnerDetailRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PartiesOwnerDetailRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ExciseUseCodeRowChangeEvent : global::System.EventArgs {
            
            private ExciseUseCodeRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ExciseUseCodeRowChangeEvent(ExciseUseCodeRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ExciseUseCodeRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class DorSubmitTableRowChangeEvent : global::System.EventArgs {
            
            private DorSubmitTableRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DorSubmitTableRowChangeEvent(DorSubmitTableRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DorSubmitTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class OpenSpaceDataRowChangeEvent : global::System.EventArgs {
            
            private OpenSpaceDataRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OpenSpaceDataRowChangeEvent(OpenSpaceDataRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OpenSpaceDataRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ConfiguredRollYearRowChangeEvent : global::System.EventArgs {
            
            private ConfiguredRollYearRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ConfiguredRollYearRowChangeEvent(ConfiguredRollYearRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ConfiguredRollYearRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class OwnerStatusLowRowChangeEvent : global::System.EventArgs {
            
            private OwnerStatusLowRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OwnerStatusLowRowChangeEvent(OwnerStatusLowRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OwnerStatusLowRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class OwnerStatusHighRowChangeEvent : global::System.EventArgs {
            
            private OwnerStatusHighRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OwnerStatusHighRowChangeEvent(OwnerStatusHighRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OwnerStatusHighRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591