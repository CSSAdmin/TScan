//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4984
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace TerraScan.BusinessEntities {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("F28310MADImport")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class F28310MADImport : global::System.Data.DataSet {
        
        private ListDistrictTypeDataTable tableListDistrictType;
        
        private GetMADImportHeaderDetailsDataTable tableGetMADImportHeaderDetails;
        
        private GetMADImportDetailsDataTable tableGetMADImportDetails;
        
        private SaveMADImportEntryErrorDataTable tableSaveMADImportEntryError;
        
        private SaveMADImportEntryDataTable tableSaveMADImportEntry;
        
        private F28310_SaveHeaderTemplateDataTableDataTable tableF28310_SaveHeaderTemplateDataTable;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public F28310MADImport() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected F28310MADImport(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["ListDistrictType"] != null)) {
                    base.Tables.Add(new ListDistrictTypeDataTable(ds.Tables["ListDistrictType"]));
                }
                if ((ds.Tables["GetMADImportHeaderDetails"] != null)) {
                    base.Tables.Add(new GetMADImportHeaderDetailsDataTable(ds.Tables["GetMADImportHeaderDetails"]));
                }
                if ((ds.Tables["GetMADImportDetails"] != null)) {
                    base.Tables.Add(new GetMADImportDetailsDataTable(ds.Tables["GetMADImportDetails"]));
                }
                if ((ds.Tables["SaveMADImportEntryError"] != null)) {
                    base.Tables.Add(new SaveMADImportEntryErrorDataTable(ds.Tables["SaveMADImportEntryError"]));
                }
                if ((ds.Tables["SaveMADImportEntry"] != null)) {
                    base.Tables.Add(new SaveMADImportEntryDataTable(ds.Tables["SaveMADImportEntry"]));
                }
                if ((ds.Tables["F28310_SaveHeaderTemplateDataTable"] != null)) {
                    base.Tables.Add(new F28310_SaveHeaderTemplateDataTableDataTable(ds.Tables["F28310_SaveHeaderTemplateDataTable"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ListDistrictTypeDataTable ListDistrictType {
            get {
                return this.tableListDistrictType;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GetMADImportHeaderDetailsDataTable GetMADImportHeaderDetails {
            get {
                return this.tableGetMADImportHeaderDetails;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GetMADImportDetailsDataTable GetMADImportDetails {
            get {
                return this.tableGetMADImportDetails;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SaveMADImportEntryErrorDataTable SaveMADImportEntryError {
            get {
                return this.tableSaveMADImportEntryError;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SaveMADImportEntryDataTable SaveMADImportEntry {
            get {
                return this.tableSaveMADImportEntry;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public F28310_SaveHeaderTemplateDataTableDataTable F28310_SaveHeaderTemplateDataTable {
            get {
                return this.tableF28310_SaveHeaderTemplateDataTable;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            F28310MADImport cln = ((F28310MADImport)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["ListDistrictType"] != null)) {
                    base.Tables.Add(new ListDistrictTypeDataTable(ds.Tables["ListDistrictType"]));
                }
                if ((ds.Tables["GetMADImportHeaderDetails"] != null)) {
                    base.Tables.Add(new GetMADImportHeaderDetailsDataTable(ds.Tables["GetMADImportHeaderDetails"]));
                }
                if ((ds.Tables["GetMADImportDetails"] != null)) {
                    base.Tables.Add(new GetMADImportDetailsDataTable(ds.Tables["GetMADImportDetails"]));
                }
                if ((ds.Tables["SaveMADImportEntryError"] != null)) {
                    base.Tables.Add(new SaveMADImportEntryErrorDataTable(ds.Tables["SaveMADImportEntryError"]));
                }
                if ((ds.Tables["SaveMADImportEntry"] != null)) {
                    base.Tables.Add(new SaveMADImportEntryDataTable(ds.Tables["SaveMADImportEntry"]));
                }
                if ((ds.Tables["F28310_SaveHeaderTemplateDataTable"] != null)) {
                    base.Tables.Add(new F28310_SaveHeaderTemplateDataTableDataTable(ds.Tables["F28310_SaveHeaderTemplateDataTable"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableListDistrictType = ((ListDistrictTypeDataTable)(base.Tables["ListDistrictType"]));
            if ((initTable == true)) {
                if ((this.tableListDistrictType != null)) {
                    this.tableListDistrictType.InitVars();
                }
            }
            this.tableGetMADImportHeaderDetails = ((GetMADImportHeaderDetailsDataTable)(base.Tables["GetMADImportHeaderDetails"]));
            if ((initTable == true)) {
                if ((this.tableGetMADImportHeaderDetails != null)) {
                    this.tableGetMADImportHeaderDetails.InitVars();
                }
            }
            this.tableGetMADImportDetails = ((GetMADImportDetailsDataTable)(base.Tables["GetMADImportDetails"]));
            if ((initTable == true)) {
                if ((this.tableGetMADImportDetails != null)) {
                    this.tableGetMADImportDetails.InitVars();
                }
            }
            this.tableSaveMADImportEntryError = ((SaveMADImportEntryErrorDataTable)(base.Tables["SaveMADImportEntryError"]));
            if ((initTable == true)) {
                if ((this.tableSaveMADImportEntryError != null)) {
                    this.tableSaveMADImportEntryError.InitVars();
                }
            }
            this.tableSaveMADImportEntry = ((SaveMADImportEntryDataTable)(base.Tables["SaveMADImportEntry"]));
            if ((initTable == true)) {
                if ((this.tableSaveMADImportEntry != null)) {
                    this.tableSaveMADImportEntry.InitVars();
                }
            }
            this.tableF28310_SaveHeaderTemplateDataTable = ((F28310_SaveHeaderTemplateDataTableDataTable)(base.Tables["F28310_SaveHeaderTemplateDataTable"]));
            if ((initTable == true)) {
                if ((this.tableF28310_SaveHeaderTemplateDataTable != null)) {
                    this.tableF28310_SaveHeaderTemplateDataTable.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "F28310MADImport";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/F28310MADImport.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableListDistrictType = new ListDistrictTypeDataTable();
            base.Tables.Add(this.tableListDistrictType);
            this.tableGetMADImportHeaderDetails = new GetMADImportHeaderDetailsDataTable();
            base.Tables.Add(this.tableGetMADImportHeaderDetails);
            this.tableGetMADImportDetails = new GetMADImportDetailsDataTable();
            base.Tables.Add(this.tableGetMADImportDetails);
            this.tableSaveMADImportEntryError = new SaveMADImportEntryErrorDataTable();
            base.Tables.Add(this.tableSaveMADImportEntryError);
            this.tableSaveMADImportEntry = new SaveMADImportEntryDataTable();
            base.Tables.Add(this.tableSaveMADImportEntry);
            this.tableF28310_SaveHeaderTemplateDataTable = new F28310_SaveHeaderTemplateDataTableDataTable();
            base.Tables.Add(this.tableF28310_SaveHeaderTemplateDataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeListDistrictType() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeGetMADImportHeaderDetails() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeGetMADImportDetails() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSaveMADImportEntryError() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSaveMADImportEntry() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeF28310_SaveHeaderTemplateDataTable() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            F28310MADImport ds = new F28310MADImport();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void ListDistrictTypeRowChangeEventHandler(object sender, ListDistrictTypeRowChangeEvent e);
        
        public delegate void GetMADImportHeaderDetailsRowChangeEventHandler(object sender, GetMADImportHeaderDetailsRowChangeEvent e);
        
        public delegate void GetMADImportDetailsRowChangeEventHandler(object sender, GetMADImportDetailsRowChangeEvent e);
        
        public delegate void SaveMADImportEntryErrorRowChangeEventHandler(object sender, SaveMADImportEntryErrorRowChangeEvent e);
        
        public delegate void SaveMADImportEntryRowChangeEventHandler(object sender, SaveMADImportEntryRowChangeEvent e);
        
        public delegate void F28310_SaveHeaderTemplateDataTableRowChangeEventHandler(object sender, F28310_SaveHeaderTemplateDataTableRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ListDistrictTypeDataTable : global::System.Data.TypedTableBase<ListDistrictTypeRow> {
            
            private global::System.Data.DataColumn columnMADTypeID;
            
            private global::System.Data.DataColumn columnMADType;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListDistrictTypeDataTable() {
                this.TableName = "ListDistrictType";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListDistrictTypeDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ListDistrictTypeDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MADTypeIDColumn {
                get {
                    return this.columnMADTypeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MADTypeColumn {
                get {
                    return this.columnMADType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListDistrictTypeRow this[int index] {
                get {
                    return ((ListDistrictTypeRow)(this.Rows[index]));
                }
            }
            
            public event ListDistrictTypeRowChangeEventHandler ListDistrictTypeRowChanging;
            
            public event ListDistrictTypeRowChangeEventHandler ListDistrictTypeRowChanged;
            
            public event ListDistrictTypeRowChangeEventHandler ListDistrictTypeRowDeleting;
            
            public event ListDistrictTypeRowChangeEventHandler ListDistrictTypeRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddListDistrictTypeRow(ListDistrictTypeRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListDistrictTypeRow AddListDistrictTypeRow(byte MADTypeID, string MADType) {
                ListDistrictTypeRow rowListDistrictTypeRow = ((ListDistrictTypeRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        MADTypeID,
                        MADType};
                rowListDistrictTypeRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowListDistrictTypeRow);
                return rowListDistrictTypeRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListDistrictTypeRow FindByMADTypeID(byte MADTypeID) {
                return ((ListDistrictTypeRow)(this.Rows.Find(new object[] {
                            MADTypeID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ListDistrictTypeDataTable cln = ((ListDistrictTypeDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ListDistrictTypeDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnMADTypeID = base.Columns["MADTypeID"];
                this.columnMADType = base.Columns["MADType"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnMADTypeID = new global::System.Data.DataColumn("MADTypeID", typeof(byte), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMADTypeID);
                this.columnMADType = new global::System.Data.DataColumn("MADType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMADType);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnMADTypeID}, true));
                this.columnMADTypeID.AllowDBNull = false;
                this.columnMADTypeID.Unique = true;
                this.columnMADTypeID.Caption = "TypeID";
                this.columnMADType.AllowDBNull = false;
                this.columnMADType.Caption = "TypeName";
                this.columnMADType.MaxLength = 30;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListDistrictTypeRow NewListDistrictTypeRow() {
                return ((ListDistrictTypeRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ListDistrictTypeRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ListDistrictTypeRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ListDistrictTypeRowChanged != null)) {
                    this.ListDistrictTypeRowChanged(this, new ListDistrictTypeRowChangeEvent(((ListDistrictTypeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ListDistrictTypeRowChanging != null)) {
                    this.ListDistrictTypeRowChanging(this, new ListDistrictTypeRowChangeEvent(((ListDistrictTypeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ListDistrictTypeRowDeleted != null)) {
                    this.ListDistrictTypeRowDeleted(this, new ListDistrictTypeRowChangeEvent(((ListDistrictTypeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ListDistrictTypeRowDeleting != null)) {
                    this.ListDistrictTypeRowDeleting(this, new ListDistrictTypeRowChangeEvent(((ListDistrictTypeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveListDistrictTypeRow(ListDistrictTypeRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F28310MADImport ds = new F28310MADImport();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ListDistrictTypeDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class GetMADImportHeaderDetailsDataTable : global::System.Data.TypedTableBase<GetMADImportHeaderDetailsRow> {
            
            private global::System.Data.DataColumn columnImportID;
            
            private global::System.Data.DataColumn columnTemplateID;
            
            private global::System.Data.DataColumn columnTemplateName;
            
            private global::System.Data.DataColumn columnTypeName;
            
            private global::System.Data.DataColumn columnFilePath;
            
            private global::System.Data.DataColumn columnIsImportEnabled;
            
            private global::System.Data.DataColumn columnImportStatus;
            
            private global::System.Data.DataColumn columnImportedEntries;
            
            private global::System.Data.DataColumn columnIsCheckForErrors;
            
            private global::System.Data.DataColumn columnCheckErrorStatus;
            
            private global::System.Data.DataColumn columnEntriesInError;
            
            private global::System.Data.DataColumn columnIsRecordsCreated;
            
            private global::System.Data.DataColumn columnRecordsCreateStatus;
            
            private global::System.Data.DataColumn columnMADTypeID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetMADImportHeaderDetailsDataTable() {
                this.TableName = "GetMADImportHeaderDetails";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetMADImportHeaderDetailsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected GetMADImportHeaderDetailsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ImportIDColumn {
                get {
                    return this.columnImportID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TemplateIDColumn {
                get {
                    return this.columnTemplateID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TemplateNameColumn {
                get {
                    return this.columnTemplateName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TypeNameColumn {
                get {
                    return this.columnTypeName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FilePathColumn {
                get {
                    return this.columnFilePath;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsImportEnabledColumn {
                get {
                    return this.columnIsImportEnabled;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ImportStatusColumn {
                get {
                    return this.columnImportStatus;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ImportedEntriesColumn {
                get {
                    return this.columnImportedEntries;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsCheckForErrorsColumn {
                get {
                    return this.columnIsCheckForErrors;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CheckErrorStatusColumn {
                get {
                    return this.columnCheckErrorStatus;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EntriesInErrorColumn {
                get {
                    return this.columnEntriesInError;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsRecordsCreatedColumn {
                get {
                    return this.columnIsRecordsCreated;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RecordsCreateStatusColumn {
                get {
                    return this.columnRecordsCreateStatus;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MADTypeIDColumn {
                get {
                    return this.columnMADTypeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetMADImportHeaderDetailsRow this[int index] {
                get {
                    return ((GetMADImportHeaderDetailsRow)(this.Rows[index]));
                }
            }
            
            public event GetMADImportHeaderDetailsRowChangeEventHandler GetMADImportHeaderDetailsRowChanging;
            
            public event GetMADImportHeaderDetailsRowChangeEventHandler GetMADImportHeaderDetailsRowChanged;
            
            public event GetMADImportHeaderDetailsRowChangeEventHandler GetMADImportHeaderDetailsRowDeleting;
            
            public event GetMADImportHeaderDetailsRowChangeEventHandler GetMADImportHeaderDetailsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddGetMADImportHeaderDetailsRow(GetMADImportHeaderDetailsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetMADImportHeaderDetailsRow AddGetMADImportHeaderDetailsRow(int ImportID, int TemplateID, string TemplateName, string TypeName, string FilePath, string IsImportEnabled, string ImportStatus, int ImportedEntries, string IsCheckForErrors, string CheckErrorStatus, int EntriesInError, string IsRecordsCreated, string RecordsCreateStatus, string MADTypeID) {
                GetMADImportHeaderDetailsRow rowGetMADImportHeaderDetailsRow = ((GetMADImportHeaderDetailsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ImportID,
                        TemplateID,
                        TemplateName,
                        TypeName,
                        FilePath,
                        IsImportEnabled,
                        ImportStatus,
                        ImportedEntries,
                        IsCheckForErrors,
                        CheckErrorStatus,
                        EntriesInError,
                        IsRecordsCreated,
                        RecordsCreateStatus,
                        MADTypeID};
                rowGetMADImportHeaderDetailsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowGetMADImportHeaderDetailsRow);
                return rowGetMADImportHeaderDetailsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                GetMADImportHeaderDetailsDataTable cln = ((GetMADImportHeaderDetailsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new GetMADImportHeaderDetailsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnImportID = base.Columns["ImportID"];
                this.columnTemplateID = base.Columns["TemplateID"];
                this.columnTemplateName = base.Columns["TemplateName"];
                this.columnTypeName = base.Columns["TypeName"];
                this.columnFilePath = base.Columns["FilePath"];
                this.columnIsImportEnabled = base.Columns["IsImportEnabled"];
                this.columnImportStatus = base.Columns["ImportStatus"];
                this.columnImportedEntries = base.Columns["ImportedEntries"];
                this.columnIsCheckForErrors = base.Columns["IsCheckForErrors"];
                this.columnCheckErrorStatus = base.Columns["CheckErrorStatus"];
                this.columnEntriesInError = base.Columns["EntriesInError"];
                this.columnIsRecordsCreated = base.Columns["IsRecordsCreated"];
                this.columnRecordsCreateStatus = base.Columns["RecordsCreateStatus"];
                this.columnMADTypeID = base.Columns["MADTypeID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnImportID = new global::System.Data.DataColumn("ImportID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnImportID);
                this.columnTemplateID = new global::System.Data.DataColumn("TemplateID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTemplateID);
                this.columnTemplateName = new global::System.Data.DataColumn("TemplateName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTemplateName);
                this.columnTypeName = new global::System.Data.DataColumn("TypeName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTypeName);
                this.columnFilePath = new global::System.Data.DataColumn("FilePath", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFilePath);
                this.columnIsImportEnabled = new global::System.Data.DataColumn("IsImportEnabled", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsImportEnabled);
                this.columnImportStatus = new global::System.Data.DataColumn("ImportStatus", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnImportStatus);
                this.columnImportedEntries = new global::System.Data.DataColumn("ImportedEntries", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnImportedEntries);
                this.columnIsCheckForErrors = new global::System.Data.DataColumn("IsCheckForErrors", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsCheckForErrors);
                this.columnCheckErrorStatus = new global::System.Data.DataColumn("CheckErrorStatus", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCheckErrorStatus);
                this.columnEntriesInError = new global::System.Data.DataColumn("EntriesInError", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEntriesInError);
                this.columnIsRecordsCreated = new global::System.Data.DataColumn("IsRecordsCreated", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsRecordsCreated);
                this.columnRecordsCreateStatus = new global::System.Data.DataColumn("RecordsCreateStatus", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRecordsCreateStatus);
                this.columnMADTypeID = new global::System.Data.DataColumn("MADTypeID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMADTypeID);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetMADImportHeaderDetailsRow NewGetMADImportHeaderDetailsRow() {
                return ((GetMADImportHeaderDetailsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new GetMADImportHeaderDetailsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(GetMADImportHeaderDetailsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GetMADImportHeaderDetailsRowChanged != null)) {
                    this.GetMADImportHeaderDetailsRowChanged(this, new GetMADImportHeaderDetailsRowChangeEvent(((GetMADImportHeaderDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GetMADImportHeaderDetailsRowChanging != null)) {
                    this.GetMADImportHeaderDetailsRowChanging(this, new GetMADImportHeaderDetailsRowChangeEvent(((GetMADImportHeaderDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GetMADImportHeaderDetailsRowDeleted != null)) {
                    this.GetMADImportHeaderDetailsRowDeleted(this, new GetMADImportHeaderDetailsRowChangeEvent(((GetMADImportHeaderDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GetMADImportHeaderDetailsRowDeleting != null)) {
                    this.GetMADImportHeaderDetailsRowDeleting(this, new GetMADImportHeaderDetailsRowChangeEvent(((GetMADImportHeaderDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveGetMADImportHeaderDetailsRow(GetMADImportHeaderDetailsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F28310MADImport ds = new F28310MADImport();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "GetMADImportHeaderDetailsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class GetMADImportDetailsDataTable : global::System.Data.TypedTableBase<GetMADImportDetailsRow> {
            
            private global::System.Data.DataColumn columnImportID;
            
            private global::System.Data.DataColumn columnParcelNumber;
            
            private global::System.Data.DataColumn columnRollYear;
            
            private global::System.Data.DataColumn columnDistrictNumber;
            
            private global::System.Data.DataColumn columnErrorStatus;
            
            private global::System.Data.DataColumn columnLine;
            
            private global::System.Data.DataColumn columnEntryID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetMADImportDetailsDataTable() {
                this.TableName = "GetMADImportDetails";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetMADImportDetailsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected GetMADImportDetailsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ImportIDColumn {
                get {
                    return this.columnImportID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ParcelNumberColumn {
                get {
                    return this.columnParcelNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RollYearColumn {
                get {
                    return this.columnRollYear;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DistrictNumberColumn {
                get {
                    return this.columnDistrictNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ErrorStatusColumn {
                get {
                    return this.columnErrorStatus;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LineColumn {
                get {
                    return this.columnLine;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EntryIDColumn {
                get {
                    return this.columnEntryID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetMADImportDetailsRow this[int index] {
                get {
                    return ((GetMADImportDetailsRow)(this.Rows[index]));
                }
            }
            
            public event GetMADImportDetailsRowChangeEventHandler GetMADImportDetailsRowChanging;
            
            public event GetMADImportDetailsRowChangeEventHandler GetMADImportDetailsRowChanged;
            
            public event GetMADImportDetailsRowChangeEventHandler GetMADImportDetailsRowDeleting;
            
            public event GetMADImportDetailsRowChangeEventHandler GetMADImportDetailsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddGetMADImportDetailsRow(GetMADImportDetailsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetMADImportDetailsRow AddGetMADImportDetailsRow(int ImportID, string ParcelNumber, int RollYear, string DistrictNumber, string ErrorStatus, int Line, int EntryID) {
                GetMADImportDetailsRow rowGetMADImportDetailsRow = ((GetMADImportDetailsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ImportID,
                        ParcelNumber,
                        RollYear,
                        DistrictNumber,
                        ErrorStatus,
                        Line,
                        EntryID};
                rowGetMADImportDetailsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowGetMADImportDetailsRow);
                return rowGetMADImportDetailsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                GetMADImportDetailsDataTable cln = ((GetMADImportDetailsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new GetMADImportDetailsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnImportID = base.Columns["ImportID"];
                this.columnParcelNumber = base.Columns["ParcelNumber"];
                this.columnRollYear = base.Columns["RollYear"];
                this.columnDistrictNumber = base.Columns["DistrictNumber"];
                this.columnErrorStatus = base.Columns["ErrorStatus"];
                this.columnLine = base.Columns["Line"];
                this.columnEntryID = base.Columns["EntryID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnImportID = new global::System.Data.DataColumn("ImportID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnImportID);
                this.columnParcelNumber = new global::System.Data.DataColumn("ParcelNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnParcelNumber);
                this.columnRollYear = new global::System.Data.DataColumn("RollYear", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRollYear);
                this.columnDistrictNumber = new global::System.Data.DataColumn("DistrictNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDistrictNumber);
                this.columnErrorStatus = new global::System.Data.DataColumn("ErrorStatus", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnErrorStatus);
                this.columnLine = new global::System.Data.DataColumn("Line", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLine);
                this.columnEntryID = new global::System.Data.DataColumn("EntryID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEntryID);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetMADImportDetailsRow NewGetMADImportDetailsRow() {
                return ((GetMADImportDetailsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new GetMADImportDetailsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(GetMADImportDetailsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GetMADImportDetailsRowChanged != null)) {
                    this.GetMADImportDetailsRowChanged(this, new GetMADImportDetailsRowChangeEvent(((GetMADImportDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GetMADImportDetailsRowChanging != null)) {
                    this.GetMADImportDetailsRowChanging(this, new GetMADImportDetailsRowChangeEvent(((GetMADImportDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GetMADImportDetailsRowDeleted != null)) {
                    this.GetMADImportDetailsRowDeleted(this, new GetMADImportDetailsRowChangeEvent(((GetMADImportDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GetMADImportDetailsRowDeleting != null)) {
                    this.GetMADImportDetailsRowDeleting(this, new GetMADImportDetailsRowChangeEvent(((GetMADImportDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveGetMADImportDetailsRow(GetMADImportDetailsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F28310MADImport ds = new F28310MADImport();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "GetMADImportDetailsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SaveMADImportEntryErrorDataTable : global::System.Data.TypedTableBase<SaveMADImportEntryErrorRow> {
            
            private global::System.Data.DataColumn columnErrorMsg;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SaveMADImportEntryErrorDataTable() {
                this.TableName = "SaveMADImportEntryError";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SaveMADImportEntryErrorDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SaveMADImportEntryErrorDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ErrorMsgColumn {
                get {
                    return this.columnErrorMsg;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SaveMADImportEntryErrorRow this[int index] {
                get {
                    return ((SaveMADImportEntryErrorRow)(this.Rows[index]));
                }
            }
            
            public event SaveMADImportEntryErrorRowChangeEventHandler SaveMADImportEntryErrorRowChanging;
            
            public event SaveMADImportEntryErrorRowChangeEventHandler SaveMADImportEntryErrorRowChanged;
            
            public event SaveMADImportEntryErrorRowChangeEventHandler SaveMADImportEntryErrorRowDeleting;
            
            public event SaveMADImportEntryErrorRowChangeEventHandler SaveMADImportEntryErrorRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSaveMADImportEntryErrorRow(SaveMADImportEntryErrorRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SaveMADImportEntryErrorRow AddSaveMADImportEntryErrorRow(string ErrorMsg) {
                SaveMADImportEntryErrorRow rowSaveMADImportEntryErrorRow = ((SaveMADImportEntryErrorRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ErrorMsg};
                rowSaveMADImportEntryErrorRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowSaveMADImportEntryErrorRow);
                return rowSaveMADImportEntryErrorRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                SaveMADImportEntryErrorDataTable cln = ((SaveMADImportEntryErrorDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new SaveMADImportEntryErrorDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnErrorMsg = base.Columns["ErrorMsg"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnErrorMsg = new global::System.Data.DataColumn("ErrorMsg", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnErrorMsg);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SaveMADImportEntryErrorRow NewSaveMADImportEntryErrorRow() {
                return ((SaveMADImportEntryErrorRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new SaveMADImportEntryErrorRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(SaveMADImportEntryErrorRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SaveMADImportEntryErrorRowChanged != null)) {
                    this.SaveMADImportEntryErrorRowChanged(this, new SaveMADImportEntryErrorRowChangeEvent(((SaveMADImportEntryErrorRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SaveMADImportEntryErrorRowChanging != null)) {
                    this.SaveMADImportEntryErrorRowChanging(this, new SaveMADImportEntryErrorRowChangeEvent(((SaveMADImportEntryErrorRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SaveMADImportEntryErrorRowDeleted != null)) {
                    this.SaveMADImportEntryErrorRowDeleted(this, new SaveMADImportEntryErrorRowChangeEvent(((SaveMADImportEntryErrorRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SaveMADImportEntryErrorRowDeleting != null)) {
                    this.SaveMADImportEntryErrorRowDeleting(this, new SaveMADImportEntryErrorRowChangeEvent(((SaveMADImportEntryErrorRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSaveMADImportEntryErrorRow(SaveMADImportEntryErrorRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F28310MADImport ds = new F28310MADImport();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SaveMADImportEntryErrorDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SaveMADImportEntryDataTable : global::System.Data.TypedTableBase<SaveMADImportEntryRow> {
            
            private global::System.Data.DataColumn columnImportRunBy;
            
            private global::System.Data.DataColumn columnImportRunDt;
            
            private global::System.Data.DataColumn columnImportedEntries;
            
            private global::System.Data.DataColumn columnImportedEntriesTotal;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SaveMADImportEntryDataTable() {
                this.TableName = "SaveMADImportEntry";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SaveMADImportEntryDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SaveMADImportEntryDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ImportRunByColumn {
                get {
                    return this.columnImportRunBy;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ImportRunDtColumn {
                get {
                    return this.columnImportRunDt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ImportedEntriesColumn {
                get {
                    return this.columnImportedEntries;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ImportedEntriesTotalColumn {
                get {
                    return this.columnImportedEntriesTotal;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SaveMADImportEntryRow this[int index] {
                get {
                    return ((SaveMADImportEntryRow)(this.Rows[index]));
                }
            }
            
            public event SaveMADImportEntryRowChangeEventHandler SaveMADImportEntryRowChanging;
            
            public event SaveMADImportEntryRowChangeEventHandler SaveMADImportEntryRowChanged;
            
            public event SaveMADImportEntryRowChangeEventHandler SaveMADImportEntryRowDeleting;
            
            public event SaveMADImportEntryRowChangeEventHandler SaveMADImportEntryRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSaveMADImportEntryRow(SaveMADImportEntryRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SaveMADImportEntryRow AddSaveMADImportEntryRow(string ImportRunBy, System.DateTime ImportRunDt, int ImportedEntries, decimal ImportedEntriesTotal) {
                SaveMADImportEntryRow rowSaveMADImportEntryRow = ((SaveMADImportEntryRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ImportRunBy,
                        ImportRunDt,
                        ImportedEntries,
                        ImportedEntriesTotal};
                rowSaveMADImportEntryRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowSaveMADImportEntryRow);
                return rowSaveMADImportEntryRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                SaveMADImportEntryDataTable cln = ((SaveMADImportEntryDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new SaveMADImportEntryDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnImportRunBy = base.Columns["ImportRunBy"];
                this.columnImportRunDt = base.Columns["ImportRunDt"];
                this.columnImportedEntries = base.Columns["ImportedEntries"];
                this.columnImportedEntriesTotal = base.Columns["ImportedEntriesTotal"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnImportRunBy = new global::System.Data.DataColumn("ImportRunBy", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnImportRunBy);
                this.columnImportRunDt = new global::System.Data.DataColumn("ImportRunDt", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnImportRunDt);
                this.columnImportedEntries = new global::System.Data.DataColumn("ImportedEntries", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnImportedEntries);
                this.columnImportedEntriesTotal = new global::System.Data.DataColumn("ImportedEntriesTotal", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnImportedEntriesTotal);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SaveMADImportEntryRow NewSaveMADImportEntryRow() {
                return ((SaveMADImportEntryRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new SaveMADImportEntryRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(SaveMADImportEntryRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SaveMADImportEntryRowChanged != null)) {
                    this.SaveMADImportEntryRowChanged(this, new SaveMADImportEntryRowChangeEvent(((SaveMADImportEntryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SaveMADImportEntryRowChanging != null)) {
                    this.SaveMADImportEntryRowChanging(this, new SaveMADImportEntryRowChangeEvent(((SaveMADImportEntryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SaveMADImportEntryRowDeleted != null)) {
                    this.SaveMADImportEntryRowDeleted(this, new SaveMADImportEntryRowChangeEvent(((SaveMADImportEntryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SaveMADImportEntryRowDeleting != null)) {
                    this.SaveMADImportEntryRowDeleting(this, new SaveMADImportEntryRowChangeEvent(((SaveMADImportEntryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSaveMADImportEntryRow(SaveMADImportEntryRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F28310MADImport ds = new F28310MADImport();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SaveMADImportEntryDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class F28310_SaveHeaderTemplateDataTableDataTable : global::System.Data.TypedTableBase<F28310_SaveHeaderTemplateDataTableRow> {
            
            private global::System.Data.DataColumn columnTemplateID;
            
            private global::System.Data.DataColumn columnFilePath;
            
            private global::System.Data.DataColumn columnIsImportEnabled;
            
            private global::System.Data.DataColumn columnIsCheckForErrors;
            
            private global::System.Data.DataColumn columnIsRecordsCreated;
            
            private global::System.Data.DataColumn columnMADTypeID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public F28310_SaveHeaderTemplateDataTableDataTable() {
                this.TableName = "F28310_SaveHeaderTemplateDataTable";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal F28310_SaveHeaderTemplateDataTableDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected F28310_SaveHeaderTemplateDataTableDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TemplateIDColumn {
                get {
                    return this.columnTemplateID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FilePathColumn {
                get {
                    return this.columnFilePath;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsImportEnabledColumn {
                get {
                    return this.columnIsImportEnabled;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsCheckForErrorsColumn {
                get {
                    return this.columnIsCheckForErrors;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsRecordsCreatedColumn {
                get {
                    return this.columnIsRecordsCreated;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MADTypeIDColumn {
                get {
                    return this.columnMADTypeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public F28310_SaveHeaderTemplateDataTableRow this[int index] {
                get {
                    return ((F28310_SaveHeaderTemplateDataTableRow)(this.Rows[index]));
                }
            }
            
            public event F28310_SaveHeaderTemplateDataTableRowChangeEventHandler F28310_SaveHeaderTemplateDataTableRowChanging;
            
            public event F28310_SaveHeaderTemplateDataTableRowChangeEventHandler F28310_SaveHeaderTemplateDataTableRowChanged;
            
            public event F28310_SaveHeaderTemplateDataTableRowChangeEventHandler F28310_SaveHeaderTemplateDataTableRowDeleting;
            
            public event F28310_SaveHeaderTemplateDataTableRowChangeEventHandler F28310_SaveHeaderTemplateDataTableRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddF28310_SaveHeaderTemplateDataTableRow(F28310_SaveHeaderTemplateDataTableRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public F28310_SaveHeaderTemplateDataTableRow AddF28310_SaveHeaderTemplateDataTableRow(int TemplateID, string FilePath, byte IsImportEnabled, byte IsCheckForErrors, byte IsRecordsCreated, int MADTypeID) {
                F28310_SaveHeaderTemplateDataTableRow rowF28310_SaveHeaderTemplateDataTableRow = ((F28310_SaveHeaderTemplateDataTableRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        TemplateID,
                        FilePath,
                        IsImportEnabled,
                        IsCheckForErrors,
                        IsRecordsCreated,
                        MADTypeID};
                rowF28310_SaveHeaderTemplateDataTableRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowF28310_SaveHeaderTemplateDataTableRow);
                return rowF28310_SaveHeaderTemplateDataTableRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                F28310_SaveHeaderTemplateDataTableDataTable cln = ((F28310_SaveHeaderTemplateDataTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new F28310_SaveHeaderTemplateDataTableDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnTemplateID = base.Columns["TemplateID"];
                this.columnFilePath = base.Columns["FilePath"];
                this.columnIsImportEnabled = base.Columns["IsImportEnabled"];
                this.columnIsCheckForErrors = base.Columns["IsCheckForErrors"];
                this.columnIsRecordsCreated = base.Columns["IsRecordsCreated"];
                this.columnMADTypeID = base.Columns["MADTypeID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnTemplateID = new global::System.Data.DataColumn("TemplateID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTemplateID);
                this.columnFilePath = new global::System.Data.DataColumn("FilePath", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFilePath);
                this.columnIsImportEnabled = new global::System.Data.DataColumn("IsImportEnabled", typeof(byte), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsImportEnabled);
                this.columnIsCheckForErrors = new global::System.Data.DataColumn("IsCheckForErrors", typeof(byte), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsCheckForErrors);
                this.columnIsRecordsCreated = new global::System.Data.DataColumn("IsRecordsCreated", typeof(byte), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsRecordsCreated);
                this.columnMADTypeID = new global::System.Data.DataColumn("MADTypeID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMADTypeID);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public F28310_SaveHeaderTemplateDataTableRow NewF28310_SaveHeaderTemplateDataTableRow() {
                return ((F28310_SaveHeaderTemplateDataTableRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new F28310_SaveHeaderTemplateDataTableRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(F28310_SaveHeaderTemplateDataTableRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.F28310_SaveHeaderTemplateDataTableRowChanged != null)) {
                    this.F28310_SaveHeaderTemplateDataTableRowChanged(this, new F28310_SaveHeaderTemplateDataTableRowChangeEvent(((F28310_SaveHeaderTemplateDataTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.F28310_SaveHeaderTemplateDataTableRowChanging != null)) {
                    this.F28310_SaveHeaderTemplateDataTableRowChanging(this, new F28310_SaveHeaderTemplateDataTableRowChangeEvent(((F28310_SaveHeaderTemplateDataTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.F28310_SaveHeaderTemplateDataTableRowDeleted != null)) {
                    this.F28310_SaveHeaderTemplateDataTableRowDeleted(this, new F28310_SaveHeaderTemplateDataTableRowChangeEvent(((F28310_SaveHeaderTemplateDataTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.F28310_SaveHeaderTemplateDataTableRowDeleting != null)) {
                    this.F28310_SaveHeaderTemplateDataTableRowDeleting(this, new F28310_SaveHeaderTemplateDataTableRowChangeEvent(((F28310_SaveHeaderTemplateDataTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveF28310_SaveHeaderTemplateDataTableRow(F28310_SaveHeaderTemplateDataTableRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F28310MADImport ds = new F28310MADImport();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "F28310_SaveHeaderTemplateDataTableDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ListDistrictTypeRow : global::System.Data.DataRow {
            
            private ListDistrictTypeDataTable tableListDistrictType;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListDistrictTypeRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableListDistrictType = ((ListDistrictTypeDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte MADTypeID {
                get {
                    return ((byte)(this[this.tableListDistrictType.MADTypeIDColumn]));
                }
                set {
                    this[this.tableListDistrictType.MADTypeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MADType {
                get {
                    return ((string)(this[this.tableListDistrictType.MADTypeColumn]));
                }
                set {
                    this[this.tableListDistrictType.MADTypeColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class GetMADImportHeaderDetailsRow : global::System.Data.DataRow {
            
            private GetMADImportHeaderDetailsDataTable tableGetMADImportHeaderDetails;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetMADImportHeaderDetailsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableGetMADImportHeaderDetails = ((GetMADImportHeaderDetailsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ImportID {
                get {
                    try {
                        return ((int)(this[this.tableGetMADImportHeaderDetails.ImportIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ImportID\' in table \'GetMADImportHeaderDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetMADImportHeaderDetails.ImportIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TemplateID {
                get {
                    try {
                        return ((int)(this[this.tableGetMADImportHeaderDetails.TemplateIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TemplateID\' in table \'GetMADImportHeaderDetails\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableGetMADImportHeaderDetails.TemplateIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TemplateName {
                get {
                    try {
                        return ((string)(this[this.tableGetMADImportHeaderDetails.TemplateNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TemplateName\' in table \'GetMADImportHeaderDetails\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableGetMADImportHeaderDetails.TemplateNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TypeName {
                get {
                    try {
                        return ((string)(this[this.tableGetMADImportHeaderDetails.TypeNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TypeName\' in table \'GetMADImportHeaderDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetMADImportHeaderDetails.TypeNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FilePath {
                get {
                    try {
                        return ((string)(this[this.tableGetMADImportHeaderDetails.FilePathColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FilePath\' in table \'GetMADImportHeaderDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetMADImportHeaderDetails.FilePathColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IsImportEnabled {
                get {
                    try {
                        return ((string)(this[this.tableGetMADImportHeaderDetails.IsImportEnabledColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsImportEnabled\' in table \'GetMADImportHeaderDetails\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tableGetMADImportHeaderDetails.IsImportEnabledColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ImportStatus {
                get {
                    try {
                        return ((string)(this[this.tableGetMADImportHeaderDetails.ImportStatusColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ImportStatus\' in table \'GetMADImportHeaderDetails\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableGetMADImportHeaderDetails.ImportStatusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ImportedEntries {
                get {
                    try {
                        return ((int)(this[this.tableGetMADImportHeaderDetails.ImportedEntriesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ImportedEntries\' in table \'GetMADImportHeaderDetails\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tableGetMADImportHeaderDetails.ImportedEntriesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IsCheckForErrors {
                get {
                    try {
                        return ((string)(this[this.tableGetMADImportHeaderDetails.IsCheckForErrorsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsCheckForErrors\' in table \'GetMADImportHeaderDetails\' is D" +
                                "BNull.", e);
                    }
                }
                set {
                    this[this.tableGetMADImportHeaderDetails.IsCheckForErrorsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CheckErrorStatus {
                get {
                    try {
                        return ((string)(this[this.tableGetMADImportHeaderDetails.CheckErrorStatusColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CheckErrorStatus\' in table \'GetMADImportHeaderDetails\' is D" +
                                "BNull.", e);
                    }
                }
                set {
                    this[this.tableGetMADImportHeaderDetails.CheckErrorStatusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int EntriesInError {
                get {
                    try {
                        return ((int)(this[this.tableGetMADImportHeaderDetails.EntriesInErrorColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EntriesInError\' in table \'GetMADImportHeaderDetails\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableGetMADImportHeaderDetails.EntriesInErrorColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IsRecordsCreated {
                get {
                    try {
                        return ((string)(this[this.tableGetMADImportHeaderDetails.IsRecordsCreatedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsRecordsCreated\' in table \'GetMADImportHeaderDetails\' is D" +
                                "BNull.", e);
                    }
                }
                set {
                    this[this.tableGetMADImportHeaderDetails.IsRecordsCreatedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RecordsCreateStatus {
                get {
                    try {
                        return ((string)(this[this.tableGetMADImportHeaderDetails.RecordsCreateStatusColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RecordsCreateStatus\' in table \'GetMADImportHeaderDetails\' i" +
                                "s DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetMADImportHeaderDetails.RecordsCreateStatusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MADTypeID {
                get {
                    try {
                        return ((string)(this[this.tableGetMADImportHeaderDetails.MADTypeIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MADTypeID\' in table \'GetMADImportHeaderDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetMADImportHeaderDetails.MADTypeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsImportIDNull() {
                return this.IsNull(this.tableGetMADImportHeaderDetails.ImportIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetImportIDNull() {
                this[this.tableGetMADImportHeaderDetails.ImportIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTemplateIDNull() {
                return this.IsNull(this.tableGetMADImportHeaderDetails.TemplateIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTemplateIDNull() {
                this[this.tableGetMADImportHeaderDetails.TemplateIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTemplateNameNull() {
                return this.IsNull(this.tableGetMADImportHeaderDetails.TemplateNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTemplateNameNull() {
                this[this.tableGetMADImportHeaderDetails.TemplateNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTypeNameNull() {
                return this.IsNull(this.tableGetMADImportHeaderDetails.TypeNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTypeNameNull() {
                this[this.tableGetMADImportHeaderDetails.TypeNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFilePathNull() {
                return this.IsNull(this.tableGetMADImportHeaderDetails.FilePathColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFilePathNull() {
                this[this.tableGetMADImportHeaderDetails.FilePathColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsImportEnabledNull() {
                return this.IsNull(this.tableGetMADImportHeaderDetails.IsImportEnabledColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsImportEnabledNull() {
                this[this.tableGetMADImportHeaderDetails.IsImportEnabledColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsImportStatusNull() {
                return this.IsNull(this.tableGetMADImportHeaderDetails.ImportStatusColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetImportStatusNull() {
                this[this.tableGetMADImportHeaderDetails.ImportStatusColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsImportedEntriesNull() {
                return this.IsNull(this.tableGetMADImportHeaderDetails.ImportedEntriesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetImportedEntriesNull() {
                this[this.tableGetMADImportHeaderDetails.ImportedEntriesColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsCheckForErrorsNull() {
                return this.IsNull(this.tableGetMADImportHeaderDetails.IsCheckForErrorsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsCheckForErrorsNull() {
                this[this.tableGetMADImportHeaderDetails.IsCheckForErrorsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCheckErrorStatusNull() {
                return this.IsNull(this.tableGetMADImportHeaderDetails.CheckErrorStatusColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCheckErrorStatusNull() {
                this[this.tableGetMADImportHeaderDetails.CheckErrorStatusColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEntriesInErrorNull() {
                return this.IsNull(this.tableGetMADImportHeaderDetails.EntriesInErrorColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEntriesInErrorNull() {
                this[this.tableGetMADImportHeaderDetails.EntriesInErrorColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsRecordsCreatedNull() {
                return this.IsNull(this.tableGetMADImportHeaderDetails.IsRecordsCreatedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsRecordsCreatedNull() {
                this[this.tableGetMADImportHeaderDetails.IsRecordsCreatedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRecordsCreateStatusNull() {
                return this.IsNull(this.tableGetMADImportHeaderDetails.RecordsCreateStatusColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRecordsCreateStatusNull() {
                this[this.tableGetMADImportHeaderDetails.RecordsCreateStatusColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMADTypeIDNull() {
                return this.IsNull(this.tableGetMADImportHeaderDetails.MADTypeIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMADTypeIDNull() {
                this[this.tableGetMADImportHeaderDetails.MADTypeIDColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class GetMADImportDetailsRow : global::System.Data.DataRow {
            
            private GetMADImportDetailsDataTable tableGetMADImportDetails;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetMADImportDetailsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableGetMADImportDetails = ((GetMADImportDetailsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ImportID {
                get {
                    try {
                        return ((int)(this[this.tableGetMADImportDetails.ImportIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ImportID\' in table \'GetMADImportDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetMADImportDetails.ImportIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ParcelNumber {
                get {
                    try {
                        return ((string)(this[this.tableGetMADImportDetails.ParcelNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ParcelNumber\' in table \'GetMADImportDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetMADImportDetails.ParcelNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RollYear {
                get {
                    try {
                        return ((int)(this[this.tableGetMADImportDetails.RollYearColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RollYear\' in table \'GetMADImportDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetMADImportDetails.RollYearColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DistrictNumber {
                get {
                    try {
                        return ((string)(this[this.tableGetMADImportDetails.DistrictNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DistrictNumber\' in table \'GetMADImportDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetMADImportDetails.DistrictNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ErrorStatus {
                get {
                    try {
                        return ((string)(this[this.tableGetMADImportDetails.ErrorStatusColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ErrorStatus\' in table \'GetMADImportDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetMADImportDetails.ErrorStatusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Line {
                get {
                    try {
                        return ((int)(this[this.tableGetMADImportDetails.LineColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Line\' in table \'GetMADImportDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetMADImportDetails.LineColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int EntryID {
                get {
                    try {
                        return ((int)(this[this.tableGetMADImportDetails.EntryIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EntryID\' in table \'GetMADImportDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetMADImportDetails.EntryIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsImportIDNull() {
                return this.IsNull(this.tableGetMADImportDetails.ImportIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetImportIDNull() {
                this[this.tableGetMADImportDetails.ImportIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsParcelNumberNull() {
                return this.IsNull(this.tableGetMADImportDetails.ParcelNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetParcelNumberNull() {
                this[this.tableGetMADImportDetails.ParcelNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRollYearNull() {
                return this.IsNull(this.tableGetMADImportDetails.RollYearColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRollYearNull() {
                this[this.tableGetMADImportDetails.RollYearColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDistrictNumberNull() {
                return this.IsNull(this.tableGetMADImportDetails.DistrictNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDistrictNumberNull() {
                this[this.tableGetMADImportDetails.DistrictNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsErrorStatusNull() {
                return this.IsNull(this.tableGetMADImportDetails.ErrorStatusColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetErrorStatusNull() {
                this[this.tableGetMADImportDetails.ErrorStatusColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLineNull() {
                return this.IsNull(this.tableGetMADImportDetails.LineColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLineNull() {
                this[this.tableGetMADImportDetails.LineColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEntryIDNull() {
                return this.IsNull(this.tableGetMADImportDetails.EntryIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEntryIDNull() {
                this[this.tableGetMADImportDetails.EntryIDColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SaveMADImportEntryErrorRow : global::System.Data.DataRow {
            
            private SaveMADImportEntryErrorDataTable tableSaveMADImportEntryError;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SaveMADImportEntryErrorRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSaveMADImportEntryError = ((SaveMADImportEntryErrorDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ErrorMsg {
                get {
                    try {
                        return ((string)(this[this.tableSaveMADImportEntryError.ErrorMsgColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ErrorMsg\' in table \'SaveMADImportEntryError\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSaveMADImportEntryError.ErrorMsgColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsErrorMsgNull() {
                return this.IsNull(this.tableSaveMADImportEntryError.ErrorMsgColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetErrorMsgNull() {
                this[this.tableSaveMADImportEntryError.ErrorMsgColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SaveMADImportEntryRow : global::System.Data.DataRow {
            
            private SaveMADImportEntryDataTable tableSaveMADImportEntry;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SaveMADImportEntryRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSaveMADImportEntry = ((SaveMADImportEntryDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ImportRunBy {
                get {
                    try {
                        return ((string)(this[this.tableSaveMADImportEntry.ImportRunByColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ImportRunBy\' in table \'SaveMADImportEntry\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSaveMADImportEntry.ImportRunByColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime ImportRunDt {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableSaveMADImportEntry.ImportRunDtColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ImportRunDt\' in table \'SaveMADImportEntry\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSaveMADImportEntry.ImportRunDtColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ImportedEntries {
                get {
                    try {
                        return ((int)(this[this.tableSaveMADImportEntry.ImportedEntriesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ImportedEntries\' in table \'SaveMADImportEntry\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSaveMADImportEntry.ImportedEntriesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal ImportedEntriesTotal {
                get {
                    try {
                        return ((decimal)(this[this.tableSaveMADImportEntry.ImportedEntriesTotalColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ImportedEntriesTotal\' in table \'SaveMADImportEntry\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableSaveMADImportEntry.ImportedEntriesTotalColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsImportRunByNull() {
                return this.IsNull(this.tableSaveMADImportEntry.ImportRunByColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetImportRunByNull() {
                this[this.tableSaveMADImportEntry.ImportRunByColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsImportRunDtNull() {
                return this.IsNull(this.tableSaveMADImportEntry.ImportRunDtColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetImportRunDtNull() {
                this[this.tableSaveMADImportEntry.ImportRunDtColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsImportedEntriesNull() {
                return this.IsNull(this.tableSaveMADImportEntry.ImportedEntriesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetImportedEntriesNull() {
                this[this.tableSaveMADImportEntry.ImportedEntriesColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsImportedEntriesTotalNull() {
                return this.IsNull(this.tableSaveMADImportEntry.ImportedEntriesTotalColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetImportedEntriesTotalNull() {
                this[this.tableSaveMADImportEntry.ImportedEntriesTotalColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class F28310_SaveHeaderTemplateDataTableRow : global::System.Data.DataRow {
            
            private F28310_SaveHeaderTemplateDataTableDataTable tableF28310_SaveHeaderTemplateDataTable;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal F28310_SaveHeaderTemplateDataTableRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableF28310_SaveHeaderTemplateDataTable = ((F28310_SaveHeaderTemplateDataTableDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TemplateID {
                get {
                    try {
                        return ((int)(this[this.tableF28310_SaveHeaderTemplateDataTable.TemplateIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TemplateID\' in table \'F28310_SaveHeaderTemplateDataTable\' i" +
                                "s DBNull.", e);
                    }
                }
                set {
                    this[this.tableF28310_SaveHeaderTemplateDataTable.TemplateIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FilePath {
                get {
                    try {
                        return ((string)(this[this.tableF28310_SaveHeaderTemplateDataTable.FilePathColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FilePath\' in table \'F28310_SaveHeaderTemplateDataTable\' is " +
                                "DBNull.", e);
                    }
                }
                set {
                    this[this.tableF28310_SaveHeaderTemplateDataTable.FilePathColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte IsImportEnabled {
                get {
                    try {
                        return ((byte)(this[this.tableF28310_SaveHeaderTemplateDataTable.IsImportEnabledColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsImportEnabled\' in table \'F28310_SaveHeaderTemplateDataTab" +
                                "le\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableF28310_SaveHeaderTemplateDataTable.IsImportEnabledColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte IsCheckForErrors {
                get {
                    try {
                        return ((byte)(this[this.tableF28310_SaveHeaderTemplateDataTable.IsCheckForErrorsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsCheckForErrors\' in table \'F28310_SaveHeaderTemplateDataTa" +
                                "ble\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableF28310_SaveHeaderTemplateDataTable.IsCheckForErrorsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte IsRecordsCreated {
                get {
                    try {
                        return ((byte)(this[this.tableF28310_SaveHeaderTemplateDataTable.IsRecordsCreatedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsRecordsCreated\' in table \'F28310_SaveHeaderTemplateDataTa" +
                                "ble\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableF28310_SaveHeaderTemplateDataTable.IsRecordsCreatedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MADTypeID {
                get {
                    try {
                        return ((int)(this[this.tableF28310_SaveHeaderTemplateDataTable.MADTypeIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MADTypeID\' in table \'F28310_SaveHeaderTemplateDataTable\' is" +
                                " DBNull.", e);
                    }
                }
                set {
                    this[this.tableF28310_SaveHeaderTemplateDataTable.MADTypeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTemplateIDNull() {
                return this.IsNull(this.tableF28310_SaveHeaderTemplateDataTable.TemplateIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTemplateIDNull() {
                this[this.tableF28310_SaveHeaderTemplateDataTable.TemplateIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFilePathNull() {
                return this.IsNull(this.tableF28310_SaveHeaderTemplateDataTable.FilePathColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFilePathNull() {
                this[this.tableF28310_SaveHeaderTemplateDataTable.FilePathColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsImportEnabledNull() {
                return this.IsNull(this.tableF28310_SaveHeaderTemplateDataTable.IsImportEnabledColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsImportEnabledNull() {
                this[this.tableF28310_SaveHeaderTemplateDataTable.IsImportEnabledColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsCheckForErrorsNull() {
                return this.IsNull(this.tableF28310_SaveHeaderTemplateDataTable.IsCheckForErrorsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsCheckForErrorsNull() {
                this[this.tableF28310_SaveHeaderTemplateDataTable.IsCheckForErrorsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsRecordsCreatedNull() {
                return this.IsNull(this.tableF28310_SaveHeaderTemplateDataTable.IsRecordsCreatedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsRecordsCreatedNull() {
                this[this.tableF28310_SaveHeaderTemplateDataTable.IsRecordsCreatedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMADTypeIDNull() {
                return this.IsNull(this.tableF28310_SaveHeaderTemplateDataTable.MADTypeIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMADTypeIDNull() {
                this[this.tableF28310_SaveHeaderTemplateDataTable.MADTypeIDColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ListDistrictTypeRowChangeEvent : global::System.EventArgs {
            
            private ListDistrictTypeRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListDistrictTypeRowChangeEvent(ListDistrictTypeRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListDistrictTypeRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class GetMADImportHeaderDetailsRowChangeEvent : global::System.EventArgs {
            
            private GetMADImportHeaderDetailsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetMADImportHeaderDetailsRowChangeEvent(GetMADImportHeaderDetailsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetMADImportHeaderDetailsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class GetMADImportDetailsRowChangeEvent : global::System.EventArgs {
            
            private GetMADImportDetailsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetMADImportDetailsRowChangeEvent(GetMADImportDetailsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetMADImportDetailsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SaveMADImportEntryErrorRowChangeEvent : global::System.EventArgs {
            
            private SaveMADImportEntryErrorRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SaveMADImportEntryErrorRowChangeEvent(SaveMADImportEntryErrorRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SaveMADImportEntryErrorRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SaveMADImportEntryRowChangeEvent : global::System.EventArgs {
            
            private SaveMADImportEntryRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SaveMADImportEntryRowChangeEvent(SaveMADImportEntryRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SaveMADImportEntryRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class F28310_SaveHeaderTemplateDataTableRowChangeEvent : global::System.EventArgs {
            
            private F28310_SaveHeaderTemplateDataTableRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public F28310_SaveHeaderTemplateDataTableRowChangeEvent(F28310_SaveHeaderTemplateDataTableRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public F28310_SaveHeaderTemplateDataTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace TerraScan.BusinessEntities.F28310MADImportTableAdapters {
    
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class ListDistrictTypeTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ListDistrictTypeTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "ListDistrictType";
            tableMapping.ColumnMappings.Add("TypeID", "MADTypeID");
            tableMapping.ColumnMappings.Add("TypeName", "MADType");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::TerraScan.BusinessEntities.Properties.Settings.Default.T2TerrascanConnectionString2;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "dbo.f1010_pclst_MortgageImportFileType";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.StoredProcedure;
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RETURN_VALUE", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.ReturnValue, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(F28310MADImport.ListDistrictTypeDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual F28310MADImport.ListDistrictTypeDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            F28310MADImport.ListDistrictTypeDataTable dataTable = new F28310MADImport.ListDistrictTypeDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD" +
        "esigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")]
    public partial class TableAdapterManager : global::System.ComponentModel.Component {
        
        private UpdateOrderOption _updateOrder;
        
        private bool _backupDataSetBeforeUpdate;
        
        private global::System.Data.IDbConnection _connection;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public UpdateOrderOption UpdateOrder {
            get {
                return this._updateOrder;
            }
            set {
                this._updateOrder = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool BackupDataSetBeforeUpdate {
            get {
                return this._backupDataSetBeforeUpdate;
            }
            set {
                this._backupDataSetBeforeUpdate = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public global::System.Data.IDbConnection Connection {
            get {
                if ((this._connection != null)) {
                    return this._connection;
                }
                return null;
            }
            set {
                this._connection = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public int TableAdapterInstanceCount {
            get {
                int count = 0;
                return count;
            }
        }
        
        /// <summary>
        ///Update rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateUpdatedRows(F28310MADImport dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            return result;
        }
        
        /// <summary>
        ///Insert rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateInsertedRows(F28310MADImport dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            return result;
        }
        
        /// <summary>
        ///Delete rows in bottom-up order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateDeletedRows(F28310MADImport dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows) {
            int result = 0;
            return result;
        }
        
        /// <summary>
        ///Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.DataRow[] GetRealUpdatedRows(global::System.Data.DataRow[] updatedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            if (((updatedRows == null) 
                        || (updatedRows.Length < 1))) {
                return updatedRows;
            }
            if (((allAddedRows == null) 
                        || (allAddedRows.Count < 1))) {
                return updatedRows;
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> realUpdatedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            for (int i = 0; (i < updatedRows.Length); i = (i + 1)) {
                global::System.Data.DataRow row = updatedRows[i];
                if ((allAddedRows.Contains(row) == false)) {
                    realUpdatedRows.Add(row);
                }
            }
            return realUpdatedRows.ToArray();
        }
        
        /// <summary>
        ///Update all changes to the dataset.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int UpdateAll(F28310MADImport dataSet) {
            if ((dataSet == null)) {
                throw new global::System.ArgumentNullException("dataSet");
            }
            if ((dataSet.HasChanges() == false)) {
                return 0;
            }
            global::System.Data.IDbConnection workConnection = this.Connection;
            if ((workConnection == null)) {
                throw new global::System.ApplicationException("TableAdapterManager contains no connection information. Set each TableAdapterMana" +
                        "ger TableAdapter property to a valid TableAdapter instance.");
            }
            bool workConnOpened = false;
            if (((workConnection.State & global::System.Data.ConnectionState.Broken) 
                        == global::System.Data.ConnectionState.Broken)) {
                workConnection.Close();
            }
            if ((workConnection.State == global::System.Data.ConnectionState.Closed)) {
                workConnection.Open();
                workConnOpened = true;
            }
            global::System.Data.IDbTransaction workTransaction = workConnection.BeginTransaction();
            if ((workTransaction == null)) {
                throw new global::System.ApplicationException("The transaction cannot begin. The current data connection does not support transa" +
                        "ctions or the current state is not allowing the transaction to begin.");
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter> adaptersWithAcceptChangesDuringUpdate = new global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter>();
            global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection> revertConnections = new global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection>();
            int result = 0;
            global::System.Data.DataSet backupDataSet = null;
            if (this.BackupDataSetBeforeUpdate) {
                backupDataSet = new global::System.Data.DataSet();
                backupDataSet.Merge(dataSet);
            }
            try {
                // ---- Prepare for update -----------
                //
                // 
                //---- Perform updates -----------
                //
                if ((this.UpdateOrder == UpdateOrderOption.UpdateInsertDelete)) {
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                }
                else {
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                }
                result = (result + this.UpdateDeletedRows(dataSet, allChangedRows));
                // 
                //---- Commit updates -----------
                //
                workTransaction.Commit();
                if ((0 < allAddedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                    allAddedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
                if ((0 < allChangedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allChangedRows.Count];
                    allChangedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
            }
            catch (global::System.Exception ex) {
                workTransaction.Rollback();
                // ---- Restore the dataset -----------
                if (this.BackupDataSetBeforeUpdate) {
                    global::System.Diagnostics.Debug.Assert((backupDataSet != null));
                    dataSet.Clear();
                    dataSet.Merge(backupDataSet);
                }
                else {
                    if ((0 < allAddedRows.Count)) {
                        global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                        allAddedRows.CopyTo(rows);
                        for (int i = 0; (i < rows.Length); i = (i + 1)) {
                            global::System.Data.DataRow row = rows[i];
                            row.AcceptChanges();
                            row.SetAdded();
                        }
                    }
                }
                throw ex;
            }
            finally {
                if (workConnOpened) {
                    workConnection.Close();
                }
                if ((0 < adaptersWithAcceptChangesDuringUpdate.Count)) {
                    global::System.Data.Common.DataAdapter[] adapters = new System.Data.Common.DataAdapter[adaptersWithAcceptChangesDuringUpdate.Count];
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters);
                    for (int i = 0; (i < adapters.Length); i = (i + 1)) {
                        global::System.Data.Common.DataAdapter adapter = adapters[i];
                        adapter.AcceptChangesDuringUpdate = true;
                    }
                }
            }
            return result;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected virtual void SortSelfReferenceRows(global::System.Data.DataRow[] rows, global::System.Data.DataRelation relation, bool childFirst) {
            global::System.Array.Sort<global::System.Data.DataRow>(rows, new SelfReferenceComparer(relation, childFirst));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected virtual bool MatchTableAdapterConnection(global::System.Data.IDbConnection inputConnection) {
            if ((this._connection != null)) {
                return true;
            }
            if (((this.Connection == null) 
                        || (inputConnection == null))) {
                return true;
            }
            if (string.Equals(this.Connection.ConnectionString, inputConnection.ConnectionString, global::System.StringComparison.Ordinal)) {
                return true;
            }
            return false;
        }
        
        /// <summary>
        ///Update Order Option
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public enum UpdateOrderOption {
            
            InsertUpdateDelete = 0,
            
            UpdateInsertDelete = 1,
        }
        
        /// <summary>
        ///Used to sort self-referenced table's rows
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        private class SelfReferenceComparer : object, global::System.Collections.Generic.IComparer<global::System.Data.DataRow> {
            
            private global::System.Data.DataRelation _relation;
            
            private int _childFirst;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SelfReferenceComparer(global::System.Data.DataRelation relation, bool childFirst) {
                this._relation = relation;
                if (childFirst) {
                    this._childFirst = -1;
                }
                else {
                    this._childFirst = 1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool IsChildAndParent(global::System.Data.DataRow child, global::System.Data.DataRow parent) {
                global::System.Diagnostics.Debug.Assert((child != null));
                global::System.Diagnostics.Debug.Assert((parent != null));
                global::System.Data.DataRow newParent = child.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                for (
                ; ((newParent != null) 
                            && ((object.ReferenceEquals(newParent, child) == false) 
                            && (object.ReferenceEquals(newParent, parent) == false))); 
                ) {
                    newParent = newParent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                }
                if ((newParent == null)) {
                    for (newParent = child.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original); ((newParent != null) 
                                && ((object.ReferenceEquals(newParent, child) == false) 
                                && (object.ReferenceEquals(newParent, parent) == false))); 
                    ) {
                        newParent = newParent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original);
                    }
                }
                if (object.ReferenceEquals(newParent, parent)) {
                    return true;
                }
                return false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Compare(global::System.Data.DataRow row1, global::System.Data.DataRow row2) {
                if (object.ReferenceEquals(row1, row2)) {
                    return 0;
                }
                if ((row1 == null)) {
                    return -1;
                }
                if ((row2 == null)) {
                    return 1;
                }

                // Is row1 the child or grandchild of row2
                if (this.IsChildAndParent(row1, row2)) {
                    return this._childFirst;
                }

                // Is row2 the child or grandchild of row1
                if (this.IsChildAndParent(row2, row1)) {
                    return (-1 * this._childFirst);
                }
                return 0;
            }
        }
    }
}

#pragma warning restore 1591