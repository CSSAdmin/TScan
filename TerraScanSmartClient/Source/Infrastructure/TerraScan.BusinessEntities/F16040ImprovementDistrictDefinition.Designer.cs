//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.8689
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace TerraScan.BusinessEntities {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("F16040ImprovementDistrictDefinition")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class F16040ImprovementDistrictDefinition : global::System.Data.DataSet {
        
        private DistrictHeaderTableDataTable tableDistrictHeaderTable;
        
        private DistrictTypeTableDataTable tableDistrictTypeTable;
        
        private InterestMethodTableDataTable tableInterestMethodTable;
        
        private DelqInterestCalcTableDataTable tableDelqInterestCalcTable;
        
        private GetDistributionDetailsDataTable tableGetDistributionDetails;
        
        private GetDistrictDetailsDataTable tableGetDistrictDetails;
        
        private GetSummaryDetailsDataTable tableGetSummaryDetails;
        
        private DistributionItemTypeDataTable tableDistributionItemType;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public F16040ImprovementDistrictDefinition() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected F16040ImprovementDistrictDefinition(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["DistrictHeaderTable"] != null)) {
                    base.Tables.Add(new DistrictHeaderTableDataTable(ds.Tables["DistrictHeaderTable"]));
                }
                if ((ds.Tables["DistrictTypeTable"] != null)) {
                    base.Tables.Add(new DistrictTypeTableDataTable(ds.Tables["DistrictTypeTable"]));
                }
                if ((ds.Tables["InterestMethodTable"] != null)) {
                    base.Tables.Add(new InterestMethodTableDataTable(ds.Tables["InterestMethodTable"]));
                }
                if ((ds.Tables["DelqInterestCalcTable"] != null)) {
                    base.Tables.Add(new DelqInterestCalcTableDataTable(ds.Tables["DelqInterestCalcTable"]));
                }
                if ((ds.Tables["GetDistributionDetails"] != null)) {
                    base.Tables.Add(new GetDistributionDetailsDataTable(ds.Tables["GetDistributionDetails"]));
                }
                if ((ds.Tables["GetDistrictDetails"] != null)) {
                    base.Tables.Add(new GetDistrictDetailsDataTable(ds.Tables["GetDistrictDetails"]));
                }
                if ((ds.Tables["GetSummaryDetails"] != null)) {
                    base.Tables.Add(new GetSummaryDetailsDataTable(ds.Tables["GetSummaryDetails"]));
                }
                if ((ds.Tables["DistributionItemType"] != null)) {
                    base.Tables.Add(new DistributionItemTypeDataTable(ds.Tables["DistributionItemType"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DistrictHeaderTableDataTable DistrictHeaderTable {
            get {
                return this.tableDistrictHeaderTable;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DistrictTypeTableDataTable DistrictTypeTable {
            get {
                return this.tableDistrictTypeTable;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public InterestMethodTableDataTable InterestMethodTable {
            get {
                return this.tableInterestMethodTable;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DelqInterestCalcTableDataTable DelqInterestCalcTable {
            get {
                return this.tableDelqInterestCalcTable;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GetDistributionDetailsDataTable GetDistributionDetails {
            get {
                return this.tableGetDistributionDetails;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GetDistrictDetailsDataTable GetDistrictDetails {
            get {
                return this.tableGetDistrictDetails;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GetSummaryDetailsDataTable GetSummaryDetails {
            get {
                return this.tableGetSummaryDetails;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DistributionItemTypeDataTable DistributionItemType {
            get {
                return this.tableDistributionItemType;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            F16040ImprovementDistrictDefinition cln = ((F16040ImprovementDistrictDefinition)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["DistrictHeaderTable"] != null)) {
                    base.Tables.Add(new DistrictHeaderTableDataTable(ds.Tables["DistrictHeaderTable"]));
                }
                if ((ds.Tables["DistrictTypeTable"] != null)) {
                    base.Tables.Add(new DistrictTypeTableDataTable(ds.Tables["DistrictTypeTable"]));
                }
                if ((ds.Tables["InterestMethodTable"] != null)) {
                    base.Tables.Add(new InterestMethodTableDataTable(ds.Tables["InterestMethodTable"]));
                }
                if ((ds.Tables["DelqInterestCalcTable"] != null)) {
                    base.Tables.Add(new DelqInterestCalcTableDataTable(ds.Tables["DelqInterestCalcTable"]));
                }
                if ((ds.Tables["GetDistributionDetails"] != null)) {
                    base.Tables.Add(new GetDistributionDetailsDataTable(ds.Tables["GetDistributionDetails"]));
                }
                if ((ds.Tables["GetDistrictDetails"] != null)) {
                    base.Tables.Add(new GetDistrictDetailsDataTable(ds.Tables["GetDistrictDetails"]));
                }
                if ((ds.Tables["GetSummaryDetails"] != null)) {
                    base.Tables.Add(new GetSummaryDetailsDataTable(ds.Tables["GetSummaryDetails"]));
                }
                if ((ds.Tables["DistributionItemType"] != null)) {
                    base.Tables.Add(new DistributionItemTypeDataTable(ds.Tables["DistributionItemType"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableDistrictHeaderTable = ((DistrictHeaderTableDataTable)(base.Tables["DistrictHeaderTable"]));
            if ((initTable == true)) {
                if ((this.tableDistrictHeaderTable != null)) {
                    this.tableDistrictHeaderTable.InitVars();
                }
            }
            this.tableDistrictTypeTable = ((DistrictTypeTableDataTable)(base.Tables["DistrictTypeTable"]));
            if ((initTable == true)) {
                if ((this.tableDistrictTypeTable != null)) {
                    this.tableDistrictTypeTable.InitVars();
                }
            }
            this.tableInterestMethodTable = ((InterestMethodTableDataTable)(base.Tables["InterestMethodTable"]));
            if ((initTable == true)) {
                if ((this.tableInterestMethodTable != null)) {
                    this.tableInterestMethodTable.InitVars();
                }
            }
            this.tableDelqInterestCalcTable = ((DelqInterestCalcTableDataTable)(base.Tables["DelqInterestCalcTable"]));
            if ((initTable == true)) {
                if ((this.tableDelqInterestCalcTable != null)) {
                    this.tableDelqInterestCalcTable.InitVars();
                }
            }
            this.tableGetDistributionDetails = ((GetDistributionDetailsDataTable)(base.Tables["GetDistributionDetails"]));
            if ((initTable == true)) {
                if ((this.tableGetDistributionDetails != null)) {
                    this.tableGetDistributionDetails.InitVars();
                }
            }
            this.tableGetDistrictDetails = ((GetDistrictDetailsDataTable)(base.Tables["GetDistrictDetails"]));
            if ((initTable == true)) {
                if ((this.tableGetDistrictDetails != null)) {
                    this.tableGetDistrictDetails.InitVars();
                }
            }
            this.tableGetSummaryDetails = ((GetSummaryDetailsDataTable)(base.Tables["GetSummaryDetails"]));
            if ((initTable == true)) {
                if ((this.tableGetSummaryDetails != null)) {
                    this.tableGetSummaryDetails.InitVars();
                }
            }
            this.tableDistributionItemType = ((DistributionItemTypeDataTable)(base.Tables["DistributionItemType"]));
            if ((initTable == true)) {
                if ((this.tableDistributionItemType != null)) {
                    this.tableDistributionItemType.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "F16040ImprovementDistrictDefinition";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/F16040ImprovementDistrictDefinition.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableDistrictHeaderTable = new DistrictHeaderTableDataTable();
            base.Tables.Add(this.tableDistrictHeaderTable);
            this.tableDistrictTypeTable = new DistrictTypeTableDataTable();
            base.Tables.Add(this.tableDistrictTypeTable);
            this.tableInterestMethodTable = new InterestMethodTableDataTable();
            base.Tables.Add(this.tableInterestMethodTable);
            this.tableDelqInterestCalcTable = new DelqInterestCalcTableDataTable();
            base.Tables.Add(this.tableDelqInterestCalcTable);
            this.tableGetDistributionDetails = new GetDistributionDetailsDataTable();
            base.Tables.Add(this.tableGetDistributionDetails);
            this.tableGetDistrictDetails = new GetDistrictDetailsDataTable();
            base.Tables.Add(this.tableGetDistrictDetails);
            this.tableGetSummaryDetails = new GetSummaryDetailsDataTable();
            base.Tables.Add(this.tableGetSummaryDetails);
            this.tableDistributionItemType = new DistributionItemTypeDataTable();
            base.Tables.Add(this.tableDistributionItemType);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeDistrictHeaderTable() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeDistrictTypeTable() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeInterestMethodTable() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeDelqInterestCalcTable() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeGetDistributionDetails() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeGetDistrictDetails() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeGetSummaryDetails() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeDistributionItemType() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            F16040ImprovementDistrictDefinition ds = new F16040ImprovementDistrictDefinition();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void DistrictHeaderTableRowChangeEventHandler(object sender, DistrictHeaderTableRowChangeEvent e);
        
        public delegate void DistrictTypeTableRowChangeEventHandler(object sender, DistrictTypeTableRowChangeEvent e);
        
        public delegate void InterestMethodTableRowChangeEventHandler(object sender, InterestMethodTableRowChangeEvent e);
        
        public delegate void DelqInterestCalcTableRowChangeEventHandler(object sender, DelqInterestCalcTableRowChangeEvent e);
        
        public delegate void GetDistributionDetailsRowChangeEventHandler(object sender, GetDistributionDetailsRowChangeEvent e);
        
        public delegate void GetDistrictDetailsRowChangeEventHandler(object sender, GetDistrictDetailsRowChangeEvent e);
        
        public delegate void GetSummaryDetailsRowChangeEventHandler(object sender, GetSummaryDetailsRowChangeEvent e);
        
        public delegate void DistributionItemTypeRowChangeEventHandler(object sender, DistributionItemTypeRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class DistrictHeaderTableDataTable : global::System.Data.TypedTableBase<DistrictHeaderTableRow> {
            
            private global::System.Data.DataColumn columnSADistrictID;
            
            private global::System.Data.DataColumn columnDistrict;
            
            private global::System.Data.DataColumn columnImprovDistrictName;
            
            private global::System.Data.DataColumn columnNumPayments;
            
            private global::System.Data.DataColumn columnLevyDate;
            
            private global::System.Data.DataColumn columnFirstDue;
            
            private global::System.Data.DataColumn columnSecondDue;
            
            private global::System.Data.DataColumn columnHasGrace;
            
            private global::System.Data.DataColumn columnGracePeriod;
            
            private global::System.Data.DataColumn columnPenaltyRate;
            
            private global::System.Data.DataColumn columnCommissionRate;
            
            private global::System.Data.DataColumn columnCommPenRate;
            
            private global::System.Data.DataColumn columnIDTypeID;
            
            private global::System.Data.DataColumn columnInterestMethodID;
            
            private global::System.Data.DataColumn columnInterestRate;
            
            private global::System.Data.DataColumn columnDelqInterestCalcID;
            
            private global::System.Data.DataColumn columnDelqInterestRate;
            
            private global::System.Data.DataColumn columnSAName;
            
            private global::System.Data.DataColumn columnRollYear;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DistrictHeaderTableDataTable() {
                this.TableName = "DistrictHeaderTable";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DistrictHeaderTableDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected DistrictHeaderTableDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SADistrictIDColumn {
                get {
                    return this.columnSADistrictID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DistrictColumn {
                get {
                    return this.columnDistrict;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ImprovDistrictNameColumn {
                get {
                    return this.columnImprovDistrictName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NumPaymentsColumn {
                get {
                    return this.columnNumPayments;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LevyDateColumn {
                get {
                    return this.columnLevyDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FirstDueColumn {
                get {
                    return this.columnFirstDue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SecondDueColumn {
                get {
                    return this.columnSecondDue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HasGraceColumn {
                get {
                    return this.columnHasGrace;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GracePeriodColumn {
                get {
                    return this.columnGracePeriod;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PenaltyRateColumn {
                get {
                    return this.columnPenaltyRate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CommissionRateColumn {
                get {
                    return this.columnCommissionRate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CommPenRateColumn {
                get {
                    return this.columnCommPenRate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IDTypeIDColumn {
                get {
                    return this.columnIDTypeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InterestMethodIDColumn {
                get {
                    return this.columnInterestMethodID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InterestRateColumn {
                get {
                    return this.columnInterestRate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DelqInterestCalcIDColumn {
                get {
                    return this.columnDelqInterestCalcID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DelqInterestRateColumn {
                get {
                    return this.columnDelqInterestRate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SANameColumn {
                get {
                    return this.columnSAName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RollYearColumn {
                get {
                    return this.columnRollYear;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DistrictHeaderTableRow this[int index] {
                get {
                    return ((DistrictHeaderTableRow)(this.Rows[index]));
                }
            }
            
            public event DistrictHeaderTableRowChangeEventHandler DistrictHeaderTableRowChanging;
            
            public event DistrictHeaderTableRowChangeEventHandler DistrictHeaderTableRowChanged;
            
            public event DistrictHeaderTableRowChangeEventHandler DistrictHeaderTableRowDeleting;
            
            public event DistrictHeaderTableRowChangeEventHandler DistrictHeaderTableRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddDistrictHeaderTableRow(DistrictHeaderTableRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DistrictHeaderTableRow AddDistrictHeaderTableRow(
                        short SADistrictID, 
                        int District, 
                        string ImprovDistrictName, 
                        short NumPayments, 
                        string LevyDate, 
                        string FirstDue, 
                        string SecondDue, 
                        bool HasGrace, 
                        int GracePeriod, 
                        decimal PenaltyRate, 
                        decimal CommissionRate, 
                        decimal CommPenRate, 
                        short IDTypeID, 
                        string InterestMethodID, 
                        decimal InterestRate, 
                        string DelqInterestCalcID, 
                        decimal DelqInterestRate, 
                        string SAName, 
                        int RollYear) {
                DistrictHeaderTableRow rowDistrictHeaderTableRow = ((DistrictHeaderTableRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        SADistrictID,
                        District,
                        ImprovDistrictName,
                        NumPayments,
                        LevyDate,
                        FirstDue,
                        SecondDue,
                        HasGrace,
                        GracePeriod,
                        PenaltyRate,
                        CommissionRate,
                        CommPenRate,
                        IDTypeID,
                        InterestMethodID,
                        InterestRate,
                        DelqInterestCalcID,
                        DelqInterestRate,
                        SAName,
                        RollYear};
                rowDistrictHeaderTableRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowDistrictHeaderTableRow);
                return rowDistrictHeaderTableRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                DistrictHeaderTableDataTable cln = ((DistrictHeaderTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new DistrictHeaderTableDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnSADistrictID = base.Columns["SADistrictID"];
                this.columnDistrict = base.Columns["District"];
                this.columnImprovDistrictName = base.Columns["ImprovDistrictName"];
                this.columnNumPayments = base.Columns["NumPayments"];
                this.columnLevyDate = base.Columns["LevyDate"];
                this.columnFirstDue = base.Columns["FirstDue"];
                this.columnSecondDue = base.Columns["SecondDue"];
                this.columnHasGrace = base.Columns["HasGrace"];
                this.columnGracePeriod = base.Columns["GracePeriod"];
                this.columnPenaltyRate = base.Columns["PenaltyRate"];
                this.columnCommissionRate = base.Columns["CommissionRate"];
                this.columnCommPenRate = base.Columns["CommPenRate"];
                this.columnIDTypeID = base.Columns["IDTypeID"];
                this.columnInterestMethodID = base.Columns["InterestMethodID"];
                this.columnInterestRate = base.Columns["InterestRate"];
                this.columnDelqInterestCalcID = base.Columns["DelqInterestCalcID"];
                this.columnDelqInterestRate = base.Columns["DelqInterestRate"];
                this.columnSAName = base.Columns["SAName"];
                this.columnRollYear = base.Columns["RollYear"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnSADistrictID = new global::System.Data.DataColumn("SADistrictID", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSADistrictID);
                this.columnDistrict = new global::System.Data.DataColumn("District", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDistrict);
                this.columnImprovDistrictName = new global::System.Data.DataColumn("ImprovDistrictName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnImprovDistrictName);
                this.columnNumPayments = new global::System.Data.DataColumn("NumPayments", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNumPayments);
                this.columnLevyDate = new global::System.Data.DataColumn("LevyDate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLevyDate);
                this.columnFirstDue = new global::System.Data.DataColumn("FirstDue", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFirstDue);
                this.columnSecondDue = new global::System.Data.DataColumn("SecondDue", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSecondDue);
                this.columnHasGrace = new global::System.Data.DataColumn("HasGrace", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHasGrace);
                this.columnGracePeriod = new global::System.Data.DataColumn("GracePeriod", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGracePeriod);
                this.columnPenaltyRate = new global::System.Data.DataColumn("PenaltyRate", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPenaltyRate);
                this.columnCommissionRate = new global::System.Data.DataColumn("CommissionRate", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCommissionRate);
                this.columnCommPenRate = new global::System.Data.DataColumn("CommPenRate", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCommPenRate);
                this.columnIDTypeID = new global::System.Data.DataColumn("IDTypeID", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIDTypeID);
                this.columnInterestMethodID = new global::System.Data.DataColumn("InterestMethodID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInterestMethodID);
                this.columnInterestRate = new global::System.Data.DataColumn("InterestRate", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInterestRate);
                this.columnDelqInterestCalcID = new global::System.Data.DataColumn("DelqInterestCalcID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDelqInterestCalcID);
                this.columnDelqInterestRate = new global::System.Data.DataColumn("DelqInterestRate", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDelqInterestRate);
                this.columnSAName = new global::System.Data.DataColumn("SAName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSAName);
                this.columnRollYear = new global::System.Data.DataColumn("RollYear", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRollYear);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DistrictHeaderTableRow NewDistrictHeaderTableRow() {
                return ((DistrictHeaderTableRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new DistrictHeaderTableRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(DistrictHeaderTableRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DistrictHeaderTableRowChanged != null)) {
                    this.DistrictHeaderTableRowChanged(this, new DistrictHeaderTableRowChangeEvent(((DistrictHeaderTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DistrictHeaderTableRowChanging != null)) {
                    this.DistrictHeaderTableRowChanging(this, new DistrictHeaderTableRowChangeEvent(((DistrictHeaderTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DistrictHeaderTableRowDeleted != null)) {
                    this.DistrictHeaderTableRowDeleted(this, new DistrictHeaderTableRowChangeEvent(((DistrictHeaderTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DistrictHeaderTableRowDeleting != null)) {
                    this.DistrictHeaderTableRowDeleting(this, new DistrictHeaderTableRowChangeEvent(((DistrictHeaderTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveDistrictHeaderTableRow(DistrictHeaderTableRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F16040ImprovementDistrictDefinition ds = new F16040ImprovementDistrictDefinition();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "DistrictHeaderTableDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class DistrictTypeTableDataTable : global::System.Data.TypedTableBase<DistrictTypeTableRow> {
            
            private global::System.Data.DataColumn columnIDTypeID;
            
            private global::System.Data.DataColumn columnIDType;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DistrictTypeTableDataTable() {
                this.TableName = "DistrictTypeTable";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DistrictTypeTableDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected DistrictTypeTableDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IDTypeIDColumn {
                get {
                    return this.columnIDTypeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IDTypeColumn {
                get {
                    return this.columnIDType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DistrictTypeTableRow this[int index] {
                get {
                    return ((DistrictTypeTableRow)(this.Rows[index]));
                }
            }
            
            public event DistrictTypeTableRowChangeEventHandler DistrictTypeTableRowChanging;
            
            public event DistrictTypeTableRowChangeEventHandler DistrictTypeTableRowChanged;
            
            public event DistrictTypeTableRowChangeEventHandler DistrictTypeTableRowDeleting;
            
            public event DistrictTypeTableRowChangeEventHandler DistrictTypeTableRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddDistrictTypeTableRow(DistrictTypeTableRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DistrictTypeTableRow AddDistrictTypeTableRow(short IDTypeID, string IDType) {
                DistrictTypeTableRow rowDistrictTypeTableRow = ((DistrictTypeTableRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        IDTypeID,
                        IDType};
                rowDistrictTypeTableRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowDistrictTypeTableRow);
                return rowDistrictTypeTableRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                DistrictTypeTableDataTable cln = ((DistrictTypeTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new DistrictTypeTableDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnIDTypeID = base.Columns["IDTypeID"];
                this.columnIDType = base.Columns["IDType"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnIDTypeID = new global::System.Data.DataColumn("IDTypeID", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIDTypeID);
                this.columnIDType = new global::System.Data.DataColumn("IDType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIDType);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DistrictTypeTableRow NewDistrictTypeTableRow() {
                return ((DistrictTypeTableRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new DistrictTypeTableRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(DistrictTypeTableRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DistrictTypeTableRowChanged != null)) {
                    this.DistrictTypeTableRowChanged(this, new DistrictTypeTableRowChangeEvent(((DistrictTypeTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DistrictTypeTableRowChanging != null)) {
                    this.DistrictTypeTableRowChanging(this, new DistrictTypeTableRowChangeEvent(((DistrictTypeTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DistrictTypeTableRowDeleted != null)) {
                    this.DistrictTypeTableRowDeleted(this, new DistrictTypeTableRowChangeEvent(((DistrictTypeTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DistrictTypeTableRowDeleting != null)) {
                    this.DistrictTypeTableRowDeleting(this, new DistrictTypeTableRowChangeEvent(((DistrictTypeTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveDistrictTypeTableRow(DistrictTypeTableRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F16040ImprovementDistrictDefinition ds = new F16040ImprovementDistrictDefinition();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "DistrictTypeTableDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class InterestMethodTableDataTable : global::System.Data.TypedTableBase<InterestMethodTableRow> {
            
            private global::System.Data.DataColumn columnInterestMethodID;
            
            private global::System.Data.DataColumn columnInterestMethod;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InterestMethodTableDataTable() {
                this.TableName = "InterestMethodTable";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal InterestMethodTableDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected InterestMethodTableDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InterestMethodIDColumn {
                get {
                    return this.columnInterestMethodID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InterestMethodColumn {
                get {
                    return this.columnInterestMethod;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InterestMethodTableRow this[int index] {
                get {
                    return ((InterestMethodTableRow)(this.Rows[index]));
                }
            }
            
            public event InterestMethodTableRowChangeEventHandler InterestMethodTableRowChanging;
            
            public event InterestMethodTableRowChangeEventHandler InterestMethodTableRowChanged;
            
            public event InterestMethodTableRowChangeEventHandler InterestMethodTableRowDeleting;
            
            public event InterestMethodTableRowChangeEventHandler InterestMethodTableRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddInterestMethodTableRow(InterestMethodTableRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InterestMethodTableRow AddInterestMethodTableRow(short InterestMethodID, string InterestMethod) {
                InterestMethodTableRow rowInterestMethodTableRow = ((InterestMethodTableRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        InterestMethodID,
                        InterestMethod};
                rowInterestMethodTableRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowInterestMethodTableRow);
                return rowInterestMethodTableRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                InterestMethodTableDataTable cln = ((InterestMethodTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new InterestMethodTableDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnInterestMethodID = base.Columns["InterestMethodID"];
                this.columnInterestMethod = base.Columns["InterestMethod"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnInterestMethodID = new global::System.Data.DataColumn("InterestMethodID", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInterestMethodID);
                this.columnInterestMethod = new global::System.Data.DataColumn("InterestMethod", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInterestMethod);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InterestMethodTableRow NewInterestMethodTableRow() {
                return ((InterestMethodTableRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new InterestMethodTableRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(InterestMethodTableRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.InterestMethodTableRowChanged != null)) {
                    this.InterestMethodTableRowChanged(this, new InterestMethodTableRowChangeEvent(((InterestMethodTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.InterestMethodTableRowChanging != null)) {
                    this.InterestMethodTableRowChanging(this, new InterestMethodTableRowChangeEvent(((InterestMethodTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.InterestMethodTableRowDeleted != null)) {
                    this.InterestMethodTableRowDeleted(this, new InterestMethodTableRowChangeEvent(((InterestMethodTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.InterestMethodTableRowDeleting != null)) {
                    this.InterestMethodTableRowDeleting(this, new InterestMethodTableRowChangeEvent(((InterestMethodTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveInterestMethodTableRow(InterestMethodTableRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F16040ImprovementDistrictDefinition ds = new F16040ImprovementDistrictDefinition();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "InterestMethodTableDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class DelqInterestCalcTableDataTable : global::System.Data.TypedTableBase<DelqInterestCalcTableRow> {
            
            private global::System.Data.DataColumn columnDelqInterestCalcID;
            
            private global::System.Data.DataColumn columnDelqInterestCalc;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DelqInterestCalcTableDataTable() {
                this.TableName = "DelqInterestCalcTable";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DelqInterestCalcTableDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected DelqInterestCalcTableDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DelqInterestCalcIDColumn {
                get {
                    return this.columnDelqInterestCalcID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DelqInterestCalcColumn {
                get {
                    return this.columnDelqInterestCalc;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DelqInterestCalcTableRow this[int index] {
                get {
                    return ((DelqInterestCalcTableRow)(this.Rows[index]));
                }
            }
            
            public event DelqInterestCalcTableRowChangeEventHandler DelqInterestCalcTableRowChanging;
            
            public event DelqInterestCalcTableRowChangeEventHandler DelqInterestCalcTableRowChanged;
            
            public event DelqInterestCalcTableRowChangeEventHandler DelqInterestCalcTableRowDeleting;
            
            public event DelqInterestCalcTableRowChangeEventHandler DelqInterestCalcTableRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddDelqInterestCalcTableRow(DelqInterestCalcTableRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DelqInterestCalcTableRow AddDelqInterestCalcTableRow(short DelqInterestCalcID, string DelqInterestCalc) {
                DelqInterestCalcTableRow rowDelqInterestCalcTableRow = ((DelqInterestCalcTableRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        DelqInterestCalcID,
                        DelqInterestCalc};
                rowDelqInterestCalcTableRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowDelqInterestCalcTableRow);
                return rowDelqInterestCalcTableRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                DelqInterestCalcTableDataTable cln = ((DelqInterestCalcTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new DelqInterestCalcTableDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnDelqInterestCalcID = base.Columns["DelqInterestCalcID"];
                this.columnDelqInterestCalc = base.Columns["DelqInterestCalc"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnDelqInterestCalcID = new global::System.Data.DataColumn("DelqInterestCalcID", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDelqInterestCalcID);
                this.columnDelqInterestCalc = new global::System.Data.DataColumn("DelqInterestCalc", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDelqInterestCalc);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DelqInterestCalcTableRow NewDelqInterestCalcTableRow() {
                return ((DelqInterestCalcTableRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new DelqInterestCalcTableRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(DelqInterestCalcTableRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DelqInterestCalcTableRowChanged != null)) {
                    this.DelqInterestCalcTableRowChanged(this, new DelqInterestCalcTableRowChangeEvent(((DelqInterestCalcTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DelqInterestCalcTableRowChanging != null)) {
                    this.DelqInterestCalcTableRowChanging(this, new DelqInterestCalcTableRowChangeEvent(((DelqInterestCalcTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DelqInterestCalcTableRowDeleted != null)) {
                    this.DelqInterestCalcTableRowDeleted(this, new DelqInterestCalcTableRowChangeEvent(((DelqInterestCalcTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DelqInterestCalcTableRowDeleting != null)) {
                    this.DelqInterestCalcTableRowDeleting(this, new DelqInterestCalcTableRowChangeEvent(((DelqInterestCalcTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveDelqInterestCalcTableRow(DelqInterestCalcTableRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F16040ImprovementDistrictDefinition ds = new F16040ImprovementDistrictDefinition();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "DelqInterestCalcTableDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class GetDistributionDetailsDataTable : global::System.Data.TypedTableBase<GetDistributionDetailsRow> {
            
            private global::System.Data.DataColumn columnSARateItemID;
            
            private global::System.Data.DataColumn columnSADistrictID;
            
            private global::System.Data.DataColumn columnItemTypeID;
            
            private global::System.Data.DataColumn columnPercentage;
            
            private global::System.Data.DataColumn columnAccount;
            
            private global::System.Data.DataColumn columnAccountStatus;
            
            private global::System.Data.DataColumn columnDistributionType;
            
            private global::System.Data.DataColumn columnAccountID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetDistributionDetailsDataTable() {
                this.TableName = "GetDistributionDetails";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetDistributionDetailsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected GetDistributionDetailsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SARateItemIDColumn {
                get {
                    return this.columnSARateItemID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SADistrictIDColumn {
                get {
                    return this.columnSADistrictID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ItemTypeIDColumn {
                get {
                    return this.columnItemTypeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PercentageColumn {
                get {
                    return this.columnPercentage;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AccountColumn {
                get {
                    return this.columnAccount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AccountStatusColumn {
                get {
                    return this.columnAccountStatus;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DistributionTypeColumn {
                get {
                    return this.columnDistributionType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AccountIDColumn {
                get {
                    return this.columnAccountID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetDistributionDetailsRow this[int index] {
                get {
                    return ((GetDistributionDetailsRow)(this.Rows[index]));
                }
            }
            
            public event GetDistributionDetailsRowChangeEventHandler GetDistributionDetailsRowChanging;
            
            public event GetDistributionDetailsRowChangeEventHandler GetDistributionDetailsRowChanged;
            
            public event GetDistributionDetailsRowChangeEventHandler GetDistributionDetailsRowDeleting;
            
            public event GetDistributionDetailsRowChangeEventHandler GetDistributionDetailsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddGetDistributionDetailsRow(GetDistributionDetailsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetDistributionDetailsRow AddGetDistributionDetailsRow(string SARateItemID, string SADistrictID, string ItemTypeID, decimal Percentage, string Account, string AccountStatus, string DistributionType, string AccountID) {
                GetDistributionDetailsRow rowGetDistributionDetailsRow = ((GetDistributionDetailsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        SARateItemID,
                        SADistrictID,
                        ItemTypeID,
                        Percentage,
                        Account,
                        AccountStatus,
                        DistributionType,
                        AccountID};
                rowGetDistributionDetailsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowGetDistributionDetailsRow);
                return rowGetDistributionDetailsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                GetDistributionDetailsDataTable cln = ((GetDistributionDetailsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new GetDistributionDetailsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnSARateItemID = base.Columns["SARateItemID"];
                this.columnSADistrictID = base.Columns["SADistrictID"];
                this.columnItemTypeID = base.Columns["ItemTypeID"];
                this.columnPercentage = base.Columns["Percentage"];
                this.columnAccount = base.Columns["Account"];
                this.columnAccountStatus = base.Columns["AccountStatus"];
                this.columnDistributionType = base.Columns["DistributionType"];
                this.columnAccountID = base.Columns["AccountID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnSARateItemID = new global::System.Data.DataColumn("SARateItemID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSARateItemID);
                this.columnSADistrictID = new global::System.Data.DataColumn("SADistrictID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSADistrictID);
                this.columnItemTypeID = new global::System.Data.DataColumn("ItemTypeID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnItemTypeID);
                this.columnPercentage = new global::System.Data.DataColumn("Percentage", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPercentage);
                this.columnAccount = new global::System.Data.DataColumn("Account", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAccount);
                this.columnAccountStatus = new global::System.Data.DataColumn("AccountStatus", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAccountStatus);
                this.columnDistributionType = new global::System.Data.DataColumn("DistributionType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDistributionType);
                this.columnAccountID = new global::System.Data.DataColumn("AccountID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAccountID);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetDistributionDetailsRow NewGetDistributionDetailsRow() {
                return ((GetDistributionDetailsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new GetDistributionDetailsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(GetDistributionDetailsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GetDistributionDetailsRowChanged != null)) {
                    this.GetDistributionDetailsRowChanged(this, new GetDistributionDetailsRowChangeEvent(((GetDistributionDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GetDistributionDetailsRowChanging != null)) {
                    this.GetDistributionDetailsRowChanging(this, new GetDistributionDetailsRowChangeEvent(((GetDistributionDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GetDistributionDetailsRowDeleted != null)) {
                    this.GetDistributionDetailsRowDeleted(this, new GetDistributionDetailsRowChangeEvent(((GetDistributionDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GetDistributionDetailsRowDeleting != null)) {
                    this.GetDistributionDetailsRowDeleting(this, new GetDistributionDetailsRowChangeEvent(((GetDistributionDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveGetDistributionDetailsRow(GetDistributionDetailsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F16040ImprovementDistrictDefinition ds = new F16040ImprovementDistrictDefinition();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "GetDistributionDetailsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class GetDistrictDetailsDataTable : global::System.Data.TypedTableBase<GetDistrictDetailsRow> {
            
            private global::System.Data.DataColumn columnSADistrictID;
            
            private global::System.Data.DataColumn columnRollYear;
            
            private global::System.Data.DataColumn columnDistrict;
            
            private global::System.Data.DataColumn columnSAName;
            
            private global::System.Data.DataColumn columnLevyDate;
            
            private global::System.Data.DataColumn columnFirstDue;
            
            private global::System.Data.DataColumn columnSecondDue;
            
            private global::System.Data.DataColumn columnNumPayments;
            
            private global::System.Data.DataColumn columnInterestRate;
            
            private global::System.Data.DataColumn columnIDType;
            
            private global::System.Data.DataColumn columnHasGrace;
            
            private global::System.Data.DataColumn columnGracePeriod;
            
            private global::System.Data.DataColumn columnInterestMethod;
            
            private global::System.Data.DataColumn columnIsRolled;
            
            private global::System.Data.DataColumn columnDelqInterestCalc;
            
            private global::System.Data.DataColumn columnCommissionRate;
            
            private global::System.Data.DataColumn columnCommPenRate;
            
            private global::System.Data.DataColumn columnPenaltyRate;
            
            private global::System.Data.DataColumn columnDelqInterestRate;
            
            private global::System.Data.DataColumn columnIDTypeID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetDistrictDetailsDataTable() {
                this.TableName = "GetDistrictDetails";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetDistrictDetailsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected GetDistrictDetailsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SADistrictIDColumn {
                get {
                    return this.columnSADistrictID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RollYearColumn {
                get {
                    return this.columnRollYear;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DistrictColumn {
                get {
                    return this.columnDistrict;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SANameColumn {
                get {
                    return this.columnSAName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LevyDateColumn {
                get {
                    return this.columnLevyDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FirstDueColumn {
                get {
                    return this.columnFirstDue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SecondDueColumn {
                get {
                    return this.columnSecondDue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NumPaymentsColumn {
                get {
                    return this.columnNumPayments;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InterestRateColumn {
                get {
                    return this.columnInterestRate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IDTypeColumn {
                get {
                    return this.columnIDType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HasGraceColumn {
                get {
                    return this.columnHasGrace;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GracePeriodColumn {
                get {
                    return this.columnGracePeriod;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InterestMethodColumn {
                get {
                    return this.columnInterestMethod;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsRolledColumn {
                get {
                    return this.columnIsRolled;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DelqInterestCalcColumn {
                get {
                    return this.columnDelqInterestCalc;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CommissionRateColumn {
                get {
                    return this.columnCommissionRate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CommPenRateColumn {
                get {
                    return this.columnCommPenRate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PenaltyRateColumn {
                get {
                    return this.columnPenaltyRate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DelqInterestRateColumn {
                get {
                    return this.columnDelqInterestRate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IDTypeIDColumn {
                get {
                    return this.columnIDTypeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetDistrictDetailsRow this[int index] {
                get {
                    return ((GetDistrictDetailsRow)(this.Rows[index]));
                }
            }
            
            public event GetDistrictDetailsRowChangeEventHandler GetDistrictDetailsRowChanging;
            
            public event GetDistrictDetailsRowChangeEventHandler GetDistrictDetailsRowChanged;
            
            public event GetDistrictDetailsRowChangeEventHandler GetDistrictDetailsRowDeleting;
            
            public event GetDistrictDetailsRowChangeEventHandler GetDistrictDetailsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddGetDistrictDetailsRow(GetDistrictDetailsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetDistrictDetailsRow AddGetDistrictDetailsRow(
                        string SADistrictID, 
                        string RollYear, 
                        string District, 
                        string SAName, 
                        string LevyDate, 
                        string FirstDue, 
                        string SecondDue, 
                        string NumPayments, 
                        string InterestRate, 
                        string IDType, 
                        string HasGrace, 
                        string GracePeriod, 
                        string InterestMethod, 
                        string IsRolled, 
                        string DelqInterestCalc, 
                        string CommissionRate, 
                        string CommPenRate, 
                        string PenaltyRate, 
                        string DelqInterestRate, 
                        string IDTypeID) {
                GetDistrictDetailsRow rowGetDistrictDetailsRow = ((GetDistrictDetailsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        SADistrictID,
                        RollYear,
                        District,
                        SAName,
                        LevyDate,
                        FirstDue,
                        SecondDue,
                        NumPayments,
                        InterestRate,
                        IDType,
                        HasGrace,
                        GracePeriod,
                        InterestMethod,
                        IsRolled,
                        DelqInterestCalc,
                        CommissionRate,
                        CommPenRate,
                        PenaltyRate,
                        DelqInterestRate,
                        IDTypeID};
                rowGetDistrictDetailsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowGetDistrictDetailsRow);
                return rowGetDistrictDetailsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                GetDistrictDetailsDataTable cln = ((GetDistrictDetailsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new GetDistrictDetailsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnSADistrictID = base.Columns["SADistrictID"];
                this.columnRollYear = base.Columns["RollYear"];
                this.columnDistrict = base.Columns["District"];
                this.columnSAName = base.Columns["SAName"];
                this.columnLevyDate = base.Columns["LevyDate"];
                this.columnFirstDue = base.Columns["FirstDue"];
                this.columnSecondDue = base.Columns["SecondDue"];
                this.columnNumPayments = base.Columns["NumPayments"];
                this.columnInterestRate = base.Columns["InterestRate"];
                this.columnIDType = base.Columns["IDType"];
                this.columnHasGrace = base.Columns["HasGrace"];
                this.columnGracePeriod = base.Columns["GracePeriod"];
                this.columnInterestMethod = base.Columns["InterestMethod"];
                this.columnIsRolled = base.Columns["IsRolled"];
                this.columnDelqInterestCalc = base.Columns["DelqInterestCalc"];
                this.columnCommissionRate = base.Columns["CommissionRate"];
                this.columnCommPenRate = base.Columns["CommPenRate"];
                this.columnPenaltyRate = base.Columns["PenaltyRate"];
                this.columnDelqInterestRate = base.Columns["DelqInterestRate"];
                this.columnIDTypeID = base.Columns["IDTypeID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnSADistrictID = new global::System.Data.DataColumn("SADistrictID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSADistrictID);
                this.columnRollYear = new global::System.Data.DataColumn("RollYear", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRollYear);
                this.columnDistrict = new global::System.Data.DataColumn("District", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDistrict);
                this.columnSAName = new global::System.Data.DataColumn("SAName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSAName);
                this.columnLevyDate = new global::System.Data.DataColumn("LevyDate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLevyDate);
                this.columnFirstDue = new global::System.Data.DataColumn("FirstDue", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFirstDue);
                this.columnSecondDue = new global::System.Data.DataColumn("SecondDue", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSecondDue);
                this.columnNumPayments = new global::System.Data.DataColumn("NumPayments", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNumPayments);
                this.columnInterestRate = new global::System.Data.DataColumn("InterestRate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInterestRate);
                this.columnIDType = new global::System.Data.DataColumn("IDType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIDType);
                this.columnHasGrace = new global::System.Data.DataColumn("HasGrace", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHasGrace);
                this.columnGracePeriod = new global::System.Data.DataColumn("GracePeriod", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGracePeriod);
                this.columnInterestMethod = new global::System.Data.DataColumn("InterestMethod", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInterestMethod);
                this.columnIsRolled = new global::System.Data.DataColumn("IsRolled", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsRolled);
                this.columnDelqInterestCalc = new global::System.Data.DataColumn("DelqInterestCalc", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDelqInterestCalc);
                this.columnCommissionRate = new global::System.Data.DataColumn("CommissionRate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCommissionRate);
                this.columnCommPenRate = new global::System.Data.DataColumn("CommPenRate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCommPenRate);
                this.columnPenaltyRate = new global::System.Data.DataColumn("PenaltyRate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPenaltyRate);
                this.columnDelqInterestRate = new global::System.Data.DataColumn("DelqInterestRate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDelqInterestRate);
                this.columnIDTypeID = new global::System.Data.DataColumn("IDTypeID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIDTypeID);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetDistrictDetailsRow NewGetDistrictDetailsRow() {
                return ((GetDistrictDetailsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new GetDistrictDetailsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(GetDistrictDetailsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GetDistrictDetailsRowChanged != null)) {
                    this.GetDistrictDetailsRowChanged(this, new GetDistrictDetailsRowChangeEvent(((GetDistrictDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GetDistrictDetailsRowChanging != null)) {
                    this.GetDistrictDetailsRowChanging(this, new GetDistrictDetailsRowChangeEvent(((GetDistrictDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GetDistrictDetailsRowDeleted != null)) {
                    this.GetDistrictDetailsRowDeleted(this, new GetDistrictDetailsRowChangeEvent(((GetDistrictDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GetDistrictDetailsRowDeleting != null)) {
                    this.GetDistrictDetailsRowDeleting(this, new GetDistrictDetailsRowChangeEvent(((GetDistrictDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveGetDistrictDetailsRow(GetDistrictDetailsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F16040ImprovementDistrictDefinition ds = new F16040ImprovementDistrictDefinition();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "GetDistrictDetailsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class GetSummaryDetailsDataTable : global::System.Data.TypedTableBase<GetSummaryDetailsRow> {
            
            private global::System.Data.DataColumn columnParcelCount;
            
            private global::System.Data.DataColumn columnTotalLevied;
            
            private global::System.Data.DataColumn columnTotalPaid;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetSummaryDetailsDataTable() {
                this.TableName = "GetSummaryDetails";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetSummaryDetailsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected GetSummaryDetailsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ParcelCountColumn {
                get {
                    return this.columnParcelCount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalLeviedColumn {
                get {
                    return this.columnTotalLevied;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalPaidColumn {
                get {
                    return this.columnTotalPaid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetSummaryDetailsRow this[int index] {
                get {
                    return ((GetSummaryDetailsRow)(this.Rows[index]));
                }
            }
            
            public event GetSummaryDetailsRowChangeEventHandler GetSummaryDetailsRowChanging;
            
            public event GetSummaryDetailsRowChangeEventHandler GetSummaryDetailsRowChanged;
            
            public event GetSummaryDetailsRowChangeEventHandler GetSummaryDetailsRowDeleting;
            
            public event GetSummaryDetailsRowChangeEventHandler GetSummaryDetailsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddGetSummaryDetailsRow(GetSummaryDetailsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetSummaryDetailsRow AddGetSummaryDetailsRow(int ParcelCount, string TotalLevied, string TotalPaid) {
                GetSummaryDetailsRow rowGetSummaryDetailsRow = ((GetSummaryDetailsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ParcelCount,
                        TotalLevied,
                        TotalPaid};
                rowGetSummaryDetailsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowGetSummaryDetailsRow);
                return rowGetSummaryDetailsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                GetSummaryDetailsDataTable cln = ((GetSummaryDetailsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new GetSummaryDetailsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnParcelCount = base.Columns["ParcelCount"];
                this.columnTotalLevied = base.Columns["TotalLevied"];
                this.columnTotalPaid = base.Columns["TotalPaid"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnParcelCount = new global::System.Data.DataColumn("ParcelCount", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnParcelCount);
                this.columnTotalLevied = new global::System.Data.DataColumn("TotalLevied", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalLevied);
                this.columnTotalPaid = new global::System.Data.DataColumn("TotalPaid", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalPaid);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetSummaryDetailsRow NewGetSummaryDetailsRow() {
                return ((GetSummaryDetailsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new GetSummaryDetailsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(GetSummaryDetailsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GetSummaryDetailsRowChanged != null)) {
                    this.GetSummaryDetailsRowChanged(this, new GetSummaryDetailsRowChangeEvent(((GetSummaryDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GetSummaryDetailsRowChanging != null)) {
                    this.GetSummaryDetailsRowChanging(this, new GetSummaryDetailsRowChangeEvent(((GetSummaryDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GetSummaryDetailsRowDeleted != null)) {
                    this.GetSummaryDetailsRowDeleted(this, new GetSummaryDetailsRowChangeEvent(((GetSummaryDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GetSummaryDetailsRowDeleting != null)) {
                    this.GetSummaryDetailsRowDeleting(this, new GetSummaryDetailsRowChangeEvent(((GetSummaryDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveGetSummaryDetailsRow(GetSummaryDetailsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F16040ImprovementDistrictDefinition ds = new F16040ImprovementDistrictDefinition();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "GetSummaryDetailsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class DistributionItemTypeDataTable : global::System.Data.TypedTableBase<DistributionItemTypeRow> {
            
            private global::System.Data.DataColumn columnItemTypeID;
            
            private global::System.Data.DataColumn columnDistributionType;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DistributionItemTypeDataTable() {
                this.TableName = "DistributionItemType";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DistributionItemTypeDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected DistributionItemTypeDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ItemTypeIDColumn {
                get {
                    return this.columnItemTypeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DistributionTypeColumn {
                get {
                    return this.columnDistributionType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DistributionItemTypeRow this[int index] {
                get {
                    return ((DistributionItemTypeRow)(this.Rows[index]));
                }
            }
            
            public event DistributionItemTypeRowChangeEventHandler DistributionItemTypeRowChanging;
            
            public event DistributionItemTypeRowChangeEventHandler DistributionItemTypeRowChanged;
            
            public event DistributionItemTypeRowChangeEventHandler DistributionItemTypeRowDeleting;
            
            public event DistributionItemTypeRowChangeEventHandler DistributionItemTypeRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddDistributionItemTypeRow(DistributionItemTypeRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DistributionItemTypeRow AddDistributionItemTypeRow(string ItemTypeID, string DistributionType) {
                DistributionItemTypeRow rowDistributionItemTypeRow = ((DistributionItemTypeRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ItemTypeID,
                        DistributionType};
                rowDistributionItemTypeRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowDistributionItemTypeRow);
                return rowDistributionItemTypeRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                DistributionItemTypeDataTable cln = ((DistributionItemTypeDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new DistributionItemTypeDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnItemTypeID = base.Columns["ItemTypeID"];
                this.columnDistributionType = base.Columns["DistributionType"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnItemTypeID = new global::System.Data.DataColumn("ItemTypeID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnItemTypeID);
                this.columnDistributionType = new global::System.Data.DataColumn("DistributionType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDistributionType);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DistributionItemTypeRow NewDistributionItemTypeRow() {
                return ((DistributionItemTypeRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new DistributionItemTypeRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(DistributionItemTypeRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DistributionItemTypeRowChanged != null)) {
                    this.DistributionItemTypeRowChanged(this, new DistributionItemTypeRowChangeEvent(((DistributionItemTypeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DistributionItemTypeRowChanging != null)) {
                    this.DistributionItemTypeRowChanging(this, new DistributionItemTypeRowChangeEvent(((DistributionItemTypeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DistributionItemTypeRowDeleted != null)) {
                    this.DistributionItemTypeRowDeleted(this, new DistributionItemTypeRowChangeEvent(((DistributionItemTypeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DistributionItemTypeRowDeleting != null)) {
                    this.DistributionItemTypeRowDeleting(this, new DistributionItemTypeRowChangeEvent(((DistributionItemTypeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveDistributionItemTypeRow(DistributionItemTypeRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F16040ImprovementDistrictDefinition ds = new F16040ImprovementDistrictDefinition();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "DistributionItemTypeDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class DistrictHeaderTableRow : global::System.Data.DataRow {
            
            private DistrictHeaderTableDataTable tableDistrictHeaderTable;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DistrictHeaderTableRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableDistrictHeaderTable = ((DistrictHeaderTableDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short SADistrictID {
                get {
                    try {
                        return ((short)(this[this.tableDistrictHeaderTable.SADistrictIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SADistrictID\' in table \'DistrictHeaderTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDistrictHeaderTable.SADistrictIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int District {
                get {
                    try {
                        return ((int)(this[this.tableDistrictHeaderTable.DistrictColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'District\' in table \'DistrictHeaderTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDistrictHeaderTable.DistrictColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ImprovDistrictName {
                get {
                    try {
                        return ((string)(this[this.tableDistrictHeaderTable.ImprovDistrictNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ImprovDistrictName\' in table \'DistrictHeaderTable\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableDistrictHeaderTable.ImprovDistrictNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short NumPayments {
                get {
                    try {
                        return ((short)(this[this.tableDistrictHeaderTable.NumPaymentsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NumPayments\' in table \'DistrictHeaderTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDistrictHeaderTable.NumPaymentsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LevyDate {
                get {
                    try {
                        return ((string)(this[this.tableDistrictHeaderTable.LevyDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LevyDate\' in table \'DistrictHeaderTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDistrictHeaderTable.LevyDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FirstDue {
                get {
                    try {
                        return ((string)(this[this.tableDistrictHeaderTable.FirstDueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FirstDue\' in table \'DistrictHeaderTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDistrictHeaderTable.FirstDueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SecondDue {
                get {
                    try {
                        return ((string)(this[this.tableDistrictHeaderTable.SecondDueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SecondDue\' in table \'DistrictHeaderTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDistrictHeaderTable.SecondDueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool HasGrace {
                get {
                    try {
                        return ((bool)(this[this.tableDistrictHeaderTable.HasGraceColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'HasGrace\' in table \'DistrictHeaderTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDistrictHeaderTable.HasGraceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int GracePeriod {
                get {
                    try {
                        return ((int)(this[this.tableDistrictHeaderTable.GracePeriodColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GracePeriod\' in table \'DistrictHeaderTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDistrictHeaderTable.GracePeriodColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal PenaltyRate {
                get {
                    try {
                        return ((decimal)(this[this.tableDistrictHeaderTable.PenaltyRateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PenaltyRate\' in table \'DistrictHeaderTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDistrictHeaderTable.PenaltyRateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CommissionRate {
                get {
                    try {
                        return ((decimal)(this[this.tableDistrictHeaderTable.CommissionRateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CommissionRate\' in table \'DistrictHeaderTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDistrictHeaderTable.CommissionRateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CommPenRate {
                get {
                    try {
                        return ((decimal)(this[this.tableDistrictHeaderTable.CommPenRateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CommPenRate\' in table \'DistrictHeaderTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDistrictHeaderTable.CommPenRateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short IDTypeID {
                get {
                    try {
                        return ((short)(this[this.tableDistrictHeaderTable.IDTypeIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IDTypeID\' in table \'DistrictHeaderTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDistrictHeaderTable.IDTypeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string InterestMethodID {
                get {
                    try {
                        return ((string)(this[this.tableDistrictHeaderTable.InterestMethodIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InterestMethodID\' in table \'DistrictHeaderTable\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableDistrictHeaderTable.InterestMethodIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal InterestRate {
                get {
                    try {
                        return ((decimal)(this[this.tableDistrictHeaderTable.InterestRateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InterestRate\' in table \'DistrictHeaderTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDistrictHeaderTable.InterestRateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DelqInterestCalcID {
                get {
                    try {
                        return ((string)(this[this.tableDistrictHeaderTable.DelqInterestCalcIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DelqInterestCalcID\' in table \'DistrictHeaderTable\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableDistrictHeaderTable.DelqInterestCalcIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal DelqInterestRate {
                get {
                    try {
                        return ((decimal)(this[this.tableDistrictHeaderTable.DelqInterestRateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DelqInterestRate\' in table \'DistrictHeaderTable\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableDistrictHeaderTable.DelqInterestRateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SAName {
                get {
                    try {
                        return ((string)(this[this.tableDistrictHeaderTable.SANameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SAName\' in table \'DistrictHeaderTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDistrictHeaderTable.SANameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RollYear {
                get {
                    try {
                        return ((int)(this[this.tableDistrictHeaderTable.RollYearColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RollYear\' in table \'DistrictHeaderTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDistrictHeaderTable.RollYearColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSADistrictIDNull() {
                return this.IsNull(this.tableDistrictHeaderTable.SADistrictIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSADistrictIDNull() {
                this[this.tableDistrictHeaderTable.SADistrictIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDistrictNull() {
                return this.IsNull(this.tableDistrictHeaderTable.DistrictColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDistrictNull() {
                this[this.tableDistrictHeaderTable.DistrictColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsImprovDistrictNameNull() {
                return this.IsNull(this.tableDistrictHeaderTable.ImprovDistrictNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetImprovDistrictNameNull() {
                this[this.tableDistrictHeaderTable.ImprovDistrictNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNumPaymentsNull() {
                return this.IsNull(this.tableDistrictHeaderTable.NumPaymentsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNumPaymentsNull() {
                this[this.tableDistrictHeaderTable.NumPaymentsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLevyDateNull() {
                return this.IsNull(this.tableDistrictHeaderTable.LevyDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLevyDateNull() {
                this[this.tableDistrictHeaderTable.LevyDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFirstDueNull() {
                return this.IsNull(this.tableDistrictHeaderTable.FirstDueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFirstDueNull() {
                this[this.tableDistrictHeaderTable.FirstDueColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSecondDueNull() {
                return this.IsNull(this.tableDistrictHeaderTable.SecondDueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSecondDueNull() {
                this[this.tableDistrictHeaderTable.SecondDueColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHasGraceNull() {
                return this.IsNull(this.tableDistrictHeaderTable.HasGraceColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHasGraceNull() {
                this[this.tableDistrictHeaderTable.HasGraceColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGracePeriodNull() {
                return this.IsNull(this.tableDistrictHeaderTable.GracePeriodColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGracePeriodNull() {
                this[this.tableDistrictHeaderTable.GracePeriodColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPenaltyRateNull() {
                return this.IsNull(this.tableDistrictHeaderTable.PenaltyRateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPenaltyRateNull() {
                this[this.tableDistrictHeaderTable.PenaltyRateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCommissionRateNull() {
                return this.IsNull(this.tableDistrictHeaderTable.CommissionRateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCommissionRateNull() {
                this[this.tableDistrictHeaderTable.CommissionRateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCommPenRateNull() {
                return this.IsNull(this.tableDistrictHeaderTable.CommPenRateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCommPenRateNull() {
                this[this.tableDistrictHeaderTable.CommPenRateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIDTypeIDNull() {
                return this.IsNull(this.tableDistrictHeaderTable.IDTypeIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIDTypeIDNull() {
                this[this.tableDistrictHeaderTable.IDTypeIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInterestMethodIDNull() {
                return this.IsNull(this.tableDistrictHeaderTable.InterestMethodIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInterestMethodIDNull() {
                this[this.tableDistrictHeaderTable.InterestMethodIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInterestRateNull() {
                return this.IsNull(this.tableDistrictHeaderTable.InterestRateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInterestRateNull() {
                this[this.tableDistrictHeaderTable.InterestRateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDelqInterestCalcIDNull() {
                return this.IsNull(this.tableDistrictHeaderTable.DelqInterestCalcIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDelqInterestCalcIDNull() {
                this[this.tableDistrictHeaderTable.DelqInterestCalcIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDelqInterestRateNull() {
                return this.IsNull(this.tableDistrictHeaderTable.DelqInterestRateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDelqInterestRateNull() {
                this[this.tableDistrictHeaderTable.DelqInterestRateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSANameNull() {
                return this.IsNull(this.tableDistrictHeaderTable.SANameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSANameNull() {
                this[this.tableDistrictHeaderTable.SANameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRollYearNull() {
                return this.IsNull(this.tableDistrictHeaderTable.RollYearColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRollYearNull() {
                this[this.tableDistrictHeaderTable.RollYearColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class DistrictTypeTableRow : global::System.Data.DataRow {
            
            private DistrictTypeTableDataTable tableDistrictTypeTable;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DistrictTypeTableRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableDistrictTypeTable = ((DistrictTypeTableDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short IDTypeID {
                get {
                    try {
                        return ((short)(this[this.tableDistrictTypeTable.IDTypeIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IDTypeID\' in table \'DistrictTypeTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDistrictTypeTable.IDTypeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IDType {
                get {
                    try {
                        return ((string)(this[this.tableDistrictTypeTable.IDTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IDType\' in table \'DistrictTypeTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDistrictTypeTable.IDTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIDTypeIDNull() {
                return this.IsNull(this.tableDistrictTypeTable.IDTypeIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIDTypeIDNull() {
                this[this.tableDistrictTypeTable.IDTypeIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIDTypeNull() {
                return this.IsNull(this.tableDistrictTypeTable.IDTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIDTypeNull() {
                this[this.tableDistrictTypeTable.IDTypeColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class InterestMethodTableRow : global::System.Data.DataRow {
            
            private InterestMethodTableDataTable tableInterestMethodTable;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal InterestMethodTableRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableInterestMethodTable = ((InterestMethodTableDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short InterestMethodID {
                get {
                    try {
                        return ((short)(this[this.tableInterestMethodTable.InterestMethodIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InterestMethodID\' in table \'InterestMethodTable\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableInterestMethodTable.InterestMethodIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string InterestMethod {
                get {
                    try {
                        return ((string)(this[this.tableInterestMethodTable.InterestMethodColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InterestMethod\' in table \'InterestMethodTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInterestMethodTable.InterestMethodColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInterestMethodIDNull() {
                return this.IsNull(this.tableInterestMethodTable.InterestMethodIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInterestMethodIDNull() {
                this[this.tableInterestMethodTable.InterestMethodIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInterestMethodNull() {
                return this.IsNull(this.tableInterestMethodTable.InterestMethodColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInterestMethodNull() {
                this[this.tableInterestMethodTable.InterestMethodColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class DelqInterestCalcTableRow : global::System.Data.DataRow {
            
            private DelqInterestCalcTableDataTable tableDelqInterestCalcTable;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DelqInterestCalcTableRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableDelqInterestCalcTable = ((DelqInterestCalcTableDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short DelqInterestCalcID {
                get {
                    try {
                        return ((short)(this[this.tableDelqInterestCalcTable.DelqInterestCalcIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DelqInterestCalcID\' in table \'DelqInterestCalcTable\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableDelqInterestCalcTable.DelqInterestCalcIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DelqInterestCalc {
                get {
                    try {
                        return ((string)(this[this.tableDelqInterestCalcTable.DelqInterestCalcColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DelqInterestCalc\' in table \'DelqInterestCalcTable\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableDelqInterestCalcTable.DelqInterestCalcColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDelqInterestCalcIDNull() {
                return this.IsNull(this.tableDelqInterestCalcTable.DelqInterestCalcIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDelqInterestCalcIDNull() {
                this[this.tableDelqInterestCalcTable.DelqInterestCalcIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDelqInterestCalcNull() {
                return this.IsNull(this.tableDelqInterestCalcTable.DelqInterestCalcColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDelqInterestCalcNull() {
                this[this.tableDelqInterestCalcTable.DelqInterestCalcColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class GetDistributionDetailsRow : global::System.Data.DataRow {
            
            private GetDistributionDetailsDataTable tableGetDistributionDetails;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetDistributionDetailsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableGetDistributionDetails = ((GetDistributionDetailsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SARateItemID {
                get {
                    try {
                        return ((string)(this[this.tableGetDistributionDetails.SARateItemIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SARateItemID\' in table \'GetDistributionDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetDistributionDetails.SARateItemIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SADistrictID {
                get {
                    try {
                        return ((string)(this[this.tableGetDistributionDetails.SADistrictIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SADistrictID\' in table \'GetDistributionDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetDistributionDetails.SADistrictIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ItemTypeID {
                get {
                    try {
                        return ((string)(this[this.tableGetDistributionDetails.ItemTypeIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ItemTypeID\' in table \'GetDistributionDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetDistributionDetails.ItemTypeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Percentage {
                get {
                    try {
                        return ((decimal)(this[this.tableGetDistributionDetails.PercentageColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Percentage\' in table \'GetDistributionDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetDistributionDetails.PercentageColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Account {
                get {
                    try {
                        return ((string)(this[this.tableGetDistributionDetails.AccountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Account\' in table \'GetDistributionDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetDistributionDetails.AccountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AccountStatus {
                get {
                    try {
                        return ((string)(this[this.tableGetDistributionDetails.AccountStatusColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AccountStatus\' in table \'GetDistributionDetails\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableGetDistributionDetails.AccountStatusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DistributionType {
                get {
                    try {
                        return ((string)(this[this.tableGetDistributionDetails.DistributionTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DistributionType\' in table \'GetDistributionDetails\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableGetDistributionDetails.DistributionTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AccountID {
                get {
                    try {
                        return ((string)(this[this.tableGetDistributionDetails.AccountIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AccountID\' in table \'GetDistributionDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetDistributionDetails.AccountIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSARateItemIDNull() {
                return this.IsNull(this.tableGetDistributionDetails.SARateItemIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSARateItemIDNull() {
                this[this.tableGetDistributionDetails.SARateItemIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSADistrictIDNull() {
                return this.IsNull(this.tableGetDistributionDetails.SADistrictIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSADistrictIDNull() {
                this[this.tableGetDistributionDetails.SADistrictIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsItemTypeIDNull() {
                return this.IsNull(this.tableGetDistributionDetails.ItemTypeIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetItemTypeIDNull() {
                this[this.tableGetDistributionDetails.ItemTypeIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPercentageNull() {
                return this.IsNull(this.tableGetDistributionDetails.PercentageColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPercentageNull() {
                this[this.tableGetDistributionDetails.PercentageColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAccountNull() {
                return this.IsNull(this.tableGetDistributionDetails.AccountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAccountNull() {
                this[this.tableGetDistributionDetails.AccountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAccountStatusNull() {
                return this.IsNull(this.tableGetDistributionDetails.AccountStatusColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAccountStatusNull() {
                this[this.tableGetDistributionDetails.AccountStatusColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDistributionTypeNull() {
                return this.IsNull(this.tableGetDistributionDetails.DistributionTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDistributionTypeNull() {
                this[this.tableGetDistributionDetails.DistributionTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAccountIDNull() {
                return this.IsNull(this.tableGetDistributionDetails.AccountIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAccountIDNull() {
                this[this.tableGetDistributionDetails.AccountIDColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class GetDistrictDetailsRow : global::System.Data.DataRow {
            
            private GetDistrictDetailsDataTable tableGetDistrictDetails;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetDistrictDetailsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableGetDistrictDetails = ((GetDistrictDetailsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SADistrictID {
                get {
                    try {
                        return ((string)(this[this.tableGetDistrictDetails.SADistrictIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SADistrictID\' in table \'GetDistrictDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetDistrictDetails.SADistrictIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RollYear {
                get {
                    try {
                        return ((string)(this[this.tableGetDistrictDetails.RollYearColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RollYear\' in table \'GetDistrictDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetDistrictDetails.RollYearColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string District {
                get {
                    try {
                        return ((string)(this[this.tableGetDistrictDetails.DistrictColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'District\' in table \'GetDistrictDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetDistrictDetails.DistrictColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SAName {
                get {
                    try {
                        return ((string)(this[this.tableGetDistrictDetails.SANameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SAName\' in table \'GetDistrictDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetDistrictDetails.SANameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LevyDate {
                get {
                    try {
                        return ((string)(this[this.tableGetDistrictDetails.LevyDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LevyDate\' in table \'GetDistrictDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetDistrictDetails.LevyDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FirstDue {
                get {
                    try {
                        return ((string)(this[this.tableGetDistrictDetails.FirstDueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FirstDue\' in table \'GetDistrictDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetDistrictDetails.FirstDueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SecondDue {
                get {
                    try {
                        return ((string)(this[this.tableGetDistrictDetails.SecondDueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SecondDue\' in table \'GetDistrictDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetDistrictDetails.SecondDueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NumPayments {
                get {
                    if (this.IsNumPaymentsNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableGetDistrictDetails.NumPaymentsColumn]));
                    }
                }
                set {
                    this[this.tableGetDistrictDetails.NumPaymentsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string InterestRate {
                get {
                    try {
                        return ((string)(this[this.tableGetDistrictDetails.InterestRateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InterestRate\' in table \'GetDistrictDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetDistrictDetails.InterestRateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IDType {
                get {
                    try {
                        return ((string)(this[this.tableGetDistrictDetails.IDTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IDType\' in table \'GetDistrictDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetDistrictDetails.IDTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string HasGrace {
                get {
                    if (this.IsHasGraceNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableGetDistrictDetails.HasGraceColumn]));
                    }
                }
                set {
                    this[this.tableGetDistrictDetails.HasGraceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string GracePeriod {
                get {
                    try {
                        return ((string)(this[this.tableGetDistrictDetails.GracePeriodColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GracePeriod\' in table \'GetDistrictDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetDistrictDetails.GracePeriodColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string InterestMethod {
                get {
                    try {
                        return ((string)(this[this.tableGetDistrictDetails.InterestMethodColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InterestMethod\' in table \'GetDistrictDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetDistrictDetails.InterestMethodColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IsRolled {
                get {
                    try {
                        return ((string)(this[this.tableGetDistrictDetails.IsRolledColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsRolled\' in table \'GetDistrictDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetDistrictDetails.IsRolledColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DelqInterestCalc {
                get {
                    try {
                        return ((string)(this[this.tableGetDistrictDetails.DelqInterestCalcColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DelqInterestCalc\' in table \'GetDistrictDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetDistrictDetails.DelqInterestCalcColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CommissionRate {
                get {
                    try {
                        return ((string)(this[this.tableGetDistrictDetails.CommissionRateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CommissionRate\' in table \'GetDistrictDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetDistrictDetails.CommissionRateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CommPenRate {
                get {
                    try {
                        return ((string)(this[this.tableGetDistrictDetails.CommPenRateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CommPenRate\' in table \'GetDistrictDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetDistrictDetails.CommPenRateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PenaltyRate {
                get {
                    try {
                        return ((string)(this[this.tableGetDistrictDetails.PenaltyRateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PenaltyRate\' in table \'GetDistrictDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetDistrictDetails.PenaltyRateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DelqInterestRate {
                get {
                    try {
                        return ((string)(this[this.tableGetDistrictDetails.DelqInterestRateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DelqInterestRate\' in table \'GetDistrictDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetDistrictDetails.DelqInterestRateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IDTypeID {
                get {
                    try {
                        return ((string)(this[this.tableGetDistrictDetails.IDTypeIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IDTypeID\' in table \'GetDistrictDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetDistrictDetails.IDTypeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSADistrictIDNull() {
                return this.IsNull(this.tableGetDistrictDetails.SADistrictIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSADistrictIDNull() {
                this[this.tableGetDistrictDetails.SADistrictIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRollYearNull() {
                return this.IsNull(this.tableGetDistrictDetails.RollYearColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRollYearNull() {
                this[this.tableGetDistrictDetails.RollYearColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDistrictNull() {
                return this.IsNull(this.tableGetDistrictDetails.DistrictColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDistrictNull() {
                this[this.tableGetDistrictDetails.DistrictColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSANameNull() {
                return this.IsNull(this.tableGetDistrictDetails.SANameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSANameNull() {
                this[this.tableGetDistrictDetails.SANameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLevyDateNull() {
                return this.IsNull(this.tableGetDistrictDetails.LevyDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLevyDateNull() {
                this[this.tableGetDistrictDetails.LevyDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFirstDueNull() {
                return this.IsNull(this.tableGetDistrictDetails.FirstDueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFirstDueNull() {
                this[this.tableGetDistrictDetails.FirstDueColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSecondDueNull() {
                return this.IsNull(this.tableGetDistrictDetails.SecondDueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSecondDueNull() {
                this[this.tableGetDistrictDetails.SecondDueColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNumPaymentsNull() {
                return this.IsNull(this.tableGetDistrictDetails.NumPaymentsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNumPaymentsNull() {
                this[this.tableGetDistrictDetails.NumPaymentsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInterestRateNull() {
                return this.IsNull(this.tableGetDistrictDetails.InterestRateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInterestRateNull() {
                this[this.tableGetDistrictDetails.InterestRateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIDTypeNull() {
                return this.IsNull(this.tableGetDistrictDetails.IDTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIDTypeNull() {
                this[this.tableGetDistrictDetails.IDTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHasGraceNull() {
                return this.IsNull(this.tableGetDistrictDetails.HasGraceColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHasGraceNull() {
                this[this.tableGetDistrictDetails.HasGraceColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGracePeriodNull() {
                return this.IsNull(this.tableGetDistrictDetails.GracePeriodColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGracePeriodNull() {
                this[this.tableGetDistrictDetails.GracePeriodColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInterestMethodNull() {
                return this.IsNull(this.tableGetDistrictDetails.InterestMethodColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInterestMethodNull() {
                this[this.tableGetDistrictDetails.InterestMethodColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsRolledNull() {
                return this.IsNull(this.tableGetDistrictDetails.IsRolledColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsRolledNull() {
                this[this.tableGetDistrictDetails.IsRolledColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDelqInterestCalcNull() {
                return this.IsNull(this.tableGetDistrictDetails.DelqInterestCalcColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDelqInterestCalcNull() {
                this[this.tableGetDistrictDetails.DelqInterestCalcColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCommissionRateNull() {
                return this.IsNull(this.tableGetDistrictDetails.CommissionRateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCommissionRateNull() {
                this[this.tableGetDistrictDetails.CommissionRateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCommPenRateNull() {
                return this.IsNull(this.tableGetDistrictDetails.CommPenRateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCommPenRateNull() {
                this[this.tableGetDistrictDetails.CommPenRateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPenaltyRateNull() {
                return this.IsNull(this.tableGetDistrictDetails.PenaltyRateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPenaltyRateNull() {
                this[this.tableGetDistrictDetails.PenaltyRateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDelqInterestRateNull() {
                return this.IsNull(this.tableGetDistrictDetails.DelqInterestRateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDelqInterestRateNull() {
                this[this.tableGetDistrictDetails.DelqInterestRateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIDTypeIDNull() {
                return this.IsNull(this.tableGetDistrictDetails.IDTypeIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIDTypeIDNull() {
                this[this.tableGetDistrictDetails.IDTypeIDColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class GetSummaryDetailsRow : global::System.Data.DataRow {
            
            private GetSummaryDetailsDataTable tableGetSummaryDetails;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetSummaryDetailsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableGetSummaryDetails = ((GetSummaryDetailsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ParcelCount {
                get {
                    try {
                        return ((int)(this[this.tableGetSummaryDetails.ParcelCountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ParcelCount\' in table \'GetSummaryDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetSummaryDetails.ParcelCountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TotalLevied {
                get {
                    try {
                        return ((string)(this[this.tableGetSummaryDetails.TotalLeviedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalLevied\' in table \'GetSummaryDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetSummaryDetails.TotalLeviedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TotalPaid {
                get {
                    try {
                        return ((string)(this[this.tableGetSummaryDetails.TotalPaidColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalPaid\' in table \'GetSummaryDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetSummaryDetails.TotalPaidColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsParcelCountNull() {
                return this.IsNull(this.tableGetSummaryDetails.ParcelCountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetParcelCountNull() {
                this[this.tableGetSummaryDetails.ParcelCountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalLeviedNull() {
                return this.IsNull(this.tableGetSummaryDetails.TotalLeviedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalLeviedNull() {
                this[this.tableGetSummaryDetails.TotalLeviedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalPaidNull() {
                return this.IsNull(this.tableGetSummaryDetails.TotalPaidColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalPaidNull() {
                this[this.tableGetSummaryDetails.TotalPaidColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class DistributionItemTypeRow : global::System.Data.DataRow {
            
            private DistributionItemTypeDataTable tableDistributionItemType;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DistributionItemTypeRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableDistributionItemType = ((DistributionItemTypeDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ItemTypeID {
                get {
                    try {
                        return ((string)(this[this.tableDistributionItemType.ItemTypeIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ItemTypeID\' in table \'DistributionItemType\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDistributionItemType.ItemTypeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DistributionType {
                get {
                    try {
                        return ((string)(this[this.tableDistributionItemType.DistributionTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DistributionType\' in table \'DistributionItemType\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableDistributionItemType.DistributionTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsItemTypeIDNull() {
                return this.IsNull(this.tableDistributionItemType.ItemTypeIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetItemTypeIDNull() {
                this[this.tableDistributionItemType.ItemTypeIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDistributionTypeNull() {
                return this.IsNull(this.tableDistributionItemType.DistributionTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDistributionTypeNull() {
                this[this.tableDistributionItemType.DistributionTypeColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class DistrictHeaderTableRowChangeEvent : global::System.EventArgs {
            
            private DistrictHeaderTableRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DistrictHeaderTableRowChangeEvent(DistrictHeaderTableRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DistrictHeaderTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class DistrictTypeTableRowChangeEvent : global::System.EventArgs {
            
            private DistrictTypeTableRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DistrictTypeTableRowChangeEvent(DistrictTypeTableRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DistrictTypeTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class InterestMethodTableRowChangeEvent : global::System.EventArgs {
            
            private InterestMethodTableRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InterestMethodTableRowChangeEvent(InterestMethodTableRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InterestMethodTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class DelqInterestCalcTableRowChangeEvent : global::System.EventArgs {
            
            private DelqInterestCalcTableRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DelqInterestCalcTableRowChangeEvent(DelqInterestCalcTableRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DelqInterestCalcTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class GetDistributionDetailsRowChangeEvent : global::System.EventArgs {
            
            private GetDistributionDetailsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetDistributionDetailsRowChangeEvent(GetDistributionDetailsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetDistributionDetailsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class GetDistrictDetailsRowChangeEvent : global::System.EventArgs {
            
            private GetDistrictDetailsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetDistrictDetailsRowChangeEvent(GetDistrictDetailsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetDistrictDetailsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class GetSummaryDetailsRowChangeEvent : global::System.EventArgs {
            
            private GetSummaryDetailsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetSummaryDetailsRowChangeEvent(GetSummaryDetailsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetSummaryDetailsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class DistributionItemTypeRowChangeEvent : global::System.EventArgs {
            
            private DistributionItemTypeRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DistributionItemTypeRowChangeEvent(DistributionItemTypeRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DistributionItemTypeRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591