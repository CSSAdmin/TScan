//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4952
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace TerraScan.BusinessEntities {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("f25000FieldUse")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class f25000FieldUse : global::System.Data.DataSet {
        
        private tAA_AssessmentTypeDataTable tabletAA_AssessmentType;
        
        private tAA_CropDataTable tabletAA_Crop;
        
        private tAA_LandDataTable tabletAA_Land;
        
        private tAA_LandUnitDataTable tabletAA_LandUnit;
        
        private tAA_MA_Type1DataTable tabletAA_MA_Type1;
        
        private tAA_MA_Type10DataTable tabletAA_MA_Type10;
        
        private tAA_MA_Type11DataTable tabletAA_MA_Type11;
        
        private tAA_MA_Type12DataTable tabletAA_MA_Type12;
        
        private tAA_MA_Type2DataTable tabletAA_MA_Type2;
        
        private tAA_MA_Type3DataTable tabletAA_MA_Type3;
        
        private tAA_MA_Type4DataTable tabletAA_MA_Type4;
        
        private tAA_MA_Type6DataTable tabletAA_MA_Type6;
        
        private tAA_MA_Type7DataTable tabletAA_MA_Type7;
        
        private tAA_MA_Type8DataTable tabletAA_MA_Type8;
        
        private tAA_MA_Type9DataTable tabletAA_MA_Type9;
        
        private tAA_MAD_Type1DataTable tabletAA_MAD_Type1;
        
        private tAA_MAD_Type10DataTable tabletAA_MAD_Type10;
        
        private tAA_MAD_Type11DataTable tabletAA_MAD_Type11;
        
        private tAA_MAD_Type12DataTable tabletAA_MAD_Type12;
        
        private tAA_MAD_Type2DataTable tabletAA_MAD_Type2;
        
        private tAA_MAD_Type3DataTable tabletAA_MAD_Type3;
        
        private tAA_MAD_Type4DataTable tabletAA_MAD_Type4;
        
        private tAA_MAD_Type6DataTable tabletAA_MAD_Type6;
        
        private tAA_MAD_Type7DataTable tabletAA_MAD_Type7;
        
        private tAA_MAD_Type8DataTable tabletAA_MAD_Type8;
        
        private tAA_MAD_Type9DataTable tabletAA_MAD_Type9;
        
        private tAA_MSC_VersionDataTable tabletAA_MSC_Version;
        
        private tAA_Parcel_InspectionTypeDataTable tabletAA_Parcel_InspectionType;
        
        private tAA_Parcel_PLandTypeDataTable tabletAA_Parcel_PLandType;
        
        private tAA_ParcelValueDataTable tabletAA_ParcelValue;
        
        private tAA_Parcel_PImprovementDataTable tabletAA_Parcel_PImprovement;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public f25000FieldUse() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected f25000FieldUse(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["tAA_AssessmentType"] != null)) {
                    base.Tables.Add(new tAA_AssessmentTypeDataTable(ds.Tables["tAA_AssessmentType"]));
                }
                if ((ds.Tables["tAA_Crop"] != null)) {
                    base.Tables.Add(new tAA_CropDataTable(ds.Tables["tAA_Crop"]));
                }
                if ((ds.Tables["tAA_Land"] != null)) {
                    base.Tables.Add(new tAA_LandDataTable(ds.Tables["tAA_Land"]));
                }
                if ((ds.Tables["tAA_LandUnit"] != null)) {
                    base.Tables.Add(new tAA_LandUnitDataTable(ds.Tables["tAA_LandUnit"]));
                }
                if ((ds.Tables["tAA_MA_Type1"] != null)) {
                    base.Tables.Add(new tAA_MA_Type1DataTable(ds.Tables["tAA_MA_Type1"]));
                }
                if ((ds.Tables["tAA_MA_Type10"] != null)) {
                    base.Tables.Add(new tAA_MA_Type10DataTable(ds.Tables["tAA_MA_Type10"]));
                }
                if ((ds.Tables["tAA_MA_Type11"] != null)) {
                    base.Tables.Add(new tAA_MA_Type11DataTable(ds.Tables["tAA_MA_Type11"]));
                }
                if ((ds.Tables["tAA_MA_Type12"] != null)) {
                    base.Tables.Add(new tAA_MA_Type12DataTable(ds.Tables["tAA_MA_Type12"]));
                }
                if ((ds.Tables["tAA_MA_Type2"] != null)) {
                    base.Tables.Add(new tAA_MA_Type2DataTable(ds.Tables["tAA_MA_Type2"]));
                }
                if ((ds.Tables["tAA_MA_Type3"] != null)) {
                    base.Tables.Add(new tAA_MA_Type3DataTable(ds.Tables["tAA_MA_Type3"]));
                }
                if ((ds.Tables["tAA_MA_Type4"] != null)) {
                    base.Tables.Add(new tAA_MA_Type4DataTable(ds.Tables["tAA_MA_Type4"]));
                }
                if ((ds.Tables["tAA_MA_Type6"] != null)) {
                    base.Tables.Add(new tAA_MA_Type6DataTable(ds.Tables["tAA_MA_Type6"]));
                }
                if ((ds.Tables["tAA_MA_Type7"] != null)) {
                    base.Tables.Add(new tAA_MA_Type7DataTable(ds.Tables["tAA_MA_Type7"]));
                }
                if ((ds.Tables["tAA_MA_Type8"] != null)) {
                    base.Tables.Add(new tAA_MA_Type8DataTable(ds.Tables["tAA_MA_Type8"]));
                }
                if ((ds.Tables["tAA_MA_Type9"] != null)) {
                    base.Tables.Add(new tAA_MA_Type9DataTable(ds.Tables["tAA_MA_Type9"]));
                }
                if ((ds.Tables["tAA_MAD_Type1"] != null)) {
                    base.Tables.Add(new tAA_MAD_Type1DataTable(ds.Tables["tAA_MAD_Type1"]));
                }
                if ((ds.Tables["tAA_MAD_Type10"] != null)) {
                    base.Tables.Add(new tAA_MAD_Type10DataTable(ds.Tables["tAA_MAD_Type10"]));
                }
                if ((ds.Tables["tAA_MAD_Type11"] != null)) {
                    base.Tables.Add(new tAA_MAD_Type11DataTable(ds.Tables["tAA_MAD_Type11"]));
                }
                if ((ds.Tables["tAA_MAD_Type12"] != null)) {
                    base.Tables.Add(new tAA_MAD_Type12DataTable(ds.Tables["tAA_MAD_Type12"]));
                }
                if ((ds.Tables["tAA_MAD_Type2"] != null)) {
                    base.Tables.Add(new tAA_MAD_Type2DataTable(ds.Tables["tAA_MAD_Type2"]));
                }
                if ((ds.Tables["tAA_MAD_Type3"] != null)) {
                    base.Tables.Add(new tAA_MAD_Type3DataTable(ds.Tables["tAA_MAD_Type3"]));
                }
                if ((ds.Tables["tAA_MAD_Type4"] != null)) {
                    base.Tables.Add(new tAA_MAD_Type4DataTable(ds.Tables["tAA_MAD_Type4"]));
                }
                if ((ds.Tables["tAA_MAD_Type6"] != null)) {
                    base.Tables.Add(new tAA_MAD_Type6DataTable(ds.Tables["tAA_MAD_Type6"]));
                }
                if ((ds.Tables["tAA_MAD_Type7"] != null)) {
                    base.Tables.Add(new tAA_MAD_Type7DataTable(ds.Tables["tAA_MAD_Type7"]));
                }
                if ((ds.Tables["tAA_MAD_Type8"] != null)) {
                    base.Tables.Add(new tAA_MAD_Type8DataTable(ds.Tables["tAA_MAD_Type8"]));
                }
                if ((ds.Tables["tAA_MAD_Type9"] != null)) {
                    base.Tables.Add(new tAA_MAD_Type9DataTable(ds.Tables["tAA_MAD_Type9"]));
                }
                if ((ds.Tables["tAA_MSC_Version"] != null)) {
                    base.Tables.Add(new tAA_MSC_VersionDataTable(ds.Tables["tAA_MSC_Version"]));
                }
                if ((ds.Tables["tAA_Parcel_InspectionType"] != null)) {
                    base.Tables.Add(new tAA_Parcel_InspectionTypeDataTable(ds.Tables["tAA_Parcel_InspectionType"]));
                }
                if ((ds.Tables["tAA_Parcel_PLandType"] != null)) {
                    base.Tables.Add(new tAA_Parcel_PLandTypeDataTable(ds.Tables["tAA_Parcel_PLandType"]));
                }
                if ((ds.Tables["tAA_ParcelValue"] != null)) {
                    base.Tables.Add(new tAA_ParcelValueDataTable(ds.Tables["tAA_ParcelValue"]));
                }
                if ((ds.Tables["tAA_Parcel_PImprovement"] != null)) {
                    base.Tables.Add(new tAA_Parcel_PImprovementDataTable(ds.Tables["tAA_Parcel_PImprovement"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public tAA_AssessmentTypeDataTable tAA_AssessmentType {
            get {
                return this.tabletAA_AssessmentType;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public tAA_CropDataTable tAA_Crop {
            get {
                return this.tabletAA_Crop;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public tAA_LandDataTable tAA_Land {
            get {
                return this.tabletAA_Land;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public tAA_LandUnitDataTable tAA_LandUnit {
            get {
                return this.tabletAA_LandUnit;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public tAA_MA_Type1DataTable tAA_MA_Type1 {
            get {
                return this.tabletAA_MA_Type1;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public tAA_MA_Type10DataTable tAA_MA_Type10 {
            get {
                return this.tabletAA_MA_Type10;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public tAA_MA_Type11DataTable tAA_MA_Type11 {
            get {
                return this.tabletAA_MA_Type11;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public tAA_MA_Type12DataTable tAA_MA_Type12 {
            get {
                return this.tabletAA_MA_Type12;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public tAA_MA_Type2DataTable tAA_MA_Type2 {
            get {
                return this.tabletAA_MA_Type2;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public tAA_MA_Type3DataTable tAA_MA_Type3 {
            get {
                return this.tabletAA_MA_Type3;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public tAA_MA_Type4DataTable tAA_MA_Type4 {
            get {
                return this.tabletAA_MA_Type4;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public tAA_MA_Type6DataTable tAA_MA_Type6 {
            get {
                return this.tabletAA_MA_Type6;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public tAA_MA_Type7DataTable tAA_MA_Type7 {
            get {
                return this.tabletAA_MA_Type7;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public tAA_MA_Type8DataTable tAA_MA_Type8 {
            get {
                return this.tabletAA_MA_Type8;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public tAA_MA_Type9DataTable tAA_MA_Type9 {
            get {
                return this.tabletAA_MA_Type9;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public tAA_MAD_Type1DataTable tAA_MAD_Type1 {
            get {
                return this.tabletAA_MAD_Type1;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public tAA_MAD_Type10DataTable tAA_MAD_Type10 {
            get {
                return this.tabletAA_MAD_Type10;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public tAA_MAD_Type11DataTable tAA_MAD_Type11 {
            get {
                return this.tabletAA_MAD_Type11;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public tAA_MAD_Type12DataTable tAA_MAD_Type12 {
            get {
                return this.tabletAA_MAD_Type12;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public tAA_MAD_Type2DataTable tAA_MAD_Type2 {
            get {
                return this.tabletAA_MAD_Type2;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public tAA_MAD_Type3DataTable tAA_MAD_Type3 {
            get {
                return this.tabletAA_MAD_Type3;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public tAA_MAD_Type4DataTable tAA_MAD_Type4 {
            get {
                return this.tabletAA_MAD_Type4;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public tAA_MAD_Type6DataTable tAA_MAD_Type6 {
            get {
                return this.tabletAA_MAD_Type6;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public tAA_MAD_Type7DataTable tAA_MAD_Type7 {
            get {
                return this.tabletAA_MAD_Type7;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public tAA_MAD_Type8DataTable tAA_MAD_Type8 {
            get {
                return this.tabletAA_MAD_Type8;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public tAA_MAD_Type9DataTable tAA_MAD_Type9 {
            get {
                return this.tabletAA_MAD_Type9;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public tAA_MSC_VersionDataTable tAA_MSC_Version {
            get {
                return this.tabletAA_MSC_Version;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public tAA_Parcel_InspectionTypeDataTable tAA_Parcel_InspectionType {
            get {
                return this.tabletAA_Parcel_InspectionType;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public tAA_Parcel_PLandTypeDataTable tAA_Parcel_PLandType {
            get {
                return this.tabletAA_Parcel_PLandType;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public tAA_ParcelValueDataTable tAA_ParcelValue {
            get {
                return this.tabletAA_ParcelValue;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public tAA_Parcel_PImprovementDataTable tAA_Parcel_PImprovement {
            get {
                return this.tabletAA_Parcel_PImprovement;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            f25000FieldUse cln = ((f25000FieldUse)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["tAA_AssessmentType"] != null)) {
                    base.Tables.Add(new tAA_AssessmentTypeDataTable(ds.Tables["tAA_AssessmentType"]));
                }
                if ((ds.Tables["tAA_Crop"] != null)) {
                    base.Tables.Add(new tAA_CropDataTable(ds.Tables["tAA_Crop"]));
                }
                if ((ds.Tables["tAA_Land"] != null)) {
                    base.Tables.Add(new tAA_LandDataTable(ds.Tables["tAA_Land"]));
                }
                if ((ds.Tables["tAA_LandUnit"] != null)) {
                    base.Tables.Add(new tAA_LandUnitDataTable(ds.Tables["tAA_LandUnit"]));
                }
                if ((ds.Tables["tAA_MA_Type1"] != null)) {
                    base.Tables.Add(new tAA_MA_Type1DataTable(ds.Tables["tAA_MA_Type1"]));
                }
                if ((ds.Tables["tAA_MA_Type10"] != null)) {
                    base.Tables.Add(new tAA_MA_Type10DataTable(ds.Tables["tAA_MA_Type10"]));
                }
                if ((ds.Tables["tAA_MA_Type11"] != null)) {
                    base.Tables.Add(new tAA_MA_Type11DataTable(ds.Tables["tAA_MA_Type11"]));
                }
                if ((ds.Tables["tAA_MA_Type12"] != null)) {
                    base.Tables.Add(new tAA_MA_Type12DataTable(ds.Tables["tAA_MA_Type12"]));
                }
                if ((ds.Tables["tAA_MA_Type2"] != null)) {
                    base.Tables.Add(new tAA_MA_Type2DataTable(ds.Tables["tAA_MA_Type2"]));
                }
                if ((ds.Tables["tAA_MA_Type3"] != null)) {
                    base.Tables.Add(new tAA_MA_Type3DataTable(ds.Tables["tAA_MA_Type3"]));
                }
                if ((ds.Tables["tAA_MA_Type4"] != null)) {
                    base.Tables.Add(new tAA_MA_Type4DataTable(ds.Tables["tAA_MA_Type4"]));
                }
                if ((ds.Tables["tAA_MA_Type6"] != null)) {
                    base.Tables.Add(new tAA_MA_Type6DataTable(ds.Tables["tAA_MA_Type6"]));
                }
                if ((ds.Tables["tAA_MA_Type7"] != null)) {
                    base.Tables.Add(new tAA_MA_Type7DataTable(ds.Tables["tAA_MA_Type7"]));
                }
                if ((ds.Tables["tAA_MA_Type8"] != null)) {
                    base.Tables.Add(new tAA_MA_Type8DataTable(ds.Tables["tAA_MA_Type8"]));
                }
                if ((ds.Tables["tAA_MA_Type9"] != null)) {
                    base.Tables.Add(new tAA_MA_Type9DataTable(ds.Tables["tAA_MA_Type9"]));
                }
                if ((ds.Tables["tAA_MAD_Type1"] != null)) {
                    base.Tables.Add(new tAA_MAD_Type1DataTable(ds.Tables["tAA_MAD_Type1"]));
                }
                if ((ds.Tables["tAA_MAD_Type10"] != null)) {
                    base.Tables.Add(new tAA_MAD_Type10DataTable(ds.Tables["tAA_MAD_Type10"]));
                }
                if ((ds.Tables["tAA_MAD_Type11"] != null)) {
                    base.Tables.Add(new tAA_MAD_Type11DataTable(ds.Tables["tAA_MAD_Type11"]));
                }
                if ((ds.Tables["tAA_MAD_Type12"] != null)) {
                    base.Tables.Add(new tAA_MAD_Type12DataTable(ds.Tables["tAA_MAD_Type12"]));
                }
                if ((ds.Tables["tAA_MAD_Type2"] != null)) {
                    base.Tables.Add(new tAA_MAD_Type2DataTable(ds.Tables["tAA_MAD_Type2"]));
                }
                if ((ds.Tables["tAA_MAD_Type3"] != null)) {
                    base.Tables.Add(new tAA_MAD_Type3DataTable(ds.Tables["tAA_MAD_Type3"]));
                }
                if ((ds.Tables["tAA_MAD_Type4"] != null)) {
                    base.Tables.Add(new tAA_MAD_Type4DataTable(ds.Tables["tAA_MAD_Type4"]));
                }
                if ((ds.Tables["tAA_MAD_Type6"] != null)) {
                    base.Tables.Add(new tAA_MAD_Type6DataTable(ds.Tables["tAA_MAD_Type6"]));
                }
                if ((ds.Tables["tAA_MAD_Type7"] != null)) {
                    base.Tables.Add(new tAA_MAD_Type7DataTable(ds.Tables["tAA_MAD_Type7"]));
                }
                if ((ds.Tables["tAA_MAD_Type8"] != null)) {
                    base.Tables.Add(new tAA_MAD_Type8DataTable(ds.Tables["tAA_MAD_Type8"]));
                }
                if ((ds.Tables["tAA_MAD_Type9"] != null)) {
                    base.Tables.Add(new tAA_MAD_Type9DataTable(ds.Tables["tAA_MAD_Type9"]));
                }
                if ((ds.Tables["tAA_MSC_Version"] != null)) {
                    base.Tables.Add(new tAA_MSC_VersionDataTable(ds.Tables["tAA_MSC_Version"]));
                }
                if ((ds.Tables["tAA_Parcel_InspectionType"] != null)) {
                    base.Tables.Add(new tAA_Parcel_InspectionTypeDataTable(ds.Tables["tAA_Parcel_InspectionType"]));
                }
                if ((ds.Tables["tAA_Parcel_PLandType"] != null)) {
                    base.Tables.Add(new tAA_Parcel_PLandTypeDataTable(ds.Tables["tAA_Parcel_PLandType"]));
                }
                if ((ds.Tables["tAA_ParcelValue"] != null)) {
                    base.Tables.Add(new tAA_ParcelValueDataTable(ds.Tables["tAA_ParcelValue"]));
                }
                if ((ds.Tables["tAA_Parcel_PImprovement"] != null)) {
                    base.Tables.Add(new tAA_Parcel_PImprovementDataTable(ds.Tables["tAA_Parcel_PImprovement"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tabletAA_AssessmentType = ((tAA_AssessmentTypeDataTable)(base.Tables["tAA_AssessmentType"]));
            if ((initTable == true)) {
                if ((this.tabletAA_AssessmentType != null)) {
                    this.tabletAA_AssessmentType.InitVars();
                }
            }
            this.tabletAA_Crop = ((tAA_CropDataTable)(base.Tables["tAA_Crop"]));
            if ((initTable == true)) {
                if ((this.tabletAA_Crop != null)) {
                    this.tabletAA_Crop.InitVars();
                }
            }
            this.tabletAA_Land = ((tAA_LandDataTable)(base.Tables["tAA_Land"]));
            if ((initTable == true)) {
                if ((this.tabletAA_Land != null)) {
                    this.tabletAA_Land.InitVars();
                }
            }
            this.tabletAA_LandUnit = ((tAA_LandUnitDataTable)(base.Tables["tAA_LandUnit"]));
            if ((initTable == true)) {
                if ((this.tabletAA_LandUnit != null)) {
                    this.tabletAA_LandUnit.InitVars();
                }
            }
            this.tabletAA_MA_Type1 = ((tAA_MA_Type1DataTable)(base.Tables["tAA_MA_Type1"]));
            if ((initTable == true)) {
                if ((this.tabletAA_MA_Type1 != null)) {
                    this.tabletAA_MA_Type1.InitVars();
                }
            }
            this.tabletAA_MA_Type10 = ((tAA_MA_Type10DataTable)(base.Tables["tAA_MA_Type10"]));
            if ((initTable == true)) {
                if ((this.tabletAA_MA_Type10 != null)) {
                    this.tabletAA_MA_Type10.InitVars();
                }
            }
            this.tabletAA_MA_Type11 = ((tAA_MA_Type11DataTable)(base.Tables["tAA_MA_Type11"]));
            if ((initTable == true)) {
                if ((this.tabletAA_MA_Type11 != null)) {
                    this.tabletAA_MA_Type11.InitVars();
                }
            }
            this.tabletAA_MA_Type12 = ((tAA_MA_Type12DataTable)(base.Tables["tAA_MA_Type12"]));
            if ((initTable == true)) {
                if ((this.tabletAA_MA_Type12 != null)) {
                    this.tabletAA_MA_Type12.InitVars();
                }
            }
            this.tabletAA_MA_Type2 = ((tAA_MA_Type2DataTable)(base.Tables["tAA_MA_Type2"]));
            if ((initTable == true)) {
                if ((this.tabletAA_MA_Type2 != null)) {
                    this.tabletAA_MA_Type2.InitVars();
                }
            }
            this.tabletAA_MA_Type3 = ((tAA_MA_Type3DataTable)(base.Tables["tAA_MA_Type3"]));
            if ((initTable == true)) {
                if ((this.tabletAA_MA_Type3 != null)) {
                    this.tabletAA_MA_Type3.InitVars();
                }
            }
            this.tabletAA_MA_Type4 = ((tAA_MA_Type4DataTable)(base.Tables["tAA_MA_Type4"]));
            if ((initTable == true)) {
                if ((this.tabletAA_MA_Type4 != null)) {
                    this.tabletAA_MA_Type4.InitVars();
                }
            }
            this.tabletAA_MA_Type6 = ((tAA_MA_Type6DataTable)(base.Tables["tAA_MA_Type6"]));
            if ((initTable == true)) {
                if ((this.tabletAA_MA_Type6 != null)) {
                    this.tabletAA_MA_Type6.InitVars();
                }
            }
            this.tabletAA_MA_Type7 = ((tAA_MA_Type7DataTable)(base.Tables["tAA_MA_Type7"]));
            if ((initTable == true)) {
                if ((this.tabletAA_MA_Type7 != null)) {
                    this.tabletAA_MA_Type7.InitVars();
                }
            }
            this.tabletAA_MA_Type8 = ((tAA_MA_Type8DataTable)(base.Tables["tAA_MA_Type8"]));
            if ((initTable == true)) {
                if ((this.tabletAA_MA_Type8 != null)) {
                    this.tabletAA_MA_Type8.InitVars();
                }
            }
            this.tabletAA_MA_Type9 = ((tAA_MA_Type9DataTable)(base.Tables["tAA_MA_Type9"]));
            if ((initTable == true)) {
                if ((this.tabletAA_MA_Type9 != null)) {
                    this.tabletAA_MA_Type9.InitVars();
                }
            }
            this.tabletAA_MAD_Type1 = ((tAA_MAD_Type1DataTable)(base.Tables["tAA_MAD_Type1"]));
            if ((initTable == true)) {
                if ((this.tabletAA_MAD_Type1 != null)) {
                    this.tabletAA_MAD_Type1.InitVars();
                }
            }
            this.tabletAA_MAD_Type10 = ((tAA_MAD_Type10DataTable)(base.Tables["tAA_MAD_Type10"]));
            if ((initTable == true)) {
                if ((this.tabletAA_MAD_Type10 != null)) {
                    this.tabletAA_MAD_Type10.InitVars();
                }
            }
            this.tabletAA_MAD_Type11 = ((tAA_MAD_Type11DataTable)(base.Tables["tAA_MAD_Type11"]));
            if ((initTable == true)) {
                if ((this.tabletAA_MAD_Type11 != null)) {
                    this.tabletAA_MAD_Type11.InitVars();
                }
            }
            this.tabletAA_MAD_Type12 = ((tAA_MAD_Type12DataTable)(base.Tables["tAA_MAD_Type12"]));
            if ((initTable == true)) {
                if ((this.tabletAA_MAD_Type12 != null)) {
                    this.tabletAA_MAD_Type12.InitVars();
                }
            }
            this.tabletAA_MAD_Type2 = ((tAA_MAD_Type2DataTable)(base.Tables["tAA_MAD_Type2"]));
            if ((initTable == true)) {
                if ((this.tabletAA_MAD_Type2 != null)) {
                    this.tabletAA_MAD_Type2.InitVars();
                }
            }
            this.tabletAA_MAD_Type3 = ((tAA_MAD_Type3DataTable)(base.Tables["tAA_MAD_Type3"]));
            if ((initTable == true)) {
                if ((this.tabletAA_MAD_Type3 != null)) {
                    this.tabletAA_MAD_Type3.InitVars();
                }
            }
            this.tabletAA_MAD_Type4 = ((tAA_MAD_Type4DataTable)(base.Tables["tAA_MAD_Type4"]));
            if ((initTable == true)) {
                if ((this.tabletAA_MAD_Type4 != null)) {
                    this.tabletAA_MAD_Type4.InitVars();
                }
            }
            this.tabletAA_MAD_Type6 = ((tAA_MAD_Type6DataTable)(base.Tables["tAA_MAD_Type6"]));
            if ((initTable == true)) {
                if ((this.tabletAA_MAD_Type6 != null)) {
                    this.tabletAA_MAD_Type6.InitVars();
                }
            }
            this.tabletAA_MAD_Type7 = ((tAA_MAD_Type7DataTable)(base.Tables["tAA_MAD_Type7"]));
            if ((initTable == true)) {
                if ((this.tabletAA_MAD_Type7 != null)) {
                    this.tabletAA_MAD_Type7.InitVars();
                }
            }
            this.tabletAA_MAD_Type8 = ((tAA_MAD_Type8DataTable)(base.Tables["tAA_MAD_Type8"]));
            if ((initTable == true)) {
                if ((this.tabletAA_MAD_Type8 != null)) {
                    this.tabletAA_MAD_Type8.InitVars();
                }
            }
            this.tabletAA_MAD_Type9 = ((tAA_MAD_Type9DataTable)(base.Tables["tAA_MAD_Type9"]));
            if ((initTable == true)) {
                if ((this.tabletAA_MAD_Type9 != null)) {
                    this.tabletAA_MAD_Type9.InitVars();
                }
            }
            this.tabletAA_MSC_Version = ((tAA_MSC_VersionDataTable)(base.Tables["tAA_MSC_Version"]));
            if ((initTable == true)) {
                if ((this.tabletAA_MSC_Version != null)) {
                    this.tabletAA_MSC_Version.InitVars();
                }
            }
            this.tabletAA_Parcel_InspectionType = ((tAA_Parcel_InspectionTypeDataTable)(base.Tables["tAA_Parcel_InspectionType"]));
            if ((initTable == true)) {
                if ((this.tabletAA_Parcel_InspectionType != null)) {
                    this.tabletAA_Parcel_InspectionType.InitVars();
                }
            }
            this.tabletAA_Parcel_PLandType = ((tAA_Parcel_PLandTypeDataTable)(base.Tables["tAA_Parcel_PLandType"]));
            if ((initTable == true)) {
                if ((this.tabletAA_Parcel_PLandType != null)) {
                    this.tabletAA_Parcel_PLandType.InitVars();
                }
            }
            this.tabletAA_ParcelValue = ((tAA_ParcelValueDataTable)(base.Tables["tAA_ParcelValue"]));
            if ((initTable == true)) {
                if ((this.tabletAA_ParcelValue != null)) {
                    this.tabletAA_ParcelValue.InitVars();
                }
            }
            this.tabletAA_Parcel_PImprovement = ((tAA_Parcel_PImprovementDataTable)(base.Tables["tAA_Parcel_PImprovement"]));
            if ((initTable == true)) {
                if ((this.tabletAA_Parcel_PImprovement != null)) {
                    this.tabletAA_Parcel_PImprovement.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "f25000FieldUse";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/f25000FieldUse.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tabletAA_AssessmentType = new tAA_AssessmentTypeDataTable();
            base.Tables.Add(this.tabletAA_AssessmentType);
            this.tabletAA_Crop = new tAA_CropDataTable();
            base.Tables.Add(this.tabletAA_Crop);
            this.tabletAA_Land = new tAA_LandDataTable();
            base.Tables.Add(this.tabletAA_Land);
            this.tabletAA_LandUnit = new tAA_LandUnitDataTable();
            base.Tables.Add(this.tabletAA_LandUnit);
            this.tabletAA_MA_Type1 = new tAA_MA_Type1DataTable();
            base.Tables.Add(this.tabletAA_MA_Type1);
            this.tabletAA_MA_Type10 = new tAA_MA_Type10DataTable();
            base.Tables.Add(this.tabletAA_MA_Type10);
            this.tabletAA_MA_Type11 = new tAA_MA_Type11DataTable();
            base.Tables.Add(this.tabletAA_MA_Type11);
            this.tabletAA_MA_Type12 = new tAA_MA_Type12DataTable();
            base.Tables.Add(this.tabletAA_MA_Type12);
            this.tabletAA_MA_Type2 = new tAA_MA_Type2DataTable();
            base.Tables.Add(this.tabletAA_MA_Type2);
            this.tabletAA_MA_Type3 = new tAA_MA_Type3DataTable();
            base.Tables.Add(this.tabletAA_MA_Type3);
            this.tabletAA_MA_Type4 = new tAA_MA_Type4DataTable();
            base.Tables.Add(this.tabletAA_MA_Type4);
            this.tabletAA_MA_Type6 = new tAA_MA_Type6DataTable();
            base.Tables.Add(this.tabletAA_MA_Type6);
            this.tabletAA_MA_Type7 = new tAA_MA_Type7DataTable();
            base.Tables.Add(this.tabletAA_MA_Type7);
            this.tabletAA_MA_Type8 = new tAA_MA_Type8DataTable();
            base.Tables.Add(this.tabletAA_MA_Type8);
            this.tabletAA_MA_Type9 = new tAA_MA_Type9DataTable();
            base.Tables.Add(this.tabletAA_MA_Type9);
            this.tabletAA_MAD_Type1 = new tAA_MAD_Type1DataTable();
            base.Tables.Add(this.tabletAA_MAD_Type1);
            this.tabletAA_MAD_Type10 = new tAA_MAD_Type10DataTable();
            base.Tables.Add(this.tabletAA_MAD_Type10);
            this.tabletAA_MAD_Type11 = new tAA_MAD_Type11DataTable();
            base.Tables.Add(this.tabletAA_MAD_Type11);
            this.tabletAA_MAD_Type12 = new tAA_MAD_Type12DataTable();
            base.Tables.Add(this.tabletAA_MAD_Type12);
            this.tabletAA_MAD_Type2 = new tAA_MAD_Type2DataTable();
            base.Tables.Add(this.tabletAA_MAD_Type2);
            this.tabletAA_MAD_Type3 = new tAA_MAD_Type3DataTable();
            base.Tables.Add(this.tabletAA_MAD_Type3);
            this.tabletAA_MAD_Type4 = new tAA_MAD_Type4DataTable();
            base.Tables.Add(this.tabletAA_MAD_Type4);
            this.tabletAA_MAD_Type6 = new tAA_MAD_Type6DataTable();
            base.Tables.Add(this.tabletAA_MAD_Type6);
            this.tabletAA_MAD_Type7 = new tAA_MAD_Type7DataTable();
            base.Tables.Add(this.tabletAA_MAD_Type7);
            this.tabletAA_MAD_Type8 = new tAA_MAD_Type8DataTable();
            base.Tables.Add(this.tabletAA_MAD_Type8);
            this.tabletAA_MAD_Type9 = new tAA_MAD_Type9DataTable();
            base.Tables.Add(this.tabletAA_MAD_Type9);
            this.tabletAA_MSC_Version = new tAA_MSC_VersionDataTable();
            base.Tables.Add(this.tabletAA_MSC_Version);
            this.tabletAA_Parcel_InspectionType = new tAA_Parcel_InspectionTypeDataTable();
            base.Tables.Add(this.tabletAA_Parcel_InspectionType);
            this.tabletAA_Parcel_PLandType = new tAA_Parcel_PLandTypeDataTable();
            base.Tables.Add(this.tabletAA_Parcel_PLandType);
            this.tabletAA_ParcelValue = new tAA_ParcelValueDataTable();
            base.Tables.Add(this.tabletAA_ParcelValue);
            this.tabletAA_Parcel_PImprovement = new tAA_Parcel_PImprovementDataTable();
            base.Tables.Add(this.tabletAA_Parcel_PImprovement);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializetAA_AssessmentType() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializetAA_Crop() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializetAA_Land() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializetAA_LandUnit() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializetAA_MA_Type1() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializetAA_MA_Type10() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializetAA_MA_Type11() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializetAA_MA_Type12() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializetAA_MA_Type2() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializetAA_MA_Type3() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializetAA_MA_Type4() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializetAA_MA_Type6() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializetAA_MA_Type7() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializetAA_MA_Type8() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializetAA_MA_Type9() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializetAA_MAD_Type1() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializetAA_MAD_Type10() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializetAA_MAD_Type11() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializetAA_MAD_Type12() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializetAA_MAD_Type2() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializetAA_MAD_Type3() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializetAA_MAD_Type4() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializetAA_MAD_Type6() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializetAA_MAD_Type7() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializetAA_MAD_Type8() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializetAA_MAD_Type9() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializetAA_MSC_Version() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializetAA_Parcel_InspectionType() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializetAA_Parcel_PLandType() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializetAA_ParcelValue() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializetAA_Parcel_PImprovement() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            f25000FieldUse ds = new f25000FieldUse();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void tAA_AssessmentTypeRowChangeEventHandler(object sender, tAA_AssessmentTypeRowChangeEvent e);
        
        public delegate void tAA_CropRowChangeEventHandler(object sender, tAA_CropRowChangeEvent e);
        
        public delegate void tAA_LandRowChangeEventHandler(object sender, tAA_LandRowChangeEvent e);
        
        public delegate void tAA_LandUnitRowChangeEventHandler(object sender, tAA_LandUnitRowChangeEvent e);
        
        public delegate void tAA_MA_Type1RowChangeEventHandler(object sender, tAA_MA_Type1RowChangeEvent e);
        
        public delegate void tAA_MA_Type10RowChangeEventHandler(object sender, tAA_MA_Type10RowChangeEvent e);
        
        public delegate void tAA_MA_Type11RowChangeEventHandler(object sender, tAA_MA_Type11RowChangeEvent e);
        
        public delegate void tAA_MA_Type12RowChangeEventHandler(object sender, tAA_MA_Type12RowChangeEvent e);
        
        public delegate void tAA_MA_Type2RowChangeEventHandler(object sender, tAA_MA_Type2RowChangeEvent e);
        
        public delegate void tAA_MA_Type3RowChangeEventHandler(object sender, tAA_MA_Type3RowChangeEvent e);
        
        public delegate void tAA_MA_Type4RowChangeEventHandler(object sender, tAA_MA_Type4RowChangeEvent e);
        
        public delegate void tAA_MA_Type6RowChangeEventHandler(object sender, tAA_MA_Type6RowChangeEvent e);
        
        public delegate void tAA_MA_Type7RowChangeEventHandler(object sender, tAA_MA_Type7RowChangeEvent e);
        
        public delegate void tAA_MA_Type8RowChangeEventHandler(object sender, tAA_MA_Type8RowChangeEvent e);
        
        public delegate void tAA_MA_Type9RowChangeEventHandler(object sender, tAA_MA_Type9RowChangeEvent e);
        
        public delegate void tAA_MAD_Type1RowChangeEventHandler(object sender, tAA_MAD_Type1RowChangeEvent e);
        
        public delegate void tAA_MAD_Type10RowChangeEventHandler(object sender, tAA_MAD_Type10RowChangeEvent e);
        
        public delegate void tAA_MAD_Type11RowChangeEventHandler(object sender, tAA_MAD_Type11RowChangeEvent e);
        
        public delegate void tAA_MAD_Type12RowChangeEventHandler(object sender, tAA_MAD_Type12RowChangeEvent e);
        
        public delegate void tAA_MAD_Type2RowChangeEventHandler(object sender, tAA_MAD_Type2RowChangeEvent e);
        
        public delegate void tAA_MAD_Type3RowChangeEventHandler(object sender, tAA_MAD_Type3RowChangeEvent e);
        
        public delegate void tAA_MAD_Type4RowChangeEventHandler(object sender, tAA_MAD_Type4RowChangeEvent e);
        
        public delegate void tAA_MAD_Type6RowChangeEventHandler(object sender, tAA_MAD_Type6RowChangeEvent e);
        
        public delegate void tAA_MAD_Type7RowChangeEventHandler(object sender, tAA_MAD_Type7RowChangeEvent e);
        
        public delegate void tAA_MAD_Type8RowChangeEventHandler(object sender, tAA_MAD_Type8RowChangeEvent e);
        
        public delegate void tAA_MAD_Type9RowChangeEventHandler(object sender, tAA_MAD_Type9RowChangeEvent e);
        
        public delegate void tAA_MSC_VersionRowChangeEventHandler(object sender, tAA_MSC_VersionRowChangeEvent e);
        
        public delegate void tAA_Parcel_InspectionTypeRowChangeEventHandler(object sender, tAA_Parcel_InspectionTypeRowChangeEvent e);
        
        public delegate void tAA_Parcel_PLandTypeRowChangeEventHandler(object sender, tAA_Parcel_PLandTypeRowChangeEvent e);
        
        public delegate void tAA_ParcelValueRowChangeEventHandler(object sender, tAA_ParcelValueRowChangeEvent e);
        
        public delegate void tAA_Parcel_PImprovementRowChangeEventHandler(object sender, tAA_Parcel_PImprovementRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class tAA_AssessmentTypeDataTable : global::System.Data.TypedTableBase<tAA_AssessmentTypeRow> {
            
            private global::System.Data.DataColumn columnAssessmentTypeID;
            
            private global::System.Data.DataColumn columnAssessmentType;
            
            private global::System.Data.DataColumn columnModuleID;
            
            private global::System.Data.DataColumn columnInsertedBy;
            
            private global::System.Data.DataColumn columnInsertedDate;
            
            private global::System.Data.DataColumn columnUpdatedBy;
            
            private global::System.Data.DataColumn columnIsDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tAA_AssessmentTypeDataTable() {
                this.TableName = "tAA_AssessmentType";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal tAA_AssessmentTypeDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected tAA_AssessmentTypeDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AssessmentTypeIDColumn {
                get {
                    return this.columnAssessmentTypeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AssessmentTypeColumn {
                get {
                    return this.columnAssessmentType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ModuleIDColumn {
                get {
                    return this.columnModuleID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InsertedByColumn {
                get {
                    return this.columnInsertedBy;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InsertedDateColumn {
                get {
                    return this.columnInsertedDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UpdatedByColumn {
                get {
                    return this.columnUpdatedBy;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsDeletedColumn {
                get {
                    return this.columnIsDeleted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tAA_AssessmentTypeRow this[int index] {
                get {
                    return ((tAA_AssessmentTypeRow)(this.Rows[index]));
                }
            }
            
            public event tAA_AssessmentTypeRowChangeEventHandler tAA_AssessmentTypeRowChanging;
            
            public event tAA_AssessmentTypeRowChangeEventHandler tAA_AssessmentTypeRowChanged;
            
            public event tAA_AssessmentTypeRowChangeEventHandler tAA_AssessmentTypeRowDeleting;
            
            public event tAA_AssessmentTypeRowChangeEventHandler tAA_AssessmentTypeRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddtAA_AssessmentTypeRow(tAA_AssessmentTypeRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tAA_AssessmentTypeRow AddtAA_AssessmentTypeRow(short AssessmentTypeID, string AssessmentType, int ModuleID, int InsertedBy, System.DateTime InsertedDate, int UpdatedBy, bool IsDeleted) {
                tAA_AssessmentTypeRow rowtAA_AssessmentTypeRow = ((tAA_AssessmentTypeRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        AssessmentTypeID,
                        AssessmentType,
                        ModuleID,
                        InsertedBy,
                        InsertedDate,
                        UpdatedBy,
                        IsDeleted};
                rowtAA_AssessmentTypeRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowtAA_AssessmentTypeRow);
                return rowtAA_AssessmentTypeRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                tAA_AssessmentTypeDataTable cln = ((tAA_AssessmentTypeDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new tAA_AssessmentTypeDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnAssessmentTypeID = base.Columns["AssessmentTypeID"];
                this.columnAssessmentType = base.Columns["AssessmentType"];
                this.columnModuleID = base.Columns["ModuleID"];
                this.columnInsertedBy = base.Columns["InsertedBy"];
                this.columnInsertedDate = base.Columns["InsertedDate"];
                this.columnUpdatedBy = base.Columns["UpdatedBy"];
                this.columnIsDeleted = base.Columns["IsDeleted"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnAssessmentTypeID = new global::System.Data.DataColumn("AssessmentTypeID", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAssessmentTypeID);
                this.columnAssessmentType = new global::System.Data.DataColumn("AssessmentType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAssessmentType);
                this.columnModuleID = new global::System.Data.DataColumn("ModuleID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnModuleID);
                this.columnInsertedBy = new global::System.Data.DataColumn("InsertedBy", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInsertedBy);
                this.columnInsertedDate = new global::System.Data.DataColumn("InsertedDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInsertedDate);
                this.columnUpdatedBy = new global::System.Data.DataColumn("UpdatedBy", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUpdatedBy);
                this.columnIsDeleted = new global::System.Data.DataColumn("IsDeleted", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsDeleted);
                this.columnAssessmentTypeID.ReadOnly = true;
                this.columnAssessmentType.ReadOnly = true;
                this.columnAssessmentType.MaxLength = 50;
                this.columnModuleID.ReadOnly = true;
                this.columnInsertedBy.ReadOnly = true;
                this.columnInsertedDate.ReadOnly = true;
                this.columnUpdatedBy.ReadOnly = true;
                this.columnIsDeleted.ReadOnly = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tAA_AssessmentTypeRow NewtAA_AssessmentTypeRow() {
                return ((tAA_AssessmentTypeRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new tAA_AssessmentTypeRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(tAA_AssessmentTypeRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.tAA_AssessmentTypeRowChanged != null)) {
                    this.tAA_AssessmentTypeRowChanged(this, new tAA_AssessmentTypeRowChangeEvent(((tAA_AssessmentTypeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.tAA_AssessmentTypeRowChanging != null)) {
                    this.tAA_AssessmentTypeRowChanging(this, new tAA_AssessmentTypeRowChangeEvent(((tAA_AssessmentTypeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.tAA_AssessmentTypeRowDeleted != null)) {
                    this.tAA_AssessmentTypeRowDeleted(this, new tAA_AssessmentTypeRowChangeEvent(((tAA_AssessmentTypeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.tAA_AssessmentTypeRowDeleting != null)) {
                    this.tAA_AssessmentTypeRowDeleting(this, new tAA_AssessmentTypeRowChangeEvent(((tAA_AssessmentTypeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovetAA_AssessmentTypeRow(tAA_AssessmentTypeRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                f25000FieldUse ds = new f25000FieldUse();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "tAA_AssessmentTypeDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class tAA_CropDataTable : global::System.Data.TypedTableBase<tAA_CropRow> {
            
            private global::System.Data.DataColumn columnCropID;
            
            private global::System.Data.DataColumn columnValueSliceID;
            
            private global::System.Data.DataColumn columnCropCode;
            
            private global::System.Data.DataColumn columnDescription;
            
            private global::System.Data.DataColumn columnIsFruitTree;
            
            private global::System.Data.DataColumn columnPlanted;
            
            private global::System.Data.DataColumn columnAdjust;
            
            private global::System.Data.DataColumn columnAcres;
            
            private global::System.Data.DataColumn columnValuePer;
            
            private global::System.Data.DataColumn columnValue;
            
            private global::System.Data.DataColumn columnModuleID;
            
            private global::System.Data.DataColumn columnInsertedBy;
            
            private global::System.Data.DataColumn columnInsertedDate;
            
            private global::System.Data.DataColumn columnUpdatedBy;
            
            private global::System.Data.DataColumn columnIsDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tAA_CropDataTable() {
                this.TableName = "tAA_Crop";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal tAA_CropDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected tAA_CropDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CropIDColumn {
                get {
                    return this.columnCropID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ValueSliceIDColumn {
                get {
                    return this.columnValueSliceID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CropCodeColumn {
                get {
                    return this.columnCropCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsFruitTreeColumn {
                get {
                    return this.columnIsFruitTree;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PlantedColumn {
                get {
                    return this.columnPlanted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AdjustColumn {
                get {
                    return this.columnAdjust;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AcresColumn {
                get {
                    return this.columnAcres;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ValuePerColumn {
                get {
                    return this.columnValuePer;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ValueColumn {
                get {
                    return this.columnValue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ModuleIDColumn {
                get {
                    return this.columnModuleID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InsertedByColumn {
                get {
                    return this.columnInsertedBy;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InsertedDateColumn {
                get {
                    return this.columnInsertedDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UpdatedByColumn {
                get {
                    return this.columnUpdatedBy;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsDeletedColumn {
                get {
                    return this.columnIsDeleted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tAA_CropRow this[int index] {
                get {
                    return ((tAA_CropRow)(this.Rows[index]));
                }
            }
            
            public event tAA_CropRowChangeEventHandler tAA_CropRowChanging;
            
            public event tAA_CropRowChangeEventHandler tAA_CropRowChanged;
            
            public event tAA_CropRowChangeEventHandler tAA_CropRowDeleting;
            
            public event tAA_CropRowChangeEventHandler tAA_CropRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddtAA_CropRow(tAA_CropRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tAA_CropRow AddtAA_CropRow(int CropID, int ValueSliceID, string CropCode, string Description, bool IsFruitTree, short Planted, decimal Adjust, decimal Acres, decimal ValuePer, decimal Value, short ModuleID, int InsertedBy, System.DateTime InsertedDate, int UpdatedBy, bool IsDeleted) {
                tAA_CropRow rowtAA_CropRow = ((tAA_CropRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        CropID,
                        ValueSliceID,
                        CropCode,
                        Description,
                        IsFruitTree,
                        Planted,
                        Adjust,
                        Acres,
                        ValuePer,
                        Value,
                        ModuleID,
                        InsertedBy,
                        InsertedDate,
                        UpdatedBy,
                        IsDeleted};
                rowtAA_CropRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowtAA_CropRow);
                return rowtAA_CropRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                tAA_CropDataTable cln = ((tAA_CropDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new tAA_CropDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCropID = base.Columns["CropID"];
                this.columnValueSliceID = base.Columns["ValueSliceID"];
                this.columnCropCode = base.Columns["CropCode"];
                this.columnDescription = base.Columns["Description"];
                this.columnIsFruitTree = base.Columns["IsFruitTree"];
                this.columnPlanted = base.Columns["Planted"];
                this.columnAdjust = base.Columns["Adjust"];
                this.columnAcres = base.Columns["Acres"];
                this.columnValuePer = base.Columns["ValuePer"];
                this.columnValue = base.Columns["Value"];
                this.columnModuleID = base.Columns["ModuleID"];
                this.columnInsertedBy = base.Columns["InsertedBy"];
                this.columnInsertedDate = base.Columns["InsertedDate"];
                this.columnUpdatedBy = base.Columns["UpdatedBy"];
                this.columnIsDeleted = base.Columns["IsDeleted"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCropID = new global::System.Data.DataColumn("CropID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCropID);
                this.columnValueSliceID = new global::System.Data.DataColumn("ValueSliceID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnValueSliceID);
                this.columnCropCode = new global::System.Data.DataColumn("CropCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCropCode);
                this.columnDescription = new global::System.Data.DataColumn("Description", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescription);
                this.columnIsFruitTree = new global::System.Data.DataColumn("IsFruitTree", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsFruitTree);
                this.columnPlanted = new global::System.Data.DataColumn("Planted", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPlanted);
                this.columnAdjust = new global::System.Data.DataColumn("Adjust", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAdjust);
                this.columnAcres = new global::System.Data.DataColumn("Acres", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAcres);
                this.columnValuePer = new global::System.Data.DataColumn("ValuePer", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnValuePer);
                this.columnValue = new global::System.Data.DataColumn("Value", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnValue);
                this.columnModuleID = new global::System.Data.DataColumn("ModuleID", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnModuleID);
                this.columnInsertedBy = new global::System.Data.DataColumn("InsertedBy", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInsertedBy);
                this.columnInsertedDate = new global::System.Data.DataColumn("InsertedDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInsertedDate);
                this.columnUpdatedBy = new global::System.Data.DataColumn("UpdatedBy", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUpdatedBy);
                this.columnIsDeleted = new global::System.Data.DataColumn("IsDeleted", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsDeleted);
                this.columnCropID.ReadOnly = true;
                this.columnValueSliceID.ReadOnly = true;
                this.columnCropCode.ReadOnly = true;
                this.columnCropCode.MaxLength = 20;
                this.columnDescription.ReadOnly = true;
                this.columnDescription.MaxLength = 50;
                this.columnIsFruitTree.ReadOnly = true;
                this.columnPlanted.ReadOnly = true;
                this.columnAdjust.ReadOnly = true;
                this.columnAcres.ReadOnly = true;
                this.columnValuePer.ReadOnly = true;
                this.columnValue.ReadOnly = true;
                this.columnModuleID.ReadOnly = true;
                this.columnInsertedBy.ReadOnly = true;
                this.columnInsertedDate.ReadOnly = true;
                this.columnUpdatedBy.ReadOnly = true;
                this.columnIsDeleted.ReadOnly = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tAA_CropRow NewtAA_CropRow() {
                return ((tAA_CropRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new tAA_CropRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(tAA_CropRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.tAA_CropRowChanged != null)) {
                    this.tAA_CropRowChanged(this, new tAA_CropRowChangeEvent(((tAA_CropRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.tAA_CropRowChanging != null)) {
                    this.tAA_CropRowChanging(this, new tAA_CropRowChangeEvent(((tAA_CropRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.tAA_CropRowDeleted != null)) {
                    this.tAA_CropRowDeleted(this, new tAA_CropRowChangeEvent(((tAA_CropRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.tAA_CropRowDeleting != null)) {
                    this.tAA_CropRowDeleting(this, new tAA_CropRowChangeEvent(((tAA_CropRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovetAA_CropRow(tAA_CropRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                f25000FieldUse ds = new f25000FieldUse();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "tAA_CropDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class tAA_LandDataTable : global::System.Data.TypedTableBase<tAA_LandRow> {
            
            private global::System.Data.DataColumn columnLUID;
            
            private global::System.Data.DataColumn columnValueSliceID;
            
            private global::System.Data.DataColumn columnLandTypeID1;
            
            private global::System.Data.DataColumn columnLandTypeID2;
            
            private global::System.Data.DataColumn columnLandTypeID3;
            
            private global::System.Data.DataColumn columnLandCode;
            
            private global::System.Data.DataColumn columnReportAS;
            
            private global::System.Data.DataColumn columnUnitType;
            
            private global::System.Data.DataColumn columnUnits;
            
            private global::System.Data.DataColumn columnAdjustmentType;
            
            private global::System.Data.DataColumn columnAdjustment;
            
            private global::System.Data.DataColumn columnAdjDescription;
            
            private global::System.Data.DataColumn columnModuleID;
            
            private global::System.Data.DataColumn columnInsertedBy;
            
            private global::System.Data.DataColumn columnInsertedDate;
            
            private global::System.Data.DataColumn columnUpdatedBy;
            
            private global::System.Data.DataColumn columnIsDeleted;
            
            private global::System.Data.DataColumn columnUseAdjustmentType;
            
            private global::System.Data.DataColumn columnUseAdjustment;
            
            private global::System.Data.DataColumn columnUseAdjDescription;
            
            private global::System.Data.DataColumn columnLotWidth;
            
            private global::System.Data.DataColumn columnLotDepth;
            
            private global::System.Data.DataColumn columnBaseMrktValue;
            
            private global::System.Data.DataColumn columnFinalMrktValue;
            
            private global::System.Data.DataColumn columnFinalUseValue;
            
            private global::System.Data.DataColumn columnLandShape;
            
            private global::System.Data.DataColumn columnFrontage;
            
            private global::System.Data.DataColumn columnProgramID;
            
            private global::System.Data.DataColumn columnLotWidthTemp;
            
            private global::System.Data.DataColumn columnLotDepthTemp;
            
            private global::System.Data.DataColumn columnSrAcres;
            
            private global::System.Data.DataColumn columnWeightedRating;
            
            private global::System.Data.DataColumn columnBaseValuePerUnit;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tAA_LandDataTable() {
                this.TableName = "tAA_Land";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal tAA_LandDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected tAA_LandDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LUIDColumn {
                get {
                    return this.columnLUID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ValueSliceIDColumn {
                get {
                    return this.columnValueSliceID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LandTypeID1Column {
                get {
                    return this.columnLandTypeID1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LandTypeID2Column {
                get {
                    return this.columnLandTypeID2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LandTypeID3Column {
                get {
                    return this.columnLandTypeID3;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LandCodeColumn {
                get {
                    return this.columnLandCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ReportASColumn {
                get {
                    return this.columnReportAS;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UnitTypeColumn {
                get {
                    return this.columnUnitType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UnitsColumn {
                get {
                    return this.columnUnits;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AdjustmentTypeColumn {
                get {
                    return this.columnAdjustmentType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AdjustmentColumn {
                get {
                    return this.columnAdjustment;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AdjDescriptionColumn {
                get {
                    return this.columnAdjDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ModuleIDColumn {
                get {
                    return this.columnModuleID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InsertedByColumn {
                get {
                    return this.columnInsertedBy;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InsertedDateColumn {
                get {
                    return this.columnInsertedDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UpdatedByColumn {
                get {
                    return this.columnUpdatedBy;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsDeletedColumn {
                get {
                    return this.columnIsDeleted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UseAdjustmentTypeColumn {
                get {
                    return this.columnUseAdjustmentType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UseAdjustmentColumn {
                get {
                    return this.columnUseAdjustment;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UseAdjDescriptionColumn {
                get {
                    return this.columnUseAdjDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LotWidthColumn {
                get {
                    return this.columnLotWidth;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LotDepthColumn {
                get {
                    return this.columnLotDepth;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BaseMrktValueColumn {
                get {
                    return this.columnBaseMrktValue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FinalMrktValueColumn {
                get {
                    return this.columnFinalMrktValue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FinalUseValueColumn {
                get {
                    return this.columnFinalUseValue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LandShapeColumn {
                get {
                    return this.columnLandShape;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FrontageColumn {
                get {
                    return this.columnFrontage;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProgramIDColumn {
                get {
                    return this.columnProgramID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LotWidthTempColumn {
                get {
                    return this.columnLotWidthTemp;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LotDepthTempColumn {
                get {
                    return this.columnLotDepthTemp;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SrAcresColumn {
                get {
                    return this.columnSrAcres;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WeightedRatingColumn {
                get {
                    return this.columnWeightedRating;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BaseValuePerUnitColumn {
                get {
                    return this.columnBaseValuePerUnit;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tAA_LandRow this[int index] {
                get {
                    return ((tAA_LandRow)(this.Rows[index]));
                }
            }
            
            public event tAA_LandRowChangeEventHandler tAA_LandRowChanging;
            
            public event tAA_LandRowChangeEventHandler tAA_LandRowChanged;
            
            public event tAA_LandRowChangeEventHandler tAA_LandRowDeleting;
            
            public event tAA_LandRowChangeEventHandler tAA_LandRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddtAA_LandRow(tAA_LandRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tAA_LandRow AddtAA_LandRow(
                        int LUID, 
                        int ValueSliceID, 
                        int LandTypeID1, 
                        int LandTypeID2, 
                        int LandTypeID3, 
                        string LandCode, 
                        string ReportAS, 
                        string UnitType, 
                        decimal Units, 
                        byte AdjustmentType, 
                        string Adjustment, 
                        string AdjDescription, 
                        short ModuleID, 
                        int InsertedBy, 
                        System.DateTime InsertedDate, 
                        int UpdatedBy, 
                        bool IsDeleted, 
                        byte UseAdjustmentType, 
                        string UseAdjustment, 
                        string UseAdjDescription, 
                        decimal LotWidth, 
                        decimal LotDepth, 
                        decimal BaseMrktValue, 
                        decimal FinalMrktValue, 
                        decimal FinalUseValue, 
                        string LandShape, 
                        decimal Frontage, 
                        byte ProgramID, 
                        string LotWidthTemp, 
                        string LotDepthTemp, 
                        decimal SrAcres, 
                        decimal WeightedRating, 
                        decimal BaseValuePerUnit) {
                tAA_LandRow rowtAA_LandRow = ((tAA_LandRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        LUID,
                        ValueSliceID,
                        LandTypeID1,
                        LandTypeID2,
                        LandTypeID3,
                        LandCode,
                        ReportAS,
                        UnitType,
                        Units,
                        AdjustmentType,
                        Adjustment,
                        AdjDescription,
                        ModuleID,
                        InsertedBy,
                        InsertedDate,
                        UpdatedBy,
                        IsDeleted,
                        UseAdjustmentType,
                        UseAdjustment,
                        UseAdjDescription,
                        LotWidth,
                        LotDepth,
                        BaseMrktValue,
                        FinalMrktValue,
                        FinalUseValue,
                        LandShape,
                        Frontage,
                        ProgramID,
                        LotWidthTemp,
                        LotDepthTemp,
                        SrAcres,
                        WeightedRating,
                        BaseValuePerUnit};
                rowtAA_LandRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowtAA_LandRow);
                return rowtAA_LandRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                tAA_LandDataTable cln = ((tAA_LandDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new tAA_LandDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnLUID = base.Columns["LUID"];
                this.columnValueSliceID = base.Columns["ValueSliceID"];
                this.columnLandTypeID1 = base.Columns["LandTypeID1"];
                this.columnLandTypeID2 = base.Columns["LandTypeID2"];
                this.columnLandTypeID3 = base.Columns["LandTypeID3"];
                this.columnLandCode = base.Columns["LandCode"];
                this.columnReportAS = base.Columns["ReportAS"];
                this.columnUnitType = base.Columns["UnitType"];
                this.columnUnits = base.Columns["Units"];
                this.columnAdjustmentType = base.Columns["AdjustmentType"];
                this.columnAdjustment = base.Columns["Adjustment"];
                this.columnAdjDescription = base.Columns["AdjDescription"];
                this.columnModuleID = base.Columns["ModuleID"];
                this.columnInsertedBy = base.Columns["InsertedBy"];
                this.columnInsertedDate = base.Columns["InsertedDate"];
                this.columnUpdatedBy = base.Columns["UpdatedBy"];
                this.columnIsDeleted = base.Columns["IsDeleted"];
                this.columnUseAdjustmentType = base.Columns["UseAdjustmentType"];
                this.columnUseAdjustment = base.Columns["UseAdjustment"];
                this.columnUseAdjDescription = base.Columns["UseAdjDescription"];
                this.columnLotWidth = base.Columns["LotWidth"];
                this.columnLotDepth = base.Columns["LotDepth"];
                this.columnBaseMrktValue = base.Columns["BaseMrktValue"];
                this.columnFinalMrktValue = base.Columns["FinalMrktValue"];
                this.columnFinalUseValue = base.Columns["FinalUseValue"];
                this.columnLandShape = base.Columns["LandShape"];
                this.columnFrontage = base.Columns["Frontage"];
                this.columnProgramID = base.Columns["ProgramID"];
                this.columnLotWidthTemp = base.Columns["LotWidthTemp"];
                this.columnLotDepthTemp = base.Columns["LotDepthTemp"];
                this.columnSrAcres = base.Columns["SrAcres"];
                this.columnWeightedRating = base.Columns["WeightedRating"];
                this.columnBaseValuePerUnit = base.Columns["BaseValuePerUnit"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnLUID = new global::System.Data.DataColumn("LUID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLUID);
                this.columnValueSliceID = new global::System.Data.DataColumn("ValueSliceID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnValueSliceID);
                this.columnLandTypeID1 = new global::System.Data.DataColumn("LandTypeID1", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLandTypeID1);
                this.columnLandTypeID2 = new global::System.Data.DataColumn("LandTypeID2", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLandTypeID2);
                this.columnLandTypeID3 = new global::System.Data.DataColumn("LandTypeID3", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLandTypeID3);
                this.columnLandCode = new global::System.Data.DataColumn("LandCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLandCode);
                this.columnReportAS = new global::System.Data.DataColumn("ReportAS", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnReportAS);
                this.columnUnitType = new global::System.Data.DataColumn("UnitType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUnitType);
                this.columnUnits = new global::System.Data.DataColumn("Units", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUnits);
                this.columnAdjustmentType = new global::System.Data.DataColumn("AdjustmentType", typeof(byte), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAdjustmentType);
                this.columnAdjustment = new global::System.Data.DataColumn("Adjustment", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAdjustment);
                this.columnAdjDescription = new global::System.Data.DataColumn("AdjDescription", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAdjDescription);
                this.columnModuleID = new global::System.Data.DataColumn("ModuleID", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnModuleID);
                this.columnInsertedBy = new global::System.Data.DataColumn("InsertedBy", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInsertedBy);
                this.columnInsertedDate = new global::System.Data.DataColumn("InsertedDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInsertedDate);
                this.columnUpdatedBy = new global::System.Data.DataColumn("UpdatedBy", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUpdatedBy);
                this.columnIsDeleted = new global::System.Data.DataColumn("IsDeleted", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsDeleted);
                this.columnUseAdjustmentType = new global::System.Data.DataColumn("UseAdjustmentType", typeof(byte), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUseAdjustmentType);
                this.columnUseAdjustment = new global::System.Data.DataColumn("UseAdjustment", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUseAdjustment);
                this.columnUseAdjDescription = new global::System.Data.DataColumn("UseAdjDescription", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUseAdjDescription);
                this.columnLotWidth = new global::System.Data.DataColumn("LotWidth", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLotWidth);
                this.columnLotDepth = new global::System.Data.DataColumn("LotDepth", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLotDepth);
                this.columnBaseMrktValue = new global::System.Data.DataColumn("BaseMrktValue", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBaseMrktValue);
                this.columnFinalMrktValue = new global::System.Data.DataColumn("FinalMrktValue", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFinalMrktValue);
                this.columnFinalUseValue = new global::System.Data.DataColumn("FinalUseValue", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFinalUseValue);
                this.columnLandShape = new global::System.Data.DataColumn("LandShape", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLandShape);
                this.columnFrontage = new global::System.Data.DataColumn("Frontage", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFrontage);
                this.columnProgramID = new global::System.Data.DataColumn("ProgramID", typeof(byte), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProgramID);
                this.columnLotWidthTemp = new global::System.Data.DataColumn("LotWidthTemp", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLotWidthTemp);
                this.columnLotDepthTemp = new global::System.Data.DataColumn("LotDepthTemp", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLotDepthTemp);
                this.columnSrAcres = new global::System.Data.DataColumn("SrAcres", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSrAcres);
                this.columnWeightedRating = new global::System.Data.DataColumn("WeightedRating", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWeightedRating);
                this.columnBaseValuePerUnit = new global::System.Data.DataColumn("BaseValuePerUnit", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBaseValuePerUnit);
                this.columnLUID.ReadOnly = true;
                this.columnValueSliceID.ReadOnly = true;
                this.columnLandTypeID1.ReadOnly = true;
                this.columnLandTypeID2.ReadOnly = true;
                this.columnLandTypeID3.ReadOnly = true;
                this.columnLandCode.ReadOnly = true;
                this.columnLandCode.MaxLength = 20;
                this.columnReportAS.ReadOnly = true;
                this.columnReportAS.MaxLength = 20;
                this.columnUnitType.ReadOnly = true;
                this.columnUnitType.MaxLength = 20;
                this.columnUnits.ReadOnly = true;
                this.columnAdjustmentType.ReadOnly = true;
                this.columnAdjustment.ReadOnly = true;
                this.columnAdjustment.MaxLength = 20;
                this.columnAdjDescription.ReadOnly = true;
                this.columnAdjDescription.MaxLength = 50;
                this.columnModuleID.ReadOnly = true;
                this.columnInsertedBy.ReadOnly = true;
                this.columnInsertedDate.ReadOnly = true;
                this.columnUpdatedBy.ReadOnly = true;
                this.columnIsDeleted.ReadOnly = true;
                this.columnUseAdjustmentType.ReadOnly = true;
                this.columnUseAdjustment.ReadOnly = true;
                this.columnUseAdjustment.MaxLength = 20;
                this.columnUseAdjDescription.ReadOnly = true;
                this.columnUseAdjDescription.MaxLength = 50;
                this.columnLotWidth.ReadOnly = true;
                this.columnLotDepth.ReadOnly = true;
                this.columnBaseMrktValue.ReadOnly = true;
                this.columnFinalMrktValue.ReadOnly = true;
                this.columnFinalUseValue.ReadOnly = true;
                this.columnLandShape.ReadOnly = true;
                this.columnLandShape.MaxLength = 20;
                this.columnFrontage.ReadOnly = true;
                this.columnProgramID.ReadOnly = true;
                this.columnLotWidthTemp.ReadOnly = true;
                this.columnLotWidthTemp.MaxLength = 50;
                this.columnLotDepthTemp.ReadOnly = true;
                this.columnLotDepthTemp.MaxLength = 50;
                this.columnSrAcres.ReadOnly = true;
                this.columnWeightedRating.ReadOnly = true;
                this.columnBaseValuePerUnit.ReadOnly = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tAA_LandRow NewtAA_LandRow() {
                return ((tAA_LandRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new tAA_LandRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(tAA_LandRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.tAA_LandRowChanged != null)) {
                    this.tAA_LandRowChanged(this, new tAA_LandRowChangeEvent(((tAA_LandRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.tAA_LandRowChanging != null)) {
                    this.tAA_LandRowChanging(this, new tAA_LandRowChangeEvent(((tAA_LandRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.tAA_LandRowDeleted != null)) {
                    this.tAA_LandRowDeleted(this, new tAA_LandRowChangeEvent(((tAA_LandRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.tAA_LandRowDeleting != null)) {
                    this.tAA_LandRowDeleting(this, new tAA_LandRowChangeEvent(((tAA_LandRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovetAA_LandRow(tAA_LandRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                f25000FieldUse ds = new f25000FieldUse();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "tAA_LandDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class tAA_LandUnitDataTable : global::System.Data.TypedTableBase<tAA_LandUnitRow> {
            
            private global::System.Data.DataColumn columnUnitType;
            
            private global::System.Data.DataColumn columnIsActive;
            
            private global::System.Data.DataColumn columnUnitsPerAcre;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tAA_LandUnitDataTable() {
                this.TableName = "tAA_LandUnit";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal tAA_LandUnitDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected tAA_LandUnitDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UnitTypeColumn {
                get {
                    return this.columnUnitType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsActiveColumn {
                get {
                    return this.columnIsActive;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UnitsPerAcreColumn {
                get {
                    return this.columnUnitsPerAcre;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tAA_LandUnitRow this[int index] {
                get {
                    return ((tAA_LandUnitRow)(this.Rows[index]));
                }
            }
            
            public event tAA_LandUnitRowChangeEventHandler tAA_LandUnitRowChanging;
            
            public event tAA_LandUnitRowChangeEventHandler tAA_LandUnitRowChanged;
            
            public event tAA_LandUnitRowChangeEventHandler tAA_LandUnitRowDeleting;
            
            public event tAA_LandUnitRowChangeEventHandler tAA_LandUnitRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddtAA_LandUnitRow(tAA_LandUnitRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tAA_LandUnitRow AddtAA_LandUnitRow(string UnitType, bool IsActive, decimal UnitsPerAcre) {
                tAA_LandUnitRow rowtAA_LandUnitRow = ((tAA_LandUnitRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        UnitType,
                        IsActive,
                        UnitsPerAcre};
                rowtAA_LandUnitRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowtAA_LandUnitRow);
                return rowtAA_LandUnitRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                tAA_LandUnitDataTable cln = ((tAA_LandUnitDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new tAA_LandUnitDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnUnitType = base.Columns["UnitType"];
                this.columnIsActive = base.Columns["IsActive"];
                this.columnUnitsPerAcre = base.Columns["UnitsPerAcre"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnUnitType = new global::System.Data.DataColumn("UnitType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUnitType);
                this.columnIsActive = new global::System.Data.DataColumn("IsActive", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsActive);
                this.columnUnitsPerAcre = new global::System.Data.DataColumn("UnitsPerAcre", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUnitsPerAcre);
                this.columnUnitType.ReadOnly = true;
                this.columnUnitType.MaxLength = 20;
                this.columnIsActive.ReadOnly = true;
                this.columnUnitsPerAcre.ReadOnly = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tAA_LandUnitRow NewtAA_LandUnitRow() {
                return ((tAA_LandUnitRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new tAA_LandUnitRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(tAA_LandUnitRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.tAA_LandUnitRowChanged != null)) {
                    this.tAA_LandUnitRowChanged(this, new tAA_LandUnitRowChangeEvent(((tAA_LandUnitRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.tAA_LandUnitRowChanging != null)) {
                    this.tAA_LandUnitRowChanging(this, new tAA_LandUnitRowChangeEvent(((tAA_LandUnitRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.tAA_LandUnitRowDeleted != null)) {
                    this.tAA_LandUnitRowDeleted(this, new tAA_LandUnitRowChangeEvent(((tAA_LandUnitRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.tAA_LandUnitRowDeleting != null)) {
                    this.tAA_LandUnitRowDeleting(this, new tAA_LandUnitRowChangeEvent(((tAA_LandUnitRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovetAA_LandUnitRow(tAA_LandUnitRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                f25000FieldUse ds = new f25000FieldUse();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "tAA_LandUnitDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class tAA_MA_Type1DataTable : global::System.Data.TypedTableBase<tAA_MA_Type1Row> {
            
            private global::System.Data.DataColumn columnParcelID;
            
            private global::System.Data.DataColumn columnMADistrictID;
            
            private global::System.Data.DataColumn columnSiteAcres;
            
            private global::System.Data.DataColumn columnDryAcres;
            
            private global::System.Data.DataColumn columnIrrigatedAcres;
            
            private global::System.Data.DataColumn columnTimberAcres;
            
            private global::System.Data.DataColumn columnOtherAcres;
            
            private global::System.Data.DataColumn columnTaxAmount;
            
            private global::System.Data.DataColumn columnInsertedBy;
            
            private global::System.Data.DataColumn columnInsertedDate;
            
            private global::System.Data.DataColumn columnUpdatedBy;
            
            private global::System.Data.DataColumn columnIsDeleted;
            
            private global::System.Data.DataColumn columnModuleID;
            
            private global::System.Data.DataColumn columnamount;
            
            private global::System.Data.DataColumn columnOverrideAmount;
            
            private global::System.Data.DataColumn columnIsExempt;
            
            private global::System.Data.DataColumn columnIsOverride;
            
            private global::System.Data.DataColumn columnBaseAcres;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tAA_MA_Type1DataTable() {
                this.TableName = "tAA_MA_Type1";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal tAA_MA_Type1DataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected tAA_MA_Type1DataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ParcelIDColumn {
                get {
                    return this.columnParcelID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MADistrictIDColumn {
                get {
                    return this.columnMADistrictID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SiteAcresColumn {
                get {
                    return this.columnSiteAcres;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DryAcresColumn {
                get {
                    return this.columnDryAcres;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IrrigatedAcresColumn {
                get {
                    return this.columnIrrigatedAcres;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TimberAcresColumn {
                get {
                    return this.columnTimberAcres;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OtherAcresColumn {
                get {
                    return this.columnOtherAcres;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TaxAmountColumn {
                get {
                    return this.columnTaxAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InsertedByColumn {
                get {
                    return this.columnInsertedBy;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InsertedDateColumn {
                get {
                    return this.columnInsertedDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UpdatedByColumn {
                get {
                    return this.columnUpdatedBy;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsDeletedColumn {
                get {
                    return this.columnIsDeleted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ModuleIDColumn {
                get {
                    return this.columnModuleID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn amountColumn {
                get {
                    return this.columnamount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OverrideAmountColumn {
                get {
                    return this.columnOverrideAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsExemptColumn {
                get {
                    return this.columnIsExempt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsOverrideColumn {
                get {
                    return this.columnIsOverride;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BaseAcresColumn {
                get {
                    return this.columnBaseAcres;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tAA_MA_Type1Row this[int index] {
                get {
                    return ((tAA_MA_Type1Row)(this.Rows[index]));
                }
            }
            
            public event tAA_MA_Type1RowChangeEventHandler tAA_MA_Type1RowChanging;
            
            public event tAA_MA_Type1RowChangeEventHandler tAA_MA_Type1RowChanged;
            
            public event tAA_MA_Type1RowChangeEventHandler tAA_MA_Type1RowDeleting;
            
            public event tAA_MA_Type1RowChangeEventHandler tAA_MA_Type1RowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddtAA_MA_Type1Row(tAA_MA_Type1Row row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tAA_MA_Type1Row AddtAA_MA_Type1Row(
                        int ParcelID, 
                        int MADistrictID, 
                        decimal SiteAcres, 
                        decimal DryAcres, 
                        decimal IrrigatedAcres, 
                        decimal TimberAcres, 
                        decimal OtherAcres, 
                        decimal TaxAmount, 
                        int InsertedBy, 
                        System.DateTime InsertedDate, 
                        int UpdatedBy, 
                        bool IsDeleted, 
                        short ModuleID, 
                        string amount, 
                        decimal OverrideAmount, 
                        bool IsExempt, 
                        bool IsOverride, 
                        decimal BaseAcres) {
                tAA_MA_Type1Row rowtAA_MA_Type1Row = ((tAA_MA_Type1Row)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ParcelID,
                        MADistrictID,
                        SiteAcres,
                        DryAcres,
                        IrrigatedAcres,
                        TimberAcres,
                        OtherAcres,
                        TaxAmount,
                        InsertedBy,
                        InsertedDate,
                        UpdatedBy,
                        IsDeleted,
                        ModuleID,
                        amount,
                        OverrideAmount,
                        IsExempt,
                        IsOverride,
                        BaseAcres};
                rowtAA_MA_Type1Row.ItemArray = columnValuesArray;
                this.Rows.Add(rowtAA_MA_Type1Row);
                return rowtAA_MA_Type1Row;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                tAA_MA_Type1DataTable cln = ((tAA_MA_Type1DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new tAA_MA_Type1DataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnParcelID = base.Columns["ParcelID"];
                this.columnMADistrictID = base.Columns["MADistrictID"];
                this.columnSiteAcres = base.Columns["SiteAcres"];
                this.columnDryAcres = base.Columns["DryAcres"];
                this.columnIrrigatedAcres = base.Columns["IrrigatedAcres"];
                this.columnTimberAcres = base.Columns["TimberAcres"];
                this.columnOtherAcres = base.Columns["OtherAcres"];
                this.columnTaxAmount = base.Columns["TaxAmount"];
                this.columnInsertedBy = base.Columns["InsertedBy"];
                this.columnInsertedDate = base.Columns["InsertedDate"];
                this.columnUpdatedBy = base.Columns["UpdatedBy"];
                this.columnIsDeleted = base.Columns["IsDeleted"];
                this.columnModuleID = base.Columns["ModuleID"];
                this.columnamount = base.Columns["amount"];
                this.columnOverrideAmount = base.Columns["OverrideAmount"];
                this.columnIsExempt = base.Columns["IsExempt"];
                this.columnIsOverride = base.Columns["IsOverride"];
                this.columnBaseAcres = base.Columns["BaseAcres"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnParcelID = new global::System.Data.DataColumn("ParcelID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnParcelID);
                this.columnMADistrictID = new global::System.Data.DataColumn("MADistrictID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMADistrictID);
                this.columnSiteAcres = new global::System.Data.DataColumn("SiteAcres", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSiteAcres);
                this.columnDryAcres = new global::System.Data.DataColumn("DryAcres", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDryAcres);
                this.columnIrrigatedAcres = new global::System.Data.DataColumn("IrrigatedAcres", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIrrigatedAcres);
                this.columnTimberAcres = new global::System.Data.DataColumn("TimberAcres", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTimberAcres);
                this.columnOtherAcres = new global::System.Data.DataColumn("OtherAcres", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOtherAcres);
                this.columnTaxAmount = new global::System.Data.DataColumn("TaxAmount", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTaxAmount);
                this.columnInsertedBy = new global::System.Data.DataColumn("InsertedBy", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInsertedBy);
                this.columnInsertedDate = new global::System.Data.DataColumn("InsertedDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInsertedDate);
                this.columnUpdatedBy = new global::System.Data.DataColumn("UpdatedBy", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUpdatedBy);
                this.columnIsDeleted = new global::System.Data.DataColumn("IsDeleted", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsDeleted);
                this.columnModuleID = new global::System.Data.DataColumn("ModuleID", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnModuleID);
                this.columnamount = new global::System.Data.DataColumn("amount", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnamount);
                this.columnOverrideAmount = new global::System.Data.DataColumn("OverrideAmount", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOverrideAmount);
                this.columnIsExempt = new global::System.Data.DataColumn("IsExempt", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsExempt);
                this.columnIsOverride = new global::System.Data.DataColumn("IsOverride", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsOverride);
                this.columnBaseAcres = new global::System.Data.DataColumn("BaseAcres", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBaseAcres);
                this.columnParcelID.ReadOnly = true;
                this.columnMADistrictID.ReadOnly = true;
                this.columnSiteAcres.ReadOnly = true;
                this.columnDryAcres.ReadOnly = true;
                this.columnIrrigatedAcres.ReadOnly = true;
                this.columnTimberAcres.ReadOnly = true;
                this.columnOtherAcres.ReadOnly = true;
                this.columnTaxAmount.ReadOnly = true;
                this.columnInsertedBy.ReadOnly = true;
                this.columnInsertedDate.ReadOnly = true;
                this.columnUpdatedBy.ReadOnly = true;
                this.columnIsDeleted.ReadOnly = true;
                this.columnModuleID.ReadOnly = true;
                this.columnamount.ReadOnly = true;
                this.columnamount.MaxLength = 50;
                this.columnOverrideAmount.ReadOnly = true;
                this.columnIsExempt.ReadOnly = true;
                this.columnIsOverride.ReadOnly = true;
                this.columnBaseAcres.ReadOnly = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tAA_MA_Type1Row NewtAA_MA_Type1Row() {
                return ((tAA_MA_Type1Row)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new tAA_MA_Type1Row(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(tAA_MA_Type1Row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.tAA_MA_Type1RowChanged != null)) {
                    this.tAA_MA_Type1RowChanged(this, new tAA_MA_Type1RowChangeEvent(((tAA_MA_Type1Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.tAA_MA_Type1RowChanging != null)) {
                    this.tAA_MA_Type1RowChanging(this, new tAA_MA_Type1RowChangeEvent(((tAA_MA_Type1Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.tAA_MA_Type1RowDeleted != null)) {
                    this.tAA_MA_Type1RowDeleted(this, new tAA_MA_Type1RowChangeEvent(((tAA_MA_Type1Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.tAA_MA_Type1RowDeleting != null)) {
                    this.tAA_MA_Type1RowDeleting(this, new tAA_MA_Type1RowChangeEvent(((tAA_MA_Type1Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovetAA_MA_Type1Row(tAA_MA_Type1Row row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                f25000FieldUse ds = new f25000FieldUse();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "tAA_MA_Type1DataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class tAA_MA_Type10DataTable : global::System.Data.TypedTableBase<tAA_MA_Type10Row> {
            
            private global::System.Data.DataColumn columnParcelID;
            
            private global::System.Data.DataColumn columnMADistrictID;
            
            private global::System.Data.DataColumn columnAssessedValue;
            
            private global::System.Data.DataColumn columnrate;
            
            private global::System.Data.DataColumn columnTaxAmount;
            
            private global::System.Data.DataColumn columnInsertedBy;
            
            private global::System.Data.DataColumn columnInsertedDate;
            
            private global::System.Data.DataColumn columnUpdatedBy;
            
            private global::System.Data.DataColumn columnIsDeleted;
            
            private global::System.Data.DataColumn columnModuleID;
            
            private global::System.Data.DataColumn columnamount;
            
            private global::System.Data.DataColumn columnOverrideAmount;
            
            private global::System.Data.DataColumn columnIsExempt;
            
            private global::System.Data.DataColumn columnIsOverride;
            
            private global::System.Data.DataColumn columnunits;
            
            private global::System.Data.DataColumn columnFactor;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tAA_MA_Type10DataTable() {
                this.TableName = "tAA_MA_Type10";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal tAA_MA_Type10DataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected tAA_MA_Type10DataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ParcelIDColumn {
                get {
                    return this.columnParcelID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MADistrictIDColumn {
                get {
                    return this.columnMADistrictID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AssessedValueColumn {
                get {
                    return this.columnAssessedValue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn rateColumn {
                get {
                    return this.columnrate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TaxAmountColumn {
                get {
                    return this.columnTaxAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InsertedByColumn {
                get {
                    return this.columnInsertedBy;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InsertedDateColumn {
                get {
                    return this.columnInsertedDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UpdatedByColumn {
                get {
                    return this.columnUpdatedBy;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsDeletedColumn {
                get {
                    return this.columnIsDeleted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ModuleIDColumn {
                get {
                    return this.columnModuleID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn amountColumn {
                get {
                    return this.columnamount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OverrideAmountColumn {
                get {
                    return this.columnOverrideAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsExemptColumn {
                get {
                    return this.columnIsExempt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsOverrideColumn {
                get {
                    return this.columnIsOverride;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn unitsColumn {
                get {
                    return this.columnunits;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FactorColumn {
                get {
                    return this.columnFactor;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tAA_MA_Type10Row this[int index] {
                get {
                    return ((tAA_MA_Type10Row)(this.Rows[index]));
                }
            }
            
            public event tAA_MA_Type10RowChangeEventHandler tAA_MA_Type10RowChanging;
            
            public event tAA_MA_Type10RowChangeEventHandler tAA_MA_Type10RowChanged;
            
            public event tAA_MA_Type10RowChangeEventHandler tAA_MA_Type10RowDeleting;
            
            public event tAA_MA_Type10RowChangeEventHandler tAA_MA_Type10RowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddtAA_MA_Type10Row(tAA_MA_Type10Row row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tAA_MA_Type10Row AddtAA_MA_Type10Row(
                        int ParcelID, 
                        int MADistrictID, 
                        decimal AssessedValue, 
                        decimal rate, 
                        decimal TaxAmount, 
                        int InsertedBy, 
                        System.DateTime InsertedDate, 
                        int UpdatedBy, 
                        bool IsDeleted, 
                        short ModuleID, 
                        string amount, 
                        decimal OverrideAmount, 
                        bool IsExempt, 
                        bool IsOverride, 
                        decimal units, 
                        int Factor) {
                tAA_MA_Type10Row rowtAA_MA_Type10Row = ((tAA_MA_Type10Row)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ParcelID,
                        MADistrictID,
                        AssessedValue,
                        rate,
                        TaxAmount,
                        InsertedBy,
                        InsertedDate,
                        UpdatedBy,
                        IsDeleted,
                        ModuleID,
                        amount,
                        OverrideAmount,
                        IsExempt,
                        IsOverride,
                        units,
                        Factor};
                rowtAA_MA_Type10Row.ItemArray = columnValuesArray;
                this.Rows.Add(rowtAA_MA_Type10Row);
                return rowtAA_MA_Type10Row;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                tAA_MA_Type10DataTable cln = ((tAA_MA_Type10DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new tAA_MA_Type10DataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnParcelID = base.Columns["ParcelID"];
                this.columnMADistrictID = base.Columns["MADistrictID"];
                this.columnAssessedValue = base.Columns["AssessedValue"];
                this.columnrate = base.Columns["rate"];
                this.columnTaxAmount = base.Columns["TaxAmount"];
                this.columnInsertedBy = base.Columns["InsertedBy"];
                this.columnInsertedDate = base.Columns["InsertedDate"];
                this.columnUpdatedBy = base.Columns["UpdatedBy"];
                this.columnIsDeleted = base.Columns["IsDeleted"];
                this.columnModuleID = base.Columns["ModuleID"];
                this.columnamount = base.Columns["amount"];
                this.columnOverrideAmount = base.Columns["OverrideAmount"];
                this.columnIsExempt = base.Columns["IsExempt"];
                this.columnIsOverride = base.Columns["IsOverride"];
                this.columnunits = base.Columns["units"];
                this.columnFactor = base.Columns["Factor"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnParcelID = new global::System.Data.DataColumn("ParcelID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnParcelID);
                this.columnMADistrictID = new global::System.Data.DataColumn("MADistrictID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMADistrictID);
                this.columnAssessedValue = new global::System.Data.DataColumn("AssessedValue", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAssessedValue);
                this.columnrate = new global::System.Data.DataColumn("rate", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnrate);
                this.columnTaxAmount = new global::System.Data.DataColumn("TaxAmount", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTaxAmount);
                this.columnInsertedBy = new global::System.Data.DataColumn("InsertedBy", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInsertedBy);
                this.columnInsertedDate = new global::System.Data.DataColumn("InsertedDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInsertedDate);
                this.columnUpdatedBy = new global::System.Data.DataColumn("UpdatedBy", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUpdatedBy);
                this.columnIsDeleted = new global::System.Data.DataColumn("IsDeleted", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsDeleted);
                this.columnModuleID = new global::System.Data.DataColumn("ModuleID", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnModuleID);
                this.columnamount = new global::System.Data.DataColumn("amount", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnamount);
                this.columnOverrideAmount = new global::System.Data.DataColumn("OverrideAmount", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOverrideAmount);
                this.columnIsExempt = new global::System.Data.DataColumn("IsExempt", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsExempt);
                this.columnIsOverride = new global::System.Data.DataColumn("IsOverride", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsOverride);
                this.columnunits = new global::System.Data.DataColumn("units", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnunits);
                this.columnFactor = new global::System.Data.DataColumn("Factor", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFactor);
                this.columnParcelID.ReadOnly = true;
                this.columnMADistrictID.ReadOnly = true;
                this.columnAssessedValue.ReadOnly = true;
                this.columnrate.ReadOnly = true;
                this.columnTaxAmount.ReadOnly = true;
                this.columnInsertedBy.ReadOnly = true;
                this.columnInsertedDate.ReadOnly = true;
                this.columnUpdatedBy.ReadOnly = true;
                this.columnIsDeleted.ReadOnly = true;
                this.columnModuleID.ReadOnly = true;
                this.columnamount.ReadOnly = true;
                this.columnamount.MaxLength = 50;
                this.columnOverrideAmount.ReadOnly = true;
                this.columnIsExempt.ReadOnly = true;
                this.columnIsOverride.ReadOnly = true;
                this.columnunits.ReadOnly = true;
                this.columnFactor.ReadOnly = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tAA_MA_Type10Row NewtAA_MA_Type10Row() {
                return ((tAA_MA_Type10Row)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new tAA_MA_Type10Row(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(tAA_MA_Type10Row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.tAA_MA_Type10RowChanged != null)) {
                    this.tAA_MA_Type10RowChanged(this, new tAA_MA_Type10RowChangeEvent(((tAA_MA_Type10Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.tAA_MA_Type10RowChanging != null)) {
                    this.tAA_MA_Type10RowChanging(this, new tAA_MA_Type10RowChangeEvent(((tAA_MA_Type10Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.tAA_MA_Type10RowDeleted != null)) {
                    this.tAA_MA_Type10RowDeleted(this, new tAA_MA_Type10RowChangeEvent(((tAA_MA_Type10Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.tAA_MA_Type10RowDeleting != null)) {
                    this.tAA_MA_Type10RowDeleting(this, new tAA_MA_Type10RowChangeEvent(((tAA_MA_Type10Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovetAA_MA_Type10Row(tAA_MA_Type10Row row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                f25000FieldUse ds = new f25000FieldUse();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "tAA_MA_Type10DataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class tAA_MA_Type11DataTable : global::System.Data.TypedTableBase<tAA_MA_Type11Row> {
            
            private global::System.Data.DataColumn columnParcelID;
            
            private global::System.Data.DataColumn columnMADistrictID;
            
            private global::System.Data.DataColumn columnTaxAmount;
            
            private global::System.Data.DataColumn columnInsertedBy;
            
            private global::System.Data.DataColumn columnInsertedDate;
            
            private global::System.Data.DataColumn columnUpdatedBy;
            
            private global::System.Data.DataColumn columnIsDeleted;
            
            private global::System.Data.DataColumn columnModuleID;
            
            private global::System.Data.DataColumn columnOverrideAmount;
            
            private global::System.Data.DataColumn columnIsExempt;
            
            private global::System.Data.DataColumn columnIsOverride;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tAA_MA_Type11DataTable() {
                this.TableName = "tAA_MA_Type11";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal tAA_MA_Type11DataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected tAA_MA_Type11DataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ParcelIDColumn {
                get {
                    return this.columnParcelID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MADistrictIDColumn {
                get {
                    return this.columnMADistrictID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TaxAmountColumn {
                get {
                    return this.columnTaxAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InsertedByColumn {
                get {
                    return this.columnInsertedBy;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InsertedDateColumn {
                get {
                    return this.columnInsertedDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UpdatedByColumn {
                get {
                    return this.columnUpdatedBy;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsDeletedColumn {
                get {
                    return this.columnIsDeleted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ModuleIDColumn {
                get {
                    return this.columnModuleID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OverrideAmountColumn {
                get {
                    return this.columnOverrideAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsExemptColumn {
                get {
                    return this.columnIsExempt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsOverrideColumn {
                get {
                    return this.columnIsOverride;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tAA_MA_Type11Row this[int index] {
                get {
                    return ((tAA_MA_Type11Row)(this.Rows[index]));
                }
            }
            
            public event tAA_MA_Type11RowChangeEventHandler tAA_MA_Type11RowChanging;
            
            public event tAA_MA_Type11RowChangeEventHandler tAA_MA_Type11RowChanged;
            
            public event tAA_MA_Type11RowChangeEventHandler tAA_MA_Type11RowDeleting;
            
            public event tAA_MA_Type11RowChangeEventHandler tAA_MA_Type11RowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddtAA_MA_Type11Row(tAA_MA_Type11Row row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tAA_MA_Type11Row AddtAA_MA_Type11Row(int ParcelID, int MADistrictID, decimal TaxAmount, int InsertedBy, System.DateTime InsertedDate, int UpdatedBy, bool IsDeleted, short ModuleID, decimal OverrideAmount, bool IsExempt, bool IsOverride) {
                tAA_MA_Type11Row rowtAA_MA_Type11Row = ((tAA_MA_Type11Row)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ParcelID,
                        MADistrictID,
                        TaxAmount,
                        InsertedBy,
                        InsertedDate,
                        UpdatedBy,
                        IsDeleted,
                        ModuleID,
                        OverrideAmount,
                        IsExempt,
                        IsOverride};
                rowtAA_MA_Type11Row.ItemArray = columnValuesArray;
                this.Rows.Add(rowtAA_MA_Type11Row);
                return rowtAA_MA_Type11Row;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                tAA_MA_Type11DataTable cln = ((tAA_MA_Type11DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new tAA_MA_Type11DataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnParcelID = base.Columns["ParcelID"];
                this.columnMADistrictID = base.Columns["MADistrictID"];
                this.columnTaxAmount = base.Columns["TaxAmount"];
                this.columnInsertedBy = base.Columns["InsertedBy"];
                this.columnInsertedDate = base.Columns["InsertedDate"];
                this.columnUpdatedBy = base.Columns["UpdatedBy"];
                this.columnIsDeleted = base.Columns["IsDeleted"];
                this.columnModuleID = base.Columns["ModuleID"];
                this.columnOverrideAmount = base.Columns["OverrideAmount"];
                this.columnIsExempt = base.Columns["IsExempt"];
                this.columnIsOverride = base.Columns["IsOverride"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnParcelID = new global::System.Data.DataColumn("ParcelID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnParcelID);
                this.columnMADistrictID = new global::System.Data.DataColumn("MADistrictID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMADistrictID);
                this.columnTaxAmount = new global::System.Data.DataColumn("TaxAmount", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTaxAmount);
                this.columnInsertedBy = new global::System.Data.DataColumn("InsertedBy", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInsertedBy);
                this.columnInsertedDate = new global::System.Data.DataColumn("InsertedDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInsertedDate);
                this.columnUpdatedBy = new global::System.Data.DataColumn("UpdatedBy", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUpdatedBy);
                this.columnIsDeleted = new global::System.Data.DataColumn("IsDeleted", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsDeleted);
                this.columnModuleID = new global::System.Data.DataColumn("ModuleID", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnModuleID);
                this.columnOverrideAmount = new global::System.Data.DataColumn("OverrideAmount", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOverrideAmount);
                this.columnIsExempt = new global::System.Data.DataColumn("IsExempt", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsExempt);
                this.columnIsOverride = new global::System.Data.DataColumn("IsOverride", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsOverride);
                this.columnParcelID.ReadOnly = true;
                this.columnMADistrictID.ReadOnly = true;
                this.columnTaxAmount.ReadOnly = true;
                this.columnInsertedBy.ReadOnly = true;
                this.columnInsertedDate.ReadOnly = true;
                this.columnUpdatedBy.ReadOnly = true;
                this.columnIsDeleted.ReadOnly = true;
                this.columnModuleID.ReadOnly = true;
                this.columnOverrideAmount.ReadOnly = true;
                this.columnIsExempt.ReadOnly = true;
                this.columnIsOverride.ReadOnly = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tAA_MA_Type11Row NewtAA_MA_Type11Row() {
                return ((tAA_MA_Type11Row)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new tAA_MA_Type11Row(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(tAA_MA_Type11Row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.tAA_MA_Type11RowChanged != null)) {
                    this.tAA_MA_Type11RowChanged(this, new tAA_MA_Type11RowChangeEvent(((tAA_MA_Type11Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.tAA_MA_Type11RowChanging != null)) {
                    this.tAA_MA_Type11RowChanging(this, new tAA_MA_Type11RowChangeEvent(((tAA_MA_Type11Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.tAA_MA_Type11RowDeleted != null)) {
                    this.tAA_MA_Type11RowDeleted(this, new tAA_MA_Type11RowChangeEvent(((tAA_MA_Type11Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.tAA_MA_Type11RowDeleting != null)) {
                    this.tAA_MA_Type11RowDeleting(this, new tAA_MA_Type11RowChangeEvent(((tAA_MA_Type11Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovetAA_MA_Type11Row(tAA_MA_Type11Row row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                f25000FieldUse ds = new f25000FieldUse();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "tAA_MA_Type11DataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class tAA_MA_Type12DataTable : global::System.Data.TypedTableBase<tAA_MA_Type12Row> {
            
            private global::System.Data.DataColumn columnParcelID;
            
            private global::System.Data.DataColumn columnMADistrictID;
            
            private global::System.Data.DataColumn columnTaxAmount;
            
            private global::System.Data.DataColumn columnInsertedBy;
            
            private global::System.Data.DataColumn columnInsertedDate;
            
            private global::System.Data.DataColumn columnUpdatedBy;
            
            private global::System.Data.DataColumn columnIsDeleted;
            
            private global::System.Data.DataColumn columnModuleID;
            
            private global::System.Data.DataColumn columnOverrideAmount;
            
            private global::System.Data.DataColumn columnIsExempt;
            
            private global::System.Data.DataColumn columnIsOverride;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tAA_MA_Type12DataTable() {
                this.TableName = "tAA_MA_Type12";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal tAA_MA_Type12DataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected tAA_MA_Type12DataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ParcelIDColumn {
                get {
                    return this.columnParcelID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MADistrictIDColumn {
                get {
                    return this.columnMADistrictID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TaxAmountColumn {
                get {
                    return this.columnTaxAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InsertedByColumn {
                get {
                    return this.columnInsertedBy;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InsertedDateColumn {
                get {
                    return this.columnInsertedDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UpdatedByColumn {
                get {
                    return this.columnUpdatedBy;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsDeletedColumn {
                get {
                    return this.columnIsDeleted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ModuleIDColumn {
                get {
                    return this.columnModuleID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OverrideAmountColumn {
                get {
                    return this.columnOverrideAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsExemptColumn {
                get {
                    return this.columnIsExempt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsOverrideColumn {
                get {
                    return this.columnIsOverride;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tAA_MA_Type12Row this[int index] {
                get {
                    return ((tAA_MA_Type12Row)(this.Rows[index]));
                }
            }
            
            public event tAA_MA_Type12RowChangeEventHandler tAA_MA_Type12RowChanging;
            
            public event tAA_MA_Type12RowChangeEventHandler tAA_MA_Type12RowChanged;
            
            public event tAA_MA_Type12RowChangeEventHandler tAA_MA_Type12RowDeleting;
            
            public event tAA_MA_Type12RowChangeEventHandler tAA_MA_Type12RowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddtAA_MA_Type12Row(tAA_MA_Type12Row row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tAA_MA_Type12Row AddtAA_MA_Type12Row(int ParcelID, int MADistrictID, decimal TaxAmount, int InsertedBy, System.DateTime InsertedDate, int UpdatedBy, bool IsDeleted, short ModuleID, decimal OverrideAmount, bool IsExempt, bool IsOverride) {
                tAA_MA_Type12Row rowtAA_MA_Type12Row = ((tAA_MA_Type12Row)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ParcelID,
                        MADistrictID,
                        TaxAmount,
                        InsertedBy,
                        InsertedDate,
                        UpdatedBy,
                        IsDeleted,
                        ModuleID,
                        OverrideAmount,
                        IsExempt,
                        IsOverride};
                rowtAA_MA_Type12Row.ItemArray = columnValuesArray;
                this.Rows.Add(rowtAA_MA_Type12Row);
                return rowtAA_MA_Type12Row;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                tAA_MA_Type12DataTable cln = ((tAA_MA_Type12DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new tAA_MA_Type12DataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnParcelID = base.Columns["ParcelID"];
                this.columnMADistrictID = base.Columns["MADistrictID"];
                this.columnTaxAmount = base.Columns["TaxAmount"];
                this.columnInsertedBy = base.Columns["InsertedBy"];
                this.columnInsertedDate = base.Columns["InsertedDate"];
                this.columnUpdatedBy = base.Columns["UpdatedBy"];
                this.columnIsDeleted = base.Columns["IsDeleted"];
                this.columnModuleID = base.Columns["ModuleID"];
                this.columnOverrideAmount = base.Columns["OverrideAmount"];
                this.columnIsExempt = base.Columns["IsExempt"];
                this.columnIsOverride = base.Columns["IsOverride"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnParcelID = new global::System.Data.DataColumn("ParcelID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnParcelID);
                this.columnMADistrictID = new global::System.Data.DataColumn("MADistrictID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMADistrictID);
                this.columnTaxAmount = new global::System.Data.DataColumn("TaxAmount", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTaxAmount);
                this.columnInsertedBy = new global::System.Data.DataColumn("InsertedBy", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInsertedBy);
                this.columnInsertedDate = new global::System.Data.DataColumn("InsertedDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInsertedDate);
                this.columnUpdatedBy = new global::System.Data.DataColumn("UpdatedBy", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUpdatedBy);
                this.columnIsDeleted = new global::System.Data.DataColumn("IsDeleted", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsDeleted);
                this.columnModuleID = new global::System.Data.DataColumn("ModuleID", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnModuleID);
                this.columnOverrideAmount = new global::System.Data.DataColumn("OverrideAmount", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOverrideAmount);
                this.columnIsExempt = new global::System.Data.DataColumn("IsExempt", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsExempt);
                this.columnIsOverride = new global::System.Data.DataColumn("IsOverride", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsOverride);
                this.columnParcelID.ReadOnly = true;
                this.columnMADistrictID.ReadOnly = true;
                this.columnTaxAmount.ReadOnly = true;
                this.columnInsertedBy.ReadOnly = true;
                this.columnInsertedDate.ReadOnly = true;
                this.columnUpdatedBy.ReadOnly = true;
                this.columnIsDeleted.ReadOnly = true;
                this.columnModuleID.ReadOnly = true;
                this.columnOverrideAmount.ReadOnly = true;
                this.columnIsExempt.ReadOnly = true;
                this.columnIsOverride.ReadOnly = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tAA_MA_Type12Row NewtAA_MA_Type12Row() {
                return ((tAA_MA_Type12Row)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new tAA_MA_Type12Row(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(tAA_MA_Type12Row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.tAA_MA_Type12RowChanged != null)) {
                    this.tAA_MA_Type12RowChanged(this, new tAA_MA_Type12RowChangeEvent(((tAA_MA_Type12Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.tAA_MA_Type12RowChanging != null)) {
                    this.tAA_MA_Type12RowChanging(this, new tAA_MA_Type12RowChangeEvent(((tAA_MA_Type12Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.tAA_MA_Type12RowDeleted != null)) {
                    this.tAA_MA_Type12RowDeleted(this, new tAA_MA_Type12RowChangeEvent(((tAA_MA_Type12Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.tAA_MA_Type12RowDeleting != null)) {
                    this.tAA_MA_Type12RowDeleting(this, new tAA_MA_Type12RowChangeEvent(((tAA_MA_Type12Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovetAA_MA_Type12Row(tAA_MA_Type12Row row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                f25000FieldUse ds = new f25000FieldUse();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "tAA_MA_Type12DataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class tAA_MA_Type2DataTable : global::System.Data.TypedTableBase<tAA_MA_Type2Row> {
            
            private global::System.Data.DataColumn columnParcelID;
            
            private global::System.Data.DataColumn columnMADistrictID;
            
            private global::System.Data.DataColumn columnSiteAcres;
            
            private global::System.Data.DataColumn columnDryAcres;
            
            private global::System.Data.DataColumn columnIrrigatedAcres;
            
            private global::System.Data.DataColumn columnTimberAcres;
            
            private global::System.Data.DataColumn columnOtherAcres;
            
            private global::System.Data.DataColumn columnBaseAcres;
            
            private global::System.Data.DataColumn columnTaxAmount;
            
            private global::System.Data.DataColumn columnInsertedBy;
            
            private global::System.Data.DataColumn columnInsertedDate;
            
            private global::System.Data.DataColumn columnUpdatedBy;
            
            private global::System.Data.DataColumn columnIsDeleted;
            
            private global::System.Data.DataColumn columnModuleID;
            
            private global::System.Data.DataColumn columnamount;
            
            private global::System.Data.DataColumn columnOverrideAmount;
            
            private global::System.Data.DataColumn columnIsExempt;
            
            private global::System.Data.DataColumn columnIsOverride;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tAA_MA_Type2DataTable() {
                this.TableName = "tAA_MA_Type2";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal tAA_MA_Type2DataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected tAA_MA_Type2DataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ParcelIDColumn {
                get {
                    return this.columnParcelID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MADistrictIDColumn {
                get {
                    return this.columnMADistrictID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SiteAcresColumn {
                get {
                    return this.columnSiteAcres;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DryAcresColumn {
                get {
                    return this.columnDryAcres;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IrrigatedAcresColumn {
                get {
                    return this.columnIrrigatedAcres;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TimberAcresColumn {
                get {
                    return this.columnTimberAcres;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OtherAcresColumn {
                get {
                    return this.columnOtherAcres;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BaseAcresColumn {
                get {
                    return this.columnBaseAcres;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TaxAmountColumn {
                get {
                    return this.columnTaxAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InsertedByColumn {
                get {
                    return this.columnInsertedBy;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InsertedDateColumn {
                get {
                    return this.columnInsertedDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UpdatedByColumn {
                get {
                    return this.columnUpdatedBy;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsDeletedColumn {
                get {
                    return this.columnIsDeleted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ModuleIDColumn {
                get {
                    return this.columnModuleID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn amountColumn {
                get {
                    return this.columnamount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OverrideAmountColumn {
                get {
                    return this.columnOverrideAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsExemptColumn {
                get {
                    return this.columnIsExempt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsOverrideColumn {
                get {
                    return this.columnIsOverride;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tAA_MA_Type2Row this[int index] {
                get {
                    return ((tAA_MA_Type2Row)(this.Rows[index]));
                }
            }
            
            public event tAA_MA_Type2RowChangeEventHandler tAA_MA_Type2RowChanging;
            
            public event tAA_MA_Type2RowChangeEventHandler tAA_MA_Type2RowChanged;
            
            public event tAA_MA_Type2RowChangeEventHandler tAA_MA_Type2RowDeleting;
            
            public event tAA_MA_Type2RowChangeEventHandler tAA_MA_Type2RowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddtAA_MA_Type2Row(tAA_MA_Type2Row row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tAA_MA_Type2Row AddtAA_MA_Type2Row(
                        int ParcelID, 
                        int MADistrictID, 
                        decimal SiteAcres, 
                        decimal DryAcres, 
                        decimal IrrigatedAcres, 
                        decimal TimberAcres, 
                        decimal OtherAcres, 
                        decimal BaseAcres, 
                        decimal TaxAmount, 
                        int InsertedBy, 
                        System.DateTime InsertedDate, 
                        int UpdatedBy, 
                        bool IsDeleted, 
                        short ModuleID, 
                        string amount, 
                        decimal OverrideAmount, 
                        bool IsExempt, 
                        bool IsOverride) {
                tAA_MA_Type2Row rowtAA_MA_Type2Row = ((tAA_MA_Type2Row)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ParcelID,
                        MADistrictID,
                        SiteAcres,
                        DryAcres,
                        IrrigatedAcres,
                        TimberAcres,
                        OtherAcres,
                        BaseAcres,
                        TaxAmount,
                        InsertedBy,
                        InsertedDate,
                        UpdatedBy,
                        IsDeleted,
                        ModuleID,
                        amount,
                        OverrideAmount,
                        IsExempt,
                        IsOverride};
                rowtAA_MA_Type2Row.ItemArray = columnValuesArray;
                this.Rows.Add(rowtAA_MA_Type2Row);
                return rowtAA_MA_Type2Row;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                tAA_MA_Type2DataTable cln = ((tAA_MA_Type2DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new tAA_MA_Type2DataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnParcelID = base.Columns["ParcelID"];
                this.columnMADistrictID = base.Columns["MADistrictID"];
                this.columnSiteAcres = base.Columns["SiteAcres"];
                this.columnDryAcres = base.Columns["DryAcres"];
                this.columnIrrigatedAcres = base.Columns["IrrigatedAcres"];
                this.columnTimberAcres = base.Columns["TimberAcres"];
                this.columnOtherAcres = base.Columns["OtherAcres"];
                this.columnBaseAcres = base.Columns["BaseAcres"];
                this.columnTaxAmount = base.Columns["TaxAmount"];
                this.columnInsertedBy = base.Columns["InsertedBy"];
                this.columnInsertedDate = base.Columns["InsertedDate"];
                this.columnUpdatedBy = base.Columns["UpdatedBy"];
                this.columnIsDeleted = base.Columns["IsDeleted"];
                this.columnModuleID = base.Columns["ModuleID"];
                this.columnamount = base.Columns["amount"];
                this.columnOverrideAmount = base.Columns["OverrideAmount"];
                this.columnIsExempt = base.Columns["IsExempt"];
                this.columnIsOverride = base.Columns["IsOverride"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnParcelID = new global::System.Data.DataColumn("ParcelID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnParcelID);
                this.columnMADistrictID = new global::System.Data.DataColumn("MADistrictID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMADistrictID);
                this.columnSiteAcres = new global::System.Data.DataColumn("SiteAcres", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSiteAcres);
                this.columnDryAcres = new global::System.Data.DataColumn("DryAcres", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDryAcres);
                this.columnIrrigatedAcres = new global::System.Data.DataColumn("IrrigatedAcres", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIrrigatedAcres);
                this.columnTimberAcres = new global::System.Data.DataColumn("TimberAcres", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTimberAcres);
                this.columnOtherAcres = new global::System.Data.DataColumn("OtherAcres", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOtherAcres);
                this.columnBaseAcres = new global::System.Data.DataColumn("BaseAcres", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBaseAcres);
                this.columnTaxAmount = new global::System.Data.DataColumn("TaxAmount", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTaxAmount);
                this.columnInsertedBy = new global::System.Data.DataColumn("InsertedBy", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInsertedBy);
                this.columnInsertedDate = new global::System.Data.DataColumn("InsertedDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInsertedDate);
                this.columnUpdatedBy = new global::System.Data.DataColumn("UpdatedBy", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUpdatedBy);
                this.columnIsDeleted = new global::System.Data.DataColumn("IsDeleted", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsDeleted);
                this.columnModuleID = new global::System.Data.DataColumn("ModuleID", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnModuleID);
                this.columnamount = new global::System.Data.DataColumn("amount", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnamount);
                this.columnOverrideAmount = new global::System.Data.DataColumn("OverrideAmount", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOverrideAmount);
                this.columnIsExempt = new global::System.Data.DataColumn("IsExempt", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsExempt);
                this.columnIsOverride = new global::System.Data.DataColumn("IsOverride", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsOverride);
                this.columnParcelID.ReadOnly = true;
                this.columnMADistrictID.ReadOnly = true;
                this.columnSiteAcres.ReadOnly = true;
                this.columnDryAcres.ReadOnly = true;
                this.columnIrrigatedAcres.ReadOnly = true;
                this.columnTimberAcres.ReadOnly = true;
                this.columnOtherAcres.ReadOnly = true;
                this.columnBaseAcres.ReadOnly = true;
                this.columnTaxAmount.ReadOnly = true;
                this.columnInsertedBy.ReadOnly = true;
                this.columnInsertedDate.ReadOnly = true;
                this.columnUpdatedBy.ReadOnly = true;
                this.columnIsDeleted.ReadOnly = true;
                this.columnModuleID.ReadOnly = true;
                this.columnamount.ReadOnly = true;
                this.columnamount.MaxLength = 50;
                this.columnOverrideAmount.ReadOnly = true;
                this.columnIsExempt.ReadOnly = true;
                this.columnIsOverride.ReadOnly = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tAA_MA_Type2Row NewtAA_MA_Type2Row() {
                return ((tAA_MA_Type2Row)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new tAA_MA_Type2Row(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(tAA_MA_Type2Row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.tAA_MA_Type2RowChanged != null)) {
                    this.tAA_MA_Type2RowChanged(this, new tAA_MA_Type2RowChangeEvent(((tAA_MA_Type2Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.tAA_MA_Type2RowChanging != null)) {
                    this.tAA_MA_Type2RowChanging(this, new tAA_MA_Type2RowChangeEvent(((tAA_MA_Type2Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.tAA_MA_Type2RowDeleted != null)) {
                    this.tAA_MA_Type2RowDeleted(this, new tAA_MA_Type2RowChangeEvent(((tAA_MA_Type2Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.tAA_MA_Type2RowDeleting != null)) {
                    this.tAA_MA_Type2RowDeleting(this, new tAA_MA_Type2RowChangeEvent(((tAA_MA_Type2Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovetAA_MA_Type2Row(tAA_MA_Type2Row row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                f25000FieldUse ds = new f25000FieldUse();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "tAA_MA_Type2DataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class tAA_MA_Type3DataTable : global::System.Data.TypedTableBase<tAA_MA_Type3Row> {
            
            private global::System.Data.DataColumn columnParcelID;
            
            private global::System.Data.DataColumn columnMADistrictID;
            
            private global::System.Data.DataColumn columnSiteAcres;
            
            private global::System.Data.DataColumn columnDryAcres;
            
            private global::System.Data.DataColumn columnIrrigatedAcres;
            
            private global::System.Data.DataColumn columnTimberAcres;
            
            private global::System.Data.DataColumn columnOtherAcres;
            
            private global::System.Data.DataColumn columnBaseAcres;
            
            private global::System.Data.DataColumn columnTaxAmount;
            
            private global::System.Data.DataColumn columnInsertedBy;
            
            private global::System.Data.DataColumn columnInsertedDate;
            
            private global::System.Data.DataColumn columnUpdatedBy;
            
            private global::System.Data.DataColumn columnIsDeleted;
            
            private global::System.Data.DataColumn columnModuleID;
            
            private global::System.Data.DataColumn columnamount;
            
            private global::System.Data.DataColumn columnOverrideAmount;
            
            private global::System.Data.DataColumn columnIsExempt;
            
            private global::System.Data.DataColumn columnIsOverride;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tAA_MA_Type3DataTable() {
                this.TableName = "tAA_MA_Type3";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal tAA_MA_Type3DataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected tAA_MA_Type3DataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ParcelIDColumn {
                get {
                    return this.columnParcelID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MADistrictIDColumn {
                get {
                    return this.columnMADistrictID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SiteAcresColumn {
                get {
                    return this.columnSiteAcres;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DryAcresColumn {
                get {
                    return this.columnDryAcres;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IrrigatedAcresColumn {
                get {
                    return this.columnIrrigatedAcres;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TimberAcresColumn {
                get {
                    return this.columnTimberAcres;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OtherAcresColumn {
                get {
                    return this.columnOtherAcres;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BaseAcresColumn {
                get {
                    return this.columnBaseAcres;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TaxAmountColumn {
                get {
                    return this.columnTaxAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InsertedByColumn {
                get {
                    return this.columnInsertedBy;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InsertedDateColumn {
                get {
                    return this.columnInsertedDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UpdatedByColumn {
                get {
                    return this.columnUpdatedBy;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsDeletedColumn {
                get {
                    return this.columnIsDeleted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ModuleIDColumn {
                get {
                    return this.columnModuleID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn amountColumn {
                get {
                    return this.columnamount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OverrideAmountColumn {
                get {
                    return this.columnOverrideAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsExemptColumn {
                get {
                    return this.columnIsExempt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsOverrideColumn {
                get {
                    return this.columnIsOverride;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tAA_MA_Type3Row this[int index] {
                get {
                    return ((tAA_MA_Type3Row)(this.Rows[index]));
                }
            }
            
            public event tAA_MA_Type3RowChangeEventHandler tAA_MA_Type3RowChanging;
            
            public event tAA_MA_Type3RowChangeEventHandler tAA_MA_Type3RowChanged;
            
            public event tAA_MA_Type3RowChangeEventHandler tAA_MA_Type3RowDeleting;
            
            public event tAA_MA_Type3RowChangeEventHandler tAA_MA_Type3RowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddtAA_MA_Type3Row(tAA_MA_Type3Row row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tAA_MA_Type3Row AddtAA_MA_Type3Row(
                        int ParcelID, 
                        int MADistrictID, 
                        decimal SiteAcres, 
                        decimal DryAcres, 
                        decimal IrrigatedAcres, 
                        decimal TimberAcres, 
                        decimal OtherAcres, 
                        decimal BaseAcres, 
                        decimal TaxAmount, 
                        int InsertedBy, 
                        System.DateTime InsertedDate, 
                        int UpdatedBy, 
                        bool IsDeleted, 
                        short ModuleID, 
                        string amount, 
                        decimal OverrideAmount, 
                        bool IsExempt, 
                        bool IsOverride) {
                tAA_MA_Type3Row rowtAA_MA_Type3Row = ((tAA_MA_Type3Row)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ParcelID,
                        MADistrictID,
                        SiteAcres,
                        DryAcres,
                        IrrigatedAcres,
                        TimberAcres,
                        OtherAcres,
                        BaseAcres,
                        TaxAmount,
                        InsertedBy,
                        InsertedDate,
                        UpdatedBy,
                        IsDeleted,
                        ModuleID,
                        amount,
                        OverrideAmount,
                        IsExempt,
                        IsOverride};
                rowtAA_MA_Type3Row.ItemArray = columnValuesArray;
                this.Rows.Add(rowtAA_MA_Type3Row);
                return rowtAA_MA_Type3Row;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                tAA_MA_Type3DataTable cln = ((tAA_MA_Type3DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new tAA_MA_Type3DataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnParcelID = base.Columns["ParcelID"];
                this.columnMADistrictID = base.Columns["MADistrictID"];
                this.columnSiteAcres = base.Columns["SiteAcres"];
                this.columnDryAcres = base.Columns["DryAcres"];
                this.columnIrrigatedAcres = base.Columns["IrrigatedAcres"];
                this.columnTimberAcres = base.Columns["TimberAcres"];
                this.columnOtherAcres = base.Columns["OtherAcres"];
                this.columnBaseAcres = base.Columns["BaseAcres"];
                this.columnTaxAmount = base.Columns["TaxAmount"];
                this.columnInsertedBy = base.Columns["InsertedBy"];
                this.columnInsertedDate = base.Columns["InsertedDate"];
                this.columnUpdatedBy = base.Columns["UpdatedBy"];
                this.columnIsDeleted = base.Columns["IsDeleted"];
                this.columnModuleID = base.Columns["ModuleID"];
                this.columnamount = base.Columns["amount"];
                this.columnOverrideAmount = base.Columns["OverrideAmount"];
                this.columnIsExempt = base.Columns["IsExempt"];
                this.columnIsOverride = base.Columns["IsOverride"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnParcelID = new global::System.Data.DataColumn("ParcelID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnParcelID);
                this.columnMADistrictID = new global::System.Data.DataColumn("MADistrictID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMADistrictID);
                this.columnSiteAcres = new global::System.Data.DataColumn("SiteAcres", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSiteAcres);
                this.columnDryAcres = new global::System.Data.DataColumn("DryAcres", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDryAcres);
                this.columnIrrigatedAcres = new global::System.Data.DataColumn("IrrigatedAcres", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIrrigatedAcres);
                this.columnTimberAcres = new global::System.Data.DataColumn("TimberAcres", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTimberAcres);
                this.columnOtherAcres = new global::System.Data.DataColumn("OtherAcres", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOtherAcres);
                this.columnBaseAcres = new global::System.Data.DataColumn("BaseAcres", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBaseAcres);
                this.columnTaxAmount = new global::System.Data.DataColumn("TaxAmount", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTaxAmount);
                this.columnInsertedBy = new global::System.Data.DataColumn("InsertedBy", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInsertedBy);
                this.columnInsertedDate = new global::System.Data.DataColumn("InsertedDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInsertedDate);
                this.columnUpdatedBy = new global::System.Data.DataColumn("UpdatedBy", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUpdatedBy);
                this.columnIsDeleted = new global::System.Data.DataColumn("IsDeleted", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsDeleted);
                this.columnModuleID = new global::System.Data.DataColumn("ModuleID", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnModuleID);
                this.columnamount = new global::System.Data.DataColumn("amount", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnamount);
                this.columnOverrideAmount = new global::System.Data.DataColumn("OverrideAmount", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOverrideAmount);
                this.columnIsExempt = new global::System.Data.DataColumn("IsExempt", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsExempt);
                this.columnIsOverride = new global::System.Data.DataColumn("IsOverride", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsOverride);
                this.columnParcelID.ReadOnly = true;
                this.columnMADistrictID.ReadOnly = true;
                this.columnSiteAcres.ReadOnly = true;
                this.columnDryAcres.ReadOnly = true;
                this.columnIrrigatedAcres.ReadOnly = true;
                this.columnTimberAcres.ReadOnly = true;
                this.columnOtherAcres.ReadOnly = true;
                this.columnBaseAcres.ReadOnly = true;
                this.columnTaxAmount.ReadOnly = true;
                this.columnInsertedBy.ReadOnly = true;
                this.columnInsertedDate.ReadOnly = true;
                this.columnUpdatedBy.ReadOnly = true;
                this.columnIsDeleted.ReadOnly = true;
                this.columnModuleID.ReadOnly = true;
                this.columnamount.ReadOnly = true;
                this.columnamount.MaxLength = 50;
                this.columnOverrideAmount.ReadOnly = true;
                this.columnIsExempt.ReadOnly = true;
                this.columnIsOverride.ReadOnly = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tAA_MA_Type3Row NewtAA_MA_Type3Row() {
                return ((tAA_MA_Type3Row)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new tAA_MA_Type3Row(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(tAA_MA_Type3Row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.tAA_MA_Type3RowChanged != null)) {
                    this.tAA_MA_Type3RowChanged(this, new tAA_MA_Type3RowChangeEvent(((tAA_MA_Type3Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.tAA_MA_Type3RowChanging != null)) {
                    this.tAA_MA_Type3RowChanging(this, new tAA_MA_Type3RowChangeEvent(((tAA_MA_Type3Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.tAA_MA_Type3RowDeleted != null)) {
                    this.tAA_MA_Type3RowDeleted(this, new tAA_MA_Type3RowChangeEvent(((tAA_MA_Type3Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.tAA_MA_Type3RowDeleting != null)) {
                    this.tAA_MA_Type3RowDeleting(this, new tAA_MA_Type3RowChangeEvent(((tAA_MA_Type3Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovetAA_MA_Type3Row(tAA_MA_Type3Row row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                f25000FieldUse ds = new f25000FieldUse();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "tAA_MA_Type3DataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class tAA_MA_Type4DataTable : global::System.Data.TypedTableBase<tAA_MA_Type4Row> {
            
            private global::System.Data.DataColumn columnParcelID;
            
            private global::System.Data.DataColumn columnMADistrictID;
            
            private global::System.Data.DataColumn columnTaxAmount;
            
            private global::System.Data.DataColumn columnAmount;
            
            private global::System.Data.DataColumn columnInsertedBy;
            
            private global::System.Data.DataColumn columnInsertedDate;
            
            private global::System.Data.DataColumn columnUpdatedBy;
            
            private global::System.Data.DataColumn columnIsDeleted;
            
            private global::System.Data.DataColumn columnModuleID;
            
            private global::System.Data.DataColumn columnOverrideAmount;
            
            private global::System.Data.DataColumn columnIsExempt;
            
            private global::System.Data.DataColumn columnIsOverride;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tAA_MA_Type4DataTable() {
                this.TableName = "tAA_MA_Type4";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal tAA_MA_Type4DataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected tAA_MA_Type4DataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ParcelIDColumn {
                get {
                    return this.columnParcelID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MADistrictIDColumn {
                get {
                    return this.columnMADistrictID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TaxAmountColumn {
                get {
                    return this.columnTaxAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AmountColumn {
                get {
                    return this.columnAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InsertedByColumn {
                get {
                    return this.columnInsertedBy;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InsertedDateColumn {
                get {
                    return this.columnInsertedDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UpdatedByColumn {
                get {
                    return this.columnUpdatedBy;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsDeletedColumn {
                get {
                    return this.columnIsDeleted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ModuleIDColumn {
                get {
                    return this.columnModuleID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OverrideAmountColumn {
                get {
                    return this.columnOverrideAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsExemptColumn {
                get {
                    return this.columnIsExempt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsOverrideColumn {
                get {
                    return this.columnIsOverride;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tAA_MA_Type4Row this[int index] {
                get {
                    return ((tAA_MA_Type4Row)(this.Rows[index]));
                }
            }
            
            public event tAA_MA_Type4RowChangeEventHandler tAA_MA_Type4RowChanging;
            
            public event tAA_MA_Type4RowChangeEventHandler tAA_MA_Type4RowChanged;
            
            public event tAA_MA_Type4RowChangeEventHandler tAA_MA_Type4RowDeleting;
            
            public event tAA_MA_Type4RowChangeEventHandler tAA_MA_Type4RowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddtAA_MA_Type4Row(tAA_MA_Type4Row row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tAA_MA_Type4Row AddtAA_MA_Type4Row(int ParcelID, int MADistrictID, decimal TaxAmount, decimal Amount, int InsertedBy, System.DateTime InsertedDate, int UpdatedBy, bool IsDeleted, short ModuleID, decimal OverrideAmount, bool IsExempt, bool IsOverride) {
                tAA_MA_Type4Row rowtAA_MA_Type4Row = ((tAA_MA_Type4Row)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ParcelID,
                        MADistrictID,
                        TaxAmount,
                        Amount,
                        InsertedBy,
                        InsertedDate,
                        UpdatedBy,
                        IsDeleted,
                        ModuleID,
                        OverrideAmount,
                        IsExempt,
                        IsOverride};
                rowtAA_MA_Type4Row.ItemArray = columnValuesArray;
                this.Rows.Add(rowtAA_MA_Type4Row);
                return rowtAA_MA_Type4Row;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                tAA_MA_Type4DataTable cln = ((tAA_MA_Type4DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new tAA_MA_Type4DataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnParcelID = base.Columns["ParcelID"];
                this.columnMADistrictID = base.Columns["MADistrictID"];
                this.columnTaxAmount = base.Columns["TaxAmount"];
                this.columnAmount = base.Columns["Amount"];
                this.columnInsertedBy = base.Columns["InsertedBy"];
                this.columnInsertedDate = base.Columns["InsertedDate"];
                this.columnUpdatedBy = base.Columns["UpdatedBy"];
                this.columnIsDeleted = base.Columns["IsDeleted"];
                this.columnModuleID = base.Columns["ModuleID"];
                this.columnOverrideAmount = base.Columns["OverrideAmount"];
                this.columnIsExempt = base.Columns["IsExempt"];
                this.columnIsOverride = base.Columns["IsOverride"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnParcelID = new global::System.Data.DataColumn("ParcelID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnParcelID);
                this.columnMADistrictID = new global::System.Data.DataColumn("MADistrictID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMADistrictID);
                this.columnTaxAmount = new global::System.Data.DataColumn("TaxAmount", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTaxAmount);
                this.columnAmount = new global::System.Data.DataColumn("Amount", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAmount);
                this.columnInsertedBy = new global::System.Data.DataColumn("InsertedBy", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInsertedBy);
                this.columnInsertedDate = new global::System.Data.DataColumn("InsertedDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInsertedDate);
                this.columnUpdatedBy = new global::System.Data.DataColumn("UpdatedBy", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUpdatedBy);
                this.columnIsDeleted = new global::System.Data.DataColumn("IsDeleted", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsDeleted);
                this.columnModuleID = new global::System.Data.DataColumn("ModuleID", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnModuleID);
                this.columnOverrideAmount = new global::System.Data.DataColumn("OverrideAmount", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOverrideAmount);
                this.columnIsExempt = new global::System.Data.DataColumn("IsExempt", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsExempt);
                this.columnIsOverride = new global::System.Data.DataColumn("IsOverride", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsOverride);
                this.columnParcelID.ReadOnly = true;
                this.columnMADistrictID.ReadOnly = true;
                this.columnTaxAmount.ReadOnly = true;
                this.columnAmount.ReadOnly = true;
                this.columnInsertedBy.ReadOnly = true;
                this.columnInsertedDate.ReadOnly = true;
                this.columnUpdatedBy.ReadOnly = true;
                this.columnIsDeleted.ReadOnly = true;
                this.columnModuleID.ReadOnly = true;
                this.columnOverrideAmount.ReadOnly = true;
                this.columnIsExempt.ReadOnly = true;
                this.columnIsOverride.ReadOnly = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tAA_MA_Type4Row NewtAA_MA_Type4Row() {
                return ((tAA_MA_Type4Row)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new tAA_MA_Type4Row(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(tAA_MA_Type4Row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.tAA_MA_Type4RowChanged != null)) {
                    this.tAA_MA_Type4RowChanged(this, new tAA_MA_Type4RowChangeEvent(((tAA_MA_Type4Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.tAA_MA_Type4RowChanging != null)) {
                    this.tAA_MA_Type4RowChanging(this, new tAA_MA_Type4RowChangeEvent(((tAA_MA_Type4Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.tAA_MA_Type4RowDeleted != null)) {
                    this.tAA_MA_Type4RowDeleted(this, new tAA_MA_Type4RowChangeEvent(((tAA_MA_Type4Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.tAA_MA_Type4RowDeleting != null)) {
                    this.tAA_MA_Type4RowDeleting(this, new tAA_MA_Type4RowChangeEvent(((tAA_MA_Type4Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovetAA_MA_Type4Row(tAA_MA_Type4Row row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                f25000FieldUse ds = new f25000FieldUse();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "tAA_MA_Type4DataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class tAA_MA_Type6DataTable : global::System.Data.TypedTableBase<tAA_MA_Type6Row> {
            
            private global::System.Data.DataColumn columnParcelID;
            
            private global::System.Data.DataColumn columnMADistrictID;
            
            private global::System.Data.DataColumn columnFirePatrolAcres;
            
            private global::System.Data.DataColumn columnCountyFee;
            
            private global::System.Data.DataColumn columnFPAFee;
            
            private global::System.Data.DataColumn columnLCFFee;
            
            private global::System.Data.DataColumn columnFPARate;
            
            private global::System.Data.DataColumn columnLCFRate;
            
            private global::System.Data.DataColumn columnTaxAmount;
            
            private global::System.Data.DataColumn columnInsertedBy;
            
            private global::System.Data.DataColumn columnInsertedDate;
            
            private global::System.Data.DataColumn columnUpdatedBy;
            
            private global::System.Data.DataColumn columnIsDeleted;
            
            private global::System.Data.DataColumn columnModuleID;
            
            private global::System.Data.DataColumn columnamount;
            
            private global::System.Data.DataColumn columnOverrideAmount;
            
            private global::System.Data.DataColumn columnIsExempt;
            
            private global::System.Data.DataColumn columnIsOverride;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tAA_MA_Type6DataTable() {
                this.TableName = "tAA_MA_Type6";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal tAA_MA_Type6DataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected tAA_MA_Type6DataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ParcelIDColumn {
                get {
                    return this.columnParcelID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MADistrictIDColumn {
                get {
                    return this.columnMADistrictID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FirePatrolAcresColumn {
                get {
                    return this.columnFirePatrolAcres;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CountyFeeColumn {
                get {
                    return this.columnCountyFee;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FPAFeeColumn {
                get {
                    return this.columnFPAFee;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LCFFeeColumn {
                get {
                    return this.columnLCFFee;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FPARateColumn {
                get {
                    return this.columnFPARate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LCFRateColumn {
                get {
                    return this.columnLCFRate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TaxAmountColumn {
                get {
                    return this.columnTaxAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InsertedByColumn {
                get {
                    return this.columnInsertedBy;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InsertedDateColumn {
                get {
                    return this.columnInsertedDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UpdatedByColumn {
                get {
                    return this.columnUpdatedBy;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsDeletedColumn {
                get {
                    return this.columnIsDeleted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ModuleIDColumn {
                get {
                    return this.columnModuleID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn amountColumn {
                get {
                    return this.columnamount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OverrideAmountColumn {
                get {
                    return this.columnOverrideAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsExemptColumn {
                get {
                    return this.columnIsExempt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsOverrideColumn {
                get {
                    return this.columnIsOverride;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tAA_MA_Type6Row this[int index] {
                get {
                    return ((tAA_MA_Type6Row)(this.Rows[index]));
                }
            }
            
            public event tAA_MA_Type6RowChangeEventHandler tAA_MA_Type6RowChanging;
            
            public event tAA_MA_Type6RowChangeEventHandler tAA_MA_Type6RowChanged;
            
            public event tAA_MA_Type6RowChangeEventHandler tAA_MA_Type6RowDeleting;
            
            public event tAA_MA_Type6RowChangeEventHandler tAA_MA_Type6RowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddtAA_MA_Type6Row(tAA_MA_Type6Row row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tAA_MA_Type6Row AddtAA_MA_Type6Row(
                        int ParcelID, 
                        int MADistrictID, 
                        decimal FirePatrolAcres, 
                        decimal CountyFee, 
                        decimal FPAFee, 
                        decimal LCFFee, 
                        decimal FPARate, 
                        decimal LCFRate, 
                        decimal TaxAmount, 
                        int InsertedBy, 
                        System.DateTime InsertedDate, 
                        int UpdatedBy, 
                        bool IsDeleted, 
                        short ModuleID, 
                        string amount, 
                        decimal OverrideAmount, 
                        bool IsExempt, 
                        bool IsOverride) {
                tAA_MA_Type6Row rowtAA_MA_Type6Row = ((tAA_MA_Type6Row)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ParcelID,
                        MADistrictID,
                        FirePatrolAcres,
                        CountyFee,
                        FPAFee,
                        LCFFee,
                        FPARate,
                        LCFRate,
                        TaxAmount,
                        InsertedBy,
                        InsertedDate,
                        UpdatedBy,
                        IsDeleted,
                        ModuleID,
                        amount,
                        OverrideAmount,
                        IsExempt,
                        IsOverride};
                rowtAA_MA_Type6Row.ItemArray = columnValuesArray;
                this.Rows.Add(rowtAA_MA_Type6Row);
                return rowtAA_MA_Type6Row;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                tAA_MA_Type6DataTable cln = ((tAA_MA_Type6DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new tAA_MA_Type6DataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnParcelID = base.Columns["ParcelID"];
                this.columnMADistrictID = base.Columns["MADistrictID"];
                this.columnFirePatrolAcres = base.Columns["FirePatrolAcres"];
                this.columnCountyFee = base.Columns["CountyFee"];
                this.columnFPAFee = base.Columns["FPAFee"];
                this.columnLCFFee = base.Columns["LCFFee"];
                this.columnFPARate = base.Columns["FPARate"];
                this.columnLCFRate = base.Columns["LCFRate"];
                this.columnTaxAmount = base.Columns["TaxAmount"];
                this.columnInsertedBy = base.Columns["InsertedBy"];
                this.columnInsertedDate = base.Columns["InsertedDate"];
                this.columnUpdatedBy = base.Columns["UpdatedBy"];
                this.columnIsDeleted = base.Columns["IsDeleted"];
                this.columnModuleID = base.Columns["ModuleID"];
                this.columnamount = base.Columns["amount"];
                this.columnOverrideAmount = base.Columns["OverrideAmount"];
                this.columnIsExempt = base.Columns["IsExempt"];
                this.columnIsOverride = base.Columns["IsOverride"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnParcelID = new global::System.Data.DataColumn("ParcelID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnParcelID);
                this.columnMADistrictID = new global::System.Data.DataColumn("MADistrictID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMADistrictID);
                this.columnFirePatrolAcres = new global::System.Data.DataColumn("FirePatrolAcres", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFirePatrolAcres);
                this.columnCountyFee = new global::System.Data.DataColumn("CountyFee", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCountyFee);
                this.columnFPAFee = new global::System.Data.DataColumn("FPAFee", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFPAFee);
                this.columnLCFFee = new global::System.Data.DataColumn("LCFFee", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLCFFee);
                this.columnFPARate = new global::System.Data.DataColumn("FPARate", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFPARate);
                this.columnLCFRate = new global::System.Data.DataColumn("LCFRate", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLCFRate);
                this.columnTaxAmount = new global::System.Data.DataColumn("TaxAmount", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTaxAmount);
                this.columnInsertedBy = new global::System.Data.DataColumn("InsertedBy", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInsertedBy);
                this.columnInsertedDate = new global::System.Data.DataColumn("InsertedDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInsertedDate);
                this.columnUpdatedBy = new global::System.Data.DataColumn("UpdatedBy", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUpdatedBy);
                this.columnIsDeleted = new global::System.Data.DataColumn("IsDeleted", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsDeleted);
                this.columnModuleID = new global::System.Data.DataColumn("ModuleID", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnModuleID);
                this.columnamount = new global::System.Data.DataColumn("amount", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnamount);
                this.columnOverrideAmount = new global::System.Data.DataColumn("OverrideAmount", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOverrideAmount);
                this.columnIsExempt = new global::System.Data.DataColumn("IsExempt", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsExempt);
                this.columnIsOverride = new global::System.Data.DataColumn("IsOverride", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsOverride);
                this.columnParcelID.ReadOnly = true;
                this.columnMADistrictID.ReadOnly = true;
                this.columnFirePatrolAcres.ReadOnly = true;
                this.columnCountyFee.ReadOnly = true;
                this.columnFPAFee.ReadOnly = true;
                this.columnLCFFee.ReadOnly = true;
                this.columnFPARate.ReadOnly = true;
                this.columnLCFRate.ReadOnly = true;
                this.columnTaxAmount.ReadOnly = true;
                this.columnInsertedBy.ReadOnly = true;
                this.columnInsertedDate.ReadOnly = true;
                this.columnUpdatedBy.ReadOnly = true;
                this.columnIsDeleted.ReadOnly = true;
                this.columnModuleID.ReadOnly = true;
                this.columnamount.ReadOnly = true;
                this.columnamount.MaxLength = 50;
                this.columnOverrideAmount.ReadOnly = true;
                this.columnIsExempt.ReadOnly = true;
                this.columnIsOverride.ReadOnly = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tAA_MA_Type6Row NewtAA_MA_Type6Row() {
                return ((tAA_MA_Type6Row)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new tAA_MA_Type6Row(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(tAA_MA_Type6Row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.tAA_MA_Type6RowChanged != null)) {
                    this.tAA_MA_Type6RowChanged(this, new tAA_MA_Type6RowChangeEvent(((tAA_MA_Type6Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.tAA_MA_Type6RowChanging != null)) {
                    this.tAA_MA_Type6RowChanging(this, new tAA_MA_Type6RowChangeEvent(((tAA_MA_Type6Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.tAA_MA_Type6RowDeleted != null)) {
                    this.tAA_MA_Type6RowDeleted(this, new tAA_MA_Type6RowChangeEvent(((tAA_MA_Type6Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.tAA_MA_Type6RowDeleting != null)) {
                    this.tAA_MA_Type6RowDeleting(this, new tAA_MA_Type6RowChangeEvent(((tAA_MA_Type6Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovetAA_MA_Type6Row(tAA_MA_Type6Row row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                f25000FieldUse ds = new f25000FieldUse();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "tAA_MA_Type6DataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class tAA_MA_Type7DataTable : global::System.Data.TypedTableBase<tAA_MA_Type7Row> {
            
            private global::System.Data.DataColumn columnParcelID;
            
            private global::System.Data.DataColumn columnMADistrictID;
            
            private global::System.Data.DataColumn columnBenefitCharge;
            
            private global::System.Data.DataColumn columnAssessedValue;
            
            private global::System.Data.DataColumn columnResidentialRate;
            
            private global::System.Data.DataColumn columnCommercialRate;
            
            private global::System.Data.DataColumn columnTaxAmount;
            
            private global::System.Data.DataColumn columnInsertedBy;
            
            private global::System.Data.DataColumn columnInsertedDate;
            
            private global::System.Data.DataColumn columnUpdatedBy;
            
            private global::System.Data.DataColumn columnIsDeleted;
            
            private global::System.Data.DataColumn columnModuleID;
            
            private global::System.Data.DataColumn columnamount;
            
            private global::System.Data.DataColumn columnOverrideAmount;
            
            private global::System.Data.DataColumn columnIsExempt;
            
            private global::System.Data.DataColumn columnIsOverride;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tAA_MA_Type7DataTable() {
                this.TableName = "tAA_MA_Type7";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal tAA_MA_Type7DataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected tAA_MA_Type7DataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ParcelIDColumn {
                get {
                    return this.columnParcelID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MADistrictIDColumn {
                get {
                    return this.columnMADistrictID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BenefitChargeColumn {
                get {
                    return this.columnBenefitCharge;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AssessedValueColumn {
                get {
                    return this.columnAssessedValue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ResidentialRateColumn {
                get {
                    return this.columnResidentialRate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CommercialRateColumn {
                get {
                    return this.columnCommercialRate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TaxAmountColumn {
                get {
                    return this.columnTaxAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InsertedByColumn {
                get {
                    return this.columnInsertedBy;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InsertedDateColumn {
                get {
                    return this.columnInsertedDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UpdatedByColumn {
                get {
                    return this.columnUpdatedBy;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsDeletedColumn {
                get {
                    return this.columnIsDeleted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ModuleIDColumn {
                get {
                    return this.columnModuleID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn amountColumn {
                get {
                    return this.columnamount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OverrideAmountColumn {
                get {
                    return this.columnOverrideAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsExemptColumn {
                get {
                    return this.columnIsExempt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsOverrideColumn {
                get {
                    return this.columnIsOverride;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tAA_MA_Type7Row this[int index] {
                get {
                    return ((tAA_MA_Type7Row)(this.Rows[index]));
                }
            }
            
            public event tAA_MA_Type7RowChangeEventHandler tAA_MA_Type7RowChanging;
            
            public event tAA_MA_Type7RowChangeEventHandler tAA_MA_Type7RowChanged;
            
            public event tAA_MA_Type7RowChangeEventHandler tAA_MA_Type7RowDeleting;
            
            public event tAA_MA_Type7RowChangeEventHandler tAA_MA_Type7RowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddtAA_MA_Type7Row(tAA_MA_Type7Row row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tAA_MA_Type7Row AddtAA_MA_Type7Row(
                        int ParcelID, 
                        int MADistrictID, 
                        decimal BenefitCharge, 
                        decimal AssessedValue, 
                        decimal ResidentialRate, 
                        decimal CommercialRate, 
                        decimal TaxAmount, 
                        int InsertedBy, 
                        System.DateTime InsertedDate, 
                        int UpdatedBy, 
                        bool IsDeleted, 
                        short ModuleID, 
                        string amount, 
                        decimal OverrideAmount, 
                        bool IsExempt, 
                        bool IsOverride) {
                tAA_MA_Type7Row rowtAA_MA_Type7Row = ((tAA_MA_Type7Row)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ParcelID,
                        MADistrictID,
                        BenefitCharge,
                        AssessedValue,
                        ResidentialRate,
                        CommercialRate,
                        TaxAmount,
                        InsertedBy,
                        InsertedDate,
                        UpdatedBy,
                        IsDeleted,
                        ModuleID,
                        amount,
                        OverrideAmount,
                        IsExempt,
                        IsOverride};
                rowtAA_MA_Type7Row.ItemArray = columnValuesArray;
                this.Rows.Add(rowtAA_MA_Type7Row);
                return rowtAA_MA_Type7Row;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                tAA_MA_Type7DataTable cln = ((tAA_MA_Type7DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new tAA_MA_Type7DataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnParcelID = base.Columns["ParcelID"];
                this.columnMADistrictID = base.Columns["MADistrictID"];
                this.columnBenefitCharge = base.Columns["BenefitCharge"];
                this.columnAssessedValue = base.Columns["AssessedValue"];
                this.columnResidentialRate = base.Columns["ResidentialRate"];
                this.columnCommercialRate = base.Columns["CommercialRate"];
                this.columnTaxAmount = base.Columns["TaxAmount"];
                this.columnInsertedBy = base.Columns["InsertedBy"];
                this.columnInsertedDate = base.Columns["InsertedDate"];
                this.columnUpdatedBy = base.Columns["UpdatedBy"];
                this.columnIsDeleted = base.Columns["IsDeleted"];
                this.columnModuleID = base.Columns["ModuleID"];
                this.columnamount = base.Columns["amount"];
                this.columnOverrideAmount = base.Columns["OverrideAmount"];
                this.columnIsExempt = base.Columns["IsExempt"];
                this.columnIsOverride = base.Columns["IsOverride"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnParcelID = new global::System.Data.DataColumn("ParcelID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnParcelID);
                this.columnMADistrictID = new global::System.Data.DataColumn("MADistrictID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMADistrictID);
                this.columnBenefitCharge = new global::System.Data.DataColumn("BenefitCharge", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBenefitCharge);
                this.columnAssessedValue = new global::System.Data.DataColumn("AssessedValue", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAssessedValue);
                this.columnResidentialRate = new global::System.Data.DataColumn("ResidentialRate", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnResidentialRate);
                this.columnCommercialRate = new global::System.Data.DataColumn("CommercialRate", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCommercialRate);
                this.columnTaxAmount = new global::System.Data.DataColumn("TaxAmount", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTaxAmount);
                this.columnInsertedBy = new global::System.Data.DataColumn("InsertedBy", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInsertedBy);
                this.columnInsertedDate = new global::System.Data.DataColumn("InsertedDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInsertedDate);
                this.columnUpdatedBy = new global::System.Data.DataColumn("UpdatedBy", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUpdatedBy);
                this.columnIsDeleted = new global::System.Data.DataColumn("IsDeleted", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsDeleted);
                this.columnModuleID = new global::System.Data.DataColumn("ModuleID", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnModuleID);
                this.columnamount = new global::System.Data.DataColumn("amount", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnamount);
                this.columnOverrideAmount = new global::System.Data.DataColumn("OverrideAmount", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOverrideAmount);
                this.columnIsExempt = new global::System.Data.DataColumn("IsExempt", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsExempt);
                this.columnIsOverride = new global::System.Data.DataColumn("IsOverride", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsOverride);
                this.columnParcelID.ReadOnly = true;
                this.columnMADistrictID.ReadOnly = true;
                this.columnBenefitCharge.ReadOnly = true;
                this.columnAssessedValue.ReadOnly = true;
                this.columnResidentialRate.ReadOnly = true;
                this.columnCommercialRate.ReadOnly = true;
                this.columnTaxAmount.ReadOnly = true;
                this.columnInsertedBy.ReadOnly = true;
                this.columnInsertedDate.ReadOnly = true;
                this.columnUpdatedBy.ReadOnly = true;
                this.columnIsDeleted.ReadOnly = true;
                this.columnModuleID.ReadOnly = true;
                this.columnamount.ReadOnly = true;
                this.columnamount.MaxLength = 50;
                this.columnOverrideAmount.ReadOnly = true;
                this.columnIsExempt.ReadOnly = true;
                this.columnIsOverride.ReadOnly = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tAA_MA_Type7Row NewtAA_MA_Type7Row() {
                return ((tAA_MA_Type7Row)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new tAA_MA_Type7Row(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(tAA_MA_Type7Row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.tAA_MA_Type7RowChanged != null)) {
                    this.tAA_MA_Type7RowChanged(this, new tAA_MA_Type7RowChangeEvent(((tAA_MA_Type7Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.tAA_MA_Type7RowChanging != null)) {
                    this.tAA_MA_Type7RowChanging(this, new tAA_MA_Type7RowChangeEvent(((tAA_MA_Type7Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.tAA_MA_Type7RowDeleted != null)) {
                    this.tAA_MA_Type7RowDeleted(this, new tAA_MA_Type7RowChangeEvent(((tAA_MA_Type7Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.tAA_MA_Type7RowDeleting != null)) {
                    this.tAA_MA_Type7RowDeleting(this, new tAA_MA_Type7RowChangeEvent(((tAA_MA_Type7Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovetAA_MA_Type7Row(tAA_MA_Type7Row row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                f25000FieldUse ds = new f25000FieldUse();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "tAA_MA_Type7DataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class tAA_MA_Type8DataTable : global::System.Data.TypedTableBase<tAA_MA_Type8Row> {
            
            private global::System.Data.DataColumn columnParcelID;
            
            private global::System.Data.DataColumn columnMADistrictID;
            
            private global::System.Data.DataColumn columnBaseFee;
            
            private global::System.Data.DataColumn columnTaxAmount;
            
            private global::System.Data.DataColumn columnInsertedBy;
            
            private global::System.Data.DataColumn columnInsertedDate;
            
            private global::System.Data.DataColumn columnUpdatedBy;
            
            private global::System.Data.DataColumn columnIsDeleted;
            
            private global::System.Data.DataColumn columnModuleID;
            
            private global::System.Data.DataColumn columnamount;
            
            private global::System.Data.DataColumn columnOverrideAmount;
            
            private global::System.Data.DataColumn columnIsExempt;
            
            private global::System.Data.DataColumn columnIsOverride;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tAA_MA_Type8DataTable() {
                this.TableName = "tAA_MA_Type8";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal tAA_MA_Type8DataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected tAA_MA_Type8DataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ParcelIDColumn {
                get {
                    return this.columnParcelID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MADistrictIDColumn {
                get {
                    return this.columnMADistrictID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BaseFeeColumn {
                get {
                    return this.columnBaseFee;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TaxAmountColumn {
                get {
                    return this.columnTaxAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InsertedByColumn {
                get {
                    return this.columnInsertedBy;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InsertedDateColumn {
                get {
                    return this.columnInsertedDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UpdatedByColumn {
                get {
                    return this.columnUpdatedBy;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsDeletedColumn {
                get {
                    return this.columnIsDeleted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ModuleIDColumn {
                get {
                    return this.columnModuleID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn amountColumn {
                get {
                    return this.columnamount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OverrideAmountColumn {
                get {
                    return this.columnOverrideAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsExemptColumn {
                get {
                    return this.columnIsExempt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsOverrideColumn {
                get {
                    return this.columnIsOverride;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tAA_MA_Type8Row this[int index] {
                get {
                    return ((tAA_MA_Type8Row)(this.Rows[index]));
                }
            }
            
            public event tAA_MA_Type8RowChangeEventHandler tAA_MA_Type8RowChanging;
            
            public event tAA_MA_Type8RowChangeEventHandler tAA_MA_Type8RowChanged;
            
            public event tAA_MA_Type8RowChangeEventHandler tAA_MA_Type8RowDeleting;
            
            public event tAA_MA_Type8RowChangeEventHandler tAA_MA_Type8RowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddtAA_MA_Type8Row(tAA_MA_Type8Row row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tAA_MA_Type8Row AddtAA_MA_Type8Row(int ParcelID, int MADistrictID, decimal BaseFee, decimal TaxAmount, int InsertedBy, System.DateTime InsertedDate, int UpdatedBy, bool IsDeleted, short ModuleID, string amount, decimal OverrideAmount, bool IsExempt, bool IsOverride) {
                tAA_MA_Type8Row rowtAA_MA_Type8Row = ((tAA_MA_Type8Row)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ParcelID,
                        MADistrictID,
                        BaseFee,
                        TaxAmount,
                        InsertedBy,
                        InsertedDate,
                        UpdatedBy,
                        IsDeleted,
                        ModuleID,
                        amount,
                        OverrideAmount,
                        IsExempt,
                        IsOverride};
                rowtAA_MA_Type8Row.ItemArray = columnValuesArray;
                this.Rows.Add(rowtAA_MA_Type8Row);
                return rowtAA_MA_Type8Row;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                tAA_MA_Type8DataTable cln = ((tAA_MA_Type8DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new tAA_MA_Type8DataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnParcelID = base.Columns["ParcelID"];
                this.columnMADistrictID = base.Columns["MADistrictID"];
                this.columnBaseFee = base.Columns["BaseFee"];
                this.columnTaxAmount = base.Columns["TaxAmount"];
                this.columnInsertedBy = base.Columns["InsertedBy"];
                this.columnInsertedDate = base.Columns["InsertedDate"];
                this.columnUpdatedBy = base.Columns["UpdatedBy"];
                this.columnIsDeleted = base.Columns["IsDeleted"];
                this.columnModuleID = base.Columns["ModuleID"];
                this.columnamount = base.Columns["amount"];
                this.columnOverrideAmount = base.Columns["OverrideAmount"];
                this.columnIsExempt = base.Columns["IsExempt"];
                this.columnIsOverride = base.Columns["IsOverride"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnParcelID = new global::System.Data.DataColumn("ParcelID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnParcelID);
                this.columnMADistrictID = new global::System.Data.DataColumn("MADistrictID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMADistrictID);
                this.columnBaseFee = new global::System.Data.DataColumn("BaseFee", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBaseFee);
                this.columnTaxAmount = new global::System.Data.DataColumn("TaxAmount", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTaxAmount);
                this.columnInsertedBy = new global::System.Data.DataColumn("InsertedBy", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInsertedBy);
                this.columnInsertedDate = new global::System.Data.DataColumn("InsertedDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInsertedDate);
                this.columnUpdatedBy = new global::System.Data.DataColumn("UpdatedBy", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUpdatedBy);
                this.columnIsDeleted = new global::System.Data.DataColumn("IsDeleted", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsDeleted);
                this.columnModuleID = new global::System.Data.DataColumn("ModuleID", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnModuleID);
                this.columnamount = new global::System.Data.DataColumn("amount", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnamount);
                this.columnOverrideAmount = new global::System.Data.DataColumn("OverrideAmount", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOverrideAmount);
                this.columnIsExempt = new global::System.Data.DataColumn("IsExempt", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsExempt);
                this.columnIsOverride = new global::System.Data.DataColumn("IsOverride", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsOverride);
                this.columnParcelID.ReadOnly = true;
                this.columnMADistrictID.ReadOnly = true;
                this.columnBaseFee.ReadOnly = true;
                this.columnTaxAmount.ReadOnly = true;
                this.columnInsertedBy.ReadOnly = true;
                this.columnInsertedDate.ReadOnly = true;
                this.columnUpdatedBy.ReadOnly = true;
                this.columnIsDeleted.ReadOnly = true;
                this.columnModuleID.ReadOnly = true;
                this.columnamount.ReadOnly = true;
                this.columnamount.MaxLength = 50;
                this.columnOverrideAmount.ReadOnly = true;
                this.columnIsExempt.ReadOnly = true;
                this.columnIsOverride.ReadOnly = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tAA_MA_Type8Row NewtAA_MA_Type8Row() {
                return ((tAA_MA_Type8Row)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new tAA_MA_Type8Row(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(tAA_MA_Type8Row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.tAA_MA_Type8RowChanged != null)) {
                    this.tAA_MA_Type8RowChanged(this, new tAA_MA_Type8RowChangeEvent(((tAA_MA_Type8Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.tAA_MA_Type8RowChanging != null)) {
                    this.tAA_MA_Type8RowChanging(this, new tAA_MA_Type8RowChangeEvent(((tAA_MA_Type8Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.tAA_MA_Type8RowDeleted != null)) {
                    this.tAA_MA_Type8RowDeleted(this, new tAA_MA_Type8RowChangeEvent(((tAA_MA_Type8Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.tAA_MA_Type8RowDeleting != null)) {
                    this.tAA_MA_Type8RowDeleting(this, new tAA_MA_Type8RowChangeEvent(((tAA_MA_Type8Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovetAA_MA_Type8Row(tAA_MA_Type8Row row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                f25000FieldUse ds = new f25000FieldUse();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "tAA_MA_Type8DataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class tAA_MA_Type9DataTable : global::System.Data.TypedTableBase<tAA_MA_Type9Row> {
            
            private global::System.Data.DataColumn columnParcelID;
            
            private global::System.Data.DataColumn columnMADistrictID;
            
            private global::System.Data.DataColumn columnAssessedValue;
            
            private global::System.Data.DataColumn columnrate;
            
            private global::System.Data.DataColumn columnTaxAmount;
            
            private global::System.Data.DataColumn columnInsertedBy;
            
            private global::System.Data.DataColumn columnInsertedDate;
            
            private global::System.Data.DataColumn columnUpdatedBy;
            
            private global::System.Data.DataColumn columnIsDeleted;
            
            private global::System.Data.DataColumn columnModuleID;
            
            private global::System.Data.DataColumn columnamount;
            
            private global::System.Data.DataColumn columnOverrideAmount;
            
            private global::System.Data.DataColumn columnIsExempt;
            
            private global::System.Data.DataColumn columnIsOverride;
            
            private global::System.Data.DataColumn columnunits;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tAA_MA_Type9DataTable() {
                this.TableName = "tAA_MA_Type9";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal tAA_MA_Type9DataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected tAA_MA_Type9DataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ParcelIDColumn {
                get {
                    return this.columnParcelID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MADistrictIDColumn {
                get {
                    return this.columnMADistrictID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AssessedValueColumn {
                get {
                    return this.columnAssessedValue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn rateColumn {
                get {
                    return this.columnrate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TaxAmountColumn {
                get {
                    return this.columnTaxAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InsertedByColumn {
                get {
                    return this.columnInsertedBy;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InsertedDateColumn {
                get {
                    return this.columnInsertedDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UpdatedByColumn {
                get {
                    return this.columnUpdatedBy;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsDeletedColumn {
                get {
                    return this.columnIsDeleted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ModuleIDColumn {
                get {
                    return this.columnModuleID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn amountColumn {
                get {
                    return this.columnamount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OverrideAmountColumn {
                get {
                    return this.columnOverrideAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsExemptColumn {
                get {
                    return this.columnIsExempt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsOverrideColumn {
                get {
                    return this.columnIsOverride;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn unitsColumn {
                get {
                    return this.columnunits;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tAA_MA_Type9Row this[int index] {
                get {
                    return ((tAA_MA_Type9Row)(this.Rows[index]));
                }
            }
            
            public event tAA_MA_Type9RowChangeEventHandler tAA_MA_Type9RowChanging;
            
            public event tAA_MA_Type9RowChangeEventHandler tAA_MA_Type9RowChanged;
            
            public event tAA_MA_Type9RowChangeEventHandler tAA_MA_Type9RowDeleting;
            
            public event tAA_MA_Type9RowChangeEventHandler tAA_MA_Type9RowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddtAA_MA_Type9Row(tAA_MA_Type9Row row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tAA_MA_Type9Row AddtAA_MA_Type9Row(int ParcelID, int MADistrictID, decimal AssessedValue, decimal rate, decimal TaxAmount, int InsertedBy, System.DateTime InsertedDate, int UpdatedBy, bool IsDeleted, short ModuleID, string amount, decimal OverrideAmount, bool IsExempt, bool IsOverride, decimal units) {
                tAA_MA_Type9Row rowtAA_MA_Type9Row = ((tAA_MA_Type9Row)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ParcelID,
                        MADistrictID,
                        AssessedValue,
                        rate,
                        TaxAmount,
                        InsertedBy,
                        InsertedDate,
                        UpdatedBy,
                        IsDeleted,
                        ModuleID,
                        amount,
                        OverrideAmount,
                        IsExempt,
                        IsOverride,
                        units};
                rowtAA_MA_Type9Row.ItemArray = columnValuesArray;
                this.Rows.Add(rowtAA_MA_Type9Row);
                return rowtAA_MA_Type9Row;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                tAA_MA_Type9DataTable cln = ((tAA_MA_Type9DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new tAA_MA_Type9DataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnParcelID = base.Columns["ParcelID"];
                this.columnMADistrictID = base.Columns["MADistrictID"];
                this.columnAssessedValue = base.Columns["AssessedValue"];
                this.columnrate = base.Columns["rate"];
                this.columnTaxAmount = base.Columns["TaxAmount"];
                this.columnInsertedBy = base.Columns["InsertedBy"];
                this.columnInsertedDate = base.Columns["InsertedDate"];
                this.columnUpdatedBy = base.Columns["UpdatedBy"];
                this.columnIsDeleted = base.Columns["IsDeleted"];
                this.columnModuleID = base.Columns["ModuleID"];
                this.columnamount = base.Columns["amount"];
                this.columnOverrideAmount = base.Columns["OverrideAmount"];
                this.columnIsExempt = base.Columns["IsExempt"];
                this.columnIsOverride = base.Columns["IsOverride"];
                this.columnunits = base.Columns["units"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnParcelID = new global::System.Data.DataColumn("ParcelID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnParcelID);
                this.columnMADistrictID = new global::System.Data.DataColumn("MADistrictID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMADistrictID);
                this.columnAssessedValue = new global::System.Data.DataColumn("AssessedValue", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAssessedValue);
                this.columnrate = new global::System.Data.DataColumn("rate", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnrate);
                this.columnTaxAmount = new global::System.Data.DataColumn("TaxAmount", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTaxAmount);
                this.columnInsertedBy = new global::System.Data.DataColumn("InsertedBy", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInsertedBy);
                this.columnInsertedDate = new global::System.Data.DataColumn("InsertedDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInsertedDate);
                this.columnUpdatedBy = new global::System.Data.DataColumn("UpdatedBy", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUpdatedBy);
                this.columnIsDeleted = new global::System.Data.DataColumn("IsDeleted", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsDeleted);
                this.columnModuleID = new global::System.Data.DataColumn("ModuleID", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnModuleID);
                this.columnamount = new global::System.Data.DataColumn("amount", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnamount);
                this.columnOverrideAmount = new global::System.Data.DataColumn("OverrideAmount", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOverrideAmount);
                this.columnIsExempt = new global::System.Data.DataColumn("IsExempt", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsExempt);
                this.columnIsOverride = new global::System.Data.DataColumn("IsOverride", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsOverride);
                this.columnunits = new global::System.Data.DataColumn("units", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnunits);
                this.columnParcelID.ReadOnly = true;
                this.columnMADistrictID.ReadOnly = true;
                this.columnAssessedValue.ReadOnly = true;
                this.columnrate.ReadOnly = true;
                this.columnTaxAmount.ReadOnly = true;
                this.columnInsertedBy.ReadOnly = true;
                this.columnInsertedDate.ReadOnly = true;
                this.columnUpdatedBy.ReadOnly = true;
                this.columnIsDeleted.ReadOnly = true;
                this.columnModuleID.ReadOnly = true;
                this.columnamount.ReadOnly = true;
                this.columnamount.MaxLength = 50;
                this.columnOverrideAmount.ReadOnly = true;
                this.columnIsExempt.ReadOnly = true;
                this.columnIsOverride.ReadOnly = true;
                this.columnunits.ReadOnly = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tAA_MA_Type9Row NewtAA_MA_Type9Row() {
                return ((tAA_MA_Type9Row)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new tAA_MA_Type9Row(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(tAA_MA_Type9Row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.tAA_MA_Type9RowChanged != null)) {
                    this.tAA_MA_Type9RowChanged(this, new tAA_MA_Type9RowChangeEvent(((tAA_MA_Type9Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.tAA_MA_Type9RowChanging != null)) {
                    this.tAA_MA_Type9RowChanging(this, new tAA_MA_Type9RowChangeEvent(((tAA_MA_Type9Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.tAA_MA_Type9RowDeleted != null)) {
                    this.tAA_MA_Type9RowDeleted(this, new tAA_MA_Type9RowChangeEvent(((tAA_MA_Type9Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.tAA_MA_Type9RowDeleting != null)) {
                    this.tAA_MA_Type9RowDeleting(this, new tAA_MA_Type9RowChangeEvent(((tAA_MA_Type9Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovetAA_MA_Type9Row(tAA_MA_Type9Row row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                f25000FieldUse ds = new f25000FieldUse();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "tAA_MA_Type9DataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class tAA_MAD_Type1DataTable : global::System.Data.TypedTableBase<tAA_MAD_Type1Row> {
            
            private global::System.Data.DataColumn columnMADistrictID;
            
            private global::System.Data.DataColumn columnRollYear;
            
            private global::System.Data.DataColumn columnDistrictNumber;
            
            private global::System.Data.DataColumn columnDescription;
            
            private global::System.Data.DataColumn columnMinimumCharge;
            
            private global::System.Data.DataColumn columnMaximumAcres;
            
            private global::System.Data.DataColumn columnBaseFee;
            
            private global::System.Data.DataColumn columnLevyRate;
            
            private global::System.Data.DataColumn columnSiteBase;
            
            private global::System.Data.DataColumn columnSiteRate;
            
            private global::System.Data.DataColumn columnDryBase;
            
            private global::System.Data.DataColumn columnDryRate;
            
            private global::System.Data.DataColumn columnIrrigatedBase;
            
            private global::System.Data.DataColumn columnIrrigatedRate;
            
            private global::System.Data.DataColumn columnTimberBase;
            
            private global::System.Data.DataColumn columnTimberRate;
            
            private global::System.Data.DataColumn columnOtherBase;
            
            private global::System.Data.DataColumn columnOtherRate;
            
            private global::System.Data.DataColumn columnInsertedBy;
            
            private global::System.Data.DataColumn columnInsertedDate;
            
            private global::System.Data.DataColumn columnUpdatedBy;
            
            private global::System.Data.DataColumn columnIsDeleted;
            
            private global::System.Data.DataColumn columnModuleID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tAA_MAD_Type1DataTable() {
                this.TableName = "tAA_MAD_Type1";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal tAA_MAD_Type1DataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected tAA_MAD_Type1DataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MADistrictIDColumn {
                get {
                    return this.columnMADistrictID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RollYearColumn {
                get {
                    return this.columnRollYear;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DistrictNumberColumn {
                get {
                    return this.columnDistrictNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MinimumChargeColumn {
                get {
                    return this.columnMinimumCharge;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MaximumAcresColumn {
                get {
                    return this.columnMaximumAcres;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BaseFeeColumn {
                get {
                    return this.columnBaseFee;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LevyRateColumn {
                get {
                    return this.columnLevyRate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SiteBaseColumn {
                get {
                    return this.columnSiteBase;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SiteRateColumn {
                get {
                    return this.columnSiteRate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DryBaseColumn {
                get {
                    return this.columnDryBase;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DryRateColumn {
                get {
                    return this.columnDryRate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IrrigatedBaseColumn {
                get {
                    return this.columnIrrigatedBase;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IrrigatedRateColumn {
                get {
                    return this.columnIrrigatedRate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TimberBaseColumn {
                get {
                    return this.columnTimberBase;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TimberRateColumn {
                get {
                    return this.columnTimberRate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OtherBaseColumn {
                get {
                    return this.columnOtherBase;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OtherRateColumn {
                get {
                    return this.columnOtherRate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InsertedByColumn {
                get {
                    return this.columnInsertedBy;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InsertedDateColumn {
                get {
                    return this.columnInsertedDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UpdatedByColumn {
                get {
                    return this.columnUpdatedBy;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsDeletedColumn {
                get {
                    return this.columnIsDeleted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ModuleIDColumn {
                get {
                    return this.columnModuleID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tAA_MAD_Type1Row this[int index] {
                get {
                    return ((tAA_MAD_Type1Row)(this.Rows[index]));
                }
            }
            
            public event tAA_MAD_Type1RowChangeEventHandler tAA_MAD_Type1RowChanging;
            
            public event tAA_MAD_Type1RowChangeEventHandler tAA_MAD_Type1RowChanged;
            
            public event tAA_MAD_Type1RowChangeEventHandler tAA_MAD_Type1RowDeleting;
            
            public event tAA_MAD_Type1RowChangeEventHandler tAA_MAD_Type1RowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddtAA_MAD_Type1Row(tAA_MAD_Type1Row row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tAA_MAD_Type1Row AddtAA_MAD_Type1Row(
                        int MADistrictID, 
                        short RollYear, 
                        string DistrictNumber, 
                        string Description, 
                        decimal MinimumCharge, 
                        int MaximumAcres, 
                        decimal BaseFee, 
                        decimal LevyRate, 
                        decimal SiteBase, 
                        decimal SiteRate, 
                        decimal DryBase, 
                        decimal DryRate, 
                        decimal IrrigatedBase, 
                        decimal IrrigatedRate, 
                        decimal TimberBase, 
                        decimal TimberRate, 
                        decimal OtherBase, 
                        decimal OtherRate, 
                        int InsertedBy, 
                        System.DateTime InsertedDate, 
                        int UpdatedBy, 
                        bool IsDeleted, 
                        short ModuleID) {
                tAA_MAD_Type1Row rowtAA_MAD_Type1Row = ((tAA_MAD_Type1Row)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        MADistrictID,
                        RollYear,
                        DistrictNumber,
                        Description,
                        MinimumCharge,
                        MaximumAcres,
                        BaseFee,
                        LevyRate,
                        SiteBase,
                        SiteRate,
                        DryBase,
                        DryRate,
                        IrrigatedBase,
                        IrrigatedRate,
                        TimberBase,
                        TimberRate,
                        OtherBase,
                        OtherRate,
                        InsertedBy,
                        InsertedDate,
                        UpdatedBy,
                        IsDeleted,
                        ModuleID};
                rowtAA_MAD_Type1Row.ItemArray = columnValuesArray;
                this.Rows.Add(rowtAA_MAD_Type1Row);
                return rowtAA_MAD_Type1Row;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                tAA_MAD_Type1DataTable cln = ((tAA_MAD_Type1DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new tAA_MAD_Type1DataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnMADistrictID = base.Columns["MADistrictID"];
                this.columnRollYear = base.Columns["RollYear"];
                this.columnDistrictNumber = base.Columns["DistrictNumber"];
                this.columnDescription = base.Columns["Description"];
                this.columnMinimumCharge = base.Columns["MinimumCharge"];
                this.columnMaximumAcres = base.Columns["MaximumAcres"];
                this.columnBaseFee = base.Columns["BaseFee"];
                this.columnLevyRate = base.Columns["LevyRate"];
                this.columnSiteBase = base.Columns["SiteBase"];
                this.columnSiteRate = base.Columns["SiteRate"];
                this.columnDryBase = base.Columns["DryBase"];
                this.columnDryRate = base.Columns["DryRate"];
                this.columnIrrigatedBase = base.Columns["IrrigatedBase"];
                this.columnIrrigatedRate = base.Columns["IrrigatedRate"];
                this.columnTimberBase = base.Columns["TimberBase"];
                this.columnTimberRate = base.Columns["TimberRate"];
                this.columnOtherBase = base.Columns["OtherBase"];
                this.columnOtherRate = base.Columns["OtherRate"];
                this.columnInsertedBy = base.Columns["InsertedBy"];
                this.columnInsertedDate = base.Columns["InsertedDate"];
                this.columnUpdatedBy = base.Columns["UpdatedBy"];
                this.columnIsDeleted = base.Columns["IsDeleted"];
                this.columnModuleID = base.Columns["ModuleID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnMADistrictID = new global::System.Data.DataColumn("MADistrictID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMADistrictID);
                this.columnRollYear = new global::System.Data.DataColumn("RollYear", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRollYear);
                this.columnDistrictNumber = new global::System.Data.DataColumn("DistrictNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDistrictNumber);
                this.columnDescription = new global::System.Data.DataColumn("Description", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescription);
                this.columnMinimumCharge = new global::System.Data.DataColumn("MinimumCharge", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMinimumCharge);
                this.columnMaximumAcres = new global::System.Data.DataColumn("MaximumAcres", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMaximumAcres);
                this.columnBaseFee = new global::System.Data.DataColumn("BaseFee", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBaseFee);
                this.columnLevyRate = new global::System.Data.DataColumn("LevyRate", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLevyRate);
                this.columnSiteBase = new global::System.Data.DataColumn("SiteBase", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSiteBase);
                this.columnSiteRate = new global::System.Data.DataColumn("SiteRate", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSiteRate);
                this.columnDryBase = new global::System.Data.DataColumn("DryBase", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDryBase);
                this.columnDryRate = new global::System.Data.DataColumn("DryRate", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDryRate);
                this.columnIrrigatedBase = new global::System.Data.DataColumn("IrrigatedBase", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIrrigatedBase);
                this.columnIrrigatedRate = new global::System.Data.DataColumn("IrrigatedRate", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIrrigatedRate);
                this.columnTimberBase = new global::System.Data.DataColumn("TimberBase", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTimberBase);
                this.columnTimberRate = new global::System.Data.DataColumn("TimberRate", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTimberRate);
                this.columnOtherBase = new global::System.Data.DataColumn("OtherBase", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOtherBase);
                this.columnOtherRate = new global::System.Data.DataColumn("OtherRate", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOtherRate);
                this.columnInsertedBy = new global::System.Data.DataColumn("InsertedBy", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInsertedBy);
                this.columnInsertedDate = new global::System.Data.DataColumn("InsertedDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInsertedDate);
                this.columnUpdatedBy = new global::System.Data.DataColumn("UpdatedBy", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUpdatedBy);
                this.columnIsDeleted = new global::System.Data.DataColumn("IsDeleted", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsDeleted);
                this.columnModuleID = new global::System.Data.DataColumn("ModuleID", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnModuleID);
                this.columnMADistrictID.ReadOnly = true;
                this.columnRollYear.ReadOnly = true;
                this.columnDistrictNumber.ReadOnly = true;
                this.columnDistrictNumber.MaxLength = 50;
                this.columnDescription.ReadOnly = true;
                this.columnDescription.MaxLength = 250;
                this.columnMinimumCharge.ReadOnly = true;
                this.columnMaximumAcres.ReadOnly = true;
                this.columnBaseFee.ReadOnly = true;
                this.columnLevyRate.ReadOnly = true;
                this.columnSiteBase.ReadOnly = true;
                this.columnSiteRate.ReadOnly = true;
                this.columnDryBase.ReadOnly = true;
                this.columnDryRate.ReadOnly = true;
                this.columnIrrigatedBase.ReadOnly = true;
                this.columnIrrigatedRate.ReadOnly = true;
                this.columnTimberBase.ReadOnly = true;
                this.columnTimberRate.ReadOnly = true;
                this.columnOtherBase.ReadOnly = true;
                this.columnOtherRate.ReadOnly = true;
                this.columnInsertedBy.ReadOnly = true;
                this.columnInsertedDate.ReadOnly = true;
                this.columnUpdatedBy.ReadOnly = true;
                this.columnIsDeleted.ReadOnly = true;
                this.columnModuleID.ReadOnly = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tAA_MAD_Type1Row NewtAA_MAD_Type1Row() {
                return ((tAA_MAD_Type1Row)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new tAA_MAD_Type1Row(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(tAA_MAD_Type1Row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.tAA_MAD_Type1RowChanged != null)) {
                    this.tAA_MAD_Type1RowChanged(this, new tAA_MAD_Type1RowChangeEvent(((tAA_MAD_Type1Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.tAA_MAD_Type1RowChanging != null)) {
                    this.tAA_MAD_Type1RowChanging(this, new tAA_MAD_Type1RowChangeEvent(((tAA_MAD_Type1Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.tAA_MAD_Type1RowDeleted != null)) {
                    this.tAA_MAD_Type1RowDeleted(this, new tAA_MAD_Type1RowChangeEvent(((tAA_MAD_Type1Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.tAA_MAD_Type1RowDeleting != null)) {
                    this.tAA_MAD_Type1RowDeleting(this, new tAA_MAD_Type1RowChangeEvent(((tAA_MAD_Type1Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovetAA_MAD_Type1Row(tAA_MAD_Type1Row row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                f25000FieldUse ds = new f25000FieldUse();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "tAA_MAD_Type1DataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class tAA_MAD_Type10DataTable : global::System.Data.TypedTableBase<tAA_MAD_Type10Row> {
            
            private global::System.Data.DataColumn columnMADistrictID;
            
            private global::System.Data.DataColumn columnRollYear;
            
            private global::System.Data.DataColumn columnDistrictNumber;
            
            private global::System.Data.DataColumn columnDescription;
            
            private global::System.Data.DataColumn columnRate;
            
            private global::System.Data.DataColumn columnBase;
            
            private global::System.Data.DataColumn columnMinimum;
            
            private global::System.Data.DataColumn columnMaximum;
            
            private global::System.Data.DataColumn columnInsertedBy;
            
            private global::System.Data.DataColumn columnInsertedDate;
            
            private global::System.Data.DataColumn columnUpdatedBy;
            
            private global::System.Data.DataColumn columnIsDeleted;
            
            private global::System.Data.DataColumn columnModuleID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tAA_MAD_Type10DataTable() {
                this.TableName = "tAA_MAD_Type10";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal tAA_MAD_Type10DataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected tAA_MAD_Type10DataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MADistrictIDColumn {
                get {
                    return this.columnMADistrictID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RollYearColumn {
                get {
                    return this.columnRollYear;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DistrictNumberColumn {
                get {
                    return this.columnDistrictNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RateColumn {
                get {
                    return this.columnRate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BaseColumn {
                get {
                    return this.columnBase;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MinimumColumn {
                get {
                    return this.columnMinimum;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MaximumColumn {
                get {
                    return this.columnMaximum;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InsertedByColumn {
                get {
                    return this.columnInsertedBy;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InsertedDateColumn {
                get {
                    return this.columnInsertedDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UpdatedByColumn {
                get {
                    return this.columnUpdatedBy;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsDeletedColumn {
                get {
                    return this.columnIsDeleted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ModuleIDColumn {
                get {
                    return this.columnModuleID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tAA_MAD_Type10Row this[int index] {
                get {
                    return ((tAA_MAD_Type10Row)(this.Rows[index]));
                }
            }
            
            public event tAA_MAD_Type10RowChangeEventHandler tAA_MAD_Type10RowChanging;
            
            public event tAA_MAD_Type10RowChangeEventHandler tAA_MAD_Type10RowChanged;
            
            public event tAA_MAD_Type10RowChangeEventHandler tAA_MAD_Type10RowDeleting;
            
            public event tAA_MAD_Type10RowChangeEventHandler tAA_MAD_Type10RowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddtAA_MAD_Type10Row(tAA_MAD_Type10Row row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tAA_MAD_Type10Row AddtAA_MAD_Type10Row(int MADistrictID, short RollYear, string DistrictNumber, string Description, decimal Rate, decimal Base, decimal Minimum, decimal Maximum, int InsertedBy, System.DateTime InsertedDate, int UpdatedBy, bool IsDeleted, short ModuleID) {
                tAA_MAD_Type10Row rowtAA_MAD_Type10Row = ((tAA_MAD_Type10Row)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        MADistrictID,
                        RollYear,
                        DistrictNumber,
                        Description,
                        Rate,
                        Base,
                        Minimum,
                        Maximum,
                        InsertedBy,
                        InsertedDate,
                        UpdatedBy,
                        IsDeleted,
                        ModuleID};
                rowtAA_MAD_Type10Row.ItemArray = columnValuesArray;
                this.Rows.Add(rowtAA_MAD_Type10Row);
                return rowtAA_MAD_Type10Row;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                tAA_MAD_Type10DataTable cln = ((tAA_MAD_Type10DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new tAA_MAD_Type10DataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnMADistrictID = base.Columns["MADistrictID"];
                this.columnRollYear = base.Columns["RollYear"];
                this.columnDistrictNumber = base.Columns["DistrictNumber"];
                this.columnDescription = base.Columns["Description"];
                this.columnRate = base.Columns["Rate"];
                this.columnBase = base.Columns["Base"];
                this.columnMinimum = base.Columns["Minimum"];
                this.columnMaximum = base.Columns["Maximum"];
                this.columnInsertedBy = base.Columns["InsertedBy"];
                this.columnInsertedDate = base.Columns["InsertedDate"];
                this.columnUpdatedBy = base.Columns["UpdatedBy"];
                this.columnIsDeleted = base.Columns["IsDeleted"];
                this.columnModuleID = base.Columns["ModuleID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnMADistrictID = new global::System.Data.DataColumn("MADistrictID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMADistrictID);
                this.columnRollYear = new global::System.Data.DataColumn("RollYear", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRollYear);
                this.columnDistrictNumber = new global::System.Data.DataColumn("DistrictNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDistrictNumber);
                this.columnDescription = new global::System.Data.DataColumn("Description", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescription);
                this.columnRate = new global::System.Data.DataColumn("Rate", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRate);
                this.columnBase = new global::System.Data.DataColumn("Base", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBase);
                this.columnMinimum = new global::System.Data.DataColumn("Minimum", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMinimum);
                this.columnMaximum = new global::System.Data.DataColumn("Maximum", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMaximum);
                this.columnInsertedBy = new global::System.Data.DataColumn("InsertedBy", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInsertedBy);
                this.columnInsertedDate = new global::System.Data.DataColumn("InsertedDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInsertedDate);
                this.columnUpdatedBy = new global::System.Data.DataColumn("UpdatedBy", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUpdatedBy);
                this.columnIsDeleted = new global::System.Data.DataColumn("IsDeleted", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsDeleted);
                this.columnModuleID = new global::System.Data.DataColumn("ModuleID", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnModuleID);
                this.columnMADistrictID.ReadOnly = true;
                this.columnRollYear.ReadOnly = true;
                this.columnDistrictNumber.ReadOnly = true;
                this.columnDistrictNumber.MaxLength = 50;
                this.columnDescription.ReadOnly = true;
                this.columnDescription.MaxLength = 250;
                this.columnRate.ReadOnly = true;
                this.columnBase.ReadOnly = true;
                this.columnMinimum.ReadOnly = true;
                this.columnMaximum.ReadOnly = true;
                this.columnInsertedBy.ReadOnly = true;
                this.columnInsertedDate.ReadOnly = true;
                this.columnUpdatedBy.ReadOnly = true;
                this.columnIsDeleted.ReadOnly = true;
                this.columnModuleID.ReadOnly = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tAA_MAD_Type10Row NewtAA_MAD_Type10Row() {
                return ((tAA_MAD_Type10Row)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new tAA_MAD_Type10Row(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(tAA_MAD_Type10Row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.tAA_MAD_Type10RowChanged != null)) {
                    this.tAA_MAD_Type10RowChanged(this, new tAA_MAD_Type10RowChangeEvent(((tAA_MAD_Type10Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.tAA_MAD_Type10RowChanging != null)) {
                    this.tAA_MAD_Type10RowChanging(this, new tAA_MAD_Type10RowChangeEvent(((tAA_MAD_Type10Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.tAA_MAD_Type10RowDeleted != null)) {
                    this.tAA_MAD_Type10RowDeleted(this, new tAA_MAD_Type10RowChangeEvent(((tAA_MAD_Type10Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.tAA_MAD_Type10RowDeleting != null)) {
                    this.tAA_MAD_Type10RowDeleting(this, new tAA_MAD_Type10RowChangeEvent(((tAA_MAD_Type10Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovetAA_MAD_Type10Row(tAA_MAD_Type10Row row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                f25000FieldUse ds = new f25000FieldUse();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "tAA_MAD_Type10DataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class tAA_MAD_Type11DataTable : global::System.Data.TypedTableBase<tAA_MAD_Type11Row> {
            
            private global::System.Data.DataColumn columnMADistrictID;
            
            private global::System.Data.DataColumn columnRollYear;
            
            private global::System.Data.DataColumn columnDistrictNumber;
            
            private global::System.Data.DataColumn columnDescription;
            
            private global::System.Data.DataColumn columnInsertedBy;
            
            private global::System.Data.DataColumn columnInsertedDate;
            
            private global::System.Data.DataColumn columnUpdatedBy;
            
            private global::System.Data.DataColumn columnIsDeleted;
            
            private global::System.Data.DataColumn columnModuleID;
            
            private global::System.Data.DataColumn columnPerAcre;
            
            private global::System.Data.DataColumn columnPerParcel;
            
            private global::System.Data.DataColumn columnMarketRate;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tAA_MAD_Type11DataTable() {
                this.TableName = "tAA_MAD_Type11";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal tAA_MAD_Type11DataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected tAA_MAD_Type11DataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MADistrictIDColumn {
                get {
                    return this.columnMADistrictID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RollYearColumn {
                get {
                    return this.columnRollYear;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DistrictNumberColumn {
                get {
                    return this.columnDistrictNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InsertedByColumn {
                get {
                    return this.columnInsertedBy;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InsertedDateColumn {
                get {
                    return this.columnInsertedDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UpdatedByColumn {
                get {
                    return this.columnUpdatedBy;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsDeletedColumn {
                get {
                    return this.columnIsDeleted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ModuleIDColumn {
                get {
                    return this.columnModuleID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PerAcreColumn {
                get {
                    return this.columnPerAcre;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PerParcelColumn {
                get {
                    return this.columnPerParcel;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MarketRateColumn {
                get {
                    return this.columnMarketRate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tAA_MAD_Type11Row this[int index] {
                get {
                    return ((tAA_MAD_Type11Row)(this.Rows[index]));
                }
            }
            
            public event tAA_MAD_Type11RowChangeEventHandler tAA_MAD_Type11RowChanging;
            
            public event tAA_MAD_Type11RowChangeEventHandler tAA_MAD_Type11RowChanged;
            
            public event tAA_MAD_Type11RowChangeEventHandler tAA_MAD_Type11RowDeleting;
            
            public event tAA_MAD_Type11RowChangeEventHandler tAA_MAD_Type11RowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddtAA_MAD_Type11Row(tAA_MAD_Type11Row row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tAA_MAD_Type11Row AddtAA_MAD_Type11Row(int MADistrictID, short RollYear, string DistrictNumber, string Description, int InsertedBy, System.DateTime InsertedDate, int UpdatedBy, bool IsDeleted, short ModuleID, decimal PerAcre, decimal PerParcel, decimal MarketRate) {
                tAA_MAD_Type11Row rowtAA_MAD_Type11Row = ((tAA_MAD_Type11Row)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        MADistrictID,
                        RollYear,
                        DistrictNumber,
                        Description,
                        InsertedBy,
                        InsertedDate,
                        UpdatedBy,
                        IsDeleted,
                        ModuleID,
                        PerAcre,
                        PerParcel,
                        MarketRate};
                rowtAA_MAD_Type11Row.ItemArray = columnValuesArray;
                this.Rows.Add(rowtAA_MAD_Type11Row);
                return rowtAA_MAD_Type11Row;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                tAA_MAD_Type11DataTable cln = ((tAA_MAD_Type11DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new tAA_MAD_Type11DataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnMADistrictID = base.Columns["MADistrictID"];
                this.columnRollYear = base.Columns["RollYear"];
                this.columnDistrictNumber = base.Columns["DistrictNumber"];
                this.columnDescription = base.Columns["Description"];
                this.columnInsertedBy = base.Columns["InsertedBy"];
                this.columnInsertedDate = base.Columns["InsertedDate"];
                this.columnUpdatedBy = base.Columns["UpdatedBy"];
                this.columnIsDeleted = base.Columns["IsDeleted"];
                this.columnModuleID = base.Columns["ModuleID"];
                this.columnPerAcre = base.Columns["PerAcre"];
                this.columnPerParcel = base.Columns["PerParcel"];
                this.columnMarketRate = base.Columns["MarketRate"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnMADistrictID = new global::System.Data.DataColumn("MADistrictID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMADistrictID);
                this.columnRollYear = new global::System.Data.DataColumn("RollYear", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRollYear);
                this.columnDistrictNumber = new global::System.Data.DataColumn("DistrictNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDistrictNumber);
                this.columnDescription = new global::System.Data.DataColumn("Description", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescription);
                this.columnInsertedBy = new global::System.Data.DataColumn("InsertedBy", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInsertedBy);
                this.columnInsertedDate = new global::System.Data.DataColumn("InsertedDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInsertedDate);
                this.columnUpdatedBy = new global::System.Data.DataColumn("UpdatedBy", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUpdatedBy);
                this.columnIsDeleted = new global::System.Data.DataColumn("IsDeleted", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsDeleted);
                this.columnModuleID = new global::System.Data.DataColumn("ModuleID", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnModuleID);
                this.columnPerAcre = new global::System.Data.DataColumn("PerAcre", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPerAcre);
                this.columnPerParcel = new global::System.Data.DataColumn("PerParcel", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPerParcel);
                this.columnMarketRate = new global::System.Data.DataColumn("MarketRate", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMarketRate);
                this.columnMADistrictID.ReadOnly = true;
                this.columnRollYear.ReadOnly = true;
                this.columnDistrictNumber.ReadOnly = true;
                this.columnDistrictNumber.MaxLength = 50;
                this.columnDescription.ReadOnly = true;
                this.columnDescription.MaxLength = 250;
                this.columnInsertedBy.ReadOnly = true;
                this.columnInsertedDate.ReadOnly = true;
                this.columnUpdatedBy.ReadOnly = true;
                this.columnIsDeleted.ReadOnly = true;
                this.columnModuleID.ReadOnly = true;
                this.columnPerAcre.ReadOnly = true;
                this.columnPerParcel.ReadOnly = true;
                this.columnMarketRate.ReadOnly = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tAA_MAD_Type11Row NewtAA_MAD_Type11Row() {
                return ((tAA_MAD_Type11Row)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new tAA_MAD_Type11Row(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(tAA_MAD_Type11Row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.tAA_MAD_Type11RowChanged != null)) {
                    this.tAA_MAD_Type11RowChanged(this, new tAA_MAD_Type11RowChangeEvent(((tAA_MAD_Type11Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.tAA_MAD_Type11RowChanging != null)) {
                    this.tAA_MAD_Type11RowChanging(this, new tAA_MAD_Type11RowChangeEvent(((tAA_MAD_Type11Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.tAA_MAD_Type11RowDeleted != null)) {
                    this.tAA_MAD_Type11RowDeleted(this, new tAA_MAD_Type11RowChangeEvent(((tAA_MAD_Type11Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.tAA_MAD_Type11RowDeleting != null)) {
                    this.tAA_MAD_Type11RowDeleting(this, new tAA_MAD_Type11RowChangeEvent(((tAA_MAD_Type11Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovetAA_MAD_Type11Row(tAA_MAD_Type11Row row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                f25000FieldUse ds = new f25000FieldUse();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "tAA_MAD_Type11DataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class tAA_MAD_Type12DataTable : global::System.Data.TypedTableBase<tAA_MAD_Type12Row> {
            
            private global::System.Data.DataColumn columnMADistrictID;
            
            private global::System.Data.DataColumn columnRollYear;
            
            private global::System.Data.DataColumn columnDistrictNumber;
            
            private global::System.Data.DataColumn columnDescription;
            
            private global::System.Data.DataColumn columnInsertedBy;
            
            private global::System.Data.DataColumn columnInsertedDate;
            
            private global::System.Data.DataColumn columnUpdatedBy;
            
            private global::System.Data.DataColumn columnIsDeleted;
            
            private global::System.Data.DataColumn columnModuleID;
            
            private global::System.Data.DataColumn columnBaseFee;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tAA_MAD_Type12DataTable() {
                this.TableName = "tAA_MAD_Type12";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal tAA_MAD_Type12DataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected tAA_MAD_Type12DataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MADistrictIDColumn {
                get {
                    return this.columnMADistrictID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RollYearColumn {
                get {
                    return this.columnRollYear;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DistrictNumberColumn {
                get {
                    return this.columnDistrictNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InsertedByColumn {
                get {
                    return this.columnInsertedBy;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InsertedDateColumn {
                get {
                    return this.columnInsertedDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UpdatedByColumn {
                get {
                    return this.columnUpdatedBy;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsDeletedColumn {
                get {
                    return this.columnIsDeleted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ModuleIDColumn {
                get {
                    return this.columnModuleID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BaseFeeColumn {
                get {
                    return this.columnBaseFee;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tAA_MAD_Type12Row this[int index] {
                get {
                    return ((tAA_MAD_Type12Row)(this.Rows[index]));
                }
            }
            
            public event tAA_MAD_Type12RowChangeEventHandler tAA_MAD_Type12RowChanging;
            
            public event tAA_MAD_Type12RowChangeEventHandler tAA_MAD_Type12RowChanged;
            
            public event tAA_MAD_Type12RowChangeEventHandler tAA_MAD_Type12RowDeleting;
            
            public event tAA_MAD_Type12RowChangeEventHandler tAA_MAD_Type12RowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddtAA_MAD_Type12Row(tAA_MAD_Type12Row row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tAA_MAD_Type12Row AddtAA_MAD_Type12Row(int MADistrictID, short RollYear, string DistrictNumber, string Description, int InsertedBy, System.DateTime InsertedDate, int UpdatedBy, bool IsDeleted, short ModuleID, decimal BaseFee) {
                tAA_MAD_Type12Row rowtAA_MAD_Type12Row = ((tAA_MAD_Type12Row)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        MADistrictID,
                        RollYear,
                        DistrictNumber,
                        Description,
                        InsertedBy,
                        InsertedDate,
                        UpdatedBy,
                        IsDeleted,
                        ModuleID,
                        BaseFee};
                rowtAA_MAD_Type12Row.ItemArray = columnValuesArray;
                this.Rows.Add(rowtAA_MAD_Type12Row);
                return rowtAA_MAD_Type12Row;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                tAA_MAD_Type12DataTable cln = ((tAA_MAD_Type12DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new tAA_MAD_Type12DataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnMADistrictID = base.Columns["MADistrictID"];
                this.columnRollYear = base.Columns["RollYear"];
                this.columnDistrictNumber = base.Columns["DistrictNumber"];
                this.columnDescription = base.Columns["Description"];
                this.columnInsertedBy = base.Columns["InsertedBy"];
                this.columnInsertedDate = base.Columns["InsertedDate"];
                this.columnUpdatedBy = base.Columns["UpdatedBy"];
                this.columnIsDeleted = base.Columns["IsDeleted"];
                this.columnModuleID = base.Columns["ModuleID"];
                this.columnBaseFee = base.Columns["BaseFee"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnMADistrictID = new global::System.Data.DataColumn("MADistrictID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMADistrictID);
                this.columnRollYear = new global::System.Data.DataColumn("RollYear", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRollYear);
                this.columnDistrictNumber = new global::System.Data.DataColumn("DistrictNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDistrictNumber);
                this.columnDescription = new global::System.Data.DataColumn("Description", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescription);
                this.columnInsertedBy = new global::System.Data.DataColumn("InsertedBy", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInsertedBy);
                this.columnInsertedDate = new global::System.Data.DataColumn("InsertedDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInsertedDate);
                this.columnUpdatedBy = new global::System.Data.DataColumn("UpdatedBy", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUpdatedBy);
                this.columnIsDeleted = new global::System.Data.DataColumn("IsDeleted", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsDeleted);
                this.columnModuleID = new global::System.Data.DataColumn("ModuleID", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnModuleID);
                this.columnBaseFee = new global::System.Data.DataColumn("BaseFee", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBaseFee);
                this.columnMADistrictID.ReadOnly = true;
                this.columnRollYear.ReadOnly = true;
                this.columnDistrictNumber.ReadOnly = true;
                this.columnDistrictNumber.MaxLength = 50;
                this.columnDescription.ReadOnly = true;
                this.columnDescription.MaxLength = 250;
                this.columnInsertedBy.ReadOnly = true;
                this.columnInsertedDate.ReadOnly = true;
                this.columnUpdatedBy.ReadOnly = true;
                this.columnIsDeleted.ReadOnly = true;
                this.columnModuleID.ReadOnly = true;
                this.columnBaseFee.ReadOnly = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tAA_MAD_Type12Row NewtAA_MAD_Type12Row() {
                return ((tAA_MAD_Type12Row)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new tAA_MAD_Type12Row(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(tAA_MAD_Type12Row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.tAA_MAD_Type12RowChanged != null)) {
                    this.tAA_MAD_Type12RowChanged(this, new tAA_MAD_Type12RowChangeEvent(((tAA_MAD_Type12Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.tAA_MAD_Type12RowChanging != null)) {
                    this.tAA_MAD_Type12RowChanging(this, new tAA_MAD_Type12RowChangeEvent(((tAA_MAD_Type12Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.tAA_MAD_Type12RowDeleted != null)) {
                    this.tAA_MAD_Type12RowDeleted(this, new tAA_MAD_Type12RowChangeEvent(((tAA_MAD_Type12Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.tAA_MAD_Type12RowDeleting != null)) {
                    this.tAA_MAD_Type12RowDeleting(this, new tAA_MAD_Type12RowChangeEvent(((tAA_MAD_Type12Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovetAA_MAD_Type12Row(tAA_MAD_Type12Row row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                f25000FieldUse ds = new f25000FieldUse();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "tAA_MAD_Type12DataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class tAA_MAD_Type2DataTable : global::System.Data.TypedTableBase<tAA_MAD_Type2Row> {
            
            private global::System.Data.DataColumn columnMADistrictID;
            
            private global::System.Data.DataColumn columnRollYear;
            
            private global::System.Data.DataColumn columnDistrictNumber;
            
            private global::System.Data.DataColumn columnDescription;
            
            private global::System.Data.DataColumn columnMinimumCharge;
            
            private global::System.Data.DataColumn columnIsOwnerAssessed;
            
            private global::System.Data.DataColumn columnBaseFee;
            
            private global::System.Data.DataColumn columnBaseAcres;
            
            private global::System.Data.DataColumn columnSiteBase;
            
            private global::System.Data.DataColumn columnSiteRate;
            
            private global::System.Data.DataColumn columnDryBase;
            
            private global::System.Data.DataColumn columnDryRate;
            
            private global::System.Data.DataColumn columnIrrigatedBase;
            
            private global::System.Data.DataColumn columnIrrigatedRate;
            
            private global::System.Data.DataColumn columnTimberBase;
            
            private global::System.Data.DataColumn columnTimberRate;
            
            private global::System.Data.DataColumn columnOtherBase;
            
            private global::System.Data.DataColumn columnOtherRate;
            
            private global::System.Data.DataColumn columnInsertedBy;
            
            private global::System.Data.DataColumn columnInsertedDate;
            
            private global::System.Data.DataColumn columnUpdatedBy;
            
            private global::System.Data.DataColumn columnIsDeleted;
            
            private global::System.Data.DataColumn columnModuleID;
            
            private global::System.Data.DataColumn columnMinSiteAcres;
            
            private global::System.Data.DataColumn columnMinDryAcres;
            
            private global::System.Data.DataColumn columnMinIrrigatedAcres;
            
            private global::System.Data.DataColumn columnMinTimberAcres;
            
            private global::System.Data.DataColumn columnMinOtherAcres;
            
            private global::System.Data.DataColumn columnBaseRate;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tAA_MAD_Type2DataTable() {
                this.TableName = "tAA_MAD_Type2";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal tAA_MAD_Type2DataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected tAA_MAD_Type2DataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MADistrictIDColumn {
                get {
                    return this.columnMADistrictID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RollYearColumn {
                get {
                    return this.columnRollYear;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DistrictNumberColumn {
                get {
                    return this.columnDistrictNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MinimumChargeColumn {
                get {
                    return this.columnMinimumCharge;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsOwnerAssessedColumn {
                get {
                    return this.columnIsOwnerAssessed;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BaseFeeColumn {
                get {
                    return this.columnBaseFee;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BaseAcresColumn {
                get {
                    return this.columnBaseAcres;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SiteBaseColumn {
                get {
                    return this.columnSiteBase;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SiteRateColumn {
                get {
                    return this.columnSiteRate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DryBaseColumn {
                get {
                    return this.columnDryBase;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DryRateColumn {
                get {
                    return this.columnDryRate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IrrigatedBaseColumn {
                get {
                    return this.columnIrrigatedBase;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IrrigatedRateColumn {
                get {
                    return this.columnIrrigatedRate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TimberBaseColumn {
                get {
                    return this.columnTimberBase;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TimberRateColumn {
                get {
                    return this.columnTimberRate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OtherBaseColumn {
                get {
                    return this.columnOtherBase;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OtherRateColumn {
                get {
                    return this.columnOtherRate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InsertedByColumn {
                get {
                    return this.columnInsertedBy;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InsertedDateColumn {
                get {
                    return this.columnInsertedDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UpdatedByColumn {
                get {
                    return this.columnUpdatedBy;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsDeletedColumn {
                get {
                    return this.columnIsDeleted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ModuleIDColumn {
                get {
                    return this.columnModuleID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MinSiteAcresColumn {
                get {
                    return this.columnMinSiteAcres;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MinDryAcresColumn {
                get {
                    return this.columnMinDryAcres;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MinIrrigatedAcresColumn {
                get {
                    return this.columnMinIrrigatedAcres;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MinTimberAcresColumn {
                get {
                    return this.columnMinTimberAcres;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MinOtherAcresColumn {
                get {
                    return this.columnMinOtherAcres;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BaseRateColumn {
                get {
                    return this.columnBaseRate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tAA_MAD_Type2Row this[int index] {
                get {
                    return ((tAA_MAD_Type2Row)(this.Rows[index]));
                }
            }
            
            public event tAA_MAD_Type2RowChangeEventHandler tAA_MAD_Type2RowChanging;
            
            public event tAA_MAD_Type2RowChangeEventHandler tAA_MAD_Type2RowChanged;
            
            public event tAA_MAD_Type2RowChangeEventHandler tAA_MAD_Type2RowDeleting;
            
            public event tAA_MAD_Type2RowChangeEventHandler tAA_MAD_Type2RowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddtAA_MAD_Type2Row(tAA_MAD_Type2Row row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tAA_MAD_Type2Row AddtAA_MAD_Type2Row(
                        int MADistrictID, 
                        short RollYear, 
                        string DistrictNumber, 
                        string Description, 
                        decimal MinimumCharge, 
                        bool IsOwnerAssessed, 
                        decimal BaseFee, 
                        short BaseAcres, 
                        decimal SiteBase, 
                        decimal SiteRate, 
                        decimal DryBase, 
                        decimal DryRate, 
                        decimal IrrigatedBase, 
                        decimal IrrigatedRate, 
                        decimal TimberBase, 
                        decimal TimberRate, 
                        decimal OtherBase, 
                        decimal OtherRate, 
                        int InsertedBy, 
                        System.DateTime InsertedDate, 
                        int UpdatedBy, 
                        bool IsDeleted, 
                        short ModuleID, 
                        int MinSiteAcres, 
                        int MinDryAcres, 
                        int MinIrrigatedAcres, 
                        int MinTimberAcres, 
                        int MinOtherAcres, 
                        decimal BaseRate) {
                tAA_MAD_Type2Row rowtAA_MAD_Type2Row = ((tAA_MAD_Type2Row)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        MADistrictID,
                        RollYear,
                        DistrictNumber,
                        Description,
                        MinimumCharge,
                        IsOwnerAssessed,
                        BaseFee,
                        BaseAcres,
                        SiteBase,
                        SiteRate,
                        DryBase,
                        DryRate,
                        IrrigatedBase,
                        IrrigatedRate,
                        TimberBase,
                        TimberRate,
                        OtherBase,
                        OtherRate,
                        InsertedBy,
                        InsertedDate,
                        UpdatedBy,
                        IsDeleted,
                        ModuleID,
                        MinSiteAcres,
                        MinDryAcres,
                        MinIrrigatedAcres,
                        MinTimberAcres,
                        MinOtherAcres,
                        BaseRate};
                rowtAA_MAD_Type2Row.ItemArray = columnValuesArray;
                this.Rows.Add(rowtAA_MAD_Type2Row);
                return rowtAA_MAD_Type2Row;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                tAA_MAD_Type2DataTable cln = ((tAA_MAD_Type2DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new tAA_MAD_Type2DataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnMADistrictID = base.Columns["MADistrictID"];
                this.columnRollYear = base.Columns["RollYear"];
                this.columnDistrictNumber = base.Columns["DistrictNumber"];
                this.columnDescription = base.Columns["Description"];
                this.columnMinimumCharge = base.Columns["MinimumCharge"];
                this.columnIsOwnerAssessed = base.Columns["IsOwnerAssessed"];
                this.columnBaseFee = base.Columns["BaseFee"];
                this.columnBaseAcres = base.Columns["BaseAcres"];
                this.columnSiteBase = base.Columns["SiteBase"];
                this.columnSiteRate = base.Columns["SiteRate"];
                this.columnDryBase = base.Columns["DryBase"];
                this.columnDryRate = base.Columns["DryRate"];
                this.columnIrrigatedBase = base.Columns["IrrigatedBase"];
                this.columnIrrigatedRate = base.Columns["IrrigatedRate"];
                this.columnTimberBase = base.Columns["TimberBase"];
                this.columnTimberRate = base.Columns["TimberRate"];
                this.columnOtherBase = base.Columns["OtherBase"];
                this.columnOtherRate = base.Columns["OtherRate"];
                this.columnInsertedBy = base.Columns["InsertedBy"];
                this.columnInsertedDate = base.Columns["InsertedDate"];
                this.columnUpdatedBy = base.Columns["UpdatedBy"];
                this.columnIsDeleted = base.Columns["IsDeleted"];
                this.columnModuleID = base.Columns["ModuleID"];
                this.columnMinSiteAcres = base.Columns["MinSiteAcres"];
                this.columnMinDryAcres = base.Columns["MinDryAcres"];
                this.columnMinIrrigatedAcres = base.Columns["MinIrrigatedAcres"];
                this.columnMinTimberAcres = base.Columns["MinTimberAcres"];
                this.columnMinOtherAcres = base.Columns["MinOtherAcres"];
                this.columnBaseRate = base.Columns["BaseRate"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnMADistrictID = new global::System.Data.DataColumn("MADistrictID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMADistrictID);
                this.columnRollYear = new global::System.Data.DataColumn("RollYear", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRollYear);
                this.columnDistrictNumber = new global::System.Data.DataColumn("DistrictNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDistrictNumber);
                this.columnDescription = new global::System.Data.DataColumn("Description", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescription);
                this.columnMinimumCharge = new global::System.Data.DataColumn("MinimumCharge", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMinimumCharge);
                this.columnIsOwnerAssessed = new global::System.Data.DataColumn("IsOwnerAssessed", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsOwnerAssessed);
                this.columnBaseFee = new global::System.Data.DataColumn("BaseFee", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBaseFee);
                this.columnBaseAcres = new global::System.Data.DataColumn("BaseAcres", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBaseAcres);
                this.columnSiteBase = new global::System.Data.DataColumn("SiteBase", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSiteBase);
                this.columnSiteRate = new global::System.Data.DataColumn("SiteRate", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSiteRate);
                this.columnDryBase = new global::System.Data.DataColumn("DryBase", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDryBase);
                this.columnDryRate = new global::System.Data.DataColumn("DryRate", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDryRate);
                this.columnIrrigatedBase = new global::System.Data.DataColumn("IrrigatedBase", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIrrigatedBase);
                this.columnIrrigatedRate = new global::System.Data.DataColumn("IrrigatedRate", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIrrigatedRate);
                this.columnTimberBase = new global::System.Data.DataColumn("TimberBase", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTimberBase);
                this.columnTimberRate = new global::System.Data.DataColumn("TimberRate", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTimberRate);
                this.columnOtherBase = new global::System.Data.DataColumn("OtherBase", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOtherBase);
                this.columnOtherRate = new global::System.Data.DataColumn("OtherRate", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOtherRate);
                this.columnInsertedBy = new global::System.Data.DataColumn("InsertedBy", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInsertedBy);
                this.columnInsertedDate = new global::System.Data.DataColumn("InsertedDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInsertedDate);
                this.columnUpdatedBy = new global::System.Data.DataColumn("UpdatedBy", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUpdatedBy);
                this.columnIsDeleted = new global::System.Data.DataColumn("IsDeleted", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsDeleted);
                this.columnModuleID = new global::System.Data.DataColumn("ModuleID", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnModuleID);
                this.columnMinSiteAcres = new global::System.Data.DataColumn("MinSiteAcres", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMinSiteAcres);
                this.columnMinDryAcres = new global::System.Data.DataColumn("MinDryAcres", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMinDryAcres);
                this.columnMinIrrigatedAcres = new global::System.Data.DataColumn("MinIrrigatedAcres", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMinIrrigatedAcres);
                this.columnMinTimberAcres = new global::System.Data.DataColumn("MinTimberAcres", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMinTimberAcres);
                this.columnMinOtherAcres = new global::System.Data.DataColumn("MinOtherAcres", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMinOtherAcres);
                this.columnBaseRate = new global::System.Data.DataColumn("BaseRate", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBaseRate);
                this.columnMADistrictID.ReadOnly = true;
                this.columnRollYear.ReadOnly = true;
                this.columnDistrictNumber.ReadOnly = true;
                this.columnDistrictNumber.MaxLength = 50;
                this.columnDescription.ReadOnly = true;
                this.columnDescription.MaxLength = 250;
                this.columnMinimumCharge.ReadOnly = true;
                this.columnIsOwnerAssessed.ReadOnly = true;
                this.columnBaseFee.ReadOnly = true;
                this.columnBaseAcres.ReadOnly = true;
                this.columnSiteBase.ReadOnly = true;
                this.columnSiteRate.ReadOnly = true;
                this.columnDryBase.ReadOnly = true;
                this.columnDryRate.ReadOnly = true;
                this.columnIrrigatedBase.ReadOnly = true;
                this.columnIrrigatedRate.ReadOnly = true;
                this.columnTimberBase.ReadOnly = true;
                this.columnTimberRate.ReadOnly = true;
                this.columnOtherBase.ReadOnly = true;
                this.columnOtherRate.ReadOnly = true;
                this.columnInsertedBy.ReadOnly = true;
                this.columnInsertedDate.ReadOnly = true;
                this.columnUpdatedBy.ReadOnly = true;
                this.columnIsDeleted.ReadOnly = true;
                this.columnModuleID.ReadOnly = true;
                this.columnMinSiteAcres.ReadOnly = true;
                this.columnMinDryAcres.ReadOnly = true;
                this.columnMinIrrigatedAcres.ReadOnly = true;
                this.columnMinTimberAcres.ReadOnly = true;
                this.columnMinOtherAcres.ReadOnly = true;
                this.columnBaseRate.ReadOnly = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tAA_MAD_Type2Row NewtAA_MAD_Type2Row() {
                return ((tAA_MAD_Type2Row)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new tAA_MAD_Type2Row(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(tAA_MAD_Type2Row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.tAA_MAD_Type2RowChanged != null)) {
                    this.tAA_MAD_Type2RowChanged(this, new tAA_MAD_Type2RowChangeEvent(((tAA_MAD_Type2Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.tAA_MAD_Type2RowChanging != null)) {
                    this.tAA_MAD_Type2RowChanging(this, new tAA_MAD_Type2RowChangeEvent(((tAA_MAD_Type2Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.tAA_MAD_Type2RowDeleted != null)) {
                    this.tAA_MAD_Type2RowDeleted(this, new tAA_MAD_Type2RowChangeEvent(((tAA_MAD_Type2Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.tAA_MAD_Type2RowDeleting != null)) {
                    this.tAA_MAD_Type2RowDeleting(this, new tAA_MAD_Type2RowChangeEvent(((tAA_MAD_Type2Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovetAA_MAD_Type2Row(tAA_MAD_Type2Row row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                f25000FieldUse ds = new f25000FieldUse();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "tAA_MAD_Type2DataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class tAA_MAD_Type3DataTable : global::System.Data.TypedTableBase<tAA_MAD_Type3Row> {
            
            private global::System.Data.DataColumn columnMADistrictID;
            
            private global::System.Data.DataColumn columnRollYear;
            
            private global::System.Data.DataColumn columnDistrictNumber;
            
            private global::System.Data.DataColumn columnDescription;
            
            private global::System.Data.DataColumn columnMinimumCharge;
            
            private global::System.Data.DataColumn columnIsOwnerAssessed;
            
            private global::System.Data.DataColumn columnBaseFee;
            
            private global::System.Data.DataColumn columnBaseRate;
            
            private global::System.Data.DataColumn columnSiteBase;
            
            private global::System.Data.DataColumn columnSiteRate;
            
            private global::System.Data.DataColumn columnDryBase;
            
            private global::System.Data.DataColumn columnDryRate;
            
            private global::System.Data.DataColumn columnIrrigatedBase;
            
            private global::System.Data.DataColumn columnIrrigatedRate;
            
            private global::System.Data.DataColumn columnTimberBase;
            
            private global::System.Data.DataColumn columnTimberRate;
            
            private global::System.Data.DataColumn columnOtherBase;
            
            private global::System.Data.DataColumn columnOtherRate;
            
            private global::System.Data.DataColumn columnInsertedBy;
            
            private global::System.Data.DataColumn columnInsertedDate;
            
            private global::System.Data.DataColumn columnUpdatedBy;
            
            private global::System.Data.DataColumn columnIsDeleted;
            
            private global::System.Data.DataColumn columnModuleID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tAA_MAD_Type3DataTable() {
                this.TableName = "tAA_MAD_Type3";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal tAA_MAD_Type3DataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected tAA_MAD_Type3DataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MADistrictIDColumn {
                get {
                    return this.columnMADistrictID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RollYearColumn {
                get {
                    return this.columnRollYear;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DistrictNumberColumn {
                get {
                    return this.columnDistrictNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MinimumChargeColumn {
                get {
                    return this.columnMinimumCharge;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsOwnerAssessedColumn {
                get {
                    return this.columnIsOwnerAssessed;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BaseFeeColumn {
                get {
                    return this.columnBaseFee;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BaseRateColumn {
                get {
                    return this.columnBaseRate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SiteBaseColumn {
                get {
                    return this.columnSiteBase;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SiteRateColumn {
                get {
                    return this.columnSiteRate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DryBaseColumn {
                get {
                    return this.columnDryBase;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DryRateColumn {
                get {
                    return this.columnDryRate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IrrigatedBaseColumn {
                get {
                    return this.columnIrrigatedBase;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IrrigatedRateColumn {
                get {
                    return this.columnIrrigatedRate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TimberBaseColumn {
                get {
                    return this.columnTimberBase;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TimberRateColumn {
                get {
                    return this.columnTimberRate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OtherBaseColumn {
                get {
                    return this.columnOtherBase;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OtherRateColumn {
                get {
                    return this.columnOtherRate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InsertedByColumn {
                get {
                    return this.columnInsertedBy;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InsertedDateColumn {
                get {
                    return this.columnInsertedDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UpdatedByColumn {
                get {
                    return this.columnUpdatedBy;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsDeletedColumn {
                get {
                    return this.columnIsDeleted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ModuleIDColumn {
                get {
                    return this.columnModuleID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tAA_MAD_Type3Row this[int index] {
                get {
                    return ((tAA_MAD_Type3Row)(this.Rows[index]));
                }
            }
            
            public event tAA_MAD_Type3RowChangeEventHandler tAA_MAD_Type3RowChanging;
            
            public event tAA_MAD_Type3RowChangeEventHandler tAA_MAD_Type3RowChanged;
            
            public event tAA_MAD_Type3RowChangeEventHandler tAA_MAD_Type3RowDeleting;
            
            public event tAA_MAD_Type3RowChangeEventHandler tAA_MAD_Type3RowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddtAA_MAD_Type3Row(tAA_MAD_Type3Row row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tAA_MAD_Type3Row AddtAA_MAD_Type3Row(
                        int MADistrictID, 
                        short RollYear, 
                        string DistrictNumber, 
                        string Description, 
                        decimal MinimumCharge, 
                        bool IsOwnerAssessed, 
                        decimal BaseFee, 
                        decimal BaseRate, 
                        decimal SiteBase, 
                        decimal SiteRate, 
                        decimal DryBase, 
                        decimal DryRate, 
                        decimal IrrigatedBase, 
                        decimal IrrigatedRate, 
                        decimal TimberBase, 
                        decimal TimberRate, 
                        decimal OtherBase, 
                        decimal OtherRate, 
                        int InsertedBy, 
                        System.DateTime InsertedDate, 
                        int UpdatedBy, 
                        bool IsDeleted, 
                        short ModuleID) {
                tAA_MAD_Type3Row rowtAA_MAD_Type3Row = ((tAA_MAD_Type3Row)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        MADistrictID,
                        RollYear,
                        DistrictNumber,
                        Description,
                        MinimumCharge,
                        IsOwnerAssessed,
                        BaseFee,
                        BaseRate,
                        SiteBase,
                        SiteRate,
                        DryBase,
                        DryRate,
                        IrrigatedBase,
                        IrrigatedRate,
                        TimberBase,
                        TimberRate,
                        OtherBase,
                        OtherRate,
                        InsertedBy,
                        InsertedDate,
                        UpdatedBy,
                        IsDeleted,
                        ModuleID};
                rowtAA_MAD_Type3Row.ItemArray = columnValuesArray;
                this.Rows.Add(rowtAA_MAD_Type3Row);
                return rowtAA_MAD_Type3Row;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                tAA_MAD_Type3DataTable cln = ((tAA_MAD_Type3DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new tAA_MAD_Type3DataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnMADistrictID = base.Columns["MADistrictID"];
                this.columnRollYear = base.Columns["RollYear"];
                this.columnDistrictNumber = base.Columns["DistrictNumber"];
                this.columnDescription = base.Columns["Description"];
                this.columnMinimumCharge = base.Columns["MinimumCharge"];
                this.columnIsOwnerAssessed = base.Columns["IsOwnerAssessed"];
                this.columnBaseFee = base.Columns["BaseFee"];
                this.columnBaseRate = base.Columns["BaseRate"];
                this.columnSiteBase = base.Columns["SiteBase"];
                this.columnSiteRate = base.Columns["SiteRate"];
                this.columnDryBase = base.Columns["DryBase"];
                this.columnDryRate = base.Columns["DryRate"];
                this.columnIrrigatedBase = base.Columns["IrrigatedBase"];
                this.columnIrrigatedRate = base.Columns["IrrigatedRate"];
                this.columnTimberBase = base.Columns["TimberBase"];
                this.columnTimberRate = base.Columns["TimberRate"];
                this.columnOtherBase = base.Columns["OtherBase"];
                this.columnOtherRate = base.Columns["OtherRate"];
                this.columnInsertedBy = base.Columns["InsertedBy"];
                this.columnInsertedDate = base.Columns["InsertedDate"];
                this.columnUpdatedBy = base.Columns["UpdatedBy"];
                this.columnIsDeleted = base.Columns["IsDeleted"];
                this.columnModuleID = base.Columns["ModuleID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnMADistrictID = new global::System.Data.DataColumn("MADistrictID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMADistrictID);
                this.columnRollYear = new global::System.Data.DataColumn("RollYear", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRollYear);
                this.columnDistrictNumber = new global::System.Data.DataColumn("DistrictNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDistrictNumber);
                this.columnDescription = new global::System.Data.DataColumn("Description", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescription);
                this.columnMinimumCharge = new global::System.Data.DataColumn("MinimumCharge", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMinimumCharge);
                this.columnIsOwnerAssessed = new global::System.Data.DataColumn("IsOwnerAssessed", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsOwnerAssessed);
                this.columnBaseFee = new global::System.Data.DataColumn("BaseFee", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBaseFee);
                this.columnBaseRate = new global::System.Data.DataColumn("BaseRate", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBaseRate);
                this.columnSiteBase = new global::System.Data.DataColumn("SiteBase", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSiteBase);
                this.columnSiteRate = new global::System.Data.DataColumn("SiteRate", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSiteRate);
                this.columnDryBase = new global::System.Data.DataColumn("DryBase", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDryBase);
                this.columnDryRate = new global::System.Data.DataColumn("DryRate", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDryRate);
                this.columnIrrigatedBase = new global::System.Data.DataColumn("IrrigatedBase", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIrrigatedBase);
                this.columnIrrigatedRate = new global::System.Data.DataColumn("IrrigatedRate", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIrrigatedRate);
                this.columnTimberBase = new global::System.Data.DataColumn("TimberBase", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTimberBase);
                this.columnTimberRate = new global::System.Data.DataColumn("TimberRate", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTimberRate);
                this.columnOtherBase = new global::System.Data.DataColumn("OtherBase", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOtherBase);
                this.columnOtherRate = new global::System.Data.DataColumn("OtherRate", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOtherRate);
                this.columnInsertedBy = new global::System.Data.DataColumn("InsertedBy", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInsertedBy);
                this.columnInsertedDate = new global::System.Data.DataColumn("InsertedDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInsertedDate);
                this.columnUpdatedBy = new global::System.Data.DataColumn("UpdatedBy", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUpdatedBy);
                this.columnIsDeleted = new global::System.Data.DataColumn("IsDeleted", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsDeleted);
                this.columnModuleID = new global::System.Data.DataColumn("ModuleID", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnModuleID);
                this.columnMADistrictID.ReadOnly = true;
                this.columnRollYear.ReadOnly = true;
                this.columnDistrictNumber.ReadOnly = true;
                this.columnDistrictNumber.MaxLength = 50;
                this.columnDescription.ReadOnly = true;
                this.columnDescription.MaxLength = 250;
                this.columnMinimumCharge.ReadOnly = true;
                this.columnIsOwnerAssessed.ReadOnly = true;
                this.columnBaseFee.ReadOnly = true;
                this.columnBaseRate.ReadOnly = true;
                this.columnSiteBase.ReadOnly = true;
                this.columnSiteRate.ReadOnly = true;
                this.columnDryBase.ReadOnly = true;
                this.columnDryRate.ReadOnly = true;
                this.columnIrrigatedBase.ReadOnly = true;
                this.columnIrrigatedRate.ReadOnly = true;
                this.columnTimberBase.ReadOnly = true;
                this.columnTimberRate.ReadOnly = true;
                this.columnOtherBase.ReadOnly = true;
                this.columnOtherRate.ReadOnly = true;
                this.columnInsertedBy.ReadOnly = true;
                this.columnInsertedDate.ReadOnly = true;
                this.columnUpdatedBy.ReadOnly = true;
                this.columnIsDeleted.ReadOnly = true;
                this.columnModuleID.ReadOnly = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tAA_MAD_Type3Row NewtAA_MAD_Type3Row() {
                return ((tAA_MAD_Type3Row)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new tAA_MAD_Type3Row(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(tAA_MAD_Type3Row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.tAA_MAD_Type3RowChanged != null)) {
                    this.tAA_MAD_Type3RowChanged(this, new tAA_MAD_Type3RowChangeEvent(((tAA_MAD_Type3Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.tAA_MAD_Type3RowChanging != null)) {
                    this.tAA_MAD_Type3RowChanging(this, new tAA_MAD_Type3RowChangeEvent(((tAA_MAD_Type3Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.tAA_MAD_Type3RowDeleted != null)) {
                    this.tAA_MAD_Type3RowDeleted(this, new tAA_MAD_Type3RowChangeEvent(((tAA_MAD_Type3Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.tAA_MAD_Type3RowDeleting != null)) {
                    this.tAA_MAD_Type3RowDeleting(this, new tAA_MAD_Type3RowChangeEvent(((tAA_MAD_Type3Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovetAA_MAD_Type3Row(tAA_MAD_Type3Row row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                f25000FieldUse ds = new f25000FieldUse();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "tAA_MAD_Type3DataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class tAA_MAD_Type4DataTable : global::System.Data.TypedTableBase<tAA_MAD_Type4Row> {
            
            private global::System.Data.DataColumn columnMADistrictID;
            
            private global::System.Data.DataColumn columnRollYear;
            
            private global::System.Data.DataColumn columnDistrictNumber;
            
            private global::System.Data.DataColumn columnDescription;
            
            private global::System.Data.DataColumn columnRate;
            
            private global::System.Data.DataColumn columnInsertedBy;
            
            private global::System.Data.DataColumn columnInsertedDate;
            
            private global::System.Data.DataColumn columnUpdatedBy;
            
            private global::System.Data.DataColumn columnIsDeleted;
            
            private global::System.Data.DataColumn columnModuleID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tAA_MAD_Type4DataTable() {
                this.TableName = "tAA_MAD_Type4";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal tAA_MAD_Type4DataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected tAA_MAD_Type4DataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MADistrictIDColumn {
                get {
                    return this.columnMADistrictID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RollYearColumn {
                get {
                    return this.columnRollYear;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DistrictNumberColumn {
                get {
                    return this.columnDistrictNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RateColumn {
                get {
                    return this.columnRate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InsertedByColumn {
                get {
                    return this.columnInsertedBy;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InsertedDateColumn {
                get {
                    return this.columnInsertedDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UpdatedByColumn {
                get {
                    return this.columnUpdatedBy;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsDeletedColumn {
                get {
                    return this.columnIsDeleted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ModuleIDColumn {
                get {
                    return this.columnModuleID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tAA_MAD_Type4Row this[int index] {
                get {
                    return ((tAA_MAD_Type4Row)(this.Rows[index]));
                }
            }
            
            public event tAA_MAD_Type4RowChangeEventHandler tAA_MAD_Type4RowChanging;
            
            public event tAA_MAD_Type4RowChangeEventHandler tAA_MAD_Type4RowChanged;
            
            public event tAA_MAD_Type4RowChangeEventHandler tAA_MAD_Type4RowDeleting;
            
            public event tAA_MAD_Type4RowChangeEventHandler tAA_MAD_Type4RowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddtAA_MAD_Type4Row(tAA_MAD_Type4Row row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tAA_MAD_Type4Row AddtAA_MAD_Type4Row(int MADistrictID, short RollYear, string DistrictNumber, string Description, decimal Rate, int InsertedBy, System.DateTime InsertedDate, int UpdatedBy, bool IsDeleted, short ModuleID) {
                tAA_MAD_Type4Row rowtAA_MAD_Type4Row = ((tAA_MAD_Type4Row)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        MADistrictID,
                        RollYear,
                        DistrictNumber,
                        Description,
                        Rate,
                        InsertedBy,
                        InsertedDate,
                        UpdatedBy,
                        IsDeleted,
                        ModuleID};
                rowtAA_MAD_Type4Row.ItemArray = columnValuesArray;
                this.Rows.Add(rowtAA_MAD_Type4Row);
                return rowtAA_MAD_Type4Row;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                tAA_MAD_Type4DataTable cln = ((tAA_MAD_Type4DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new tAA_MAD_Type4DataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnMADistrictID = base.Columns["MADistrictID"];
                this.columnRollYear = base.Columns["RollYear"];
                this.columnDistrictNumber = base.Columns["DistrictNumber"];
                this.columnDescription = base.Columns["Description"];
                this.columnRate = base.Columns["Rate"];
                this.columnInsertedBy = base.Columns["InsertedBy"];
                this.columnInsertedDate = base.Columns["InsertedDate"];
                this.columnUpdatedBy = base.Columns["UpdatedBy"];
                this.columnIsDeleted = base.Columns["IsDeleted"];
                this.columnModuleID = base.Columns["ModuleID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnMADistrictID = new global::System.Data.DataColumn("MADistrictID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMADistrictID);
                this.columnRollYear = new global::System.Data.DataColumn("RollYear", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRollYear);
                this.columnDistrictNumber = new global::System.Data.DataColumn("DistrictNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDistrictNumber);
                this.columnDescription = new global::System.Data.DataColumn("Description", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescription);
                this.columnRate = new global::System.Data.DataColumn("Rate", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRate);
                this.columnInsertedBy = new global::System.Data.DataColumn("InsertedBy", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInsertedBy);
                this.columnInsertedDate = new global::System.Data.DataColumn("InsertedDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInsertedDate);
                this.columnUpdatedBy = new global::System.Data.DataColumn("UpdatedBy", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUpdatedBy);
                this.columnIsDeleted = new global::System.Data.DataColumn("IsDeleted", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsDeleted);
                this.columnModuleID = new global::System.Data.DataColumn("ModuleID", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnModuleID);
                this.columnMADistrictID.ReadOnly = true;
                this.columnRollYear.ReadOnly = true;
                this.columnDistrictNumber.ReadOnly = true;
                this.columnDistrictNumber.MaxLength = 50;
                this.columnDescription.ReadOnly = true;
                this.columnDescription.MaxLength = 250;
                this.columnRate.ReadOnly = true;
                this.columnInsertedBy.ReadOnly = true;
                this.columnInsertedDate.ReadOnly = true;
                this.columnUpdatedBy.ReadOnly = true;
                this.columnIsDeleted.ReadOnly = true;
                this.columnModuleID.ReadOnly = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tAA_MAD_Type4Row NewtAA_MAD_Type4Row() {
                return ((tAA_MAD_Type4Row)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new tAA_MAD_Type4Row(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(tAA_MAD_Type4Row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.tAA_MAD_Type4RowChanged != null)) {
                    this.tAA_MAD_Type4RowChanged(this, new tAA_MAD_Type4RowChangeEvent(((tAA_MAD_Type4Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.tAA_MAD_Type4RowChanging != null)) {
                    this.tAA_MAD_Type4RowChanging(this, new tAA_MAD_Type4RowChangeEvent(((tAA_MAD_Type4Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.tAA_MAD_Type4RowDeleted != null)) {
                    this.tAA_MAD_Type4RowDeleted(this, new tAA_MAD_Type4RowChangeEvent(((tAA_MAD_Type4Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.tAA_MAD_Type4RowDeleting != null)) {
                    this.tAA_MAD_Type4RowDeleting(this, new tAA_MAD_Type4RowChangeEvent(((tAA_MAD_Type4Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovetAA_MAD_Type4Row(tAA_MAD_Type4Row row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                f25000FieldUse ds = new f25000FieldUse();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "tAA_MAD_Type4DataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class tAA_MAD_Type6DataTable : global::System.Data.TypedTableBase<tAA_MAD_Type6Row> {
            
            private global::System.Data.DataColumn columnMADistrictID;
            
            private global::System.Data.DataColumn columnRollYear;
            
            private global::System.Data.DataColumn columnDistrictNumber;
            
            private global::System.Data.DataColumn columnDescription;
            
            private global::System.Data.DataColumn columnCountyFee;
            
            private global::System.Data.DataColumn columnMaxLotSize;
            
            private global::System.Data.DataColumn columnFPAFee;
            
            private global::System.Data.DataColumn columnLCFFee;
            
            private global::System.Data.DataColumn columnFPARate;
            
            private global::System.Data.DataColumn columnLCFRate;
            
            private global::System.Data.DataColumn columnInsertedBy;
            
            private global::System.Data.DataColumn columnInsertedDate;
            
            private global::System.Data.DataColumn columnUpdatedBy;
            
            private global::System.Data.DataColumn columnIsDeleted;
            
            private global::System.Data.DataColumn columnModuleID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tAA_MAD_Type6DataTable() {
                this.TableName = "tAA_MAD_Type6";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal tAA_MAD_Type6DataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected tAA_MAD_Type6DataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MADistrictIDColumn {
                get {
                    return this.columnMADistrictID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RollYearColumn {
                get {
                    return this.columnRollYear;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DistrictNumberColumn {
                get {
                    return this.columnDistrictNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CountyFeeColumn {
                get {
                    return this.columnCountyFee;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MaxLotSizeColumn {
                get {
                    return this.columnMaxLotSize;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FPAFeeColumn {
                get {
                    return this.columnFPAFee;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LCFFeeColumn {
                get {
                    return this.columnLCFFee;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FPARateColumn {
                get {
                    return this.columnFPARate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LCFRateColumn {
                get {
                    return this.columnLCFRate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InsertedByColumn {
                get {
                    return this.columnInsertedBy;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InsertedDateColumn {
                get {
                    return this.columnInsertedDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UpdatedByColumn {
                get {
                    return this.columnUpdatedBy;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsDeletedColumn {
                get {
                    return this.columnIsDeleted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ModuleIDColumn {
                get {
                    return this.columnModuleID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tAA_MAD_Type6Row this[int index] {
                get {
                    return ((tAA_MAD_Type6Row)(this.Rows[index]));
                }
            }
            
            public event tAA_MAD_Type6RowChangeEventHandler tAA_MAD_Type6RowChanging;
            
            public event tAA_MAD_Type6RowChangeEventHandler tAA_MAD_Type6RowChanged;
            
            public event tAA_MAD_Type6RowChangeEventHandler tAA_MAD_Type6RowDeleting;
            
            public event tAA_MAD_Type6RowChangeEventHandler tAA_MAD_Type6RowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddtAA_MAD_Type6Row(tAA_MAD_Type6Row row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tAA_MAD_Type6Row AddtAA_MAD_Type6Row(int MADistrictID, short RollYear, string DistrictNumber, string Description, decimal CountyFee, decimal MaxLotSize, decimal FPAFee, decimal LCFFee, decimal FPARate, decimal LCFRate, int InsertedBy, System.DateTime InsertedDate, int UpdatedBy, bool IsDeleted, short ModuleID) {
                tAA_MAD_Type6Row rowtAA_MAD_Type6Row = ((tAA_MAD_Type6Row)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        MADistrictID,
                        RollYear,
                        DistrictNumber,
                        Description,
                        CountyFee,
                        MaxLotSize,
                        FPAFee,
                        LCFFee,
                        FPARate,
                        LCFRate,
                        InsertedBy,
                        InsertedDate,
                        UpdatedBy,
                        IsDeleted,
                        ModuleID};
                rowtAA_MAD_Type6Row.ItemArray = columnValuesArray;
                this.Rows.Add(rowtAA_MAD_Type6Row);
                return rowtAA_MAD_Type6Row;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                tAA_MAD_Type6DataTable cln = ((tAA_MAD_Type6DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new tAA_MAD_Type6DataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnMADistrictID = base.Columns["MADistrictID"];
                this.columnRollYear = base.Columns["RollYear"];
                this.columnDistrictNumber = base.Columns["DistrictNumber"];
                this.columnDescription = base.Columns["Description"];
                this.columnCountyFee = base.Columns["CountyFee"];
                this.columnMaxLotSize = base.Columns["MaxLotSize"];
                this.columnFPAFee = base.Columns["FPAFee"];
                this.columnLCFFee = base.Columns["LCFFee"];
                this.columnFPARate = base.Columns["FPARate"];
                this.columnLCFRate = base.Columns["LCFRate"];
                this.columnInsertedBy = base.Columns["InsertedBy"];
                this.columnInsertedDate = base.Columns["InsertedDate"];
                this.columnUpdatedBy = base.Columns["UpdatedBy"];
                this.columnIsDeleted = base.Columns["IsDeleted"];
                this.columnModuleID = base.Columns["ModuleID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnMADistrictID = new global::System.Data.DataColumn("MADistrictID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMADistrictID);
                this.columnRollYear = new global::System.Data.DataColumn("RollYear", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRollYear);
                this.columnDistrictNumber = new global::System.Data.DataColumn("DistrictNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDistrictNumber);
                this.columnDescription = new global::System.Data.DataColumn("Description", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescription);
                this.columnCountyFee = new global::System.Data.DataColumn("CountyFee", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCountyFee);
                this.columnMaxLotSize = new global::System.Data.DataColumn("MaxLotSize", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMaxLotSize);
                this.columnFPAFee = new global::System.Data.DataColumn("FPAFee", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFPAFee);
                this.columnLCFFee = new global::System.Data.DataColumn("LCFFee", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLCFFee);
                this.columnFPARate = new global::System.Data.DataColumn("FPARate", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFPARate);
                this.columnLCFRate = new global::System.Data.DataColumn("LCFRate", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLCFRate);
                this.columnInsertedBy = new global::System.Data.DataColumn("InsertedBy", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInsertedBy);
                this.columnInsertedDate = new global::System.Data.DataColumn("InsertedDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInsertedDate);
                this.columnUpdatedBy = new global::System.Data.DataColumn("UpdatedBy", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUpdatedBy);
                this.columnIsDeleted = new global::System.Data.DataColumn("IsDeleted", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsDeleted);
                this.columnModuleID = new global::System.Data.DataColumn("ModuleID", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnModuleID);
                this.columnMADistrictID.ReadOnly = true;
                this.columnRollYear.ReadOnly = true;
                this.columnDistrictNumber.ReadOnly = true;
                this.columnDistrictNumber.MaxLength = 50;
                this.columnDescription.ReadOnly = true;
                this.columnDescription.MaxLength = 250;
                this.columnCountyFee.ReadOnly = true;
                this.columnMaxLotSize.ReadOnly = true;
                this.columnFPAFee.ReadOnly = true;
                this.columnLCFFee.ReadOnly = true;
                this.columnFPARate.ReadOnly = true;
                this.columnLCFRate.ReadOnly = true;
                this.columnInsertedBy.ReadOnly = true;
                this.columnInsertedDate.ReadOnly = true;
                this.columnUpdatedBy.ReadOnly = true;
                this.columnIsDeleted.ReadOnly = true;
                this.columnModuleID.ReadOnly = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tAA_MAD_Type6Row NewtAA_MAD_Type6Row() {
                return ((tAA_MAD_Type6Row)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new tAA_MAD_Type6Row(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(tAA_MAD_Type6Row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.tAA_MAD_Type6RowChanged != null)) {
                    this.tAA_MAD_Type6RowChanged(this, new tAA_MAD_Type6RowChangeEvent(((tAA_MAD_Type6Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.tAA_MAD_Type6RowChanging != null)) {
                    this.tAA_MAD_Type6RowChanging(this, new tAA_MAD_Type6RowChangeEvent(((tAA_MAD_Type6Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.tAA_MAD_Type6RowDeleted != null)) {
                    this.tAA_MAD_Type6RowDeleted(this, new tAA_MAD_Type6RowChangeEvent(((tAA_MAD_Type6Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.tAA_MAD_Type6RowDeleting != null)) {
                    this.tAA_MAD_Type6RowDeleting(this, new tAA_MAD_Type6RowChangeEvent(((tAA_MAD_Type6Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovetAA_MAD_Type6Row(tAA_MAD_Type6Row row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                f25000FieldUse ds = new f25000FieldUse();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "tAA_MAD_Type6DataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class tAA_MAD_Type7DataTable : global::System.Data.TypedTableBase<tAA_MAD_Type7Row> {
            
            private global::System.Data.DataColumn columnMADistrictID;
            
            private global::System.Data.DataColumn columnRollYear;
            
            private global::System.Data.DataColumn columnDistrictNumber;
            
            private global::System.Data.DataColumn columnDescription;
            
            private global::System.Data.DataColumn columnResidentialRate;
            
            private global::System.Data.DataColumn columnCommercialRate;
            
            private global::System.Data.DataColumn columnInsertedBy;
            
            private global::System.Data.DataColumn columnInsertedDate;
            
            private global::System.Data.DataColumn columnUpdatedBy;
            
            private global::System.Data.DataColumn columnIsDeleted;
            
            private global::System.Data.DataColumn columnModuleID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tAA_MAD_Type7DataTable() {
                this.TableName = "tAA_MAD_Type7";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal tAA_MAD_Type7DataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected tAA_MAD_Type7DataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MADistrictIDColumn {
                get {
                    return this.columnMADistrictID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RollYearColumn {
                get {
                    return this.columnRollYear;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DistrictNumberColumn {
                get {
                    return this.columnDistrictNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ResidentialRateColumn {
                get {
                    return this.columnResidentialRate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CommercialRateColumn {
                get {
                    return this.columnCommercialRate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InsertedByColumn {
                get {
                    return this.columnInsertedBy;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InsertedDateColumn {
                get {
                    return this.columnInsertedDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UpdatedByColumn {
                get {
                    return this.columnUpdatedBy;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsDeletedColumn {
                get {
                    return this.columnIsDeleted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ModuleIDColumn {
                get {
                    return this.columnModuleID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tAA_MAD_Type7Row this[int index] {
                get {
                    return ((tAA_MAD_Type7Row)(this.Rows[index]));
                }
            }
            
            public event tAA_MAD_Type7RowChangeEventHandler tAA_MAD_Type7RowChanging;
            
            public event tAA_MAD_Type7RowChangeEventHandler tAA_MAD_Type7RowChanged;
            
            public event tAA_MAD_Type7RowChangeEventHandler tAA_MAD_Type7RowDeleting;
            
            public event tAA_MAD_Type7RowChangeEventHandler tAA_MAD_Type7RowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddtAA_MAD_Type7Row(tAA_MAD_Type7Row row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tAA_MAD_Type7Row AddtAA_MAD_Type7Row(int MADistrictID, short RollYear, string DistrictNumber, string Description, decimal ResidentialRate, decimal CommercialRate, int InsertedBy, System.DateTime InsertedDate, int UpdatedBy, bool IsDeleted, short ModuleID) {
                tAA_MAD_Type7Row rowtAA_MAD_Type7Row = ((tAA_MAD_Type7Row)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        MADistrictID,
                        RollYear,
                        DistrictNumber,
                        Description,
                        ResidentialRate,
                        CommercialRate,
                        InsertedBy,
                        InsertedDate,
                        UpdatedBy,
                        IsDeleted,
                        ModuleID};
                rowtAA_MAD_Type7Row.ItemArray = columnValuesArray;
                this.Rows.Add(rowtAA_MAD_Type7Row);
                return rowtAA_MAD_Type7Row;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                tAA_MAD_Type7DataTable cln = ((tAA_MAD_Type7DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new tAA_MAD_Type7DataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnMADistrictID = base.Columns["MADistrictID"];
                this.columnRollYear = base.Columns["RollYear"];
                this.columnDistrictNumber = base.Columns["DistrictNumber"];
                this.columnDescription = base.Columns["Description"];
                this.columnResidentialRate = base.Columns["ResidentialRate"];
                this.columnCommercialRate = base.Columns["CommercialRate"];
                this.columnInsertedBy = base.Columns["InsertedBy"];
                this.columnInsertedDate = base.Columns["InsertedDate"];
                this.columnUpdatedBy = base.Columns["UpdatedBy"];
                this.columnIsDeleted = base.Columns["IsDeleted"];
                this.columnModuleID = base.Columns["ModuleID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnMADistrictID = new global::System.Data.DataColumn("MADistrictID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMADistrictID);
                this.columnRollYear = new global::System.Data.DataColumn("RollYear", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRollYear);
                this.columnDistrictNumber = new global::System.Data.DataColumn("DistrictNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDistrictNumber);
                this.columnDescription = new global::System.Data.DataColumn("Description", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescription);
                this.columnResidentialRate = new global::System.Data.DataColumn("ResidentialRate", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnResidentialRate);
                this.columnCommercialRate = new global::System.Data.DataColumn("CommercialRate", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCommercialRate);
                this.columnInsertedBy = new global::System.Data.DataColumn("InsertedBy", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInsertedBy);
                this.columnInsertedDate = new global::System.Data.DataColumn("InsertedDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInsertedDate);
                this.columnUpdatedBy = new global::System.Data.DataColumn("UpdatedBy", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUpdatedBy);
                this.columnIsDeleted = new global::System.Data.DataColumn("IsDeleted", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsDeleted);
                this.columnModuleID = new global::System.Data.DataColumn("ModuleID", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnModuleID);
                this.columnMADistrictID.ReadOnly = true;
                this.columnRollYear.ReadOnly = true;
                this.columnDistrictNumber.ReadOnly = true;
                this.columnDistrictNumber.MaxLength = 50;
                this.columnDescription.ReadOnly = true;
                this.columnDescription.MaxLength = 250;
                this.columnResidentialRate.ReadOnly = true;
                this.columnCommercialRate.ReadOnly = true;
                this.columnInsertedBy.ReadOnly = true;
                this.columnInsertedDate.ReadOnly = true;
                this.columnUpdatedBy.ReadOnly = true;
                this.columnIsDeleted.ReadOnly = true;
                this.columnModuleID.ReadOnly = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tAA_MAD_Type7Row NewtAA_MAD_Type7Row() {
                return ((tAA_MAD_Type7Row)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new tAA_MAD_Type7Row(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(tAA_MAD_Type7Row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.tAA_MAD_Type7RowChanged != null)) {
                    this.tAA_MAD_Type7RowChanged(this, new tAA_MAD_Type7RowChangeEvent(((tAA_MAD_Type7Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.tAA_MAD_Type7RowChanging != null)) {
                    this.tAA_MAD_Type7RowChanging(this, new tAA_MAD_Type7RowChangeEvent(((tAA_MAD_Type7Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.tAA_MAD_Type7RowDeleted != null)) {
                    this.tAA_MAD_Type7RowDeleted(this, new tAA_MAD_Type7RowChangeEvent(((tAA_MAD_Type7Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.tAA_MAD_Type7RowDeleting != null)) {
                    this.tAA_MAD_Type7RowDeleting(this, new tAA_MAD_Type7RowChangeEvent(((tAA_MAD_Type7Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovetAA_MAD_Type7Row(tAA_MAD_Type7Row row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                f25000FieldUse ds = new f25000FieldUse();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "tAA_MAD_Type7DataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class tAA_MAD_Type8DataTable : global::System.Data.TypedTableBase<tAA_MAD_Type8Row> {
            
            private global::System.Data.DataColumn columnMADistrictID;
            
            private global::System.Data.DataColumn columnRollYear;
            
            private global::System.Data.DataColumn columnDistrictNumber;
            
            private global::System.Data.DataColumn columnDescription;
            
            private global::System.Data.DataColumn columnBaseFee;
            
            private global::System.Data.DataColumn columnInsertedBy;
            
            private global::System.Data.DataColumn columnInsertedDate;
            
            private global::System.Data.DataColumn columnUpdatedBy;
            
            private global::System.Data.DataColumn columnIsDeleted;
            
            private global::System.Data.DataColumn columnModuleID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tAA_MAD_Type8DataTable() {
                this.TableName = "tAA_MAD_Type8";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal tAA_MAD_Type8DataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected tAA_MAD_Type8DataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MADistrictIDColumn {
                get {
                    return this.columnMADistrictID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RollYearColumn {
                get {
                    return this.columnRollYear;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DistrictNumberColumn {
                get {
                    return this.columnDistrictNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BaseFeeColumn {
                get {
                    return this.columnBaseFee;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InsertedByColumn {
                get {
                    return this.columnInsertedBy;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InsertedDateColumn {
                get {
                    return this.columnInsertedDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UpdatedByColumn {
                get {
                    return this.columnUpdatedBy;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsDeletedColumn {
                get {
                    return this.columnIsDeleted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ModuleIDColumn {
                get {
                    return this.columnModuleID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tAA_MAD_Type8Row this[int index] {
                get {
                    return ((tAA_MAD_Type8Row)(this.Rows[index]));
                }
            }
            
            public event tAA_MAD_Type8RowChangeEventHandler tAA_MAD_Type8RowChanging;
            
            public event tAA_MAD_Type8RowChangeEventHandler tAA_MAD_Type8RowChanged;
            
            public event tAA_MAD_Type8RowChangeEventHandler tAA_MAD_Type8RowDeleting;
            
            public event tAA_MAD_Type8RowChangeEventHandler tAA_MAD_Type8RowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddtAA_MAD_Type8Row(tAA_MAD_Type8Row row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tAA_MAD_Type8Row AddtAA_MAD_Type8Row(int MADistrictID, short RollYear, string DistrictNumber, string Description, decimal BaseFee, int InsertedBy, System.DateTime InsertedDate, int UpdatedBy, bool IsDeleted, short ModuleID) {
                tAA_MAD_Type8Row rowtAA_MAD_Type8Row = ((tAA_MAD_Type8Row)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        MADistrictID,
                        RollYear,
                        DistrictNumber,
                        Description,
                        BaseFee,
                        InsertedBy,
                        InsertedDate,
                        UpdatedBy,
                        IsDeleted,
                        ModuleID};
                rowtAA_MAD_Type8Row.ItemArray = columnValuesArray;
                this.Rows.Add(rowtAA_MAD_Type8Row);
                return rowtAA_MAD_Type8Row;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                tAA_MAD_Type8DataTable cln = ((tAA_MAD_Type8DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new tAA_MAD_Type8DataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnMADistrictID = base.Columns["MADistrictID"];
                this.columnRollYear = base.Columns["RollYear"];
                this.columnDistrictNumber = base.Columns["DistrictNumber"];
                this.columnDescription = base.Columns["Description"];
                this.columnBaseFee = base.Columns["BaseFee"];
                this.columnInsertedBy = base.Columns["InsertedBy"];
                this.columnInsertedDate = base.Columns["InsertedDate"];
                this.columnUpdatedBy = base.Columns["UpdatedBy"];
                this.columnIsDeleted = base.Columns["IsDeleted"];
                this.columnModuleID = base.Columns["ModuleID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnMADistrictID = new global::System.Data.DataColumn("MADistrictID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMADistrictID);
                this.columnRollYear = new global::System.Data.DataColumn("RollYear", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRollYear);
                this.columnDistrictNumber = new global::System.Data.DataColumn("DistrictNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDistrictNumber);
                this.columnDescription = new global::System.Data.DataColumn("Description", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescription);
                this.columnBaseFee = new global::System.Data.DataColumn("BaseFee", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBaseFee);
                this.columnInsertedBy = new global::System.Data.DataColumn("InsertedBy", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInsertedBy);
                this.columnInsertedDate = new global::System.Data.DataColumn("InsertedDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInsertedDate);
                this.columnUpdatedBy = new global::System.Data.DataColumn("UpdatedBy", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUpdatedBy);
                this.columnIsDeleted = new global::System.Data.DataColumn("IsDeleted", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsDeleted);
                this.columnModuleID = new global::System.Data.DataColumn("ModuleID", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnModuleID);
                this.columnMADistrictID.ReadOnly = true;
                this.columnRollYear.ReadOnly = true;
                this.columnDistrictNumber.ReadOnly = true;
                this.columnDistrictNumber.MaxLength = 50;
                this.columnDescription.ReadOnly = true;
                this.columnDescription.MaxLength = 250;
                this.columnBaseFee.ReadOnly = true;
                this.columnInsertedBy.ReadOnly = true;
                this.columnInsertedDate.ReadOnly = true;
                this.columnUpdatedBy.ReadOnly = true;
                this.columnIsDeleted.ReadOnly = true;
                this.columnModuleID.ReadOnly = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tAA_MAD_Type8Row NewtAA_MAD_Type8Row() {
                return ((tAA_MAD_Type8Row)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new tAA_MAD_Type8Row(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(tAA_MAD_Type8Row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.tAA_MAD_Type8RowChanged != null)) {
                    this.tAA_MAD_Type8RowChanged(this, new tAA_MAD_Type8RowChangeEvent(((tAA_MAD_Type8Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.tAA_MAD_Type8RowChanging != null)) {
                    this.tAA_MAD_Type8RowChanging(this, new tAA_MAD_Type8RowChangeEvent(((tAA_MAD_Type8Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.tAA_MAD_Type8RowDeleted != null)) {
                    this.tAA_MAD_Type8RowDeleted(this, new tAA_MAD_Type8RowChangeEvent(((tAA_MAD_Type8Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.tAA_MAD_Type8RowDeleting != null)) {
                    this.tAA_MAD_Type8RowDeleting(this, new tAA_MAD_Type8RowChangeEvent(((tAA_MAD_Type8Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovetAA_MAD_Type8Row(tAA_MAD_Type8Row row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                f25000FieldUse ds = new f25000FieldUse();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "tAA_MAD_Type8DataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class tAA_MAD_Type9DataTable : global::System.Data.TypedTableBase<tAA_MAD_Type9Row> {
            
            private global::System.Data.DataColumn columnMADistrictID;
            
            private global::System.Data.DataColumn columnRollYear;
            
            private global::System.Data.DataColumn columnDistrictNumber;
            
            private global::System.Data.DataColumn columnDescription;
            
            private global::System.Data.DataColumn columnRate;
            
            private global::System.Data.DataColumn columnInsertedBy;
            
            private global::System.Data.DataColumn columnInsertedDate;
            
            private global::System.Data.DataColumn columnUpdatedBy;
            
            private global::System.Data.DataColumn columnIsDeleted;
            
            private global::System.Data.DataColumn columnModuleID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tAA_MAD_Type9DataTable() {
                this.TableName = "tAA_MAD_Type9";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal tAA_MAD_Type9DataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected tAA_MAD_Type9DataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MADistrictIDColumn {
                get {
                    return this.columnMADistrictID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RollYearColumn {
                get {
                    return this.columnRollYear;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DistrictNumberColumn {
                get {
                    return this.columnDistrictNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RateColumn {
                get {
                    return this.columnRate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InsertedByColumn {
                get {
                    return this.columnInsertedBy;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InsertedDateColumn {
                get {
                    return this.columnInsertedDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UpdatedByColumn {
                get {
                    return this.columnUpdatedBy;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsDeletedColumn {
                get {
                    return this.columnIsDeleted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ModuleIDColumn {
                get {
                    return this.columnModuleID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tAA_MAD_Type9Row this[int index] {
                get {
                    return ((tAA_MAD_Type9Row)(this.Rows[index]));
                }
            }
            
            public event tAA_MAD_Type9RowChangeEventHandler tAA_MAD_Type9RowChanging;
            
            public event tAA_MAD_Type9RowChangeEventHandler tAA_MAD_Type9RowChanged;
            
            public event tAA_MAD_Type9RowChangeEventHandler tAA_MAD_Type9RowDeleting;
            
            public event tAA_MAD_Type9RowChangeEventHandler tAA_MAD_Type9RowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddtAA_MAD_Type9Row(tAA_MAD_Type9Row row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tAA_MAD_Type9Row AddtAA_MAD_Type9Row(int MADistrictID, short RollYear, string DistrictNumber, string Description, decimal Rate, int InsertedBy, System.DateTime InsertedDate, int UpdatedBy, bool IsDeleted, short ModuleID) {
                tAA_MAD_Type9Row rowtAA_MAD_Type9Row = ((tAA_MAD_Type9Row)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        MADistrictID,
                        RollYear,
                        DistrictNumber,
                        Description,
                        Rate,
                        InsertedBy,
                        InsertedDate,
                        UpdatedBy,
                        IsDeleted,
                        ModuleID};
                rowtAA_MAD_Type9Row.ItemArray = columnValuesArray;
                this.Rows.Add(rowtAA_MAD_Type9Row);
                return rowtAA_MAD_Type9Row;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                tAA_MAD_Type9DataTable cln = ((tAA_MAD_Type9DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new tAA_MAD_Type9DataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnMADistrictID = base.Columns["MADistrictID"];
                this.columnRollYear = base.Columns["RollYear"];
                this.columnDistrictNumber = base.Columns["DistrictNumber"];
                this.columnDescription = base.Columns["Description"];
                this.columnRate = base.Columns["Rate"];
                this.columnInsertedBy = base.Columns["InsertedBy"];
                this.columnInsertedDate = base.Columns["InsertedDate"];
                this.columnUpdatedBy = base.Columns["UpdatedBy"];
                this.columnIsDeleted = base.Columns["IsDeleted"];
                this.columnModuleID = base.Columns["ModuleID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnMADistrictID = new global::System.Data.DataColumn("MADistrictID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMADistrictID);
                this.columnRollYear = new global::System.Data.DataColumn("RollYear", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRollYear);
                this.columnDistrictNumber = new global::System.Data.DataColumn("DistrictNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDistrictNumber);
                this.columnDescription = new global::System.Data.DataColumn("Description", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescription);
                this.columnRate = new global::System.Data.DataColumn("Rate", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRate);
                this.columnInsertedBy = new global::System.Data.DataColumn("InsertedBy", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInsertedBy);
                this.columnInsertedDate = new global::System.Data.DataColumn("InsertedDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInsertedDate);
                this.columnUpdatedBy = new global::System.Data.DataColumn("UpdatedBy", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUpdatedBy);
                this.columnIsDeleted = new global::System.Data.DataColumn("IsDeleted", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsDeleted);
                this.columnModuleID = new global::System.Data.DataColumn("ModuleID", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnModuleID);
                this.columnDistrictNumber.MaxLength = 50;
                this.columnDescription.MaxLength = 250;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tAA_MAD_Type9Row NewtAA_MAD_Type9Row() {
                return ((tAA_MAD_Type9Row)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new tAA_MAD_Type9Row(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(tAA_MAD_Type9Row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.tAA_MAD_Type9RowChanged != null)) {
                    this.tAA_MAD_Type9RowChanged(this, new tAA_MAD_Type9RowChangeEvent(((tAA_MAD_Type9Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.tAA_MAD_Type9RowChanging != null)) {
                    this.tAA_MAD_Type9RowChanging(this, new tAA_MAD_Type9RowChangeEvent(((tAA_MAD_Type9Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.tAA_MAD_Type9RowDeleted != null)) {
                    this.tAA_MAD_Type9RowDeleted(this, new tAA_MAD_Type9RowChangeEvent(((tAA_MAD_Type9Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.tAA_MAD_Type9RowDeleting != null)) {
                    this.tAA_MAD_Type9RowDeleting(this, new tAA_MAD_Type9RowChangeEvent(((tAA_MAD_Type9Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovetAA_MAD_Type9Row(tAA_MAD_Type9Row row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                f25000FieldUse ds = new f25000FieldUse();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "tAA_MAD_Type9DataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class tAA_MSC_VersionDataTable : global::System.Data.TypedTableBase<tAA_MSC_VersionRow> {
            
            private global::System.Data.DataColumn columnMSVersionID;
            
            private global::System.Data.DataColumn columnConnectionString;
            
            private global::System.Data.DataColumn columnHTCXML;
            
            private global::System.Data.DataColumn columnStyleListXML;
            
            private global::System.Data.DataColumn columnModuleID;
            
            private global::System.Data.DataColumn columnInsertedBy;
            
            private global::System.Data.DataColumn columnInsertedDate;
            
            private global::System.Data.DataColumn columnUpdatedBy;
            
            private global::System.Data.DataColumn columnIsDeleted;
            
            private global::System.Data.DataColumn columnOccXML;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tAA_MSC_VersionDataTable() {
                this.TableName = "tAA_MSC_Version";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal tAA_MSC_VersionDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected tAA_MSC_VersionDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MSVersionIDColumn {
                get {
                    return this.columnMSVersionID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ConnectionStringColumn {
                get {
                    return this.columnConnectionString;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HTCXMLColumn {
                get {
                    return this.columnHTCXML;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StyleListXMLColumn {
                get {
                    return this.columnStyleListXML;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ModuleIDColumn {
                get {
                    return this.columnModuleID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InsertedByColumn {
                get {
                    return this.columnInsertedBy;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InsertedDateColumn {
                get {
                    return this.columnInsertedDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UpdatedByColumn {
                get {
                    return this.columnUpdatedBy;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsDeletedColumn {
                get {
                    return this.columnIsDeleted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OccXMLColumn {
                get {
                    return this.columnOccXML;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tAA_MSC_VersionRow this[int index] {
                get {
                    return ((tAA_MSC_VersionRow)(this.Rows[index]));
                }
            }
            
            public event tAA_MSC_VersionRowChangeEventHandler tAA_MSC_VersionRowChanging;
            
            public event tAA_MSC_VersionRowChangeEventHandler tAA_MSC_VersionRowChanged;
            
            public event tAA_MSC_VersionRowChangeEventHandler tAA_MSC_VersionRowDeleting;
            
            public event tAA_MSC_VersionRowChangeEventHandler tAA_MSC_VersionRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddtAA_MSC_VersionRow(tAA_MSC_VersionRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tAA_MSC_VersionRow AddtAA_MSC_VersionRow(int MSVersionID, string ConnectionString, string HTCXML, string StyleListXML, int ModuleID, int InsertedBy, System.DateTime InsertedDate, int UpdatedBy, bool IsDeleted, string OccXML) {
                tAA_MSC_VersionRow rowtAA_MSC_VersionRow = ((tAA_MSC_VersionRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        MSVersionID,
                        ConnectionString,
                        HTCXML,
                        StyleListXML,
                        ModuleID,
                        InsertedBy,
                        InsertedDate,
                        UpdatedBy,
                        IsDeleted,
                        OccXML};
                rowtAA_MSC_VersionRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowtAA_MSC_VersionRow);
                return rowtAA_MSC_VersionRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                tAA_MSC_VersionDataTable cln = ((tAA_MSC_VersionDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new tAA_MSC_VersionDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnMSVersionID = base.Columns["MSVersionID"];
                this.columnConnectionString = base.Columns["ConnectionString"];
                this.columnHTCXML = base.Columns["HTCXML"];
                this.columnStyleListXML = base.Columns["StyleListXML"];
                this.columnModuleID = base.Columns["ModuleID"];
                this.columnInsertedBy = base.Columns["InsertedBy"];
                this.columnInsertedDate = base.Columns["InsertedDate"];
                this.columnUpdatedBy = base.Columns["UpdatedBy"];
                this.columnIsDeleted = base.Columns["IsDeleted"];
                this.columnOccXML = base.Columns["OccXML"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnMSVersionID = new global::System.Data.DataColumn("MSVersionID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMSVersionID);
                this.columnConnectionString = new global::System.Data.DataColumn("ConnectionString", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnConnectionString);
                this.columnHTCXML = new global::System.Data.DataColumn("HTCXML", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHTCXML);
                this.columnStyleListXML = new global::System.Data.DataColumn("StyleListXML", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStyleListXML);
                this.columnModuleID = new global::System.Data.DataColumn("ModuleID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnModuleID);
                this.columnInsertedBy = new global::System.Data.DataColumn("InsertedBy", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInsertedBy);
                this.columnInsertedDate = new global::System.Data.DataColumn("InsertedDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInsertedDate);
                this.columnUpdatedBy = new global::System.Data.DataColumn("UpdatedBy", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUpdatedBy);
                this.columnIsDeleted = new global::System.Data.DataColumn("IsDeleted", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsDeleted);
                this.columnOccXML = new global::System.Data.DataColumn("OccXML", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOccXML);
                this.columnMSVersionID.ReadOnly = true;
                this.columnConnectionString.ReadOnly = true;
                this.columnConnectionString.MaxLength = 200;
                this.columnHTCXML.ReadOnly = true;
                this.columnHTCXML.MaxLength = 2147483647;
                this.columnStyleListXML.ReadOnly = true;
                this.columnStyleListXML.MaxLength = 2147483647;
                this.columnModuleID.ReadOnly = true;
                this.columnInsertedBy.ReadOnly = true;
                this.columnInsertedDate.ReadOnly = true;
                this.columnUpdatedBy.ReadOnly = true;
                this.columnIsDeleted.ReadOnly = true;
                this.columnOccXML.ReadOnly = true;
                this.columnOccXML.MaxLength = 2147483647;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tAA_MSC_VersionRow NewtAA_MSC_VersionRow() {
                return ((tAA_MSC_VersionRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new tAA_MSC_VersionRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(tAA_MSC_VersionRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.tAA_MSC_VersionRowChanged != null)) {
                    this.tAA_MSC_VersionRowChanged(this, new tAA_MSC_VersionRowChangeEvent(((tAA_MSC_VersionRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.tAA_MSC_VersionRowChanging != null)) {
                    this.tAA_MSC_VersionRowChanging(this, new tAA_MSC_VersionRowChangeEvent(((tAA_MSC_VersionRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.tAA_MSC_VersionRowDeleted != null)) {
                    this.tAA_MSC_VersionRowDeleted(this, new tAA_MSC_VersionRowChangeEvent(((tAA_MSC_VersionRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.tAA_MSC_VersionRowDeleting != null)) {
                    this.tAA_MSC_VersionRowDeleting(this, new tAA_MSC_VersionRowChangeEvent(((tAA_MSC_VersionRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovetAA_MSC_VersionRow(tAA_MSC_VersionRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                f25000FieldUse ds = new f25000FieldUse();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "tAA_MSC_VersionDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class tAA_Parcel_InspectionTypeDataTable : global::System.Data.TypedTableBase<tAA_Parcel_InspectionTypeRow> {
            
            private global::System.Data.DataColumn columnInspectionTypeID;
            
            private global::System.Data.DataColumn columnInspectionType;
            
            private global::System.Data.DataColumn columnIsActive;
            
            private global::System.Data.DataColumn columnInsertedBy;
            
            private global::System.Data.DataColumn columnInsertedDate;
            
            private global::System.Data.DataColumn columnUpdatedBy;
            
            private global::System.Data.DataColumn columnIsDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tAA_Parcel_InspectionTypeDataTable() {
                this.TableName = "tAA_Parcel_InspectionType";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal tAA_Parcel_InspectionTypeDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected tAA_Parcel_InspectionTypeDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InspectionTypeIDColumn {
                get {
                    return this.columnInspectionTypeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InspectionTypeColumn {
                get {
                    return this.columnInspectionType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsActiveColumn {
                get {
                    return this.columnIsActive;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InsertedByColumn {
                get {
                    return this.columnInsertedBy;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InsertedDateColumn {
                get {
                    return this.columnInsertedDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UpdatedByColumn {
                get {
                    return this.columnUpdatedBy;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsDeletedColumn {
                get {
                    return this.columnIsDeleted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tAA_Parcel_InspectionTypeRow this[int index] {
                get {
                    return ((tAA_Parcel_InspectionTypeRow)(this.Rows[index]));
                }
            }
            
            public event tAA_Parcel_InspectionTypeRowChangeEventHandler tAA_Parcel_InspectionTypeRowChanging;
            
            public event tAA_Parcel_InspectionTypeRowChangeEventHandler tAA_Parcel_InspectionTypeRowChanged;
            
            public event tAA_Parcel_InspectionTypeRowChangeEventHandler tAA_Parcel_InspectionTypeRowDeleting;
            
            public event tAA_Parcel_InspectionTypeRowChangeEventHandler tAA_Parcel_InspectionTypeRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddtAA_Parcel_InspectionTypeRow(tAA_Parcel_InspectionTypeRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tAA_Parcel_InspectionTypeRow AddtAA_Parcel_InspectionTypeRow(short InspectionTypeID, string InspectionType, bool IsActive, int InsertedBy, System.DateTime InsertedDate, int UpdatedBy, bool IsDeleted) {
                tAA_Parcel_InspectionTypeRow rowtAA_Parcel_InspectionTypeRow = ((tAA_Parcel_InspectionTypeRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        InspectionTypeID,
                        InspectionType,
                        IsActive,
                        InsertedBy,
                        InsertedDate,
                        UpdatedBy,
                        IsDeleted};
                rowtAA_Parcel_InspectionTypeRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowtAA_Parcel_InspectionTypeRow);
                return rowtAA_Parcel_InspectionTypeRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                tAA_Parcel_InspectionTypeDataTable cln = ((tAA_Parcel_InspectionTypeDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new tAA_Parcel_InspectionTypeDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnInspectionTypeID = base.Columns["InspectionTypeID"];
                this.columnInspectionType = base.Columns["InspectionType"];
                this.columnIsActive = base.Columns["IsActive"];
                this.columnInsertedBy = base.Columns["InsertedBy"];
                this.columnInsertedDate = base.Columns["InsertedDate"];
                this.columnUpdatedBy = base.Columns["UpdatedBy"];
                this.columnIsDeleted = base.Columns["IsDeleted"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnInspectionTypeID = new global::System.Data.DataColumn("InspectionTypeID", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInspectionTypeID);
                this.columnInspectionType = new global::System.Data.DataColumn("InspectionType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInspectionType);
                this.columnIsActive = new global::System.Data.DataColumn("IsActive", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsActive);
                this.columnInsertedBy = new global::System.Data.DataColumn("InsertedBy", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInsertedBy);
                this.columnInsertedDate = new global::System.Data.DataColumn("InsertedDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInsertedDate);
                this.columnUpdatedBy = new global::System.Data.DataColumn("UpdatedBy", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUpdatedBy);
                this.columnIsDeleted = new global::System.Data.DataColumn("IsDeleted", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsDeleted);
                this.columnInspectionTypeID.ReadOnly = true;
                this.columnInspectionType.ReadOnly = true;
                this.columnInspectionType.MaxLength = 50;
                this.columnIsActive.ReadOnly = true;
                this.columnInsertedBy.ReadOnly = true;
                this.columnInsertedDate.ReadOnly = true;
                this.columnUpdatedBy.ReadOnly = true;
                this.columnIsDeleted.ReadOnly = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tAA_Parcel_InspectionTypeRow NewtAA_Parcel_InspectionTypeRow() {
                return ((tAA_Parcel_InspectionTypeRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new tAA_Parcel_InspectionTypeRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(tAA_Parcel_InspectionTypeRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.tAA_Parcel_InspectionTypeRowChanged != null)) {
                    this.tAA_Parcel_InspectionTypeRowChanged(this, new tAA_Parcel_InspectionTypeRowChangeEvent(((tAA_Parcel_InspectionTypeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.tAA_Parcel_InspectionTypeRowChanging != null)) {
                    this.tAA_Parcel_InspectionTypeRowChanging(this, new tAA_Parcel_InspectionTypeRowChangeEvent(((tAA_Parcel_InspectionTypeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.tAA_Parcel_InspectionTypeRowDeleted != null)) {
                    this.tAA_Parcel_InspectionTypeRowDeleted(this, new tAA_Parcel_InspectionTypeRowChangeEvent(((tAA_Parcel_InspectionTypeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.tAA_Parcel_InspectionTypeRowDeleting != null)) {
                    this.tAA_Parcel_InspectionTypeRowDeleting(this, new tAA_Parcel_InspectionTypeRowChangeEvent(((tAA_Parcel_InspectionTypeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovetAA_Parcel_InspectionTypeRow(tAA_Parcel_InspectionTypeRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                f25000FieldUse ds = new f25000FieldUse();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "tAA_Parcel_InspectionTypeDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class tAA_Parcel_PLandTypeDataTable : global::System.Data.TypedTableBase<tAA_Parcel_PLandTypeRow> {
            
            private global::System.Data.DataColumn columnLandTypeID;
            
            private global::System.Data.DataColumn columnLandType;
            
            private global::System.Data.DataColumn columnIsActive;
            
            private global::System.Data.DataColumn columnIsDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tAA_Parcel_PLandTypeDataTable() {
                this.TableName = "tAA_Parcel_PLandType";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal tAA_Parcel_PLandTypeDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected tAA_Parcel_PLandTypeDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LandTypeIDColumn {
                get {
                    return this.columnLandTypeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LandTypeColumn {
                get {
                    return this.columnLandType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsActiveColumn {
                get {
                    return this.columnIsActive;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsDeletedColumn {
                get {
                    return this.columnIsDeleted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tAA_Parcel_PLandTypeRow this[int index] {
                get {
                    return ((tAA_Parcel_PLandTypeRow)(this.Rows[index]));
                }
            }
            
            public event tAA_Parcel_PLandTypeRowChangeEventHandler tAA_Parcel_PLandTypeRowChanging;
            
            public event tAA_Parcel_PLandTypeRowChangeEventHandler tAA_Parcel_PLandTypeRowChanged;
            
            public event tAA_Parcel_PLandTypeRowChangeEventHandler tAA_Parcel_PLandTypeRowDeleting;
            
            public event tAA_Parcel_PLandTypeRowChangeEventHandler tAA_Parcel_PLandTypeRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddtAA_Parcel_PLandTypeRow(tAA_Parcel_PLandTypeRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tAA_Parcel_PLandTypeRow AddtAA_Parcel_PLandTypeRow(int LandTypeID, string LandType, bool IsActive, bool IsDeleted) {
                tAA_Parcel_PLandTypeRow rowtAA_Parcel_PLandTypeRow = ((tAA_Parcel_PLandTypeRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        LandTypeID,
                        LandType,
                        IsActive,
                        IsDeleted};
                rowtAA_Parcel_PLandTypeRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowtAA_Parcel_PLandTypeRow);
                return rowtAA_Parcel_PLandTypeRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                tAA_Parcel_PLandTypeDataTable cln = ((tAA_Parcel_PLandTypeDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new tAA_Parcel_PLandTypeDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnLandTypeID = base.Columns["LandTypeID"];
                this.columnLandType = base.Columns["LandType"];
                this.columnIsActive = base.Columns["IsActive"];
                this.columnIsDeleted = base.Columns["IsDeleted"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnLandTypeID = new global::System.Data.DataColumn("LandTypeID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLandTypeID);
                this.columnLandType = new global::System.Data.DataColumn("LandType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLandType);
                this.columnIsActive = new global::System.Data.DataColumn("IsActive", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsActive);
                this.columnIsDeleted = new global::System.Data.DataColumn("IsDeleted", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsDeleted);
                this.columnLandTypeID.ReadOnly = true;
                this.columnLandType.ReadOnly = true;
                this.columnLandType.MaxLength = 50;
                this.columnIsActive.ReadOnly = true;
                this.columnIsDeleted.ReadOnly = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tAA_Parcel_PLandTypeRow NewtAA_Parcel_PLandTypeRow() {
                return ((tAA_Parcel_PLandTypeRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new tAA_Parcel_PLandTypeRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(tAA_Parcel_PLandTypeRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.tAA_Parcel_PLandTypeRowChanged != null)) {
                    this.tAA_Parcel_PLandTypeRowChanged(this, new tAA_Parcel_PLandTypeRowChangeEvent(((tAA_Parcel_PLandTypeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.tAA_Parcel_PLandTypeRowChanging != null)) {
                    this.tAA_Parcel_PLandTypeRowChanging(this, new tAA_Parcel_PLandTypeRowChangeEvent(((tAA_Parcel_PLandTypeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.tAA_Parcel_PLandTypeRowDeleted != null)) {
                    this.tAA_Parcel_PLandTypeRowDeleted(this, new tAA_Parcel_PLandTypeRowChangeEvent(((tAA_Parcel_PLandTypeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.tAA_Parcel_PLandTypeRowDeleting != null)) {
                    this.tAA_Parcel_PLandTypeRowDeleting(this, new tAA_Parcel_PLandTypeRowChangeEvent(((tAA_Parcel_PLandTypeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovetAA_Parcel_PLandTypeRow(tAA_Parcel_PLandTypeRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                f25000FieldUse ds = new f25000FieldUse();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "tAA_Parcel_PLandTypeDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class tAA_ParcelValueDataTable : global::System.Data.TypedTableBase<tAA_ParcelValueRow> {
            
            private global::System.Data.DataColumn columnParcelID;
            
            private global::System.Data.DataColumn columnO1ValueA;
            
            private global::System.Data.DataColumn columnO1ValueB;
            
            private global::System.Data.DataColumn columnO1ValueC;
            
            private global::System.Data.DataColumn columnO1ValueD;
            
            private global::System.Data.DataColumn columnO1ValueE;
            
            private global::System.Data.DataColumn columnO2ValueA;
            
            private global::System.Data.DataColumn columnO2ValueB;
            
            private global::System.Data.DataColumn columnO2ValueC;
            
            private global::System.Data.DataColumn columnO2ValueD;
            
            private global::System.Data.DataColumn columnO2ValueE;
            
            private global::System.Data.DataColumn columnO3ValueA;
            
            private global::System.Data.DataColumn columnO3ValueB;
            
            private global::System.Data.DataColumn columnO3ValueC;
            
            private global::System.Data.DataColumn columnO3ValueD;
            
            private global::System.Data.DataColumn columnO3ValueE;
            
            private global::System.Data.DataColumn columnResultingTaxable;
            
            private global::System.Data.DataColumn columnModuleID;
            
            private global::System.Data.DataColumn columnInsertedBy;
            
            private global::System.Data.DataColumn columnInsertedDate;
            
            private global::System.Data.DataColumn columnUpdatedBy;
            
            private global::System.Data.DataColumn columnIsDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tAA_ParcelValueDataTable() {
                this.TableName = "tAA_ParcelValue";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal tAA_ParcelValueDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected tAA_ParcelValueDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ParcelIDColumn {
                get {
                    return this.columnParcelID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn O1ValueAColumn {
                get {
                    return this.columnO1ValueA;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn O1ValueBColumn {
                get {
                    return this.columnO1ValueB;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn O1ValueCColumn {
                get {
                    return this.columnO1ValueC;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn O1ValueDColumn {
                get {
                    return this.columnO1ValueD;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn O1ValueEColumn {
                get {
                    return this.columnO1ValueE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn O2ValueAColumn {
                get {
                    return this.columnO2ValueA;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn O2ValueBColumn {
                get {
                    return this.columnO2ValueB;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn O2ValueCColumn {
                get {
                    return this.columnO2ValueC;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn O2ValueDColumn {
                get {
                    return this.columnO2ValueD;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn O2ValueEColumn {
                get {
                    return this.columnO2ValueE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn O3ValueAColumn {
                get {
                    return this.columnO3ValueA;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn O3ValueBColumn {
                get {
                    return this.columnO3ValueB;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn O3ValueCColumn {
                get {
                    return this.columnO3ValueC;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn O3ValueDColumn {
                get {
                    return this.columnO3ValueD;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn O3ValueEColumn {
                get {
                    return this.columnO3ValueE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ResultingTaxableColumn {
                get {
                    return this.columnResultingTaxable;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ModuleIDColumn {
                get {
                    return this.columnModuleID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InsertedByColumn {
                get {
                    return this.columnInsertedBy;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InsertedDateColumn {
                get {
                    return this.columnInsertedDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UpdatedByColumn {
                get {
                    return this.columnUpdatedBy;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsDeletedColumn {
                get {
                    return this.columnIsDeleted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tAA_ParcelValueRow this[int index] {
                get {
                    return ((tAA_ParcelValueRow)(this.Rows[index]));
                }
            }
            
            public event tAA_ParcelValueRowChangeEventHandler tAA_ParcelValueRowChanging;
            
            public event tAA_ParcelValueRowChangeEventHandler tAA_ParcelValueRowChanged;
            
            public event tAA_ParcelValueRowChangeEventHandler tAA_ParcelValueRowDeleting;
            
            public event tAA_ParcelValueRowChangeEventHandler tAA_ParcelValueRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddtAA_ParcelValueRow(tAA_ParcelValueRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tAA_ParcelValueRow AddtAA_ParcelValueRow(
                        int ParcelID, 
                        decimal O1ValueA, 
                        decimal O1ValueB, 
                        decimal O1ValueC, 
                        decimal O1ValueD, 
                        decimal O1ValueE, 
                        decimal O2ValueA, 
                        decimal O2ValueB, 
                        decimal O2ValueC, 
                        decimal O2ValueD, 
                        decimal O2ValueE, 
                        decimal O3ValueA, 
                        decimal O3ValueB, 
                        decimal O3ValueC, 
                        decimal O3ValueD, 
                        decimal O3ValueE, 
                        decimal ResultingTaxable, 
                        short ModuleID, 
                        int InsertedBy, 
                        System.DateTime InsertedDate, 
                        int UpdatedBy, 
                        bool IsDeleted) {
                tAA_ParcelValueRow rowtAA_ParcelValueRow = ((tAA_ParcelValueRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ParcelID,
                        O1ValueA,
                        O1ValueB,
                        O1ValueC,
                        O1ValueD,
                        O1ValueE,
                        O2ValueA,
                        O2ValueB,
                        O2ValueC,
                        O2ValueD,
                        O2ValueE,
                        O3ValueA,
                        O3ValueB,
                        O3ValueC,
                        O3ValueD,
                        O3ValueE,
                        ResultingTaxable,
                        ModuleID,
                        InsertedBy,
                        InsertedDate,
                        UpdatedBy,
                        IsDeleted};
                rowtAA_ParcelValueRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowtAA_ParcelValueRow);
                return rowtAA_ParcelValueRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                tAA_ParcelValueDataTable cln = ((tAA_ParcelValueDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new tAA_ParcelValueDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnParcelID = base.Columns["ParcelID"];
                this.columnO1ValueA = base.Columns["O1ValueA"];
                this.columnO1ValueB = base.Columns["O1ValueB"];
                this.columnO1ValueC = base.Columns["O1ValueC"];
                this.columnO1ValueD = base.Columns["O1ValueD"];
                this.columnO1ValueE = base.Columns["O1ValueE"];
                this.columnO2ValueA = base.Columns["O2ValueA"];
                this.columnO2ValueB = base.Columns["O2ValueB"];
                this.columnO2ValueC = base.Columns["O2ValueC"];
                this.columnO2ValueD = base.Columns["O2ValueD"];
                this.columnO2ValueE = base.Columns["O2ValueE"];
                this.columnO3ValueA = base.Columns["O3ValueA"];
                this.columnO3ValueB = base.Columns["O3ValueB"];
                this.columnO3ValueC = base.Columns["O3ValueC"];
                this.columnO3ValueD = base.Columns["O3ValueD"];
                this.columnO3ValueE = base.Columns["O3ValueE"];
                this.columnResultingTaxable = base.Columns["ResultingTaxable"];
                this.columnModuleID = base.Columns["ModuleID"];
                this.columnInsertedBy = base.Columns["InsertedBy"];
                this.columnInsertedDate = base.Columns["InsertedDate"];
                this.columnUpdatedBy = base.Columns["UpdatedBy"];
                this.columnIsDeleted = base.Columns["IsDeleted"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnParcelID = new global::System.Data.DataColumn("ParcelID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnParcelID);
                this.columnO1ValueA = new global::System.Data.DataColumn("O1ValueA", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnO1ValueA);
                this.columnO1ValueB = new global::System.Data.DataColumn("O1ValueB", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnO1ValueB);
                this.columnO1ValueC = new global::System.Data.DataColumn("O1ValueC", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnO1ValueC);
                this.columnO1ValueD = new global::System.Data.DataColumn("O1ValueD", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnO1ValueD);
                this.columnO1ValueE = new global::System.Data.DataColumn("O1ValueE", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnO1ValueE);
                this.columnO2ValueA = new global::System.Data.DataColumn("O2ValueA", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnO2ValueA);
                this.columnO2ValueB = new global::System.Data.DataColumn("O2ValueB", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnO2ValueB);
                this.columnO2ValueC = new global::System.Data.DataColumn("O2ValueC", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnO2ValueC);
                this.columnO2ValueD = new global::System.Data.DataColumn("O2ValueD", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnO2ValueD);
                this.columnO2ValueE = new global::System.Data.DataColumn("O2ValueE", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnO2ValueE);
                this.columnO3ValueA = new global::System.Data.DataColumn("O3ValueA", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnO3ValueA);
                this.columnO3ValueB = new global::System.Data.DataColumn("O3ValueB", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnO3ValueB);
                this.columnO3ValueC = new global::System.Data.DataColumn("O3ValueC", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnO3ValueC);
                this.columnO3ValueD = new global::System.Data.DataColumn("O3ValueD", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnO3ValueD);
                this.columnO3ValueE = new global::System.Data.DataColumn("O3ValueE", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnO3ValueE);
                this.columnResultingTaxable = new global::System.Data.DataColumn("ResultingTaxable", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnResultingTaxable);
                this.columnModuleID = new global::System.Data.DataColumn("ModuleID", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnModuleID);
                this.columnInsertedBy = new global::System.Data.DataColumn("InsertedBy", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInsertedBy);
                this.columnInsertedDate = new global::System.Data.DataColumn("InsertedDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInsertedDate);
                this.columnUpdatedBy = new global::System.Data.DataColumn("UpdatedBy", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUpdatedBy);
                this.columnIsDeleted = new global::System.Data.DataColumn("IsDeleted", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsDeleted);
                this.columnParcelID.ReadOnly = true;
                this.columnO1ValueA.ReadOnly = true;
                this.columnO1ValueB.ReadOnly = true;
                this.columnO1ValueC.ReadOnly = true;
                this.columnO1ValueD.ReadOnly = true;
                this.columnO1ValueE.ReadOnly = true;
                this.columnO2ValueA.ReadOnly = true;
                this.columnO2ValueB.ReadOnly = true;
                this.columnO2ValueC.ReadOnly = true;
                this.columnO2ValueD.ReadOnly = true;
                this.columnO2ValueE.ReadOnly = true;
                this.columnO3ValueA.ReadOnly = true;
                this.columnO3ValueB.ReadOnly = true;
                this.columnO3ValueC.ReadOnly = true;
                this.columnO3ValueD.ReadOnly = true;
                this.columnO3ValueE.ReadOnly = true;
                this.columnResultingTaxable.ReadOnly = true;
                this.columnModuleID.ReadOnly = true;
                this.columnInsertedBy.ReadOnly = true;
                this.columnInsertedDate.ReadOnly = true;
                this.columnUpdatedBy.ReadOnly = true;
                this.columnIsDeleted.ReadOnly = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tAA_ParcelValueRow NewtAA_ParcelValueRow() {
                return ((tAA_ParcelValueRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new tAA_ParcelValueRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(tAA_ParcelValueRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.tAA_ParcelValueRowChanged != null)) {
                    this.tAA_ParcelValueRowChanged(this, new tAA_ParcelValueRowChangeEvent(((tAA_ParcelValueRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.tAA_ParcelValueRowChanging != null)) {
                    this.tAA_ParcelValueRowChanging(this, new tAA_ParcelValueRowChangeEvent(((tAA_ParcelValueRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.tAA_ParcelValueRowDeleted != null)) {
                    this.tAA_ParcelValueRowDeleted(this, new tAA_ParcelValueRowChangeEvent(((tAA_ParcelValueRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.tAA_ParcelValueRowDeleting != null)) {
                    this.tAA_ParcelValueRowDeleting(this, new tAA_ParcelValueRowChangeEvent(((tAA_ParcelValueRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovetAA_ParcelValueRow(tAA_ParcelValueRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                f25000FieldUse ds = new f25000FieldUse();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "tAA_ParcelValueDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class tAA_Parcel_PImprovementDataTable : global::System.Data.TypedTableBase<tAA_Parcel_PImprovementRow> {
            
            private global::System.Data.DataColumn columnImprovementID;
            
            private global::System.Data.DataColumn columnImprovement;
            
            private global::System.Data.DataColumn columnIsActive;
            
            private global::System.Data.DataColumn columnIsDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tAA_Parcel_PImprovementDataTable() {
                this.TableName = "tAA_Parcel_PImprovement";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal tAA_Parcel_PImprovementDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected tAA_Parcel_PImprovementDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ImprovementIDColumn {
                get {
                    return this.columnImprovementID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ImprovementColumn {
                get {
                    return this.columnImprovement;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsActiveColumn {
                get {
                    return this.columnIsActive;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsDeletedColumn {
                get {
                    return this.columnIsDeleted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tAA_Parcel_PImprovementRow this[int index] {
                get {
                    return ((tAA_Parcel_PImprovementRow)(this.Rows[index]));
                }
            }
            
            public event tAA_Parcel_PImprovementRowChangeEventHandler tAA_Parcel_PImprovementRowChanging;
            
            public event tAA_Parcel_PImprovementRowChangeEventHandler tAA_Parcel_PImprovementRowChanged;
            
            public event tAA_Parcel_PImprovementRowChangeEventHandler tAA_Parcel_PImprovementRowDeleting;
            
            public event tAA_Parcel_PImprovementRowChangeEventHandler tAA_Parcel_PImprovementRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddtAA_Parcel_PImprovementRow(tAA_Parcel_PImprovementRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tAA_Parcel_PImprovementRow AddtAA_Parcel_PImprovementRow(int ImprovementID, string Improvement, bool IsActive, bool IsDeleted) {
                tAA_Parcel_PImprovementRow rowtAA_Parcel_PImprovementRow = ((tAA_Parcel_PImprovementRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ImprovementID,
                        Improvement,
                        IsActive,
                        IsDeleted};
                rowtAA_Parcel_PImprovementRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowtAA_Parcel_PImprovementRow);
                return rowtAA_Parcel_PImprovementRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                tAA_Parcel_PImprovementDataTable cln = ((tAA_Parcel_PImprovementDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new tAA_Parcel_PImprovementDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnImprovementID = base.Columns["ImprovementID"];
                this.columnImprovement = base.Columns["Improvement"];
                this.columnIsActive = base.Columns["IsActive"];
                this.columnIsDeleted = base.Columns["IsDeleted"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnImprovementID = new global::System.Data.DataColumn("ImprovementID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnImprovementID);
                this.columnImprovement = new global::System.Data.DataColumn("Improvement", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnImprovement);
                this.columnIsActive = new global::System.Data.DataColumn("IsActive", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsActive);
                this.columnIsDeleted = new global::System.Data.DataColumn("IsDeleted", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsDeleted);
                this.columnImprovementID.ReadOnly = true;
                this.columnImprovement.ReadOnly = true;
                this.columnImprovement.MaxLength = 50;
                this.columnIsActive.ReadOnly = true;
                this.columnIsDeleted.ReadOnly = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tAA_Parcel_PImprovementRow NewtAA_Parcel_PImprovementRow() {
                return ((tAA_Parcel_PImprovementRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new tAA_Parcel_PImprovementRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(tAA_Parcel_PImprovementRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.tAA_Parcel_PImprovementRowChanged != null)) {
                    this.tAA_Parcel_PImprovementRowChanged(this, new tAA_Parcel_PImprovementRowChangeEvent(((tAA_Parcel_PImprovementRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.tAA_Parcel_PImprovementRowChanging != null)) {
                    this.tAA_Parcel_PImprovementRowChanging(this, new tAA_Parcel_PImprovementRowChangeEvent(((tAA_Parcel_PImprovementRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.tAA_Parcel_PImprovementRowDeleted != null)) {
                    this.tAA_Parcel_PImprovementRowDeleted(this, new tAA_Parcel_PImprovementRowChangeEvent(((tAA_Parcel_PImprovementRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.tAA_Parcel_PImprovementRowDeleting != null)) {
                    this.tAA_Parcel_PImprovementRowDeleting(this, new tAA_Parcel_PImprovementRowChangeEvent(((tAA_Parcel_PImprovementRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovetAA_Parcel_PImprovementRow(tAA_Parcel_PImprovementRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                f25000FieldUse ds = new f25000FieldUse();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "tAA_Parcel_PImprovementDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class tAA_AssessmentTypeRow : global::System.Data.DataRow {
            
            private tAA_AssessmentTypeDataTable tabletAA_AssessmentType;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal tAA_AssessmentTypeRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tabletAA_AssessmentType = ((tAA_AssessmentTypeDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short AssessmentTypeID {
                get {
                    try {
                        return ((short)(this[this.tabletAA_AssessmentType.AssessmentTypeIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AssessmentTypeID\' in table \'tAA_AssessmentType\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_AssessmentType.AssessmentTypeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AssessmentType {
                get {
                    try {
                        return ((string)(this[this.tabletAA_AssessmentType.AssessmentTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AssessmentType\' in table \'tAA_AssessmentType\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_AssessmentType.AssessmentTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ModuleID {
                get {
                    try {
                        return ((int)(this[this.tabletAA_AssessmentType.ModuleIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ModuleID\' in table \'tAA_AssessmentType\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_AssessmentType.ModuleIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int InsertedBy {
                get {
                    try {
                        return ((int)(this[this.tabletAA_AssessmentType.InsertedByColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InsertedBy\' in table \'tAA_AssessmentType\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_AssessmentType.InsertedByColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime InsertedDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tabletAA_AssessmentType.InsertedDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InsertedDate\' in table \'tAA_AssessmentType\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_AssessmentType.InsertedDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int UpdatedBy {
                get {
                    try {
                        return ((int)(this[this.tabletAA_AssessmentType.UpdatedByColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UpdatedBy\' in table \'tAA_AssessmentType\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_AssessmentType.UpdatedByColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDeleted {
                get {
                    try {
                        return ((bool)(this[this.tabletAA_AssessmentType.IsDeletedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsDeleted\' in table \'tAA_AssessmentType\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_AssessmentType.IsDeletedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAssessmentTypeIDNull() {
                return this.IsNull(this.tabletAA_AssessmentType.AssessmentTypeIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAssessmentTypeIDNull() {
                this[this.tabletAA_AssessmentType.AssessmentTypeIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAssessmentTypeNull() {
                return this.IsNull(this.tabletAA_AssessmentType.AssessmentTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAssessmentTypeNull() {
                this[this.tabletAA_AssessmentType.AssessmentTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsModuleIDNull() {
                return this.IsNull(this.tabletAA_AssessmentType.ModuleIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetModuleIDNull() {
                this[this.tabletAA_AssessmentType.ModuleIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInsertedByNull() {
                return this.IsNull(this.tabletAA_AssessmentType.InsertedByColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInsertedByNull() {
                this[this.tabletAA_AssessmentType.InsertedByColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInsertedDateNull() {
                return this.IsNull(this.tabletAA_AssessmentType.InsertedDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInsertedDateNull() {
                this[this.tabletAA_AssessmentType.InsertedDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUpdatedByNull() {
                return this.IsNull(this.tabletAA_AssessmentType.UpdatedByColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUpdatedByNull() {
                this[this.tabletAA_AssessmentType.UpdatedByColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsDeletedNull() {
                return this.IsNull(this.tabletAA_AssessmentType.IsDeletedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsDeletedNull() {
                this[this.tabletAA_AssessmentType.IsDeletedColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class tAA_CropRow : global::System.Data.DataRow {
            
            private tAA_CropDataTable tabletAA_Crop;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal tAA_CropRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tabletAA_Crop = ((tAA_CropDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CropID {
                get {
                    try {
                        return ((int)(this[this.tabletAA_Crop.CropIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CropID\' in table \'tAA_Crop\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_Crop.CropIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ValueSliceID {
                get {
                    try {
                        return ((int)(this[this.tabletAA_Crop.ValueSliceIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ValueSliceID\' in table \'tAA_Crop\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_Crop.ValueSliceIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CropCode {
                get {
                    try {
                        return ((string)(this[this.tabletAA_Crop.CropCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CropCode\' in table \'tAA_Crop\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_Crop.CropCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Description {
                get {
                    try {
                        return ((string)(this[this.tabletAA_Crop.DescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Description\' in table \'tAA_Crop\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_Crop.DescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFruitTree {
                get {
                    try {
                        return ((bool)(this[this.tabletAA_Crop.IsFruitTreeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsFruitTree\' in table \'tAA_Crop\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_Crop.IsFruitTreeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short Planted {
                get {
                    try {
                        return ((short)(this[this.tabletAA_Crop.PlantedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Planted\' in table \'tAA_Crop\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_Crop.PlantedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Adjust {
                get {
                    try {
                        return ((decimal)(this[this.tabletAA_Crop.AdjustColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Adjust\' in table \'tAA_Crop\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_Crop.AdjustColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Acres {
                get {
                    try {
                        return ((decimal)(this[this.tabletAA_Crop.AcresColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Acres\' in table \'tAA_Crop\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_Crop.AcresColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal ValuePer {
                get {
                    try {
                        return ((decimal)(this[this.tabletAA_Crop.ValuePerColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ValuePer\' in table \'tAA_Crop\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_Crop.ValuePerColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Value {
                get {
                    try {
                        return ((decimal)(this[this.tabletAA_Crop.ValueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Value\' in table \'tAA_Crop\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_Crop.ValueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short ModuleID {
                get {
                    try {
                        return ((short)(this[this.tabletAA_Crop.ModuleIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ModuleID\' in table \'tAA_Crop\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_Crop.ModuleIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int InsertedBy {
                get {
                    try {
                        return ((int)(this[this.tabletAA_Crop.InsertedByColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InsertedBy\' in table \'tAA_Crop\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_Crop.InsertedByColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime InsertedDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tabletAA_Crop.InsertedDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InsertedDate\' in table \'tAA_Crop\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_Crop.InsertedDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int UpdatedBy {
                get {
                    try {
                        return ((int)(this[this.tabletAA_Crop.UpdatedByColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UpdatedBy\' in table \'tAA_Crop\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_Crop.UpdatedByColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDeleted {
                get {
                    try {
                        return ((bool)(this[this.tabletAA_Crop.IsDeletedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsDeleted\' in table \'tAA_Crop\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_Crop.IsDeletedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCropIDNull() {
                return this.IsNull(this.tabletAA_Crop.CropIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCropIDNull() {
                this[this.tabletAA_Crop.CropIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsValueSliceIDNull() {
                return this.IsNull(this.tabletAA_Crop.ValueSliceIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetValueSliceIDNull() {
                this[this.tabletAA_Crop.ValueSliceIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCropCodeNull() {
                return this.IsNull(this.tabletAA_Crop.CropCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCropCodeNull() {
                this[this.tabletAA_Crop.CropCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDescriptionNull() {
                return this.IsNull(this.tabletAA_Crop.DescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDescriptionNull() {
                this[this.tabletAA_Crop.DescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsFruitTreeNull() {
                return this.IsNull(this.tabletAA_Crop.IsFruitTreeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsFruitTreeNull() {
                this[this.tabletAA_Crop.IsFruitTreeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPlantedNull() {
                return this.IsNull(this.tabletAA_Crop.PlantedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPlantedNull() {
                this[this.tabletAA_Crop.PlantedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAdjustNull() {
                return this.IsNull(this.tabletAA_Crop.AdjustColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAdjustNull() {
                this[this.tabletAA_Crop.AdjustColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAcresNull() {
                return this.IsNull(this.tabletAA_Crop.AcresColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAcresNull() {
                this[this.tabletAA_Crop.AcresColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsValuePerNull() {
                return this.IsNull(this.tabletAA_Crop.ValuePerColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetValuePerNull() {
                this[this.tabletAA_Crop.ValuePerColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsValueNull() {
                return this.IsNull(this.tabletAA_Crop.ValueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetValueNull() {
                this[this.tabletAA_Crop.ValueColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsModuleIDNull() {
                return this.IsNull(this.tabletAA_Crop.ModuleIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetModuleIDNull() {
                this[this.tabletAA_Crop.ModuleIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInsertedByNull() {
                return this.IsNull(this.tabletAA_Crop.InsertedByColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInsertedByNull() {
                this[this.tabletAA_Crop.InsertedByColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInsertedDateNull() {
                return this.IsNull(this.tabletAA_Crop.InsertedDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInsertedDateNull() {
                this[this.tabletAA_Crop.InsertedDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUpdatedByNull() {
                return this.IsNull(this.tabletAA_Crop.UpdatedByColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUpdatedByNull() {
                this[this.tabletAA_Crop.UpdatedByColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsDeletedNull() {
                return this.IsNull(this.tabletAA_Crop.IsDeletedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsDeletedNull() {
                this[this.tabletAA_Crop.IsDeletedColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class tAA_LandRow : global::System.Data.DataRow {
            
            private tAA_LandDataTable tabletAA_Land;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal tAA_LandRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tabletAA_Land = ((tAA_LandDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LUID {
                get {
                    try {
                        return ((int)(this[this.tabletAA_Land.LUIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LUID\' in table \'tAA_Land\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_Land.LUIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ValueSliceID {
                get {
                    try {
                        return ((int)(this[this.tabletAA_Land.ValueSliceIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ValueSliceID\' in table \'tAA_Land\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_Land.ValueSliceIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LandTypeID1 {
                get {
                    try {
                        return ((int)(this[this.tabletAA_Land.LandTypeID1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LandTypeID1\' in table \'tAA_Land\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_Land.LandTypeID1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LandTypeID2 {
                get {
                    try {
                        return ((int)(this[this.tabletAA_Land.LandTypeID2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LandTypeID2\' in table \'tAA_Land\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_Land.LandTypeID2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LandTypeID3 {
                get {
                    try {
                        return ((int)(this[this.tabletAA_Land.LandTypeID3Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LandTypeID3\' in table \'tAA_Land\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_Land.LandTypeID3Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LandCode {
                get {
                    try {
                        return ((string)(this[this.tabletAA_Land.LandCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LandCode\' in table \'tAA_Land\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_Land.LandCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ReportAS {
                get {
                    try {
                        return ((string)(this[this.tabletAA_Land.ReportASColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ReportAS\' in table \'tAA_Land\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_Land.ReportASColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UnitType {
                get {
                    try {
                        return ((string)(this[this.tabletAA_Land.UnitTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UnitType\' in table \'tAA_Land\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_Land.UnitTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Units {
                get {
                    try {
                        return ((decimal)(this[this.tabletAA_Land.UnitsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Units\' in table \'tAA_Land\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_Land.UnitsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte AdjustmentType {
                get {
                    try {
                        return ((byte)(this[this.tabletAA_Land.AdjustmentTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AdjustmentType\' in table \'tAA_Land\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_Land.AdjustmentTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Adjustment {
                get {
                    try {
                        return ((string)(this[this.tabletAA_Land.AdjustmentColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Adjustment\' in table \'tAA_Land\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_Land.AdjustmentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AdjDescription {
                get {
                    try {
                        return ((string)(this[this.tabletAA_Land.AdjDescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AdjDescription\' in table \'tAA_Land\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_Land.AdjDescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short ModuleID {
                get {
                    try {
                        return ((short)(this[this.tabletAA_Land.ModuleIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ModuleID\' in table \'tAA_Land\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_Land.ModuleIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int InsertedBy {
                get {
                    try {
                        return ((int)(this[this.tabletAA_Land.InsertedByColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InsertedBy\' in table \'tAA_Land\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_Land.InsertedByColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime InsertedDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tabletAA_Land.InsertedDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InsertedDate\' in table \'tAA_Land\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_Land.InsertedDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int UpdatedBy {
                get {
                    try {
                        return ((int)(this[this.tabletAA_Land.UpdatedByColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UpdatedBy\' in table \'tAA_Land\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_Land.UpdatedByColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDeleted {
                get {
                    try {
                        return ((bool)(this[this.tabletAA_Land.IsDeletedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsDeleted\' in table \'tAA_Land\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_Land.IsDeletedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte UseAdjustmentType {
                get {
                    try {
                        return ((byte)(this[this.tabletAA_Land.UseAdjustmentTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UseAdjustmentType\' in table \'tAA_Land\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_Land.UseAdjustmentTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UseAdjustment {
                get {
                    try {
                        return ((string)(this[this.tabletAA_Land.UseAdjustmentColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UseAdjustment\' in table \'tAA_Land\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_Land.UseAdjustmentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UseAdjDescription {
                get {
                    try {
                        return ((string)(this[this.tabletAA_Land.UseAdjDescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UseAdjDescription\' in table \'tAA_Land\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_Land.UseAdjDescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal LotWidth {
                get {
                    try {
                        return ((decimal)(this[this.tabletAA_Land.LotWidthColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LotWidth\' in table \'tAA_Land\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_Land.LotWidthColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal LotDepth {
                get {
                    try {
                        return ((decimal)(this[this.tabletAA_Land.LotDepthColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LotDepth\' in table \'tAA_Land\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_Land.LotDepthColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal BaseMrktValue {
                get {
                    try {
                        return ((decimal)(this[this.tabletAA_Land.BaseMrktValueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BaseMrktValue\' in table \'tAA_Land\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_Land.BaseMrktValueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal FinalMrktValue {
                get {
                    try {
                        return ((decimal)(this[this.tabletAA_Land.FinalMrktValueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FinalMrktValue\' in table \'tAA_Land\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_Land.FinalMrktValueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal FinalUseValue {
                get {
                    try {
                        return ((decimal)(this[this.tabletAA_Land.FinalUseValueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FinalUseValue\' in table \'tAA_Land\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_Land.FinalUseValueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LandShape {
                get {
                    try {
                        return ((string)(this[this.tabletAA_Land.LandShapeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LandShape\' in table \'tAA_Land\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_Land.LandShapeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Frontage {
                get {
                    try {
                        return ((decimal)(this[this.tabletAA_Land.FrontageColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Frontage\' in table \'tAA_Land\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_Land.FrontageColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte ProgramID {
                get {
                    try {
                        return ((byte)(this[this.tabletAA_Land.ProgramIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ProgramID\' in table \'tAA_Land\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_Land.ProgramIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LotWidthTemp {
                get {
                    try {
                        return ((string)(this[this.tabletAA_Land.LotWidthTempColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LotWidthTemp\' in table \'tAA_Land\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_Land.LotWidthTempColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LotDepthTemp {
                get {
                    try {
                        return ((string)(this[this.tabletAA_Land.LotDepthTempColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LotDepthTemp\' in table \'tAA_Land\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_Land.LotDepthTempColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal SrAcres {
                get {
                    try {
                        return ((decimal)(this[this.tabletAA_Land.SrAcresColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SrAcres\' in table \'tAA_Land\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_Land.SrAcresColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal WeightedRating {
                get {
                    try {
                        return ((decimal)(this[this.tabletAA_Land.WeightedRatingColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'WeightedRating\' in table \'tAA_Land\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_Land.WeightedRatingColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal BaseValuePerUnit {
                get {
                    try {
                        return ((decimal)(this[this.tabletAA_Land.BaseValuePerUnitColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BaseValuePerUnit\' in table \'tAA_Land\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_Land.BaseValuePerUnitColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLUIDNull() {
                return this.IsNull(this.tabletAA_Land.LUIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLUIDNull() {
                this[this.tabletAA_Land.LUIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsValueSliceIDNull() {
                return this.IsNull(this.tabletAA_Land.ValueSliceIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetValueSliceIDNull() {
                this[this.tabletAA_Land.ValueSliceIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLandTypeID1Null() {
                return this.IsNull(this.tabletAA_Land.LandTypeID1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLandTypeID1Null() {
                this[this.tabletAA_Land.LandTypeID1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLandTypeID2Null() {
                return this.IsNull(this.tabletAA_Land.LandTypeID2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLandTypeID2Null() {
                this[this.tabletAA_Land.LandTypeID2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLandTypeID3Null() {
                return this.IsNull(this.tabletAA_Land.LandTypeID3Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLandTypeID3Null() {
                this[this.tabletAA_Land.LandTypeID3Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLandCodeNull() {
                return this.IsNull(this.tabletAA_Land.LandCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLandCodeNull() {
                this[this.tabletAA_Land.LandCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsReportASNull() {
                return this.IsNull(this.tabletAA_Land.ReportASColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetReportASNull() {
                this[this.tabletAA_Land.ReportASColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUnitTypeNull() {
                return this.IsNull(this.tabletAA_Land.UnitTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUnitTypeNull() {
                this[this.tabletAA_Land.UnitTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUnitsNull() {
                return this.IsNull(this.tabletAA_Land.UnitsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUnitsNull() {
                this[this.tabletAA_Land.UnitsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAdjustmentTypeNull() {
                return this.IsNull(this.tabletAA_Land.AdjustmentTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAdjustmentTypeNull() {
                this[this.tabletAA_Land.AdjustmentTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAdjustmentNull() {
                return this.IsNull(this.tabletAA_Land.AdjustmentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAdjustmentNull() {
                this[this.tabletAA_Land.AdjustmentColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAdjDescriptionNull() {
                return this.IsNull(this.tabletAA_Land.AdjDescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAdjDescriptionNull() {
                this[this.tabletAA_Land.AdjDescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsModuleIDNull() {
                return this.IsNull(this.tabletAA_Land.ModuleIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetModuleIDNull() {
                this[this.tabletAA_Land.ModuleIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInsertedByNull() {
                return this.IsNull(this.tabletAA_Land.InsertedByColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInsertedByNull() {
                this[this.tabletAA_Land.InsertedByColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInsertedDateNull() {
                return this.IsNull(this.tabletAA_Land.InsertedDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInsertedDateNull() {
                this[this.tabletAA_Land.InsertedDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUpdatedByNull() {
                return this.IsNull(this.tabletAA_Land.UpdatedByColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUpdatedByNull() {
                this[this.tabletAA_Land.UpdatedByColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsDeletedNull() {
                return this.IsNull(this.tabletAA_Land.IsDeletedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsDeletedNull() {
                this[this.tabletAA_Land.IsDeletedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUseAdjustmentTypeNull() {
                return this.IsNull(this.tabletAA_Land.UseAdjustmentTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUseAdjustmentTypeNull() {
                this[this.tabletAA_Land.UseAdjustmentTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUseAdjustmentNull() {
                return this.IsNull(this.tabletAA_Land.UseAdjustmentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUseAdjustmentNull() {
                this[this.tabletAA_Land.UseAdjustmentColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUseAdjDescriptionNull() {
                return this.IsNull(this.tabletAA_Land.UseAdjDescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUseAdjDescriptionNull() {
                this[this.tabletAA_Land.UseAdjDescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLotWidthNull() {
                return this.IsNull(this.tabletAA_Land.LotWidthColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLotWidthNull() {
                this[this.tabletAA_Land.LotWidthColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLotDepthNull() {
                return this.IsNull(this.tabletAA_Land.LotDepthColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLotDepthNull() {
                this[this.tabletAA_Land.LotDepthColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBaseMrktValueNull() {
                return this.IsNull(this.tabletAA_Land.BaseMrktValueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBaseMrktValueNull() {
                this[this.tabletAA_Land.BaseMrktValueColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFinalMrktValueNull() {
                return this.IsNull(this.tabletAA_Land.FinalMrktValueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFinalMrktValueNull() {
                this[this.tabletAA_Land.FinalMrktValueColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFinalUseValueNull() {
                return this.IsNull(this.tabletAA_Land.FinalUseValueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFinalUseValueNull() {
                this[this.tabletAA_Land.FinalUseValueColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLandShapeNull() {
                return this.IsNull(this.tabletAA_Land.LandShapeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLandShapeNull() {
                this[this.tabletAA_Land.LandShapeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFrontageNull() {
                return this.IsNull(this.tabletAA_Land.FrontageColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFrontageNull() {
                this[this.tabletAA_Land.FrontageColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProgramIDNull() {
                return this.IsNull(this.tabletAA_Land.ProgramIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProgramIDNull() {
                this[this.tabletAA_Land.ProgramIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLotWidthTempNull() {
                return this.IsNull(this.tabletAA_Land.LotWidthTempColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLotWidthTempNull() {
                this[this.tabletAA_Land.LotWidthTempColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLotDepthTempNull() {
                return this.IsNull(this.tabletAA_Land.LotDepthTempColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLotDepthTempNull() {
                this[this.tabletAA_Land.LotDepthTempColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSrAcresNull() {
                return this.IsNull(this.tabletAA_Land.SrAcresColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSrAcresNull() {
                this[this.tabletAA_Land.SrAcresColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWeightedRatingNull() {
                return this.IsNull(this.tabletAA_Land.WeightedRatingColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWeightedRatingNull() {
                this[this.tabletAA_Land.WeightedRatingColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBaseValuePerUnitNull() {
                return this.IsNull(this.tabletAA_Land.BaseValuePerUnitColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBaseValuePerUnitNull() {
                this[this.tabletAA_Land.BaseValuePerUnitColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class tAA_LandUnitRow : global::System.Data.DataRow {
            
            private tAA_LandUnitDataTable tabletAA_LandUnit;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal tAA_LandUnitRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tabletAA_LandUnit = ((tAA_LandUnitDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UnitType {
                get {
                    try {
                        return ((string)(this[this.tabletAA_LandUnit.UnitTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UnitType\' in table \'tAA_LandUnit\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_LandUnit.UnitTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsActive {
                get {
                    try {
                        return ((bool)(this[this.tabletAA_LandUnit.IsActiveColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsActive\' in table \'tAA_LandUnit\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_LandUnit.IsActiveColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal UnitsPerAcre {
                get {
                    try {
                        return ((decimal)(this[this.tabletAA_LandUnit.UnitsPerAcreColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UnitsPerAcre\' in table \'tAA_LandUnit\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_LandUnit.UnitsPerAcreColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUnitTypeNull() {
                return this.IsNull(this.tabletAA_LandUnit.UnitTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUnitTypeNull() {
                this[this.tabletAA_LandUnit.UnitTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsActiveNull() {
                return this.IsNull(this.tabletAA_LandUnit.IsActiveColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsActiveNull() {
                this[this.tabletAA_LandUnit.IsActiveColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUnitsPerAcreNull() {
                return this.IsNull(this.tabletAA_LandUnit.UnitsPerAcreColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUnitsPerAcreNull() {
                this[this.tabletAA_LandUnit.UnitsPerAcreColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class tAA_MA_Type1Row : global::System.Data.DataRow {
            
            private tAA_MA_Type1DataTable tabletAA_MA_Type1;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal tAA_MA_Type1Row(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tabletAA_MA_Type1 = ((tAA_MA_Type1DataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ParcelID {
                get {
                    try {
                        return ((int)(this[this.tabletAA_MA_Type1.ParcelIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ParcelID\' in table \'tAA_MA_Type1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MA_Type1.ParcelIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MADistrictID {
                get {
                    try {
                        return ((int)(this[this.tabletAA_MA_Type1.MADistrictIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MADistrictID\' in table \'tAA_MA_Type1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MA_Type1.MADistrictIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal SiteAcres {
                get {
                    try {
                        return ((decimal)(this[this.tabletAA_MA_Type1.SiteAcresColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SiteAcres\' in table \'tAA_MA_Type1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MA_Type1.SiteAcresColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal DryAcres {
                get {
                    try {
                        return ((decimal)(this[this.tabletAA_MA_Type1.DryAcresColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DryAcres\' in table \'tAA_MA_Type1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MA_Type1.DryAcresColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal IrrigatedAcres {
                get {
                    try {
                        return ((decimal)(this[this.tabletAA_MA_Type1.IrrigatedAcresColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IrrigatedAcres\' in table \'tAA_MA_Type1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MA_Type1.IrrigatedAcresColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TimberAcres {
                get {
                    try {
                        return ((decimal)(this[this.tabletAA_MA_Type1.TimberAcresColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TimberAcres\' in table \'tAA_MA_Type1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MA_Type1.TimberAcresColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal OtherAcres {
                get {
                    try {
                        return ((decimal)(this[this.tabletAA_MA_Type1.OtherAcresColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OtherAcres\' in table \'tAA_MA_Type1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MA_Type1.OtherAcresColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TaxAmount {
                get {
                    try {
                        return ((decimal)(this[this.tabletAA_MA_Type1.TaxAmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TaxAmount\' in table \'tAA_MA_Type1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MA_Type1.TaxAmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int InsertedBy {
                get {
                    try {
                        return ((int)(this[this.tabletAA_MA_Type1.InsertedByColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InsertedBy\' in table \'tAA_MA_Type1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MA_Type1.InsertedByColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime InsertedDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tabletAA_MA_Type1.InsertedDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InsertedDate\' in table \'tAA_MA_Type1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MA_Type1.InsertedDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int UpdatedBy {
                get {
                    try {
                        return ((int)(this[this.tabletAA_MA_Type1.UpdatedByColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UpdatedBy\' in table \'tAA_MA_Type1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MA_Type1.UpdatedByColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDeleted {
                get {
                    try {
                        return ((bool)(this[this.tabletAA_MA_Type1.IsDeletedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsDeleted\' in table \'tAA_MA_Type1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MA_Type1.IsDeletedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short ModuleID {
                get {
                    try {
                        return ((short)(this[this.tabletAA_MA_Type1.ModuleIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ModuleID\' in table \'tAA_MA_Type1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MA_Type1.ModuleIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string amount {
                get {
                    try {
                        return ((string)(this[this.tabletAA_MA_Type1.amountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'amount\' in table \'tAA_MA_Type1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MA_Type1.amountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal OverrideAmount {
                get {
                    try {
                        return ((decimal)(this[this.tabletAA_MA_Type1.OverrideAmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OverrideAmount\' in table \'tAA_MA_Type1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MA_Type1.OverrideAmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsExempt {
                get {
                    try {
                        return ((bool)(this[this.tabletAA_MA_Type1.IsExemptColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsExempt\' in table \'tAA_MA_Type1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MA_Type1.IsExemptColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOverride {
                get {
                    try {
                        return ((bool)(this[this.tabletAA_MA_Type1.IsOverrideColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsOverride\' in table \'tAA_MA_Type1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MA_Type1.IsOverrideColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal BaseAcres {
                get {
                    try {
                        return ((decimal)(this[this.tabletAA_MA_Type1.BaseAcresColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BaseAcres\' in table \'tAA_MA_Type1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MA_Type1.BaseAcresColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsParcelIDNull() {
                return this.IsNull(this.tabletAA_MA_Type1.ParcelIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetParcelIDNull() {
                this[this.tabletAA_MA_Type1.ParcelIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMADistrictIDNull() {
                return this.IsNull(this.tabletAA_MA_Type1.MADistrictIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMADistrictIDNull() {
                this[this.tabletAA_MA_Type1.MADistrictIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSiteAcresNull() {
                return this.IsNull(this.tabletAA_MA_Type1.SiteAcresColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSiteAcresNull() {
                this[this.tabletAA_MA_Type1.SiteAcresColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDryAcresNull() {
                return this.IsNull(this.tabletAA_MA_Type1.DryAcresColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDryAcresNull() {
                this[this.tabletAA_MA_Type1.DryAcresColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIrrigatedAcresNull() {
                return this.IsNull(this.tabletAA_MA_Type1.IrrigatedAcresColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIrrigatedAcresNull() {
                this[this.tabletAA_MA_Type1.IrrigatedAcresColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTimberAcresNull() {
                return this.IsNull(this.tabletAA_MA_Type1.TimberAcresColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTimberAcresNull() {
                this[this.tabletAA_MA_Type1.TimberAcresColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOtherAcresNull() {
                return this.IsNull(this.tabletAA_MA_Type1.OtherAcresColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOtherAcresNull() {
                this[this.tabletAA_MA_Type1.OtherAcresColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTaxAmountNull() {
                return this.IsNull(this.tabletAA_MA_Type1.TaxAmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTaxAmountNull() {
                this[this.tabletAA_MA_Type1.TaxAmountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInsertedByNull() {
                return this.IsNull(this.tabletAA_MA_Type1.InsertedByColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInsertedByNull() {
                this[this.tabletAA_MA_Type1.InsertedByColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInsertedDateNull() {
                return this.IsNull(this.tabletAA_MA_Type1.InsertedDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInsertedDateNull() {
                this[this.tabletAA_MA_Type1.InsertedDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUpdatedByNull() {
                return this.IsNull(this.tabletAA_MA_Type1.UpdatedByColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUpdatedByNull() {
                this[this.tabletAA_MA_Type1.UpdatedByColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsDeletedNull() {
                return this.IsNull(this.tabletAA_MA_Type1.IsDeletedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsDeletedNull() {
                this[this.tabletAA_MA_Type1.IsDeletedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsModuleIDNull() {
                return this.IsNull(this.tabletAA_MA_Type1.ModuleIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetModuleIDNull() {
                this[this.tabletAA_MA_Type1.ModuleIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsamountNull() {
                return this.IsNull(this.tabletAA_MA_Type1.amountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetamountNull() {
                this[this.tabletAA_MA_Type1.amountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOverrideAmountNull() {
                return this.IsNull(this.tabletAA_MA_Type1.OverrideAmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOverrideAmountNull() {
                this[this.tabletAA_MA_Type1.OverrideAmountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsExemptNull() {
                return this.IsNull(this.tabletAA_MA_Type1.IsExemptColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsExemptNull() {
                this[this.tabletAA_MA_Type1.IsExemptColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsOverrideNull() {
                return this.IsNull(this.tabletAA_MA_Type1.IsOverrideColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsOverrideNull() {
                this[this.tabletAA_MA_Type1.IsOverrideColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBaseAcresNull() {
                return this.IsNull(this.tabletAA_MA_Type1.BaseAcresColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBaseAcresNull() {
                this[this.tabletAA_MA_Type1.BaseAcresColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class tAA_MA_Type10Row : global::System.Data.DataRow {
            
            private tAA_MA_Type10DataTable tabletAA_MA_Type10;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal tAA_MA_Type10Row(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tabletAA_MA_Type10 = ((tAA_MA_Type10DataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ParcelID {
                get {
                    try {
                        return ((int)(this[this.tabletAA_MA_Type10.ParcelIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ParcelID\' in table \'tAA_MA_Type10\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MA_Type10.ParcelIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MADistrictID {
                get {
                    try {
                        return ((int)(this[this.tabletAA_MA_Type10.MADistrictIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MADistrictID\' in table \'tAA_MA_Type10\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MA_Type10.MADistrictIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal AssessedValue {
                get {
                    try {
                        return ((decimal)(this[this.tabletAA_MA_Type10.AssessedValueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AssessedValue\' in table \'tAA_MA_Type10\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MA_Type10.AssessedValueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal rate {
                get {
                    try {
                        return ((decimal)(this[this.tabletAA_MA_Type10.rateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'rate\' in table \'tAA_MA_Type10\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MA_Type10.rateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TaxAmount {
                get {
                    try {
                        return ((decimal)(this[this.tabletAA_MA_Type10.TaxAmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TaxAmount\' in table \'tAA_MA_Type10\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MA_Type10.TaxAmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int InsertedBy {
                get {
                    try {
                        return ((int)(this[this.tabletAA_MA_Type10.InsertedByColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InsertedBy\' in table \'tAA_MA_Type10\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MA_Type10.InsertedByColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime InsertedDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tabletAA_MA_Type10.InsertedDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InsertedDate\' in table \'tAA_MA_Type10\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MA_Type10.InsertedDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int UpdatedBy {
                get {
                    try {
                        return ((int)(this[this.tabletAA_MA_Type10.UpdatedByColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UpdatedBy\' in table \'tAA_MA_Type10\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MA_Type10.UpdatedByColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDeleted {
                get {
                    try {
                        return ((bool)(this[this.tabletAA_MA_Type10.IsDeletedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsDeleted\' in table \'tAA_MA_Type10\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MA_Type10.IsDeletedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short ModuleID {
                get {
                    try {
                        return ((short)(this[this.tabletAA_MA_Type10.ModuleIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ModuleID\' in table \'tAA_MA_Type10\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MA_Type10.ModuleIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string amount {
                get {
                    try {
                        return ((string)(this[this.tabletAA_MA_Type10.amountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'amount\' in table \'tAA_MA_Type10\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MA_Type10.amountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal OverrideAmount {
                get {
                    try {
                        return ((decimal)(this[this.tabletAA_MA_Type10.OverrideAmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OverrideAmount\' in table \'tAA_MA_Type10\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MA_Type10.OverrideAmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsExempt {
                get {
                    try {
                        return ((bool)(this[this.tabletAA_MA_Type10.IsExemptColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsExempt\' in table \'tAA_MA_Type10\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MA_Type10.IsExemptColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOverride {
                get {
                    try {
                        return ((bool)(this[this.tabletAA_MA_Type10.IsOverrideColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsOverride\' in table \'tAA_MA_Type10\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MA_Type10.IsOverrideColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal units {
                get {
                    try {
                        return ((decimal)(this[this.tabletAA_MA_Type10.unitsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'units\' in table \'tAA_MA_Type10\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MA_Type10.unitsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Factor {
                get {
                    try {
                        return ((int)(this[this.tabletAA_MA_Type10.FactorColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Factor\' in table \'tAA_MA_Type10\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MA_Type10.FactorColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsParcelIDNull() {
                return this.IsNull(this.tabletAA_MA_Type10.ParcelIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetParcelIDNull() {
                this[this.tabletAA_MA_Type10.ParcelIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMADistrictIDNull() {
                return this.IsNull(this.tabletAA_MA_Type10.MADistrictIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMADistrictIDNull() {
                this[this.tabletAA_MA_Type10.MADistrictIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAssessedValueNull() {
                return this.IsNull(this.tabletAA_MA_Type10.AssessedValueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAssessedValueNull() {
                this[this.tabletAA_MA_Type10.AssessedValueColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsrateNull() {
                return this.IsNull(this.tabletAA_MA_Type10.rateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetrateNull() {
                this[this.tabletAA_MA_Type10.rateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTaxAmountNull() {
                return this.IsNull(this.tabletAA_MA_Type10.TaxAmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTaxAmountNull() {
                this[this.tabletAA_MA_Type10.TaxAmountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInsertedByNull() {
                return this.IsNull(this.tabletAA_MA_Type10.InsertedByColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInsertedByNull() {
                this[this.tabletAA_MA_Type10.InsertedByColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInsertedDateNull() {
                return this.IsNull(this.tabletAA_MA_Type10.InsertedDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInsertedDateNull() {
                this[this.tabletAA_MA_Type10.InsertedDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUpdatedByNull() {
                return this.IsNull(this.tabletAA_MA_Type10.UpdatedByColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUpdatedByNull() {
                this[this.tabletAA_MA_Type10.UpdatedByColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsDeletedNull() {
                return this.IsNull(this.tabletAA_MA_Type10.IsDeletedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsDeletedNull() {
                this[this.tabletAA_MA_Type10.IsDeletedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsModuleIDNull() {
                return this.IsNull(this.tabletAA_MA_Type10.ModuleIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetModuleIDNull() {
                this[this.tabletAA_MA_Type10.ModuleIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsamountNull() {
                return this.IsNull(this.tabletAA_MA_Type10.amountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetamountNull() {
                this[this.tabletAA_MA_Type10.amountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOverrideAmountNull() {
                return this.IsNull(this.tabletAA_MA_Type10.OverrideAmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOverrideAmountNull() {
                this[this.tabletAA_MA_Type10.OverrideAmountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsExemptNull() {
                return this.IsNull(this.tabletAA_MA_Type10.IsExemptColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsExemptNull() {
                this[this.tabletAA_MA_Type10.IsExemptColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsOverrideNull() {
                return this.IsNull(this.tabletAA_MA_Type10.IsOverrideColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsOverrideNull() {
                this[this.tabletAA_MA_Type10.IsOverrideColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsunitsNull() {
                return this.IsNull(this.tabletAA_MA_Type10.unitsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetunitsNull() {
                this[this.tabletAA_MA_Type10.unitsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFactorNull() {
                return this.IsNull(this.tabletAA_MA_Type10.FactorColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFactorNull() {
                this[this.tabletAA_MA_Type10.FactorColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class tAA_MA_Type11Row : global::System.Data.DataRow {
            
            private tAA_MA_Type11DataTable tabletAA_MA_Type11;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal tAA_MA_Type11Row(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tabletAA_MA_Type11 = ((tAA_MA_Type11DataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ParcelID {
                get {
                    try {
                        return ((int)(this[this.tabletAA_MA_Type11.ParcelIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ParcelID\' in table \'tAA_MA_Type11\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MA_Type11.ParcelIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MADistrictID {
                get {
                    try {
                        return ((int)(this[this.tabletAA_MA_Type11.MADistrictIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MADistrictID\' in table \'tAA_MA_Type11\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MA_Type11.MADistrictIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TaxAmount {
                get {
                    try {
                        return ((decimal)(this[this.tabletAA_MA_Type11.TaxAmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TaxAmount\' in table \'tAA_MA_Type11\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MA_Type11.TaxAmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int InsertedBy {
                get {
                    try {
                        return ((int)(this[this.tabletAA_MA_Type11.InsertedByColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InsertedBy\' in table \'tAA_MA_Type11\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MA_Type11.InsertedByColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime InsertedDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tabletAA_MA_Type11.InsertedDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InsertedDate\' in table \'tAA_MA_Type11\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MA_Type11.InsertedDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int UpdatedBy {
                get {
                    try {
                        return ((int)(this[this.tabletAA_MA_Type11.UpdatedByColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UpdatedBy\' in table \'tAA_MA_Type11\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MA_Type11.UpdatedByColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDeleted {
                get {
                    try {
                        return ((bool)(this[this.tabletAA_MA_Type11.IsDeletedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsDeleted\' in table \'tAA_MA_Type11\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MA_Type11.IsDeletedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short ModuleID {
                get {
                    try {
                        return ((short)(this[this.tabletAA_MA_Type11.ModuleIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ModuleID\' in table \'tAA_MA_Type11\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MA_Type11.ModuleIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal OverrideAmount {
                get {
                    try {
                        return ((decimal)(this[this.tabletAA_MA_Type11.OverrideAmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OverrideAmount\' in table \'tAA_MA_Type11\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MA_Type11.OverrideAmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsExempt {
                get {
                    try {
                        return ((bool)(this[this.tabletAA_MA_Type11.IsExemptColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsExempt\' in table \'tAA_MA_Type11\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MA_Type11.IsExemptColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOverride {
                get {
                    try {
                        return ((bool)(this[this.tabletAA_MA_Type11.IsOverrideColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsOverride\' in table \'tAA_MA_Type11\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MA_Type11.IsOverrideColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsParcelIDNull() {
                return this.IsNull(this.tabletAA_MA_Type11.ParcelIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetParcelIDNull() {
                this[this.tabletAA_MA_Type11.ParcelIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMADistrictIDNull() {
                return this.IsNull(this.tabletAA_MA_Type11.MADistrictIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMADistrictIDNull() {
                this[this.tabletAA_MA_Type11.MADistrictIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTaxAmountNull() {
                return this.IsNull(this.tabletAA_MA_Type11.TaxAmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTaxAmountNull() {
                this[this.tabletAA_MA_Type11.TaxAmountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInsertedByNull() {
                return this.IsNull(this.tabletAA_MA_Type11.InsertedByColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInsertedByNull() {
                this[this.tabletAA_MA_Type11.InsertedByColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInsertedDateNull() {
                return this.IsNull(this.tabletAA_MA_Type11.InsertedDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInsertedDateNull() {
                this[this.tabletAA_MA_Type11.InsertedDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUpdatedByNull() {
                return this.IsNull(this.tabletAA_MA_Type11.UpdatedByColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUpdatedByNull() {
                this[this.tabletAA_MA_Type11.UpdatedByColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsDeletedNull() {
                return this.IsNull(this.tabletAA_MA_Type11.IsDeletedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsDeletedNull() {
                this[this.tabletAA_MA_Type11.IsDeletedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsModuleIDNull() {
                return this.IsNull(this.tabletAA_MA_Type11.ModuleIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetModuleIDNull() {
                this[this.tabletAA_MA_Type11.ModuleIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOverrideAmountNull() {
                return this.IsNull(this.tabletAA_MA_Type11.OverrideAmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOverrideAmountNull() {
                this[this.tabletAA_MA_Type11.OverrideAmountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsExemptNull() {
                return this.IsNull(this.tabletAA_MA_Type11.IsExemptColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsExemptNull() {
                this[this.tabletAA_MA_Type11.IsExemptColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsOverrideNull() {
                return this.IsNull(this.tabletAA_MA_Type11.IsOverrideColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsOverrideNull() {
                this[this.tabletAA_MA_Type11.IsOverrideColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class tAA_MA_Type12Row : global::System.Data.DataRow {
            
            private tAA_MA_Type12DataTable tabletAA_MA_Type12;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal tAA_MA_Type12Row(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tabletAA_MA_Type12 = ((tAA_MA_Type12DataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ParcelID {
                get {
                    try {
                        return ((int)(this[this.tabletAA_MA_Type12.ParcelIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ParcelID\' in table \'tAA_MA_Type12\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MA_Type12.ParcelIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MADistrictID {
                get {
                    try {
                        return ((int)(this[this.tabletAA_MA_Type12.MADistrictIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MADistrictID\' in table \'tAA_MA_Type12\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MA_Type12.MADistrictIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TaxAmount {
                get {
                    try {
                        return ((decimal)(this[this.tabletAA_MA_Type12.TaxAmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TaxAmount\' in table \'tAA_MA_Type12\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MA_Type12.TaxAmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int InsertedBy {
                get {
                    try {
                        return ((int)(this[this.tabletAA_MA_Type12.InsertedByColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InsertedBy\' in table \'tAA_MA_Type12\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MA_Type12.InsertedByColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime InsertedDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tabletAA_MA_Type12.InsertedDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InsertedDate\' in table \'tAA_MA_Type12\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MA_Type12.InsertedDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int UpdatedBy {
                get {
                    try {
                        return ((int)(this[this.tabletAA_MA_Type12.UpdatedByColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UpdatedBy\' in table \'tAA_MA_Type12\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MA_Type12.UpdatedByColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDeleted {
                get {
                    try {
                        return ((bool)(this[this.tabletAA_MA_Type12.IsDeletedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsDeleted\' in table \'tAA_MA_Type12\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MA_Type12.IsDeletedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short ModuleID {
                get {
                    try {
                        return ((short)(this[this.tabletAA_MA_Type12.ModuleIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ModuleID\' in table \'tAA_MA_Type12\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MA_Type12.ModuleIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal OverrideAmount {
                get {
                    try {
                        return ((decimal)(this[this.tabletAA_MA_Type12.OverrideAmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OverrideAmount\' in table \'tAA_MA_Type12\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MA_Type12.OverrideAmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsExempt {
                get {
                    try {
                        return ((bool)(this[this.tabletAA_MA_Type12.IsExemptColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsExempt\' in table \'tAA_MA_Type12\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MA_Type12.IsExemptColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOverride {
                get {
                    try {
                        return ((bool)(this[this.tabletAA_MA_Type12.IsOverrideColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsOverride\' in table \'tAA_MA_Type12\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MA_Type12.IsOverrideColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsParcelIDNull() {
                return this.IsNull(this.tabletAA_MA_Type12.ParcelIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetParcelIDNull() {
                this[this.tabletAA_MA_Type12.ParcelIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMADistrictIDNull() {
                return this.IsNull(this.tabletAA_MA_Type12.MADistrictIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMADistrictIDNull() {
                this[this.tabletAA_MA_Type12.MADistrictIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTaxAmountNull() {
                return this.IsNull(this.tabletAA_MA_Type12.TaxAmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTaxAmountNull() {
                this[this.tabletAA_MA_Type12.TaxAmountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInsertedByNull() {
                return this.IsNull(this.tabletAA_MA_Type12.InsertedByColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInsertedByNull() {
                this[this.tabletAA_MA_Type12.InsertedByColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInsertedDateNull() {
                return this.IsNull(this.tabletAA_MA_Type12.InsertedDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInsertedDateNull() {
                this[this.tabletAA_MA_Type12.InsertedDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUpdatedByNull() {
                return this.IsNull(this.tabletAA_MA_Type12.UpdatedByColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUpdatedByNull() {
                this[this.tabletAA_MA_Type12.UpdatedByColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsDeletedNull() {
                return this.IsNull(this.tabletAA_MA_Type12.IsDeletedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsDeletedNull() {
                this[this.tabletAA_MA_Type12.IsDeletedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsModuleIDNull() {
                return this.IsNull(this.tabletAA_MA_Type12.ModuleIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetModuleIDNull() {
                this[this.tabletAA_MA_Type12.ModuleIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOverrideAmountNull() {
                return this.IsNull(this.tabletAA_MA_Type12.OverrideAmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOverrideAmountNull() {
                this[this.tabletAA_MA_Type12.OverrideAmountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsExemptNull() {
                return this.IsNull(this.tabletAA_MA_Type12.IsExemptColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsExemptNull() {
                this[this.tabletAA_MA_Type12.IsExemptColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsOverrideNull() {
                return this.IsNull(this.tabletAA_MA_Type12.IsOverrideColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsOverrideNull() {
                this[this.tabletAA_MA_Type12.IsOverrideColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class tAA_MA_Type2Row : global::System.Data.DataRow {
            
            private tAA_MA_Type2DataTable tabletAA_MA_Type2;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal tAA_MA_Type2Row(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tabletAA_MA_Type2 = ((tAA_MA_Type2DataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ParcelID {
                get {
                    try {
                        return ((int)(this[this.tabletAA_MA_Type2.ParcelIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ParcelID\' in table \'tAA_MA_Type2\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MA_Type2.ParcelIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MADistrictID {
                get {
                    try {
                        return ((int)(this[this.tabletAA_MA_Type2.MADistrictIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MADistrictID\' in table \'tAA_MA_Type2\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MA_Type2.MADistrictIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal SiteAcres {
                get {
                    try {
                        return ((decimal)(this[this.tabletAA_MA_Type2.SiteAcresColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SiteAcres\' in table \'tAA_MA_Type2\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MA_Type2.SiteAcresColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal DryAcres {
                get {
                    try {
                        return ((decimal)(this[this.tabletAA_MA_Type2.DryAcresColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DryAcres\' in table \'tAA_MA_Type2\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MA_Type2.DryAcresColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal IrrigatedAcres {
                get {
                    try {
                        return ((decimal)(this[this.tabletAA_MA_Type2.IrrigatedAcresColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IrrigatedAcres\' in table \'tAA_MA_Type2\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MA_Type2.IrrigatedAcresColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TimberAcres {
                get {
                    try {
                        return ((decimal)(this[this.tabletAA_MA_Type2.TimberAcresColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TimberAcres\' in table \'tAA_MA_Type2\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MA_Type2.TimberAcresColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal OtherAcres {
                get {
                    try {
                        return ((decimal)(this[this.tabletAA_MA_Type2.OtherAcresColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OtherAcres\' in table \'tAA_MA_Type2\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MA_Type2.OtherAcresColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal BaseAcres {
                get {
                    try {
                        return ((decimal)(this[this.tabletAA_MA_Type2.BaseAcresColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BaseAcres\' in table \'tAA_MA_Type2\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MA_Type2.BaseAcresColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TaxAmount {
                get {
                    try {
                        return ((decimal)(this[this.tabletAA_MA_Type2.TaxAmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TaxAmount\' in table \'tAA_MA_Type2\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MA_Type2.TaxAmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int InsertedBy {
                get {
                    try {
                        return ((int)(this[this.tabletAA_MA_Type2.InsertedByColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InsertedBy\' in table \'tAA_MA_Type2\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MA_Type2.InsertedByColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime InsertedDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tabletAA_MA_Type2.InsertedDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InsertedDate\' in table \'tAA_MA_Type2\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MA_Type2.InsertedDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int UpdatedBy {
                get {
                    try {
                        return ((int)(this[this.tabletAA_MA_Type2.UpdatedByColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UpdatedBy\' in table \'tAA_MA_Type2\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MA_Type2.UpdatedByColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDeleted {
                get {
                    try {
                        return ((bool)(this[this.tabletAA_MA_Type2.IsDeletedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsDeleted\' in table \'tAA_MA_Type2\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MA_Type2.IsDeletedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short ModuleID {
                get {
                    try {
                        return ((short)(this[this.tabletAA_MA_Type2.ModuleIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ModuleID\' in table \'tAA_MA_Type2\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MA_Type2.ModuleIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string amount {
                get {
                    try {
                        return ((string)(this[this.tabletAA_MA_Type2.amountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'amount\' in table \'tAA_MA_Type2\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MA_Type2.amountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal OverrideAmount {
                get {
                    try {
                        return ((decimal)(this[this.tabletAA_MA_Type2.OverrideAmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OverrideAmount\' in table \'tAA_MA_Type2\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MA_Type2.OverrideAmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsExempt {
                get {
                    try {
                        return ((bool)(this[this.tabletAA_MA_Type2.IsExemptColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsExempt\' in table \'tAA_MA_Type2\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MA_Type2.IsExemptColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOverride {
                get {
                    try {
                        return ((bool)(this[this.tabletAA_MA_Type2.IsOverrideColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsOverride\' in table \'tAA_MA_Type2\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MA_Type2.IsOverrideColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsParcelIDNull() {
                return this.IsNull(this.tabletAA_MA_Type2.ParcelIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetParcelIDNull() {
                this[this.tabletAA_MA_Type2.ParcelIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMADistrictIDNull() {
                return this.IsNull(this.tabletAA_MA_Type2.MADistrictIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMADistrictIDNull() {
                this[this.tabletAA_MA_Type2.MADistrictIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSiteAcresNull() {
                return this.IsNull(this.tabletAA_MA_Type2.SiteAcresColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSiteAcresNull() {
                this[this.tabletAA_MA_Type2.SiteAcresColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDryAcresNull() {
                return this.IsNull(this.tabletAA_MA_Type2.DryAcresColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDryAcresNull() {
                this[this.tabletAA_MA_Type2.DryAcresColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIrrigatedAcresNull() {
                return this.IsNull(this.tabletAA_MA_Type2.IrrigatedAcresColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIrrigatedAcresNull() {
                this[this.tabletAA_MA_Type2.IrrigatedAcresColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTimberAcresNull() {
                return this.IsNull(this.tabletAA_MA_Type2.TimberAcresColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTimberAcresNull() {
                this[this.tabletAA_MA_Type2.TimberAcresColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOtherAcresNull() {
                return this.IsNull(this.tabletAA_MA_Type2.OtherAcresColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOtherAcresNull() {
                this[this.tabletAA_MA_Type2.OtherAcresColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBaseAcresNull() {
                return this.IsNull(this.tabletAA_MA_Type2.BaseAcresColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBaseAcresNull() {
                this[this.tabletAA_MA_Type2.BaseAcresColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTaxAmountNull() {
                return this.IsNull(this.tabletAA_MA_Type2.TaxAmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTaxAmountNull() {
                this[this.tabletAA_MA_Type2.TaxAmountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInsertedByNull() {
                return this.IsNull(this.tabletAA_MA_Type2.InsertedByColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInsertedByNull() {
                this[this.tabletAA_MA_Type2.InsertedByColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInsertedDateNull() {
                return this.IsNull(this.tabletAA_MA_Type2.InsertedDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInsertedDateNull() {
                this[this.tabletAA_MA_Type2.InsertedDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUpdatedByNull() {
                return this.IsNull(this.tabletAA_MA_Type2.UpdatedByColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUpdatedByNull() {
                this[this.tabletAA_MA_Type2.UpdatedByColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsDeletedNull() {
                return this.IsNull(this.tabletAA_MA_Type2.IsDeletedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsDeletedNull() {
                this[this.tabletAA_MA_Type2.IsDeletedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsModuleIDNull() {
                return this.IsNull(this.tabletAA_MA_Type2.ModuleIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetModuleIDNull() {
                this[this.tabletAA_MA_Type2.ModuleIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsamountNull() {
                return this.IsNull(this.tabletAA_MA_Type2.amountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetamountNull() {
                this[this.tabletAA_MA_Type2.amountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOverrideAmountNull() {
                return this.IsNull(this.tabletAA_MA_Type2.OverrideAmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOverrideAmountNull() {
                this[this.tabletAA_MA_Type2.OverrideAmountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsExemptNull() {
                return this.IsNull(this.tabletAA_MA_Type2.IsExemptColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsExemptNull() {
                this[this.tabletAA_MA_Type2.IsExemptColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsOverrideNull() {
                return this.IsNull(this.tabletAA_MA_Type2.IsOverrideColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsOverrideNull() {
                this[this.tabletAA_MA_Type2.IsOverrideColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class tAA_MA_Type3Row : global::System.Data.DataRow {
            
            private tAA_MA_Type3DataTable tabletAA_MA_Type3;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal tAA_MA_Type3Row(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tabletAA_MA_Type3 = ((tAA_MA_Type3DataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ParcelID {
                get {
                    try {
                        return ((int)(this[this.tabletAA_MA_Type3.ParcelIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ParcelID\' in table \'tAA_MA_Type3\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MA_Type3.ParcelIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MADistrictID {
                get {
                    try {
                        return ((int)(this[this.tabletAA_MA_Type3.MADistrictIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MADistrictID\' in table \'tAA_MA_Type3\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MA_Type3.MADistrictIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal SiteAcres {
                get {
                    try {
                        return ((decimal)(this[this.tabletAA_MA_Type3.SiteAcresColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SiteAcres\' in table \'tAA_MA_Type3\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MA_Type3.SiteAcresColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal DryAcres {
                get {
                    try {
                        return ((decimal)(this[this.tabletAA_MA_Type3.DryAcresColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DryAcres\' in table \'tAA_MA_Type3\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MA_Type3.DryAcresColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal IrrigatedAcres {
                get {
                    try {
                        return ((decimal)(this[this.tabletAA_MA_Type3.IrrigatedAcresColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IrrigatedAcres\' in table \'tAA_MA_Type3\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MA_Type3.IrrigatedAcresColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TimberAcres {
                get {
                    try {
                        return ((decimal)(this[this.tabletAA_MA_Type3.TimberAcresColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TimberAcres\' in table \'tAA_MA_Type3\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MA_Type3.TimberAcresColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal OtherAcres {
                get {
                    try {
                        return ((decimal)(this[this.tabletAA_MA_Type3.OtherAcresColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OtherAcres\' in table \'tAA_MA_Type3\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MA_Type3.OtherAcresColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal BaseAcres {
                get {
                    try {
                        return ((decimal)(this[this.tabletAA_MA_Type3.BaseAcresColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BaseAcres\' in table \'tAA_MA_Type3\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MA_Type3.BaseAcresColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TaxAmount {
                get {
                    try {
                        return ((decimal)(this[this.tabletAA_MA_Type3.TaxAmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TaxAmount\' in table \'tAA_MA_Type3\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MA_Type3.TaxAmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int InsertedBy {
                get {
                    try {
                        return ((int)(this[this.tabletAA_MA_Type3.InsertedByColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InsertedBy\' in table \'tAA_MA_Type3\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MA_Type3.InsertedByColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime InsertedDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tabletAA_MA_Type3.InsertedDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InsertedDate\' in table \'tAA_MA_Type3\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MA_Type3.InsertedDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int UpdatedBy {
                get {
                    try {
                        return ((int)(this[this.tabletAA_MA_Type3.UpdatedByColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UpdatedBy\' in table \'tAA_MA_Type3\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MA_Type3.UpdatedByColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDeleted {
                get {
                    try {
                        return ((bool)(this[this.tabletAA_MA_Type3.IsDeletedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsDeleted\' in table \'tAA_MA_Type3\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MA_Type3.IsDeletedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short ModuleID {
                get {
                    try {
                        return ((short)(this[this.tabletAA_MA_Type3.ModuleIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ModuleID\' in table \'tAA_MA_Type3\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MA_Type3.ModuleIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string amount {
                get {
                    try {
                        return ((string)(this[this.tabletAA_MA_Type3.amountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'amount\' in table \'tAA_MA_Type3\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MA_Type3.amountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal OverrideAmount {
                get {
                    try {
                        return ((decimal)(this[this.tabletAA_MA_Type3.OverrideAmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OverrideAmount\' in table \'tAA_MA_Type3\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MA_Type3.OverrideAmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsExempt {
                get {
                    try {
                        return ((bool)(this[this.tabletAA_MA_Type3.IsExemptColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsExempt\' in table \'tAA_MA_Type3\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MA_Type3.IsExemptColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOverride {
                get {
                    try {
                        return ((bool)(this[this.tabletAA_MA_Type3.IsOverrideColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsOverride\' in table \'tAA_MA_Type3\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MA_Type3.IsOverrideColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsParcelIDNull() {
                return this.IsNull(this.tabletAA_MA_Type3.ParcelIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetParcelIDNull() {
                this[this.tabletAA_MA_Type3.ParcelIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMADistrictIDNull() {
                return this.IsNull(this.tabletAA_MA_Type3.MADistrictIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMADistrictIDNull() {
                this[this.tabletAA_MA_Type3.MADistrictIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSiteAcresNull() {
                return this.IsNull(this.tabletAA_MA_Type3.SiteAcresColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSiteAcresNull() {
                this[this.tabletAA_MA_Type3.SiteAcresColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDryAcresNull() {
                return this.IsNull(this.tabletAA_MA_Type3.DryAcresColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDryAcresNull() {
                this[this.tabletAA_MA_Type3.DryAcresColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIrrigatedAcresNull() {
                return this.IsNull(this.tabletAA_MA_Type3.IrrigatedAcresColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIrrigatedAcresNull() {
                this[this.tabletAA_MA_Type3.IrrigatedAcresColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTimberAcresNull() {
                return this.IsNull(this.tabletAA_MA_Type3.TimberAcresColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTimberAcresNull() {
                this[this.tabletAA_MA_Type3.TimberAcresColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOtherAcresNull() {
                return this.IsNull(this.tabletAA_MA_Type3.OtherAcresColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOtherAcresNull() {
                this[this.tabletAA_MA_Type3.OtherAcresColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBaseAcresNull() {
                return this.IsNull(this.tabletAA_MA_Type3.BaseAcresColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBaseAcresNull() {
                this[this.tabletAA_MA_Type3.BaseAcresColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTaxAmountNull() {
                return this.IsNull(this.tabletAA_MA_Type3.TaxAmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTaxAmountNull() {
                this[this.tabletAA_MA_Type3.TaxAmountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInsertedByNull() {
                return this.IsNull(this.tabletAA_MA_Type3.InsertedByColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInsertedByNull() {
                this[this.tabletAA_MA_Type3.InsertedByColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInsertedDateNull() {
                return this.IsNull(this.tabletAA_MA_Type3.InsertedDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInsertedDateNull() {
                this[this.tabletAA_MA_Type3.InsertedDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUpdatedByNull() {
                return this.IsNull(this.tabletAA_MA_Type3.UpdatedByColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUpdatedByNull() {
                this[this.tabletAA_MA_Type3.UpdatedByColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsDeletedNull() {
                return this.IsNull(this.tabletAA_MA_Type3.IsDeletedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsDeletedNull() {
                this[this.tabletAA_MA_Type3.IsDeletedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsModuleIDNull() {
                return this.IsNull(this.tabletAA_MA_Type3.ModuleIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetModuleIDNull() {
                this[this.tabletAA_MA_Type3.ModuleIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsamountNull() {
                return this.IsNull(this.tabletAA_MA_Type3.amountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetamountNull() {
                this[this.tabletAA_MA_Type3.amountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOverrideAmountNull() {
                return this.IsNull(this.tabletAA_MA_Type3.OverrideAmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOverrideAmountNull() {
                this[this.tabletAA_MA_Type3.OverrideAmountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsExemptNull() {
                return this.IsNull(this.tabletAA_MA_Type3.IsExemptColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsExemptNull() {
                this[this.tabletAA_MA_Type3.IsExemptColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsOverrideNull() {
                return this.IsNull(this.tabletAA_MA_Type3.IsOverrideColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsOverrideNull() {
                this[this.tabletAA_MA_Type3.IsOverrideColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class tAA_MA_Type4Row : global::System.Data.DataRow {
            
            private tAA_MA_Type4DataTable tabletAA_MA_Type4;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal tAA_MA_Type4Row(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tabletAA_MA_Type4 = ((tAA_MA_Type4DataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ParcelID {
                get {
                    try {
                        return ((int)(this[this.tabletAA_MA_Type4.ParcelIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ParcelID\' in table \'tAA_MA_Type4\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MA_Type4.ParcelIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MADistrictID {
                get {
                    try {
                        return ((int)(this[this.tabletAA_MA_Type4.MADistrictIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MADistrictID\' in table \'tAA_MA_Type4\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MA_Type4.MADistrictIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TaxAmount {
                get {
                    try {
                        return ((decimal)(this[this.tabletAA_MA_Type4.TaxAmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TaxAmount\' in table \'tAA_MA_Type4\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MA_Type4.TaxAmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Amount {
                get {
                    try {
                        return ((decimal)(this[this.tabletAA_MA_Type4.AmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Amount\' in table \'tAA_MA_Type4\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MA_Type4.AmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int InsertedBy {
                get {
                    try {
                        return ((int)(this[this.tabletAA_MA_Type4.InsertedByColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InsertedBy\' in table \'tAA_MA_Type4\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MA_Type4.InsertedByColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime InsertedDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tabletAA_MA_Type4.InsertedDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InsertedDate\' in table \'tAA_MA_Type4\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MA_Type4.InsertedDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int UpdatedBy {
                get {
                    try {
                        return ((int)(this[this.tabletAA_MA_Type4.UpdatedByColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UpdatedBy\' in table \'tAA_MA_Type4\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MA_Type4.UpdatedByColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDeleted {
                get {
                    try {
                        return ((bool)(this[this.tabletAA_MA_Type4.IsDeletedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsDeleted\' in table \'tAA_MA_Type4\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MA_Type4.IsDeletedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short ModuleID {
                get {
                    try {
                        return ((short)(this[this.tabletAA_MA_Type4.ModuleIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ModuleID\' in table \'tAA_MA_Type4\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MA_Type4.ModuleIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal OverrideAmount {
                get {
                    try {
                        return ((decimal)(this[this.tabletAA_MA_Type4.OverrideAmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OverrideAmount\' in table \'tAA_MA_Type4\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MA_Type4.OverrideAmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsExempt {
                get {
                    try {
                        return ((bool)(this[this.tabletAA_MA_Type4.IsExemptColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsExempt\' in table \'tAA_MA_Type4\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MA_Type4.IsExemptColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOverride {
                get {
                    try {
                        return ((bool)(this[this.tabletAA_MA_Type4.IsOverrideColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsOverride\' in table \'tAA_MA_Type4\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MA_Type4.IsOverrideColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsParcelIDNull() {
                return this.IsNull(this.tabletAA_MA_Type4.ParcelIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetParcelIDNull() {
                this[this.tabletAA_MA_Type4.ParcelIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMADistrictIDNull() {
                return this.IsNull(this.tabletAA_MA_Type4.MADistrictIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMADistrictIDNull() {
                this[this.tabletAA_MA_Type4.MADistrictIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTaxAmountNull() {
                return this.IsNull(this.tabletAA_MA_Type4.TaxAmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTaxAmountNull() {
                this[this.tabletAA_MA_Type4.TaxAmountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAmountNull() {
                return this.IsNull(this.tabletAA_MA_Type4.AmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAmountNull() {
                this[this.tabletAA_MA_Type4.AmountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInsertedByNull() {
                return this.IsNull(this.tabletAA_MA_Type4.InsertedByColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInsertedByNull() {
                this[this.tabletAA_MA_Type4.InsertedByColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInsertedDateNull() {
                return this.IsNull(this.tabletAA_MA_Type4.InsertedDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInsertedDateNull() {
                this[this.tabletAA_MA_Type4.InsertedDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUpdatedByNull() {
                return this.IsNull(this.tabletAA_MA_Type4.UpdatedByColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUpdatedByNull() {
                this[this.tabletAA_MA_Type4.UpdatedByColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsDeletedNull() {
                return this.IsNull(this.tabletAA_MA_Type4.IsDeletedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsDeletedNull() {
                this[this.tabletAA_MA_Type4.IsDeletedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsModuleIDNull() {
                return this.IsNull(this.tabletAA_MA_Type4.ModuleIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetModuleIDNull() {
                this[this.tabletAA_MA_Type4.ModuleIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOverrideAmountNull() {
                return this.IsNull(this.tabletAA_MA_Type4.OverrideAmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOverrideAmountNull() {
                this[this.tabletAA_MA_Type4.OverrideAmountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsExemptNull() {
                return this.IsNull(this.tabletAA_MA_Type4.IsExemptColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsExemptNull() {
                this[this.tabletAA_MA_Type4.IsExemptColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsOverrideNull() {
                return this.IsNull(this.tabletAA_MA_Type4.IsOverrideColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsOverrideNull() {
                this[this.tabletAA_MA_Type4.IsOverrideColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class tAA_MA_Type6Row : global::System.Data.DataRow {
            
            private tAA_MA_Type6DataTable tabletAA_MA_Type6;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal tAA_MA_Type6Row(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tabletAA_MA_Type6 = ((tAA_MA_Type6DataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ParcelID {
                get {
                    try {
                        return ((int)(this[this.tabletAA_MA_Type6.ParcelIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ParcelID\' in table \'tAA_MA_Type6\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MA_Type6.ParcelIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MADistrictID {
                get {
                    try {
                        return ((int)(this[this.tabletAA_MA_Type6.MADistrictIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MADistrictID\' in table \'tAA_MA_Type6\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MA_Type6.MADistrictIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal FirePatrolAcres {
                get {
                    try {
                        return ((decimal)(this[this.tabletAA_MA_Type6.FirePatrolAcresColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FirePatrolAcres\' in table \'tAA_MA_Type6\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MA_Type6.FirePatrolAcresColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CountyFee {
                get {
                    try {
                        return ((decimal)(this[this.tabletAA_MA_Type6.CountyFeeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CountyFee\' in table \'tAA_MA_Type6\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MA_Type6.CountyFeeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal FPAFee {
                get {
                    try {
                        return ((decimal)(this[this.tabletAA_MA_Type6.FPAFeeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FPAFee\' in table \'tAA_MA_Type6\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MA_Type6.FPAFeeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal LCFFee {
                get {
                    try {
                        return ((decimal)(this[this.tabletAA_MA_Type6.LCFFeeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LCFFee\' in table \'tAA_MA_Type6\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MA_Type6.LCFFeeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal FPARate {
                get {
                    try {
                        return ((decimal)(this[this.tabletAA_MA_Type6.FPARateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FPARate\' in table \'tAA_MA_Type6\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MA_Type6.FPARateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal LCFRate {
                get {
                    try {
                        return ((decimal)(this[this.tabletAA_MA_Type6.LCFRateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LCFRate\' in table \'tAA_MA_Type6\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MA_Type6.LCFRateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TaxAmount {
                get {
                    try {
                        return ((decimal)(this[this.tabletAA_MA_Type6.TaxAmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TaxAmount\' in table \'tAA_MA_Type6\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MA_Type6.TaxAmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int InsertedBy {
                get {
                    try {
                        return ((int)(this[this.tabletAA_MA_Type6.InsertedByColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InsertedBy\' in table \'tAA_MA_Type6\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MA_Type6.InsertedByColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime InsertedDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tabletAA_MA_Type6.InsertedDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InsertedDate\' in table \'tAA_MA_Type6\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MA_Type6.InsertedDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int UpdatedBy {
                get {
                    try {
                        return ((int)(this[this.tabletAA_MA_Type6.UpdatedByColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UpdatedBy\' in table \'tAA_MA_Type6\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MA_Type6.UpdatedByColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDeleted {
                get {
                    try {
                        return ((bool)(this[this.tabletAA_MA_Type6.IsDeletedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsDeleted\' in table \'tAA_MA_Type6\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MA_Type6.IsDeletedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short ModuleID {
                get {
                    try {
                        return ((short)(this[this.tabletAA_MA_Type6.ModuleIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ModuleID\' in table \'tAA_MA_Type6\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MA_Type6.ModuleIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string amount {
                get {
                    try {
                        return ((string)(this[this.tabletAA_MA_Type6.amountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'amount\' in table \'tAA_MA_Type6\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MA_Type6.amountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal OverrideAmount {
                get {
                    try {
                        return ((decimal)(this[this.tabletAA_MA_Type6.OverrideAmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OverrideAmount\' in table \'tAA_MA_Type6\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MA_Type6.OverrideAmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsExempt {
                get {
                    try {
                        return ((bool)(this[this.tabletAA_MA_Type6.IsExemptColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsExempt\' in table \'tAA_MA_Type6\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MA_Type6.IsExemptColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOverride {
                get {
                    try {
                        return ((bool)(this[this.tabletAA_MA_Type6.IsOverrideColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsOverride\' in table \'tAA_MA_Type6\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MA_Type6.IsOverrideColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsParcelIDNull() {
                return this.IsNull(this.tabletAA_MA_Type6.ParcelIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetParcelIDNull() {
                this[this.tabletAA_MA_Type6.ParcelIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMADistrictIDNull() {
                return this.IsNull(this.tabletAA_MA_Type6.MADistrictIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMADistrictIDNull() {
                this[this.tabletAA_MA_Type6.MADistrictIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFirePatrolAcresNull() {
                return this.IsNull(this.tabletAA_MA_Type6.FirePatrolAcresColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFirePatrolAcresNull() {
                this[this.tabletAA_MA_Type6.FirePatrolAcresColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCountyFeeNull() {
                return this.IsNull(this.tabletAA_MA_Type6.CountyFeeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCountyFeeNull() {
                this[this.tabletAA_MA_Type6.CountyFeeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFPAFeeNull() {
                return this.IsNull(this.tabletAA_MA_Type6.FPAFeeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFPAFeeNull() {
                this[this.tabletAA_MA_Type6.FPAFeeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLCFFeeNull() {
                return this.IsNull(this.tabletAA_MA_Type6.LCFFeeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLCFFeeNull() {
                this[this.tabletAA_MA_Type6.LCFFeeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFPARateNull() {
                return this.IsNull(this.tabletAA_MA_Type6.FPARateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFPARateNull() {
                this[this.tabletAA_MA_Type6.FPARateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLCFRateNull() {
                return this.IsNull(this.tabletAA_MA_Type6.LCFRateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLCFRateNull() {
                this[this.tabletAA_MA_Type6.LCFRateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTaxAmountNull() {
                return this.IsNull(this.tabletAA_MA_Type6.TaxAmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTaxAmountNull() {
                this[this.tabletAA_MA_Type6.TaxAmountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInsertedByNull() {
                return this.IsNull(this.tabletAA_MA_Type6.InsertedByColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInsertedByNull() {
                this[this.tabletAA_MA_Type6.InsertedByColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInsertedDateNull() {
                return this.IsNull(this.tabletAA_MA_Type6.InsertedDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInsertedDateNull() {
                this[this.tabletAA_MA_Type6.InsertedDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUpdatedByNull() {
                return this.IsNull(this.tabletAA_MA_Type6.UpdatedByColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUpdatedByNull() {
                this[this.tabletAA_MA_Type6.UpdatedByColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsDeletedNull() {
                return this.IsNull(this.tabletAA_MA_Type6.IsDeletedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsDeletedNull() {
                this[this.tabletAA_MA_Type6.IsDeletedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsModuleIDNull() {
                return this.IsNull(this.tabletAA_MA_Type6.ModuleIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetModuleIDNull() {
                this[this.tabletAA_MA_Type6.ModuleIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsamountNull() {
                return this.IsNull(this.tabletAA_MA_Type6.amountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetamountNull() {
                this[this.tabletAA_MA_Type6.amountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOverrideAmountNull() {
                return this.IsNull(this.tabletAA_MA_Type6.OverrideAmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOverrideAmountNull() {
                this[this.tabletAA_MA_Type6.OverrideAmountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsExemptNull() {
                return this.IsNull(this.tabletAA_MA_Type6.IsExemptColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsExemptNull() {
                this[this.tabletAA_MA_Type6.IsExemptColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsOverrideNull() {
                return this.IsNull(this.tabletAA_MA_Type6.IsOverrideColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsOverrideNull() {
                this[this.tabletAA_MA_Type6.IsOverrideColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class tAA_MA_Type7Row : global::System.Data.DataRow {
            
            private tAA_MA_Type7DataTable tabletAA_MA_Type7;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal tAA_MA_Type7Row(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tabletAA_MA_Type7 = ((tAA_MA_Type7DataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ParcelID {
                get {
                    try {
                        return ((int)(this[this.tabletAA_MA_Type7.ParcelIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ParcelID\' in table \'tAA_MA_Type7\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MA_Type7.ParcelIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MADistrictID {
                get {
                    try {
                        return ((int)(this[this.tabletAA_MA_Type7.MADistrictIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MADistrictID\' in table \'tAA_MA_Type7\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MA_Type7.MADistrictIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal BenefitCharge {
                get {
                    try {
                        return ((decimal)(this[this.tabletAA_MA_Type7.BenefitChargeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BenefitCharge\' in table \'tAA_MA_Type7\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MA_Type7.BenefitChargeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal AssessedValue {
                get {
                    try {
                        return ((decimal)(this[this.tabletAA_MA_Type7.AssessedValueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AssessedValue\' in table \'tAA_MA_Type7\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MA_Type7.AssessedValueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal ResidentialRate {
                get {
                    try {
                        return ((decimal)(this[this.tabletAA_MA_Type7.ResidentialRateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ResidentialRate\' in table \'tAA_MA_Type7\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MA_Type7.ResidentialRateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CommercialRate {
                get {
                    try {
                        return ((decimal)(this[this.tabletAA_MA_Type7.CommercialRateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CommercialRate\' in table \'tAA_MA_Type7\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MA_Type7.CommercialRateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TaxAmount {
                get {
                    try {
                        return ((decimal)(this[this.tabletAA_MA_Type7.TaxAmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TaxAmount\' in table \'tAA_MA_Type7\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MA_Type7.TaxAmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int InsertedBy {
                get {
                    try {
                        return ((int)(this[this.tabletAA_MA_Type7.InsertedByColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InsertedBy\' in table \'tAA_MA_Type7\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MA_Type7.InsertedByColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime InsertedDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tabletAA_MA_Type7.InsertedDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InsertedDate\' in table \'tAA_MA_Type7\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MA_Type7.InsertedDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int UpdatedBy {
                get {
                    try {
                        return ((int)(this[this.tabletAA_MA_Type7.UpdatedByColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UpdatedBy\' in table \'tAA_MA_Type7\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MA_Type7.UpdatedByColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDeleted {
                get {
                    try {
                        return ((bool)(this[this.tabletAA_MA_Type7.IsDeletedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsDeleted\' in table \'tAA_MA_Type7\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MA_Type7.IsDeletedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short ModuleID {
                get {
                    try {
                        return ((short)(this[this.tabletAA_MA_Type7.ModuleIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ModuleID\' in table \'tAA_MA_Type7\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MA_Type7.ModuleIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string amount {
                get {
                    try {
                        return ((string)(this[this.tabletAA_MA_Type7.amountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'amount\' in table \'tAA_MA_Type7\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MA_Type7.amountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal OverrideAmount {
                get {
                    try {
                        return ((decimal)(this[this.tabletAA_MA_Type7.OverrideAmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OverrideAmount\' in table \'tAA_MA_Type7\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MA_Type7.OverrideAmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsExempt {
                get {
                    try {
                        return ((bool)(this[this.tabletAA_MA_Type7.IsExemptColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsExempt\' in table \'tAA_MA_Type7\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MA_Type7.IsExemptColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOverride {
                get {
                    try {
                        return ((bool)(this[this.tabletAA_MA_Type7.IsOverrideColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsOverride\' in table \'tAA_MA_Type7\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MA_Type7.IsOverrideColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsParcelIDNull() {
                return this.IsNull(this.tabletAA_MA_Type7.ParcelIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetParcelIDNull() {
                this[this.tabletAA_MA_Type7.ParcelIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMADistrictIDNull() {
                return this.IsNull(this.tabletAA_MA_Type7.MADistrictIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMADistrictIDNull() {
                this[this.tabletAA_MA_Type7.MADistrictIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBenefitChargeNull() {
                return this.IsNull(this.tabletAA_MA_Type7.BenefitChargeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBenefitChargeNull() {
                this[this.tabletAA_MA_Type7.BenefitChargeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAssessedValueNull() {
                return this.IsNull(this.tabletAA_MA_Type7.AssessedValueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAssessedValueNull() {
                this[this.tabletAA_MA_Type7.AssessedValueColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsResidentialRateNull() {
                return this.IsNull(this.tabletAA_MA_Type7.ResidentialRateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetResidentialRateNull() {
                this[this.tabletAA_MA_Type7.ResidentialRateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCommercialRateNull() {
                return this.IsNull(this.tabletAA_MA_Type7.CommercialRateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCommercialRateNull() {
                this[this.tabletAA_MA_Type7.CommercialRateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTaxAmountNull() {
                return this.IsNull(this.tabletAA_MA_Type7.TaxAmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTaxAmountNull() {
                this[this.tabletAA_MA_Type7.TaxAmountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInsertedByNull() {
                return this.IsNull(this.tabletAA_MA_Type7.InsertedByColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInsertedByNull() {
                this[this.tabletAA_MA_Type7.InsertedByColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInsertedDateNull() {
                return this.IsNull(this.tabletAA_MA_Type7.InsertedDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInsertedDateNull() {
                this[this.tabletAA_MA_Type7.InsertedDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUpdatedByNull() {
                return this.IsNull(this.tabletAA_MA_Type7.UpdatedByColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUpdatedByNull() {
                this[this.tabletAA_MA_Type7.UpdatedByColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsDeletedNull() {
                return this.IsNull(this.tabletAA_MA_Type7.IsDeletedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsDeletedNull() {
                this[this.tabletAA_MA_Type7.IsDeletedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsModuleIDNull() {
                return this.IsNull(this.tabletAA_MA_Type7.ModuleIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetModuleIDNull() {
                this[this.tabletAA_MA_Type7.ModuleIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsamountNull() {
                return this.IsNull(this.tabletAA_MA_Type7.amountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetamountNull() {
                this[this.tabletAA_MA_Type7.amountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOverrideAmountNull() {
                return this.IsNull(this.tabletAA_MA_Type7.OverrideAmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOverrideAmountNull() {
                this[this.tabletAA_MA_Type7.OverrideAmountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsExemptNull() {
                return this.IsNull(this.tabletAA_MA_Type7.IsExemptColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsExemptNull() {
                this[this.tabletAA_MA_Type7.IsExemptColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsOverrideNull() {
                return this.IsNull(this.tabletAA_MA_Type7.IsOverrideColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsOverrideNull() {
                this[this.tabletAA_MA_Type7.IsOverrideColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class tAA_MA_Type8Row : global::System.Data.DataRow {
            
            private tAA_MA_Type8DataTable tabletAA_MA_Type8;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal tAA_MA_Type8Row(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tabletAA_MA_Type8 = ((tAA_MA_Type8DataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ParcelID {
                get {
                    try {
                        return ((int)(this[this.tabletAA_MA_Type8.ParcelIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ParcelID\' in table \'tAA_MA_Type8\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MA_Type8.ParcelIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MADistrictID {
                get {
                    try {
                        return ((int)(this[this.tabletAA_MA_Type8.MADistrictIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MADistrictID\' in table \'tAA_MA_Type8\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MA_Type8.MADistrictIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal BaseFee {
                get {
                    try {
                        return ((decimal)(this[this.tabletAA_MA_Type8.BaseFeeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BaseFee\' in table \'tAA_MA_Type8\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MA_Type8.BaseFeeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TaxAmount {
                get {
                    try {
                        return ((decimal)(this[this.tabletAA_MA_Type8.TaxAmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TaxAmount\' in table \'tAA_MA_Type8\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MA_Type8.TaxAmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int InsertedBy {
                get {
                    try {
                        return ((int)(this[this.tabletAA_MA_Type8.InsertedByColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InsertedBy\' in table \'tAA_MA_Type8\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MA_Type8.InsertedByColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime InsertedDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tabletAA_MA_Type8.InsertedDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InsertedDate\' in table \'tAA_MA_Type8\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MA_Type8.InsertedDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int UpdatedBy {
                get {
                    try {
                        return ((int)(this[this.tabletAA_MA_Type8.UpdatedByColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UpdatedBy\' in table \'tAA_MA_Type8\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MA_Type8.UpdatedByColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDeleted {
                get {
                    try {
                        return ((bool)(this[this.tabletAA_MA_Type8.IsDeletedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsDeleted\' in table \'tAA_MA_Type8\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MA_Type8.IsDeletedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short ModuleID {
                get {
                    try {
                        return ((short)(this[this.tabletAA_MA_Type8.ModuleIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ModuleID\' in table \'tAA_MA_Type8\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MA_Type8.ModuleIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string amount {
                get {
                    try {
                        return ((string)(this[this.tabletAA_MA_Type8.amountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'amount\' in table \'tAA_MA_Type8\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MA_Type8.amountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal OverrideAmount {
                get {
                    try {
                        return ((decimal)(this[this.tabletAA_MA_Type8.OverrideAmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OverrideAmount\' in table \'tAA_MA_Type8\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MA_Type8.OverrideAmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsExempt {
                get {
                    try {
                        return ((bool)(this[this.tabletAA_MA_Type8.IsExemptColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsExempt\' in table \'tAA_MA_Type8\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MA_Type8.IsExemptColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOverride {
                get {
                    try {
                        return ((bool)(this[this.tabletAA_MA_Type8.IsOverrideColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsOverride\' in table \'tAA_MA_Type8\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MA_Type8.IsOverrideColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsParcelIDNull() {
                return this.IsNull(this.tabletAA_MA_Type8.ParcelIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetParcelIDNull() {
                this[this.tabletAA_MA_Type8.ParcelIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMADistrictIDNull() {
                return this.IsNull(this.tabletAA_MA_Type8.MADistrictIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMADistrictIDNull() {
                this[this.tabletAA_MA_Type8.MADistrictIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBaseFeeNull() {
                return this.IsNull(this.tabletAA_MA_Type8.BaseFeeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBaseFeeNull() {
                this[this.tabletAA_MA_Type8.BaseFeeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTaxAmountNull() {
                return this.IsNull(this.tabletAA_MA_Type8.TaxAmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTaxAmountNull() {
                this[this.tabletAA_MA_Type8.TaxAmountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInsertedByNull() {
                return this.IsNull(this.tabletAA_MA_Type8.InsertedByColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInsertedByNull() {
                this[this.tabletAA_MA_Type8.InsertedByColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInsertedDateNull() {
                return this.IsNull(this.tabletAA_MA_Type8.InsertedDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInsertedDateNull() {
                this[this.tabletAA_MA_Type8.InsertedDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUpdatedByNull() {
                return this.IsNull(this.tabletAA_MA_Type8.UpdatedByColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUpdatedByNull() {
                this[this.tabletAA_MA_Type8.UpdatedByColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsDeletedNull() {
                return this.IsNull(this.tabletAA_MA_Type8.IsDeletedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsDeletedNull() {
                this[this.tabletAA_MA_Type8.IsDeletedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsModuleIDNull() {
                return this.IsNull(this.tabletAA_MA_Type8.ModuleIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetModuleIDNull() {
                this[this.tabletAA_MA_Type8.ModuleIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsamountNull() {
                return this.IsNull(this.tabletAA_MA_Type8.amountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetamountNull() {
                this[this.tabletAA_MA_Type8.amountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOverrideAmountNull() {
                return this.IsNull(this.tabletAA_MA_Type8.OverrideAmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOverrideAmountNull() {
                this[this.tabletAA_MA_Type8.OverrideAmountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsExemptNull() {
                return this.IsNull(this.tabletAA_MA_Type8.IsExemptColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsExemptNull() {
                this[this.tabletAA_MA_Type8.IsExemptColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsOverrideNull() {
                return this.IsNull(this.tabletAA_MA_Type8.IsOverrideColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsOverrideNull() {
                this[this.tabletAA_MA_Type8.IsOverrideColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class tAA_MA_Type9Row : global::System.Data.DataRow {
            
            private tAA_MA_Type9DataTable tabletAA_MA_Type9;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal tAA_MA_Type9Row(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tabletAA_MA_Type9 = ((tAA_MA_Type9DataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ParcelID {
                get {
                    try {
                        return ((int)(this[this.tabletAA_MA_Type9.ParcelIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ParcelID\' in table \'tAA_MA_Type9\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MA_Type9.ParcelIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MADistrictID {
                get {
                    try {
                        return ((int)(this[this.tabletAA_MA_Type9.MADistrictIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MADistrictID\' in table \'tAA_MA_Type9\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MA_Type9.MADistrictIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal AssessedValue {
                get {
                    try {
                        return ((decimal)(this[this.tabletAA_MA_Type9.AssessedValueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AssessedValue\' in table \'tAA_MA_Type9\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MA_Type9.AssessedValueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal rate {
                get {
                    try {
                        return ((decimal)(this[this.tabletAA_MA_Type9.rateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'rate\' in table \'tAA_MA_Type9\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MA_Type9.rateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TaxAmount {
                get {
                    try {
                        return ((decimal)(this[this.tabletAA_MA_Type9.TaxAmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TaxAmount\' in table \'tAA_MA_Type9\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MA_Type9.TaxAmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int InsertedBy {
                get {
                    try {
                        return ((int)(this[this.tabletAA_MA_Type9.InsertedByColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InsertedBy\' in table \'tAA_MA_Type9\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MA_Type9.InsertedByColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime InsertedDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tabletAA_MA_Type9.InsertedDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InsertedDate\' in table \'tAA_MA_Type9\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MA_Type9.InsertedDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int UpdatedBy {
                get {
                    try {
                        return ((int)(this[this.tabletAA_MA_Type9.UpdatedByColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UpdatedBy\' in table \'tAA_MA_Type9\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MA_Type9.UpdatedByColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDeleted {
                get {
                    try {
                        return ((bool)(this[this.tabletAA_MA_Type9.IsDeletedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsDeleted\' in table \'tAA_MA_Type9\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MA_Type9.IsDeletedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short ModuleID {
                get {
                    try {
                        return ((short)(this[this.tabletAA_MA_Type9.ModuleIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ModuleID\' in table \'tAA_MA_Type9\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MA_Type9.ModuleIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string amount {
                get {
                    try {
                        return ((string)(this[this.tabletAA_MA_Type9.amountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'amount\' in table \'tAA_MA_Type9\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MA_Type9.amountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal OverrideAmount {
                get {
                    try {
                        return ((decimal)(this[this.tabletAA_MA_Type9.OverrideAmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OverrideAmount\' in table \'tAA_MA_Type9\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MA_Type9.OverrideAmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsExempt {
                get {
                    try {
                        return ((bool)(this[this.tabletAA_MA_Type9.IsExemptColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsExempt\' in table \'tAA_MA_Type9\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MA_Type9.IsExemptColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOverride {
                get {
                    try {
                        return ((bool)(this[this.tabletAA_MA_Type9.IsOverrideColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsOverride\' in table \'tAA_MA_Type9\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MA_Type9.IsOverrideColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal units {
                get {
                    try {
                        return ((decimal)(this[this.tabletAA_MA_Type9.unitsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'units\' in table \'tAA_MA_Type9\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MA_Type9.unitsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsParcelIDNull() {
                return this.IsNull(this.tabletAA_MA_Type9.ParcelIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetParcelIDNull() {
                this[this.tabletAA_MA_Type9.ParcelIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMADistrictIDNull() {
                return this.IsNull(this.tabletAA_MA_Type9.MADistrictIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMADistrictIDNull() {
                this[this.tabletAA_MA_Type9.MADistrictIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAssessedValueNull() {
                return this.IsNull(this.tabletAA_MA_Type9.AssessedValueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAssessedValueNull() {
                this[this.tabletAA_MA_Type9.AssessedValueColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsrateNull() {
                return this.IsNull(this.tabletAA_MA_Type9.rateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetrateNull() {
                this[this.tabletAA_MA_Type9.rateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTaxAmountNull() {
                return this.IsNull(this.tabletAA_MA_Type9.TaxAmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTaxAmountNull() {
                this[this.tabletAA_MA_Type9.TaxAmountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInsertedByNull() {
                return this.IsNull(this.tabletAA_MA_Type9.InsertedByColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInsertedByNull() {
                this[this.tabletAA_MA_Type9.InsertedByColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInsertedDateNull() {
                return this.IsNull(this.tabletAA_MA_Type9.InsertedDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInsertedDateNull() {
                this[this.tabletAA_MA_Type9.InsertedDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUpdatedByNull() {
                return this.IsNull(this.tabletAA_MA_Type9.UpdatedByColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUpdatedByNull() {
                this[this.tabletAA_MA_Type9.UpdatedByColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsDeletedNull() {
                return this.IsNull(this.tabletAA_MA_Type9.IsDeletedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsDeletedNull() {
                this[this.tabletAA_MA_Type9.IsDeletedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsModuleIDNull() {
                return this.IsNull(this.tabletAA_MA_Type9.ModuleIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetModuleIDNull() {
                this[this.tabletAA_MA_Type9.ModuleIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsamountNull() {
                return this.IsNull(this.tabletAA_MA_Type9.amountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetamountNull() {
                this[this.tabletAA_MA_Type9.amountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOverrideAmountNull() {
                return this.IsNull(this.tabletAA_MA_Type9.OverrideAmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOverrideAmountNull() {
                this[this.tabletAA_MA_Type9.OverrideAmountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsExemptNull() {
                return this.IsNull(this.tabletAA_MA_Type9.IsExemptColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsExemptNull() {
                this[this.tabletAA_MA_Type9.IsExemptColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsOverrideNull() {
                return this.IsNull(this.tabletAA_MA_Type9.IsOverrideColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsOverrideNull() {
                this[this.tabletAA_MA_Type9.IsOverrideColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsunitsNull() {
                return this.IsNull(this.tabletAA_MA_Type9.unitsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetunitsNull() {
                this[this.tabletAA_MA_Type9.unitsColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class tAA_MAD_Type1Row : global::System.Data.DataRow {
            
            private tAA_MAD_Type1DataTable tabletAA_MAD_Type1;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal tAA_MAD_Type1Row(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tabletAA_MAD_Type1 = ((tAA_MAD_Type1DataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MADistrictID {
                get {
                    try {
                        return ((int)(this[this.tabletAA_MAD_Type1.MADistrictIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MADistrictID\' in table \'tAA_MAD_Type1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MAD_Type1.MADistrictIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short RollYear {
                get {
                    try {
                        return ((short)(this[this.tabletAA_MAD_Type1.RollYearColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RollYear\' in table \'tAA_MAD_Type1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MAD_Type1.RollYearColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DistrictNumber {
                get {
                    try {
                        return ((string)(this[this.tabletAA_MAD_Type1.DistrictNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DistrictNumber\' in table \'tAA_MAD_Type1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MAD_Type1.DistrictNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Description {
                get {
                    try {
                        return ((string)(this[this.tabletAA_MAD_Type1.DescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Description\' in table \'tAA_MAD_Type1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MAD_Type1.DescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal MinimumCharge {
                get {
                    try {
                        return ((decimal)(this[this.tabletAA_MAD_Type1.MinimumChargeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MinimumCharge\' in table \'tAA_MAD_Type1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MAD_Type1.MinimumChargeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MaximumAcres {
                get {
                    try {
                        return ((int)(this[this.tabletAA_MAD_Type1.MaximumAcresColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MaximumAcres\' in table \'tAA_MAD_Type1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MAD_Type1.MaximumAcresColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal BaseFee {
                get {
                    try {
                        return ((decimal)(this[this.tabletAA_MAD_Type1.BaseFeeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BaseFee\' in table \'tAA_MAD_Type1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MAD_Type1.BaseFeeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal LevyRate {
                get {
                    try {
                        return ((decimal)(this[this.tabletAA_MAD_Type1.LevyRateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LevyRate\' in table \'tAA_MAD_Type1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MAD_Type1.LevyRateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal SiteBase {
                get {
                    try {
                        return ((decimal)(this[this.tabletAA_MAD_Type1.SiteBaseColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SiteBase\' in table \'tAA_MAD_Type1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MAD_Type1.SiteBaseColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal SiteRate {
                get {
                    try {
                        return ((decimal)(this[this.tabletAA_MAD_Type1.SiteRateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SiteRate\' in table \'tAA_MAD_Type1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MAD_Type1.SiteRateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal DryBase {
                get {
                    try {
                        return ((decimal)(this[this.tabletAA_MAD_Type1.DryBaseColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DryBase\' in table \'tAA_MAD_Type1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MAD_Type1.DryBaseColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal DryRate {
                get {
                    try {
                        return ((decimal)(this[this.tabletAA_MAD_Type1.DryRateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DryRate\' in table \'tAA_MAD_Type1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MAD_Type1.DryRateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal IrrigatedBase {
                get {
                    try {
                        return ((decimal)(this[this.tabletAA_MAD_Type1.IrrigatedBaseColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IrrigatedBase\' in table \'tAA_MAD_Type1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MAD_Type1.IrrigatedBaseColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal IrrigatedRate {
                get {
                    try {
                        return ((decimal)(this[this.tabletAA_MAD_Type1.IrrigatedRateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IrrigatedRate\' in table \'tAA_MAD_Type1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MAD_Type1.IrrigatedRateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TimberBase {
                get {
                    try {
                        return ((decimal)(this[this.tabletAA_MAD_Type1.TimberBaseColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TimberBase\' in table \'tAA_MAD_Type1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MAD_Type1.TimberBaseColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TimberRate {
                get {
                    try {
                        return ((decimal)(this[this.tabletAA_MAD_Type1.TimberRateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TimberRate\' in table \'tAA_MAD_Type1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MAD_Type1.TimberRateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal OtherBase {
                get {
                    try {
                        return ((decimal)(this[this.tabletAA_MAD_Type1.OtherBaseColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OtherBase\' in table \'tAA_MAD_Type1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MAD_Type1.OtherBaseColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal OtherRate {
                get {
                    try {
                        return ((decimal)(this[this.tabletAA_MAD_Type1.OtherRateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OtherRate\' in table \'tAA_MAD_Type1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MAD_Type1.OtherRateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int InsertedBy {
                get {
                    try {
                        return ((int)(this[this.tabletAA_MAD_Type1.InsertedByColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InsertedBy\' in table \'tAA_MAD_Type1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MAD_Type1.InsertedByColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime InsertedDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tabletAA_MAD_Type1.InsertedDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InsertedDate\' in table \'tAA_MAD_Type1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MAD_Type1.InsertedDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int UpdatedBy {
                get {
                    try {
                        return ((int)(this[this.tabletAA_MAD_Type1.UpdatedByColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UpdatedBy\' in table \'tAA_MAD_Type1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MAD_Type1.UpdatedByColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDeleted {
                get {
                    try {
                        return ((bool)(this[this.tabletAA_MAD_Type1.IsDeletedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsDeleted\' in table \'tAA_MAD_Type1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MAD_Type1.IsDeletedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short ModuleID {
                get {
                    try {
                        return ((short)(this[this.tabletAA_MAD_Type1.ModuleIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ModuleID\' in table \'tAA_MAD_Type1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MAD_Type1.ModuleIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMADistrictIDNull() {
                return this.IsNull(this.tabletAA_MAD_Type1.MADistrictIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMADistrictIDNull() {
                this[this.tabletAA_MAD_Type1.MADistrictIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRollYearNull() {
                return this.IsNull(this.tabletAA_MAD_Type1.RollYearColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRollYearNull() {
                this[this.tabletAA_MAD_Type1.RollYearColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDistrictNumberNull() {
                return this.IsNull(this.tabletAA_MAD_Type1.DistrictNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDistrictNumberNull() {
                this[this.tabletAA_MAD_Type1.DistrictNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDescriptionNull() {
                return this.IsNull(this.tabletAA_MAD_Type1.DescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDescriptionNull() {
                this[this.tabletAA_MAD_Type1.DescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMinimumChargeNull() {
                return this.IsNull(this.tabletAA_MAD_Type1.MinimumChargeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMinimumChargeNull() {
                this[this.tabletAA_MAD_Type1.MinimumChargeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMaximumAcresNull() {
                return this.IsNull(this.tabletAA_MAD_Type1.MaximumAcresColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMaximumAcresNull() {
                this[this.tabletAA_MAD_Type1.MaximumAcresColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBaseFeeNull() {
                return this.IsNull(this.tabletAA_MAD_Type1.BaseFeeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBaseFeeNull() {
                this[this.tabletAA_MAD_Type1.BaseFeeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLevyRateNull() {
                return this.IsNull(this.tabletAA_MAD_Type1.LevyRateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLevyRateNull() {
                this[this.tabletAA_MAD_Type1.LevyRateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSiteBaseNull() {
                return this.IsNull(this.tabletAA_MAD_Type1.SiteBaseColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSiteBaseNull() {
                this[this.tabletAA_MAD_Type1.SiteBaseColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSiteRateNull() {
                return this.IsNull(this.tabletAA_MAD_Type1.SiteRateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSiteRateNull() {
                this[this.tabletAA_MAD_Type1.SiteRateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDryBaseNull() {
                return this.IsNull(this.tabletAA_MAD_Type1.DryBaseColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDryBaseNull() {
                this[this.tabletAA_MAD_Type1.DryBaseColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDryRateNull() {
                return this.IsNull(this.tabletAA_MAD_Type1.DryRateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDryRateNull() {
                this[this.tabletAA_MAD_Type1.DryRateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIrrigatedBaseNull() {
                return this.IsNull(this.tabletAA_MAD_Type1.IrrigatedBaseColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIrrigatedBaseNull() {
                this[this.tabletAA_MAD_Type1.IrrigatedBaseColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIrrigatedRateNull() {
                return this.IsNull(this.tabletAA_MAD_Type1.IrrigatedRateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIrrigatedRateNull() {
                this[this.tabletAA_MAD_Type1.IrrigatedRateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTimberBaseNull() {
                return this.IsNull(this.tabletAA_MAD_Type1.TimberBaseColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTimberBaseNull() {
                this[this.tabletAA_MAD_Type1.TimberBaseColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTimberRateNull() {
                return this.IsNull(this.tabletAA_MAD_Type1.TimberRateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTimberRateNull() {
                this[this.tabletAA_MAD_Type1.TimberRateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOtherBaseNull() {
                return this.IsNull(this.tabletAA_MAD_Type1.OtherBaseColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOtherBaseNull() {
                this[this.tabletAA_MAD_Type1.OtherBaseColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOtherRateNull() {
                return this.IsNull(this.tabletAA_MAD_Type1.OtherRateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOtherRateNull() {
                this[this.tabletAA_MAD_Type1.OtherRateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInsertedByNull() {
                return this.IsNull(this.tabletAA_MAD_Type1.InsertedByColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInsertedByNull() {
                this[this.tabletAA_MAD_Type1.InsertedByColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInsertedDateNull() {
                return this.IsNull(this.tabletAA_MAD_Type1.InsertedDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInsertedDateNull() {
                this[this.tabletAA_MAD_Type1.InsertedDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUpdatedByNull() {
                return this.IsNull(this.tabletAA_MAD_Type1.UpdatedByColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUpdatedByNull() {
                this[this.tabletAA_MAD_Type1.UpdatedByColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsDeletedNull() {
                return this.IsNull(this.tabletAA_MAD_Type1.IsDeletedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsDeletedNull() {
                this[this.tabletAA_MAD_Type1.IsDeletedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsModuleIDNull() {
                return this.IsNull(this.tabletAA_MAD_Type1.ModuleIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetModuleIDNull() {
                this[this.tabletAA_MAD_Type1.ModuleIDColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class tAA_MAD_Type10Row : global::System.Data.DataRow {
            
            private tAA_MAD_Type10DataTable tabletAA_MAD_Type10;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal tAA_MAD_Type10Row(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tabletAA_MAD_Type10 = ((tAA_MAD_Type10DataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MADistrictID {
                get {
                    try {
                        return ((int)(this[this.tabletAA_MAD_Type10.MADistrictIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MADistrictID\' in table \'tAA_MAD_Type10\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MAD_Type10.MADistrictIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short RollYear {
                get {
                    try {
                        return ((short)(this[this.tabletAA_MAD_Type10.RollYearColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RollYear\' in table \'tAA_MAD_Type10\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MAD_Type10.RollYearColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DistrictNumber {
                get {
                    try {
                        return ((string)(this[this.tabletAA_MAD_Type10.DistrictNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DistrictNumber\' in table \'tAA_MAD_Type10\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MAD_Type10.DistrictNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Description {
                get {
                    try {
                        return ((string)(this[this.tabletAA_MAD_Type10.DescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Description\' in table \'tAA_MAD_Type10\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MAD_Type10.DescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Rate {
                get {
                    try {
                        return ((decimal)(this[this.tabletAA_MAD_Type10.RateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Rate\' in table \'tAA_MAD_Type10\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MAD_Type10.RateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Base {
                get {
                    try {
                        return ((decimal)(this[this.tabletAA_MAD_Type10.BaseColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Base\' in table \'tAA_MAD_Type10\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MAD_Type10.BaseColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Minimum {
                get {
                    try {
                        return ((decimal)(this[this.tabletAA_MAD_Type10.MinimumColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Minimum\' in table \'tAA_MAD_Type10\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MAD_Type10.MinimumColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Maximum {
                get {
                    try {
                        return ((decimal)(this[this.tabletAA_MAD_Type10.MaximumColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Maximum\' in table \'tAA_MAD_Type10\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MAD_Type10.MaximumColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int InsertedBy {
                get {
                    try {
                        return ((int)(this[this.tabletAA_MAD_Type10.InsertedByColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InsertedBy\' in table \'tAA_MAD_Type10\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MAD_Type10.InsertedByColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime InsertedDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tabletAA_MAD_Type10.InsertedDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InsertedDate\' in table \'tAA_MAD_Type10\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MAD_Type10.InsertedDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int UpdatedBy {
                get {
                    try {
                        return ((int)(this[this.tabletAA_MAD_Type10.UpdatedByColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UpdatedBy\' in table \'tAA_MAD_Type10\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MAD_Type10.UpdatedByColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDeleted {
                get {
                    try {
                        return ((bool)(this[this.tabletAA_MAD_Type10.IsDeletedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsDeleted\' in table \'tAA_MAD_Type10\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MAD_Type10.IsDeletedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short ModuleID {
                get {
                    try {
                        return ((short)(this[this.tabletAA_MAD_Type10.ModuleIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ModuleID\' in table \'tAA_MAD_Type10\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MAD_Type10.ModuleIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMADistrictIDNull() {
                return this.IsNull(this.tabletAA_MAD_Type10.MADistrictIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMADistrictIDNull() {
                this[this.tabletAA_MAD_Type10.MADistrictIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRollYearNull() {
                return this.IsNull(this.tabletAA_MAD_Type10.RollYearColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRollYearNull() {
                this[this.tabletAA_MAD_Type10.RollYearColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDistrictNumberNull() {
                return this.IsNull(this.tabletAA_MAD_Type10.DistrictNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDistrictNumberNull() {
                this[this.tabletAA_MAD_Type10.DistrictNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDescriptionNull() {
                return this.IsNull(this.tabletAA_MAD_Type10.DescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDescriptionNull() {
                this[this.tabletAA_MAD_Type10.DescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRateNull() {
                return this.IsNull(this.tabletAA_MAD_Type10.RateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRateNull() {
                this[this.tabletAA_MAD_Type10.RateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBaseNull() {
                return this.IsNull(this.tabletAA_MAD_Type10.BaseColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBaseNull() {
                this[this.tabletAA_MAD_Type10.BaseColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMinimumNull() {
                return this.IsNull(this.tabletAA_MAD_Type10.MinimumColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMinimumNull() {
                this[this.tabletAA_MAD_Type10.MinimumColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMaximumNull() {
                return this.IsNull(this.tabletAA_MAD_Type10.MaximumColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMaximumNull() {
                this[this.tabletAA_MAD_Type10.MaximumColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInsertedByNull() {
                return this.IsNull(this.tabletAA_MAD_Type10.InsertedByColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInsertedByNull() {
                this[this.tabletAA_MAD_Type10.InsertedByColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInsertedDateNull() {
                return this.IsNull(this.tabletAA_MAD_Type10.InsertedDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInsertedDateNull() {
                this[this.tabletAA_MAD_Type10.InsertedDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUpdatedByNull() {
                return this.IsNull(this.tabletAA_MAD_Type10.UpdatedByColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUpdatedByNull() {
                this[this.tabletAA_MAD_Type10.UpdatedByColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsDeletedNull() {
                return this.IsNull(this.tabletAA_MAD_Type10.IsDeletedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsDeletedNull() {
                this[this.tabletAA_MAD_Type10.IsDeletedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsModuleIDNull() {
                return this.IsNull(this.tabletAA_MAD_Type10.ModuleIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetModuleIDNull() {
                this[this.tabletAA_MAD_Type10.ModuleIDColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class tAA_MAD_Type11Row : global::System.Data.DataRow {
            
            private tAA_MAD_Type11DataTable tabletAA_MAD_Type11;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal tAA_MAD_Type11Row(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tabletAA_MAD_Type11 = ((tAA_MAD_Type11DataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MADistrictID {
                get {
                    try {
                        return ((int)(this[this.tabletAA_MAD_Type11.MADistrictIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MADistrictID\' in table \'tAA_MAD_Type11\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MAD_Type11.MADistrictIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short RollYear {
                get {
                    try {
                        return ((short)(this[this.tabletAA_MAD_Type11.RollYearColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RollYear\' in table \'tAA_MAD_Type11\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MAD_Type11.RollYearColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DistrictNumber {
                get {
                    try {
                        return ((string)(this[this.tabletAA_MAD_Type11.DistrictNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DistrictNumber\' in table \'tAA_MAD_Type11\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MAD_Type11.DistrictNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Description {
                get {
                    try {
                        return ((string)(this[this.tabletAA_MAD_Type11.DescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Description\' in table \'tAA_MAD_Type11\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MAD_Type11.DescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int InsertedBy {
                get {
                    try {
                        return ((int)(this[this.tabletAA_MAD_Type11.InsertedByColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InsertedBy\' in table \'tAA_MAD_Type11\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MAD_Type11.InsertedByColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime InsertedDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tabletAA_MAD_Type11.InsertedDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InsertedDate\' in table \'tAA_MAD_Type11\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MAD_Type11.InsertedDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int UpdatedBy {
                get {
                    try {
                        return ((int)(this[this.tabletAA_MAD_Type11.UpdatedByColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UpdatedBy\' in table \'tAA_MAD_Type11\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MAD_Type11.UpdatedByColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDeleted {
                get {
                    try {
                        return ((bool)(this[this.tabletAA_MAD_Type11.IsDeletedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsDeleted\' in table \'tAA_MAD_Type11\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MAD_Type11.IsDeletedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short ModuleID {
                get {
                    try {
                        return ((short)(this[this.tabletAA_MAD_Type11.ModuleIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ModuleID\' in table \'tAA_MAD_Type11\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MAD_Type11.ModuleIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal PerAcre {
                get {
                    try {
                        return ((decimal)(this[this.tabletAA_MAD_Type11.PerAcreColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PerAcre\' in table \'tAA_MAD_Type11\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MAD_Type11.PerAcreColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal PerParcel {
                get {
                    try {
                        return ((decimal)(this[this.tabletAA_MAD_Type11.PerParcelColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PerParcel\' in table \'tAA_MAD_Type11\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MAD_Type11.PerParcelColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal MarketRate {
                get {
                    try {
                        return ((decimal)(this[this.tabletAA_MAD_Type11.MarketRateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MarketRate\' in table \'tAA_MAD_Type11\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MAD_Type11.MarketRateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMADistrictIDNull() {
                return this.IsNull(this.tabletAA_MAD_Type11.MADistrictIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMADistrictIDNull() {
                this[this.tabletAA_MAD_Type11.MADistrictIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRollYearNull() {
                return this.IsNull(this.tabletAA_MAD_Type11.RollYearColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRollYearNull() {
                this[this.tabletAA_MAD_Type11.RollYearColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDistrictNumberNull() {
                return this.IsNull(this.tabletAA_MAD_Type11.DistrictNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDistrictNumberNull() {
                this[this.tabletAA_MAD_Type11.DistrictNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDescriptionNull() {
                return this.IsNull(this.tabletAA_MAD_Type11.DescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDescriptionNull() {
                this[this.tabletAA_MAD_Type11.DescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInsertedByNull() {
                return this.IsNull(this.tabletAA_MAD_Type11.InsertedByColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInsertedByNull() {
                this[this.tabletAA_MAD_Type11.InsertedByColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInsertedDateNull() {
                return this.IsNull(this.tabletAA_MAD_Type11.InsertedDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInsertedDateNull() {
                this[this.tabletAA_MAD_Type11.InsertedDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUpdatedByNull() {
                return this.IsNull(this.tabletAA_MAD_Type11.UpdatedByColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUpdatedByNull() {
                this[this.tabletAA_MAD_Type11.UpdatedByColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsDeletedNull() {
                return this.IsNull(this.tabletAA_MAD_Type11.IsDeletedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsDeletedNull() {
                this[this.tabletAA_MAD_Type11.IsDeletedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsModuleIDNull() {
                return this.IsNull(this.tabletAA_MAD_Type11.ModuleIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetModuleIDNull() {
                this[this.tabletAA_MAD_Type11.ModuleIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPerAcreNull() {
                return this.IsNull(this.tabletAA_MAD_Type11.PerAcreColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPerAcreNull() {
                this[this.tabletAA_MAD_Type11.PerAcreColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPerParcelNull() {
                return this.IsNull(this.tabletAA_MAD_Type11.PerParcelColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPerParcelNull() {
                this[this.tabletAA_MAD_Type11.PerParcelColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMarketRateNull() {
                return this.IsNull(this.tabletAA_MAD_Type11.MarketRateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMarketRateNull() {
                this[this.tabletAA_MAD_Type11.MarketRateColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class tAA_MAD_Type12Row : global::System.Data.DataRow {
            
            private tAA_MAD_Type12DataTable tabletAA_MAD_Type12;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal tAA_MAD_Type12Row(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tabletAA_MAD_Type12 = ((tAA_MAD_Type12DataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MADistrictID {
                get {
                    try {
                        return ((int)(this[this.tabletAA_MAD_Type12.MADistrictIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MADistrictID\' in table \'tAA_MAD_Type12\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MAD_Type12.MADistrictIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short RollYear {
                get {
                    try {
                        return ((short)(this[this.tabletAA_MAD_Type12.RollYearColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RollYear\' in table \'tAA_MAD_Type12\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MAD_Type12.RollYearColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DistrictNumber {
                get {
                    try {
                        return ((string)(this[this.tabletAA_MAD_Type12.DistrictNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DistrictNumber\' in table \'tAA_MAD_Type12\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MAD_Type12.DistrictNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Description {
                get {
                    try {
                        return ((string)(this[this.tabletAA_MAD_Type12.DescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Description\' in table \'tAA_MAD_Type12\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MAD_Type12.DescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int InsertedBy {
                get {
                    try {
                        return ((int)(this[this.tabletAA_MAD_Type12.InsertedByColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InsertedBy\' in table \'tAA_MAD_Type12\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MAD_Type12.InsertedByColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime InsertedDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tabletAA_MAD_Type12.InsertedDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InsertedDate\' in table \'tAA_MAD_Type12\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MAD_Type12.InsertedDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int UpdatedBy {
                get {
                    try {
                        return ((int)(this[this.tabletAA_MAD_Type12.UpdatedByColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UpdatedBy\' in table \'tAA_MAD_Type12\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MAD_Type12.UpdatedByColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDeleted {
                get {
                    try {
                        return ((bool)(this[this.tabletAA_MAD_Type12.IsDeletedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsDeleted\' in table \'tAA_MAD_Type12\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MAD_Type12.IsDeletedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short ModuleID {
                get {
                    try {
                        return ((short)(this[this.tabletAA_MAD_Type12.ModuleIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ModuleID\' in table \'tAA_MAD_Type12\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MAD_Type12.ModuleIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal BaseFee {
                get {
                    try {
                        return ((decimal)(this[this.tabletAA_MAD_Type12.BaseFeeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BaseFee\' in table \'tAA_MAD_Type12\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MAD_Type12.BaseFeeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMADistrictIDNull() {
                return this.IsNull(this.tabletAA_MAD_Type12.MADistrictIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMADistrictIDNull() {
                this[this.tabletAA_MAD_Type12.MADistrictIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRollYearNull() {
                return this.IsNull(this.tabletAA_MAD_Type12.RollYearColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRollYearNull() {
                this[this.tabletAA_MAD_Type12.RollYearColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDistrictNumberNull() {
                return this.IsNull(this.tabletAA_MAD_Type12.DistrictNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDistrictNumberNull() {
                this[this.tabletAA_MAD_Type12.DistrictNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDescriptionNull() {
                return this.IsNull(this.tabletAA_MAD_Type12.DescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDescriptionNull() {
                this[this.tabletAA_MAD_Type12.DescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInsertedByNull() {
                return this.IsNull(this.tabletAA_MAD_Type12.InsertedByColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInsertedByNull() {
                this[this.tabletAA_MAD_Type12.InsertedByColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInsertedDateNull() {
                return this.IsNull(this.tabletAA_MAD_Type12.InsertedDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInsertedDateNull() {
                this[this.tabletAA_MAD_Type12.InsertedDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUpdatedByNull() {
                return this.IsNull(this.tabletAA_MAD_Type12.UpdatedByColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUpdatedByNull() {
                this[this.tabletAA_MAD_Type12.UpdatedByColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsDeletedNull() {
                return this.IsNull(this.tabletAA_MAD_Type12.IsDeletedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsDeletedNull() {
                this[this.tabletAA_MAD_Type12.IsDeletedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsModuleIDNull() {
                return this.IsNull(this.tabletAA_MAD_Type12.ModuleIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetModuleIDNull() {
                this[this.tabletAA_MAD_Type12.ModuleIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBaseFeeNull() {
                return this.IsNull(this.tabletAA_MAD_Type12.BaseFeeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBaseFeeNull() {
                this[this.tabletAA_MAD_Type12.BaseFeeColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class tAA_MAD_Type2Row : global::System.Data.DataRow {
            
            private tAA_MAD_Type2DataTable tabletAA_MAD_Type2;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal tAA_MAD_Type2Row(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tabletAA_MAD_Type2 = ((tAA_MAD_Type2DataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MADistrictID {
                get {
                    try {
                        return ((int)(this[this.tabletAA_MAD_Type2.MADistrictIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MADistrictID\' in table \'tAA_MAD_Type2\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MAD_Type2.MADistrictIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short RollYear {
                get {
                    try {
                        return ((short)(this[this.tabletAA_MAD_Type2.RollYearColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RollYear\' in table \'tAA_MAD_Type2\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MAD_Type2.RollYearColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DistrictNumber {
                get {
                    try {
                        return ((string)(this[this.tabletAA_MAD_Type2.DistrictNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DistrictNumber\' in table \'tAA_MAD_Type2\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MAD_Type2.DistrictNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Description {
                get {
                    try {
                        return ((string)(this[this.tabletAA_MAD_Type2.DescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Description\' in table \'tAA_MAD_Type2\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MAD_Type2.DescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal MinimumCharge {
                get {
                    try {
                        return ((decimal)(this[this.tabletAA_MAD_Type2.MinimumChargeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MinimumCharge\' in table \'tAA_MAD_Type2\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MAD_Type2.MinimumChargeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOwnerAssessed {
                get {
                    try {
                        return ((bool)(this[this.tabletAA_MAD_Type2.IsOwnerAssessedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsOwnerAssessed\' in table \'tAA_MAD_Type2\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MAD_Type2.IsOwnerAssessedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal BaseFee {
                get {
                    try {
                        return ((decimal)(this[this.tabletAA_MAD_Type2.BaseFeeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BaseFee\' in table \'tAA_MAD_Type2\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MAD_Type2.BaseFeeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short BaseAcres {
                get {
                    try {
                        return ((short)(this[this.tabletAA_MAD_Type2.BaseAcresColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BaseAcres\' in table \'tAA_MAD_Type2\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MAD_Type2.BaseAcresColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal SiteBase {
                get {
                    try {
                        return ((decimal)(this[this.tabletAA_MAD_Type2.SiteBaseColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SiteBase\' in table \'tAA_MAD_Type2\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MAD_Type2.SiteBaseColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal SiteRate {
                get {
                    try {
                        return ((decimal)(this[this.tabletAA_MAD_Type2.SiteRateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SiteRate\' in table \'tAA_MAD_Type2\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MAD_Type2.SiteRateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal DryBase {
                get {
                    try {
                        return ((decimal)(this[this.tabletAA_MAD_Type2.DryBaseColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DryBase\' in table \'tAA_MAD_Type2\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MAD_Type2.DryBaseColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal DryRate {
                get {
                    try {
                        return ((decimal)(this[this.tabletAA_MAD_Type2.DryRateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DryRate\' in table \'tAA_MAD_Type2\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MAD_Type2.DryRateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal IrrigatedBase {
                get {
                    try {
                        return ((decimal)(this[this.tabletAA_MAD_Type2.IrrigatedBaseColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IrrigatedBase\' in table \'tAA_MAD_Type2\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MAD_Type2.IrrigatedBaseColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal IrrigatedRate {
                get {
                    try {
                        return ((decimal)(this[this.tabletAA_MAD_Type2.IrrigatedRateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IrrigatedRate\' in table \'tAA_MAD_Type2\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MAD_Type2.IrrigatedRateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TimberBase {
                get {
                    try {
                        return ((decimal)(this[this.tabletAA_MAD_Type2.TimberBaseColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TimberBase\' in table \'tAA_MAD_Type2\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MAD_Type2.TimberBaseColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TimberRate {
                get {
                    try {
                        return ((decimal)(this[this.tabletAA_MAD_Type2.TimberRateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TimberRate\' in table \'tAA_MAD_Type2\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MAD_Type2.TimberRateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal OtherBase {
                get {
                    try {
                        return ((decimal)(this[this.tabletAA_MAD_Type2.OtherBaseColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OtherBase\' in table \'tAA_MAD_Type2\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MAD_Type2.OtherBaseColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal OtherRate {
                get {
                    try {
                        return ((decimal)(this[this.tabletAA_MAD_Type2.OtherRateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OtherRate\' in table \'tAA_MAD_Type2\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MAD_Type2.OtherRateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int InsertedBy {
                get {
                    try {
                        return ((int)(this[this.tabletAA_MAD_Type2.InsertedByColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InsertedBy\' in table \'tAA_MAD_Type2\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MAD_Type2.InsertedByColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime InsertedDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tabletAA_MAD_Type2.InsertedDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InsertedDate\' in table \'tAA_MAD_Type2\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MAD_Type2.InsertedDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int UpdatedBy {
                get {
                    try {
                        return ((int)(this[this.tabletAA_MAD_Type2.UpdatedByColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UpdatedBy\' in table \'tAA_MAD_Type2\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MAD_Type2.UpdatedByColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDeleted {
                get {
                    try {
                        return ((bool)(this[this.tabletAA_MAD_Type2.IsDeletedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsDeleted\' in table \'tAA_MAD_Type2\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MAD_Type2.IsDeletedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short ModuleID {
                get {
                    try {
                        return ((short)(this[this.tabletAA_MAD_Type2.ModuleIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ModuleID\' in table \'tAA_MAD_Type2\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MAD_Type2.ModuleIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MinSiteAcres {
                get {
                    try {
                        return ((int)(this[this.tabletAA_MAD_Type2.MinSiteAcresColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MinSiteAcres\' in table \'tAA_MAD_Type2\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MAD_Type2.MinSiteAcresColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MinDryAcres {
                get {
                    try {
                        return ((int)(this[this.tabletAA_MAD_Type2.MinDryAcresColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MinDryAcres\' in table \'tAA_MAD_Type2\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MAD_Type2.MinDryAcresColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MinIrrigatedAcres {
                get {
                    try {
                        return ((int)(this[this.tabletAA_MAD_Type2.MinIrrigatedAcresColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MinIrrigatedAcres\' in table \'tAA_MAD_Type2\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MAD_Type2.MinIrrigatedAcresColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MinTimberAcres {
                get {
                    try {
                        return ((int)(this[this.tabletAA_MAD_Type2.MinTimberAcresColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MinTimberAcres\' in table \'tAA_MAD_Type2\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MAD_Type2.MinTimberAcresColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MinOtherAcres {
                get {
                    try {
                        return ((int)(this[this.tabletAA_MAD_Type2.MinOtherAcresColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MinOtherAcres\' in table \'tAA_MAD_Type2\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MAD_Type2.MinOtherAcresColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal BaseRate {
                get {
                    try {
                        return ((decimal)(this[this.tabletAA_MAD_Type2.BaseRateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BaseRate\' in table \'tAA_MAD_Type2\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MAD_Type2.BaseRateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMADistrictIDNull() {
                return this.IsNull(this.tabletAA_MAD_Type2.MADistrictIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMADistrictIDNull() {
                this[this.tabletAA_MAD_Type2.MADistrictIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRollYearNull() {
                return this.IsNull(this.tabletAA_MAD_Type2.RollYearColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRollYearNull() {
                this[this.tabletAA_MAD_Type2.RollYearColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDistrictNumberNull() {
                return this.IsNull(this.tabletAA_MAD_Type2.DistrictNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDistrictNumberNull() {
                this[this.tabletAA_MAD_Type2.DistrictNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDescriptionNull() {
                return this.IsNull(this.tabletAA_MAD_Type2.DescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDescriptionNull() {
                this[this.tabletAA_MAD_Type2.DescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMinimumChargeNull() {
                return this.IsNull(this.tabletAA_MAD_Type2.MinimumChargeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMinimumChargeNull() {
                this[this.tabletAA_MAD_Type2.MinimumChargeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsOwnerAssessedNull() {
                return this.IsNull(this.tabletAA_MAD_Type2.IsOwnerAssessedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsOwnerAssessedNull() {
                this[this.tabletAA_MAD_Type2.IsOwnerAssessedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBaseFeeNull() {
                return this.IsNull(this.tabletAA_MAD_Type2.BaseFeeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBaseFeeNull() {
                this[this.tabletAA_MAD_Type2.BaseFeeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBaseAcresNull() {
                return this.IsNull(this.tabletAA_MAD_Type2.BaseAcresColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBaseAcresNull() {
                this[this.tabletAA_MAD_Type2.BaseAcresColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSiteBaseNull() {
                return this.IsNull(this.tabletAA_MAD_Type2.SiteBaseColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSiteBaseNull() {
                this[this.tabletAA_MAD_Type2.SiteBaseColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSiteRateNull() {
                return this.IsNull(this.tabletAA_MAD_Type2.SiteRateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSiteRateNull() {
                this[this.tabletAA_MAD_Type2.SiteRateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDryBaseNull() {
                return this.IsNull(this.tabletAA_MAD_Type2.DryBaseColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDryBaseNull() {
                this[this.tabletAA_MAD_Type2.DryBaseColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDryRateNull() {
                return this.IsNull(this.tabletAA_MAD_Type2.DryRateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDryRateNull() {
                this[this.tabletAA_MAD_Type2.DryRateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIrrigatedBaseNull() {
                return this.IsNull(this.tabletAA_MAD_Type2.IrrigatedBaseColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIrrigatedBaseNull() {
                this[this.tabletAA_MAD_Type2.IrrigatedBaseColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIrrigatedRateNull() {
                return this.IsNull(this.tabletAA_MAD_Type2.IrrigatedRateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIrrigatedRateNull() {
                this[this.tabletAA_MAD_Type2.IrrigatedRateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTimberBaseNull() {
                return this.IsNull(this.tabletAA_MAD_Type2.TimberBaseColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTimberBaseNull() {
                this[this.tabletAA_MAD_Type2.TimberBaseColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTimberRateNull() {
                return this.IsNull(this.tabletAA_MAD_Type2.TimberRateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTimberRateNull() {
                this[this.tabletAA_MAD_Type2.TimberRateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOtherBaseNull() {
                return this.IsNull(this.tabletAA_MAD_Type2.OtherBaseColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOtherBaseNull() {
                this[this.tabletAA_MAD_Type2.OtherBaseColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOtherRateNull() {
                return this.IsNull(this.tabletAA_MAD_Type2.OtherRateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOtherRateNull() {
                this[this.tabletAA_MAD_Type2.OtherRateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInsertedByNull() {
                return this.IsNull(this.tabletAA_MAD_Type2.InsertedByColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInsertedByNull() {
                this[this.tabletAA_MAD_Type2.InsertedByColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInsertedDateNull() {
                return this.IsNull(this.tabletAA_MAD_Type2.InsertedDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInsertedDateNull() {
                this[this.tabletAA_MAD_Type2.InsertedDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUpdatedByNull() {
                return this.IsNull(this.tabletAA_MAD_Type2.UpdatedByColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUpdatedByNull() {
                this[this.tabletAA_MAD_Type2.UpdatedByColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsDeletedNull() {
                return this.IsNull(this.tabletAA_MAD_Type2.IsDeletedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsDeletedNull() {
                this[this.tabletAA_MAD_Type2.IsDeletedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsModuleIDNull() {
                return this.IsNull(this.tabletAA_MAD_Type2.ModuleIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetModuleIDNull() {
                this[this.tabletAA_MAD_Type2.ModuleIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMinSiteAcresNull() {
                return this.IsNull(this.tabletAA_MAD_Type2.MinSiteAcresColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMinSiteAcresNull() {
                this[this.tabletAA_MAD_Type2.MinSiteAcresColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMinDryAcresNull() {
                return this.IsNull(this.tabletAA_MAD_Type2.MinDryAcresColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMinDryAcresNull() {
                this[this.tabletAA_MAD_Type2.MinDryAcresColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMinIrrigatedAcresNull() {
                return this.IsNull(this.tabletAA_MAD_Type2.MinIrrigatedAcresColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMinIrrigatedAcresNull() {
                this[this.tabletAA_MAD_Type2.MinIrrigatedAcresColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMinTimberAcresNull() {
                return this.IsNull(this.tabletAA_MAD_Type2.MinTimberAcresColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMinTimberAcresNull() {
                this[this.tabletAA_MAD_Type2.MinTimberAcresColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMinOtherAcresNull() {
                return this.IsNull(this.tabletAA_MAD_Type2.MinOtherAcresColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMinOtherAcresNull() {
                this[this.tabletAA_MAD_Type2.MinOtherAcresColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBaseRateNull() {
                return this.IsNull(this.tabletAA_MAD_Type2.BaseRateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBaseRateNull() {
                this[this.tabletAA_MAD_Type2.BaseRateColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class tAA_MAD_Type3Row : global::System.Data.DataRow {
            
            private tAA_MAD_Type3DataTable tabletAA_MAD_Type3;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal tAA_MAD_Type3Row(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tabletAA_MAD_Type3 = ((tAA_MAD_Type3DataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MADistrictID {
                get {
                    try {
                        return ((int)(this[this.tabletAA_MAD_Type3.MADistrictIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MADistrictID\' in table \'tAA_MAD_Type3\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MAD_Type3.MADistrictIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short RollYear {
                get {
                    try {
                        return ((short)(this[this.tabletAA_MAD_Type3.RollYearColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RollYear\' in table \'tAA_MAD_Type3\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MAD_Type3.RollYearColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DistrictNumber {
                get {
                    try {
                        return ((string)(this[this.tabletAA_MAD_Type3.DistrictNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DistrictNumber\' in table \'tAA_MAD_Type3\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MAD_Type3.DistrictNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Description {
                get {
                    try {
                        return ((string)(this[this.tabletAA_MAD_Type3.DescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Description\' in table \'tAA_MAD_Type3\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MAD_Type3.DescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal MinimumCharge {
                get {
                    try {
                        return ((decimal)(this[this.tabletAA_MAD_Type3.MinimumChargeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MinimumCharge\' in table \'tAA_MAD_Type3\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MAD_Type3.MinimumChargeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOwnerAssessed {
                get {
                    try {
                        return ((bool)(this[this.tabletAA_MAD_Type3.IsOwnerAssessedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsOwnerAssessed\' in table \'tAA_MAD_Type3\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MAD_Type3.IsOwnerAssessedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal BaseFee {
                get {
                    try {
                        return ((decimal)(this[this.tabletAA_MAD_Type3.BaseFeeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BaseFee\' in table \'tAA_MAD_Type3\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MAD_Type3.BaseFeeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal BaseRate {
                get {
                    try {
                        return ((decimal)(this[this.tabletAA_MAD_Type3.BaseRateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BaseRate\' in table \'tAA_MAD_Type3\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MAD_Type3.BaseRateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal SiteBase {
                get {
                    try {
                        return ((decimal)(this[this.tabletAA_MAD_Type3.SiteBaseColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SiteBase\' in table \'tAA_MAD_Type3\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MAD_Type3.SiteBaseColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal SiteRate {
                get {
                    try {
                        return ((decimal)(this[this.tabletAA_MAD_Type3.SiteRateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SiteRate\' in table \'tAA_MAD_Type3\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MAD_Type3.SiteRateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal DryBase {
                get {
                    try {
                        return ((decimal)(this[this.tabletAA_MAD_Type3.DryBaseColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DryBase\' in table \'tAA_MAD_Type3\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MAD_Type3.DryBaseColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal DryRate {
                get {
                    try {
                        return ((decimal)(this[this.tabletAA_MAD_Type3.DryRateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DryRate\' in table \'tAA_MAD_Type3\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MAD_Type3.DryRateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal IrrigatedBase {
                get {
                    try {
                        return ((decimal)(this[this.tabletAA_MAD_Type3.IrrigatedBaseColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IrrigatedBase\' in table \'tAA_MAD_Type3\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MAD_Type3.IrrigatedBaseColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal IrrigatedRate {
                get {
                    try {
                        return ((decimal)(this[this.tabletAA_MAD_Type3.IrrigatedRateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IrrigatedRate\' in table \'tAA_MAD_Type3\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MAD_Type3.IrrigatedRateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TimberBase {
                get {
                    try {
                        return ((decimal)(this[this.tabletAA_MAD_Type3.TimberBaseColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TimberBase\' in table \'tAA_MAD_Type3\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MAD_Type3.TimberBaseColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TimberRate {
                get {
                    try {
                        return ((decimal)(this[this.tabletAA_MAD_Type3.TimberRateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TimberRate\' in table \'tAA_MAD_Type3\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MAD_Type3.TimberRateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal OtherBase {
                get {
                    try {
                        return ((decimal)(this[this.tabletAA_MAD_Type3.OtherBaseColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OtherBase\' in table \'tAA_MAD_Type3\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MAD_Type3.OtherBaseColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal OtherRate {
                get {
                    try {
                        return ((decimal)(this[this.tabletAA_MAD_Type3.OtherRateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OtherRate\' in table \'tAA_MAD_Type3\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MAD_Type3.OtherRateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int InsertedBy {
                get {
                    try {
                        return ((int)(this[this.tabletAA_MAD_Type3.InsertedByColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InsertedBy\' in table \'tAA_MAD_Type3\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MAD_Type3.InsertedByColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime InsertedDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tabletAA_MAD_Type3.InsertedDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InsertedDate\' in table \'tAA_MAD_Type3\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MAD_Type3.InsertedDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int UpdatedBy {
                get {
                    try {
                        return ((int)(this[this.tabletAA_MAD_Type3.UpdatedByColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UpdatedBy\' in table \'tAA_MAD_Type3\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MAD_Type3.UpdatedByColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDeleted {
                get {
                    try {
                        return ((bool)(this[this.tabletAA_MAD_Type3.IsDeletedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsDeleted\' in table \'tAA_MAD_Type3\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MAD_Type3.IsDeletedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short ModuleID {
                get {
                    try {
                        return ((short)(this[this.tabletAA_MAD_Type3.ModuleIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ModuleID\' in table \'tAA_MAD_Type3\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MAD_Type3.ModuleIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMADistrictIDNull() {
                return this.IsNull(this.tabletAA_MAD_Type3.MADistrictIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMADistrictIDNull() {
                this[this.tabletAA_MAD_Type3.MADistrictIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRollYearNull() {
                return this.IsNull(this.tabletAA_MAD_Type3.RollYearColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRollYearNull() {
                this[this.tabletAA_MAD_Type3.RollYearColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDistrictNumberNull() {
                return this.IsNull(this.tabletAA_MAD_Type3.DistrictNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDistrictNumberNull() {
                this[this.tabletAA_MAD_Type3.DistrictNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDescriptionNull() {
                return this.IsNull(this.tabletAA_MAD_Type3.DescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDescriptionNull() {
                this[this.tabletAA_MAD_Type3.DescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMinimumChargeNull() {
                return this.IsNull(this.tabletAA_MAD_Type3.MinimumChargeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMinimumChargeNull() {
                this[this.tabletAA_MAD_Type3.MinimumChargeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsOwnerAssessedNull() {
                return this.IsNull(this.tabletAA_MAD_Type3.IsOwnerAssessedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsOwnerAssessedNull() {
                this[this.tabletAA_MAD_Type3.IsOwnerAssessedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBaseFeeNull() {
                return this.IsNull(this.tabletAA_MAD_Type3.BaseFeeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBaseFeeNull() {
                this[this.tabletAA_MAD_Type3.BaseFeeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBaseRateNull() {
                return this.IsNull(this.tabletAA_MAD_Type3.BaseRateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBaseRateNull() {
                this[this.tabletAA_MAD_Type3.BaseRateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSiteBaseNull() {
                return this.IsNull(this.tabletAA_MAD_Type3.SiteBaseColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSiteBaseNull() {
                this[this.tabletAA_MAD_Type3.SiteBaseColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSiteRateNull() {
                return this.IsNull(this.tabletAA_MAD_Type3.SiteRateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSiteRateNull() {
                this[this.tabletAA_MAD_Type3.SiteRateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDryBaseNull() {
                return this.IsNull(this.tabletAA_MAD_Type3.DryBaseColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDryBaseNull() {
                this[this.tabletAA_MAD_Type3.DryBaseColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDryRateNull() {
                return this.IsNull(this.tabletAA_MAD_Type3.DryRateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDryRateNull() {
                this[this.tabletAA_MAD_Type3.DryRateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIrrigatedBaseNull() {
                return this.IsNull(this.tabletAA_MAD_Type3.IrrigatedBaseColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIrrigatedBaseNull() {
                this[this.tabletAA_MAD_Type3.IrrigatedBaseColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIrrigatedRateNull() {
                return this.IsNull(this.tabletAA_MAD_Type3.IrrigatedRateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIrrigatedRateNull() {
                this[this.tabletAA_MAD_Type3.IrrigatedRateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTimberBaseNull() {
                return this.IsNull(this.tabletAA_MAD_Type3.TimberBaseColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTimberBaseNull() {
                this[this.tabletAA_MAD_Type3.TimberBaseColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTimberRateNull() {
                return this.IsNull(this.tabletAA_MAD_Type3.TimberRateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTimberRateNull() {
                this[this.tabletAA_MAD_Type3.TimberRateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOtherBaseNull() {
                return this.IsNull(this.tabletAA_MAD_Type3.OtherBaseColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOtherBaseNull() {
                this[this.tabletAA_MAD_Type3.OtherBaseColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOtherRateNull() {
                return this.IsNull(this.tabletAA_MAD_Type3.OtherRateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOtherRateNull() {
                this[this.tabletAA_MAD_Type3.OtherRateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInsertedByNull() {
                return this.IsNull(this.tabletAA_MAD_Type3.InsertedByColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInsertedByNull() {
                this[this.tabletAA_MAD_Type3.InsertedByColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInsertedDateNull() {
                return this.IsNull(this.tabletAA_MAD_Type3.InsertedDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInsertedDateNull() {
                this[this.tabletAA_MAD_Type3.InsertedDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUpdatedByNull() {
                return this.IsNull(this.tabletAA_MAD_Type3.UpdatedByColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUpdatedByNull() {
                this[this.tabletAA_MAD_Type3.UpdatedByColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsDeletedNull() {
                return this.IsNull(this.tabletAA_MAD_Type3.IsDeletedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsDeletedNull() {
                this[this.tabletAA_MAD_Type3.IsDeletedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsModuleIDNull() {
                return this.IsNull(this.tabletAA_MAD_Type3.ModuleIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetModuleIDNull() {
                this[this.tabletAA_MAD_Type3.ModuleIDColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class tAA_MAD_Type4Row : global::System.Data.DataRow {
            
            private tAA_MAD_Type4DataTable tabletAA_MAD_Type4;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal tAA_MAD_Type4Row(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tabletAA_MAD_Type4 = ((tAA_MAD_Type4DataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MADistrictID {
                get {
                    try {
                        return ((int)(this[this.tabletAA_MAD_Type4.MADistrictIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MADistrictID\' in table \'tAA_MAD_Type4\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MAD_Type4.MADistrictIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short RollYear {
                get {
                    try {
                        return ((short)(this[this.tabletAA_MAD_Type4.RollYearColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RollYear\' in table \'tAA_MAD_Type4\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MAD_Type4.RollYearColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DistrictNumber {
                get {
                    try {
                        return ((string)(this[this.tabletAA_MAD_Type4.DistrictNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DistrictNumber\' in table \'tAA_MAD_Type4\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MAD_Type4.DistrictNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Description {
                get {
                    try {
                        return ((string)(this[this.tabletAA_MAD_Type4.DescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Description\' in table \'tAA_MAD_Type4\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MAD_Type4.DescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Rate {
                get {
                    try {
                        return ((decimal)(this[this.tabletAA_MAD_Type4.RateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Rate\' in table \'tAA_MAD_Type4\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MAD_Type4.RateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int InsertedBy {
                get {
                    try {
                        return ((int)(this[this.tabletAA_MAD_Type4.InsertedByColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InsertedBy\' in table \'tAA_MAD_Type4\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MAD_Type4.InsertedByColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime InsertedDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tabletAA_MAD_Type4.InsertedDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InsertedDate\' in table \'tAA_MAD_Type4\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MAD_Type4.InsertedDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int UpdatedBy {
                get {
                    try {
                        return ((int)(this[this.tabletAA_MAD_Type4.UpdatedByColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UpdatedBy\' in table \'tAA_MAD_Type4\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MAD_Type4.UpdatedByColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDeleted {
                get {
                    try {
                        return ((bool)(this[this.tabletAA_MAD_Type4.IsDeletedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsDeleted\' in table \'tAA_MAD_Type4\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MAD_Type4.IsDeletedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short ModuleID {
                get {
                    try {
                        return ((short)(this[this.tabletAA_MAD_Type4.ModuleIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ModuleID\' in table \'tAA_MAD_Type4\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MAD_Type4.ModuleIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMADistrictIDNull() {
                return this.IsNull(this.tabletAA_MAD_Type4.MADistrictIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMADistrictIDNull() {
                this[this.tabletAA_MAD_Type4.MADistrictIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRollYearNull() {
                return this.IsNull(this.tabletAA_MAD_Type4.RollYearColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRollYearNull() {
                this[this.tabletAA_MAD_Type4.RollYearColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDistrictNumberNull() {
                return this.IsNull(this.tabletAA_MAD_Type4.DistrictNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDistrictNumberNull() {
                this[this.tabletAA_MAD_Type4.DistrictNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDescriptionNull() {
                return this.IsNull(this.tabletAA_MAD_Type4.DescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDescriptionNull() {
                this[this.tabletAA_MAD_Type4.DescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRateNull() {
                return this.IsNull(this.tabletAA_MAD_Type4.RateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRateNull() {
                this[this.tabletAA_MAD_Type4.RateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInsertedByNull() {
                return this.IsNull(this.tabletAA_MAD_Type4.InsertedByColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInsertedByNull() {
                this[this.tabletAA_MAD_Type4.InsertedByColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInsertedDateNull() {
                return this.IsNull(this.tabletAA_MAD_Type4.InsertedDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInsertedDateNull() {
                this[this.tabletAA_MAD_Type4.InsertedDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUpdatedByNull() {
                return this.IsNull(this.tabletAA_MAD_Type4.UpdatedByColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUpdatedByNull() {
                this[this.tabletAA_MAD_Type4.UpdatedByColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsDeletedNull() {
                return this.IsNull(this.tabletAA_MAD_Type4.IsDeletedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsDeletedNull() {
                this[this.tabletAA_MAD_Type4.IsDeletedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsModuleIDNull() {
                return this.IsNull(this.tabletAA_MAD_Type4.ModuleIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetModuleIDNull() {
                this[this.tabletAA_MAD_Type4.ModuleIDColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class tAA_MAD_Type6Row : global::System.Data.DataRow {
            
            private tAA_MAD_Type6DataTable tabletAA_MAD_Type6;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal tAA_MAD_Type6Row(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tabletAA_MAD_Type6 = ((tAA_MAD_Type6DataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MADistrictID {
                get {
                    try {
                        return ((int)(this[this.tabletAA_MAD_Type6.MADistrictIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MADistrictID\' in table \'tAA_MAD_Type6\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MAD_Type6.MADistrictIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short RollYear {
                get {
                    try {
                        return ((short)(this[this.tabletAA_MAD_Type6.RollYearColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RollYear\' in table \'tAA_MAD_Type6\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MAD_Type6.RollYearColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DistrictNumber {
                get {
                    try {
                        return ((string)(this[this.tabletAA_MAD_Type6.DistrictNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DistrictNumber\' in table \'tAA_MAD_Type6\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MAD_Type6.DistrictNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Description {
                get {
                    try {
                        return ((string)(this[this.tabletAA_MAD_Type6.DescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Description\' in table \'tAA_MAD_Type6\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MAD_Type6.DescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CountyFee {
                get {
                    try {
                        return ((decimal)(this[this.tabletAA_MAD_Type6.CountyFeeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CountyFee\' in table \'tAA_MAD_Type6\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MAD_Type6.CountyFeeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal MaxLotSize {
                get {
                    try {
                        return ((decimal)(this[this.tabletAA_MAD_Type6.MaxLotSizeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MaxLotSize\' in table \'tAA_MAD_Type6\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MAD_Type6.MaxLotSizeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal FPAFee {
                get {
                    try {
                        return ((decimal)(this[this.tabletAA_MAD_Type6.FPAFeeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FPAFee\' in table \'tAA_MAD_Type6\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MAD_Type6.FPAFeeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal LCFFee {
                get {
                    try {
                        return ((decimal)(this[this.tabletAA_MAD_Type6.LCFFeeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LCFFee\' in table \'tAA_MAD_Type6\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MAD_Type6.LCFFeeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal FPARate {
                get {
                    try {
                        return ((decimal)(this[this.tabletAA_MAD_Type6.FPARateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FPARate\' in table \'tAA_MAD_Type6\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MAD_Type6.FPARateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal LCFRate {
                get {
                    try {
                        return ((decimal)(this[this.tabletAA_MAD_Type6.LCFRateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LCFRate\' in table \'tAA_MAD_Type6\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MAD_Type6.LCFRateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int InsertedBy {
                get {
                    try {
                        return ((int)(this[this.tabletAA_MAD_Type6.InsertedByColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InsertedBy\' in table \'tAA_MAD_Type6\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MAD_Type6.InsertedByColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime InsertedDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tabletAA_MAD_Type6.InsertedDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InsertedDate\' in table \'tAA_MAD_Type6\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MAD_Type6.InsertedDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int UpdatedBy {
                get {
                    try {
                        return ((int)(this[this.tabletAA_MAD_Type6.UpdatedByColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UpdatedBy\' in table \'tAA_MAD_Type6\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MAD_Type6.UpdatedByColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDeleted {
                get {
                    try {
                        return ((bool)(this[this.tabletAA_MAD_Type6.IsDeletedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsDeleted\' in table \'tAA_MAD_Type6\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MAD_Type6.IsDeletedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short ModuleID {
                get {
                    try {
                        return ((short)(this[this.tabletAA_MAD_Type6.ModuleIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ModuleID\' in table \'tAA_MAD_Type6\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MAD_Type6.ModuleIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMADistrictIDNull() {
                return this.IsNull(this.tabletAA_MAD_Type6.MADistrictIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMADistrictIDNull() {
                this[this.tabletAA_MAD_Type6.MADistrictIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRollYearNull() {
                return this.IsNull(this.tabletAA_MAD_Type6.RollYearColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRollYearNull() {
                this[this.tabletAA_MAD_Type6.RollYearColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDistrictNumberNull() {
                return this.IsNull(this.tabletAA_MAD_Type6.DistrictNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDistrictNumberNull() {
                this[this.tabletAA_MAD_Type6.DistrictNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDescriptionNull() {
                return this.IsNull(this.tabletAA_MAD_Type6.DescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDescriptionNull() {
                this[this.tabletAA_MAD_Type6.DescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCountyFeeNull() {
                return this.IsNull(this.tabletAA_MAD_Type6.CountyFeeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCountyFeeNull() {
                this[this.tabletAA_MAD_Type6.CountyFeeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMaxLotSizeNull() {
                return this.IsNull(this.tabletAA_MAD_Type6.MaxLotSizeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMaxLotSizeNull() {
                this[this.tabletAA_MAD_Type6.MaxLotSizeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFPAFeeNull() {
                return this.IsNull(this.tabletAA_MAD_Type6.FPAFeeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFPAFeeNull() {
                this[this.tabletAA_MAD_Type6.FPAFeeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLCFFeeNull() {
                return this.IsNull(this.tabletAA_MAD_Type6.LCFFeeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLCFFeeNull() {
                this[this.tabletAA_MAD_Type6.LCFFeeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFPARateNull() {
                return this.IsNull(this.tabletAA_MAD_Type6.FPARateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFPARateNull() {
                this[this.tabletAA_MAD_Type6.FPARateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLCFRateNull() {
                return this.IsNull(this.tabletAA_MAD_Type6.LCFRateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLCFRateNull() {
                this[this.tabletAA_MAD_Type6.LCFRateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInsertedByNull() {
                return this.IsNull(this.tabletAA_MAD_Type6.InsertedByColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInsertedByNull() {
                this[this.tabletAA_MAD_Type6.InsertedByColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInsertedDateNull() {
                return this.IsNull(this.tabletAA_MAD_Type6.InsertedDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInsertedDateNull() {
                this[this.tabletAA_MAD_Type6.InsertedDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUpdatedByNull() {
                return this.IsNull(this.tabletAA_MAD_Type6.UpdatedByColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUpdatedByNull() {
                this[this.tabletAA_MAD_Type6.UpdatedByColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsDeletedNull() {
                return this.IsNull(this.tabletAA_MAD_Type6.IsDeletedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsDeletedNull() {
                this[this.tabletAA_MAD_Type6.IsDeletedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsModuleIDNull() {
                return this.IsNull(this.tabletAA_MAD_Type6.ModuleIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetModuleIDNull() {
                this[this.tabletAA_MAD_Type6.ModuleIDColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class tAA_MAD_Type7Row : global::System.Data.DataRow {
            
            private tAA_MAD_Type7DataTable tabletAA_MAD_Type7;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal tAA_MAD_Type7Row(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tabletAA_MAD_Type7 = ((tAA_MAD_Type7DataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MADistrictID {
                get {
                    try {
                        return ((int)(this[this.tabletAA_MAD_Type7.MADistrictIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MADistrictID\' in table \'tAA_MAD_Type7\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MAD_Type7.MADistrictIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short RollYear {
                get {
                    try {
                        return ((short)(this[this.tabletAA_MAD_Type7.RollYearColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RollYear\' in table \'tAA_MAD_Type7\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MAD_Type7.RollYearColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DistrictNumber {
                get {
                    try {
                        return ((string)(this[this.tabletAA_MAD_Type7.DistrictNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DistrictNumber\' in table \'tAA_MAD_Type7\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MAD_Type7.DistrictNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Description {
                get {
                    try {
                        return ((string)(this[this.tabletAA_MAD_Type7.DescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Description\' in table \'tAA_MAD_Type7\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MAD_Type7.DescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal ResidentialRate {
                get {
                    try {
                        return ((decimal)(this[this.tabletAA_MAD_Type7.ResidentialRateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ResidentialRate\' in table \'tAA_MAD_Type7\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MAD_Type7.ResidentialRateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CommercialRate {
                get {
                    try {
                        return ((decimal)(this[this.tabletAA_MAD_Type7.CommercialRateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CommercialRate\' in table \'tAA_MAD_Type7\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MAD_Type7.CommercialRateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int InsertedBy {
                get {
                    try {
                        return ((int)(this[this.tabletAA_MAD_Type7.InsertedByColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InsertedBy\' in table \'tAA_MAD_Type7\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MAD_Type7.InsertedByColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime InsertedDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tabletAA_MAD_Type7.InsertedDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InsertedDate\' in table \'tAA_MAD_Type7\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MAD_Type7.InsertedDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int UpdatedBy {
                get {
                    try {
                        return ((int)(this[this.tabletAA_MAD_Type7.UpdatedByColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UpdatedBy\' in table \'tAA_MAD_Type7\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MAD_Type7.UpdatedByColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDeleted {
                get {
                    try {
                        return ((bool)(this[this.tabletAA_MAD_Type7.IsDeletedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsDeleted\' in table \'tAA_MAD_Type7\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MAD_Type7.IsDeletedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short ModuleID {
                get {
                    try {
                        return ((short)(this[this.tabletAA_MAD_Type7.ModuleIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ModuleID\' in table \'tAA_MAD_Type7\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MAD_Type7.ModuleIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMADistrictIDNull() {
                return this.IsNull(this.tabletAA_MAD_Type7.MADistrictIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMADistrictIDNull() {
                this[this.tabletAA_MAD_Type7.MADistrictIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRollYearNull() {
                return this.IsNull(this.tabletAA_MAD_Type7.RollYearColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRollYearNull() {
                this[this.tabletAA_MAD_Type7.RollYearColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDistrictNumberNull() {
                return this.IsNull(this.tabletAA_MAD_Type7.DistrictNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDistrictNumberNull() {
                this[this.tabletAA_MAD_Type7.DistrictNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDescriptionNull() {
                return this.IsNull(this.tabletAA_MAD_Type7.DescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDescriptionNull() {
                this[this.tabletAA_MAD_Type7.DescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsResidentialRateNull() {
                return this.IsNull(this.tabletAA_MAD_Type7.ResidentialRateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetResidentialRateNull() {
                this[this.tabletAA_MAD_Type7.ResidentialRateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCommercialRateNull() {
                return this.IsNull(this.tabletAA_MAD_Type7.CommercialRateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCommercialRateNull() {
                this[this.tabletAA_MAD_Type7.CommercialRateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInsertedByNull() {
                return this.IsNull(this.tabletAA_MAD_Type7.InsertedByColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInsertedByNull() {
                this[this.tabletAA_MAD_Type7.InsertedByColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInsertedDateNull() {
                return this.IsNull(this.tabletAA_MAD_Type7.InsertedDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInsertedDateNull() {
                this[this.tabletAA_MAD_Type7.InsertedDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUpdatedByNull() {
                return this.IsNull(this.tabletAA_MAD_Type7.UpdatedByColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUpdatedByNull() {
                this[this.tabletAA_MAD_Type7.UpdatedByColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsDeletedNull() {
                return this.IsNull(this.tabletAA_MAD_Type7.IsDeletedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsDeletedNull() {
                this[this.tabletAA_MAD_Type7.IsDeletedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsModuleIDNull() {
                return this.IsNull(this.tabletAA_MAD_Type7.ModuleIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetModuleIDNull() {
                this[this.tabletAA_MAD_Type7.ModuleIDColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class tAA_MAD_Type8Row : global::System.Data.DataRow {
            
            private tAA_MAD_Type8DataTable tabletAA_MAD_Type8;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal tAA_MAD_Type8Row(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tabletAA_MAD_Type8 = ((tAA_MAD_Type8DataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MADistrictID {
                get {
                    try {
                        return ((int)(this[this.tabletAA_MAD_Type8.MADistrictIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MADistrictID\' in table \'tAA_MAD_Type8\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MAD_Type8.MADistrictIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short RollYear {
                get {
                    try {
                        return ((short)(this[this.tabletAA_MAD_Type8.RollYearColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RollYear\' in table \'tAA_MAD_Type8\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MAD_Type8.RollYearColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DistrictNumber {
                get {
                    try {
                        return ((string)(this[this.tabletAA_MAD_Type8.DistrictNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DistrictNumber\' in table \'tAA_MAD_Type8\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MAD_Type8.DistrictNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Description {
                get {
                    try {
                        return ((string)(this[this.tabletAA_MAD_Type8.DescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Description\' in table \'tAA_MAD_Type8\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MAD_Type8.DescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal BaseFee {
                get {
                    try {
                        return ((decimal)(this[this.tabletAA_MAD_Type8.BaseFeeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BaseFee\' in table \'tAA_MAD_Type8\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MAD_Type8.BaseFeeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int InsertedBy {
                get {
                    try {
                        return ((int)(this[this.tabletAA_MAD_Type8.InsertedByColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InsertedBy\' in table \'tAA_MAD_Type8\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MAD_Type8.InsertedByColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime InsertedDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tabletAA_MAD_Type8.InsertedDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InsertedDate\' in table \'tAA_MAD_Type8\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MAD_Type8.InsertedDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int UpdatedBy {
                get {
                    try {
                        return ((int)(this[this.tabletAA_MAD_Type8.UpdatedByColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UpdatedBy\' in table \'tAA_MAD_Type8\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MAD_Type8.UpdatedByColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDeleted {
                get {
                    try {
                        return ((bool)(this[this.tabletAA_MAD_Type8.IsDeletedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsDeleted\' in table \'tAA_MAD_Type8\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MAD_Type8.IsDeletedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short ModuleID {
                get {
                    try {
                        return ((short)(this[this.tabletAA_MAD_Type8.ModuleIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ModuleID\' in table \'tAA_MAD_Type8\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MAD_Type8.ModuleIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMADistrictIDNull() {
                return this.IsNull(this.tabletAA_MAD_Type8.MADistrictIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMADistrictIDNull() {
                this[this.tabletAA_MAD_Type8.MADistrictIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRollYearNull() {
                return this.IsNull(this.tabletAA_MAD_Type8.RollYearColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRollYearNull() {
                this[this.tabletAA_MAD_Type8.RollYearColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDistrictNumberNull() {
                return this.IsNull(this.tabletAA_MAD_Type8.DistrictNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDistrictNumberNull() {
                this[this.tabletAA_MAD_Type8.DistrictNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDescriptionNull() {
                return this.IsNull(this.tabletAA_MAD_Type8.DescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDescriptionNull() {
                this[this.tabletAA_MAD_Type8.DescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBaseFeeNull() {
                return this.IsNull(this.tabletAA_MAD_Type8.BaseFeeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBaseFeeNull() {
                this[this.tabletAA_MAD_Type8.BaseFeeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInsertedByNull() {
                return this.IsNull(this.tabletAA_MAD_Type8.InsertedByColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInsertedByNull() {
                this[this.tabletAA_MAD_Type8.InsertedByColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInsertedDateNull() {
                return this.IsNull(this.tabletAA_MAD_Type8.InsertedDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInsertedDateNull() {
                this[this.tabletAA_MAD_Type8.InsertedDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUpdatedByNull() {
                return this.IsNull(this.tabletAA_MAD_Type8.UpdatedByColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUpdatedByNull() {
                this[this.tabletAA_MAD_Type8.UpdatedByColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsDeletedNull() {
                return this.IsNull(this.tabletAA_MAD_Type8.IsDeletedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsDeletedNull() {
                this[this.tabletAA_MAD_Type8.IsDeletedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsModuleIDNull() {
                return this.IsNull(this.tabletAA_MAD_Type8.ModuleIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetModuleIDNull() {
                this[this.tabletAA_MAD_Type8.ModuleIDColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class tAA_MAD_Type9Row : global::System.Data.DataRow {
            
            private tAA_MAD_Type9DataTable tabletAA_MAD_Type9;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal tAA_MAD_Type9Row(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tabletAA_MAD_Type9 = ((tAA_MAD_Type9DataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MADistrictID {
                get {
                    try {
                        return ((int)(this[this.tabletAA_MAD_Type9.MADistrictIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MADistrictID\' in table \'tAA_MAD_Type9\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MAD_Type9.MADistrictIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short RollYear {
                get {
                    try {
                        return ((short)(this[this.tabletAA_MAD_Type9.RollYearColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RollYear\' in table \'tAA_MAD_Type9\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MAD_Type9.RollYearColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DistrictNumber {
                get {
                    try {
                        return ((string)(this[this.tabletAA_MAD_Type9.DistrictNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DistrictNumber\' in table \'tAA_MAD_Type9\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MAD_Type9.DistrictNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Description {
                get {
                    try {
                        return ((string)(this[this.tabletAA_MAD_Type9.DescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Description\' in table \'tAA_MAD_Type9\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MAD_Type9.DescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Rate {
                get {
                    try {
                        return ((decimal)(this[this.tabletAA_MAD_Type9.RateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Rate\' in table \'tAA_MAD_Type9\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MAD_Type9.RateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int InsertedBy {
                get {
                    try {
                        return ((int)(this[this.tabletAA_MAD_Type9.InsertedByColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InsertedBy\' in table \'tAA_MAD_Type9\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MAD_Type9.InsertedByColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime InsertedDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tabletAA_MAD_Type9.InsertedDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InsertedDate\' in table \'tAA_MAD_Type9\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MAD_Type9.InsertedDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int UpdatedBy {
                get {
                    try {
                        return ((int)(this[this.tabletAA_MAD_Type9.UpdatedByColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UpdatedBy\' in table \'tAA_MAD_Type9\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MAD_Type9.UpdatedByColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDeleted {
                get {
                    try {
                        return ((bool)(this[this.tabletAA_MAD_Type9.IsDeletedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsDeleted\' in table \'tAA_MAD_Type9\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MAD_Type9.IsDeletedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short ModuleID {
                get {
                    try {
                        return ((short)(this[this.tabletAA_MAD_Type9.ModuleIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ModuleID\' in table \'tAA_MAD_Type9\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MAD_Type9.ModuleIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMADistrictIDNull() {
                return this.IsNull(this.tabletAA_MAD_Type9.MADistrictIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMADistrictIDNull() {
                this[this.tabletAA_MAD_Type9.MADistrictIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRollYearNull() {
                return this.IsNull(this.tabletAA_MAD_Type9.RollYearColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRollYearNull() {
                this[this.tabletAA_MAD_Type9.RollYearColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDistrictNumberNull() {
                return this.IsNull(this.tabletAA_MAD_Type9.DistrictNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDistrictNumberNull() {
                this[this.tabletAA_MAD_Type9.DistrictNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDescriptionNull() {
                return this.IsNull(this.tabletAA_MAD_Type9.DescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDescriptionNull() {
                this[this.tabletAA_MAD_Type9.DescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRateNull() {
                return this.IsNull(this.tabletAA_MAD_Type9.RateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRateNull() {
                this[this.tabletAA_MAD_Type9.RateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInsertedByNull() {
                return this.IsNull(this.tabletAA_MAD_Type9.InsertedByColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInsertedByNull() {
                this[this.tabletAA_MAD_Type9.InsertedByColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInsertedDateNull() {
                return this.IsNull(this.tabletAA_MAD_Type9.InsertedDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInsertedDateNull() {
                this[this.tabletAA_MAD_Type9.InsertedDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUpdatedByNull() {
                return this.IsNull(this.tabletAA_MAD_Type9.UpdatedByColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUpdatedByNull() {
                this[this.tabletAA_MAD_Type9.UpdatedByColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsDeletedNull() {
                return this.IsNull(this.tabletAA_MAD_Type9.IsDeletedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsDeletedNull() {
                this[this.tabletAA_MAD_Type9.IsDeletedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsModuleIDNull() {
                return this.IsNull(this.tabletAA_MAD_Type9.ModuleIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetModuleIDNull() {
                this[this.tabletAA_MAD_Type9.ModuleIDColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class tAA_MSC_VersionRow : global::System.Data.DataRow {
            
            private tAA_MSC_VersionDataTable tabletAA_MSC_Version;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal tAA_MSC_VersionRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tabletAA_MSC_Version = ((tAA_MSC_VersionDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MSVersionID {
                get {
                    try {
                        return ((int)(this[this.tabletAA_MSC_Version.MSVersionIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MSVersionID\' in table \'tAA_MSC_Version\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MSC_Version.MSVersionIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ConnectionString {
                get {
                    try {
                        return ((string)(this[this.tabletAA_MSC_Version.ConnectionStringColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ConnectionString\' in table \'tAA_MSC_Version\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MSC_Version.ConnectionStringColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string HTCXML {
                get {
                    try {
                        return ((string)(this[this.tabletAA_MSC_Version.HTCXMLColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'HTCXML\' in table \'tAA_MSC_Version\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MSC_Version.HTCXMLColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string StyleListXML {
                get {
                    try {
                        return ((string)(this[this.tabletAA_MSC_Version.StyleListXMLColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StyleListXML\' in table \'tAA_MSC_Version\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MSC_Version.StyleListXMLColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ModuleID {
                get {
                    try {
                        return ((int)(this[this.tabletAA_MSC_Version.ModuleIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ModuleID\' in table \'tAA_MSC_Version\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MSC_Version.ModuleIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int InsertedBy {
                get {
                    try {
                        return ((int)(this[this.tabletAA_MSC_Version.InsertedByColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InsertedBy\' in table \'tAA_MSC_Version\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MSC_Version.InsertedByColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime InsertedDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tabletAA_MSC_Version.InsertedDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InsertedDate\' in table \'tAA_MSC_Version\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MSC_Version.InsertedDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int UpdatedBy {
                get {
                    try {
                        return ((int)(this[this.tabletAA_MSC_Version.UpdatedByColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UpdatedBy\' in table \'tAA_MSC_Version\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MSC_Version.UpdatedByColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDeleted {
                get {
                    try {
                        return ((bool)(this[this.tabletAA_MSC_Version.IsDeletedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsDeleted\' in table \'tAA_MSC_Version\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MSC_Version.IsDeletedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string OccXML {
                get {
                    try {
                        return ((string)(this[this.tabletAA_MSC_Version.OccXMLColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OccXML\' in table \'tAA_MSC_Version\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_MSC_Version.OccXMLColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMSVersionIDNull() {
                return this.IsNull(this.tabletAA_MSC_Version.MSVersionIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMSVersionIDNull() {
                this[this.tabletAA_MSC_Version.MSVersionIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsConnectionStringNull() {
                return this.IsNull(this.tabletAA_MSC_Version.ConnectionStringColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetConnectionStringNull() {
                this[this.tabletAA_MSC_Version.ConnectionStringColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHTCXMLNull() {
                return this.IsNull(this.tabletAA_MSC_Version.HTCXMLColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHTCXMLNull() {
                this[this.tabletAA_MSC_Version.HTCXMLColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStyleListXMLNull() {
                return this.IsNull(this.tabletAA_MSC_Version.StyleListXMLColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStyleListXMLNull() {
                this[this.tabletAA_MSC_Version.StyleListXMLColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsModuleIDNull() {
                return this.IsNull(this.tabletAA_MSC_Version.ModuleIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetModuleIDNull() {
                this[this.tabletAA_MSC_Version.ModuleIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInsertedByNull() {
                return this.IsNull(this.tabletAA_MSC_Version.InsertedByColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInsertedByNull() {
                this[this.tabletAA_MSC_Version.InsertedByColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInsertedDateNull() {
                return this.IsNull(this.tabletAA_MSC_Version.InsertedDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInsertedDateNull() {
                this[this.tabletAA_MSC_Version.InsertedDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUpdatedByNull() {
                return this.IsNull(this.tabletAA_MSC_Version.UpdatedByColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUpdatedByNull() {
                this[this.tabletAA_MSC_Version.UpdatedByColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsDeletedNull() {
                return this.IsNull(this.tabletAA_MSC_Version.IsDeletedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsDeletedNull() {
                this[this.tabletAA_MSC_Version.IsDeletedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOccXMLNull() {
                return this.IsNull(this.tabletAA_MSC_Version.OccXMLColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOccXMLNull() {
                this[this.tabletAA_MSC_Version.OccXMLColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class tAA_Parcel_InspectionTypeRow : global::System.Data.DataRow {
            
            private tAA_Parcel_InspectionTypeDataTable tabletAA_Parcel_InspectionType;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal tAA_Parcel_InspectionTypeRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tabletAA_Parcel_InspectionType = ((tAA_Parcel_InspectionTypeDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short InspectionTypeID {
                get {
                    try {
                        return ((short)(this[this.tabletAA_Parcel_InspectionType.InspectionTypeIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InspectionTypeID\' in table \'tAA_Parcel_InspectionType\' is D" +
                                "BNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_Parcel_InspectionType.InspectionTypeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string InspectionType {
                get {
                    try {
                        return ((string)(this[this.tabletAA_Parcel_InspectionType.InspectionTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InspectionType\' in table \'tAA_Parcel_InspectionType\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tabletAA_Parcel_InspectionType.InspectionTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsActive {
                get {
                    try {
                        return ((bool)(this[this.tabletAA_Parcel_InspectionType.IsActiveColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsActive\' in table \'tAA_Parcel_InspectionType\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_Parcel_InspectionType.IsActiveColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int InsertedBy {
                get {
                    try {
                        return ((int)(this[this.tabletAA_Parcel_InspectionType.InsertedByColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InsertedBy\' in table \'tAA_Parcel_InspectionType\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tabletAA_Parcel_InspectionType.InsertedByColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime InsertedDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tabletAA_Parcel_InspectionType.InsertedDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InsertedDate\' in table \'tAA_Parcel_InspectionType\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tabletAA_Parcel_InspectionType.InsertedDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int UpdatedBy {
                get {
                    try {
                        return ((int)(this[this.tabletAA_Parcel_InspectionType.UpdatedByColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UpdatedBy\' in table \'tAA_Parcel_InspectionType\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_Parcel_InspectionType.UpdatedByColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDeleted {
                get {
                    try {
                        return ((bool)(this[this.tabletAA_Parcel_InspectionType.IsDeletedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsDeleted\' in table \'tAA_Parcel_InspectionType\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_Parcel_InspectionType.IsDeletedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInspectionTypeIDNull() {
                return this.IsNull(this.tabletAA_Parcel_InspectionType.InspectionTypeIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInspectionTypeIDNull() {
                this[this.tabletAA_Parcel_InspectionType.InspectionTypeIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInspectionTypeNull() {
                return this.IsNull(this.tabletAA_Parcel_InspectionType.InspectionTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInspectionTypeNull() {
                this[this.tabletAA_Parcel_InspectionType.InspectionTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsActiveNull() {
                return this.IsNull(this.tabletAA_Parcel_InspectionType.IsActiveColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsActiveNull() {
                this[this.tabletAA_Parcel_InspectionType.IsActiveColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInsertedByNull() {
                return this.IsNull(this.tabletAA_Parcel_InspectionType.InsertedByColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInsertedByNull() {
                this[this.tabletAA_Parcel_InspectionType.InsertedByColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInsertedDateNull() {
                return this.IsNull(this.tabletAA_Parcel_InspectionType.InsertedDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInsertedDateNull() {
                this[this.tabletAA_Parcel_InspectionType.InsertedDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUpdatedByNull() {
                return this.IsNull(this.tabletAA_Parcel_InspectionType.UpdatedByColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUpdatedByNull() {
                this[this.tabletAA_Parcel_InspectionType.UpdatedByColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsDeletedNull() {
                return this.IsNull(this.tabletAA_Parcel_InspectionType.IsDeletedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsDeletedNull() {
                this[this.tabletAA_Parcel_InspectionType.IsDeletedColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class tAA_Parcel_PLandTypeRow : global::System.Data.DataRow {
            
            private tAA_Parcel_PLandTypeDataTable tabletAA_Parcel_PLandType;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal tAA_Parcel_PLandTypeRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tabletAA_Parcel_PLandType = ((tAA_Parcel_PLandTypeDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LandTypeID {
                get {
                    try {
                        return ((int)(this[this.tabletAA_Parcel_PLandType.LandTypeIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LandTypeID\' in table \'tAA_Parcel_PLandType\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_Parcel_PLandType.LandTypeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LandType {
                get {
                    try {
                        return ((string)(this[this.tabletAA_Parcel_PLandType.LandTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LandType\' in table \'tAA_Parcel_PLandType\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_Parcel_PLandType.LandTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsActive {
                get {
                    try {
                        return ((bool)(this[this.tabletAA_Parcel_PLandType.IsActiveColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsActive\' in table \'tAA_Parcel_PLandType\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_Parcel_PLandType.IsActiveColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDeleted {
                get {
                    try {
                        return ((bool)(this[this.tabletAA_Parcel_PLandType.IsDeletedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsDeleted\' in table \'tAA_Parcel_PLandType\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_Parcel_PLandType.IsDeletedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLandTypeIDNull() {
                return this.IsNull(this.tabletAA_Parcel_PLandType.LandTypeIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLandTypeIDNull() {
                this[this.tabletAA_Parcel_PLandType.LandTypeIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLandTypeNull() {
                return this.IsNull(this.tabletAA_Parcel_PLandType.LandTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLandTypeNull() {
                this[this.tabletAA_Parcel_PLandType.LandTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsActiveNull() {
                return this.IsNull(this.tabletAA_Parcel_PLandType.IsActiveColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsActiveNull() {
                this[this.tabletAA_Parcel_PLandType.IsActiveColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsDeletedNull() {
                return this.IsNull(this.tabletAA_Parcel_PLandType.IsDeletedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsDeletedNull() {
                this[this.tabletAA_Parcel_PLandType.IsDeletedColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class tAA_ParcelValueRow : global::System.Data.DataRow {
            
            private tAA_ParcelValueDataTable tabletAA_ParcelValue;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal tAA_ParcelValueRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tabletAA_ParcelValue = ((tAA_ParcelValueDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ParcelID {
                get {
                    try {
                        return ((int)(this[this.tabletAA_ParcelValue.ParcelIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ParcelID\' in table \'tAA_ParcelValue\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_ParcelValue.ParcelIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal O1ValueA {
                get {
                    try {
                        return ((decimal)(this[this.tabletAA_ParcelValue.O1ValueAColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'O1ValueA\' in table \'tAA_ParcelValue\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_ParcelValue.O1ValueAColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal O1ValueB {
                get {
                    try {
                        return ((decimal)(this[this.tabletAA_ParcelValue.O1ValueBColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'O1ValueB\' in table \'tAA_ParcelValue\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_ParcelValue.O1ValueBColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal O1ValueC {
                get {
                    try {
                        return ((decimal)(this[this.tabletAA_ParcelValue.O1ValueCColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'O1ValueC\' in table \'tAA_ParcelValue\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_ParcelValue.O1ValueCColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal O1ValueD {
                get {
                    try {
                        return ((decimal)(this[this.tabletAA_ParcelValue.O1ValueDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'O1ValueD\' in table \'tAA_ParcelValue\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_ParcelValue.O1ValueDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal O1ValueE {
                get {
                    try {
                        return ((decimal)(this[this.tabletAA_ParcelValue.O1ValueEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'O1ValueE\' in table \'tAA_ParcelValue\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_ParcelValue.O1ValueEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal O2ValueA {
                get {
                    try {
                        return ((decimal)(this[this.tabletAA_ParcelValue.O2ValueAColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'O2ValueA\' in table \'tAA_ParcelValue\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_ParcelValue.O2ValueAColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal O2ValueB {
                get {
                    try {
                        return ((decimal)(this[this.tabletAA_ParcelValue.O2ValueBColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'O2ValueB\' in table \'tAA_ParcelValue\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_ParcelValue.O2ValueBColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal O2ValueC {
                get {
                    try {
                        return ((decimal)(this[this.tabletAA_ParcelValue.O2ValueCColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'O2ValueC\' in table \'tAA_ParcelValue\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_ParcelValue.O2ValueCColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal O2ValueD {
                get {
                    try {
                        return ((decimal)(this[this.tabletAA_ParcelValue.O2ValueDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'O2ValueD\' in table \'tAA_ParcelValue\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_ParcelValue.O2ValueDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal O2ValueE {
                get {
                    try {
                        return ((decimal)(this[this.tabletAA_ParcelValue.O2ValueEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'O2ValueE\' in table \'tAA_ParcelValue\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_ParcelValue.O2ValueEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal O3ValueA {
                get {
                    try {
                        return ((decimal)(this[this.tabletAA_ParcelValue.O3ValueAColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'O3ValueA\' in table \'tAA_ParcelValue\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_ParcelValue.O3ValueAColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal O3ValueB {
                get {
                    try {
                        return ((decimal)(this[this.tabletAA_ParcelValue.O3ValueBColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'O3ValueB\' in table \'tAA_ParcelValue\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_ParcelValue.O3ValueBColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal O3ValueC {
                get {
                    try {
                        return ((decimal)(this[this.tabletAA_ParcelValue.O3ValueCColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'O3ValueC\' in table \'tAA_ParcelValue\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_ParcelValue.O3ValueCColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal O3ValueD {
                get {
                    try {
                        return ((decimal)(this[this.tabletAA_ParcelValue.O3ValueDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'O3ValueD\' in table \'tAA_ParcelValue\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_ParcelValue.O3ValueDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal O3ValueE {
                get {
                    try {
                        return ((decimal)(this[this.tabletAA_ParcelValue.O3ValueEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'O3ValueE\' in table \'tAA_ParcelValue\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_ParcelValue.O3ValueEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal ResultingTaxable {
                get {
                    try {
                        return ((decimal)(this[this.tabletAA_ParcelValue.ResultingTaxableColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ResultingTaxable\' in table \'tAA_ParcelValue\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_ParcelValue.ResultingTaxableColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short ModuleID {
                get {
                    try {
                        return ((short)(this[this.tabletAA_ParcelValue.ModuleIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ModuleID\' in table \'tAA_ParcelValue\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_ParcelValue.ModuleIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int InsertedBy {
                get {
                    try {
                        return ((int)(this[this.tabletAA_ParcelValue.InsertedByColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InsertedBy\' in table \'tAA_ParcelValue\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_ParcelValue.InsertedByColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime InsertedDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tabletAA_ParcelValue.InsertedDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InsertedDate\' in table \'tAA_ParcelValue\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_ParcelValue.InsertedDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int UpdatedBy {
                get {
                    try {
                        return ((int)(this[this.tabletAA_ParcelValue.UpdatedByColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UpdatedBy\' in table \'tAA_ParcelValue\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_ParcelValue.UpdatedByColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDeleted {
                get {
                    try {
                        return ((bool)(this[this.tabletAA_ParcelValue.IsDeletedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsDeleted\' in table \'tAA_ParcelValue\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_ParcelValue.IsDeletedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsParcelIDNull() {
                return this.IsNull(this.tabletAA_ParcelValue.ParcelIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetParcelIDNull() {
                this[this.tabletAA_ParcelValue.ParcelIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsO1ValueANull() {
                return this.IsNull(this.tabletAA_ParcelValue.O1ValueAColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetO1ValueANull() {
                this[this.tabletAA_ParcelValue.O1ValueAColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsO1ValueBNull() {
                return this.IsNull(this.tabletAA_ParcelValue.O1ValueBColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetO1ValueBNull() {
                this[this.tabletAA_ParcelValue.O1ValueBColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsO1ValueCNull() {
                return this.IsNull(this.tabletAA_ParcelValue.O1ValueCColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetO1ValueCNull() {
                this[this.tabletAA_ParcelValue.O1ValueCColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsO1ValueDNull() {
                return this.IsNull(this.tabletAA_ParcelValue.O1ValueDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetO1ValueDNull() {
                this[this.tabletAA_ParcelValue.O1ValueDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsO1ValueENull() {
                return this.IsNull(this.tabletAA_ParcelValue.O1ValueEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetO1ValueENull() {
                this[this.tabletAA_ParcelValue.O1ValueEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsO2ValueANull() {
                return this.IsNull(this.tabletAA_ParcelValue.O2ValueAColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetO2ValueANull() {
                this[this.tabletAA_ParcelValue.O2ValueAColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsO2ValueBNull() {
                return this.IsNull(this.tabletAA_ParcelValue.O2ValueBColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetO2ValueBNull() {
                this[this.tabletAA_ParcelValue.O2ValueBColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsO2ValueCNull() {
                return this.IsNull(this.tabletAA_ParcelValue.O2ValueCColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetO2ValueCNull() {
                this[this.tabletAA_ParcelValue.O2ValueCColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsO2ValueDNull() {
                return this.IsNull(this.tabletAA_ParcelValue.O2ValueDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetO2ValueDNull() {
                this[this.tabletAA_ParcelValue.O2ValueDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsO2ValueENull() {
                return this.IsNull(this.tabletAA_ParcelValue.O2ValueEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetO2ValueENull() {
                this[this.tabletAA_ParcelValue.O2ValueEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsO3ValueANull() {
                return this.IsNull(this.tabletAA_ParcelValue.O3ValueAColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetO3ValueANull() {
                this[this.tabletAA_ParcelValue.O3ValueAColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsO3ValueBNull() {
                return this.IsNull(this.tabletAA_ParcelValue.O3ValueBColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetO3ValueBNull() {
                this[this.tabletAA_ParcelValue.O3ValueBColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsO3ValueCNull() {
                return this.IsNull(this.tabletAA_ParcelValue.O3ValueCColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetO3ValueCNull() {
                this[this.tabletAA_ParcelValue.O3ValueCColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsO3ValueDNull() {
                return this.IsNull(this.tabletAA_ParcelValue.O3ValueDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetO3ValueDNull() {
                this[this.tabletAA_ParcelValue.O3ValueDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsO3ValueENull() {
                return this.IsNull(this.tabletAA_ParcelValue.O3ValueEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetO3ValueENull() {
                this[this.tabletAA_ParcelValue.O3ValueEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsResultingTaxableNull() {
                return this.IsNull(this.tabletAA_ParcelValue.ResultingTaxableColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetResultingTaxableNull() {
                this[this.tabletAA_ParcelValue.ResultingTaxableColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsModuleIDNull() {
                return this.IsNull(this.tabletAA_ParcelValue.ModuleIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetModuleIDNull() {
                this[this.tabletAA_ParcelValue.ModuleIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInsertedByNull() {
                return this.IsNull(this.tabletAA_ParcelValue.InsertedByColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInsertedByNull() {
                this[this.tabletAA_ParcelValue.InsertedByColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInsertedDateNull() {
                return this.IsNull(this.tabletAA_ParcelValue.InsertedDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInsertedDateNull() {
                this[this.tabletAA_ParcelValue.InsertedDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUpdatedByNull() {
                return this.IsNull(this.tabletAA_ParcelValue.UpdatedByColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUpdatedByNull() {
                this[this.tabletAA_ParcelValue.UpdatedByColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsDeletedNull() {
                return this.IsNull(this.tabletAA_ParcelValue.IsDeletedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsDeletedNull() {
                this[this.tabletAA_ParcelValue.IsDeletedColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class tAA_Parcel_PImprovementRow : global::System.Data.DataRow {
            
            private tAA_Parcel_PImprovementDataTable tabletAA_Parcel_PImprovement;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal tAA_Parcel_PImprovementRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tabletAA_Parcel_PImprovement = ((tAA_Parcel_PImprovementDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ImprovementID {
                get {
                    try {
                        return ((int)(this[this.tabletAA_Parcel_PImprovement.ImprovementIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ImprovementID\' in table \'tAA_Parcel_PImprovement\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tabletAA_Parcel_PImprovement.ImprovementIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Improvement {
                get {
                    try {
                        return ((string)(this[this.tabletAA_Parcel_PImprovement.ImprovementColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Improvement\' in table \'tAA_Parcel_PImprovement\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_Parcel_PImprovement.ImprovementColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsActive {
                get {
                    try {
                        return ((bool)(this[this.tabletAA_Parcel_PImprovement.IsActiveColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsActive\' in table \'tAA_Parcel_PImprovement\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_Parcel_PImprovement.IsActiveColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDeleted {
                get {
                    try {
                        return ((bool)(this[this.tabletAA_Parcel_PImprovement.IsDeletedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsDeleted\' in table \'tAA_Parcel_PImprovement\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletAA_Parcel_PImprovement.IsDeletedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsImprovementIDNull() {
                return this.IsNull(this.tabletAA_Parcel_PImprovement.ImprovementIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetImprovementIDNull() {
                this[this.tabletAA_Parcel_PImprovement.ImprovementIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsImprovementNull() {
                return this.IsNull(this.tabletAA_Parcel_PImprovement.ImprovementColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetImprovementNull() {
                this[this.tabletAA_Parcel_PImprovement.ImprovementColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsActiveNull() {
                return this.IsNull(this.tabletAA_Parcel_PImprovement.IsActiveColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsActiveNull() {
                this[this.tabletAA_Parcel_PImprovement.IsActiveColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsDeletedNull() {
                return this.IsNull(this.tabletAA_Parcel_PImprovement.IsDeletedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsDeletedNull() {
                this[this.tabletAA_Parcel_PImprovement.IsDeletedColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class tAA_AssessmentTypeRowChangeEvent : global::System.EventArgs {
            
            private tAA_AssessmentTypeRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tAA_AssessmentTypeRowChangeEvent(tAA_AssessmentTypeRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tAA_AssessmentTypeRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class tAA_CropRowChangeEvent : global::System.EventArgs {
            
            private tAA_CropRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tAA_CropRowChangeEvent(tAA_CropRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tAA_CropRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class tAA_LandRowChangeEvent : global::System.EventArgs {
            
            private tAA_LandRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tAA_LandRowChangeEvent(tAA_LandRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tAA_LandRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class tAA_LandUnitRowChangeEvent : global::System.EventArgs {
            
            private tAA_LandUnitRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tAA_LandUnitRowChangeEvent(tAA_LandUnitRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tAA_LandUnitRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class tAA_MA_Type1RowChangeEvent : global::System.EventArgs {
            
            private tAA_MA_Type1Row eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tAA_MA_Type1RowChangeEvent(tAA_MA_Type1Row row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tAA_MA_Type1Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class tAA_MA_Type10RowChangeEvent : global::System.EventArgs {
            
            private tAA_MA_Type10Row eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tAA_MA_Type10RowChangeEvent(tAA_MA_Type10Row row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tAA_MA_Type10Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class tAA_MA_Type11RowChangeEvent : global::System.EventArgs {
            
            private tAA_MA_Type11Row eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tAA_MA_Type11RowChangeEvent(tAA_MA_Type11Row row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tAA_MA_Type11Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class tAA_MA_Type12RowChangeEvent : global::System.EventArgs {
            
            private tAA_MA_Type12Row eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tAA_MA_Type12RowChangeEvent(tAA_MA_Type12Row row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tAA_MA_Type12Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class tAA_MA_Type2RowChangeEvent : global::System.EventArgs {
            
            private tAA_MA_Type2Row eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tAA_MA_Type2RowChangeEvent(tAA_MA_Type2Row row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tAA_MA_Type2Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class tAA_MA_Type3RowChangeEvent : global::System.EventArgs {
            
            private tAA_MA_Type3Row eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tAA_MA_Type3RowChangeEvent(tAA_MA_Type3Row row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tAA_MA_Type3Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class tAA_MA_Type4RowChangeEvent : global::System.EventArgs {
            
            private tAA_MA_Type4Row eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tAA_MA_Type4RowChangeEvent(tAA_MA_Type4Row row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tAA_MA_Type4Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class tAA_MA_Type6RowChangeEvent : global::System.EventArgs {
            
            private tAA_MA_Type6Row eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tAA_MA_Type6RowChangeEvent(tAA_MA_Type6Row row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tAA_MA_Type6Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class tAA_MA_Type7RowChangeEvent : global::System.EventArgs {
            
            private tAA_MA_Type7Row eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tAA_MA_Type7RowChangeEvent(tAA_MA_Type7Row row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tAA_MA_Type7Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class tAA_MA_Type8RowChangeEvent : global::System.EventArgs {
            
            private tAA_MA_Type8Row eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tAA_MA_Type8RowChangeEvent(tAA_MA_Type8Row row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tAA_MA_Type8Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class tAA_MA_Type9RowChangeEvent : global::System.EventArgs {
            
            private tAA_MA_Type9Row eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tAA_MA_Type9RowChangeEvent(tAA_MA_Type9Row row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tAA_MA_Type9Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class tAA_MAD_Type1RowChangeEvent : global::System.EventArgs {
            
            private tAA_MAD_Type1Row eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tAA_MAD_Type1RowChangeEvent(tAA_MAD_Type1Row row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tAA_MAD_Type1Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class tAA_MAD_Type10RowChangeEvent : global::System.EventArgs {
            
            private tAA_MAD_Type10Row eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tAA_MAD_Type10RowChangeEvent(tAA_MAD_Type10Row row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tAA_MAD_Type10Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class tAA_MAD_Type11RowChangeEvent : global::System.EventArgs {
            
            private tAA_MAD_Type11Row eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tAA_MAD_Type11RowChangeEvent(tAA_MAD_Type11Row row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tAA_MAD_Type11Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class tAA_MAD_Type12RowChangeEvent : global::System.EventArgs {
            
            private tAA_MAD_Type12Row eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tAA_MAD_Type12RowChangeEvent(tAA_MAD_Type12Row row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tAA_MAD_Type12Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class tAA_MAD_Type2RowChangeEvent : global::System.EventArgs {
            
            private tAA_MAD_Type2Row eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tAA_MAD_Type2RowChangeEvent(tAA_MAD_Type2Row row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tAA_MAD_Type2Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class tAA_MAD_Type3RowChangeEvent : global::System.EventArgs {
            
            private tAA_MAD_Type3Row eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tAA_MAD_Type3RowChangeEvent(tAA_MAD_Type3Row row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tAA_MAD_Type3Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class tAA_MAD_Type4RowChangeEvent : global::System.EventArgs {
            
            private tAA_MAD_Type4Row eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tAA_MAD_Type4RowChangeEvent(tAA_MAD_Type4Row row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tAA_MAD_Type4Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class tAA_MAD_Type6RowChangeEvent : global::System.EventArgs {
            
            private tAA_MAD_Type6Row eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tAA_MAD_Type6RowChangeEvent(tAA_MAD_Type6Row row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tAA_MAD_Type6Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class tAA_MAD_Type7RowChangeEvent : global::System.EventArgs {
            
            private tAA_MAD_Type7Row eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tAA_MAD_Type7RowChangeEvent(tAA_MAD_Type7Row row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tAA_MAD_Type7Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class tAA_MAD_Type8RowChangeEvent : global::System.EventArgs {
            
            private tAA_MAD_Type8Row eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tAA_MAD_Type8RowChangeEvent(tAA_MAD_Type8Row row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tAA_MAD_Type8Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class tAA_MAD_Type9RowChangeEvent : global::System.EventArgs {
            
            private tAA_MAD_Type9Row eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tAA_MAD_Type9RowChangeEvent(tAA_MAD_Type9Row row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tAA_MAD_Type9Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class tAA_MSC_VersionRowChangeEvent : global::System.EventArgs {
            
            private tAA_MSC_VersionRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tAA_MSC_VersionRowChangeEvent(tAA_MSC_VersionRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tAA_MSC_VersionRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class tAA_Parcel_InspectionTypeRowChangeEvent : global::System.EventArgs {
            
            private tAA_Parcel_InspectionTypeRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tAA_Parcel_InspectionTypeRowChangeEvent(tAA_Parcel_InspectionTypeRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tAA_Parcel_InspectionTypeRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class tAA_Parcel_PLandTypeRowChangeEvent : global::System.EventArgs {
            
            private tAA_Parcel_PLandTypeRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tAA_Parcel_PLandTypeRowChangeEvent(tAA_Parcel_PLandTypeRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tAA_Parcel_PLandTypeRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class tAA_ParcelValueRowChangeEvent : global::System.EventArgs {
            
            private tAA_ParcelValueRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tAA_ParcelValueRowChangeEvent(tAA_ParcelValueRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tAA_ParcelValueRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class tAA_Parcel_PImprovementRowChangeEvent : global::System.EventArgs {
            
            private tAA_Parcel_PImprovementRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tAA_Parcel_PImprovementRowChangeEvent(tAA_Parcel_PImprovementRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tAA_Parcel_PImprovementRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591