//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.5446
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace TerraScan.BusinessEntities {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("F15019JournalEntryData")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class F15019JournalEntryData : global::System.Data.DataSet {
        
        private F15019GetJournalEntryDetailsDataTable tableF15019GetJournalEntryDetails;
        
        private AccountListingDataTable tableAccountListing;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public F15019JournalEntryData() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected F15019JournalEntryData(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["F15019GetJournalEntryDetails"] != null)) {
                    base.Tables.Add(new F15019GetJournalEntryDetailsDataTable(ds.Tables["F15019GetJournalEntryDetails"]));
                }
                if ((ds.Tables["AccountListing"] != null)) {
                    base.Tables.Add(new AccountListingDataTable(ds.Tables["AccountListing"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public F15019GetJournalEntryDetailsDataTable F15019GetJournalEntryDetails {
            get {
                return this.tableF15019GetJournalEntryDetails;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public AccountListingDataTable AccountListing {
            get {
                return this.tableAccountListing;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            F15019JournalEntryData cln = ((F15019JournalEntryData)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["F15019GetJournalEntryDetails"] != null)) {
                    base.Tables.Add(new F15019GetJournalEntryDetailsDataTable(ds.Tables["F15019GetJournalEntryDetails"]));
                }
                if ((ds.Tables["AccountListing"] != null)) {
                    base.Tables.Add(new AccountListingDataTable(ds.Tables["AccountListing"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableF15019GetJournalEntryDetails = ((F15019GetJournalEntryDetailsDataTable)(base.Tables["F15019GetJournalEntryDetails"]));
            if ((initTable == true)) {
                if ((this.tableF15019GetJournalEntryDetails != null)) {
                    this.tableF15019GetJournalEntryDetails.InitVars();
                }
            }
            this.tableAccountListing = ((AccountListingDataTable)(base.Tables["AccountListing"]));
            if ((initTable == true)) {
                if ((this.tableAccountListing != null)) {
                    this.tableAccountListing.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "F15019JournalEntryData";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/F15019JournalEntryData.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableF15019GetJournalEntryDetails = new F15019GetJournalEntryDetailsDataTable();
            base.Tables.Add(this.tableF15019GetJournalEntryDetails);
            this.tableAccountListing = new AccountListingDataTable();
            base.Tables.Add(this.tableAccountListing);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeF15019GetJournalEntryDetails() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeAccountListing() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            F15019JournalEntryData ds = new F15019JournalEntryData();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void F15019GetJournalEntryDetailsRowChangeEventHandler(object sender, F15019GetJournalEntryDetailsRowChangeEvent e);
        
        public delegate void AccountListingRowChangeEventHandler(object sender, AccountListingRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class F15019GetJournalEntryDetailsDataTable : global::System.Data.TypedTableBase<F15019GetJournalEntryDetailsRow> {
            
            private global::System.Data.DataColumn columnReceiptID;
            
            private global::System.Data.DataColumn columnReceiptNumber;
            
            private global::System.Data.DataColumn columnTransferDate;
            
            private global::System.Data.DataColumn columnTransferAmount;
            
            private global::System.Data.DataColumn columnUserID;
            
            private global::System.Data.DataColumn columnEnteredBy;
            
            private global::System.Data.DataColumn columnToAccount;
            
            private global::System.Data.DataColumn columnFromAccount;
            
            private global::System.Data.DataColumn columnPostedID;
            
            private global::System.Data.DataColumn columnTransferDescription;
            
            private global::System.Data.DataColumn columnToAccountID;
            
            private global::System.Data.DataColumn columnFromAccountID;
            
            private global::System.Data.DataColumn columnToAccountIsPending;
            
            private global::System.Data.DataColumn columnFromAccountIsPending;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public F15019GetJournalEntryDetailsDataTable() {
                this.TableName = "F15019GetJournalEntryDetails";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal F15019GetJournalEntryDetailsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected F15019GetJournalEntryDetailsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ReceiptIDColumn {
                get {
                    return this.columnReceiptID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ReceiptNumberColumn {
                get {
                    return this.columnReceiptNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TransferDateColumn {
                get {
                    return this.columnTransferDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TransferAmountColumn {
                get {
                    return this.columnTransferAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UserIDColumn {
                get {
                    return this.columnUserID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EnteredByColumn {
                get {
                    return this.columnEnteredBy;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ToAccountColumn {
                get {
                    return this.columnToAccount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FromAccountColumn {
                get {
                    return this.columnFromAccount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PostedIDColumn {
                get {
                    return this.columnPostedID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TransferDescriptionColumn {
                get {
                    return this.columnTransferDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ToAccountIDColumn {
                get {
                    return this.columnToAccountID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FromAccountIDColumn {
                get {
                    return this.columnFromAccountID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ToAccountIsPendingColumn {
                get {
                    return this.columnToAccountIsPending;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FromAccountIsPendingColumn {
                get {
                    return this.columnFromAccountIsPending;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public F15019GetJournalEntryDetailsRow this[int index] {
                get {
                    return ((F15019GetJournalEntryDetailsRow)(this.Rows[index]));
                }
            }
            
            public event F15019GetJournalEntryDetailsRowChangeEventHandler F15019GetJournalEntryDetailsRowChanging;
            
            public event F15019GetJournalEntryDetailsRowChangeEventHandler F15019GetJournalEntryDetailsRowChanged;
            
            public event F15019GetJournalEntryDetailsRowChangeEventHandler F15019GetJournalEntryDetailsRowDeleting;
            
            public event F15019GetJournalEntryDetailsRowChangeEventHandler F15019GetJournalEntryDetailsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddF15019GetJournalEntryDetailsRow(F15019GetJournalEntryDetailsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public F15019GetJournalEntryDetailsRow AddF15019GetJournalEntryDetailsRow(string ReceiptNumber, System.DateTime TransferDate, decimal TransferAmount, string EnteredBy, string ToAccount, string FromAccount, string PostedID, string TransferDescription, int ToAccountID, int FromAccountID, bool ToAccountIsPending, bool FromAccountIsPending) {
                F15019GetJournalEntryDetailsRow rowF15019GetJournalEntryDetailsRow = ((F15019GetJournalEntryDetailsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        ReceiptNumber,
                        TransferDate,
                        TransferAmount,
                        null,
                        EnteredBy,
                        ToAccount,
                        FromAccount,
                        PostedID,
                        TransferDescription,
                        ToAccountID,
                        FromAccountID,
                        ToAccountIsPending,
                        FromAccountIsPending};
                rowF15019GetJournalEntryDetailsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowF15019GetJournalEntryDetailsRow);
                return rowF15019GetJournalEntryDetailsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                F15019GetJournalEntryDetailsDataTable cln = ((F15019GetJournalEntryDetailsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new F15019GetJournalEntryDetailsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnReceiptID = base.Columns["ReceiptID"];
                this.columnReceiptNumber = base.Columns["ReceiptNumber"];
                this.columnTransferDate = base.Columns["TransferDate"];
                this.columnTransferAmount = base.Columns["TransferAmount"];
                this.columnUserID = base.Columns["UserID"];
                this.columnEnteredBy = base.Columns["EnteredBy"];
                this.columnToAccount = base.Columns["ToAccount"];
                this.columnFromAccount = base.Columns["FromAccount"];
                this.columnPostedID = base.Columns["PostedID"];
                this.columnTransferDescription = base.Columns["TransferDescription"];
                this.columnToAccountID = base.Columns["ToAccountID"];
                this.columnFromAccountID = base.Columns["FromAccountID"];
                this.columnToAccountIsPending = base.Columns["ToAccountIsPending"];
                this.columnFromAccountIsPending = base.Columns["FromAccountIsPending"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnReceiptID = new global::System.Data.DataColumn("ReceiptID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnReceiptID);
                this.columnReceiptNumber = new global::System.Data.DataColumn("ReceiptNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnReceiptNumber);
                this.columnTransferDate = new global::System.Data.DataColumn("TransferDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTransferDate);
                this.columnTransferAmount = new global::System.Data.DataColumn("TransferAmount", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTransferAmount);
                this.columnUserID = new global::System.Data.DataColumn("UserID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUserID);
                this.columnEnteredBy = new global::System.Data.DataColumn("EnteredBy", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEnteredBy);
                this.columnToAccount = new global::System.Data.DataColumn("ToAccount", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnToAccount);
                this.columnFromAccount = new global::System.Data.DataColumn("FromAccount", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFromAccount);
                this.columnPostedID = new global::System.Data.DataColumn("PostedID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPostedID);
                this.columnTransferDescription = new global::System.Data.DataColumn("TransferDescription", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTransferDescription);
                this.columnToAccountID = new global::System.Data.DataColumn("ToAccountID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnToAccountID);
                this.columnFromAccountID = new global::System.Data.DataColumn("FromAccountID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFromAccountID);
                this.columnToAccountIsPending = new global::System.Data.DataColumn("ToAccountIsPending", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnToAccountIsPending);
                this.columnFromAccountIsPending = new global::System.Data.DataColumn("FromAccountIsPending", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFromAccountIsPending);
                this.columnReceiptID.AutoIncrement = true;
                this.columnReceiptID.AllowDBNull = false;
                this.columnReceiptID.ReadOnly = true;
                this.columnReceiptNumber.MaxLength = 50;
                this.columnTransferDate.AllowDBNull = false;
                this.columnUserID.AutoIncrement = true;
                this.columnUserID.ReadOnly = true;
                this.columnEnteredBy.MaxLength = 50;
                this.columnToAccount.ReadOnly = true;
                this.columnToAccount.MaxLength = 262;
                this.columnFromAccount.ReadOnly = true;
                this.columnFromAccount.MaxLength = 262;
                this.columnPostedID.ReadOnly = true;
                this.columnPostedID.MaxLength = 35;
                this.columnTransferDescription.ReadOnly = true;
                this.columnTransferDescription.MaxLength = 100;
                this.columnToAccountID.ReadOnly = true;
                this.columnFromAccountID.ReadOnly = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public F15019GetJournalEntryDetailsRow NewF15019GetJournalEntryDetailsRow() {
                return ((F15019GetJournalEntryDetailsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new F15019GetJournalEntryDetailsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(F15019GetJournalEntryDetailsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.F15019GetJournalEntryDetailsRowChanged != null)) {
                    this.F15019GetJournalEntryDetailsRowChanged(this, new F15019GetJournalEntryDetailsRowChangeEvent(((F15019GetJournalEntryDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.F15019GetJournalEntryDetailsRowChanging != null)) {
                    this.F15019GetJournalEntryDetailsRowChanging(this, new F15019GetJournalEntryDetailsRowChangeEvent(((F15019GetJournalEntryDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.F15019GetJournalEntryDetailsRowDeleted != null)) {
                    this.F15019GetJournalEntryDetailsRowDeleted(this, new F15019GetJournalEntryDetailsRowChangeEvent(((F15019GetJournalEntryDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.F15019GetJournalEntryDetailsRowDeleting != null)) {
                    this.F15019GetJournalEntryDetailsRowDeleting(this, new F15019GetJournalEntryDetailsRowChangeEvent(((F15019GetJournalEntryDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveF15019GetJournalEntryDetailsRow(F15019GetJournalEntryDetailsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F15019JournalEntryData ds = new F15019JournalEntryData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "F15019GetJournalEntryDetailsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class AccountListingDataTable : global::System.Data.TypedTableBase<AccountListingRow> {
            
            private global::System.Data.DataColumn columnAccountID;
            
            private global::System.Data.DataColumn columnAccountName;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AccountListingDataTable() {
                this.TableName = "AccountListing";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal AccountListingDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected AccountListingDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AccountIDColumn {
                get {
                    return this.columnAccountID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AccountNameColumn {
                get {
                    return this.columnAccountName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AccountListingRow this[int index] {
                get {
                    return ((AccountListingRow)(this.Rows[index]));
                }
            }
            
            public event AccountListingRowChangeEventHandler AccountListingRowChanging;
            
            public event AccountListingRowChangeEventHandler AccountListingRowChanged;
            
            public event AccountListingRowChangeEventHandler AccountListingRowDeleting;
            
            public event AccountListingRowChangeEventHandler AccountListingRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddAccountListingRow(AccountListingRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AccountListingRow AddAccountListingRow(int AccountID, string AccountName) {
                AccountListingRow rowAccountListingRow = ((AccountListingRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        AccountID,
                        AccountName};
                rowAccountListingRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowAccountListingRow);
                return rowAccountListingRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                AccountListingDataTable cln = ((AccountListingDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new AccountListingDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnAccountID = base.Columns["AccountID"];
                this.columnAccountName = base.Columns["AccountName"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnAccountID = new global::System.Data.DataColumn("AccountID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAccountID);
                this.columnAccountName = new global::System.Data.DataColumn("AccountName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAccountName);
                this.columnAccountName.MaxLength = 500;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AccountListingRow NewAccountListingRow() {
                return ((AccountListingRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new AccountListingRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(AccountListingRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.AccountListingRowChanged != null)) {
                    this.AccountListingRowChanged(this, new AccountListingRowChangeEvent(((AccountListingRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.AccountListingRowChanging != null)) {
                    this.AccountListingRowChanging(this, new AccountListingRowChangeEvent(((AccountListingRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.AccountListingRowDeleted != null)) {
                    this.AccountListingRowDeleted(this, new AccountListingRowChangeEvent(((AccountListingRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.AccountListingRowDeleting != null)) {
                    this.AccountListingRowDeleting(this, new AccountListingRowChangeEvent(((AccountListingRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveAccountListingRow(AccountListingRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F15019JournalEntryData ds = new F15019JournalEntryData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "AccountListingDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class F15019GetJournalEntryDetailsRow : global::System.Data.DataRow {
            
            private F15019GetJournalEntryDetailsDataTable tableF15019GetJournalEntryDetails;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal F15019GetJournalEntryDetailsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableF15019GetJournalEntryDetails = ((F15019GetJournalEntryDetailsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ReceiptID {
                get {
                    return ((int)(this[this.tableF15019GetJournalEntryDetails.ReceiptIDColumn]));
                }
                set {
                    this[this.tableF15019GetJournalEntryDetails.ReceiptIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ReceiptNumber {
                get {
                    try {
                        return ((string)(this[this.tableF15019GetJournalEntryDetails.ReceiptNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ReceiptNumber\' in table \'F15019GetJournalEntryDetails\' is D" +
                                "BNull.", e);
                    }
                }
                set {
                    this[this.tableF15019GetJournalEntryDetails.ReceiptNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime TransferDate {
                get {
                    return ((global::System.DateTime)(this[this.tableF15019GetJournalEntryDetails.TransferDateColumn]));
                }
                set {
                    this[this.tableF15019GetJournalEntryDetails.TransferDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TransferAmount {
                get {
                    try {
                        return ((decimal)(this[this.tableF15019GetJournalEntryDetails.TransferAmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TransferAmount\' in table \'F15019GetJournalEntryDetails\' is " +
                                "DBNull.", e);
                    }
                }
                set {
                    this[this.tableF15019GetJournalEntryDetails.TransferAmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int UserID {
                get {
                    try {
                        return ((int)(this[this.tableF15019GetJournalEntryDetails.UserIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UserID\' in table \'F15019GetJournalEntryDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableF15019GetJournalEntryDetails.UserIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EnteredBy {
                get {
                    try {
                        return ((string)(this[this.tableF15019GetJournalEntryDetails.EnteredByColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EnteredBy\' in table \'F15019GetJournalEntryDetails\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableF15019GetJournalEntryDetails.EnteredByColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ToAccount {
                get {
                    try {
                        return ((string)(this[this.tableF15019GetJournalEntryDetails.ToAccountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ToAccount\' in table \'F15019GetJournalEntryDetails\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableF15019GetJournalEntryDetails.ToAccountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FromAccount {
                get {
                    try {
                        return ((string)(this[this.tableF15019GetJournalEntryDetails.FromAccountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FromAccount\' in table \'F15019GetJournalEntryDetails\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableF15019GetJournalEntryDetails.FromAccountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PostedID {
                get {
                    try {
                        return ((string)(this[this.tableF15019GetJournalEntryDetails.PostedIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PostedID\' in table \'F15019GetJournalEntryDetails\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableF15019GetJournalEntryDetails.PostedIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TransferDescription {
                get {
                    try {
                        return ((string)(this[this.tableF15019GetJournalEntryDetails.TransferDescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TransferDescription\' in table \'F15019GetJournalEntryDetails" +
                                "\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableF15019GetJournalEntryDetails.TransferDescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ToAccountID {
                get {
                    try {
                        return ((int)(this[this.tableF15019GetJournalEntryDetails.ToAccountIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ToAccountID\' in table \'F15019GetJournalEntryDetails\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableF15019GetJournalEntryDetails.ToAccountIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int FromAccountID {
                get {
                    try {
                        return ((int)(this[this.tableF15019GetJournalEntryDetails.FromAccountIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FromAccountID\' in table \'F15019GetJournalEntryDetails\' is D" +
                                "BNull.", e);
                    }
                }
                set {
                    this[this.tableF15019GetJournalEntryDetails.FromAccountIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool ToAccountIsPending {
                get {
                    try {
                        return ((bool)(this[this.tableF15019GetJournalEntryDetails.ToAccountIsPendingColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ToAccountIsPending\' in table \'F15019GetJournalEntryDetails\'" +
                                " is DBNull.", e);
                    }
                }
                set {
                    this[this.tableF15019GetJournalEntryDetails.ToAccountIsPendingColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool FromAccountIsPending {
                get {
                    try {
                        return ((bool)(this[this.tableF15019GetJournalEntryDetails.FromAccountIsPendingColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FromAccountIsPending\' in table \'F15019GetJournalEntryDetail" +
                                "s\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableF15019GetJournalEntryDetails.FromAccountIsPendingColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsReceiptNumberNull() {
                return this.IsNull(this.tableF15019GetJournalEntryDetails.ReceiptNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetReceiptNumberNull() {
                this[this.tableF15019GetJournalEntryDetails.ReceiptNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTransferAmountNull() {
                return this.IsNull(this.tableF15019GetJournalEntryDetails.TransferAmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTransferAmountNull() {
                this[this.tableF15019GetJournalEntryDetails.TransferAmountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUserIDNull() {
                return this.IsNull(this.tableF15019GetJournalEntryDetails.UserIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUserIDNull() {
                this[this.tableF15019GetJournalEntryDetails.UserIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEnteredByNull() {
                return this.IsNull(this.tableF15019GetJournalEntryDetails.EnteredByColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEnteredByNull() {
                this[this.tableF15019GetJournalEntryDetails.EnteredByColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsToAccountNull() {
                return this.IsNull(this.tableF15019GetJournalEntryDetails.ToAccountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetToAccountNull() {
                this[this.tableF15019GetJournalEntryDetails.ToAccountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFromAccountNull() {
                return this.IsNull(this.tableF15019GetJournalEntryDetails.FromAccountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFromAccountNull() {
                this[this.tableF15019GetJournalEntryDetails.FromAccountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPostedIDNull() {
                return this.IsNull(this.tableF15019GetJournalEntryDetails.PostedIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPostedIDNull() {
                this[this.tableF15019GetJournalEntryDetails.PostedIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTransferDescriptionNull() {
                return this.IsNull(this.tableF15019GetJournalEntryDetails.TransferDescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTransferDescriptionNull() {
                this[this.tableF15019GetJournalEntryDetails.TransferDescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsToAccountIDNull() {
                return this.IsNull(this.tableF15019GetJournalEntryDetails.ToAccountIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetToAccountIDNull() {
                this[this.tableF15019GetJournalEntryDetails.ToAccountIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFromAccountIDNull() {
                return this.IsNull(this.tableF15019GetJournalEntryDetails.FromAccountIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFromAccountIDNull() {
                this[this.tableF15019GetJournalEntryDetails.FromAccountIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsToAccountIsPendingNull() {
                return this.IsNull(this.tableF15019GetJournalEntryDetails.ToAccountIsPendingColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetToAccountIsPendingNull() {
                this[this.tableF15019GetJournalEntryDetails.ToAccountIsPendingColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFromAccountIsPendingNull() {
                return this.IsNull(this.tableF15019GetJournalEntryDetails.FromAccountIsPendingColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFromAccountIsPendingNull() {
                this[this.tableF15019GetJournalEntryDetails.FromAccountIsPendingColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class AccountListingRow : global::System.Data.DataRow {
            
            private AccountListingDataTable tableAccountListing;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal AccountListingRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableAccountListing = ((AccountListingDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int AccountID {
                get {
                    try {
                        return ((int)(this[this.tableAccountListing.AccountIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AccountID\' in table \'AccountListing\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAccountListing.AccountIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AccountName {
                get {
                    try {
                        return ((string)(this[this.tableAccountListing.AccountNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AccountName\' in table \'AccountListing\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAccountListing.AccountNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAccountIDNull() {
                return this.IsNull(this.tableAccountListing.AccountIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAccountIDNull() {
                this[this.tableAccountListing.AccountIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAccountNameNull() {
                return this.IsNull(this.tableAccountListing.AccountNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAccountNameNull() {
                this[this.tableAccountListing.AccountNameColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class F15019GetJournalEntryDetailsRowChangeEvent : global::System.EventArgs {
            
            private F15019GetJournalEntryDetailsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public F15019GetJournalEntryDetailsRowChangeEvent(F15019GetJournalEntryDetailsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public F15019GetJournalEntryDetailsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class AccountListingRowChangeEvent : global::System.EventArgs {
            
            private AccountListingRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AccountListingRowChangeEvent(AccountListingRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AccountListingRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591