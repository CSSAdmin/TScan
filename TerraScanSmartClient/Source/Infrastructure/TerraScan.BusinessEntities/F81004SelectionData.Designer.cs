//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1433
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace TerraScan.BusinessEntities {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("F81004SelectionData")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class F81004SelectionData : global::System.Data.DataSet {
        
        private ListCategoryHeaderDetailsDataTable tableListCategoryHeaderDetails;
        
        private GetSelectionDetailsDataTable tableGetSelectionDetails;
        
        private GetSelectionCatalogDetailsDataTable tableGetSelectionCatalogDetails;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public F81004SelectionData() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected F81004SelectionData(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["ListCategoryHeaderDetails"] != null)) {
                    base.Tables.Add(new ListCategoryHeaderDetailsDataTable(ds.Tables["ListCategoryHeaderDetails"]));
                }
                if ((ds.Tables["GetSelectionDetails"] != null)) {
                    base.Tables.Add(new GetSelectionDetailsDataTable(ds.Tables["GetSelectionDetails"]));
                }
                if ((ds.Tables["GetSelectionCatalogDetails"] != null)) {
                    base.Tables.Add(new GetSelectionCatalogDetailsDataTable(ds.Tables["GetSelectionCatalogDetails"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ListCategoryHeaderDetailsDataTable ListCategoryHeaderDetails {
            get {
                return this.tableListCategoryHeaderDetails;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GetSelectionDetailsDataTable GetSelectionDetails {
            get {
                return this.tableGetSelectionDetails;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GetSelectionCatalogDetailsDataTable GetSelectionCatalogDetails {
            get {
                return this.tableGetSelectionCatalogDetails;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            F81004SelectionData cln = ((F81004SelectionData)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["ListCategoryHeaderDetails"] != null)) {
                    base.Tables.Add(new ListCategoryHeaderDetailsDataTable(ds.Tables["ListCategoryHeaderDetails"]));
                }
                if ((ds.Tables["GetSelectionDetails"] != null)) {
                    base.Tables.Add(new GetSelectionDetailsDataTable(ds.Tables["GetSelectionDetails"]));
                }
                if ((ds.Tables["GetSelectionCatalogDetails"] != null)) {
                    base.Tables.Add(new GetSelectionCatalogDetailsDataTable(ds.Tables["GetSelectionCatalogDetails"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableListCategoryHeaderDetails = ((ListCategoryHeaderDetailsDataTable)(base.Tables["ListCategoryHeaderDetails"]));
            if ((initTable == true)) {
                if ((this.tableListCategoryHeaderDetails != null)) {
                    this.tableListCategoryHeaderDetails.InitVars();
                }
            }
            this.tableGetSelectionDetails = ((GetSelectionDetailsDataTable)(base.Tables["GetSelectionDetails"]));
            if ((initTable == true)) {
                if ((this.tableGetSelectionDetails != null)) {
                    this.tableGetSelectionDetails.InitVars();
                }
            }
            this.tableGetSelectionCatalogDetails = ((GetSelectionCatalogDetailsDataTable)(base.Tables["GetSelectionCatalogDetails"]));
            if ((initTable == true)) {
                if ((this.tableGetSelectionCatalogDetails != null)) {
                    this.tableGetSelectionCatalogDetails.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "F81004SelectionData";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/F81004SelectionData.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableListCategoryHeaderDetails = new ListCategoryHeaderDetailsDataTable();
            base.Tables.Add(this.tableListCategoryHeaderDetails);
            this.tableGetSelectionDetails = new GetSelectionDetailsDataTable();
            base.Tables.Add(this.tableGetSelectionDetails);
            this.tableGetSelectionCatalogDetails = new GetSelectionCatalogDetailsDataTable();
            base.Tables.Add(this.tableGetSelectionCatalogDetails);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeListCategoryHeaderDetails() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeGetSelectionDetails() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeGetSelectionCatalogDetails() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            F81004SelectionData ds = new F81004SelectionData();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void ListCategoryHeaderDetailsRowChangeEventHandler(object sender, ListCategoryHeaderDetailsRowChangeEvent e);
        
        public delegate void GetSelectionDetailsRowChangeEventHandler(object sender, GetSelectionDetailsRowChangeEvent e);
        
        public delegate void GetSelectionCatalogDetailsRowChangeEventHandler(object sender, GetSelectionCatalogDetailsRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ListCategoryHeaderDetailsDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnCategoryID;
            
            private global::System.Data.DataColumn columnCategory;
            
            private global::System.Data.DataColumn columnUnit;
            
            private global::System.Data.DataColumn columnQnty;
            
            private global::System.Data.DataColumn columnFormula;
            
            private global::System.Data.DataColumn columnFee;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListCategoryHeaderDetailsDataTable() {
                this.TableName = "ListCategoryHeaderDetails";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListCategoryHeaderDetailsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ListCategoryHeaderDetailsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CategoryIDColumn {
                get {
                    return this.columnCategoryID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CategoryColumn {
                get {
                    return this.columnCategory;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UnitColumn {
                get {
                    return this.columnUnit;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn QntyColumn {
                get {
                    return this.columnQnty;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FormulaColumn {
                get {
                    return this.columnFormula;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FeeColumn {
                get {
                    return this.columnFee;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListCategoryHeaderDetailsRow this[int index] {
                get {
                    return ((ListCategoryHeaderDetailsRow)(this.Rows[index]));
                }
            }
            
            public event ListCategoryHeaderDetailsRowChangeEventHandler ListCategoryHeaderDetailsRowChanging;
            
            public event ListCategoryHeaderDetailsRowChangeEventHandler ListCategoryHeaderDetailsRowChanged;
            
            public event ListCategoryHeaderDetailsRowChangeEventHandler ListCategoryHeaderDetailsRowDeleting;
            
            public event ListCategoryHeaderDetailsRowChangeEventHandler ListCategoryHeaderDetailsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddListCategoryHeaderDetailsRow(ListCategoryHeaderDetailsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListCategoryHeaderDetailsRow AddListCategoryHeaderDetailsRow(int CategoryID, string Category, string Unit, string Qnty, string Formula, string Fee) {
                ListCategoryHeaderDetailsRow rowListCategoryHeaderDetailsRow = ((ListCategoryHeaderDetailsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        CategoryID,
                        Category,
                        Unit,
                        Qnty,
                        Formula,
                        Fee};
                rowListCategoryHeaderDetailsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowListCategoryHeaderDetailsRow);
                return rowListCategoryHeaderDetailsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ListCategoryHeaderDetailsDataTable cln = ((ListCategoryHeaderDetailsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ListCategoryHeaderDetailsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCategoryID = base.Columns["CategoryID"];
                this.columnCategory = base.Columns["Category"];
                this.columnUnit = base.Columns["Unit"];
                this.columnQnty = base.Columns["Qnty"];
                this.columnFormula = base.Columns["Formula"];
                this.columnFee = base.Columns["Fee"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCategoryID = new global::System.Data.DataColumn("CategoryID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCategoryID);
                this.columnCategory = new global::System.Data.DataColumn("Category", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCategory);
                this.columnUnit = new global::System.Data.DataColumn("Unit", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUnit);
                this.columnQnty = new global::System.Data.DataColumn("Qnty", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnQnty);
                this.columnFormula = new global::System.Data.DataColumn("Formula", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFormula);
                this.columnFee = new global::System.Data.DataColumn("Fee", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFee);
                this.columnCategory.MaxLength = 50;
                this.columnUnit.MaxLength = 4;
                this.columnQnty.MaxLength = 4;
                this.columnFormula.MaxLength = 5;
                this.columnFee.MaxLength = 3;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListCategoryHeaderDetailsRow NewListCategoryHeaderDetailsRow() {
                return ((ListCategoryHeaderDetailsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ListCategoryHeaderDetailsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ListCategoryHeaderDetailsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ListCategoryHeaderDetailsRowChanged != null)) {
                    this.ListCategoryHeaderDetailsRowChanged(this, new ListCategoryHeaderDetailsRowChangeEvent(((ListCategoryHeaderDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ListCategoryHeaderDetailsRowChanging != null)) {
                    this.ListCategoryHeaderDetailsRowChanging(this, new ListCategoryHeaderDetailsRowChangeEvent(((ListCategoryHeaderDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ListCategoryHeaderDetailsRowDeleted != null)) {
                    this.ListCategoryHeaderDetailsRowDeleted(this, new ListCategoryHeaderDetailsRowChangeEvent(((ListCategoryHeaderDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ListCategoryHeaderDetailsRowDeleting != null)) {
                    this.ListCategoryHeaderDetailsRowDeleting(this, new ListCategoryHeaderDetailsRowChangeEvent(((ListCategoryHeaderDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveListCategoryHeaderDetailsRow(ListCategoryHeaderDetailsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F81004SelectionData ds = new F81004SelectionData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ListCategoryHeaderDetailsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class GetSelectionDetailsDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnSelectionID;
            
            private global::System.Data.DataColumn columnEventID;
            
            private global::System.Data.DataColumn columnCategoryID;
            
            private global::System.Data.DataColumn columnCategory;
            
            private global::System.Data.DataColumn columnCatalogID;
            
            private global::System.Data.DataColumn columnUnits;
            
            private global::System.Data.DataColumn columnVQNTY;
            
            private global::System.Data.DataColumn columnFormula;
            
            private global::System.Data.DataColumn columnFee;
            
            private global::System.Data.DataColumn columnUnitFee;
            
            private global::System.Data.DataColumn columnMultiply;
            
            private global::System.Data.DataColumn columnSelection;
            
            private global::System.Data.DataColumn columnEffectiveDate;
            
            private global::System.Data.DataColumn columnIsEdit;
            
            private global::System.Data.DataColumn columnCalculatedFee;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetSelectionDetailsDataTable() {
                this.TableName = "GetSelectionDetails";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetSelectionDetailsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected GetSelectionDetailsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SelectionIDColumn {
                get {
                    return this.columnSelectionID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EventIDColumn {
                get {
                    return this.columnEventID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CategoryIDColumn {
                get {
                    return this.columnCategoryID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CategoryColumn {
                get {
                    return this.columnCategory;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CatalogIDColumn {
                get {
                    return this.columnCatalogID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UnitsColumn {
                get {
                    return this.columnUnits;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn VQNTYColumn {
                get {
                    return this.columnVQNTY;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FormulaColumn {
                get {
                    return this.columnFormula;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FeeColumn {
                get {
                    return this.columnFee;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UnitFeeColumn {
                get {
                    return this.columnUnitFee;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MultiplyColumn {
                get {
                    return this.columnMultiply;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SelectionColumn {
                get {
                    return this.columnSelection;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EffectiveDateColumn {
                get {
                    return this.columnEffectiveDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsEditColumn {
                get {
                    return this.columnIsEdit;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CalculatedFeeColumn {
                get {
                    return this.columnCalculatedFee;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetSelectionDetailsRow this[int index] {
                get {
                    return ((GetSelectionDetailsRow)(this.Rows[index]));
                }
            }
            
            public event GetSelectionDetailsRowChangeEventHandler GetSelectionDetailsRowChanging;
            
            public event GetSelectionDetailsRowChangeEventHandler GetSelectionDetailsRowChanged;
            
            public event GetSelectionDetailsRowChangeEventHandler GetSelectionDetailsRowDeleting;
            
            public event GetSelectionDetailsRowChangeEventHandler GetSelectionDetailsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddGetSelectionDetailsRow(GetSelectionDetailsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetSelectionDetailsRow AddGetSelectionDetailsRow(int SelectionID, int EventID, int CategoryID, string Category, int CatalogID, string Units, decimal VQNTY, string Formula, double Fee, string UnitFee, bool Multiply, string Selection, System.DateTime EffectiveDate, bool IsEdit, double CalculatedFee) {
                GetSelectionDetailsRow rowGetSelectionDetailsRow = ((GetSelectionDetailsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        SelectionID,
                        EventID,
                        CategoryID,
                        Category,
                        CatalogID,
                        Units,
                        VQNTY,
                        Formula,
                        Fee,
                        UnitFee,
                        Multiply,
                        Selection,
                        EffectiveDate,
                        IsEdit,
                        CalculatedFee};
                rowGetSelectionDetailsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowGetSelectionDetailsRow);
                return rowGetSelectionDetailsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                GetSelectionDetailsDataTable cln = ((GetSelectionDetailsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new GetSelectionDetailsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnSelectionID = base.Columns["SelectionID"];
                this.columnEventID = base.Columns["EventID"];
                this.columnCategoryID = base.Columns["CategoryID"];
                this.columnCategory = base.Columns["Category"];
                this.columnCatalogID = base.Columns["CatalogID"];
                this.columnUnits = base.Columns["Units"];
                this.columnVQNTY = base.Columns["VQNTY"];
                this.columnFormula = base.Columns["Formula"];
                this.columnFee = base.Columns["Fee"];
                this.columnUnitFee = base.Columns["UnitFee"];
                this.columnMultiply = base.Columns["Multiply"];
                this.columnSelection = base.Columns["Selection"];
                this.columnEffectiveDate = base.Columns["EffectiveDate"];
                this.columnIsEdit = base.Columns["IsEdit"];
                this.columnCalculatedFee = base.Columns["CalculatedFee"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnSelectionID = new global::System.Data.DataColumn("SelectionID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSelectionID);
                this.columnEventID = new global::System.Data.DataColumn("EventID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEventID);
                this.columnCategoryID = new global::System.Data.DataColumn("CategoryID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCategoryID);
                this.columnCategory = new global::System.Data.DataColumn("Category", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCategory);
                this.columnCatalogID = new global::System.Data.DataColumn("CatalogID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCatalogID);
                this.columnUnits = new global::System.Data.DataColumn("Units", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUnits);
                this.columnVQNTY = new global::System.Data.DataColumn("VQNTY", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVQNTY);
                this.columnFormula = new global::System.Data.DataColumn("Formula", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFormula);
                this.columnFee = new global::System.Data.DataColumn("Fee", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFee);
                this.columnUnitFee = new global::System.Data.DataColumn("UnitFee", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUnitFee);
                this.columnMultiply = new global::System.Data.DataColumn("Multiply", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMultiply);
                this.columnSelection = new global::System.Data.DataColumn("Selection", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSelection);
                this.columnEffectiveDate = new global::System.Data.DataColumn("EffectiveDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEffectiveDate);
                this.columnIsEdit = new global::System.Data.DataColumn("IsEdit", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsEdit);
                this.columnCalculatedFee = new global::System.Data.DataColumn("CalculatedFee", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCalculatedFee);
                this.columnCategory.MaxLength = 50;
                this.columnUnits.MaxLength = 50;
                this.columnFormula.MaxLength = 500;
                this.columnSelection.MaxLength = 60;
                this.columnIsEdit.DefaultValue = ((bool)(false));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetSelectionDetailsRow NewGetSelectionDetailsRow() {
                return ((GetSelectionDetailsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new GetSelectionDetailsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(GetSelectionDetailsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GetSelectionDetailsRowChanged != null)) {
                    this.GetSelectionDetailsRowChanged(this, new GetSelectionDetailsRowChangeEvent(((GetSelectionDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GetSelectionDetailsRowChanging != null)) {
                    this.GetSelectionDetailsRowChanging(this, new GetSelectionDetailsRowChangeEvent(((GetSelectionDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GetSelectionDetailsRowDeleted != null)) {
                    this.GetSelectionDetailsRowDeleted(this, new GetSelectionDetailsRowChangeEvent(((GetSelectionDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GetSelectionDetailsRowDeleting != null)) {
                    this.GetSelectionDetailsRowDeleting(this, new GetSelectionDetailsRowChangeEvent(((GetSelectionDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveGetSelectionDetailsRow(GetSelectionDetailsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F81004SelectionData ds = new F81004SelectionData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "GetSelectionDetailsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class GetSelectionCatalogDetailsDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnCatalogID;
            
            private global::System.Data.DataColumn columnSelection;
            
            private global::System.Data.DataColumn columnUnitFee;
            
            private global::System.Data.DataColumn columnMultiply;
            
            private global::System.Data.DataColumn columnCategoryID;
            
            private global::System.Data.DataColumn columnUnits;
            
            private global::System.Data.DataColumn columnFeeCalc;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetSelectionCatalogDetailsDataTable() {
                this.TableName = "GetSelectionCatalogDetails";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetSelectionCatalogDetailsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected GetSelectionCatalogDetailsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CatalogIDColumn {
                get {
                    return this.columnCatalogID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SelectionColumn {
                get {
                    return this.columnSelection;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UnitFeeColumn {
                get {
                    return this.columnUnitFee;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MultiplyColumn {
                get {
                    return this.columnMultiply;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CategoryIDColumn {
                get {
                    return this.columnCategoryID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UnitsColumn {
                get {
                    return this.columnUnits;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FeeCalcColumn {
                get {
                    return this.columnFeeCalc;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetSelectionCatalogDetailsRow this[int index] {
                get {
                    return ((GetSelectionCatalogDetailsRow)(this.Rows[index]));
                }
            }
            
            public event GetSelectionCatalogDetailsRowChangeEventHandler GetSelectionCatalogDetailsRowChanging;
            
            public event GetSelectionCatalogDetailsRowChangeEventHandler GetSelectionCatalogDetailsRowChanged;
            
            public event GetSelectionCatalogDetailsRowChangeEventHandler GetSelectionCatalogDetailsRowDeleting;
            
            public event GetSelectionCatalogDetailsRowChangeEventHandler GetSelectionCatalogDetailsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddGetSelectionCatalogDetailsRow(GetSelectionCatalogDetailsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetSelectionCatalogDetailsRow AddGetSelectionCatalogDetailsRow(int CatalogID, string Selection, decimal UnitFee, bool Multiply, int CategoryID, string Units, string FeeCalc) {
                GetSelectionCatalogDetailsRow rowGetSelectionCatalogDetailsRow = ((GetSelectionCatalogDetailsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        CatalogID,
                        Selection,
                        UnitFee,
                        Multiply,
                        CategoryID,
                        Units,
                        FeeCalc};
                rowGetSelectionCatalogDetailsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowGetSelectionCatalogDetailsRow);
                return rowGetSelectionCatalogDetailsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                GetSelectionCatalogDetailsDataTable cln = ((GetSelectionCatalogDetailsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new GetSelectionCatalogDetailsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCatalogID = base.Columns["CatalogID"];
                this.columnSelection = base.Columns["Selection"];
                this.columnUnitFee = base.Columns["UnitFee"];
                this.columnMultiply = base.Columns["Multiply"];
                this.columnCategoryID = base.Columns["CategoryID"];
                this.columnUnits = base.Columns["Units"];
                this.columnFeeCalc = base.Columns["FeeCalc"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCatalogID = new global::System.Data.DataColumn("CatalogID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCatalogID);
                this.columnSelection = new global::System.Data.DataColumn("Selection", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSelection);
                this.columnUnitFee = new global::System.Data.DataColumn("UnitFee", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUnitFee);
                this.columnMultiply = new global::System.Data.DataColumn("Multiply", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMultiply);
                this.columnCategoryID = new global::System.Data.DataColumn("CategoryID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCategoryID);
                this.columnUnits = new global::System.Data.DataColumn("Units", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUnits);
                this.columnFeeCalc = new global::System.Data.DataColumn("FeeCalc", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFeeCalc);
                this.columnSelection.MaxLength = 60;
                this.columnUnits.MaxLength = 50;
                this.columnFeeCalc.MaxLength = 500;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetSelectionCatalogDetailsRow NewGetSelectionCatalogDetailsRow() {
                return ((GetSelectionCatalogDetailsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new GetSelectionCatalogDetailsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(GetSelectionCatalogDetailsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GetSelectionCatalogDetailsRowChanged != null)) {
                    this.GetSelectionCatalogDetailsRowChanged(this, new GetSelectionCatalogDetailsRowChangeEvent(((GetSelectionCatalogDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GetSelectionCatalogDetailsRowChanging != null)) {
                    this.GetSelectionCatalogDetailsRowChanging(this, new GetSelectionCatalogDetailsRowChangeEvent(((GetSelectionCatalogDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GetSelectionCatalogDetailsRowDeleted != null)) {
                    this.GetSelectionCatalogDetailsRowDeleted(this, new GetSelectionCatalogDetailsRowChangeEvent(((GetSelectionCatalogDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GetSelectionCatalogDetailsRowDeleting != null)) {
                    this.GetSelectionCatalogDetailsRowDeleting(this, new GetSelectionCatalogDetailsRowChangeEvent(((GetSelectionCatalogDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveGetSelectionCatalogDetailsRow(GetSelectionCatalogDetailsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F81004SelectionData ds = new F81004SelectionData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "GetSelectionCatalogDetailsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ListCategoryHeaderDetailsRow : global::System.Data.DataRow {
            
            private ListCategoryHeaderDetailsDataTable tableListCategoryHeaderDetails;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListCategoryHeaderDetailsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableListCategoryHeaderDetails = ((ListCategoryHeaderDetailsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CategoryID {
                get {
                    try {
                        return ((int)(this[this.tableListCategoryHeaderDetails.CategoryIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CategoryID\' in table \'ListCategoryHeaderDetails\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableListCategoryHeaderDetails.CategoryIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Category {
                get {
                    try {
                        return ((string)(this[this.tableListCategoryHeaderDetails.CategoryColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Category\' in table \'ListCategoryHeaderDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListCategoryHeaderDetails.CategoryColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Unit {
                get {
                    try {
                        return ((string)(this[this.tableListCategoryHeaderDetails.UnitColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Unit\' in table \'ListCategoryHeaderDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListCategoryHeaderDetails.UnitColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Qnty {
                get {
                    try {
                        return ((string)(this[this.tableListCategoryHeaderDetails.QntyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Qnty\' in table \'ListCategoryHeaderDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListCategoryHeaderDetails.QntyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Formula {
                get {
                    try {
                        return ((string)(this[this.tableListCategoryHeaderDetails.FormulaColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Formula\' in table \'ListCategoryHeaderDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListCategoryHeaderDetails.FormulaColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Fee {
                get {
                    try {
                        return ((string)(this[this.tableListCategoryHeaderDetails.FeeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Fee\' in table \'ListCategoryHeaderDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListCategoryHeaderDetails.FeeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCategoryIDNull() {
                return this.IsNull(this.tableListCategoryHeaderDetails.CategoryIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCategoryIDNull() {
                this[this.tableListCategoryHeaderDetails.CategoryIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCategoryNull() {
                return this.IsNull(this.tableListCategoryHeaderDetails.CategoryColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCategoryNull() {
                this[this.tableListCategoryHeaderDetails.CategoryColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUnitNull() {
                return this.IsNull(this.tableListCategoryHeaderDetails.UnitColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUnitNull() {
                this[this.tableListCategoryHeaderDetails.UnitColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsQntyNull() {
                return this.IsNull(this.tableListCategoryHeaderDetails.QntyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetQntyNull() {
                this[this.tableListCategoryHeaderDetails.QntyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFormulaNull() {
                return this.IsNull(this.tableListCategoryHeaderDetails.FormulaColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFormulaNull() {
                this[this.tableListCategoryHeaderDetails.FormulaColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFeeNull() {
                return this.IsNull(this.tableListCategoryHeaderDetails.FeeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFeeNull() {
                this[this.tableListCategoryHeaderDetails.FeeColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class GetSelectionDetailsRow : global::System.Data.DataRow {
            
            private GetSelectionDetailsDataTable tableGetSelectionDetails;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetSelectionDetailsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableGetSelectionDetails = ((GetSelectionDetailsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SelectionID {
                get {
                    try {
                        return ((int)(this[this.tableGetSelectionDetails.SelectionIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SelectionID\' in table \'GetSelectionDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetSelectionDetails.SelectionIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int EventID {
                get {
                    try {
                        return ((int)(this[this.tableGetSelectionDetails.EventIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EventID\' in table \'GetSelectionDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetSelectionDetails.EventIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CategoryID {
                get {
                    try {
                        return ((int)(this[this.tableGetSelectionDetails.CategoryIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CategoryID\' in table \'GetSelectionDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetSelectionDetails.CategoryIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Category {
                get {
                    if (this.IsCategoryNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableGetSelectionDetails.CategoryColumn]));
                    }
                }
                set {
                    this[this.tableGetSelectionDetails.CategoryColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CatalogID {
                get {
                    try {
                        return ((int)(this[this.tableGetSelectionDetails.CatalogIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CatalogID\' in table \'GetSelectionDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetSelectionDetails.CatalogIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Units {
                get {
                    if (this.IsUnitsNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableGetSelectionDetails.UnitsColumn]));
                    }
                }
                set {
                    this[this.tableGetSelectionDetails.UnitsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal VQNTY {
                get {
                    try {
                        return ((decimal)(this[this.tableGetSelectionDetails.VQNTYColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'VQNTY\' in table \'GetSelectionDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetSelectionDetails.VQNTYColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Formula {
                get {
                    if (this.IsFormulaNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableGetSelectionDetails.FormulaColumn]));
                    }
                }
                set {
                    this[this.tableGetSelectionDetails.FormulaColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Fee {
                get {
                    try {
                        return ((double)(this[this.tableGetSelectionDetails.FeeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Fee\' in table \'GetSelectionDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetSelectionDetails.FeeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UnitFee {
                get {
                    if (this.IsUnitFeeNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableGetSelectionDetails.UnitFeeColumn]));
                    }
                }
                set {
                    this[this.tableGetSelectionDetails.UnitFeeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Multiply {
                get {
                    try {
                        return ((bool)(this[this.tableGetSelectionDetails.MultiplyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Multiply\' in table \'GetSelectionDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetSelectionDetails.MultiplyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Selection {
                get {
                    if (this.IsSelectionNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableGetSelectionDetails.SelectionColumn]));
                    }
                }
                set {
                    this[this.tableGetSelectionDetails.SelectionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime EffectiveDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableGetSelectionDetails.EffectiveDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EffectiveDate\' in table \'GetSelectionDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetSelectionDetails.EffectiveDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEdit {
                get {
                    try {
                        return ((bool)(this[this.tableGetSelectionDetails.IsEditColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsEdit\' in table \'GetSelectionDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetSelectionDetails.IsEditColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double CalculatedFee {
                get {
                    try {
                        return ((double)(this[this.tableGetSelectionDetails.CalculatedFeeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CalculatedFee\' in table \'GetSelectionDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetSelectionDetails.CalculatedFeeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSelectionIDNull() {
                return this.IsNull(this.tableGetSelectionDetails.SelectionIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSelectionIDNull() {
                this[this.tableGetSelectionDetails.SelectionIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEventIDNull() {
                return this.IsNull(this.tableGetSelectionDetails.EventIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEventIDNull() {
                this[this.tableGetSelectionDetails.EventIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCategoryIDNull() {
                return this.IsNull(this.tableGetSelectionDetails.CategoryIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCategoryIDNull() {
                this[this.tableGetSelectionDetails.CategoryIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCategoryNull() {
                return this.IsNull(this.tableGetSelectionDetails.CategoryColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCategoryNull() {
                this[this.tableGetSelectionDetails.CategoryColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCatalogIDNull() {
                return this.IsNull(this.tableGetSelectionDetails.CatalogIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCatalogIDNull() {
                this[this.tableGetSelectionDetails.CatalogIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUnitsNull() {
                return this.IsNull(this.tableGetSelectionDetails.UnitsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUnitsNull() {
                this[this.tableGetSelectionDetails.UnitsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsVQNTYNull() {
                return this.IsNull(this.tableGetSelectionDetails.VQNTYColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetVQNTYNull() {
                this[this.tableGetSelectionDetails.VQNTYColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFormulaNull() {
                return this.IsNull(this.tableGetSelectionDetails.FormulaColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFormulaNull() {
                this[this.tableGetSelectionDetails.FormulaColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFeeNull() {
                return this.IsNull(this.tableGetSelectionDetails.FeeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFeeNull() {
                this[this.tableGetSelectionDetails.FeeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUnitFeeNull() {
                return this.IsNull(this.tableGetSelectionDetails.UnitFeeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUnitFeeNull() {
                this[this.tableGetSelectionDetails.UnitFeeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMultiplyNull() {
                return this.IsNull(this.tableGetSelectionDetails.MultiplyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMultiplyNull() {
                this[this.tableGetSelectionDetails.MultiplyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSelectionNull() {
                return this.IsNull(this.tableGetSelectionDetails.SelectionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSelectionNull() {
                this[this.tableGetSelectionDetails.SelectionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEffectiveDateNull() {
                return this.IsNull(this.tableGetSelectionDetails.EffectiveDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEffectiveDateNull() {
                this[this.tableGetSelectionDetails.EffectiveDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsEditNull() {
                return this.IsNull(this.tableGetSelectionDetails.IsEditColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsEditNull() {
                this[this.tableGetSelectionDetails.IsEditColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCalculatedFeeNull() {
                return this.IsNull(this.tableGetSelectionDetails.CalculatedFeeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCalculatedFeeNull() {
                this[this.tableGetSelectionDetails.CalculatedFeeColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class GetSelectionCatalogDetailsRow : global::System.Data.DataRow {
            
            private GetSelectionCatalogDetailsDataTable tableGetSelectionCatalogDetails;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetSelectionCatalogDetailsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableGetSelectionCatalogDetails = ((GetSelectionCatalogDetailsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CatalogID {
                get {
                    try {
                        return ((int)(this[this.tableGetSelectionCatalogDetails.CatalogIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CatalogID\' in table \'GetSelectionCatalogDetails\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableGetSelectionCatalogDetails.CatalogIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Selection {
                get {
                    if (this.IsSelectionNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableGetSelectionCatalogDetails.SelectionColumn]));
                    }
                }
                set {
                    this[this.tableGetSelectionCatalogDetails.SelectionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal UnitFee {
                get {
                    try {
                        return ((decimal)(this[this.tableGetSelectionCatalogDetails.UnitFeeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UnitFee\' in table \'GetSelectionCatalogDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetSelectionCatalogDetails.UnitFeeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Multiply {
                get {
                    try {
                        return ((bool)(this[this.tableGetSelectionCatalogDetails.MultiplyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Multiply\' in table \'GetSelectionCatalogDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetSelectionCatalogDetails.MultiplyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CategoryID {
                get {
                    try {
                        return ((int)(this[this.tableGetSelectionCatalogDetails.CategoryIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CategoryID\' in table \'GetSelectionCatalogDetails\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableGetSelectionCatalogDetails.CategoryIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Units {
                get {
                    if (this.IsUnitsNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableGetSelectionCatalogDetails.UnitsColumn]));
                    }
                }
                set {
                    this[this.tableGetSelectionCatalogDetails.UnitsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FeeCalc {
                get {
                    if (this.IsFeeCalcNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableGetSelectionCatalogDetails.FeeCalcColumn]));
                    }
                }
                set {
                    this[this.tableGetSelectionCatalogDetails.FeeCalcColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCatalogIDNull() {
                return this.IsNull(this.tableGetSelectionCatalogDetails.CatalogIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCatalogIDNull() {
                this[this.tableGetSelectionCatalogDetails.CatalogIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSelectionNull() {
                return this.IsNull(this.tableGetSelectionCatalogDetails.SelectionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSelectionNull() {
                this[this.tableGetSelectionCatalogDetails.SelectionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUnitFeeNull() {
                return this.IsNull(this.tableGetSelectionCatalogDetails.UnitFeeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUnitFeeNull() {
                this[this.tableGetSelectionCatalogDetails.UnitFeeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMultiplyNull() {
                return this.IsNull(this.tableGetSelectionCatalogDetails.MultiplyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMultiplyNull() {
                this[this.tableGetSelectionCatalogDetails.MultiplyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCategoryIDNull() {
                return this.IsNull(this.tableGetSelectionCatalogDetails.CategoryIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCategoryIDNull() {
                this[this.tableGetSelectionCatalogDetails.CategoryIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUnitsNull() {
                return this.IsNull(this.tableGetSelectionCatalogDetails.UnitsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUnitsNull() {
                this[this.tableGetSelectionCatalogDetails.UnitsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFeeCalcNull() {
                return this.IsNull(this.tableGetSelectionCatalogDetails.FeeCalcColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFeeCalcNull() {
                this[this.tableGetSelectionCatalogDetails.FeeCalcColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ListCategoryHeaderDetailsRowChangeEvent : global::System.EventArgs {
            
            private ListCategoryHeaderDetailsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListCategoryHeaderDetailsRowChangeEvent(ListCategoryHeaderDetailsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListCategoryHeaderDetailsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class GetSelectionDetailsRowChangeEvent : global::System.EventArgs {
            
            private GetSelectionDetailsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetSelectionDetailsRowChangeEvent(GetSelectionDetailsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetSelectionDetailsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class GetSelectionCatalogDetailsRowChangeEvent : global::System.EventArgs {
            
            private GetSelectionCatalogDetailsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetSelectionCatalogDetailsRowChangeEvent(GetSelectionCatalogDetailsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetSelectionCatalogDetailsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591