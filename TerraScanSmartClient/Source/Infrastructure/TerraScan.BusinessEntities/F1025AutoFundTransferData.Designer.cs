//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1433
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace TerraScan.BusinessEntities {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("F1025AutoFundTransferData")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class F1025AutoFundTransferData : global::System.Data.DataSet {
        
        private ListAutoFundAccountTransferDetailsOldDataTable tableListAutoFundAccountTransferDetailsOld;
        
        private ListAutoFundRollYearDataTable tableListAutoFundRollYear;
        
        private AutoCompleteSubFundListDataTable tableAutoCompleteSubFundList;
        
        private ListAutoFundAccountTransferDetailsDataTable tableListAutoFundAccountTransferDetails;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public F1025AutoFundTransferData() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected F1025AutoFundTransferData(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["ListAutoFundAccountTransferDetailsOld"] != null)) {
                    base.Tables.Add(new ListAutoFundAccountTransferDetailsOldDataTable(ds.Tables["ListAutoFundAccountTransferDetailsOld"]));
                }
                if ((ds.Tables["ListAutoFundRollYear"] != null)) {
                    base.Tables.Add(new ListAutoFundRollYearDataTable(ds.Tables["ListAutoFundRollYear"]));
                }
                if ((ds.Tables["AutoCompleteSubFundList"] != null)) {
                    base.Tables.Add(new AutoCompleteSubFundListDataTable(ds.Tables["AutoCompleteSubFundList"]));
                }
                if ((ds.Tables["ListAutoFundAccountTransferDetails"] != null)) {
                    base.Tables.Add(new ListAutoFundAccountTransferDetailsDataTable(ds.Tables["ListAutoFundAccountTransferDetails"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ListAutoFundAccountTransferDetailsOldDataTable ListAutoFundAccountTransferDetailsOld {
            get {
                return this.tableListAutoFundAccountTransferDetailsOld;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ListAutoFundRollYearDataTable ListAutoFundRollYear {
            get {
                return this.tableListAutoFundRollYear;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public AutoCompleteSubFundListDataTable AutoCompleteSubFundList {
            get {
                return this.tableAutoCompleteSubFundList;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ListAutoFundAccountTransferDetailsDataTable ListAutoFundAccountTransferDetails {
            get {
                return this.tableListAutoFundAccountTransferDetails;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            F1025AutoFundTransferData cln = ((F1025AutoFundTransferData)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["ListAutoFundAccountTransferDetailsOld"] != null)) {
                    base.Tables.Add(new ListAutoFundAccountTransferDetailsOldDataTable(ds.Tables["ListAutoFundAccountTransferDetailsOld"]));
                }
                if ((ds.Tables["ListAutoFundRollYear"] != null)) {
                    base.Tables.Add(new ListAutoFundRollYearDataTable(ds.Tables["ListAutoFundRollYear"]));
                }
                if ((ds.Tables["AutoCompleteSubFundList"] != null)) {
                    base.Tables.Add(new AutoCompleteSubFundListDataTable(ds.Tables["AutoCompleteSubFundList"]));
                }
                if ((ds.Tables["ListAutoFundAccountTransferDetails"] != null)) {
                    base.Tables.Add(new ListAutoFundAccountTransferDetailsDataTable(ds.Tables["ListAutoFundAccountTransferDetails"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableListAutoFundAccountTransferDetailsOld = ((ListAutoFundAccountTransferDetailsOldDataTable)(base.Tables["ListAutoFundAccountTransferDetailsOld"]));
            if ((initTable == true)) {
                if ((this.tableListAutoFundAccountTransferDetailsOld != null)) {
                    this.tableListAutoFundAccountTransferDetailsOld.InitVars();
                }
            }
            this.tableListAutoFundRollYear = ((ListAutoFundRollYearDataTable)(base.Tables["ListAutoFundRollYear"]));
            if ((initTable == true)) {
                if ((this.tableListAutoFundRollYear != null)) {
                    this.tableListAutoFundRollYear.InitVars();
                }
            }
            this.tableAutoCompleteSubFundList = ((AutoCompleteSubFundListDataTable)(base.Tables["AutoCompleteSubFundList"]));
            if ((initTable == true)) {
                if ((this.tableAutoCompleteSubFundList != null)) {
                    this.tableAutoCompleteSubFundList.InitVars();
                }
            }
            this.tableListAutoFundAccountTransferDetails = ((ListAutoFundAccountTransferDetailsDataTable)(base.Tables["ListAutoFundAccountTransferDetails"]));
            if ((initTable == true)) {
                if ((this.tableListAutoFundAccountTransferDetails != null)) {
                    this.tableListAutoFundAccountTransferDetails.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "F1025AutoFundTransferData";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/F1025AutoFundTransferData.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableListAutoFundAccountTransferDetailsOld = new ListAutoFundAccountTransferDetailsOldDataTable();
            base.Tables.Add(this.tableListAutoFundAccountTransferDetailsOld);
            this.tableListAutoFundRollYear = new ListAutoFundRollYearDataTable();
            base.Tables.Add(this.tableListAutoFundRollYear);
            this.tableAutoCompleteSubFundList = new AutoCompleteSubFundListDataTable();
            base.Tables.Add(this.tableAutoCompleteSubFundList);
            this.tableListAutoFundAccountTransferDetails = new ListAutoFundAccountTransferDetailsDataTable();
            base.Tables.Add(this.tableListAutoFundAccountTransferDetails);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeListAutoFundAccountTransferDetailsOld() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeListAutoFundRollYear() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeAutoCompleteSubFundList() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeListAutoFundAccountTransferDetails() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            F1025AutoFundTransferData ds = new F1025AutoFundTransferData();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void ListAutoFundAccountTransferDetailsOldRowChangeEventHandler(object sender, ListAutoFundAccountTransferDetailsOldRowChangeEvent e);
        
        public delegate void ListAutoFundRollYearRowChangeEventHandler(object sender, ListAutoFundRollYearRowChangeEvent e);
        
        public delegate void AutoCompleteSubFundListRowChangeEventHandler(object sender, AutoCompleteSubFundListRowChangeEvent e);
        
        public delegate void ListAutoFundAccountTransferDetailsRowChangeEventHandler(object sender, ListAutoFundAccountTransferDetailsRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ListAutoFundAccountTransferDetailsOldDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnAutoTransferID;
            
            private global::System.Data.DataColumn columnSourceSubFundID;
            
            private global::System.Data.DataColumn columnDestinationAccountID;
            
            private global::System.Data.DataColumn columnRollYear;
            
            private global::System.Data.DataColumn columnTransaferRate;
            
            private global::System.Data.DataColumn columnSubFundID;
            
            private global::System.Data.DataColumn columnAccountName;
            
            private global::System.Data.DataColumn columnSubFund;
            
            private global::System.Data.DataColumn columnIsPending;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListAutoFundAccountTransferDetailsOldDataTable() {
                this.TableName = "ListAutoFundAccountTransferDetailsOld";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListAutoFundAccountTransferDetailsOldDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ListAutoFundAccountTransferDetailsOldDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AutoTransferIDColumn {
                get {
                    return this.columnAutoTransferID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SourceSubFundIDColumn {
                get {
                    return this.columnSourceSubFundID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DestinationAccountIDColumn {
                get {
                    return this.columnDestinationAccountID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RollYearColumn {
                get {
                    return this.columnRollYear;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TransaferRateColumn {
                get {
                    return this.columnTransaferRate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SubFundIDColumn {
                get {
                    return this.columnSubFundID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AccountNameColumn {
                get {
                    return this.columnAccountName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SubFundColumn {
                get {
                    return this.columnSubFund;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsPendingColumn {
                get {
                    return this.columnIsPending;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListAutoFundAccountTransferDetailsOldRow this[int index] {
                get {
                    return ((ListAutoFundAccountTransferDetailsOldRow)(this.Rows[index]));
                }
            }
            
            public event ListAutoFundAccountTransferDetailsOldRowChangeEventHandler ListAutoFundAccountTransferDetailsOldRowChanging;
            
            public event ListAutoFundAccountTransferDetailsOldRowChangeEventHandler ListAutoFundAccountTransferDetailsOldRowChanged;
            
            public event ListAutoFundAccountTransferDetailsOldRowChangeEventHandler ListAutoFundAccountTransferDetailsOldRowDeleting;
            
            public event ListAutoFundAccountTransferDetailsOldRowChangeEventHandler ListAutoFundAccountTransferDetailsOldRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddListAutoFundAccountTransferDetailsOldRow(ListAutoFundAccountTransferDetailsOldRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListAutoFundAccountTransferDetailsOldRow AddListAutoFundAccountTransferDetailsOldRow(int AutoTransferID, int SourceSubFundID, int DestinationAccountID, short RollYear, decimal TransaferRate, int SubFundID, string AccountName, string SubFund, short IsPending) {
                ListAutoFundAccountTransferDetailsOldRow rowListAutoFundAccountTransferDetailsOldRow = ((ListAutoFundAccountTransferDetailsOldRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        AutoTransferID,
                        SourceSubFundID,
                        DestinationAccountID,
                        RollYear,
                        TransaferRate,
                        SubFundID,
                        AccountName,
                        SubFund,
                        IsPending};
                rowListAutoFundAccountTransferDetailsOldRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowListAutoFundAccountTransferDetailsOldRow);
                return rowListAutoFundAccountTransferDetailsOldRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ListAutoFundAccountTransferDetailsOldDataTable cln = ((ListAutoFundAccountTransferDetailsOldDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ListAutoFundAccountTransferDetailsOldDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnAutoTransferID = base.Columns["AutoTransferID"];
                this.columnSourceSubFundID = base.Columns["SourceSubFundID"];
                this.columnDestinationAccountID = base.Columns["DestinationAccountID"];
                this.columnRollYear = base.Columns["RollYear"];
                this.columnTransaferRate = base.Columns["TransaferRate"];
                this.columnSubFundID = base.Columns["SubFundID"];
                this.columnAccountName = base.Columns["AccountName"];
                this.columnSubFund = base.Columns["SubFund"];
                this.columnIsPending = base.Columns["IsPending"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnAutoTransferID = new global::System.Data.DataColumn("AutoTransferID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAutoTransferID);
                this.columnSourceSubFundID = new global::System.Data.DataColumn("SourceSubFundID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSourceSubFundID);
                this.columnDestinationAccountID = new global::System.Data.DataColumn("DestinationAccountID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDestinationAccountID);
                this.columnRollYear = new global::System.Data.DataColumn("RollYear", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRollYear);
                this.columnTransaferRate = new global::System.Data.DataColumn("TransaferRate", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTransaferRate);
                this.columnSubFundID = new global::System.Data.DataColumn("SubFundID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSubFundID);
                this.columnAccountName = new global::System.Data.DataColumn("AccountName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAccountName);
                this.columnSubFund = new global::System.Data.DataColumn("SubFund", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSubFund);
                this.columnIsPending = new global::System.Data.DataColumn("IsPending", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsPending);
                this.columnAutoTransferID.DefaultValue = ((int)(0));
                this.columnAccountName.MaxLength = 262;
                this.columnSubFund.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListAutoFundAccountTransferDetailsOldRow NewListAutoFundAccountTransferDetailsOldRow() {
                return ((ListAutoFundAccountTransferDetailsOldRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ListAutoFundAccountTransferDetailsOldRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ListAutoFundAccountTransferDetailsOldRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ListAutoFundAccountTransferDetailsOldRowChanged != null)) {
                    this.ListAutoFundAccountTransferDetailsOldRowChanged(this, new ListAutoFundAccountTransferDetailsOldRowChangeEvent(((ListAutoFundAccountTransferDetailsOldRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ListAutoFundAccountTransferDetailsOldRowChanging != null)) {
                    this.ListAutoFundAccountTransferDetailsOldRowChanging(this, new ListAutoFundAccountTransferDetailsOldRowChangeEvent(((ListAutoFundAccountTransferDetailsOldRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ListAutoFundAccountTransferDetailsOldRowDeleted != null)) {
                    this.ListAutoFundAccountTransferDetailsOldRowDeleted(this, new ListAutoFundAccountTransferDetailsOldRowChangeEvent(((ListAutoFundAccountTransferDetailsOldRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ListAutoFundAccountTransferDetailsOldRowDeleting != null)) {
                    this.ListAutoFundAccountTransferDetailsOldRowDeleting(this, new ListAutoFundAccountTransferDetailsOldRowChangeEvent(((ListAutoFundAccountTransferDetailsOldRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveListAutoFundAccountTransferDetailsOldRow(ListAutoFundAccountTransferDetailsOldRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F1025AutoFundTransferData ds = new F1025AutoFundTransferData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ListAutoFundAccountTransferDetailsOldDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ListAutoFundRollYearDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnRollYear;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListAutoFundRollYearDataTable() {
                this.TableName = "ListAutoFundRollYear";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListAutoFundRollYearDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ListAutoFundRollYearDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RollYearColumn {
                get {
                    return this.columnRollYear;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListAutoFundRollYearRow this[int index] {
                get {
                    return ((ListAutoFundRollYearRow)(this.Rows[index]));
                }
            }
            
            public event ListAutoFundRollYearRowChangeEventHandler ListAutoFundRollYearRowChanging;
            
            public event ListAutoFundRollYearRowChangeEventHandler ListAutoFundRollYearRowChanged;
            
            public event ListAutoFundRollYearRowChangeEventHandler ListAutoFundRollYearRowDeleting;
            
            public event ListAutoFundRollYearRowChangeEventHandler ListAutoFundRollYearRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddListAutoFundRollYearRow(ListAutoFundRollYearRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListAutoFundRollYearRow AddListAutoFundRollYearRow(short RollYear) {
                ListAutoFundRollYearRow rowListAutoFundRollYearRow = ((ListAutoFundRollYearRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        RollYear};
                rowListAutoFundRollYearRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowListAutoFundRollYearRow);
                return rowListAutoFundRollYearRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ListAutoFundRollYearDataTable cln = ((ListAutoFundRollYearDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ListAutoFundRollYearDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnRollYear = base.Columns["RollYear"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnRollYear = new global::System.Data.DataColumn("RollYear", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRollYear);
                this.columnRollYear.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListAutoFundRollYearRow NewListAutoFundRollYearRow() {
                return ((ListAutoFundRollYearRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ListAutoFundRollYearRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ListAutoFundRollYearRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ListAutoFundRollYearRowChanged != null)) {
                    this.ListAutoFundRollYearRowChanged(this, new ListAutoFundRollYearRowChangeEvent(((ListAutoFundRollYearRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ListAutoFundRollYearRowChanging != null)) {
                    this.ListAutoFundRollYearRowChanging(this, new ListAutoFundRollYearRowChangeEvent(((ListAutoFundRollYearRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ListAutoFundRollYearRowDeleted != null)) {
                    this.ListAutoFundRollYearRowDeleted(this, new ListAutoFundRollYearRowChangeEvent(((ListAutoFundRollYearRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ListAutoFundRollYearRowDeleting != null)) {
                    this.ListAutoFundRollYearRowDeleting(this, new ListAutoFundRollYearRowChangeEvent(((ListAutoFundRollYearRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveListAutoFundRollYearRow(ListAutoFundRollYearRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F1025AutoFundTransferData ds = new F1025AutoFundTransferData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ListAutoFundRollYearDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class AutoCompleteSubFundListDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnSubFundID;
            
            private global::System.Data.DataColumn columnSubFund;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AutoCompleteSubFundListDataTable() {
                this.TableName = "AutoCompleteSubFundList";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal AutoCompleteSubFundListDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected AutoCompleteSubFundListDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SubFundIDColumn {
                get {
                    return this.columnSubFundID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SubFundColumn {
                get {
                    return this.columnSubFund;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AutoCompleteSubFundListRow this[int index] {
                get {
                    return ((AutoCompleteSubFundListRow)(this.Rows[index]));
                }
            }
            
            public event AutoCompleteSubFundListRowChangeEventHandler AutoCompleteSubFundListRowChanging;
            
            public event AutoCompleteSubFundListRowChangeEventHandler AutoCompleteSubFundListRowChanged;
            
            public event AutoCompleteSubFundListRowChangeEventHandler AutoCompleteSubFundListRowDeleting;
            
            public event AutoCompleteSubFundListRowChangeEventHandler AutoCompleteSubFundListRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddAutoCompleteSubFundListRow(AutoCompleteSubFundListRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AutoCompleteSubFundListRow AddAutoCompleteSubFundListRow(int SubFundID, string SubFund) {
                AutoCompleteSubFundListRow rowAutoCompleteSubFundListRow = ((AutoCompleteSubFundListRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        SubFundID,
                        SubFund};
                rowAutoCompleteSubFundListRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowAutoCompleteSubFundListRow);
                return rowAutoCompleteSubFundListRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                AutoCompleteSubFundListDataTable cln = ((AutoCompleteSubFundListDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new AutoCompleteSubFundListDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnSubFundID = base.Columns["SubFundID"];
                this.columnSubFund = base.Columns["SubFund"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnSubFundID = new global::System.Data.DataColumn("SubFundID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSubFundID);
                this.columnSubFund = new global::System.Data.DataColumn("SubFund", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSubFund);
                this.columnSubFundID.AllowDBNull = false;
                this.columnSubFund.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AutoCompleteSubFundListRow NewAutoCompleteSubFundListRow() {
                return ((AutoCompleteSubFundListRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new AutoCompleteSubFundListRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(AutoCompleteSubFundListRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.AutoCompleteSubFundListRowChanged != null)) {
                    this.AutoCompleteSubFundListRowChanged(this, new AutoCompleteSubFundListRowChangeEvent(((AutoCompleteSubFundListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.AutoCompleteSubFundListRowChanging != null)) {
                    this.AutoCompleteSubFundListRowChanging(this, new AutoCompleteSubFundListRowChangeEvent(((AutoCompleteSubFundListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.AutoCompleteSubFundListRowDeleted != null)) {
                    this.AutoCompleteSubFundListRowDeleted(this, new AutoCompleteSubFundListRowChangeEvent(((AutoCompleteSubFundListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.AutoCompleteSubFundListRowDeleting != null)) {
                    this.AutoCompleteSubFundListRowDeleting(this, new AutoCompleteSubFundListRowChangeEvent(((AutoCompleteSubFundListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveAutoCompleteSubFundListRow(AutoCompleteSubFundListRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F1025AutoFundTransferData ds = new F1025AutoFundTransferData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "AutoCompleteSubFundListDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ListAutoFundAccountTransferDetailsDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnAutoTransferID;
            
            private global::System.Data.DataColumn columnSourceKeyID;
            
            private global::System.Data.DataColumn columnDestinationAccountID;
            
            private global::System.Data.DataColumn columnSourceRollyear;
            
            private global::System.Data.DataColumn columnTransaferRate;
            
            private global::System.Data.DataColumn columnSourceKey;
            
            private global::System.Data.DataColumn columnAccountName;
            
            private global::System.Data.DataColumn columnSourceKeyName;
            
            private global::System.Data.DataColumn columnIsActive;
            
            private global::System.Data.DataColumn columnIsDestinationAcctPending;
            
            private global::System.Data.DataColumn columnIsActive1;
            
            private global::System.Data.DataColumn columnIsSubFund;
            
            private global::System.Data.DataColumn columnDestinationRollyear;
            
            private global::System.Data.DataColumn columnIsSourceAcctPending;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListAutoFundAccountTransferDetailsDataTable() {
                this.TableName = "ListAutoFundAccountTransferDetails";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListAutoFundAccountTransferDetailsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ListAutoFundAccountTransferDetailsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AutoTransferIDColumn {
                get {
                    return this.columnAutoTransferID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SourceKeyIDColumn {
                get {
                    return this.columnSourceKeyID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DestinationAccountIDColumn {
                get {
                    return this.columnDestinationAccountID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SourceRollyearColumn {
                get {
                    return this.columnSourceRollyear;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TransaferRateColumn {
                get {
                    return this.columnTransaferRate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SourceKeyColumn {
                get {
                    return this.columnSourceKey;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AccountNameColumn {
                get {
                    return this.columnAccountName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SourceKeyNameColumn {
                get {
                    return this.columnSourceKeyName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsActiveColumn {
                get {
                    return this.columnIsActive;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsDestinationAcctPendingColumn {
                get {
                    return this.columnIsDestinationAcctPending;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsActive1Column {
                get {
                    return this.columnIsActive1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsSubFundColumn {
                get {
                    return this.columnIsSubFund;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DestinationRollyearColumn {
                get {
                    return this.columnDestinationRollyear;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsSourceAcctPendingColumn {
                get {
                    return this.columnIsSourceAcctPending;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListAutoFundAccountTransferDetailsRow this[int index] {
                get {
                    return ((ListAutoFundAccountTransferDetailsRow)(this.Rows[index]));
                }
            }
            
            public event ListAutoFundAccountTransferDetailsRowChangeEventHandler ListAutoFundAccountTransferDetailsRowChanging;
            
            public event ListAutoFundAccountTransferDetailsRowChangeEventHandler ListAutoFundAccountTransferDetailsRowChanged;
            
            public event ListAutoFundAccountTransferDetailsRowChangeEventHandler ListAutoFundAccountTransferDetailsRowDeleting;
            
            public event ListAutoFundAccountTransferDetailsRowChangeEventHandler ListAutoFundAccountTransferDetailsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddListAutoFundAccountTransferDetailsRow(ListAutoFundAccountTransferDetailsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListAutoFundAccountTransferDetailsRow AddListAutoFundAccountTransferDetailsRow(int AutoTransferID, int SourceKeyID, int DestinationAccountID, short SourceRollyear, decimal TransaferRate, int SourceKey, string AccountName, string SourceKeyName, int IsActive, bool IsDestinationAcctPending, bool IsActive1, byte IsSubFund, short DestinationRollyear, bool IsSourceAcctPending) {
                ListAutoFundAccountTransferDetailsRow rowListAutoFundAccountTransferDetailsRow = ((ListAutoFundAccountTransferDetailsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        AutoTransferID,
                        SourceKeyID,
                        DestinationAccountID,
                        SourceRollyear,
                        TransaferRate,
                        SourceKey,
                        AccountName,
                        SourceKeyName,
                        IsActive,
                        IsDestinationAcctPending,
                        IsActive1,
                        IsSubFund,
                        DestinationRollyear,
                        IsSourceAcctPending};
                rowListAutoFundAccountTransferDetailsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowListAutoFundAccountTransferDetailsRow);
                return rowListAutoFundAccountTransferDetailsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ListAutoFundAccountTransferDetailsDataTable cln = ((ListAutoFundAccountTransferDetailsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ListAutoFundAccountTransferDetailsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnAutoTransferID = base.Columns["AutoTransferID"];
                this.columnSourceKeyID = base.Columns["SourceKeyID"];
                this.columnDestinationAccountID = base.Columns["DestinationAccountID"];
                this.columnSourceRollyear = base.Columns["SourceRollyear"];
                this.columnTransaferRate = base.Columns["TransaferRate"];
                this.columnSourceKey = base.Columns["SourceKey"];
                this.columnAccountName = base.Columns["AccountName"];
                this.columnSourceKeyName = base.Columns["SourceKeyName"];
                this.columnIsActive = base.Columns["IsActive"];
                this.columnIsDestinationAcctPending = base.Columns["IsDestinationAcctPending"];
                this.columnIsActive1 = base.Columns["IsActive1"];
                this.columnIsSubFund = base.Columns["IsSubFund"];
                this.columnDestinationRollyear = base.Columns["DestinationRollyear"];
                this.columnIsSourceAcctPending = base.Columns["IsSourceAcctPending"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnAutoTransferID = new global::System.Data.DataColumn("AutoTransferID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAutoTransferID);
                this.columnSourceKeyID = new global::System.Data.DataColumn("SourceKeyID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSourceKeyID);
                this.columnDestinationAccountID = new global::System.Data.DataColumn("DestinationAccountID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDestinationAccountID);
                this.columnSourceRollyear = new global::System.Data.DataColumn("SourceRollyear", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSourceRollyear);
                this.columnTransaferRate = new global::System.Data.DataColumn("TransaferRate", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTransaferRate);
                this.columnSourceKey = new global::System.Data.DataColumn("SourceKey", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSourceKey);
                this.columnAccountName = new global::System.Data.DataColumn("AccountName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAccountName);
                this.columnSourceKeyName = new global::System.Data.DataColumn("SourceKeyName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSourceKeyName);
                this.columnIsActive = new global::System.Data.DataColumn("IsActive", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsActive);
                this.columnIsDestinationAcctPending = new global::System.Data.DataColumn("IsDestinationAcctPending", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsDestinationAcctPending);
                this.columnIsActive1 = new global::System.Data.DataColumn("IsActive1", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsActive1);
                this.columnIsSubFund = new global::System.Data.DataColumn("IsSubFund", typeof(byte), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsSubFund);
                this.columnDestinationRollyear = new global::System.Data.DataColumn("DestinationRollyear", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDestinationRollyear);
                this.columnIsSourceAcctPending = new global::System.Data.DataColumn("IsSourceAcctPending", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsSourceAcctPending);
                this.columnAccountName.MaxLength = 262;
                this.columnSourceKeyName.MaxLength = 262;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListAutoFundAccountTransferDetailsRow NewListAutoFundAccountTransferDetailsRow() {
                return ((ListAutoFundAccountTransferDetailsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ListAutoFundAccountTransferDetailsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ListAutoFundAccountTransferDetailsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ListAutoFundAccountTransferDetailsRowChanged != null)) {
                    this.ListAutoFundAccountTransferDetailsRowChanged(this, new ListAutoFundAccountTransferDetailsRowChangeEvent(((ListAutoFundAccountTransferDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ListAutoFundAccountTransferDetailsRowChanging != null)) {
                    this.ListAutoFundAccountTransferDetailsRowChanging(this, new ListAutoFundAccountTransferDetailsRowChangeEvent(((ListAutoFundAccountTransferDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ListAutoFundAccountTransferDetailsRowDeleted != null)) {
                    this.ListAutoFundAccountTransferDetailsRowDeleted(this, new ListAutoFundAccountTransferDetailsRowChangeEvent(((ListAutoFundAccountTransferDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ListAutoFundAccountTransferDetailsRowDeleting != null)) {
                    this.ListAutoFundAccountTransferDetailsRowDeleting(this, new ListAutoFundAccountTransferDetailsRowChangeEvent(((ListAutoFundAccountTransferDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveListAutoFundAccountTransferDetailsRow(ListAutoFundAccountTransferDetailsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F1025AutoFundTransferData ds = new F1025AutoFundTransferData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ListAutoFundAccountTransferDetailsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ListAutoFundAccountTransferDetailsOldRow : global::System.Data.DataRow {
            
            private ListAutoFundAccountTransferDetailsOldDataTable tableListAutoFundAccountTransferDetailsOld;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListAutoFundAccountTransferDetailsOldRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableListAutoFundAccountTransferDetailsOld = ((ListAutoFundAccountTransferDetailsOldDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int AutoTransferID {
                get {
                    try {
                        return ((int)(this[this.tableListAutoFundAccountTransferDetailsOld.AutoTransferIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AutoTransferID\' in table \'ListAutoFundAccountTransferDetail" +
                                "sOld\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListAutoFundAccountTransferDetailsOld.AutoTransferIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SourceSubFundID {
                get {
                    try {
                        return ((int)(this[this.tableListAutoFundAccountTransferDetailsOld.SourceSubFundIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SourceSubFundID\' in table \'ListAutoFundAccountTransferDetai" +
                                "lsOld\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListAutoFundAccountTransferDetailsOld.SourceSubFundIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int DestinationAccountID {
                get {
                    try {
                        return ((int)(this[this.tableListAutoFundAccountTransferDetailsOld.DestinationAccountIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DestinationAccountID\' in table \'ListAutoFundAccountTransfer" +
                                "DetailsOld\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListAutoFundAccountTransferDetailsOld.DestinationAccountIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short RollYear {
                get {
                    try {
                        return ((short)(this[this.tableListAutoFundAccountTransferDetailsOld.RollYearColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RollYear\' in table \'ListAutoFundAccountTransferDetailsOld\' " +
                                "is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListAutoFundAccountTransferDetailsOld.RollYearColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TransaferRate {
                get {
                    try {
                        return ((decimal)(this[this.tableListAutoFundAccountTransferDetailsOld.TransaferRateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TransaferRate\' in table \'ListAutoFundAccountTransferDetails" +
                                "Old\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListAutoFundAccountTransferDetailsOld.TransaferRateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SubFundID {
                get {
                    try {
                        return ((int)(this[this.tableListAutoFundAccountTransferDetailsOld.SubFundIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SubFundID\' in table \'ListAutoFundAccountTransferDetailsOld\'" +
                                " is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListAutoFundAccountTransferDetailsOld.SubFundIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AccountName {
                get {
                    try {
                        return ((string)(this[this.tableListAutoFundAccountTransferDetailsOld.AccountNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AccountName\' in table \'ListAutoFundAccountTransferDetailsOl" +
                                "d\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListAutoFundAccountTransferDetailsOld.AccountNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SubFund {
                get {
                    try {
                        return ((string)(this[this.tableListAutoFundAccountTransferDetailsOld.SubFundColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SubFund\' in table \'ListAutoFundAccountTransferDetailsOld\' i" +
                                "s DBNull.", e);
                    }
                }
                set {
                    this[this.tableListAutoFundAccountTransferDetailsOld.SubFundColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short IsPending {
                get {
                    try {
                        return ((short)(this[this.tableListAutoFundAccountTransferDetailsOld.IsPendingColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsPending\' in table \'ListAutoFundAccountTransferDetailsOld\'" +
                                " is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListAutoFundAccountTransferDetailsOld.IsPendingColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAutoTransferIDNull() {
                return this.IsNull(this.tableListAutoFundAccountTransferDetailsOld.AutoTransferIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAutoTransferIDNull() {
                this[this.tableListAutoFundAccountTransferDetailsOld.AutoTransferIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSourceSubFundIDNull() {
                return this.IsNull(this.tableListAutoFundAccountTransferDetailsOld.SourceSubFundIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSourceSubFundIDNull() {
                this[this.tableListAutoFundAccountTransferDetailsOld.SourceSubFundIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDestinationAccountIDNull() {
                return this.IsNull(this.tableListAutoFundAccountTransferDetailsOld.DestinationAccountIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDestinationAccountIDNull() {
                this[this.tableListAutoFundAccountTransferDetailsOld.DestinationAccountIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRollYearNull() {
                return this.IsNull(this.tableListAutoFundAccountTransferDetailsOld.RollYearColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRollYearNull() {
                this[this.tableListAutoFundAccountTransferDetailsOld.RollYearColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTransaferRateNull() {
                return this.IsNull(this.tableListAutoFundAccountTransferDetailsOld.TransaferRateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTransaferRateNull() {
                this[this.tableListAutoFundAccountTransferDetailsOld.TransaferRateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSubFundIDNull() {
                return this.IsNull(this.tableListAutoFundAccountTransferDetailsOld.SubFundIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSubFundIDNull() {
                this[this.tableListAutoFundAccountTransferDetailsOld.SubFundIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAccountNameNull() {
                return this.IsNull(this.tableListAutoFundAccountTransferDetailsOld.AccountNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAccountNameNull() {
                this[this.tableListAutoFundAccountTransferDetailsOld.AccountNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSubFundNull() {
                return this.IsNull(this.tableListAutoFundAccountTransferDetailsOld.SubFundColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSubFundNull() {
                this[this.tableListAutoFundAccountTransferDetailsOld.SubFundColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsPendingNull() {
                return this.IsNull(this.tableListAutoFundAccountTransferDetailsOld.IsPendingColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsPendingNull() {
                this[this.tableListAutoFundAccountTransferDetailsOld.IsPendingColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ListAutoFundRollYearRow : global::System.Data.DataRow {
            
            private ListAutoFundRollYearDataTable tableListAutoFundRollYear;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListAutoFundRollYearRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableListAutoFundRollYear = ((ListAutoFundRollYearDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short RollYear {
                get {
                    return ((short)(this[this.tableListAutoFundRollYear.RollYearColumn]));
                }
                set {
                    this[this.tableListAutoFundRollYear.RollYearColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class AutoCompleteSubFundListRow : global::System.Data.DataRow {
            
            private AutoCompleteSubFundListDataTable tableAutoCompleteSubFundList;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal AutoCompleteSubFundListRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableAutoCompleteSubFundList = ((AutoCompleteSubFundListDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SubFundID {
                get {
                    return ((int)(this[this.tableAutoCompleteSubFundList.SubFundIDColumn]));
                }
                set {
                    this[this.tableAutoCompleteSubFundList.SubFundIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SubFund {
                get {
                    try {
                        return ((string)(this[this.tableAutoCompleteSubFundList.SubFundColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SubFund\' in table \'AutoCompleteSubFundList\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAutoCompleteSubFundList.SubFundColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSubFundNull() {
                return this.IsNull(this.tableAutoCompleteSubFundList.SubFundColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSubFundNull() {
                this[this.tableAutoCompleteSubFundList.SubFundColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ListAutoFundAccountTransferDetailsRow : global::System.Data.DataRow {
            
            private ListAutoFundAccountTransferDetailsDataTable tableListAutoFundAccountTransferDetails;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListAutoFundAccountTransferDetailsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableListAutoFundAccountTransferDetails = ((ListAutoFundAccountTransferDetailsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int AutoTransferID {
                get {
                    try {
                        return ((int)(this[this.tableListAutoFundAccountTransferDetails.AutoTransferIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AutoTransferID\' in table \'ListAutoFundAccountTransferDetail" +
                                "s\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListAutoFundAccountTransferDetails.AutoTransferIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SourceKeyID {
                get {
                    try {
                        return ((int)(this[this.tableListAutoFundAccountTransferDetails.SourceKeyIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SourceKeyID\' in table \'ListAutoFundAccountTransferDetails\' " +
                                "is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListAutoFundAccountTransferDetails.SourceKeyIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int DestinationAccountID {
                get {
                    try {
                        return ((int)(this[this.tableListAutoFundAccountTransferDetails.DestinationAccountIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DestinationAccountID\' in table \'ListAutoFundAccountTransfer" +
                                "Details\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListAutoFundAccountTransferDetails.DestinationAccountIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short SourceRollyear {
                get {
                    try {
                        return ((short)(this[this.tableListAutoFundAccountTransferDetails.SourceRollyearColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SourceRollyear\' in table \'ListAutoFundAccountTransferDetail" +
                                "s\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListAutoFundAccountTransferDetails.SourceRollyearColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TransaferRate {
                get {
                    try {
                        return ((decimal)(this[this.tableListAutoFundAccountTransferDetails.TransaferRateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TransaferRate\' in table \'ListAutoFundAccountTransferDetails" +
                                "\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListAutoFundAccountTransferDetails.TransaferRateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SourceKey {
                get {
                    try {
                        return ((int)(this[this.tableListAutoFundAccountTransferDetails.SourceKeyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SourceKey\' in table \'ListAutoFundAccountTransferDetails\' is" +
                                " DBNull.", e);
                    }
                }
                set {
                    this[this.tableListAutoFundAccountTransferDetails.SourceKeyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AccountName {
                get {
                    try {
                        return ((string)(this[this.tableListAutoFundAccountTransferDetails.AccountNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AccountName\' in table \'ListAutoFundAccountTransferDetails\' " +
                                "is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListAutoFundAccountTransferDetails.AccountNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SourceKeyName {
                get {
                    try {
                        return ((string)(this[this.tableListAutoFundAccountTransferDetails.SourceKeyNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SourceKeyName\' in table \'ListAutoFundAccountTransferDetails" +
                                "\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListAutoFundAccountTransferDetails.SourceKeyNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int IsActive {
                get {
                    try {
                        return ((int)(this[this.tableListAutoFundAccountTransferDetails.IsActiveColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsActive\' in table \'ListAutoFundAccountTransferDetails\' is " +
                                "DBNull.", e);
                    }
                }
                set {
                    this[this.tableListAutoFundAccountTransferDetails.IsActiveColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDestinationAcctPending {
                get {
                    try {
                        return ((bool)(this[this.tableListAutoFundAccountTransferDetails.IsDestinationAcctPendingColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsDestinationAcctPending\' in table \'ListAutoFundAccountTran" +
                                "sferDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListAutoFundAccountTransferDetails.IsDestinationAcctPendingColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsActive1 {
                get {
                    try {
                        return ((bool)(this[this.tableListAutoFundAccountTransferDetails.IsActive1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsActive1\' in table \'ListAutoFundAccountTransferDetails\' is" +
                                " DBNull.", e);
                    }
                }
                set {
                    this[this.tableListAutoFundAccountTransferDetails.IsActive1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte IsSubFund {
                get {
                    try {
                        return ((byte)(this[this.tableListAutoFundAccountTransferDetails.IsSubFundColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsSubFund\' in table \'ListAutoFundAccountTransferDetails\' is" +
                                " DBNull.", e);
                    }
                }
                set {
                    this[this.tableListAutoFundAccountTransferDetails.IsSubFundColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short DestinationRollyear {
                get {
                    try {
                        return ((short)(this[this.tableListAutoFundAccountTransferDetails.DestinationRollyearColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DestinationRollyear\' in table \'ListAutoFundAccountTransferD" +
                                "etails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListAutoFundAccountTransferDetails.DestinationRollyearColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSourceAcctPending {
                get {
                    try {
                        return ((bool)(this[this.tableListAutoFundAccountTransferDetails.IsSourceAcctPendingColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsSourceAcctPending\' in table \'ListAutoFundAccountTransferD" +
                                "etails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListAutoFundAccountTransferDetails.IsSourceAcctPendingColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAutoTransferIDNull() {
                return this.IsNull(this.tableListAutoFundAccountTransferDetails.AutoTransferIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAutoTransferIDNull() {
                this[this.tableListAutoFundAccountTransferDetails.AutoTransferIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSourceKeyIDNull() {
                return this.IsNull(this.tableListAutoFundAccountTransferDetails.SourceKeyIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSourceKeyIDNull() {
                this[this.tableListAutoFundAccountTransferDetails.SourceKeyIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDestinationAccountIDNull() {
                return this.IsNull(this.tableListAutoFundAccountTransferDetails.DestinationAccountIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDestinationAccountIDNull() {
                this[this.tableListAutoFundAccountTransferDetails.DestinationAccountIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSourceRollyearNull() {
                return this.IsNull(this.tableListAutoFundAccountTransferDetails.SourceRollyearColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSourceRollyearNull() {
                this[this.tableListAutoFundAccountTransferDetails.SourceRollyearColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTransaferRateNull() {
                return this.IsNull(this.tableListAutoFundAccountTransferDetails.TransaferRateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTransaferRateNull() {
                this[this.tableListAutoFundAccountTransferDetails.TransaferRateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSourceKeyNull() {
                return this.IsNull(this.tableListAutoFundAccountTransferDetails.SourceKeyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSourceKeyNull() {
                this[this.tableListAutoFundAccountTransferDetails.SourceKeyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAccountNameNull() {
                return this.IsNull(this.tableListAutoFundAccountTransferDetails.AccountNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAccountNameNull() {
                this[this.tableListAutoFundAccountTransferDetails.AccountNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSourceKeyNameNull() {
                return this.IsNull(this.tableListAutoFundAccountTransferDetails.SourceKeyNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSourceKeyNameNull() {
                this[this.tableListAutoFundAccountTransferDetails.SourceKeyNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsActiveNull() {
                return this.IsNull(this.tableListAutoFundAccountTransferDetails.IsActiveColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsActiveNull() {
                this[this.tableListAutoFundAccountTransferDetails.IsActiveColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsDestinationAcctPendingNull() {
                return this.IsNull(this.tableListAutoFundAccountTransferDetails.IsDestinationAcctPendingColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsDestinationAcctPendingNull() {
                this[this.tableListAutoFundAccountTransferDetails.IsDestinationAcctPendingColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsActive1Null() {
                return this.IsNull(this.tableListAutoFundAccountTransferDetails.IsActive1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsActive1Null() {
                this[this.tableListAutoFundAccountTransferDetails.IsActive1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsSubFundNull() {
                return this.IsNull(this.tableListAutoFundAccountTransferDetails.IsSubFundColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsSubFundNull() {
                this[this.tableListAutoFundAccountTransferDetails.IsSubFundColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDestinationRollyearNull() {
                return this.IsNull(this.tableListAutoFundAccountTransferDetails.DestinationRollyearColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDestinationRollyearNull() {
                this[this.tableListAutoFundAccountTransferDetails.DestinationRollyearColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsSourceAcctPendingNull() {
                return this.IsNull(this.tableListAutoFundAccountTransferDetails.IsSourceAcctPendingColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsSourceAcctPendingNull() {
                this[this.tableListAutoFundAccountTransferDetails.IsSourceAcctPendingColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ListAutoFundAccountTransferDetailsOldRowChangeEvent : global::System.EventArgs {
            
            private ListAutoFundAccountTransferDetailsOldRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListAutoFundAccountTransferDetailsOldRowChangeEvent(ListAutoFundAccountTransferDetailsOldRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListAutoFundAccountTransferDetailsOldRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ListAutoFundRollYearRowChangeEvent : global::System.EventArgs {
            
            private ListAutoFundRollYearRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListAutoFundRollYearRowChangeEvent(ListAutoFundRollYearRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListAutoFundRollYearRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class AutoCompleteSubFundListRowChangeEvent : global::System.EventArgs {
            
            private AutoCompleteSubFundListRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AutoCompleteSubFundListRowChangeEvent(AutoCompleteSubFundListRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AutoCompleteSubFundListRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ListAutoFundAccountTransferDetailsRowChangeEvent : global::System.EventArgs {
            
            private ListAutoFundAccountTransferDetailsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListAutoFundAccountTransferDetailsRowChangeEvent(ListAutoFundAccountTransferDetailsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListAutoFundAccountTransferDetailsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591