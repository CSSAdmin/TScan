//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1433
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace TerraScan.BusinessEntities {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("F82002ContractorManagementData")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class F82002ContractorManagementData : global::System.Data.DataSet {
        
        private ListContractorManagementDataTable tableListContractorManagement;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public F82002ContractorManagementData() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected F82002ContractorManagementData(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["ListContractorManagement"] != null)) {
                    base.Tables.Add(new ListContractorManagementDataTable(ds.Tables["ListContractorManagement"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ListContractorManagementDataTable ListContractorManagement {
            get {
                return this.tableListContractorManagement;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            F82002ContractorManagementData cln = ((F82002ContractorManagementData)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["ListContractorManagement"] != null)) {
                    base.Tables.Add(new ListContractorManagementDataTable(ds.Tables["ListContractorManagement"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableListContractorManagement = ((ListContractorManagementDataTable)(base.Tables["ListContractorManagement"]));
            if ((initTable == true)) {
                if ((this.tableListContractorManagement != null)) {
                    this.tableListContractorManagement.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "F82002ContractorManagementData";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/F82002ContractorManagementData.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableListContractorManagement = new ListContractorManagementDataTable();
            base.Tables.Add(this.tableListContractorManagement);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeListContractorManagement() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            F82002ContractorManagementData ds = new F82002ContractorManagementData();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void ListContractorManagementRowChangeEventHandler(object sender, ListContractorManagementRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ListContractorManagementDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnContractorID;
            
            private global::System.Data.DataColumn columnContractorName;
            
            private global::System.Data.DataColumn columnContractorPhone;
            
            private global::System.Data.DataColumn columnContractorAddress;
            
            private global::System.Data.DataColumn columnContractorCity;
            
            private global::System.Data.DataColumn columnContractorState;
            
            private global::System.Data.DataColumn columnContractorZip;
            
            private global::System.Data.DataColumn columnCityLicenseNumber;
            
            private global::System.Data.DataColumn columnLicenseExprDate;
            
            private global::System.Data.DataColumn columnBondExprDate;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListContractorManagementDataTable() {
                this.TableName = "ListContractorManagement";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListContractorManagementDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ListContractorManagementDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ContractorIDColumn {
                get {
                    return this.columnContractorID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ContractorNameColumn {
                get {
                    return this.columnContractorName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ContractorPhoneColumn {
                get {
                    return this.columnContractorPhone;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ContractorAddressColumn {
                get {
                    return this.columnContractorAddress;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ContractorCityColumn {
                get {
                    return this.columnContractorCity;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ContractorStateColumn {
                get {
                    return this.columnContractorState;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ContractorZipColumn {
                get {
                    return this.columnContractorZip;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CityLicenseNumberColumn {
                get {
                    return this.columnCityLicenseNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LicenseExprDateColumn {
                get {
                    return this.columnLicenseExprDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BondExprDateColumn {
                get {
                    return this.columnBondExprDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListContractorManagementRow this[int index] {
                get {
                    return ((ListContractorManagementRow)(this.Rows[index]));
                }
            }
            
            public event ListContractorManagementRowChangeEventHandler ListContractorManagementRowChanging;
            
            public event ListContractorManagementRowChangeEventHandler ListContractorManagementRowChanged;
            
            public event ListContractorManagementRowChangeEventHandler ListContractorManagementRowDeleting;
            
            public event ListContractorManagementRowChangeEventHandler ListContractorManagementRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddListContractorManagementRow(ListContractorManagementRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListContractorManagementRow AddListContractorManagementRow(int ContractorID, string ContractorName, string ContractorPhone, string ContractorAddress, string ContractorCity, string ContractorState, string ContractorZip, string CityLicenseNumber, string LicenseExprDate, string BondExprDate) {
                ListContractorManagementRow rowListContractorManagementRow = ((ListContractorManagementRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ContractorID,
                        ContractorName,
                        ContractorPhone,
                        ContractorAddress,
                        ContractorCity,
                        ContractorState,
                        ContractorZip,
                        CityLicenseNumber,
                        LicenseExprDate,
                        BondExprDate};
                rowListContractorManagementRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowListContractorManagementRow);
                return rowListContractorManagementRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ListContractorManagementDataTable cln = ((ListContractorManagementDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ListContractorManagementDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnContractorID = base.Columns["ContractorID"];
                this.columnContractorName = base.Columns["ContractorName"];
                this.columnContractorPhone = base.Columns["ContractorPhone"];
                this.columnContractorAddress = base.Columns["ContractorAddress"];
                this.columnContractorCity = base.Columns["ContractorCity"];
                this.columnContractorState = base.Columns["ContractorState"];
                this.columnContractorZip = base.Columns["ContractorZip"];
                this.columnCityLicenseNumber = base.Columns["CityLicenseNumber"];
                this.columnLicenseExprDate = base.Columns["LicenseExprDate"];
                this.columnBondExprDate = base.Columns["BondExprDate"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnContractorID = new global::System.Data.DataColumn("ContractorID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnContractorID);
                this.columnContractorName = new global::System.Data.DataColumn("ContractorName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnContractorName);
                this.columnContractorPhone = new global::System.Data.DataColumn("ContractorPhone", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnContractorPhone);
                this.columnContractorAddress = new global::System.Data.DataColumn("ContractorAddress", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnContractorAddress);
                this.columnContractorCity = new global::System.Data.DataColumn("ContractorCity", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnContractorCity);
                this.columnContractorState = new global::System.Data.DataColumn("ContractorState", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnContractorState);
                this.columnContractorZip = new global::System.Data.DataColumn("ContractorZip", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnContractorZip);
                this.columnCityLicenseNumber = new global::System.Data.DataColumn("CityLicenseNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCityLicenseNumber);
                this.columnLicenseExprDate = new global::System.Data.DataColumn("LicenseExprDate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLicenseExprDate);
                this.columnBondExprDate = new global::System.Data.DataColumn("BondExprDate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBondExprDate);
                this.columnContractorID.ReadOnly = true;
                this.columnContractorName.MaxLength = 50;
                this.columnContractorPhone.MaxLength = 50;
                this.columnContractorAddress.MaxLength = 50;
                this.columnContractorCity.MaxLength = 50;
                this.columnContractorState.MaxLength = 10;
                this.columnContractorZip.MaxLength = 50;
                this.columnCityLicenseNumber.MaxLength = 150;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListContractorManagementRow NewListContractorManagementRow() {
                return ((ListContractorManagementRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ListContractorManagementRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ListContractorManagementRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ListContractorManagementRowChanged != null)) {
                    this.ListContractorManagementRowChanged(this, new ListContractorManagementRowChangeEvent(((ListContractorManagementRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ListContractorManagementRowChanging != null)) {
                    this.ListContractorManagementRowChanging(this, new ListContractorManagementRowChangeEvent(((ListContractorManagementRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ListContractorManagementRowDeleted != null)) {
                    this.ListContractorManagementRowDeleted(this, new ListContractorManagementRowChangeEvent(((ListContractorManagementRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ListContractorManagementRowDeleting != null)) {
                    this.ListContractorManagementRowDeleting(this, new ListContractorManagementRowChangeEvent(((ListContractorManagementRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveListContractorManagementRow(ListContractorManagementRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F82002ContractorManagementData ds = new F82002ContractorManagementData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ListContractorManagementDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ListContractorManagementRow : global::System.Data.DataRow {
            
            private ListContractorManagementDataTable tableListContractorManagement;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListContractorManagementRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableListContractorManagement = ((ListContractorManagementDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ContractorID {
                get {
                    try {
                        return ((int)(this[this.tableListContractorManagement.ContractorIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ContractorID\' in table \'ListContractorManagement\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableListContractorManagement.ContractorIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ContractorName {
                get {
                    try {
                        return ((string)(this[this.tableListContractorManagement.ContractorNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ContractorName\' in table \'ListContractorManagement\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableListContractorManagement.ContractorNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ContractorPhone {
                get {
                    try {
                        return ((string)(this[this.tableListContractorManagement.ContractorPhoneColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ContractorPhone\' in table \'ListContractorManagement\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableListContractorManagement.ContractorPhoneColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ContractorAddress {
                get {
                    try {
                        return ((string)(this[this.tableListContractorManagement.ContractorAddressColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ContractorAddress\' in table \'ListContractorManagement\' is D" +
                                "BNull.", e);
                    }
                }
                set {
                    this[this.tableListContractorManagement.ContractorAddressColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ContractorCity {
                get {
                    try {
                        return ((string)(this[this.tableListContractorManagement.ContractorCityColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ContractorCity\' in table \'ListContractorManagement\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableListContractorManagement.ContractorCityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ContractorState {
                get {
                    try {
                        return ((string)(this[this.tableListContractorManagement.ContractorStateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ContractorState\' in table \'ListContractorManagement\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableListContractorManagement.ContractorStateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ContractorZip {
                get {
                    try {
                        return ((string)(this[this.tableListContractorManagement.ContractorZipColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ContractorZip\' in table \'ListContractorManagement\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableListContractorManagement.ContractorZipColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CityLicenseNumber {
                get {
                    try {
                        return ((string)(this[this.tableListContractorManagement.CityLicenseNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CityLicenseNumber\' in table \'ListContractorManagement\' is D" +
                                "BNull.", e);
                    }
                }
                set {
                    this[this.tableListContractorManagement.CityLicenseNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LicenseExprDate {
                get {
                    try {
                        return ((string)(this[this.tableListContractorManagement.LicenseExprDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LicenseExprDate\' in table \'ListContractorManagement\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableListContractorManagement.LicenseExprDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BondExprDate {
                get {
                    try {
                        return ((string)(this[this.tableListContractorManagement.BondExprDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BondExprDate\' in table \'ListContractorManagement\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableListContractorManagement.BondExprDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsContractorIDNull() {
                return this.IsNull(this.tableListContractorManagement.ContractorIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetContractorIDNull() {
                this[this.tableListContractorManagement.ContractorIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsContractorNameNull() {
                return this.IsNull(this.tableListContractorManagement.ContractorNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetContractorNameNull() {
                this[this.tableListContractorManagement.ContractorNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsContractorPhoneNull() {
                return this.IsNull(this.tableListContractorManagement.ContractorPhoneColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetContractorPhoneNull() {
                this[this.tableListContractorManagement.ContractorPhoneColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsContractorAddressNull() {
                return this.IsNull(this.tableListContractorManagement.ContractorAddressColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetContractorAddressNull() {
                this[this.tableListContractorManagement.ContractorAddressColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsContractorCityNull() {
                return this.IsNull(this.tableListContractorManagement.ContractorCityColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetContractorCityNull() {
                this[this.tableListContractorManagement.ContractorCityColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsContractorStateNull() {
                return this.IsNull(this.tableListContractorManagement.ContractorStateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetContractorStateNull() {
                this[this.tableListContractorManagement.ContractorStateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsContractorZipNull() {
                return this.IsNull(this.tableListContractorManagement.ContractorZipColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetContractorZipNull() {
                this[this.tableListContractorManagement.ContractorZipColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCityLicenseNumberNull() {
                return this.IsNull(this.tableListContractorManagement.CityLicenseNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCityLicenseNumberNull() {
                this[this.tableListContractorManagement.CityLicenseNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLicenseExprDateNull() {
                return this.IsNull(this.tableListContractorManagement.LicenseExprDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLicenseExprDateNull() {
                this[this.tableListContractorManagement.LicenseExprDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBondExprDateNull() {
                return this.IsNull(this.tableListContractorManagement.BondExprDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBondExprDateNull() {
                this[this.tableListContractorManagement.BondExprDateColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ListContractorManagementRowChangeEvent : global::System.EventArgs {
            
            private ListContractorManagementRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListContractorManagementRowChangeEvent(ListContractorManagementRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListContractorManagementRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591