//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.5446
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace TerraScan.BusinessEntities {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("F1410OwnerReceiptingData")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class F1410OwnerReceiptingData : global::System.Data.DataSet {
        
        private ListOwnerStatementTableDataTable tableListOwnerStatementTable;
        
        private ListOwnerReceiptTableDataTable tableListOwnerReceiptTable;
        
        private ReceiptIdTableDataTable tableReceiptIdTable;
        
        private ListAttachmentDataTable tableListAttachment;
        
        private FormBackgroundTableDataTable tableFormBackgroundTable;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public F1410OwnerReceiptingData() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected F1410OwnerReceiptingData(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["ListOwnerStatementTable"] != null)) {
                    base.Tables.Add(new ListOwnerStatementTableDataTable(ds.Tables["ListOwnerStatementTable"]));
                }
                if ((ds.Tables["ListOwnerReceiptTable"] != null)) {
                    base.Tables.Add(new ListOwnerReceiptTableDataTable(ds.Tables["ListOwnerReceiptTable"]));
                }
                if ((ds.Tables["ReceiptIdTable"] != null)) {
                    base.Tables.Add(new ReceiptIdTableDataTable(ds.Tables["ReceiptIdTable"]));
                }
                if ((ds.Tables["ListAttachment"] != null)) {
                    base.Tables.Add(new ListAttachmentDataTable(ds.Tables["ListAttachment"]));
                }
                if ((ds.Tables["FormBackgroundTable"] != null)) {
                    base.Tables.Add(new FormBackgroundTableDataTable(ds.Tables["FormBackgroundTable"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ListOwnerStatementTableDataTable ListOwnerStatementTable {
            get {
                return this.tableListOwnerStatementTable;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ListOwnerReceiptTableDataTable ListOwnerReceiptTable {
            get {
                return this.tableListOwnerReceiptTable;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ReceiptIdTableDataTable ReceiptIdTable {
            get {
                return this.tableReceiptIdTable;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ListAttachmentDataTable ListAttachment {
            get {
                return this.tableListAttachment;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public FormBackgroundTableDataTable FormBackgroundTable {
            get {
                return this.tableFormBackgroundTable;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            F1410OwnerReceiptingData cln = ((F1410OwnerReceiptingData)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["ListOwnerStatementTable"] != null)) {
                    base.Tables.Add(new ListOwnerStatementTableDataTable(ds.Tables["ListOwnerStatementTable"]));
                }
                if ((ds.Tables["ListOwnerReceiptTable"] != null)) {
                    base.Tables.Add(new ListOwnerReceiptTableDataTable(ds.Tables["ListOwnerReceiptTable"]));
                }
                if ((ds.Tables["ReceiptIdTable"] != null)) {
                    base.Tables.Add(new ReceiptIdTableDataTable(ds.Tables["ReceiptIdTable"]));
                }
                if ((ds.Tables["ListAttachment"] != null)) {
                    base.Tables.Add(new ListAttachmentDataTable(ds.Tables["ListAttachment"]));
                }
                if ((ds.Tables["FormBackgroundTable"] != null)) {
                    base.Tables.Add(new FormBackgroundTableDataTable(ds.Tables["FormBackgroundTable"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableListOwnerStatementTable = ((ListOwnerStatementTableDataTable)(base.Tables["ListOwnerStatementTable"]));
            if ((initTable == true)) {
                if ((this.tableListOwnerStatementTable != null)) {
                    this.tableListOwnerStatementTable.InitVars();
                }
            }
            this.tableListOwnerReceiptTable = ((ListOwnerReceiptTableDataTable)(base.Tables["ListOwnerReceiptTable"]));
            if ((initTable == true)) {
                if ((this.tableListOwnerReceiptTable != null)) {
                    this.tableListOwnerReceiptTable.InitVars();
                }
            }
            this.tableReceiptIdTable = ((ReceiptIdTableDataTable)(base.Tables["ReceiptIdTable"]));
            if ((initTable == true)) {
                if ((this.tableReceiptIdTable != null)) {
                    this.tableReceiptIdTable.InitVars();
                }
            }
            this.tableListAttachment = ((ListAttachmentDataTable)(base.Tables["ListAttachment"]));
            if ((initTable == true)) {
                if ((this.tableListAttachment != null)) {
                    this.tableListAttachment.InitVars();
                }
            }
            this.tableFormBackgroundTable = ((FormBackgroundTableDataTable)(base.Tables["FormBackgroundTable"]));
            if ((initTable == true)) {
                if ((this.tableFormBackgroundTable != null)) {
                    this.tableFormBackgroundTable.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "F1410OwnerReceiptingData";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/F1410OwnerReceiptingData.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableListOwnerStatementTable = new ListOwnerStatementTableDataTable();
            base.Tables.Add(this.tableListOwnerStatementTable);
            this.tableListOwnerReceiptTable = new ListOwnerReceiptTableDataTable();
            base.Tables.Add(this.tableListOwnerReceiptTable);
            this.tableReceiptIdTable = new ReceiptIdTableDataTable();
            base.Tables.Add(this.tableReceiptIdTable);
            this.tableListAttachment = new ListAttachmentDataTable();
            base.Tables.Add(this.tableListAttachment);
            this.tableFormBackgroundTable = new FormBackgroundTableDataTable();
            base.Tables.Add(this.tableFormBackgroundTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeListOwnerStatementTable() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeListOwnerReceiptTable() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeReceiptIdTable() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeListAttachment() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeFormBackgroundTable() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            F1410OwnerReceiptingData ds = new F1410OwnerReceiptingData();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void ListOwnerStatementTableRowChangeEventHandler(object sender, ListOwnerStatementTableRowChangeEvent e);
        
        public delegate void ListOwnerReceiptTableRowChangeEventHandler(object sender, ListOwnerReceiptTableRowChangeEvent e);
        
        public delegate void ReceiptIdTableRowChangeEventHandler(object sender, ReceiptIdTableRowChangeEvent e);
        
        public delegate void ListAttachmentRowChangeEventHandler(object sender, ListAttachmentRowChangeEvent e);
        
        public delegate void FormBackgroundTableRowChangeEventHandler(object sender, FormBackgroundTableRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ListOwnerStatementTableDataTable : global::System.Data.TypedTableBase<ListOwnerStatementTableRow> {
            
            private global::System.Data.DataColumn columnStatementID;
            
            private global::System.Data.DataColumn columnMOwnerID;
            
            private global::System.Data.DataColumn columnRollYear;
            
            private global::System.Data.DataColumn columnParcelID;
            
            private global::System.Data.DataColumn columnParcelNumber;
            
            private global::System.Data.DataColumn columnStatementNumber;
            
            private global::System.Data.DataColumn columnOwnerID;
            
            private global::System.Data.DataColumn columnPostTypeID;
            
            private global::System.Data.DataColumn columnPostName;
            
            private global::System.Data.DataColumn columnInterestDue;
            
            private global::System.Data.DataColumn columnBalanceDue;
            
            private global::System.Data.DataColumn columnMinTaxDue;
            
            private global::System.Data.DataColumn columnIsChecked;
            
            private global::System.Data.DataColumn columnTempInterestDue;
            
            private global::System.Data.DataColumn columnTempBalanceDue;
            
            private global::System.Data.DataColumn columnTempMinTaxDue;
            
            private global::System.Data.DataColumn columnOutstandingFees;
            
            private global::System.Data.DataColumn columnStatementForm;
            
            private global::System.Data.DataColumn columnPaymentType;
            
            private global::System.Data.DataColumn columnFeeAmount;
            
            private global::System.Data.DataColumn columnTaxDue;
            
            private global::System.Data.DataColumn columnParcelOwner;
            
            private global::System.Data.DataColumn columnDueLabel;
            
            private global::System.Data.DataColumn columnBackgroundColor;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListOwnerStatementTableDataTable() {
                this.TableName = "ListOwnerStatementTable";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListOwnerStatementTableDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ListOwnerStatementTableDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StatementIDColumn {
                get {
                    return this.columnStatementID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MOwnerIDColumn {
                get {
                    return this.columnMOwnerID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RollYearColumn {
                get {
                    return this.columnRollYear;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ParcelIDColumn {
                get {
                    return this.columnParcelID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ParcelNumberColumn {
                get {
                    return this.columnParcelNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StatementNumberColumn {
                get {
                    return this.columnStatementNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OwnerIDColumn {
                get {
                    return this.columnOwnerID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PostTypeIDColumn {
                get {
                    return this.columnPostTypeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PostNameColumn {
                get {
                    return this.columnPostName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InterestDueColumn {
                get {
                    return this.columnInterestDue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BalanceDueColumn {
                get {
                    return this.columnBalanceDue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MinTaxDueColumn {
                get {
                    return this.columnMinTaxDue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsCheckedColumn {
                get {
                    return this.columnIsChecked;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TempInterestDueColumn {
                get {
                    return this.columnTempInterestDue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TempBalanceDueColumn {
                get {
                    return this.columnTempBalanceDue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TempMinTaxDueColumn {
                get {
                    return this.columnTempMinTaxDue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OutstandingFeesColumn {
                get {
                    return this.columnOutstandingFees;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StatementFormColumn {
                get {
                    return this.columnStatementForm;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PaymentTypeColumn {
                get {
                    return this.columnPaymentType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FeeAmountColumn {
                get {
                    return this.columnFeeAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TaxDueColumn {
                get {
                    return this.columnTaxDue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ParcelOwnerColumn {
                get {
                    return this.columnParcelOwner;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DueLabelColumn {
                get {
                    return this.columnDueLabel;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BackgroundColorColumn {
                get {
                    return this.columnBackgroundColor;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListOwnerStatementTableRow this[int index] {
                get {
                    return ((ListOwnerStatementTableRow)(this.Rows[index]));
                }
            }
            
            public event ListOwnerStatementTableRowChangeEventHandler ListOwnerStatementTableRowChanging;
            
            public event ListOwnerStatementTableRowChangeEventHandler ListOwnerStatementTableRowChanged;
            
            public event ListOwnerStatementTableRowChangeEventHandler ListOwnerStatementTableRowDeleting;
            
            public event ListOwnerStatementTableRowChangeEventHandler ListOwnerStatementTableRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddListOwnerStatementTableRow(ListOwnerStatementTableRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListOwnerStatementTableRow AddListOwnerStatementTableRow(
                        int StatementID, 
                        int MOwnerID, 
                        int RollYear, 
                        int ParcelID, 
                        string ParcelNumber, 
                        string StatementNumber, 
                        int OwnerID, 
                        int PostTypeID, 
                        string PostName, 
                        decimal InterestDue, 
                        decimal BalanceDue, 
                        decimal MinTaxDue, 
                        bool IsChecked, 
                        decimal TempInterestDue, 
                        decimal TempBalanceDue, 
                        decimal TempMinTaxDue, 
                        decimal OutstandingFees, 
                        int StatementForm, 
                        string PaymentType, 
                        decimal FeeAmount, 
                        decimal TaxDue, 
                        int ParcelOwner, 
                        string DueLabel, 
                        string BackgroundColor) {
                ListOwnerStatementTableRow rowListOwnerStatementTableRow = ((ListOwnerStatementTableRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        StatementID,
                        MOwnerID,
                        RollYear,
                        ParcelID,
                        ParcelNumber,
                        StatementNumber,
                        OwnerID,
                        PostTypeID,
                        PostName,
                        InterestDue,
                        BalanceDue,
                        MinTaxDue,
                        IsChecked,
                        TempInterestDue,
                        TempBalanceDue,
                        TempMinTaxDue,
                        OutstandingFees,
                        StatementForm,
                        PaymentType,
                        FeeAmount,
                        TaxDue,
                        ParcelOwner,
                        DueLabel,
                        BackgroundColor};
                rowListOwnerStatementTableRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowListOwnerStatementTableRow);
                return rowListOwnerStatementTableRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ListOwnerStatementTableDataTable cln = ((ListOwnerStatementTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ListOwnerStatementTableDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnStatementID = base.Columns["StatementID"];
                this.columnMOwnerID = base.Columns["MOwnerID"];
                this.columnRollYear = base.Columns["RollYear"];
                this.columnParcelID = base.Columns["ParcelID"];
                this.columnParcelNumber = base.Columns["ParcelNumber"];
                this.columnStatementNumber = base.Columns["StatementNumber"];
                this.columnOwnerID = base.Columns["OwnerID"];
                this.columnPostTypeID = base.Columns["PostTypeID"];
                this.columnPostName = base.Columns["PostName"];
                this.columnInterestDue = base.Columns["InterestDue"];
                this.columnBalanceDue = base.Columns["BalanceDue"];
                this.columnMinTaxDue = base.Columns["MinTaxDue"];
                this.columnIsChecked = base.Columns["IsChecked"];
                this.columnTempInterestDue = base.Columns["TempInterestDue"];
                this.columnTempBalanceDue = base.Columns["TempBalanceDue"];
                this.columnTempMinTaxDue = base.Columns["TempMinTaxDue"];
                this.columnOutstandingFees = base.Columns["OutstandingFees"];
                this.columnStatementForm = base.Columns["StatementForm"];
                this.columnPaymentType = base.Columns["PaymentType"];
                this.columnFeeAmount = base.Columns["FeeAmount"];
                this.columnTaxDue = base.Columns["TaxDue"];
                this.columnParcelOwner = base.Columns["ParcelOwner"];
                this.columnDueLabel = base.Columns["DueLabel"];
                this.columnBackgroundColor = base.Columns["BackgroundColor"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnStatementID = new global::System.Data.DataColumn("StatementID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStatementID);
                this.columnMOwnerID = new global::System.Data.DataColumn("MOwnerID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMOwnerID);
                this.columnRollYear = new global::System.Data.DataColumn("RollYear", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRollYear);
                this.columnParcelID = new global::System.Data.DataColumn("ParcelID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnParcelID);
                this.columnParcelNumber = new global::System.Data.DataColumn("ParcelNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnParcelNumber);
                this.columnStatementNumber = new global::System.Data.DataColumn("StatementNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStatementNumber);
                this.columnOwnerID = new global::System.Data.DataColumn("OwnerID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOwnerID);
                this.columnPostTypeID = new global::System.Data.DataColumn("PostTypeID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPostTypeID);
                this.columnPostName = new global::System.Data.DataColumn("PostName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPostName);
                this.columnInterestDue = new global::System.Data.DataColumn("InterestDue", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInterestDue);
                this.columnBalanceDue = new global::System.Data.DataColumn("BalanceDue", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBalanceDue);
                this.columnMinTaxDue = new global::System.Data.DataColumn("MinTaxDue", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMinTaxDue);
                this.columnIsChecked = new global::System.Data.DataColumn("IsChecked", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsChecked);
                this.columnTempInterestDue = new global::System.Data.DataColumn("TempInterestDue", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTempInterestDue);
                this.columnTempBalanceDue = new global::System.Data.DataColumn("TempBalanceDue", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTempBalanceDue);
                this.columnTempMinTaxDue = new global::System.Data.DataColumn("TempMinTaxDue", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTempMinTaxDue);
                this.columnOutstandingFees = new global::System.Data.DataColumn("OutstandingFees", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOutstandingFees);
                this.columnStatementForm = new global::System.Data.DataColumn("StatementForm", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStatementForm);
                this.columnPaymentType = new global::System.Data.DataColumn("PaymentType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPaymentType);
                this.columnFeeAmount = new global::System.Data.DataColumn("FeeAmount", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFeeAmount);
                this.columnTaxDue = new global::System.Data.DataColumn("TaxDue", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTaxDue);
                this.columnParcelOwner = new global::System.Data.DataColumn("ParcelOwner", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnParcelOwner);
                this.columnDueLabel = new global::System.Data.DataColumn("DueLabel", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDueLabel);
                this.columnBackgroundColor = new global::System.Data.DataColumn("BackgroundColor", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBackgroundColor);
                this.columnParcelNumber.MaxLength = 50;
                this.columnStatementNumber.MaxLength = 50;
                this.columnPostName.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListOwnerStatementTableRow NewListOwnerStatementTableRow() {
                return ((ListOwnerStatementTableRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ListOwnerStatementTableRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ListOwnerStatementTableRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ListOwnerStatementTableRowChanged != null)) {
                    this.ListOwnerStatementTableRowChanged(this, new ListOwnerStatementTableRowChangeEvent(((ListOwnerStatementTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ListOwnerStatementTableRowChanging != null)) {
                    this.ListOwnerStatementTableRowChanging(this, new ListOwnerStatementTableRowChangeEvent(((ListOwnerStatementTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ListOwnerStatementTableRowDeleted != null)) {
                    this.ListOwnerStatementTableRowDeleted(this, new ListOwnerStatementTableRowChangeEvent(((ListOwnerStatementTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ListOwnerStatementTableRowDeleting != null)) {
                    this.ListOwnerStatementTableRowDeleting(this, new ListOwnerStatementTableRowChangeEvent(((ListOwnerStatementTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveListOwnerStatementTableRow(ListOwnerStatementTableRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F1410OwnerReceiptingData ds = new F1410OwnerReceiptingData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ListOwnerStatementTableDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ListOwnerReceiptTableDataTable : global::System.Data.TypedTableBase<ListOwnerReceiptTableRow> {
            
            private global::System.Data.DataColumn columnOwnerID;
            
            private global::System.Data.DataColumn columnPOwnerID;
            
            private global::System.Data.DataColumn columnOwnerName;
            
            private global::System.Data.DataColumn columnAddress1;
            
            private global::System.Data.DataColumn columnAddress2;
            
            private global::System.Data.DataColumn columnCity;
            
            private global::System.Data.DataColumn columnState;
            
            private global::System.Data.DataColumn columnZip;
            
            private global::System.Data.DataColumn columnHigh;
            
            private global::System.Data.DataColumn columnLow;
            
            private global::System.Data.DataColumn columnOwnerCode;
            
            private global::System.Data.DataColumn columnOwnershipType;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListOwnerReceiptTableDataTable() {
                this.TableName = "ListOwnerReceiptTable";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListOwnerReceiptTableDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ListOwnerReceiptTableDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OwnerIDColumn {
                get {
                    return this.columnOwnerID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn POwnerIDColumn {
                get {
                    return this.columnPOwnerID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OwnerNameColumn {
                get {
                    return this.columnOwnerName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Address1Column {
                get {
                    return this.columnAddress1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Address2Column {
                get {
                    return this.columnAddress2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CityColumn {
                get {
                    return this.columnCity;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StateColumn {
                get {
                    return this.columnState;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ZipColumn {
                get {
                    return this.columnZip;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HighColumn {
                get {
                    return this.columnHigh;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LowColumn {
                get {
                    return this.columnLow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OwnerCodeColumn {
                get {
                    return this.columnOwnerCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OwnershipTypeColumn {
                get {
                    return this.columnOwnershipType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListOwnerReceiptTableRow this[int index] {
                get {
                    return ((ListOwnerReceiptTableRow)(this.Rows[index]));
                }
            }
            
            public event ListOwnerReceiptTableRowChangeEventHandler ListOwnerReceiptTableRowChanging;
            
            public event ListOwnerReceiptTableRowChangeEventHandler ListOwnerReceiptTableRowChanged;
            
            public event ListOwnerReceiptTableRowChangeEventHandler ListOwnerReceiptTableRowDeleting;
            
            public event ListOwnerReceiptTableRowChangeEventHandler ListOwnerReceiptTableRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddListOwnerReceiptTableRow(ListOwnerReceiptTableRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListOwnerReceiptTableRow AddListOwnerReceiptTableRow(int OwnerID, int POwnerID, string OwnerName, string Address1, string Address2, string City, string State, string Zip, int High, int Low, string OwnerCode, string OwnershipType) {
                ListOwnerReceiptTableRow rowListOwnerReceiptTableRow = ((ListOwnerReceiptTableRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        OwnerID,
                        POwnerID,
                        OwnerName,
                        Address1,
                        Address2,
                        City,
                        State,
                        Zip,
                        High,
                        Low,
                        OwnerCode,
                        OwnershipType};
                rowListOwnerReceiptTableRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowListOwnerReceiptTableRow);
                return rowListOwnerReceiptTableRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ListOwnerReceiptTableDataTable cln = ((ListOwnerReceiptTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ListOwnerReceiptTableDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnOwnerID = base.Columns["OwnerID"];
                this.columnPOwnerID = base.Columns["POwnerID"];
                this.columnOwnerName = base.Columns["OwnerName"];
                this.columnAddress1 = base.Columns["Address1"];
                this.columnAddress2 = base.Columns["Address2"];
                this.columnCity = base.Columns["City"];
                this.columnState = base.Columns["State"];
                this.columnZip = base.Columns["Zip"];
                this.columnHigh = base.Columns["High"];
                this.columnLow = base.Columns["Low"];
                this.columnOwnerCode = base.Columns["OwnerCode"];
                this.columnOwnershipType = base.Columns["OwnershipType"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnOwnerID = new global::System.Data.DataColumn("OwnerID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOwnerID);
                this.columnPOwnerID = new global::System.Data.DataColumn("POwnerID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPOwnerID);
                this.columnOwnerName = new global::System.Data.DataColumn("OwnerName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOwnerName);
                this.columnAddress1 = new global::System.Data.DataColumn("Address1", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAddress1);
                this.columnAddress2 = new global::System.Data.DataColumn("Address2", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAddress2);
                this.columnCity = new global::System.Data.DataColumn("City", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCity);
                this.columnState = new global::System.Data.DataColumn("State", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnState);
                this.columnZip = new global::System.Data.DataColumn("Zip", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnZip);
                this.columnHigh = new global::System.Data.DataColumn("High", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHigh);
                this.columnLow = new global::System.Data.DataColumn("Low", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLow);
                this.columnOwnerCode = new global::System.Data.DataColumn("OwnerCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOwnerCode);
                this.columnOwnershipType = new global::System.Data.DataColumn("OwnershipType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOwnershipType);
                this.columnOwnerID.ReadOnly = true;
                this.columnPOwnerID.ReadOnly = true;
                this.columnOwnerName.MaxLength = 101;
                this.columnAddress1.MaxLength = 50;
                this.columnAddress2.MaxLength = 50;
                this.columnCity.MaxLength = 50;
                this.columnState.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListOwnerReceiptTableRow NewListOwnerReceiptTableRow() {
                return ((ListOwnerReceiptTableRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ListOwnerReceiptTableRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ListOwnerReceiptTableRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ListOwnerReceiptTableRowChanged != null)) {
                    this.ListOwnerReceiptTableRowChanged(this, new ListOwnerReceiptTableRowChangeEvent(((ListOwnerReceiptTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ListOwnerReceiptTableRowChanging != null)) {
                    this.ListOwnerReceiptTableRowChanging(this, new ListOwnerReceiptTableRowChangeEvent(((ListOwnerReceiptTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ListOwnerReceiptTableRowDeleted != null)) {
                    this.ListOwnerReceiptTableRowDeleted(this, new ListOwnerReceiptTableRowChangeEvent(((ListOwnerReceiptTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ListOwnerReceiptTableRowDeleting != null)) {
                    this.ListOwnerReceiptTableRowDeleting(this, new ListOwnerReceiptTableRowChangeEvent(((ListOwnerReceiptTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveListOwnerReceiptTableRow(ListOwnerReceiptTableRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F1410OwnerReceiptingData ds = new F1410OwnerReceiptingData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ListOwnerReceiptTableDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ReceiptIdTableDataTable : global::System.Data.TypedTableBase<ReceiptIdTableRow> {
            
            private global::System.Data.DataColumn columnReceiptID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReceiptIdTableDataTable() {
                this.TableName = "ReceiptIdTable";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ReceiptIdTableDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ReceiptIdTableDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ReceiptIDColumn {
                get {
                    return this.columnReceiptID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReceiptIdTableRow this[int index] {
                get {
                    return ((ReceiptIdTableRow)(this.Rows[index]));
                }
            }
            
            public event ReceiptIdTableRowChangeEventHandler ReceiptIdTableRowChanging;
            
            public event ReceiptIdTableRowChangeEventHandler ReceiptIdTableRowChanged;
            
            public event ReceiptIdTableRowChangeEventHandler ReceiptIdTableRowDeleting;
            
            public event ReceiptIdTableRowChangeEventHandler ReceiptIdTableRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddReceiptIdTableRow(ReceiptIdTableRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReceiptIdTableRow AddReceiptIdTableRow(int ReceiptID) {
                ReceiptIdTableRow rowReceiptIdTableRow = ((ReceiptIdTableRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ReceiptID};
                rowReceiptIdTableRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowReceiptIdTableRow);
                return rowReceiptIdTableRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ReceiptIdTableDataTable cln = ((ReceiptIdTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ReceiptIdTableDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnReceiptID = base.Columns["ReceiptID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnReceiptID = new global::System.Data.DataColumn("ReceiptID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnReceiptID);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReceiptIdTableRow NewReceiptIdTableRow() {
                return ((ReceiptIdTableRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ReceiptIdTableRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ReceiptIdTableRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ReceiptIdTableRowChanged != null)) {
                    this.ReceiptIdTableRowChanged(this, new ReceiptIdTableRowChangeEvent(((ReceiptIdTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ReceiptIdTableRowChanging != null)) {
                    this.ReceiptIdTableRowChanging(this, new ReceiptIdTableRowChangeEvent(((ReceiptIdTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ReceiptIdTableRowDeleted != null)) {
                    this.ReceiptIdTableRowDeleted(this, new ReceiptIdTableRowChangeEvent(((ReceiptIdTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ReceiptIdTableRowDeleting != null)) {
                    this.ReceiptIdTableRowDeleting(this, new ReceiptIdTableRowChangeEvent(((ReceiptIdTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveReceiptIdTableRow(ReceiptIdTableRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F1410OwnerReceiptingData ds = new F1410OwnerReceiptingData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ReceiptIdTableDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ListAttachmentDataTable : global::System.Data.TypedTableBase<ListAttachmentRow> {
            
            private global::System.Data.DataColumn columnExtension;
            
            private global::System.Data.DataColumn columnForm;
            
            private global::System.Data.DataColumn columnNewKeyID;
            
            private global::System.Data.DataColumn columnFileTypeID;
            
            private global::System.Data.DataColumn columnSource;
            
            private global::System.Data.DataColumn columnIsPrimary;
            
            private global::System.Data.DataColumn columnDescription;
            
            private global::System.Data.DataColumn columnEventDate;
            
            private global::System.Data.DataColumn columnUserID;
            
            private global::System.Data.DataColumn columnIsPublic;
            
            private global::System.Data.DataColumn columnIsRoll;
            
            private global::System.Data.DataColumn columnUserID1;
            
            private global::System.Data.DataColumn columnModuleID;
            
            private global::System.Data.DataColumn columnUserID2;
            
            private global::System.Data.DataColumn columnKeyID;
            
            private global::System.Data.DataColumn columnAurl;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListAttachmentDataTable() {
                this.TableName = "ListAttachment";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListAttachmentDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ListAttachmentDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ExtensionColumn {
                get {
                    return this.columnExtension;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FormColumn {
                get {
                    return this.columnForm;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NewKeyIDColumn {
                get {
                    return this.columnNewKeyID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FileTypeIDColumn {
                get {
                    return this.columnFileTypeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SourceColumn {
                get {
                    return this.columnSource;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsPrimaryColumn {
                get {
                    return this.columnIsPrimary;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EventDateColumn {
                get {
                    return this.columnEventDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UserIDColumn {
                get {
                    return this.columnUserID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsPublicColumn {
                get {
                    return this.columnIsPublic;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsRollColumn {
                get {
                    return this.columnIsRoll;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UserID1Column {
                get {
                    return this.columnUserID1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ModuleIDColumn {
                get {
                    return this.columnModuleID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UserID2Column {
                get {
                    return this.columnUserID2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn KeyIDColumn {
                get {
                    return this.columnKeyID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AurlColumn {
                get {
                    return this.columnAurl;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListAttachmentRow this[int index] {
                get {
                    return ((ListAttachmentRow)(this.Rows[index]));
                }
            }
            
            public event ListAttachmentRowChangeEventHandler ListAttachmentRowChanging;
            
            public event ListAttachmentRowChangeEventHandler ListAttachmentRowChanged;
            
            public event ListAttachmentRowChangeEventHandler ListAttachmentRowDeleting;
            
            public event ListAttachmentRowChangeEventHandler ListAttachmentRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddListAttachmentRow(ListAttachmentRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListAttachmentRow AddListAttachmentRow(
                        string Extension, 
                        int Form, 
                        int NewKeyID, 
                        short FileTypeID, 
                        string Source, 
                        bool IsPrimary, 
                        string Description, 
                        System.DateTime EventDate, 
                        int UserID, 
                        bool IsPublic, 
                        bool IsRoll, 
                        int UserID1, 
                        int ModuleID, 
                        int UserID2, 
                        int KeyID, 
                        string Aurl) {
                ListAttachmentRow rowListAttachmentRow = ((ListAttachmentRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Extension,
                        Form,
                        NewKeyID,
                        FileTypeID,
                        Source,
                        IsPrimary,
                        Description,
                        EventDate,
                        UserID,
                        IsPublic,
                        IsRoll,
                        UserID1,
                        ModuleID,
                        UserID2,
                        KeyID,
                        Aurl};
                rowListAttachmentRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowListAttachmentRow);
                return rowListAttachmentRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ListAttachmentDataTable cln = ((ListAttachmentDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ListAttachmentDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnExtension = base.Columns["Extension"];
                this.columnForm = base.Columns["Form"];
                this.columnNewKeyID = base.Columns["NewKeyID"];
                this.columnFileTypeID = base.Columns["FileTypeID"];
                this.columnSource = base.Columns["Source"];
                this.columnIsPrimary = base.Columns["IsPrimary"];
                this.columnDescription = base.Columns["Description"];
                this.columnEventDate = base.Columns["EventDate"];
                this.columnUserID = base.Columns["UserID"];
                this.columnIsPublic = base.Columns["IsPublic"];
                this.columnIsRoll = base.Columns["IsRoll"];
                this.columnUserID1 = base.Columns["UserID1"];
                this.columnModuleID = base.Columns["ModuleID"];
                this.columnUserID2 = base.Columns["UserID2"];
                this.columnKeyID = base.Columns["KeyID"];
                this.columnAurl = base.Columns["Aurl"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnExtension = new global::System.Data.DataColumn("Extension", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnExtension);
                this.columnForm = new global::System.Data.DataColumn("Form", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnForm);
                this.columnNewKeyID = new global::System.Data.DataColumn("NewKeyID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNewKeyID);
                this.columnFileTypeID = new global::System.Data.DataColumn("FileTypeID", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFileTypeID);
                this.columnSource = new global::System.Data.DataColumn("Source", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSource);
                this.columnIsPrimary = new global::System.Data.DataColumn("IsPrimary", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsPrimary);
                this.columnDescription = new global::System.Data.DataColumn("Description", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescription);
                this.columnEventDate = new global::System.Data.DataColumn("EventDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEventDate);
                this.columnUserID = new global::System.Data.DataColumn("UserID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUserID);
                this.columnIsPublic = new global::System.Data.DataColumn("IsPublic", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsPublic);
                this.columnIsRoll = new global::System.Data.DataColumn("IsRoll", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsRoll);
                this.columnUserID1 = new global::System.Data.DataColumn("UserID1", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUserID1);
                this.columnModuleID = new global::System.Data.DataColumn("ModuleID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnModuleID);
                this.columnUserID2 = new global::System.Data.DataColumn("UserID2", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUserID2);
                this.columnKeyID = new global::System.Data.DataColumn("KeyID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnKeyID);
                this.columnAurl = new global::System.Data.DataColumn("Aurl", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAurl);
                this.columnExtension.MaxLength = 6;
                this.columnForm.AllowDBNull = false;
                this.columnSource.MaxLength = 500;
                this.columnDescription.MaxLength = 500;
                this.columnUserID.AllowDBNull = false;
                this.columnIsPublic.AllowDBNull = false;
                this.columnIsRoll.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListAttachmentRow NewListAttachmentRow() {
                return ((ListAttachmentRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ListAttachmentRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ListAttachmentRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ListAttachmentRowChanged != null)) {
                    this.ListAttachmentRowChanged(this, new ListAttachmentRowChangeEvent(((ListAttachmentRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ListAttachmentRowChanging != null)) {
                    this.ListAttachmentRowChanging(this, new ListAttachmentRowChangeEvent(((ListAttachmentRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ListAttachmentRowDeleted != null)) {
                    this.ListAttachmentRowDeleted(this, new ListAttachmentRowChangeEvent(((ListAttachmentRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ListAttachmentRowDeleting != null)) {
                    this.ListAttachmentRowDeleting(this, new ListAttachmentRowChangeEvent(((ListAttachmentRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveListAttachmentRow(ListAttachmentRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F1410OwnerReceiptingData ds = new F1410OwnerReceiptingData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ListAttachmentDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class FormBackgroundTableDataTable : global::System.Data.TypedTableBase<FormBackgroundTableRow> {
            
            private global::System.Data.DataColumn columnFormBackgroundColor;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FormBackgroundTableDataTable() {
                this.TableName = "FormBackgroundTable";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal FormBackgroundTableDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected FormBackgroundTableDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FormBackgroundColorColumn {
                get {
                    return this.columnFormBackgroundColor;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FormBackgroundTableRow this[int index] {
                get {
                    return ((FormBackgroundTableRow)(this.Rows[index]));
                }
            }
            
            public event FormBackgroundTableRowChangeEventHandler FormBackgroundTableRowChanging;
            
            public event FormBackgroundTableRowChangeEventHandler FormBackgroundTableRowChanged;
            
            public event FormBackgroundTableRowChangeEventHandler FormBackgroundTableRowDeleting;
            
            public event FormBackgroundTableRowChangeEventHandler FormBackgroundTableRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddFormBackgroundTableRow(FormBackgroundTableRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FormBackgroundTableRow AddFormBackgroundTableRow(string FormBackgroundColor) {
                FormBackgroundTableRow rowFormBackgroundTableRow = ((FormBackgroundTableRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        FormBackgroundColor};
                rowFormBackgroundTableRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowFormBackgroundTableRow);
                return rowFormBackgroundTableRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                FormBackgroundTableDataTable cln = ((FormBackgroundTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new FormBackgroundTableDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnFormBackgroundColor = base.Columns["FormBackgroundColor"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnFormBackgroundColor = new global::System.Data.DataColumn("FormBackgroundColor", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFormBackgroundColor);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FormBackgroundTableRow NewFormBackgroundTableRow() {
                return ((FormBackgroundTableRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new FormBackgroundTableRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(FormBackgroundTableRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.FormBackgroundTableRowChanged != null)) {
                    this.FormBackgroundTableRowChanged(this, new FormBackgroundTableRowChangeEvent(((FormBackgroundTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.FormBackgroundTableRowChanging != null)) {
                    this.FormBackgroundTableRowChanging(this, new FormBackgroundTableRowChangeEvent(((FormBackgroundTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.FormBackgroundTableRowDeleted != null)) {
                    this.FormBackgroundTableRowDeleted(this, new FormBackgroundTableRowChangeEvent(((FormBackgroundTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.FormBackgroundTableRowDeleting != null)) {
                    this.FormBackgroundTableRowDeleting(this, new FormBackgroundTableRowChangeEvent(((FormBackgroundTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveFormBackgroundTableRow(FormBackgroundTableRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F1410OwnerReceiptingData ds = new F1410OwnerReceiptingData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "FormBackgroundTableDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ListOwnerStatementTableRow : global::System.Data.DataRow {
            
            private ListOwnerStatementTableDataTable tableListOwnerStatementTable;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListOwnerStatementTableRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableListOwnerStatementTable = ((ListOwnerStatementTableDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int StatementID {
                get {
                    try {
                        return ((int)(this[this.tableListOwnerStatementTable.StatementIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StatementID\' in table \'ListOwnerStatementTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListOwnerStatementTable.StatementIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MOwnerID {
                get {
                    try {
                        return ((int)(this[this.tableListOwnerStatementTable.MOwnerIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MOwnerID\' in table \'ListOwnerStatementTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListOwnerStatementTable.MOwnerIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RollYear {
                get {
                    try {
                        return ((int)(this[this.tableListOwnerStatementTable.RollYearColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RollYear\' in table \'ListOwnerStatementTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListOwnerStatementTable.RollYearColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ParcelID {
                get {
                    try {
                        return ((int)(this[this.tableListOwnerStatementTable.ParcelIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ParcelID\' in table \'ListOwnerStatementTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListOwnerStatementTable.ParcelIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ParcelNumber {
                get {
                    try {
                        return ((string)(this[this.tableListOwnerStatementTable.ParcelNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ParcelNumber\' in table \'ListOwnerStatementTable\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableListOwnerStatementTable.ParcelNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string StatementNumber {
                get {
                    try {
                        return ((string)(this[this.tableListOwnerStatementTable.StatementNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StatementNumber\' in table \'ListOwnerStatementTable\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableListOwnerStatementTable.StatementNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int OwnerID {
                get {
                    try {
                        return ((int)(this[this.tableListOwnerStatementTable.OwnerIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OwnerID\' in table \'ListOwnerStatementTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListOwnerStatementTable.OwnerIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PostTypeID {
                get {
                    try {
                        return ((int)(this[this.tableListOwnerStatementTable.PostTypeIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PostTypeID\' in table \'ListOwnerStatementTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListOwnerStatementTable.PostTypeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PostName {
                get {
                    try {
                        return ((string)(this[this.tableListOwnerStatementTable.PostNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PostName\' in table \'ListOwnerStatementTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListOwnerStatementTable.PostNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal InterestDue {
                get {
                    try {
                        return ((decimal)(this[this.tableListOwnerStatementTable.InterestDueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InterestDue\' in table \'ListOwnerStatementTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListOwnerStatementTable.InterestDueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal BalanceDue {
                get {
                    try {
                        return ((decimal)(this[this.tableListOwnerStatementTable.BalanceDueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BalanceDue\' in table \'ListOwnerStatementTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListOwnerStatementTable.BalanceDueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal MinTaxDue {
                get {
                    try {
                        return ((decimal)(this[this.tableListOwnerStatementTable.MinTaxDueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MinTaxDue\' in table \'ListOwnerStatementTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListOwnerStatementTable.MinTaxDueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsChecked {
                get {
                    try {
                        return ((bool)(this[this.tableListOwnerStatementTable.IsCheckedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsChecked\' in table \'ListOwnerStatementTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListOwnerStatementTable.IsCheckedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TempInterestDue {
                get {
                    try {
                        return ((decimal)(this[this.tableListOwnerStatementTable.TempInterestDueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TempInterestDue\' in table \'ListOwnerStatementTable\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableListOwnerStatementTable.TempInterestDueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TempBalanceDue {
                get {
                    try {
                        return ((decimal)(this[this.tableListOwnerStatementTable.TempBalanceDueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TempBalanceDue\' in table \'ListOwnerStatementTable\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableListOwnerStatementTable.TempBalanceDueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TempMinTaxDue {
                get {
                    try {
                        return ((decimal)(this[this.tableListOwnerStatementTable.TempMinTaxDueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TempMinTaxDue\' in table \'ListOwnerStatementTable\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableListOwnerStatementTable.TempMinTaxDueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal OutstandingFees {
                get {
                    try {
                        return ((decimal)(this[this.tableListOwnerStatementTable.OutstandingFeesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OutstandingFees\' in table \'ListOwnerStatementTable\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableListOwnerStatementTable.OutstandingFeesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int StatementForm {
                get {
                    try {
                        return ((int)(this[this.tableListOwnerStatementTable.StatementFormColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StatementForm\' in table \'ListOwnerStatementTable\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableListOwnerStatementTable.StatementFormColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PaymentType {
                get {
                    try {
                        return ((string)(this[this.tableListOwnerStatementTable.PaymentTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PaymentType\' in table \'ListOwnerStatementTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListOwnerStatementTable.PaymentTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal FeeAmount {
                get {
                    try {
                        return ((decimal)(this[this.tableListOwnerStatementTable.FeeAmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FeeAmount\' in table \'ListOwnerStatementTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListOwnerStatementTable.FeeAmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TaxDue {
                get {
                    try {
                        return ((decimal)(this[this.tableListOwnerStatementTable.TaxDueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TaxDue\' in table \'ListOwnerStatementTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListOwnerStatementTable.TaxDueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ParcelOwner {
                get {
                    try {
                        return ((int)(this[this.tableListOwnerStatementTable.ParcelOwnerColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ParcelOwner\' in table \'ListOwnerStatementTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListOwnerStatementTable.ParcelOwnerColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DueLabel {
                get {
                    try {
                        return ((string)(this[this.tableListOwnerStatementTable.DueLabelColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DueLabel\' in table \'ListOwnerStatementTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListOwnerStatementTable.DueLabelColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BackgroundColor {
                get {
                    try {
                        return ((string)(this[this.tableListOwnerStatementTable.BackgroundColorColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BackgroundColor\' in table \'ListOwnerStatementTable\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableListOwnerStatementTable.BackgroundColorColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStatementIDNull() {
                return this.IsNull(this.tableListOwnerStatementTable.StatementIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStatementIDNull() {
                this[this.tableListOwnerStatementTable.StatementIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMOwnerIDNull() {
                return this.IsNull(this.tableListOwnerStatementTable.MOwnerIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMOwnerIDNull() {
                this[this.tableListOwnerStatementTable.MOwnerIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRollYearNull() {
                return this.IsNull(this.tableListOwnerStatementTable.RollYearColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRollYearNull() {
                this[this.tableListOwnerStatementTable.RollYearColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsParcelIDNull() {
                return this.IsNull(this.tableListOwnerStatementTable.ParcelIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetParcelIDNull() {
                this[this.tableListOwnerStatementTable.ParcelIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsParcelNumberNull() {
                return this.IsNull(this.tableListOwnerStatementTable.ParcelNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetParcelNumberNull() {
                this[this.tableListOwnerStatementTable.ParcelNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStatementNumberNull() {
                return this.IsNull(this.tableListOwnerStatementTable.StatementNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStatementNumberNull() {
                this[this.tableListOwnerStatementTable.StatementNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOwnerIDNull() {
                return this.IsNull(this.tableListOwnerStatementTable.OwnerIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOwnerIDNull() {
                this[this.tableListOwnerStatementTable.OwnerIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPostTypeIDNull() {
                return this.IsNull(this.tableListOwnerStatementTable.PostTypeIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPostTypeIDNull() {
                this[this.tableListOwnerStatementTable.PostTypeIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPostNameNull() {
                return this.IsNull(this.tableListOwnerStatementTable.PostNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPostNameNull() {
                this[this.tableListOwnerStatementTable.PostNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInterestDueNull() {
                return this.IsNull(this.tableListOwnerStatementTable.InterestDueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInterestDueNull() {
                this[this.tableListOwnerStatementTable.InterestDueColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBalanceDueNull() {
                return this.IsNull(this.tableListOwnerStatementTable.BalanceDueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBalanceDueNull() {
                this[this.tableListOwnerStatementTable.BalanceDueColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMinTaxDueNull() {
                return this.IsNull(this.tableListOwnerStatementTable.MinTaxDueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMinTaxDueNull() {
                this[this.tableListOwnerStatementTable.MinTaxDueColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsCheckedNull() {
                return this.IsNull(this.tableListOwnerStatementTable.IsCheckedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsCheckedNull() {
                this[this.tableListOwnerStatementTable.IsCheckedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTempInterestDueNull() {
                return this.IsNull(this.tableListOwnerStatementTable.TempInterestDueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTempInterestDueNull() {
                this[this.tableListOwnerStatementTable.TempInterestDueColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTempBalanceDueNull() {
                return this.IsNull(this.tableListOwnerStatementTable.TempBalanceDueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTempBalanceDueNull() {
                this[this.tableListOwnerStatementTable.TempBalanceDueColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTempMinTaxDueNull() {
                return this.IsNull(this.tableListOwnerStatementTable.TempMinTaxDueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTempMinTaxDueNull() {
                this[this.tableListOwnerStatementTable.TempMinTaxDueColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOutstandingFeesNull() {
                return this.IsNull(this.tableListOwnerStatementTable.OutstandingFeesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOutstandingFeesNull() {
                this[this.tableListOwnerStatementTable.OutstandingFeesColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStatementFormNull() {
                return this.IsNull(this.tableListOwnerStatementTable.StatementFormColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStatementFormNull() {
                this[this.tableListOwnerStatementTable.StatementFormColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPaymentTypeNull() {
                return this.IsNull(this.tableListOwnerStatementTable.PaymentTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPaymentTypeNull() {
                this[this.tableListOwnerStatementTable.PaymentTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFeeAmountNull() {
                return this.IsNull(this.tableListOwnerStatementTable.FeeAmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFeeAmountNull() {
                this[this.tableListOwnerStatementTable.FeeAmountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTaxDueNull() {
                return this.IsNull(this.tableListOwnerStatementTable.TaxDueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTaxDueNull() {
                this[this.tableListOwnerStatementTable.TaxDueColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsParcelOwnerNull() {
                return this.IsNull(this.tableListOwnerStatementTable.ParcelOwnerColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetParcelOwnerNull() {
                this[this.tableListOwnerStatementTable.ParcelOwnerColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDueLabelNull() {
                return this.IsNull(this.tableListOwnerStatementTable.DueLabelColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDueLabelNull() {
                this[this.tableListOwnerStatementTable.DueLabelColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBackgroundColorNull() {
                return this.IsNull(this.tableListOwnerStatementTable.BackgroundColorColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBackgroundColorNull() {
                this[this.tableListOwnerStatementTable.BackgroundColorColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ListOwnerReceiptTableRow : global::System.Data.DataRow {
            
            private ListOwnerReceiptTableDataTable tableListOwnerReceiptTable;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListOwnerReceiptTableRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableListOwnerReceiptTable = ((ListOwnerReceiptTableDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int OwnerID {
                get {
                    try {
                        return ((int)(this[this.tableListOwnerReceiptTable.OwnerIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OwnerID\' in table \'ListOwnerReceiptTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListOwnerReceiptTable.OwnerIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int POwnerID {
                get {
                    try {
                        return ((int)(this[this.tableListOwnerReceiptTable.POwnerIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'POwnerID\' in table \'ListOwnerReceiptTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListOwnerReceiptTable.POwnerIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string OwnerName {
                get {
                    try {
                        return ((string)(this[this.tableListOwnerReceiptTable.OwnerNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OwnerName\' in table \'ListOwnerReceiptTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListOwnerReceiptTable.OwnerNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Address1 {
                get {
                    try {
                        return ((string)(this[this.tableListOwnerReceiptTable.Address1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Address1\' in table \'ListOwnerReceiptTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListOwnerReceiptTable.Address1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Address2 {
                get {
                    try {
                        return ((string)(this[this.tableListOwnerReceiptTable.Address2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Address2\' in table \'ListOwnerReceiptTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListOwnerReceiptTable.Address2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string City {
                get {
                    try {
                        return ((string)(this[this.tableListOwnerReceiptTable.CityColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'City\' in table \'ListOwnerReceiptTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListOwnerReceiptTable.CityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string State {
                get {
                    try {
                        return ((string)(this[this.tableListOwnerReceiptTable.StateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'State\' in table \'ListOwnerReceiptTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListOwnerReceiptTable.StateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Zip {
                get {
                    try {
                        return ((string)(this[this.tableListOwnerReceiptTable.ZipColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Zip\' in table \'ListOwnerReceiptTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListOwnerReceiptTable.ZipColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int High {
                get {
                    try {
                        return ((int)(this[this.tableListOwnerReceiptTable.HighColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'High\' in table \'ListOwnerReceiptTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListOwnerReceiptTable.HighColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Low {
                get {
                    try {
                        return ((int)(this[this.tableListOwnerReceiptTable.LowColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Low\' in table \'ListOwnerReceiptTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListOwnerReceiptTable.LowColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string OwnerCode {
                get {
                    if (this.IsOwnerCodeNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableListOwnerReceiptTable.OwnerCodeColumn]));
                    }
                }
                set {
                    this[this.tableListOwnerReceiptTable.OwnerCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string OwnershipType {
                get {
                    if (this.IsOwnershipTypeNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableListOwnerReceiptTable.OwnershipTypeColumn]));
                    }
                }
                set {
                    this[this.tableListOwnerReceiptTable.OwnershipTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOwnerIDNull() {
                return this.IsNull(this.tableListOwnerReceiptTable.OwnerIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOwnerIDNull() {
                this[this.tableListOwnerReceiptTable.OwnerIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPOwnerIDNull() {
                return this.IsNull(this.tableListOwnerReceiptTable.POwnerIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPOwnerIDNull() {
                this[this.tableListOwnerReceiptTable.POwnerIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOwnerNameNull() {
                return this.IsNull(this.tableListOwnerReceiptTable.OwnerNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOwnerNameNull() {
                this[this.tableListOwnerReceiptTable.OwnerNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAddress1Null() {
                return this.IsNull(this.tableListOwnerReceiptTable.Address1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAddress1Null() {
                this[this.tableListOwnerReceiptTable.Address1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAddress2Null() {
                return this.IsNull(this.tableListOwnerReceiptTable.Address2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAddress2Null() {
                this[this.tableListOwnerReceiptTable.Address2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCityNull() {
                return this.IsNull(this.tableListOwnerReceiptTable.CityColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCityNull() {
                this[this.tableListOwnerReceiptTable.CityColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStateNull() {
                return this.IsNull(this.tableListOwnerReceiptTable.StateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStateNull() {
                this[this.tableListOwnerReceiptTable.StateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsZipNull() {
                return this.IsNull(this.tableListOwnerReceiptTable.ZipColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetZipNull() {
                this[this.tableListOwnerReceiptTable.ZipColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHighNull() {
                return this.IsNull(this.tableListOwnerReceiptTable.HighColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHighNull() {
                this[this.tableListOwnerReceiptTable.HighColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLowNull() {
                return this.IsNull(this.tableListOwnerReceiptTable.LowColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLowNull() {
                this[this.tableListOwnerReceiptTable.LowColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOwnerCodeNull() {
                return this.IsNull(this.tableListOwnerReceiptTable.OwnerCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOwnerCodeNull() {
                this[this.tableListOwnerReceiptTable.OwnerCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOwnershipTypeNull() {
                return this.IsNull(this.tableListOwnerReceiptTable.OwnershipTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOwnershipTypeNull() {
                this[this.tableListOwnerReceiptTable.OwnershipTypeColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ReceiptIdTableRow : global::System.Data.DataRow {
            
            private ReceiptIdTableDataTable tableReceiptIdTable;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ReceiptIdTableRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableReceiptIdTable = ((ReceiptIdTableDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ReceiptID {
                get {
                    try {
                        return ((int)(this[this.tableReceiptIdTable.ReceiptIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ReceiptID\' in table \'ReceiptIdTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableReceiptIdTable.ReceiptIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsReceiptIDNull() {
                return this.IsNull(this.tableReceiptIdTable.ReceiptIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetReceiptIDNull() {
                this[this.tableReceiptIdTable.ReceiptIDColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ListAttachmentRow : global::System.Data.DataRow {
            
            private ListAttachmentDataTable tableListAttachment;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListAttachmentRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableListAttachment = ((ListAttachmentDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Extension {
                get {
                    try {
                        return ((string)(this[this.tableListAttachment.ExtensionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Extension\' in table \'ListAttachment\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListAttachment.ExtensionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Form {
                get {
                    return ((int)(this[this.tableListAttachment.FormColumn]));
                }
                set {
                    this[this.tableListAttachment.FormColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int NewKeyID {
                get {
                    try {
                        return ((int)(this[this.tableListAttachment.NewKeyIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NewKeyID\' in table \'ListAttachment\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListAttachment.NewKeyIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short FileTypeID {
                get {
                    try {
                        return ((short)(this[this.tableListAttachment.FileTypeIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FileTypeID\' in table \'ListAttachment\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListAttachment.FileTypeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Source {
                get {
                    try {
                        return ((string)(this[this.tableListAttachment.SourceColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Source\' in table \'ListAttachment\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListAttachment.SourceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPrimary {
                get {
                    try {
                        return ((bool)(this[this.tableListAttachment.IsPrimaryColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsPrimary\' in table \'ListAttachment\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListAttachment.IsPrimaryColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Description {
                get {
                    try {
                        return ((string)(this[this.tableListAttachment.DescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Description\' in table \'ListAttachment\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListAttachment.DescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime EventDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableListAttachment.EventDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EventDate\' in table \'ListAttachment\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListAttachment.EventDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int UserID {
                get {
                    return ((int)(this[this.tableListAttachment.UserIDColumn]));
                }
                set {
                    this[this.tableListAttachment.UserIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPublic {
                get {
                    return ((bool)(this[this.tableListAttachment.IsPublicColumn]));
                }
                set {
                    this[this.tableListAttachment.IsPublicColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRoll {
                get {
                    return ((bool)(this[this.tableListAttachment.IsRollColumn]));
                }
                set {
                    this[this.tableListAttachment.IsRollColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int UserID1 {
                get {
                    try {
                        return ((int)(this[this.tableListAttachment.UserID1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UserID1\' in table \'ListAttachment\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListAttachment.UserID1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ModuleID {
                get {
                    try {
                        return ((int)(this[this.tableListAttachment.ModuleIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ModuleID\' in table \'ListAttachment\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListAttachment.ModuleIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int UserID2 {
                get {
                    try {
                        return ((int)(this[this.tableListAttachment.UserID2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UserID2\' in table \'ListAttachment\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListAttachment.UserID2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int KeyID {
                get {
                    try {
                        return ((int)(this[this.tableListAttachment.KeyIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'KeyID\' in table \'ListAttachment\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListAttachment.KeyIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Aurl {
                get {
                    try {
                        return ((string)(this[this.tableListAttachment.AurlColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Aurl\' in table \'ListAttachment\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListAttachment.AurlColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsExtensionNull() {
                return this.IsNull(this.tableListAttachment.ExtensionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetExtensionNull() {
                this[this.tableListAttachment.ExtensionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNewKeyIDNull() {
                return this.IsNull(this.tableListAttachment.NewKeyIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNewKeyIDNull() {
                this[this.tableListAttachment.NewKeyIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFileTypeIDNull() {
                return this.IsNull(this.tableListAttachment.FileTypeIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFileTypeIDNull() {
                this[this.tableListAttachment.FileTypeIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSourceNull() {
                return this.IsNull(this.tableListAttachment.SourceColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSourceNull() {
                this[this.tableListAttachment.SourceColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsPrimaryNull() {
                return this.IsNull(this.tableListAttachment.IsPrimaryColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsPrimaryNull() {
                this[this.tableListAttachment.IsPrimaryColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDescriptionNull() {
                return this.IsNull(this.tableListAttachment.DescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDescriptionNull() {
                this[this.tableListAttachment.DescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEventDateNull() {
                return this.IsNull(this.tableListAttachment.EventDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEventDateNull() {
                this[this.tableListAttachment.EventDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUserID1Null() {
                return this.IsNull(this.tableListAttachment.UserID1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUserID1Null() {
                this[this.tableListAttachment.UserID1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsModuleIDNull() {
                return this.IsNull(this.tableListAttachment.ModuleIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetModuleIDNull() {
                this[this.tableListAttachment.ModuleIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUserID2Null() {
                return this.IsNull(this.tableListAttachment.UserID2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUserID2Null() {
                this[this.tableListAttachment.UserID2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsKeyIDNull() {
                return this.IsNull(this.tableListAttachment.KeyIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetKeyIDNull() {
                this[this.tableListAttachment.KeyIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAurlNull() {
                return this.IsNull(this.tableListAttachment.AurlColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAurlNull() {
                this[this.tableListAttachment.AurlColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class FormBackgroundTableRow : global::System.Data.DataRow {
            
            private FormBackgroundTableDataTable tableFormBackgroundTable;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal FormBackgroundTableRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableFormBackgroundTable = ((FormBackgroundTableDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FormBackgroundColor {
                get {
                    try {
                        return ((string)(this[this.tableFormBackgroundTable.FormBackgroundColorColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FormBackgroundColor\' in table \'FormBackgroundTable\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableFormBackgroundTable.FormBackgroundColorColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFormBackgroundColorNull() {
                return this.IsNull(this.tableFormBackgroundTable.FormBackgroundColorColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFormBackgroundColorNull() {
                this[this.tableFormBackgroundTable.FormBackgroundColorColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ListOwnerStatementTableRowChangeEvent : global::System.EventArgs {
            
            private ListOwnerStatementTableRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListOwnerStatementTableRowChangeEvent(ListOwnerStatementTableRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListOwnerStatementTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ListOwnerReceiptTableRowChangeEvent : global::System.EventArgs {
            
            private ListOwnerReceiptTableRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListOwnerReceiptTableRowChangeEvent(ListOwnerReceiptTableRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListOwnerReceiptTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ReceiptIdTableRowChangeEvent : global::System.EventArgs {
            
            private ReceiptIdTableRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReceiptIdTableRowChangeEvent(ReceiptIdTableRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReceiptIdTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ListAttachmentRowChangeEvent : global::System.EventArgs {
            
            private ListAttachmentRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListAttachmentRowChangeEvent(ListAttachmentRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListAttachmentRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class FormBackgroundTableRowChangeEvent : global::System.EventArgs {
            
            private FormBackgroundTableRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FormBackgroundTableRowChangeEvent(FormBackgroundTableRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FormBackgroundTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591