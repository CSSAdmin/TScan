//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.8689
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace TerraScan.BusinessEntities {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("F23510SnapshotImport")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class F23510SnapshotImport : global::System.Data.DataSet {
        
        private GetSnapshotImportHeaderDetailsDataTable tableGetSnapshotImportHeaderDetails;
        
        private F28510_SaveHeaderTemplateDataTableDataTable tableF28510_SaveHeaderTemplateDataTable;
        
        private GetSnapshotImportDetailsDataTable tableGetSnapshotImportDetails;
        
        private SaveSnapshotImportEntryErrorDataTable tableSaveSnapshotImportEntryError;
        
        private SaveSnapshotImportEntryDataTable tableSaveSnapshotImportEntry;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public F23510SnapshotImport() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected F23510SnapshotImport(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["GetSnapshotImportHeaderDetails"] != null)) {
                    base.Tables.Add(new GetSnapshotImportHeaderDetailsDataTable(ds.Tables["GetSnapshotImportHeaderDetails"]));
                }
                if ((ds.Tables["F28510_SaveHeaderTemplateDataTable"] != null)) {
                    base.Tables.Add(new F28510_SaveHeaderTemplateDataTableDataTable(ds.Tables["F28510_SaveHeaderTemplateDataTable"]));
                }
                if ((ds.Tables["GetSnapshotImportDetails"] != null)) {
                    base.Tables.Add(new GetSnapshotImportDetailsDataTable(ds.Tables["GetSnapshotImportDetails"]));
                }
                if ((ds.Tables["SaveSnapshotImportEntryError"] != null)) {
                    base.Tables.Add(new SaveSnapshotImportEntryErrorDataTable(ds.Tables["SaveSnapshotImportEntryError"]));
                }
                if ((ds.Tables["SaveSnapshotImportEntry"] != null)) {
                    base.Tables.Add(new SaveSnapshotImportEntryDataTable(ds.Tables["SaveSnapshotImportEntry"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GetSnapshotImportHeaderDetailsDataTable GetSnapshotImportHeaderDetails {
            get {
                return this.tableGetSnapshotImportHeaderDetails;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public F28510_SaveHeaderTemplateDataTableDataTable F28510_SaveHeaderTemplateDataTable {
            get {
                return this.tableF28510_SaveHeaderTemplateDataTable;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GetSnapshotImportDetailsDataTable GetSnapshotImportDetails {
            get {
                return this.tableGetSnapshotImportDetails;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SaveSnapshotImportEntryErrorDataTable SaveSnapshotImportEntryError {
            get {
                return this.tableSaveSnapshotImportEntryError;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SaveSnapshotImportEntryDataTable SaveSnapshotImportEntry {
            get {
                return this.tableSaveSnapshotImportEntry;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            F23510SnapshotImport cln = ((F23510SnapshotImport)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["GetSnapshotImportHeaderDetails"] != null)) {
                    base.Tables.Add(new GetSnapshotImportHeaderDetailsDataTable(ds.Tables["GetSnapshotImportHeaderDetails"]));
                }
                if ((ds.Tables["F28510_SaveHeaderTemplateDataTable"] != null)) {
                    base.Tables.Add(new F28510_SaveHeaderTemplateDataTableDataTable(ds.Tables["F28510_SaveHeaderTemplateDataTable"]));
                }
                if ((ds.Tables["GetSnapshotImportDetails"] != null)) {
                    base.Tables.Add(new GetSnapshotImportDetailsDataTable(ds.Tables["GetSnapshotImportDetails"]));
                }
                if ((ds.Tables["SaveSnapshotImportEntryError"] != null)) {
                    base.Tables.Add(new SaveSnapshotImportEntryErrorDataTable(ds.Tables["SaveSnapshotImportEntryError"]));
                }
                if ((ds.Tables["SaveSnapshotImportEntry"] != null)) {
                    base.Tables.Add(new SaveSnapshotImportEntryDataTable(ds.Tables["SaveSnapshotImportEntry"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableGetSnapshotImportHeaderDetails = ((GetSnapshotImportHeaderDetailsDataTable)(base.Tables["GetSnapshotImportHeaderDetails"]));
            if ((initTable == true)) {
                if ((this.tableGetSnapshotImportHeaderDetails != null)) {
                    this.tableGetSnapshotImportHeaderDetails.InitVars();
                }
            }
            this.tableF28510_SaveHeaderTemplateDataTable = ((F28510_SaveHeaderTemplateDataTableDataTable)(base.Tables["F28510_SaveHeaderTemplateDataTable"]));
            if ((initTable == true)) {
                if ((this.tableF28510_SaveHeaderTemplateDataTable != null)) {
                    this.tableF28510_SaveHeaderTemplateDataTable.InitVars();
                }
            }
            this.tableGetSnapshotImportDetails = ((GetSnapshotImportDetailsDataTable)(base.Tables["GetSnapshotImportDetails"]));
            if ((initTable == true)) {
                if ((this.tableGetSnapshotImportDetails != null)) {
                    this.tableGetSnapshotImportDetails.InitVars();
                }
            }
            this.tableSaveSnapshotImportEntryError = ((SaveSnapshotImportEntryErrorDataTable)(base.Tables["SaveSnapshotImportEntryError"]));
            if ((initTable == true)) {
                if ((this.tableSaveSnapshotImportEntryError != null)) {
                    this.tableSaveSnapshotImportEntryError.InitVars();
                }
            }
            this.tableSaveSnapshotImportEntry = ((SaveSnapshotImportEntryDataTable)(base.Tables["SaveSnapshotImportEntry"]));
            if ((initTable == true)) {
                if ((this.tableSaveSnapshotImportEntry != null)) {
                    this.tableSaveSnapshotImportEntry.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "F23510SnapshotImport";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/F23510SnapshotImport.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableGetSnapshotImportHeaderDetails = new GetSnapshotImportHeaderDetailsDataTable();
            base.Tables.Add(this.tableGetSnapshotImportHeaderDetails);
            this.tableF28510_SaveHeaderTemplateDataTable = new F28510_SaveHeaderTemplateDataTableDataTable();
            base.Tables.Add(this.tableF28510_SaveHeaderTemplateDataTable);
            this.tableGetSnapshotImportDetails = new GetSnapshotImportDetailsDataTable();
            base.Tables.Add(this.tableGetSnapshotImportDetails);
            this.tableSaveSnapshotImportEntryError = new SaveSnapshotImportEntryErrorDataTable();
            base.Tables.Add(this.tableSaveSnapshotImportEntryError);
            this.tableSaveSnapshotImportEntry = new SaveSnapshotImportEntryDataTable();
            base.Tables.Add(this.tableSaveSnapshotImportEntry);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeGetSnapshotImportHeaderDetails() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeF28510_SaveHeaderTemplateDataTable() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeGetSnapshotImportDetails() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSaveSnapshotImportEntryError() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSaveSnapshotImportEntry() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            F23510SnapshotImport ds = new F23510SnapshotImport();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void GetSnapshotImportHeaderDetailsRowChangeEventHandler(object sender, GetSnapshotImportHeaderDetailsRowChangeEvent e);
        
        public delegate void F28510_SaveHeaderTemplateDataTableRowChangeEventHandler(object sender, F28510_SaveHeaderTemplateDataTableRowChangeEvent e);
        
        public delegate void GetSnapshotImportDetailsRowChangeEventHandler(object sender, GetSnapshotImportDetailsRowChangeEvent e);
        
        public delegate void SaveSnapshotImportEntryErrorRowChangeEventHandler(object sender, SaveSnapshotImportEntryErrorRowChangeEvent e);
        
        public delegate void SaveSnapshotImportEntryRowChangeEventHandler(object sender, SaveSnapshotImportEntryRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class GetSnapshotImportHeaderDetailsDataTable : global::System.Data.TypedTableBase<GetSnapshotImportHeaderDetailsRow> {
            
            private global::System.Data.DataColumn columnImportID;
            
            private global::System.Data.DataColumn columnTemplateID;
            
            private global::System.Data.DataColumn columnTemplateName;
            
            private global::System.Data.DataColumn columnTypeName;
            
            private global::System.Data.DataColumn columnFilePath;
            
            private global::System.Data.DataColumn columnIsImportEnabled;
            
            private global::System.Data.DataColumn columnImportStatus;
            
            private global::System.Data.DataColumn columnImportedEntries;
            
            private global::System.Data.DataColumn columnIsCheckForErrors;
            
            private global::System.Data.DataColumn columnCheckErrorStatus;
            
            private global::System.Data.DataColumn columnEntriesInError;
            
            private global::System.Data.DataColumn columnIsRecordsCreated;
            
            private global::System.Data.DataColumn columnRecordsCreateStatus;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetSnapshotImportHeaderDetailsDataTable() {
                this.TableName = "GetSnapshotImportHeaderDetails";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetSnapshotImportHeaderDetailsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected GetSnapshotImportHeaderDetailsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ImportIDColumn {
                get {
                    return this.columnImportID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TemplateIDColumn {
                get {
                    return this.columnTemplateID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TemplateNameColumn {
                get {
                    return this.columnTemplateName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TypeNameColumn {
                get {
                    return this.columnTypeName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FilePathColumn {
                get {
                    return this.columnFilePath;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsImportEnabledColumn {
                get {
                    return this.columnIsImportEnabled;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ImportStatusColumn {
                get {
                    return this.columnImportStatus;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ImportedEntriesColumn {
                get {
                    return this.columnImportedEntries;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsCheckForErrorsColumn {
                get {
                    return this.columnIsCheckForErrors;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CheckErrorStatusColumn {
                get {
                    return this.columnCheckErrorStatus;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EntriesInErrorColumn {
                get {
                    return this.columnEntriesInError;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsRecordsCreatedColumn {
                get {
                    return this.columnIsRecordsCreated;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RecordsCreateStatusColumn {
                get {
                    return this.columnRecordsCreateStatus;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetSnapshotImportHeaderDetailsRow this[int index] {
                get {
                    return ((GetSnapshotImportHeaderDetailsRow)(this.Rows[index]));
                }
            }
            
            public event GetSnapshotImportHeaderDetailsRowChangeEventHandler GetSnapshotImportHeaderDetailsRowChanging;
            
            public event GetSnapshotImportHeaderDetailsRowChangeEventHandler GetSnapshotImportHeaderDetailsRowChanged;
            
            public event GetSnapshotImportHeaderDetailsRowChangeEventHandler GetSnapshotImportHeaderDetailsRowDeleting;
            
            public event GetSnapshotImportHeaderDetailsRowChangeEventHandler GetSnapshotImportHeaderDetailsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddGetSnapshotImportHeaderDetailsRow(GetSnapshotImportHeaderDetailsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetSnapshotImportHeaderDetailsRow AddGetSnapshotImportHeaderDetailsRow(int ImportID, int TemplateID, string TemplateName, string TypeName, string FilePath, string IsImportEnabled, string ImportStatus, int ImportedEntries, string IsCheckForErrors, string CheckErrorStatus, int EntriesInError, string IsRecordsCreated, string RecordsCreateStatus) {
                GetSnapshotImportHeaderDetailsRow rowGetSnapshotImportHeaderDetailsRow = ((GetSnapshotImportHeaderDetailsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ImportID,
                        TemplateID,
                        TemplateName,
                        TypeName,
                        FilePath,
                        IsImportEnabled,
                        ImportStatus,
                        ImportedEntries,
                        IsCheckForErrors,
                        CheckErrorStatus,
                        EntriesInError,
                        IsRecordsCreated,
                        RecordsCreateStatus};
                rowGetSnapshotImportHeaderDetailsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowGetSnapshotImportHeaderDetailsRow);
                return rowGetSnapshotImportHeaderDetailsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                GetSnapshotImportHeaderDetailsDataTable cln = ((GetSnapshotImportHeaderDetailsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new GetSnapshotImportHeaderDetailsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnImportID = base.Columns["ImportID"];
                this.columnTemplateID = base.Columns["TemplateID"];
                this.columnTemplateName = base.Columns["TemplateName"];
                this.columnTypeName = base.Columns["TypeName"];
                this.columnFilePath = base.Columns["FilePath"];
                this.columnIsImportEnabled = base.Columns["IsImportEnabled"];
                this.columnImportStatus = base.Columns["ImportStatus"];
                this.columnImportedEntries = base.Columns["ImportedEntries"];
                this.columnIsCheckForErrors = base.Columns["IsCheckForErrors"];
                this.columnCheckErrorStatus = base.Columns["CheckErrorStatus"];
                this.columnEntriesInError = base.Columns["EntriesInError"];
                this.columnIsRecordsCreated = base.Columns["IsRecordsCreated"];
                this.columnRecordsCreateStatus = base.Columns["RecordsCreateStatus"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnImportID = new global::System.Data.DataColumn("ImportID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnImportID);
                this.columnTemplateID = new global::System.Data.DataColumn("TemplateID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTemplateID);
                this.columnTemplateName = new global::System.Data.DataColumn("TemplateName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTemplateName);
                this.columnTypeName = new global::System.Data.DataColumn("TypeName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTypeName);
                this.columnFilePath = new global::System.Data.DataColumn("FilePath", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFilePath);
                this.columnIsImportEnabled = new global::System.Data.DataColumn("IsImportEnabled", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsImportEnabled);
                this.columnImportStatus = new global::System.Data.DataColumn("ImportStatus", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnImportStatus);
                this.columnImportedEntries = new global::System.Data.DataColumn("ImportedEntries", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnImportedEntries);
                this.columnIsCheckForErrors = new global::System.Data.DataColumn("IsCheckForErrors", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsCheckForErrors);
                this.columnCheckErrorStatus = new global::System.Data.DataColumn("CheckErrorStatus", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCheckErrorStatus);
                this.columnEntriesInError = new global::System.Data.DataColumn("EntriesInError", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEntriesInError);
                this.columnIsRecordsCreated = new global::System.Data.DataColumn("IsRecordsCreated", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsRecordsCreated);
                this.columnRecordsCreateStatus = new global::System.Data.DataColumn("RecordsCreateStatus", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRecordsCreateStatus);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetSnapshotImportHeaderDetailsRow NewGetSnapshotImportHeaderDetailsRow() {
                return ((GetSnapshotImportHeaderDetailsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new GetSnapshotImportHeaderDetailsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(GetSnapshotImportHeaderDetailsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GetSnapshotImportHeaderDetailsRowChanged != null)) {
                    this.GetSnapshotImportHeaderDetailsRowChanged(this, new GetSnapshotImportHeaderDetailsRowChangeEvent(((GetSnapshotImportHeaderDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GetSnapshotImportHeaderDetailsRowChanging != null)) {
                    this.GetSnapshotImportHeaderDetailsRowChanging(this, new GetSnapshotImportHeaderDetailsRowChangeEvent(((GetSnapshotImportHeaderDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GetSnapshotImportHeaderDetailsRowDeleted != null)) {
                    this.GetSnapshotImportHeaderDetailsRowDeleted(this, new GetSnapshotImportHeaderDetailsRowChangeEvent(((GetSnapshotImportHeaderDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GetSnapshotImportHeaderDetailsRowDeleting != null)) {
                    this.GetSnapshotImportHeaderDetailsRowDeleting(this, new GetSnapshotImportHeaderDetailsRowChangeEvent(((GetSnapshotImportHeaderDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveGetSnapshotImportHeaderDetailsRow(GetSnapshotImportHeaderDetailsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F23510SnapshotImport ds = new F23510SnapshotImport();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "GetSnapshotImportHeaderDetailsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class F28510_SaveHeaderTemplateDataTableDataTable : global::System.Data.TypedTableBase<F28510_SaveHeaderTemplateDataTableRow> {
            
            private global::System.Data.DataColumn columnTemplateID;
            
            private global::System.Data.DataColumn columnFilePath;
            
            private global::System.Data.DataColumn columnIsImportEnabled;
            
            private global::System.Data.DataColumn columnIsCheckForErrors;
            
            private global::System.Data.DataColumn columnIsRecordsCreated;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public F28510_SaveHeaderTemplateDataTableDataTable() {
                this.TableName = "F28510_SaveHeaderTemplateDataTable";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal F28510_SaveHeaderTemplateDataTableDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected F28510_SaveHeaderTemplateDataTableDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TemplateIDColumn {
                get {
                    return this.columnTemplateID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FilePathColumn {
                get {
                    return this.columnFilePath;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsImportEnabledColumn {
                get {
                    return this.columnIsImportEnabled;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsCheckForErrorsColumn {
                get {
                    return this.columnIsCheckForErrors;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsRecordsCreatedColumn {
                get {
                    return this.columnIsRecordsCreated;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public F28510_SaveHeaderTemplateDataTableRow this[int index] {
                get {
                    return ((F28510_SaveHeaderTemplateDataTableRow)(this.Rows[index]));
                }
            }
            
            public event F28510_SaveHeaderTemplateDataTableRowChangeEventHandler F28510_SaveHeaderTemplateDataTableRowChanging;
            
            public event F28510_SaveHeaderTemplateDataTableRowChangeEventHandler F28510_SaveHeaderTemplateDataTableRowChanged;
            
            public event F28510_SaveHeaderTemplateDataTableRowChangeEventHandler F28510_SaveHeaderTemplateDataTableRowDeleting;
            
            public event F28510_SaveHeaderTemplateDataTableRowChangeEventHandler F28510_SaveHeaderTemplateDataTableRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddF28510_SaveHeaderTemplateDataTableRow(F28510_SaveHeaderTemplateDataTableRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public F28510_SaveHeaderTemplateDataTableRow AddF28510_SaveHeaderTemplateDataTableRow(int TemplateID, string FilePath, byte IsImportEnabled, byte IsCheckForErrors, byte IsRecordsCreated) {
                F28510_SaveHeaderTemplateDataTableRow rowF28510_SaveHeaderTemplateDataTableRow = ((F28510_SaveHeaderTemplateDataTableRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        TemplateID,
                        FilePath,
                        IsImportEnabled,
                        IsCheckForErrors,
                        IsRecordsCreated};
                rowF28510_SaveHeaderTemplateDataTableRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowF28510_SaveHeaderTemplateDataTableRow);
                return rowF28510_SaveHeaderTemplateDataTableRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                F28510_SaveHeaderTemplateDataTableDataTable cln = ((F28510_SaveHeaderTemplateDataTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new F28510_SaveHeaderTemplateDataTableDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnTemplateID = base.Columns["TemplateID"];
                this.columnFilePath = base.Columns["FilePath"];
                this.columnIsImportEnabled = base.Columns["IsImportEnabled"];
                this.columnIsCheckForErrors = base.Columns["IsCheckForErrors"];
                this.columnIsRecordsCreated = base.Columns["IsRecordsCreated"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnTemplateID = new global::System.Data.DataColumn("TemplateID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTemplateID);
                this.columnFilePath = new global::System.Data.DataColumn("FilePath", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFilePath);
                this.columnIsImportEnabled = new global::System.Data.DataColumn("IsImportEnabled", typeof(byte), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsImportEnabled);
                this.columnIsCheckForErrors = new global::System.Data.DataColumn("IsCheckForErrors", typeof(byte), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsCheckForErrors);
                this.columnIsRecordsCreated = new global::System.Data.DataColumn("IsRecordsCreated", typeof(byte), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsRecordsCreated);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public F28510_SaveHeaderTemplateDataTableRow NewF28510_SaveHeaderTemplateDataTableRow() {
                return ((F28510_SaveHeaderTemplateDataTableRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new F28510_SaveHeaderTemplateDataTableRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(F28510_SaveHeaderTemplateDataTableRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.F28510_SaveHeaderTemplateDataTableRowChanged != null)) {
                    this.F28510_SaveHeaderTemplateDataTableRowChanged(this, new F28510_SaveHeaderTemplateDataTableRowChangeEvent(((F28510_SaveHeaderTemplateDataTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.F28510_SaveHeaderTemplateDataTableRowChanging != null)) {
                    this.F28510_SaveHeaderTemplateDataTableRowChanging(this, new F28510_SaveHeaderTemplateDataTableRowChangeEvent(((F28510_SaveHeaderTemplateDataTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.F28510_SaveHeaderTemplateDataTableRowDeleted != null)) {
                    this.F28510_SaveHeaderTemplateDataTableRowDeleted(this, new F28510_SaveHeaderTemplateDataTableRowChangeEvent(((F28510_SaveHeaderTemplateDataTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.F28510_SaveHeaderTemplateDataTableRowDeleting != null)) {
                    this.F28510_SaveHeaderTemplateDataTableRowDeleting(this, new F28510_SaveHeaderTemplateDataTableRowChangeEvent(((F28510_SaveHeaderTemplateDataTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveF28510_SaveHeaderTemplateDataTableRow(F28510_SaveHeaderTemplateDataTableRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F23510SnapshotImport ds = new F23510SnapshotImport();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "F28510_SaveHeaderTemplateDataTableDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class GetSnapshotImportDetailsDataTable : global::System.Data.TypedTableBase<GetSnapshotImportDetailsRow> {
            
            private global::System.Data.DataColumn columnImportID;
            
            private global::System.Data.DataColumn columnParcelNumber;
            
            private global::System.Data.DataColumn columnRollYear;
            
            private global::System.Data.DataColumn columnPermitNumber;
            
            private global::System.Data.DataColumn columnErrorStatus;
            
            private global::System.Data.DataColumn columnLine;
            
            private global::System.Data.DataColumn columnEntryID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetSnapshotImportDetailsDataTable() {
                this.TableName = "GetSnapshotImportDetails";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetSnapshotImportDetailsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected GetSnapshotImportDetailsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ImportIDColumn {
                get {
                    return this.columnImportID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ParcelNumberColumn {
                get {
                    return this.columnParcelNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RollYearColumn {
                get {
                    return this.columnRollYear;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PermitNumberColumn {
                get {
                    return this.columnPermitNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ErrorStatusColumn {
                get {
                    return this.columnErrorStatus;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LineColumn {
                get {
                    return this.columnLine;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EntryIDColumn {
                get {
                    return this.columnEntryID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetSnapshotImportDetailsRow this[int index] {
                get {
                    return ((GetSnapshotImportDetailsRow)(this.Rows[index]));
                }
            }
            
            public event GetSnapshotImportDetailsRowChangeEventHandler GetSnapshotImportDetailsRowChanging;
            
            public event GetSnapshotImportDetailsRowChangeEventHandler GetSnapshotImportDetailsRowChanged;
            
            public event GetSnapshotImportDetailsRowChangeEventHandler GetSnapshotImportDetailsRowDeleting;
            
            public event GetSnapshotImportDetailsRowChangeEventHandler GetSnapshotImportDetailsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddGetSnapshotImportDetailsRow(GetSnapshotImportDetailsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetSnapshotImportDetailsRow AddGetSnapshotImportDetailsRow(int ImportID, string ParcelNumber, int RollYear, string PermitNumber, string ErrorStatus, int Line, int EntryID) {
                GetSnapshotImportDetailsRow rowGetSnapshotImportDetailsRow = ((GetSnapshotImportDetailsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ImportID,
                        ParcelNumber,
                        RollYear,
                        PermitNumber,
                        ErrorStatus,
                        Line,
                        EntryID};
                rowGetSnapshotImportDetailsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowGetSnapshotImportDetailsRow);
                return rowGetSnapshotImportDetailsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                GetSnapshotImportDetailsDataTable cln = ((GetSnapshotImportDetailsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new GetSnapshotImportDetailsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnImportID = base.Columns["ImportID"];
                this.columnParcelNumber = base.Columns["ParcelNumber"];
                this.columnRollYear = base.Columns["RollYear"];
                this.columnPermitNumber = base.Columns["PermitNumber"];
                this.columnErrorStatus = base.Columns["ErrorStatus"];
                this.columnLine = base.Columns["Line"];
                this.columnEntryID = base.Columns["EntryID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnImportID = new global::System.Data.DataColumn("ImportID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnImportID);
                this.columnParcelNumber = new global::System.Data.DataColumn("ParcelNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnParcelNumber);
                this.columnRollYear = new global::System.Data.DataColumn("RollYear", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRollYear);
                this.columnPermitNumber = new global::System.Data.DataColumn("PermitNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPermitNumber);
                this.columnErrorStatus = new global::System.Data.DataColumn("ErrorStatus", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnErrorStatus);
                this.columnLine = new global::System.Data.DataColumn("Line", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLine);
                this.columnEntryID = new global::System.Data.DataColumn("EntryID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEntryID);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetSnapshotImportDetailsRow NewGetSnapshotImportDetailsRow() {
                return ((GetSnapshotImportDetailsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new GetSnapshotImportDetailsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(GetSnapshotImportDetailsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GetSnapshotImportDetailsRowChanged != null)) {
                    this.GetSnapshotImportDetailsRowChanged(this, new GetSnapshotImportDetailsRowChangeEvent(((GetSnapshotImportDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GetSnapshotImportDetailsRowChanging != null)) {
                    this.GetSnapshotImportDetailsRowChanging(this, new GetSnapshotImportDetailsRowChangeEvent(((GetSnapshotImportDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GetSnapshotImportDetailsRowDeleted != null)) {
                    this.GetSnapshotImportDetailsRowDeleted(this, new GetSnapshotImportDetailsRowChangeEvent(((GetSnapshotImportDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GetSnapshotImportDetailsRowDeleting != null)) {
                    this.GetSnapshotImportDetailsRowDeleting(this, new GetSnapshotImportDetailsRowChangeEvent(((GetSnapshotImportDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveGetSnapshotImportDetailsRow(GetSnapshotImportDetailsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F23510SnapshotImport ds = new F23510SnapshotImport();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "GetSnapshotImportDetailsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SaveSnapshotImportEntryErrorDataTable : global::System.Data.TypedTableBase<SaveSnapshotImportEntryErrorRow> {
            
            private global::System.Data.DataColumn columnErrorMsg;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SaveSnapshotImportEntryErrorDataTable() {
                this.TableName = "SaveSnapshotImportEntryError";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SaveSnapshotImportEntryErrorDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SaveSnapshotImportEntryErrorDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ErrorMsgColumn {
                get {
                    return this.columnErrorMsg;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SaveSnapshotImportEntryErrorRow this[int index] {
                get {
                    return ((SaveSnapshotImportEntryErrorRow)(this.Rows[index]));
                }
            }
            
            public event SaveSnapshotImportEntryErrorRowChangeEventHandler SaveSnapshotImportEntryErrorRowChanging;
            
            public event SaveSnapshotImportEntryErrorRowChangeEventHandler SaveSnapshotImportEntryErrorRowChanged;
            
            public event SaveSnapshotImportEntryErrorRowChangeEventHandler SaveSnapshotImportEntryErrorRowDeleting;
            
            public event SaveSnapshotImportEntryErrorRowChangeEventHandler SaveSnapshotImportEntryErrorRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSaveSnapshotImportEntryErrorRow(SaveSnapshotImportEntryErrorRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SaveSnapshotImportEntryErrorRow AddSaveSnapshotImportEntryErrorRow(string ErrorMsg) {
                SaveSnapshotImportEntryErrorRow rowSaveSnapshotImportEntryErrorRow = ((SaveSnapshotImportEntryErrorRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ErrorMsg};
                rowSaveSnapshotImportEntryErrorRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowSaveSnapshotImportEntryErrorRow);
                return rowSaveSnapshotImportEntryErrorRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                SaveSnapshotImportEntryErrorDataTable cln = ((SaveSnapshotImportEntryErrorDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new SaveSnapshotImportEntryErrorDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnErrorMsg = base.Columns["ErrorMsg"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnErrorMsg = new global::System.Data.DataColumn("ErrorMsg", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnErrorMsg);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SaveSnapshotImportEntryErrorRow NewSaveSnapshotImportEntryErrorRow() {
                return ((SaveSnapshotImportEntryErrorRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new SaveSnapshotImportEntryErrorRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(SaveSnapshotImportEntryErrorRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SaveSnapshotImportEntryErrorRowChanged != null)) {
                    this.SaveSnapshotImportEntryErrorRowChanged(this, new SaveSnapshotImportEntryErrorRowChangeEvent(((SaveSnapshotImportEntryErrorRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SaveSnapshotImportEntryErrorRowChanging != null)) {
                    this.SaveSnapshotImportEntryErrorRowChanging(this, new SaveSnapshotImportEntryErrorRowChangeEvent(((SaveSnapshotImportEntryErrorRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SaveSnapshotImportEntryErrorRowDeleted != null)) {
                    this.SaveSnapshotImportEntryErrorRowDeleted(this, new SaveSnapshotImportEntryErrorRowChangeEvent(((SaveSnapshotImportEntryErrorRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SaveSnapshotImportEntryErrorRowDeleting != null)) {
                    this.SaveSnapshotImportEntryErrorRowDeleting(this, new SaveSnapshotImportEntryErrorRowChangeEvent(((SaveSnapshotImportEntryErrorRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSaveSnapshotImportEntryErrorRow(SaveSnapshotImportEntryErrorRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F23510SnapshotImport ds = new F23510SnapshotImport();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SaveSnapshotImportEntryErrorDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SaveSnapshotImportEntryDataTable : global::System.Data.TypedTableBase<SaveSnapshotImportEntryRow> {
            
            private global::System.Data.DataColumn columnImportRunBy;
            
            private global::System.Data.DataColumn columnImportRunDt;
            
            private global::System.Data.DataColumn columnImportedEntries;
            
            private global::System.Data.DataColumn columnImportedEntriesTotal;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SaveSnapshotImportEntryDataTable() {
                this.TableName = "SaveSnapshotImportEntry";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SaveSnapshotImportEntryDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SaveSnapshotImportEntryDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ImportRunByColumn {
                get {
                    return this.columnImportRunBy;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ImportRunDtColumn {
                get {
                    return this.columnImportRunDt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ImportedEntriesColumn {
                get {
                    return this.columnImportedEntries;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ImportedEntriesTotalColumn {
                get {
                    return this.columnImportedEntriesTotal;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SaveSnapshotImportEntryRow this[int index] {
                get {
                    return ((SaveSnapshotImportEntryRow)(this.Rows[index]));
                }
            }
            
            public event SaveSnapshotImportEntryRowChangeEventHandler SaveSnapshotImportEntryRowChanging;
            
            public event SaveSnapshotImportEntryRowChangeEventHandler SaveSnapshotImportEntryRowChanged;
            
            public event SaveSnapshotImportEntryRowChangeEventHandler SaveSnapshotImportEntryRowDeleting;
            
            public event SaveSnapshotImportEntryRowChangeEventHandler SaveSnapshotImportEntryRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSaveSnapshotImportEntryRow(SaveSnapshotImportEntryRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SaveSnapshotImportEntryRow AddSaveSnapshotImportEntryRow(string ImportRunBy, System.DateTime ImportRunDt, int ImportedEntries, decimal ImportedEntriesTotal) {
                SaveSnapshotImportEntryRow rowSaveSnapshotImportEntryRow = ((SaveSnapshotImportEntryRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ImportRunBy,
                        ImportRunDt,
                        ImportedEntries,
                        ImportedEntriesTotal};
                rowSaveSnapshotImportEntryRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowSaveSnapshotImportEntryRow);
                return rowSaveSnapshotImportEntryRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                SaveSnapshotImportEntryDataTable cln = ((SaveSnapshotImportEntryDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new SaveSnapshotImportEntryDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnImportRunBy = base.Columns["ImportRunBy"];
                this.columnImportRunDt = base.Columns["ImportRunDt"];
                this.columnImportedEntries = base.Columns["ImportedEntries"];
                this.columnImportedEntriesTotal = base.Columns["ImportedEntriesTotal"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnImportRunBy = new global::System.Data.DataColumn("ImportRunBy", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnImportRunBy);
                this.columnImportRunDt = new global::System.Data.DataColumn("ImportRunDt", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnImportRunDt);
                this.columnImportedEntries = new global::System.Data.DataColumn("ImportedEntries", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnImportedEntries);
                this.columnImportedEntriesTotal = new global::System.Data.DataColumn("ImportedEntriesTotal", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnImportedEntriesTotal);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SaveSnapshotImportEntryRow NewSaveSnapshotImportEntryRow() {
                return ((SaveSnapshotImportEntryRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new SaveSnapshotImportEntryRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(SaveSnapshotImportEntryRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SaveSnapshotImportEntryRowChanged != null)) {
                    this.SaveSnapshotImportEntryRowChanged(this, new SaveSnapshotImportEntryRowChangeEvent(((SaveSnapshotImportEntryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SaveSnapshotImportEntryRowChanging != null)) {
                    this.SaveSnapshotImportEntryRowChanging(this, new SaveSnapshotImportEntryRowChangeEvent(((SaveSnapshotImportEntryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SaveSnapshotImportEntryRowDeleted != null)) {
                    this.SaveSnapshotImportEntryRowDeleted(this, new SaveSnapshotImportEntryRowChangeEvent(((SaveSnapshotImportEntryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SaveSnapshotImportEntryRowDeleting != null)) {
                    this.SaveSnapshotImportEntryRowDeleting(this, new SaveSnapshotImportEntryRowChangeEvent(((SaveSnapshotImportEntryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSaveSnapshotImportEntryRow(SaveSnapshotImportEntryRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F23510SnapshotImport ds = new F23510SnapshotImport();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SaveSnapshotImportEntryDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class GetSnapshotImportHeaderDetailsRow : global::System.Data.DataRow {
            
            private GetSnapshotImportHeaderDetailsDataTable tableGetSnapshotImportHeaderDetails;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetSnapshotImportHeaderDetailsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableGetSnapshotImportHeaderDetails = ((GetSnapshotImportHeaderDetailsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ImportID {
                get {
                    try {
                        return ((int)(this[this.tableGetSnapshotImportHeaderDetails.ImportIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ImportID\' in table \'GetSnapshotImportHeaderDetails\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableGetSnapshotImportHeaderDetails.ImportIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TemplateID {
                get {
                    try {
                        return ((int)(this[this.tableGetSnapshotImportHeaderDetails.TemplateIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TemplateID\' in table \'GetSnapshotImportHeaderDetails\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tableGetSnapshotImportHeaderDetails.TemplateIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TemplateName {
                get {
                    try {
                        return ((string)(this[this.tableGetSnapshotImportHeaderDetails.TemplateNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TemplateName\' in table \'GetSnapshotImportHeaderDetails\' is " +
                                "DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetSnapshotImportHeaderDetails.TemplateNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TypeName {
                get {
                    try {
                        return ((string)(this[this.tableGetSnapshotImportHeaderDetails.TypeNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TypeName\' in table \'GetSnapshotImportHeaderDetails\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableGetSnapshotImportHeaderDetails.TypeNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FilePath {
                get {
                    try {
                        return ((string)(this[this.tableGetSnapshotImportHeaderDetails.FilePathColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FilePath\' in table \'GetSnapshotImportHeaderDetails\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableGetSnapshotImportHeaderDetails.FilePathColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IsImportEnabled {
                get {
                    try {
                        return ((string)(this[this.tableGetSnapshotImportHeaderDetails.IsImportEnabledColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsImportEnabled\' in table \'GetSnapshotImportHeaderDetails\' " +
                                "is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetSnapshotImportHeaderDetails.IsImportEnabledColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ImportStatus {
                get {
                    try {
                        return ((string)(this[this.tableGetSnapshotImportHeaderDetails.ImportStatusColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ImportStatus\' in table \'GetSnapshotImportHeaderDetails\' is " +
                                "DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetSnapshotImportHeaderDetails.ImportStatusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ImportedEntries {
                get {
                    try {
                        return ((int)(this[this.tableGetSnapshotImportHeaderDetails.ImportedEntriesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ImportedEntries\' in table \'GetSnapshotImportHeaderDetails\' " +
                                "is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetSnapshotImportHeaderDetails.ImportedEntriesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IsCheckForErrors {
                get {
                    try {
                        return ((string)(this[this.tableGetSnapshotImportHeaderDetails.IsCheckForErrorsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsCheckForErrors\' in table \'GetSnapshotImportHeaderDetails\'" +
                                " is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetSnapshotImportHeaderDetails.IsCheckForErrorsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CheckErrorStatus {
                get {
                    try {
                        return ((string)(this[this.tableGetSnapshotImportHeaderDetails.CheckErrorStatusColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CheckErrorStatus\' in table \'GetSnapshotImportHeaderDetails\'" +
                                " is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetSnapshotImportHeaderDetails.CheckErrorStatusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int EntriesInError {
                get {
                    try {
                        return ((int)(this[this.tableGetSnapshotImportHeaderDetails.EntriesInErrorColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EntriesInError\' in table \'GetSnapshotImportHeaderDetails\' i" +
                                "s DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetSnapshotImportHeaderDetails.EntriesInErrorColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IsRecordsCreated {
                get {
                    try {
                        return ((string)(this[this.tableGetSnapshotImportHeaderDetails.IsRecordsCreatedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsRecordsCreated\' in table \'GetSnapshotImportHeaderDetails\'" +
                                " is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetSnapshotImportHeaderDetails.IsRecordsCreatedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RecordsCreateStatus {
                get {
                    try {
                        return ((string)(this[this.tableGetSnapshotImportHeaderDetails.RecordsCreateStatusColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RecordsCreateStatus\' in table \'GetSnapshotImportHeaderDetai" +
                                "ls\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetSnapshotImportHeaderDetails.RecordsCreateStatusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsImportIDNull() {
                return this.IsNull(this.tableGetSnapshotImportHeaderDetails.ImportIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetImportIDNull() {
                this[this.tableGetSnapshotImportHeaderDetails.ImportIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTemplateIDNull() {
                return this.IsNull(this.tableGetSnapshotImportHeaderDetails.TemplateIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTemplateIDNull() {
                this[this.tableGetSnapshotImportHeaderDetails.TemplateIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTemplateNameNull() {
                return this.IsNull(this.tableGetSnapshotImportHeaderDetails.TemplateNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTemplateNameNull() {
                this[this.tableGetSnapshotImportHeaderDetails.TemplateNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTypeNameNull() {
                return this.IsNull(this.tableGetSnapshotImportHeaderDetails.TypeNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTypeNameNull() {
                this[this.tableGetSnapshotImportHeaderDetails.TypeNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFilePathNull() {
                return this.IsNull(this.tableGetSnapshotImportHeaderDetails.FilePathColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFilePathNull() {
                this[this.tableGetSnapshotImportHeaderDetails.FilePathColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsImportEnabledNull() {
                return this.IsNull(this.tableGetSnapshotImportHeaderDetails.IsImportEnabledColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsImportEnabledNull() {
                this[this.tableGetSnapshotImportHeaderDetails.IsImportEnabledColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsImportStatusNull() {
                return this.IsNull(this.tableGetSnapshotImportHeaderDetails.ImportStatusColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetImportStatusNull() {
                this[this.tableGetSnapshotImportHeaderDetails.ImportStatusColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsImportedEntriesNull() {
                return this.IsNull(this.tableGetSnapshotImportHeaderDetails.ImportedEntriesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetImportedEntriesNull() {
                this[this.tableGetSnapshotImportHeaderDetails.ImportedEntriesColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsCheckForErrorsNull() {
                return this.IsNull(this.tableGetSnapshotImportHeaderDetails.IsCheckForErrorsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsCheckForErrorsNull() {
                this[this.tableGetSnapshotImportHeaderDetails.IsCheckForErrorsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCheckErrorStatusNull() {
                return this.IsNull(this.tableGetSnapshotImportHeaderDetails.CheckErrorStatusColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCheckErrorStatusNull() {
                this[this.tableGetSnapshotImportHeaderDetails.CheckErrorStatusColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEntriesInErrorNull() {
                return this.IsNull(this.tableGetSnapshotImportHeaderDetails.EntriesInErrorColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEntriesInErrorNull() {
                this[this.tableGetSnapshotImportHeaderDetails.EntriesInErrorColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsRecordsCreatedNull() {
                return this.IsNull(this.tableGetSnapshotImportHeaderDetails.IsRecordsCreatedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsRecordsCreatedNull() {
                this[this.tableGetSnapshotImportHeaderDetails.IsRecordsCreatedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRecordsCreateStatusNull() {
                return this.IsNull(this.tableGetSnapshotImportHeaderDetails.RecordsCreateStatusColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRecordsCreateStatusNull() {
                this[this.tableGetSnapshotImportHeaderDetails.RecordsCreateStatusColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class F28510_SaveHeaderTemplateDataTableRow : global::System.Data.DataRow {
            
            private F28510_SaveHeaderTemplateDataTableDataTable tableF28510_SaveHeaderTemplateDataTable;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal F28510_SaveHeaderTemplateDataTableRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableF28510_SaveHeaderTemplateDataTable = ((F28510_SaveHeaderTemplateDataTableDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TemplateID {
                get {
                    try {
                        return ((int)(this[this.tableF28510_SaveHeaderTemplateDataTable.TemplateIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TemplateID\' in table \'F28510_SaveHeaderTemplateDataTable\' i" +
                                "s DBNull.", e);
                    }
                }
                set {
                    this[this.tableF28510_SaveHeaderTemplateDataTable.TemplateIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FilePath {
                get {
                    try {
                        return ((string)(this[this.tableF28510_SaveHeaderTemplateDataTable.FilePathColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FilePath\' in table \'F28510_SaveHeaderTemplateDataTable\' is " +
                                "DBNull.", e);
                    }
                }
                set {
                    this[this.tableF28510_SaveHeaderTemplateDataTable.FilePathColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte IsImportEnabled {
                get {
                    try {
                        return ((byte)(this[this.tableF28510_SaveHeaderTemplateDataTable.IsImportEnabledColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsImportEnabled\' in table \'F28510_SaveHeaderTemplateDataTab" +
                                "le\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableF28510_SaveHeaderTemplateDataTable.IsImportEnabledColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte IsCheckForErrors {
                get {
                    try {
                        return ((byte)(this[this.tableF28510_SaveHeaderTemplateDataTable.IsCheckForErrorsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsCheckForErrors\' in table \'F28510_SaveHeaderTemplateDataTa" +
                                "ble\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableF28510_SaveHeaderTemplateDataTable.IsCheckForErrorsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte IsRecordsCreated {
                get {
                    try {
                        return ((byte)(this[this.tableF28510_SaveHeaderTemplateDataTable.IsRecordsCreatedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsRecordsCreated\' in table \'F28510_SaveHeaderTemplateDataTa" +
                                "ble\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableF28510_SaveHeaderTemplateDataTable.IsRecordsCreatedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTemplateIDNull() {
                return this.IsNull(this.tableF28510_SaveHeaderTemplateDataTable.TemplateIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTemplateIDNull() {
                this[this.tableF28510_SaveHeaderTemplateDataTable.TemplateIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFilePathNull() {
                return this.IsNull(this.tableF28510_SaveHeaderTemplateDataTable.FilePathColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFilePathNull() {
                this[this.tableF28510_SaveHeaderTemplateDataTable.FilePathColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsImportEnabledNull() {
                return this.IsNull(this.tableF28510_SaveHeaderTemplateDataTable.IsImportEnabledColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsImportEnabledNull() {
                this[this.tableF28510_SaveHeaderTemplateDataTable.IsImportEnabledColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsCheckForErrorsNull() {
                return this.IsNull(this.tableF28510_SaveHeaderTemplateDataTable.IsCheckForErrorsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsCheckForErrorsNull() {
                this[this.tableF28510_SaveHeaderTemplateDataTable.IsCheckForErrorsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsRecordsCreatedNull() {
                return this.IsNull(this.tableF28510_SaveHeaderTemplateDataTable.IsRecordsCreatedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsRecordsCreatedNull() {
                this[this.tableF28510_SaveHeaderTemplateDataTable.IsRecordsCreatedColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class GetSnapshotImportDetailsRow : global::System.Data.DataRow {
            
            private GetSnapshotImportDetailsDataTable tableGetSnapshotImportDetails;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetSnapshotImportDetailsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableGetSnapshotImportDetails = ((GetSnapshotImportDetailsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ImportID {
                get {
                    try {
                        return ((int)(this[this.tableGetSnapshotImportDetails.ImportIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ImportID\' in table \'GetSnapshotImportDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetSnapshotImportDetails.ImportIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ParcelNumber {
                get {
                    try {
                        return ((string)(this[this.tableGetSnapshotImportDetails.ParcelNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ParcelNumber\' in table \'GetSnapshotImportDetails\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableGetSnapshotImportDetails.ParcelNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RollYear {
                get {
                    try {
                        return ((int)(this[this.tableGetSnapshotImportDetails.RollYearColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RollYear\' in table \'GetSnapshotImportDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetSnapshotImportDetails.RollYearColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PermitNumber {
                get {
                    try {
                        return ((string)(this[this.tableGetSnapshotImportDetails.PermitNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PermitNumber\' in table \'GetSnapshotImportDetails\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableGetSnapshotImportDetails.PermitNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ErrorStatus {
                get {
                    try {
                        return ((string)(this[this.tableGetSnapshotImportDetails.ErrorStatusColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ErrorStatus\' in table \'GetSnapshotImportDetails\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableGetSnapshotImportDetails.ErrorStatusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Line {
                get {
                    try {
                        return ((int)(this[this.tableGetSnapshotImportDetails.LineColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Line\' in table \'GetSnapshotImportDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetSnapshotImportDetails.LineColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int EntryID {
                get {
                    try {
                        return ((int)(this[this.tableGetSnapshotImportDetails.EntryIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EntryID\' in table \'GetSnapshotImportDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetSnapshotImportDetails.EntryIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsImportIDNull() {
                return this.IsNull(this.tableGetSnapshotImportDetails.ImportIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetImportIDNull() {
                this[this.tableGetSnapshotImportDetails.ImportIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsParcelNumberNull() {
                return this.IsNull(this.tableGetSnapshotImportDetails.ParcelNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetParcelNumberNull() {
                this[this.tableGetSnapshotImportDetails.ParcelNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRollYearNull() {
                return this.IsNull(this.tableGetSnapshotImportDetails.RollYearColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRollYearNull() {
                this[this.tableGetSnapshotImportDetails.RollYearColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPermitNumberNull() {
                return this.IsNull(this.tableGetSnapshotImportDetails.PermitNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPermitNumberNull() {
                this[this.tableGetSnapshotImportDetails.PermitNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsErrorStatusNull() {
                return this.IsNull(this.tableGetSnapshotImportDetails.ErrorStatusColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetErrorStatusNull() {
                this[this.tableGetSnapshotImportDetails.ErrorStatusColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLineNull() {
                return this.IsNull(this.tableGetSnapshotImportDetails.LineColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLineNull() {
                this[this.tableGetSnapshotImportDetails.LineColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEntryIDNull() {
                return this.IsNull(this.tableGetSnapshotImportDetails.EntryIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEntryIDNull() {
                this[this.tableGetSnapshotImportDetails.EntryIDColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SaveSnapshotImportEntryErrorRow : global::System.Data.DataRow {
            
            private SaveSnapshotImportEntryErrorDataTable tableSaveSnapshotImportEntryError;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SaveSnapshotImportEntryErrorRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSaveSnapshotImportEntryError = ((SaveSnapshotImportEntryErrorDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ErrorMsg {
                get {
                    try {
                        return ((string)(this[this.tableSaveSnapshotImportEntryError.ErrorMsgColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ErrorMsg\' in table \'SaveSnapshotImportEntryError\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableSaveSnapshotImportEntryError.ErrorMsgColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsErrorMsgNull() {
                return this.IsNull(this.tableSaveSnapshotImportEntryError.ErrorMsgColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetErrorMsgNull() {
                this[this.tableSaveSnapshotImportEntryError.ErrorMsgColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SaveSnapshotImportEntryRow : global::System.Data.DataRow {
            
            private SaveSnapshotImportEntryDataTable tableSaveSnapshotImportEntry;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SaveSnapshotImportEntryRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSaveSnapshotImportEntry = ((SaveSnapshotImportEntryDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ImportRunBy {
                get {
                    try {
                        return ((string)(this[this.tableSaveSnapshotImportEntry.ImportRunByColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ImportRunBy\' in table \'SaveSnapshotImportEntry\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSaveSnapshotImportEntry.ImportRunByColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime ImportRunDt {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableSaveSnapshotImportEntry.ImportRunDtColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ImportRunDt\' in table \'SaveSnapshotImportEntry\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSaveSnapshotImportEntry.ImportRunDtColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ImportedEntries {
                get {
                    try {
                        return ((int)(this[this.tableSaveSnapshotImportEntry.ImportedEntriesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ImportedEntries\' in table \'SaveSnapshotImportEntry\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableSaveSnapshotImportEntry.ImportedEntriesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal ImportedEntriesTotal {
                get {
                    try {
                        return ((decimal)(this[this.tableSaveSnapshotImportEntry.ImportedEntriesTotalColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ImportedEntriesTotal\' in table \'SaveSnapshotImportEntry\' is" +
                                " DBNull.", e);
                    }
                }
                set {
                    this[this.tableSaveSnapshotImportEntry.ImportedEntriesTotalColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsImportRunByNull() {
                return this.IsNull(this.tableSaveSnapshotImportEntry.ImportRunByColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetImportRunByNull() {
                this[this.tableSaveSnapshotImportEntry.ImportRunByColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsImportRunDtNull() {
                return this.IsNull(this.tableSaveSnapshotImportEntry.ImportRunDtColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetImportRunDtNull() {
                this[this.tableSaveSnapshotImportEntry.ImportRunDtColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsImportedEntriesNull() {
                return this.IsNull(this.tableSaveSnapshotImportEntry.ImportedEntriesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetImportedEntriesNull() {
                this[this.tableSaveSnapshotImportEntry.ImportedEntriesColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsImportedEntriesTotalNull() {
                return this.IsNull(this.tableSaveSnapshotImportEntry.ImportedEntriesTotalColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetImportedEntriesTotalNull() {
                this[this.tableSaveSnapshotImportEntry.ImportedEntriesTotalColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class GetSnapshotImportHeaderDetailsRowChangeEvent : global::System.EventArgs {
            
            private GetSnapshotImportHeaderDetailsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetSnapshotImportHeaderDetailsRowChangeEvent(GetSnapshotImportHeaderDetailsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetSnapshotImportHeaderDetailsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class F28510_SaveHeaderTemplateDataTableRowChangeEvent : global::System.EventArgs {
            
            private F28510_SaveHeaderTemplateDataTableRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public F28510_SaveHeaderTemplateDataTableRowChangeEvent(F28510_SaveHeaderTemplateDataTableRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public F28510_SaveHeaderTemplateDataTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class GetSnapshotImportDetailsRowChangeEvent : global::System.EventArgs {
            
            private GetSnapshotImportDetailsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetSnapshotImportDetailsRowChangeEvent(GetSnapshotImportDetailsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetSnapshotImportDetailsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SaveSnapshotImportEntryErrorRowChangeEvent : global::System.EventArgs {
            
            private SaveSnapshotImportEntryErrorRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SaveSnapshotImportEntryErrorRowChangeEvent(SaveSnapshotImportEntryErrorRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SaveSnapshotImportEntryErrorRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SaveSnapshotImportEntryRowChangeEvent : global::System.EventArgs {
            
            private SaveSnapshotImportEntryRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SaveSnapshotImportEntryRowChangeEvent(SaveSnapshotImportEntryRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SaveSnapshotImportEntryRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591