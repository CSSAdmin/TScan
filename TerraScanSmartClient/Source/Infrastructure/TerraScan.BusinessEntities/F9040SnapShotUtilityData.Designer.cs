//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1433
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace TerraScan.BusinessEntities {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("F9040SnapShotUtilityData")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class F9040SnapShotUtilityData : global::System.Data.DataSet {
        
        private ListSnapShotDataTable tableListSnapShot;
        
        private DefaultIncludeRowsDataTable tableDefaultIncludeRows;
        
        private SnapShotDetailsDataTable tableSnapShotDetails;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public F9040SnapShotUtilityData() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected F9040SnapShotUtilityData(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["ListSnapShot"] != null)) {
                    base.Tables.Add(new ListSnapShotDataTable(ds.Tables["ListSnapShot"]));
                }
                if ((ds.Tables["DefaultIncludeRows"] != null)) {
                    base.Tables.Add(new DefaultIncludeRowsDataTable(ds.Tables["DefaultIncludeRows"]));
                }
                if ((ds.Tables["SnapShotDetails"] != null)) {
                    base.Tables.Add(new SnapShotDetailsDataTable(ds.Tables["SnapShotDetails"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ListSnapShotDataTable ListSnapShot {
            get {
                return this.tableListSnapShot;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DefaultIncludeRowsDataTable DefaultIncludeRows {
            get {
                return this.tableDefaultIncludeRows;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SnapShotDetailsDataTable SnapShotDetails {
            get {
                return this.tableSnapShotDetails;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            F9040SnapShotUtilityData cln = ((F9040SnapShotUtilityData)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["ListSnapShot"] != null)) {
                    base.Tables.Add(new ListSnapShotDataTable(ds.Tables["ListSnapShot"]));
                }
                if ((ds.Tables["DefaultIncludeRows"] != null)) {
                    base.Tables.Add(new DefaultIncludeRowsDataTable(ds.Tables["DefaultIncludeRows"]));
                }
                if ((ds.Tables["SnapShotDetails"] != null)) {
                    base.Tables.Add(new SnapShotDetailsDataTable(ds.Tables["SnapShotDetails"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableListSnapShot = ((ListSnapShotDataTable)(base.Tables["ListSnapShot"]));
            if ((initTable == true)) {
                if ((this.tableListSnapShot != null)) {
                    this.tableListSnapShot.InitVars();
                }
            }
            this.tableDefaultIncludeRows = ((DefaultIncludeRowsDataTable)(base.Tables["DefaultIncludeRows"]));
            if ((initTable == true)) {
                if ((this.tableDefaultIncludeRows != null)) {
                    this.tableDefaultIncludeRows.InitVars();
                }
            }
            this.tableSnapShotDetails = ((SnapShotDetailsDataTable)(base.Tables["SnapShotDetails"]));
            if ((initTable == true)) {
                if ((this.tableSnapShotDetails != null)) {
                    this.tableSnapShotDetails.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "F9040SnapShotUtilityData";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/F9040SnapShotUtilityData.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableListSnapShot = new ListSnapShotDataTable();
            base.Tables.Add(this.tableListSnapShot);
            this.tableDefaultIncludeRows = new DefaultIncludeRowsDataTable();
            base.Tables.Add(this.tableDefaultIncludeRows);
            this.tableSnapShotDetails = new SnapShotDetailsDataTable();
            base.Tables.Add(this.tableSnapShotDetails);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeListSnapShot() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeDefaultIncludeRows() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSnapShotDetails() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            F9040SnapShotUtilityData ds = new F9040SnapShotUtilityData();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void ListSnapShotRowChangeEventHandler(object sender, ListSnapShotRowChangeEvent e);
        
        public delegate void DefaultIncludeRowsRowChangeEventHandler(object sender, DefaultIncludeRowsRowChangeEvent e);
        
        public delegate void SnapShotDetailsRowChangeEventHandler(object sender, SnapShotDetailsRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ListSnapShotDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnSnapshotID;
            
            private global::System.Data.DataColumn columnSnapshotName;
            
            private global::System.Data.DataColumn columnForm;
            
            private global::System.Data.DataColumn columnSnapshotNote;
            
            private global::System.Data.DataColumn columnRecordCount;
            
            private global::System.Data.DataColumn columnUserID;
            
            private global::System.Data.DataColumn columnQueryView;
            
            private global::System.Data.DataColumn columnName_Display;
            
            private global::System.Data.DataColumn columnInsertedDate;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListSnapShotDataTable() {
                this.TableName = "ListSnapShot";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListSnapShotDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ListSnapShotDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SnapshotIDColumn {
                get {
                    return this.columnSnapshotID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SnapshotNameColumn {
                get {
                    return this.columnSnapshotName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FormColumn {
                get {
                    return this.columnForm;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SnapshotNoteColumn {
                get {
                    return this.columnSnapshotNote;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RecordCountColumn {
                get {
                    return this.columnRecordCount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UserIDColumn {
                get {
                    return this.columnUserID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn QueryViewColumn {
                get {
                    return this.columnQueryView;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Name_DisplayColumn {
                get {
                    return this.columnName_Display;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InsertedDateColumn {
                get {
                    return this.columnInsertedDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListSnapShotRow this[int index] {
                get {
                    return ((ListSnapShotRow)(this.Rows[index]));
                }
            }
            
            public event ListSnapShotRowChangeEventHandler ListSnapShotRowChanging;
            
            public event ListSnapShotRowChangeEventHandler ListSnapShotRowChanged;
            
            public event ListSnapShotRowChangeEventHandler ListSnapShotRowDeleting;
            
            public event ListSnapShotRowChangeEventHandler ListSnapShotRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddListSnapShotRow(ListSnapShotRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListSnapShotRow AddListSnapShotRow(int SnapshotID, string SnapshotName, int Form, string SnapshotNote, int RecordCount, int UserID, int QueryView, string Name_Display, System.DateTime InsertedDate) {
                ListSnapShotRow rowListSnapShotRow = ((ListSnapShotRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        SnapshotID,
                        SnapshotName,
                        Form,
                        SnapshotNote,
                        RecordCount,
                        UserID,
                        QueryView,
                        Name_Display,
                        InsertedDate};
                rowListSnapShotRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowListSnapShotRow);
                return rowListSnapShotRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ListSnapShotDataTable cln = ((ListSnapShotDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ListSnapShotDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnSnapshotID = base.Columns["SnapshotID"];
                this.columnSnapshotName = base.Columns["SnapshotName"];
                this.columnForm = base.Columns["Form"];
                this.columnSnapshotNote = base.Columns["SnapshotNote"];
                this.columnRecordCount = base.Columns["RecordCount"];
                this.columnUserID = base.Columns["UserID"];
                this.columnQueryView = base.Columns["QueryView"];
                this.columnName_Display = base.Columns["Name_Display"];
                this.columnInsertedDate = base.Columns["InsertedDate"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnSnapshotID = new global::System.Data.DataColumn("SnapshotID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSnapshotID);
                this.columnSnapshotName = new global::System.Data.DataColumn("SnapshotName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSnapshotName);
                this.columnForm = new global::System.Data.DataColumn("Form", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnForm);
                this.columnSnapshotNote = new global::System.Data.DataColumn("SnapshotNote", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSnapshotNote);
                this.columnRecordCount = new global::System.Data.DataColumn("RecordCount", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRecordCount);
                this.columnUserID = new global::System.Data.DataColumn("UserID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUserID);
                this.columnQueryView = new global::System.Data.DataColumn("QueryView", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnQueryView);
                this.columnName_Display = new global::System.Data.DataColumn("Name_Display", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnName_Display);
                this.columnInsertedDate = new global::System.Data.DataColumn("InsertedDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInsertedDate);
                this.columnSnapshotID.ReadOnly = true;
                this.columnSnapshotName.AllowDBNull = false;
                this.columnSnapshotName.MaxLength = 50;
                this.columnForm.AllowDBNull = false;
                this.columnSnapshotNote.MaxLength = 250;
                this.columnRecordCount.AllowDBNull = false;
                this.columnUserID.AllowDBNull = false;
                this.columnName_Display.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListSnapShotRow NewListSnapShotRow() {
                return ((ListSnapShotRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ListSnapShotRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ListSnapShotRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ListSnapShotRowChanged != null)) {
                    this.ListSnapShotRowChanged(this, new ListSnapShotRowChangeEvent(((ListSnapShotRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ListSnapShotRowChanging != null)) {
                    this.ListSnapShotRowChanging(this, new ListSnapShotRowChangeEvent(((ListSnapShotRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ListSnapShotRowDeleted != null)) {
                    this.ListSnapShotRowDeleted(this, new ListSnapShotRowChangeEvent(((ListSnapShotRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ListSnapShotRowDeleting != null)) {
                    this.ListSnapShotRowDeleting(this, new ListSnapShotRowChangeEvent(((ListSnapShotRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveListSnapShotRow(ListSnapShotRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F9040SnapShotUtilityData ds = new F9040SnapShotUtilityData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ListSnapShotDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class DefaultIncludeRowsDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnIncludeRows;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DefaultIncludeRowsDataTable() {
                this.TableName = "DefaultIncludeRows";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DefaultIncludeRowsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected DefaultIncludeRowsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IncludeRowsColumn {
                get {
                    return this.columnIncludeRows;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DefaultIncludeRowsRow this[int index] {
                get {
                    return ((DefaultIncludeRowsRow)(this.Rows[index]));
                }
            }
            
            public event DefaultIncludeRowsRowChangeEventHandler DefaultIncludeRowsRowChanging;
            
            public event DefaultIncludeRowsRowChangeEventHandler DefaultIncludeRowsRowChanged;
            
            public event DefaultIncludeRowsRowChangeEventHandler DefaultIncludeRowsRowDeleting;
            
            public event DefaultIncludeRowsRowChangeEventHandler DefaultIncludeRowsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddDefaultIncludeRowsRow(DefaultIncludeRowsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DefaultIncludeRowsRow AddDefaultIncludeRowsRow(string IncludeRows) {
                DefaultIncludeRowsRow rowDefaultIncludeRowsRow = ((DefaultIncludeRowsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        IncludeRows};
                rowDefaultIncludeRowsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowDefaultIncludeRowsRow);
                return rowDefaultIncludeRowsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                DefaultIncludeRowsDataTable cln = ((DefaultIncludeRowsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new DefaultIncludeRowsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnIncludeRows = base.Columns["IncludeRows"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnIncludeRows = new global::System.Data.DataColumn("IncludeRows", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIncludeRows);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DefaultIncludeRowsRow NewDefaultIncludeRowsRow() {
                return ((DefaultIncludeRowsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new DefaultIncludeRowsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(DefaultIncludeRowsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DefaultIncludeRowsRowChanged != null)) {
                    this.DefaultIncludeRowsRowChanged(this, new DefaultIncludeRowsRowChangeEvent(((DefaultIncludeRowsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DefaultIncludeRowsRowChanging != null)) {
                    this.DefaultIncludeRowsRowChanging(this, new DefaultIncludeRowsRowChangeEvent(((DefaultIncludeRowsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DefaultIncludeRowsRowDeleted != null)) {
                    this.DefaultIncludeRowsRowDeleted(this, new DefaultIncludeRowsRowChangeEvent(((DefaultIncludeRowsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DefaultIncludeRowsRowDeleting != null)) {
                    this.DefaultIncludeRowsRowDeleting(this, new DefaultIncludeRowsRowChangeEvent(((DefaultIncludeRowsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveDefaultIncludeRowsRow(DefaultIncludeRowsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F9040SnapShotUtilityData ds = new F9040SnapShotUtilityData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "DefaultIncludeRowsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SnapShotDetailsDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnSnapshotName;
            
            private global::System.Data.DataColumn columnForm;
            
            private global::System.Data.DataColumn columnSnapshotNote;
            
            private global::System.Data.DataColumn columnUserID;
            
            private global::System.Data.DataColumn columnQueryView;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SnapShotDetailsDataTable() {
                this.TableName = "SnapShotDetails";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SnapShotDetailsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SnapShotDetailsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SnapshotNameColumn {
                get {
                    return this.columnSnapshotName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FormColumn {
                get {
                    return this.columnForm;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SnapshotNoteColumn {
                get {
                    return this.columnSnapshotNote;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UserIDColumn {
                get {
                    return this.columnUserID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn QueryViewColumn {
                get {
                    return this.columnQueryView;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SnapShotDetailsRow this[int index] {
                get {
                    return ((SnapShotDetailsRow)(this.Rows[index]));
                }
            }
            
            public event SnapShotDetailsRowChangeEventHandler SnapShotDetailsRowChanging;
            
            public event SnapShotDetailsRowChangeEventHandler SnapShotDetailsRowChanged;
            
            public event SnapShotDetailsRowChangeEventHandler SnapShotDetailsRowDeleting;
            
            public event SnapShotDetailsRowChangeEventHandler SnapShotDetailsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSnapShotDetailsRow(SnapShotDetailsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SnapShotDetailsRow AddSnapShotDetailsRow(string SnapshotName, int Form, string SnapshotNote, int UserID, int QueryView) {
                SnapShotDetailsRow rowSnapShotDetailsRow = ((SnapShotDetailsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        SnapshotName,
                        Form,
                        SnapshotNote,
                        UserID,
                        QueryView};
                rowSnapShotDetailsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowSnapShotDetailsRow);
                return rowSnapShotDetailsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                SnapShotDetailsDataTable cln = ((SnapShotDetailsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new SnapShotDetailsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnSnapshotName = base.Columns["SnapshotName"];
                this.columnForm = base.Columns["Form"];
                this.columnSnapshotNote = base.Columns["SnapshotNote"];
                this.columnUserID = base.Columns["UserID"];
                this.columnQueryView = base.Columns["QueryView"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnSnapshotName = new global::System.Data.DataColumn("SnapshotName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSnapshotName);
                this.columnForm = new global::System.Data.DataColumn("Form", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnForm);
                this.columnSnapshotNote = new global::System.Data.DataColumn("SnapshotNote", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSnapshotNote);
                this.columnUserID = new global::System.Data.DataColumn("UserID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUserID);
                this.columnQueryView = new global::System.Data.DataColumn("QueryView", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnQueryView);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SnapShotDetailsRow NewSnapShotDetailsRow() {
                return ((SnapShotDetailsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new SnapShotDetailsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(SnapShotDetailsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SnapShotDetailsRowChanged != null)) {
                    this.SnapShotDetailsRowChanged(this, new SnapShotDetailsRowChangeEvent(((SnapShotDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SnapShotDetailsRowChanging != null)) {
                    this.SnapShotDetailsRowChanging(this, new SnapShotDetailsRowChangeEvent(((SnapShotDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SnapShotDetailsRowDeleted != null)) {
                    this.SnapShotDetailsRowDeleted(this, new SnapShotDetailsRowChangeEvent(((SnapShotDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SnapShotDetailsRowDeleting != null)) {
                    this.SnapShotDetailsRowDeleting(this, new SnapShotDetailsRowChangeEvent(((SnapShotDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSnapShotDetailsRow(SnapShotDetailsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F9040SnapShotUtilityData ds = new F9040SnapShotUtilityData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SnapShotDetailsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ListSnapShotRow : global::System.Data.DataRow {
            
            private ListSnapShotDataTable tableListSnapShot;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListSnapShotRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableListSnapShot = ((ListSnapShotDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SnapshotID {
                get {
                    try {
                        return ((int)(this[this.tableListSnapShot.SnapshotIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SnapshotID\' in table \'ListSnapShot\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListSnapShot.SnapshotIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SnapshotName {
                get {
                    return ((string)(this[this.tableListSnapShot.SnapshotNameColumn]));
                }
                set {
                    this[this.tableListSnapShot.SnapshotNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Form {
                get {
                    return ((int)(this[this.tableListSnapShot.FormColumn]));
                }
                set {
                    this[this.tableListSnapShot.FormColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SnapshotNote {
                get {
                    try {
                        return ((string)(this[this.tableListSnapShot.SnapshotNoteColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SnapshotNote\' in table \'ListSnapShot\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListSnapShot.SnapshotNoteColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RecordCount {
                get {
                    return ((int)(this[this.tableListSnapShot.RecordCountColumn]));
                }
                set {
                    this[this.tableListSnapShot.RecordCountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int UserID {
                get {
                    return ((int)(this[this.tableListSnapShot.UserIDColumn]));
                }
                set {
                    this[this.tableListSnapShot.UserIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int QueryView {
                get {
                    try {
                        return ((int)(this[this.tableListSnapShot.QueryViewColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'QueryView\' in table \'ListSnapShot\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListSnapShot.QueryViewColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name_Display {
                get {
                    try {
                        return ((string)(this[this.tableListSnapShot.Name_DisplayColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Name_Display\' in table \'ListSnapShot\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListSnapShot.Name_DisplayColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime InsertedDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableListSnapShot.InsertedDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InsertedDate\' in table \'ListSnapShot\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListSnapShot.InsertedDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSnapshotIDNull() {
                return this.IsNull(this.tableListSnapShot.SnapshotIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSnapshotIDNull() {
                this[this.tableListSnapShot.SnapshotIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSnapshotNoteNull() {
                return this.IsNull(this.tableListSnapShot.SnapshotNoteColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSnapshotNoteNull() {
                this[this.tableListSnapShot.SnapshotNoteColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsQueryViewNull() {
                return this.IsNull(this.tableListSnapShot.QueryViewColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetQueryViewNull() {
                this[this.tableListSnapShot.QueryViewColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsName_DisplayNull() {
                return this.IsNull(this.tableListSnapShot.Name_DisplayColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetName_DisplayNull() {
                this[this.tableListSnapShot.Name_DisplayColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInsertedDateNull() {
                return this.IsNull(this.tableListSnapShot.InsertedDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInsertedDateNull() {
                this[this.tableListSnapShot.InsertedDateColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class DefaultIncludeRowsRow : global::System.Data.DataRow {
            
            private DefaultIncludeRowsDataTable tableDefaultIncludeRows;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DefaultIncludeRowsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableDefaultIncludeRows = ((DefaultIncludeRowsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IncludeRows {
                get {
                    try {
                        return ((string)(this[this.tableDefaultIncludeRows.IncludeRowsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IncludeRows\' in table \'DefaultIncludeRows\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDefaultIncludeRows.IncludeRowsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIncludeRowsNull() {
                return this.IsNull(this.tableDefaultIncludeRows.IncludeRowsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIncludeRowsNull() {
                this[this.tableDefaultIncludeRows.IncludeRowsColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SnapShotDetailsRow : global::System.Data.DataRow {
            
            private SnapShotDetailsDataTable tableSnapShotDetails;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SnapShotDetailsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSnapShotDetails = ((SnapShotDetailsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SnapshotName {
                get {
                    try {
                        return ((string)(this[this.tableSnapShotDetails.SnapshotNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SnapshotName\' in table \'SnapShotDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSnapShotDetails.SnapshotNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Form {
                get {
                    try {
                        return ((int)(this[this.tableSnapShotDetails.FormColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Form\' in table \'SnapShotDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSnapShotDetails.FormColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SnapshotNote {
                get {
                    try {
                        return ((string)(this[this.tableSnapShotDetails.SnapshotNoteColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SnapshotNote\' in table \'SnapShotDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSnapShotDetails.SnapshotNoteColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int UserID {
                get {
                    try {
                        return ((int)(this[this.tableSnapShotDetails.UserIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UserID\' in table \'SnapShotDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSnapShotDetails.UserIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int QueryView {
                get {
                    try {
                        return ((int)(this[this.tableSnapShotDetails.QueryViewColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'QueryView\' in table \'SnapShotDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSnapShotDetails.QueryViewColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSnapshotNameNull() {
                return this.IsNull(this.tableSnapShotDetails.SnapshotNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSnapshotNameNull() {
                this[this.tableSnapShotDetails.SnapshotNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFormNull() {
                return this.IsNull(this.tableSnapShotDetails.FormColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFormNull() {
                this[this.tableSnapShotDetails.FormColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSnapshotNoteNull() {
                return this.IsNull(this.tableSnapShotDetails.SnapshotNoteColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSnapshotNoteNull() {
                this[this.tableSnapShotDetails.SnapshotNoteColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUserIDNull() {
                return this.IsNull(this.tableSnapShotDetails.UserIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUserIDNull() {
                this[this.tableSnapShotDetails.UserIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsQueryViewNull() {
                return this.IsNull(this.tableSnapShotDetails.QueryViewColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetQueryViewNull() {
                this[this.tableSnapShotDetails.QueryViewColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ListSnapShotRowChangeEvent : global::System.EventArgs {
            
            private ListSnapShotRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListSnapShotRowChangeEvent(ListSnapShotRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListSnapShotRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class DefaultIncludeRowsRowChangeEvent : global::System.EventArgs {
            
            private DefaultIncludeRowsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DefaultIncludeRowsRowChangeEvent(DefaultIncludeRowsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DefaultIncludeRowsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SnapShotDetailsRowChangeEvent : global::System.EventArgs {
            
            private SnapShotDetailsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SnapShotDetailsRowChangeEvent(SnapShotDetailsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SnapShotDetailsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591