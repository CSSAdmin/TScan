//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4952
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace TerraScan.BusinessEntities {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("F1013BatchPaymentMgmtData")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class F1013BatchPaymentMgmtData : global::System.Data.DataSet {
        
        private ListUnpaidReceiptsDataTable tableListUnpaidReceipts;
        
        private ListUnpaidReceiptUsersDataTable tableListUnpaidReceiptUsers;
        
        private ListSnapShotItemsDataTable tableListSnapShotItems;
        
        private ListDateRecieptsDataTable tableListDateReciepts;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public F1013BatchPaymentMgmtData() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected F1013BatchPaymentMgmtData(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["ListUnpaidReceipts"] != null)) {
                    base.Tables.Add(new ListUnpaidReceiptsDataTable(ds.Tables["ListUnpaidReceipts"]));
                }
                if ((ds.Tables["ListUnpaidReceiptUsers"] != null)) {
                    base.Tables.Add(new ListUnpaidReceiptUsersDataTable(ds.Tables["ListUnpaidReceiptUsers"]));
                }
                if ((ds.Tables["ListSnapShotItems"] != null)) {
                    base.Tables.Add(new ListSnapShotItemsDataTable(ds.Tables["ListSnapShotItems"]));
                }
                if ((ds.Tables["ListDateReciepts"] != null)) {
                    base.Tables.Add(new ListDateRecieptsDataTable(ds.Tables["ListDateReciepts"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ListUnpaidReceiptsDataTable ListUnpaidReceipts {
            get {
                return this.tableListUnpaidReceipts;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ListUnpaidReceiptUsersDataTable ListUnpaidReceiptUsers {
            get {
                return this.tableListUnpaidReceiptUsers;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ListSnapShotItemsDataTable ListSnapShotItems {
            get {
                return this.tableListSnapShotItems;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ListDateRecieptsDataTable ListDateReciepts {
            get {
                return this.tableListDateReciepts;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            F1013BatchPaymentMgmtData cln = ((F1013BatchPaymentMgmtData)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["ListUnpaidReceipts"] != null)) {
                    base.Tables.Add(new ListUnpaidReceiptsDataTable(ds.Tables["ListUnpaidReceipts"]));
                }
                if ((ds.Tables["ListUnpaidReceiptUsers"] != null)) {
                    base.Tables.Add(new ListUnpaidReceiptUsersDataTable(ds.Tables["ListUnpaidReceiptUsers"]));
                }
                if ((ds.Tables["ListSnapShotItems"] != null)) {
                    base.Tables.Add(new ListSnapShotItemsDataTable(ds.Tables["ListSnapShotItems"]));
                }
                if ((ds.Tables["ListDateReciepts"] != null)) {
                    base.Tables.Add(new ListDateRecieptsDataTable(ds.Tables["ListDateReciepts"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableListUnpaidReceipts = ((ListUnpaidReceiptsDataTable)(base.Tables["ListUnpaidReceipts"]));
            if ((initTable == true)) {
                if ((this.tableListUnpaidReceipts != null)) {
                    this.tableListUnpaidReceipts.InitVars();
                }
            }
            this.tableListUnpaidReceiptUsers = ((ListUnpaidReceiptUsersDataTable)(base.Tables["ListUnpaidReceiptUsers"]));
            if ((initTable == true)) {
                if ((this.tableListUnpaidReceiptUsers != null)) {
                    this.tableListUnpaidReceiptUsers.InitVars();
                }
            }
            this.tableListSnapShotItems = ((ListSnapShotItemsDataTable)(base.Tables["ListSnapShotItems"]));
            if ((initTable == true)) {
                if ((this.tableListSnapShotItems != null)) {
                    this.tableListSnapShotItems.InitVars();
                }
            }
            this.tableListDateReciepts = ((ListDateRecieptsDataTable)(base.Tables["ListDateReciepts"]));
            if ((initTable == true)) {
                if ((this.tableListDateReciepts != null)) {
                    this.tableListDateReciepts.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "F1013BatchPaymentMgmtData";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/F1013BatchPaymentMgmtData.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableListUnpaidReceipts = new ListUnpaidReceiptsDataTable();
            base.Tables.Add(this.tableListUnpaidReceipts);
            this.tableListUnpaidReceiptUsers = new ListUnpaidReceiptUsersDataTable();
            base.Tables.Add(this.tableListUnpaidReceiptUsers);
            this.tableListSnapShotItems = new ListSnapShotItemsDataTable();
            base.Tables.Add(this.tableListSnapShotItems);
            this.tableListDateReciepts = new ListDateRecieptsDataTable();
            base.Tables.Add(this.tableListDateReciepts);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeListUnpaidReceipts() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeListUnpaidReceiptUsers() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeListSnapShotItems() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeListDateReciepts() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            F1013BatchPaymentMgmtData ds = new F1013BatchPaymentMgmtData();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void ListUnpaidReceiptsRowChangeEventHandler(object sender, ListUnpaidReceiptsRowChangeEvent e);
        
        public delegate void ListUnpaidReceiptUsersRowChangeEventHandler(object sender, ListUnpaidReceiptUsersRowChangeEvent e);
        
        public delegate void ListSnapShotItemsRowChangeEventHandler(object sender, ListSnapShotItemsRowChangeEvent e);
        
        public delegate void ListDateRecieptsRowChangeEventHandler(object sender, ListDateRecieptsRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ListUnpaidReceiptsDataTable : global::System.Data.TypedTableBase<ListUnpaidReceiptsRow> {
            
            private global::System.Data.DataColumn columnReceiptID;
            
            private global::System.Data.DataColumn columnReceiptNumber;
            
            private global::System.Data.DataColumn columnStatementNumber;
            
            private global::System.Data.DataColumn columnTaxAmount;
            
            private global::System.Data.DataColumn columnTotalAmount;
            
            private global::System.Data.DataColumn columnReceiptDate;
            
            private global::System.Data.DataColumn columnPPaymentID;
            
            private global::System.Data.DataColumn columnStatementID;
            
            private global::System.Data.DataColumn columnPostTypeID;
            
            private global::System.Data.DataColumn columnPostName;
            
            private global::System.Data.DataColumn columnReceiptForm;
            
            private global::System.Data.DataColumn columnReceiptSelected;
            
            private global::System.Data.DataColumn columnUserID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListUnpaidReceiptsDataTable() {
                this.TableName = "ListUnpaidReceipts";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListUnpaidReceiptsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ListUnpaidReceiptsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ReceiptIDColumn {
                get {
                    return this.columnReceiptID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ReceiptNumberColumn {
                get {
                    return this.columnReceiptNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StatementNumberColumn {
                get {
                    return this.columnStatementNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TaxAmountColumn {
                get {
                    return this.columnTaxAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalAmountColumn {
                get {
                    return this.columnTotalAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ReceiptDateColumn {
                get {
                    return this.columnReceiptDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PPaymentIDColumn {
                get {
                    return this.columnPPaymentID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StatementIDColumn {
                get {
                    return this.columnStatementID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PostTypeIDColumn {
                get {
                    return this.columnPostTypeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PostNameColumn {
                get {
                    return this.columnPostName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ReceiptFormColumn {
                get {
                    return this.columnReceiptForm;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ReceiptSelectedColumn {
                get {
                    return this.columnReceiptSelected;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UserIDColumn {
                get {
                    return this.columnUserID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListUnpaidReceiptsRow this[int index] {
                get {
                    return ((ListUnpaidReceiptsRow)(this.Rows[index]));
                }
            }
            
            public event ListUnpaidReceiptsRowChangeEventHandler ListUnpaidReceiptsRowChanging;
            
            public event ListUnpaidReceiptsRowChangeEventHandler ListUnpaidReceiptsRowChanged;
            
            public event ListUnpaidReceiptsRowChangeEventHandler ListUnpaidReceiptsRowDeleting;
            
            public event ListUnpaidReceiptsRowChangeEventHandler ListUnpaidReceiptsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddListUnpaidReceiptsRow(ListUnpaidReceiptsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListUnpaidReceiptsRow AddListUnpaidReceiptsRow(int ReceiptID, string ReceiptNumber, string StatementNumber, decimal TaxAmount, decimal TotalAmount, System.DateTime ReceiptDate, int PPaymentID, int StatementID, byte PostTypeID, string PostName, int ReceiptForm, bool ReceiptSelected, int UserID) {
                ListUnpaidReceiptsRow rowListUnpaidReceiptsRow = ((ListUnpaidReceiptsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ReceiptID,
                        ReceiptNumber,
                        StatementNumber,
                        TaxAmount,
                        TotalAmount,
                        ReceiptDate,
                        PPaymentID,
                        StatementID,
                        PostTypeID,
                        PostName,
                        ReceiptForm,
                        ReceiptSelected,
                        UserID};
                rowListUnpaidReceiptsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowListUnpaidReceiptsRow);
                return rowListUnpaidReceiptsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ListUnpaidReceiptsDataTable cln = ((ListUnpaidReceiptsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ListUnpaidReceiptsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnReceiptID = base.Columns["ReceiptID"];
                this.columnReceiptNumber = base.Columns["ReceiptNumber"];
                this.columnStatementNumber = base.Columns["StatementNumber"];
                this.columnTaxAmount = base.Columns["TaxAmount"];
                this.columnTotalAmount = base.Columns["TotalAmount"];
                this.columnReceiptDate = base.Columns["ReceiptDate"];
                this.columnPPaymentID = base.Columns["PPaymentID"];
                this.columnStatementID = base.Columns["StatementID"];
                this.columnPostTypeID = base.Columns["PostTypeID"];
                this.columnPostName = base.Columns["PostName"];
                this.columnReceiptForm = base.Columns["ReceiptForm"];
                this.columnReceiptSelected = base.Columns["ReceiptSelected"];
                this.columnUserID = base.Columns["UserID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnReceiptID = new global::System.Data.DataColumn("ReceiptID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnReceiptID);
                this.columnReceiptNumber = new global::System.Data.DataColumn("ReceiptNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnReceiptNumber);
                this.columnStatementNumber = new global::System.Data.DataColumn("StatementNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStatementNumber);
                this.columnTaxAmount = new global::System.Data.DataColumn("TaxAmount", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTaxAmount);
                this.columnTotalAmount = new global::System.Data.DataColumn("TotalAmount", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalAmount);
                this.columnReceiptDate = new global::System.Data.DataColumn("ReceiptDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnReceiptDate);
                this.columnPPaymentID = new global::System.Data.DataColumn("PPaymentID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPPaymentID);
                this.columnStatementID = new global::System.Data.DataColumn("StatementID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStatementID);
                this.columnPostTypeID = new global::System.Data.DataColumn("PostTypeID", typeof(byte), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPostTypeID);
                this.columnPostName = new global::System.Data.DataColumn("PostName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPostName);
                this.columnReceiptForm = new global::System.Data.DataColumn("ReceiptForm", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnReceiptForm);
                this.columnReceiptSelected = new global::System.Data.DataColumn("ReceiptSelected", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnReceiptSelected);
                this.columnUserID = new global::System.Data.DataColumn("UserID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUserID);
                this.columnReceiptID.ReadOnly = true;
                this.columnReceiptNumber.MaxLength = 50;
                this.columnStatementNumber.MaxLength = 50;
                this.columnReceiptDate.ReadOnly = true;
                this.columnStatementID.ReadOnly = true;
                this.columnPostName.MaxLength = 50;
                this.columnReceiptSelected.DefaultValue = ((bool)(false));
                this.columnUserID.ReadOnly = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListUnpaidReceiptsRow NewListUnpaidReceiptsRow() {
                return ((ListUnpaidReceiptsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ListUnpaidReceiptsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ListUnpaidReceiptsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ListUnpaidReceiptsRowChanged != null)) {
                    this.ListUnpaidReceiptsRowChanged(this, new ListUnpaidReceiptsRowChangeEvent(((ListUnpaidReceiptsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ListUnpaidReceiptsRowChanging != null)) {
                    this.ListUnpaidReceiptsRowChanging(this, new ListUnpaidReceiptsRowChangeEvent(((ListUnpaidReceiptsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ListUnpaidReceiptsRowDeleted != null)) {
                    this.ListUnpaidReceiptsRowDeleted(this, new ListUnpaidReceiptsRowChangeEvent(((ListUnpaidReceiptsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ListUnpaidReceiptsRowDeleting != null)) {
                    this.ListUnpaidReceiptsRowDeleting(this, new ListUnpaidReceiptsRowChangeEvent(((ListUnpaidReceiptsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveListUnpaidReceiptsRow(ListUnpaidReceiptsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F1013BatchPaymentMgmtData ds = new F1013BatchPaymentMgmtData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ListUnpaidReceiptsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ListUnpaidReceiptUsersDataTable : global::System.Data.TypedTableBase<ListUnpaidReceiptUsersRow> {
            
            private global::System.Data.DataColumn columnUserID;
            
            private global::System.Data.DataColumn columnDisplayName;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListUnpaidReceiptUsersDataTable() {
                this.TableName = "ListUnpaidReceiptUsers";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListUnpaidReceiptUsersDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ListUnpaidReceiptUsersDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UserIDColumn {
                get {
                    return this.columnUserID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DisplayNameColumn {
                get {
                    return this.columnDisplayName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListUnpaidReceiptUsersRow this[int index] {
                get {
                    return ((ListUnpaidReceiptUsersRow)(this.Rows[index]));
                }
            }
            
            public event ListUnpaidReceiptUsersRowChangeEventHandler ListUnpaidReceiptUsersRowChanging;
            
            public event ListUnpaidReceiptUsersRowChangeEventHandler ListUnpaidReceiptUsersRowChanged;
            
            public event ListUnpaidReceiptUsersRowChangeEventHandler ListUnpaidReceiptUsersRowDeleting;
            
            public event ListUnpaidReceiptUsersRowChangeEventHandler ListUnpaidReceiptUsersRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddListUnpaidReceiptUsersRow(ListUnpaidReceiptUsersRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListUnpaidReceiptUsersRow AddListUnpaidReceiptUsersRow(int UserID, string DisplayName) {
                ListUnpaidReceiptUsersRow rowListUnpaidReceiptUsersRow = ((ListUnpaidReceiptUsersRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        UserID,
                        DisplayName};
                rowListUnpaidReceiptUsersRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowListUnpaidReceiptUsersRow);
                return rowListUnpaidReceiptUsersRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ListUnpaidReceiptUsersDataTable cln = ((ListUnpaidReceiptUsersDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ListUnpaidReceiptUsersDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnUserID = base.Columns["UserID"];
                this.columnDisplayName = base.Columns["DisplayName"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnUserID = new global::System.Data.DataColumn("UserID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUserID);
                this.columnDisplayName = new global::System.Data.DataColumn("DisplayName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDisplayName);
                this.columnUserID.ReadOnly = true;
                this.columnDisplayName.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListUnpaidReceiptUsersRow NewListUnpaidReceiptUsersRow() {
                return ((ListUnpaidReceiptUsersRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ListUnpaidReceiptUsersRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ListUnpaidReceiptUsersRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ListUnpaidReceiptUsersRowChanged != null)) {
                    this.ListUnpaidReceiptUsersRowChanged(this, new ListUnpaidReceiptUsersRowChangeEvent(((ListUnpaidReceiptUsersRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ListUnpaidReceiptUsersRowChanging != null)) {
                    this.ListUnpaidReceiptUsersRowChanging(this, new ListUnpaidReceiptUsersRowChangeEvent(((ListUnpaidReceiptUsersRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ListUnpaidReceiptUsersRowDeleted != null)) {
                    this.ListUnpaidReceiptUsersRowDeleted(this, new ListUnpaidReceiptUsersRowChangeEvent(((ListUnpaidReceiptUsersRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ListUnpaidReceiptUsersRowDeleting != null)) {
                    this.ListUnpaidReceiptUsersRowDeleting(this, new ListUnpaidReceiptUsersRowChangeEvent(((ListUnpaidReceiptUsersRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveListUnpaidReceiptUsersRow(ListUnpaidReceiptUsersRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F1013BatchPaymentMgmtData ds = new F1013BatchPaymentMgmtData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ListUnpaidReceiptUsersDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ListSnapShotItemsDataTable : global::System.Data.TypedTableBase<ListSnapShotItemsRow> {
            
            private global::System.Data.DataColumn columnSnapshotID;
            
            private global::System.Data.DataColumn columnKeyID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListSnapShotItemsDataTable() {
                this.TableName = "ListSnapShotItems";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListSnapShotItemsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ListSnapShotItemsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SnapshotIDColumn {
                get {
                    return this.columnSnapshotID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn KeyIDColumn {
                get {
                    return this.columnKeyID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListSnapShotItemsRow this[int index] {
                get {
                    return ((ListSnapShotItemsRow)(this.Rows[index]));
                }
            }
            
            public event ListSnapShotItemsRowChangeEventHandler ListSnapShotItemsRowChanging;
            
            public event ListSnapShotItemsRowChangeEventHandler ListSnapShotItemsRowChanged;
            
            public event ListSnapShotItemsRowChangeEventHandler ListSnapShotItemsRowDeleting;
            
            public event ListSnapShotItemsRowChangeEventHandler ListSnapShotItemsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddListSnapShotItemsRow(ListSnapShotItemsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListSnapShotItemsRow AddListSnapShotItemsRow(int SnapshotID, int KeyID) {
                ListSnapShotItemsRow rowListSnapShotItemsRow = ((ListSnapShotItemsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        SnapshotID,
                        KeyID};
                rowListSnapShotItemsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowListSnapShotItemsRow);
                return rowListSnapShotItemsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ListSnapShotItemsDataTable cln = ((ListSnapShotItemsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ListSnapShotItemsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnSnapshotID = base.Columns["SnapshotID"];
                this.columnKeyID = base.Columns["KeyID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnSnapshotID = new global::System.Data.DataColumn("SnapshotID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSnapshotID);
                this.columnKeyID = new global::System.Data.DataColumn("KeyID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnKeyID);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListSnapShotItemsRow NewListSnapShotItemsRow() {
                return ((ListSnapShotItemsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ListSnapShotItemsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ListSnapShotItemsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ListSnapShotItemsRowChanged != null)) {
                    this.ListSnapShotItemsRowChanged(this, new ListSnapShotItemsRowChangeEvent(((ListSnapShotItemsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ListSnapShotItemsRowChanging != null)) {
                    this.ListSnapShotItemsRowChanging(this, new ListSnapShotItemsRowChangeEvent(((ListSnapShotItemsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ListSnapShotItemsRowDeleted != null)) {
                    this.ListSnapShotItemsRowDeleted(this, new ListSnapShotItemsRowChangeEvent(((ListSnapShotItemsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ListSnapShotItemsRowDeleting != null)) {
                    this.ListSnapShotItemsRowDeleting(this, new ListSnapShotItemsRowChangeEvent(((ListSnapShotItemsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveListSnapShotItemsRow(ListSnapShotItemsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F1013BatchPaymentMgmtData ds = new F1013BatchPaymentMgmtData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ListSnapShotItemsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ListDateRecieptsDataTable : global::System.Data.TypedTableBase<ListDateRecieptsRow> {
            
            private global::System.Data.DataColumn columnIsDateOverrideChecked;
            
            private global::System.Data.DataColumn columnDefaultDate;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListDateRecieptsDataTable() {
                this.TableName = "ListDateReciepts";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListDateRecieptsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ListDateRecieptsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsDateOverrideCheckedColumn {
                get {
                    return this.columnIsDateOverrideChecked;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DefaultDateColumn {
                get {
                    return this.columnDefaultDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListDateRecieptsRow this[int index] {
                get {
                    return ((ListDateRecieptsRow)(this.Rows[index]));
                }
            }
            
            public event ListDateRecieptsRowChangeEventHandler ListDateRecieptsRowChanging;
            
            public event ListDateRecieptsRowChangeEventHandler ListDateRecieptsRowChanged;
            
            public event ListDateRecieptsRowChangeEventHandler ListDateRecieptsRowDeleting;
            
            public event ListDateRecieptsRowChangeEventHandler ListDateRecieptsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddListDateRecieptsRow(ListDateRecieptsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListDateRecieptsRow AddListDateRecieptsRow(int IsDateOverrideChecked, string DefaultDate) {
                ListDateRecieptsRow rowListDateRecieptsRow = ((ListDateRecieptsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        IsDateOverrideChecked,
                        DefaultDate};
                rowListDateRecieptsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowListDateRecieptsRow);
                return rowListDateRecieptsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ListDateRecieptsDataTable cln = ((ListDateRecieptsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ListDateRecieptsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnIsDateOverrideChecked = base.Columns["IsDateOverrideChecked"];
                this.columnDefaultDate = base.Columns["DefaultDate"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnIsDateOverrideChecked = new global::System.Data.DataColumn("IsDateOverrideChecked", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsDateOverrideChecked);
                this.columnDefaultDate = new global::System.Data.DataColumn("DefaultDate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDefaultDate);
                this.columnIsDateOverrideChecked.ReadOnly = true;
                this.columnDefaultDate.ReadOnly = true;
                this.columnDefaultDate.MaxLength = 10;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListDateRecieptsRow NewListDateRecieptsRow() {
                return ((ListDateRecieptsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ListDateRecieptsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ListDateRecieptsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ListDateRecieptsRowChanged != null)) {
                    this.ListDateRecieptsRowChanged(this, new ListDateRecieptsRowChangeEvent(((ListDateRecieptsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ListDateRecieptsRowChanging != null)) {
                    this.ListDateRecieptsRowChanging(this, new ListDateRecieptsRowChangeEvent(((ListDateRecieptsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ListDateRecieptsRowDeleted != null)) {
                    this.ListDateRecieptsRowDeleted(this, new ListDateRecieptsRowChangeEvent(((ListDateRecieptsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ListDateRecieptsRowDeleting != null)) {
                    this.ListDateRecieptsRowDeleting(this, new ListDateRecieptsRowChangeEvent(((ListDateRecieptsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveListDateRecieptsRow(ListDateRecieptsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F1013BatchPaymentMgmtData ds = new F1013BatchPaymentMgmtData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ListDateRecieptsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ListUnpaidReceiptsRow : global::System.Data.DataRow {
            
            private ListUnpaidReceiptsDataTable tableListUnpaidReceipts;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListUnpaidReceiptsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableListUnpaidReceipts = ((ListUnpaidReceiptsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ReceiptID {
                get {
                    try {
                        return ((int)(this[this.tableListUnpaidReceipts.ReceiptIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ReceiptID\' in table \'ListUnpaidReceipts\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListUnpaidReceipts.ReceiptIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ReceiptNumber {
                get {
                    if (this.IsReceiptNumberNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableListUnpaidReceipts.ReceiptNumberColumn]));
                    }
                }
                set {
                    this[this.tableListUnpaidReceipts.ReceiptNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string StatementNumber {
                get {
                    if (this.IsStatementNumberNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableListUnpaidReceipts.StatementNumberColumn]));
                    }
                }
                set {
                    this[this.tableListUnpaidReceipts.StatementNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TaxAmount {
                get {
                    try {
                        return ((decimal)(this[this.tableListUnpaidReceipts.TaxAmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TaxAmount\' in table \'ListUnpaidReceipts\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListUnpaidReceipts.TaxAmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TotalAmount {
                get {
                    try {
                        return ((decimal)(this[this.tableListUnpaidReceipts.TotalAmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalAmount\' in table \'ListUnpaidReceipts\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListUnpaidReceipts.TotalAmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime ReceiptDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableListUnpaidReceipts.ReceiptDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ReceiptDate\' in table \'ListUnpaidReceipts\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListUnpaidReceipts.ReceiptDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PPaymentID {
                get {
                    try {
                        return ((int)(this[this.tableListUnpaidReceipts.PPaymentIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PPaymentID\' in table \'ListUnpaidReceipts\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListUnpaidReceipts.PPaymentIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int StatementID {
                get {
                    try {
                        return ((int)(this[this.tableListUnpaidReceipts.StatementIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StatementID\' in table \'ListUnpaidReceipts\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListUnpaidReceipts.StatementIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte PostTypeID {
                get {
                    try {
                        return ((byte)(this[this.tableListUnpaidReceipts.PostTypeIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PostTypeID\' in table \'ListUnpaidReceipts\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListUnpaidReceipts.PostTypeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PostName {
                get {
                    if (this.IsPostNameNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableListUnpaidReceipts.PostNameColumn]));
                    }
                }
                set {
                    this[this.tableListUnpaidReceipts.PostNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ReceiptForm {
                get {
                    try {
                        return ((int)(this[this.tableListUnpaidReceipts.ReceiptFormColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ReceiptForm\' in table \'ListUnpaidReceipts\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListUnpaidReceipts.ReceiptFormColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool ReceiptSelected {
                get {
                    try {
                        return ((bool)(this[this.tableListUnpaidReceipts.ReceiptSelectedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ReceiptSelected\' in table \'ListUnpaidReceipts\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListUnpaidReceipts.ReceiptSelectedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int UserID {
                get {
                    try {
                        return ((int)(this[this.tableListUnpaidReceipts.UserIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UserID\' in table \'ListUnpaidReceipts\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListUnpaidReceipts.UserIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsReceiptIDNull() {
                return this.IsNull(this.tableListUnpaidReceipts.ReceiptIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetReceiptIDNull() {
                this[this.tableListUnpaidReceipts.ReceiptIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsReceiptNumberNull() {
                return this.IsNull(this.tableListUnpaidReceipts.ReceiptNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetReceiptNumberNull() {
                this[this.tableListUnpaidReceipts.ReceiptNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStatementNumberNull() {
                return this.IsNull(this.tableListUnpaidReceipts.StatementNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStatementNumberNull() {
                this[this.tableListUnpaidReceipts.StatementNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTaxAmountNull() {
                return this.IsNull(this.tableListUnpaidReceipts.TaxAmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTaxAmountNull() {
                this[this.tableListUnpaidReceipts.TaxAmountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalAmountNull() {
                return this.IsNull(this.tableListUnpaidReceipts.TotalAmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalAmountNull() {
                this[this.tableListUnpaidReceipts.TotalAmountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsReceiptDateNull() {
                return this.IsNull(this.tableListUnpaidReceipts.ReceiptDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetReceiptDateNull() {
                this[this.tableListUnpaidReceipts.ReceiptDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPPaymentIDNull() {
                return this.IsNull(this.tableListUnpaidReceipts.PPaymentIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPPaymentIDNull() {
                this[this.tableListUnpaidReceipts.PPaymentIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStatementIDNull() {
                return this.IsNull(this.tableListUnpaidReceipts.StatementIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStatementIDNull() {
                this[this.tableListUnpaidReceipts.StatementIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPostTypeIDNull() {
                return this.IsNull(this.tableListUnpaidReceipts.PostTypeIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPostTypeIDNull() {
                this[this.tableListUnpaidReceipts.PostTypeIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPostNameNull() {
                return this.IsNull(this.tableListUnpaidReceipts.PostNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPostNameNull() {
                this[this.tableListUnpaidReceipts.PostNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsReceiptFormNull() {
                return this.IsNull(this.tableListUnpaidReceipts.ReceiptFormColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetReceiptFormNull() {
                this[this.tableListUnpaidReceipts.ReceiptFormColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsReceiptSelectedNull() {
                return this.IsNull(this.tableListUnpaidReceipts.ReceiptSelectedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetReceiptSelectedNull() {
                this[this.tableListUnpaidReceipts.ReceiptSelectedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUserIDNull() {
                return this.IsNull(this.tableListUnpaidReceipts.UserIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUserIDNull() {
                this[this.tableListUnpaidReceipts.UserIDColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ListUnpaidReceiptUsersRow : global::System.Data.DataRow {
            
            private ListUnpaidReceiptUsersDataTable tableListUnpaidReceiptUsers;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListUnpaidReceiptUsersRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableListUnpaidReceiptUsers = ((ListUnpaidReceiptUsersDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int UserID {
                get {
                    try {
                        return ((int)(this[this.tableListUnpaidReceiptUsers.UserIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UserID\' in table \'ListUnpaidReceiptUsers\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListUnpaidReceiptUsers.UserIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DisplayName {
                get {
                    try {
                        return ((string)(this[this.tableListUnpaidReceiptUsers.DisplayNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DisplayName\' in table \'ListUnpaidReceiptUsers\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListUnpaidReceiptUsers.DisplayNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUserIDNull() {
                return this.IsNull(this.tableListUnpaidReceiptUsers.UserIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUserIDNull() {
                this[this.tableListUnpaidReceiptUsers.UserIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDisplayNameNull() {
                return this.IsNull(this.tableListUnpaidReceiptUsers.DisplayNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDisplayNameNull() {
                this[this.tableListUnpaidReceiptUsers.DisplayNameColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ListSnapShotItemsRow : global::System.Data.DataRow {
            
            private ListSnapShotItemsDataTable tableListSnapShotItems;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListSnapShotItemsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableListSnapShotItems = ((ListSnapShotItemsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SnapshotID {
                get {
                    try {
                        return ((int)(this[this.tableListSnapShotItems.SnapshotIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SnapshotID\' in table \'ListSnapShotItems\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListSnapShotItems.SnapshotIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int KeyID {
                get {
                    try {
                        return ((int)(this[this.tableListSnapShotItems.KeyIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'KeyID\' in table \'ListSnapShotItems\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListSnapShotItems.KeyIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSnapshotIDNull() {
                return this.IsNull(this.tableListSnapShotItems.SnapshotIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSnapshotIDNull() {
                this[this.tableListSnapShotItems.SnapshotIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsKeyIDNull() {
                return this.IsNull(this.tableListSnapShotItems.KeyIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetKeyIDNull() {
                this[this.tableListSnapShotItems.KeyIDColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ListDateRecieptsRow : global::System.Data.DataRow {
            
            private ListDateRecieptsDataTable tableListDateReciepts;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListDateRecieptsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableListDateReciepts = ((ListDateRecieptsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int IsDateOverrideChecked {
                get {
                    try {
                        return ((int)(this[this.tableListDateReciepts.IsDateOverrideCheckedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsDateOverrideChecked\' in table \'ListDateReciepts\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableListDateReciepts.IsDateOverrideCheckedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DefaultDate {
                get {
                    try {
                        return ((string)(this[this.tableListDateReciepts.DefaultDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DefaultDate\' in table \'ListDateReciepts\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListDateReciepts.DefaultDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsDateOverrideCheckedNull() {
                return this.IsNull(this.tableListDateReciepts.IsDateOverrideCheckedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsDateOverrideCheckedNull() {
                this[this.tableListDateReciepts.IsDateOverrideCheckedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDefaultDateNull() {
                return this.IsNull(this.tableListDateReciepts.DefaultDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDefaultDateNull() {
                this[this.tableListDateReciepts.DefaultDateColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ListUnpaidReceiptsRowChangeEvent : global::System.EventArgs {
            
            private ListUnpaidReceiptsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListUnpaidReceiptsRowChangeEvent(ListUnpaidReceiptsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListUnpaidReceiptsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ListUnpaidReceiptUsersRowChangeEvent : global::System.EventArgs {
            
            private ListUnpaidReceiptUsersRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListUnpaidReceiptUsersRowChangeEvent(ListUnpaidReceiptUsersRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListUnpaidReceiptUsersRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ListSnapShotItemsRowChangeEvent : global::System.EventArgs {
            
            private ListSnapShotItemsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListSnapShotItemsRowChangeEvent(ListSnapShotItemsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListSnapShotItemsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ListDateRecieptsRowChangeEvent : global::System.EventArgs {
            
            private ListDateRecieptsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListDateRecieptsRowChangeEvent(ListDateRecieptsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListDateRecieptsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591