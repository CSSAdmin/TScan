//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3082
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace TerraScan.BusinessEntities {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("F27006ParcelOwnershipData")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class F27006ParcelOwnershipData : global::System.Data.DataSet {
        
        private ListOwnerValidIDDataTable tableListOwnerValidID;
        
        private listMOwnerTypeDataTableDataTable tablelistMOwnerTypeDataTable;
        
        private ListSeparateStmtDataTableDataTable tableListSeparateStmtDataTable;
        
        private ListParcelOwnershipDataTableDataTable tableListParcelOwnershipDataTable;
        
        private ListAllOwnersDetailDataTableDataTable tableListAllOwnersDetailDataTable;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public F27006ParcelOwnershipData() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected F27006ParcelOwnershipData(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["ListOwnerValidID"] != null)) {
                    base.Tables.Add(new ListOwnerValidIDDataTable(ds.Tables["ListOwnerValidID"]));
                }
                if ((ds.Tables["listMOwnerTypeDataTable"] != null)) {
                    base.Tables.Add(new listMOwnerTypeDataTableDataTable(ds.Tables["listMOwnerTypeDataTable"]));
                }
                if ((ds.Tables["ListSeparateStmtDataTable"] != null)) {
                    base.Tables.Add(new ListSeparateStmtDataTableDataTable(ds.Tables["ListSeparateStmtDataTable"]));
                }
                if ((ds.Tables["ListParcelOwnershipDataTable"] != null)) {
                    base.Tables.Add(new ListParcelOwnershipDataTableDataTable(ds.Tables["ListParcelOwnershipDataTable"]));
                }
                if ((ds.Tables["ListAllOwnersDetailDataTable"] != null)) {
                    base.Tables.Add(new ListAllOwnersDetailDataTableDataTable(ds.Tables["ListAllOwnersDetailDataTable"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ListOwnerValidIDDataTable ListOwnerValidID {
            get {
                return this.tableListOwnerValidID;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public listMOwnerTypeDataTableDataTable listMOwnerTypeDataTable {
            get {
                return this.tablelistMOwnerTypeDataTable;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ListSeparateStmtDataTableDataTable ListSeparateStmtDataTable {
            get {
                return this.tableListSeparateStmtDataTable;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ListParcelOwnershipDataTableDataTable ListParcelOwnershipDataTable {
            get {
                return this.tableListParcelOwnershipDataTable;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ListAllOwnersDetailDataTableDataTable ListAllOwnersDetailDataTable {
            get {
                return this.tableListAllOwnersDetailDataTable;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            F27006ParcelOwnershipData cln = ((F27006ParcelOwnershipData)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["ListOwnerValidID"] != null)) {
                    base.Tables.Add(new ListOwnerValidIDDataTable(ds.Tables["ListOwnerValidID"]));
                }
                if ((ds.Tables["listMOwnerTypeDataTable"] != null)) {
                    base.Tables.Add(new listMOwnerTypeDataTableDataTable(ds.Tables["listMOwnerTypeDataTable"]));
                }
                if ((ds.Tables["ListSeparateStmtDataTable"] != null)) {
                    base.Tables.Add(new ListSeparateStmtDataTableDataTable(ds.Tables["ListSeparateStmtDataTable"]));
                }
                if ((ds.Tables["ListParcelOwnershipDataTable"] != null)) {
                    base.Tables.Add(new ListParcelOwnershipDataTableDataTable(ds.Tables["ListParcelOwnershipDataTable"]));
                }
                if ((ds.Tables["ListAllOwnersDetailDataTable"] != null)) {
                    base.Tables.Add(new ListAllOwnersDetailDataTableDataTable(ds.Tables["ListAllOwnersDetailDataTable"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableListOwnerValidID = ((ListOwnerValidIDDataTable)(base.Tables["ListOwnerValidID"]));
            if ((initTable == true)) {
                if ((this.tableListOwnerValidID != null)) {
                    this.tableListOwnerValidID.InitVars();
                }
            }
            this.tablelistMOwnerTypeDataTable = ((listMOwnerTypeDataTableDataTable)(base.Tables["listMOwnerTypeDataTable"]));
            if ((initTable == true)) {
                if ((this.tablelistMOwnerTypeDataTable != null)) {
                    this.tablelistMOwnerTypeDataTable.InitVars();
                }
            }
            this.tableListSeparateStmtDataTable = ((ListSeparateStmtDataTableDataTable)(base.Tables["ListSeparateStmtDataTable"]));
            if ((initTable == true)) {
                if ((this.tableListSeparateStmtDataTable != null)) {
                    this.tableListSeparateStmtDataTable.InitVars();
                }
            }
            this.tableListParcelOwnershipDataTable = ((ListParcelOwnershipDataTableDataTable)(base.Tables["ListParcelOwnershipDataTable"]));
            if ((initTable == true)) {
                if ((this.tableListParcelOwnershipDataTable != null)) {
                    this.tableListParcelOwnershipDataTable.InitVars();
                }
            }
            this.tableListAllOwnersDetailDataTable = ((ListAllOwnersDetailDataTableDataTable)(base.Tables["ListAllOwnersDetailDataTable"]));
            if ((initTable == true)) {
                if ((this.tableListAllOwnersDetailDataTable != null)) {
                    this.tableListAllOwnersDetailDataTable.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "F27006ParcelOwnershipData";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/F27006ParcelOwnershipData.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableListOwnerValidID = new ListOwnerValidIDDataTable();
            base.Tables.Add(this.tableListOwnerValidID);
            this.tablelistMOwnerTypeDataTable = new listMOwnerTypeDataTableDataTable();
            base.Tables.Add(this.tablelistMOwnerTypeDataTable);
            this.tableListSeparateStmtDataTable = new ListSeparateStmtDataTableDataTable();
            base.Tables.Add(this.tableListSeparateStmtDataTable);
            this.tableListParcelOwnershipDataTable = new ListParcelOwnershipDataTableDataTable();
            base.Tables.Add(this.tableListParcelOwnershipDataTable);
            this.tableListAllOwnersDetailDataTable = new ListAllOwnersDetailDataTableDataTable();
            base.Tables.Add(this.tableListAllOwnersDetailDataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeListOwnerValidID() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializelistMOwnerTypeDataTable() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeListSeparateStmtDataTable() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeListParcelOwnershipDataTable() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeListAllOwnersDetailDataTable() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            F27006ParcelOwnershipData ds = new F27006ParcelOwnershipData();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void ListOwnerValidIDRowChangeEventHandler(object sender, ListOwnerValidIDRowChangeEvent e);
        
        public delegate void listMOwnerTypeDataTableRowChangeEventHandler(object sender, listMOwnerTypeDataTableRowChangeEvent e);
        
        public delegate void ListSeparateStmtDataTableRowChangeEventHandler(object sender, ListSeparateStmtDataTableRowChangeEvent e);
        
        public delegate void ListParcelOwnershipDataTableRowChangeEventHandler(object sender, ListParcelOwnershipDataTableRowChangeEvent e);
        
        public delegate void ListAllOwnersDetailDataTableRowChangeEventHandler(object sender, ListAllOwnersDetailDataTableRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ListOwnerValidIDDataTable : global::System.Data.TypedTableBase<ListOwnerValidIDRow> {
            
            private global::System.Data.DataColumn columnKeyID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListOwnerValidIDDataTable() {
                this.TableName = "ListOwnerValidID";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListOwnerValidIDDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ListOwnerValidIDDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn KeyIDColumn {
                get {
                    return this.columnKeyID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListOwnerValidIDRow this[int index] {
                get {
                    return ((ListOwnerValidIDRow)(this.Rows[index]));
                }
            }
            
            public event ListOwnerValidIDRowChangeEventHandler ListOwnerValidIDRowChanging;
            
            public event ListOwnerValidIDRowChangeEventHandler ListOwnerValidIDRowChanged;
            
            public event ListOwnerValidIDRowChangeEventHandler ListOwnerValidIDRowDeleting;
            
            public event ListOwnerValidIDRowChangeEventHandler ListOwnerValidIDRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddListOwnerValidIDRow(ListOwnerValidIDRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListOwnerValidIDRow AddListOwnerValidIDRow(int KeyID) {
                ListOwnerValidIDRow rowListOwnerValidIDRow = ((ListOwnerValidIDRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        KeyID};
                rowListOwnerValidIDRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowListOwnerValidIDRow);
                return rowListOwnerValidIDRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ListOwnerValidIDDataTable cln = ((ListOwnerValidIDDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ListOwnerValidIDDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnKeyID = base.Columns["KeyID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnKeyID = new global::System.Data.DataColumn("KeyID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnKeyID);
                this.columnKeyID.ReadOnly = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListOwnerValidIDRow NewListOwnerValidIDRow() {
                return ((ListOwnerValidIDRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ListOwnerValidIDRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ListOwnerValidIDRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ListOwnerValidIDRowChanged != null)) {
                    this.ListOwnerValidIDRowChanged(this, new ListOwnerValidIDRowChangeEvent(((ListOwnerValidIDRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ListOwnerValidIDRowChanging != null)) {
                    this.ListOwnerValidIDRowChanging(this, new ListOwnerValidIDRowChangeEvent(((ListOwnerValidIDRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ListOwnerValidIDRowDeleted != null)) {
                    this.ListOwnerValidIDRowDeleted(this, new ListOwnerValidIDRowChangeEvent(((ListOwnerValidIDRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ListOwnerValidIDRowDeleting != null)) {
                    this.ListOwnerValidIDRowDeleting(this, new ListOwnerValidIDRowChangeEvent(((ListOwnerValidIDRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveListOwnerValidIDRow(ListOwnerValidIDRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F27006ParcelOwnershipData ds = new F27006ParcelOwnershipData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ListOwnerValidIDDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class listMOwnerTypeDataTableDataTable : global::System.Data.TypedTableBase<listMOwnerTypeDataTableRow> {
            
            private global::System.Data.DataColumn columnMOwnerTypeID;
            
            private global::System.Data.DataColumn columnMOwnerType;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public listMOwnerTypeDataTableDataTable() {
                this.TableName = "listMOwnerTypeDataTable";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal listMOwnerTypeDataTableDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected listMOwnerTypeDataTableDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MOwnerTypeIDColumn {
                get {
                    return this.columnMOwnerTypeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MOwnerTypeColumn {
                get {
                    return this.columnMOwnerType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public listMOwnerTypeDataTableRow this[int index] {
                get {
                    return ((listMOwnerTypeDataTableRow)(this.Rows[index]));
                }
            }
            
            public event listMOwnerTypeDataTableRowChangeEventHandler listMOwnerTypeDataTableRowChanging;
            
            public event listMOwnerTypeDataTableRowChangeEventHandler listMOwnerTypeDataTableRowChanged;
            
            public event listMOwnerTypeDataTableRowChangeEventHandler listMOwnerTypeDataTableRowDeleting;
            
            public event listMOwnerTypeDataTableRowChangeEventHandler listMOwnerTypeDataTableRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddlistMOwnerTypeDataTableRow(listMOwnerTypeDataTableRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public listMOwnerTypeDataTableRow AddlistMOwnerTypeDataTableRow(byte MOwnerTypeID, string MOwnerType) {
                listMOwnerTypeDataTableRow rowlistMOwnerTypeDataTableRow = ((listMOwnerTypeDataTableRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        MOwnerTypeID,
                        MOwnerType};
                rowlistMOwnerTypeDataTableRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowlistMOwnerTypeDataTableRow);
                return rowlistMOwnerTypeDataTableRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                listMOwnerTypeDataTableDataTable cln = ((listMOwnerTypeDataTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new listMOwnerTypeDataTableDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnMOwnerTypeID = base.Columns["MOwnerTypeID"];
                this.columnMOwnerType = base.Columns["MOwnerType"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnMOwnerTypeID = new global::System.Data.DataColumn("MOwnerTypeID", typeof(byte), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMOwnerTypeID);
                this.columnMOwnerType = new global::System.Data.DataColumn("MOwnerType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMOwnerType);
                this.columnMOwnerType.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public listMOwnerTypeDataTableRow NewlistMOwnerTypeDataTableRow() {
                return ((listMOwnerTypeDataTableRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new listMOwnerTypeDataTableRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(listMOwnerTypeDataTableRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.listMOwnerTypeDataTableRowChanged != null)) {
                    this.listMOwnerTypeDataTableRowChanged(this, new listMOwnerTypeDataTableRowChangeEvent(((listMOwnerTypeDataTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.listMOwnerTypeDataTableRowChanging != null)) {
                    this.listMOwnerTypeDataTableRowChanging(this, new listMOwnerTypeDataTableRowChangeEvent(((listMOwnerTypeDataTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.listMOwnerTypeDataTableRowDeleted != null)) {
                    this.listMOwnerTypeDataTableRowDeleted(this, new listMOwnerTypeDataTableRowChangeEvent(((listMOwnerTypeDataTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.listMOwnerTypeDataTableRowDeleting != null)) {
                    this.listMOwnerTypeDataTableRowDeleting(this, new listMOwnerTypeDataTableRowChangeEvent(((listMOwnerTypeDataTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovelistMOwnerTypeDataTableRow(listMOwnerTypeDataTableRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F27006ParcelOwnershipData ds = new F27006ParcelOwnershipData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "listMOwnerTypeDataTableDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ListSeparateStmtDataTableDataTable : global::System.Data.TypedTableBase<ListSeparateStmtDataTableRow> {
            
            private global::System.Data.DataColumn columnUndividedOwnershipID;
            
            private global::System.Data.DataColumn columnUndividedOwnershipOption;
            
            private global::System.Data.DataColumn columnBackgroundColor;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListSeparateStmtDataTableDataTable() {
                this.TableName = "ListSeparateStmtDataTable";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListSeparateStmtDataTableDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ListSeparateStmtDataTableDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UndividedOwnershipIDColumn {
                get {
                    return this.columnUndividedOwnershipID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UndividedOwnershipOptionColumn {
                get {
                    return this.columnUndividedOwnershipOption;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BackgroundColorColumn {
                get {
                    return this.columnBackgroundColor;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListSeparateStmtDataTableRow this[int index] {
                get {
                    return ((ListSeparateStmtDataTableRow)(this.Rows[index]));
                }
            }
            
            public event ListSeparateStmtDataTableRowChangeEventHandler ListSeparateStmtDataTableRowChanging;
            
            public event ListSeparateStmtDataTableRowChangeEventHandler ListSeparateStmtDataTableRowChanged;
            
            public event ListSeparateStmtDataTableRowChangeEventHandler ListSeparateStmtDataTableRowDeleting;
            
            public event ListSeparateStmtDataTableRowChangeEventHandler ListSeparateStmtDataTableRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddListSeparateStmtDataTableRow(ListSeparateStmtDataTableRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListSeparateStmtDataTableRow AddListSeparateStmtDataTableRow(int UndividedOwnershipID, string UndividedOwnershipOption, string BackgroundColor) {
                ListSeparateStmtDataTableRow rowListSeparateStmtDataTableRow = ((ListSeparateStmtDataTableRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        UndividedOwnershipID,
                        UndividedOwnershipOption,
                        BackgroundColor};
                rowListSeparateStmtDataTableRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowListSeparateStmtDataTableRow);
                return rowListSeparateStmtDataTableRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ListSeparateStmtDataTableDataTable cln = ((ListSeparateStmtDataTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ListSeparateStmtDataTableDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnUndividedOwnershipID = base.Columns["UndividedOwnershipID"];
                this.columnUndividedOwnershipOption = base.Columns["UndividedOwnershipOption"];
                this.columnBackgroundColor = base.Columns["BackgroundColor"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnUndividedOwnershipID = new global::System.Data.DataColumn("UndividedOwnershipID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUndividedOwnershipID);
                this.columnUndividedOwnershipOption = new global::System.Data.DataColumn("UndividedOwnershipOption", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUndividedOwnershipOption);
                this.columnBackgroundColor = new global::System.Data.DataColumn("BackgroundColor", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBackgroundColor);
                this.columnUndividedOwnershipOption.MaxLength = 26;
                this.columnBackgroundColor.MaxLength = 11;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListSeparateStmtDataTableRow NewListSeparateStmtDataTableRow() {
                return ((ListSeparateStmtDataTableRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ListSeparateStmtDataTableRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ListSeparateStmtDataTableRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ListSeparateStmtDataTableRowChanged != null)) {
                    this.ListSeparateStmtDataTableRowChanged(this, new ListSeparateStmtDataTableRowChangeEvent(((ListSeparateStmtDataTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ListSeparateStmtDataTableRowChanging != null)) {
                    this.ListSeparateStmtDataTableRowChanging(this, new ListSeparateStmtDataTableRowChangeEvent(((ListSeparateStmtDataTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ListSeparateStmtDataTableRowDeleted != null)) {
                    this.ListSeparateStmtDataTableRowDeleted(this, new ListSeparateStmtDataTableRowChangeEvent(((ListSeparateStmtDataTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ListSeparateStmtDataTableRowDeleting != null)) {
                    this.ListSeparateStmtDataTableRowDeleting(this, new ListSeparateStmtDataTableRowChangeEvent(((ListSeparateStmtDataTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveListSeparateStmtDataTableRow(ListSeparateStmtDataTableRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F27006ParcelOwnershipData ds = new F27006ParcelOwnershipData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ListSeparateStmtDataTableDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ListParcelOwnershipDataTableDataTable : global::System.Data.TypedTableBase<ListParcelOwnershipDataTableRow> {
            
            private global::System.Data.DataColumn columnMOwnerID;
            
            private global::System.Data.DataColumn columnOwnerID;
            
            private global::System.Data.DataColumn columnName;
            
            private global::System.Data.DataColumn columnFirstName;
            
            private global::System.Data.DataColumn columnLastName;
            
            private global::System.Data.DataColumn columnAddress1;
            
            private global::System.Data.DataColumn columnAddress2;
            
            private global::System.Data.DataColumn columnCity;
            
            private global::System.Data.DataColumn columnOwnerPercent;
            
            private global::System.Data.DataColumn columnIsBilled;
            
            private global::System.Data.DataColumn columnIsProRated;
            
            private global::System.Data.DataColumn columnOwnerOrder;
            
            private global::System.Data.DataColumn columnOwnerCode;
            
            private global::System.Data.DataColumn columnMOwnerTypeID;
            
            private global::System.Data.DataColumn columnMOwnerType;
            
            private global::System.Data.DataColumn columnState;
            
            private global::System.Data.DataColumn columnIsPrimary;
            
            private global::System.Data.DataColumn columnIsCurrent;
            
            private global::System.Data.DataColumn columnIsTaxPayer;
            
            private global::System.Data.DataColumn columnIsTRExtra;
            
            private global::System.Data.DataColumn columnUndividedOwnershipID;
            
            private global::System.Data.DataColumn columnZip;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListParcelOwnershipDataTableDataTable() {
                this.TableName = "ListParcelOwnershipDataTable";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListParcelOwnershipDataTableDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ListParcelOwnershipDataTableDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MOwnerIDColumn {
                get {
                    return this.columnMOwnerID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OwnerIDColumn {
                get {
                    return this.columnOwnerID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FirstNameColumn {
                get {
                    return this.columnFirstName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LastNameColumn {
                get {
                    return this.columnLastName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Address1Column {
                get {
                    return this.columnAddress1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Address2Column {
                get {
                    return this.columnAddress2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CityColumn {
                get {
                    return this.columnCity;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OwnerPercentColumn {
                get {
                    return this.columnOwnerPercent;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsBilledColumn {
                get {
                    return this.columnIsBilled;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsProRatedColumn {
                get {
                    return this.columnIsProRated;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OwnerOrderColumn {
                get {
                    return this.columnOwnerOrder;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OwnerCodeColumn {
                get {
                    return this.columnOwnerCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MOwnerTypeIDColumn {
                get {
                    return this.columnMOwnerTypeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MOwnerTypeColumn {
                get {
                    return this.columnMOwnerType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StateColumn {
                get {
                    return this.columnState;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsPrimaryColumn {
                get {
                    return this.columnIsPrimary;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsCurrentColumn {
                get {
                    return this.columnIsCurrent;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsTaxPayerColumn {
                get {
                    return this.columnIsTaxPayer;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsTRExtraColumn {
                get {
                    return this.columnIsTRExtra;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UndividedOwnershipIDColumn {
                get {
                    return this.columnUndividedOwnershipID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ZipColumn {
                get {
                    return this.columnZip;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListParcelOwnershipDataTableRow this[int index] {
                get {
                    return ((ListParcelOwnershipDataTableRow)(this.Rows[index]));
                }
            }
            
            public event ListParcelOwnershipDataTableRowChangeEventHandler ListParcelOwnershipDataTableRowChanging;
            
            public event ListParcelOwnershipDataTableRowChangeEventHandler ListParcelOwnershipDataTableRowChanged;
            
            public event ListParcelOwnershipDataTableRowChangeEventHandler ListParcelOwnershipDataTableRowDeleting;
            
            public event ListParcelOwnershipDataTableRowChangeEventHandler ListParcelOwnershipDataTableRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddListParcelOwnershipDataTableRow(ListParcelOwnershipDataTableRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListParcelOwnershipDataTableRow AddListParcelOwnershipDataTableRow(
                        int OwnerID, 
                        string Name, 
                        string FirstName, 
                        string LastName, 
                        string Address1, 
                        string Address2, 
                        string City, 
                        decimal OwnerPercent, 
                        bool IsBilled, 
                        bool IsProRated, 
                        byte OwnerOrder, 
                        string OwnerCode, 
                        byte MOwnerTypeID, 
                        string MOwnerType, 
                        string State, 
                        bool IsPrimary, 
                        bool IsCurrent, 
                        bool IsTaxPayer, 
                        bool IsTRExtra, 
                        int UndividedOwnershipID, 
                        string Zip) {
                ListParcelOwnershipDataTableRow rowListParcelOwnershipDataTableRow = ((ListParcelOwnershipDataTableRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        OwnerID,
                        Name,
                        FirstName,
                        LastName,
                        Address1,
                        Address2,
                        City,
                        OwnerPercent,
                        IsBilled,
                        IsProRated,
                        OwnerOrder,
                        OwnerCode,
                        MOwnerTypeID,
                        MOwnerType,
                        State,
                        IsPrimary,
                        IsCurrent,
                        IsTaxPayer,
                        IsTRExtra,
                        UndividedOwnershipID,
                        Zip};
                rowListParcelOwnershipDataTableRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowListParcelOwnershipDataTableRow);
                return rowListParcelOwnershipDataTableRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ListParcelOwnershipDataTableDataTable cln = ((ListParcelOwnershipDataTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ListParcelOwnershipDataTableDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnMOwnerID = base.Columns["MOwnerID"];
                this.columnOwnerID = base.Columns["OwnerID"];
                this.columnName = base.Columns["Name"];
                this.columnFirstName = base.Columns["FirstName"];
                this.columnLastName = base.Columns["LastName"];
                this.columnAddress1 = base.Columns["Address1"];
                this.columnAddress2 = base.Columns["Address2"];
                this.columnCity = base.Columns["City"];
                this.columnOwnerPercent = base.Columns["OwnerPercent"];
                this.columnIsBilled = base.Columns["IsBilled"];
                this.columnIsProRated = base.Columns["IsProRated"];
                this.columnOwnerOrder = base.Columns["OwnerOrder"];
                this.columnOwnerCode = base.Columns["OwnerCode"];
                this.columnMOwnerTypeID = base.Columns["MOwnerTypeID"];
                this.columnMOwnerType = base.Columns["MOwnerType"];
                this.columnState = base.Columns["State"];
                this.columnIsPrimary = base.Columns["IsPrimary"];
                this.columnIsCurrent = base.Columns["IsCurrent"];
                this.columnIsTaxPayer = base.Columns["IsTaxPayer"];
                this.columnIsTRExtra = base.Columns["IsTRExtra"];
                this.columnUndividedOwnershipID = base.Columns["UndividedOwnershipID"];
                this.columnZip = base.Columns["Zip"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnMOwnerID = new global::System.Data.DataColumn("MOwnerID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMOwnerID);
                this.columnOwnerID = new global::System.Data.DataColumn("OwnerID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOwnerID);
                this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnFirstName = new global::System.Data.DataColumn("FirstName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFirstName);
                this.columnLastName = new global::System.Data.DataColumn("LastName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLastName);
                this.columnAddress1 = new global::System.Data.DataColumn("Address1", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAddress1);
                this.columnAddress2 = new global::System.Data.DataColumn("Address2", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAddress2);
                this.columnCity = new global::System.Data.DataColumn("City", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCity);
                this.columnOwnerPercent = new global::System.Data.DataColumn("OwnerPercent", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOwnerPercent);
                this.columnIsBilled = new global::System.Data.DataColumn("IsBilled", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsBilled);
                this.columnIsProRated = new global::System.Data.DataColumn("IsProRated", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsProRated);
                this.columnOwnerOrder = new global::System.Data.DataColumn("OwnerOrder", typeof(byte), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOwnerOrder);
                this.columnOwnerCode = new global::System.Data.DataColumn("OwnerCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOwnerCode);
                this.columnMOwnerTypeID = new global::System.Data.DataColumn("MOwnerTypeID", typeof(byte), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMOwnerTypeID);
                this.columnMOwnerType = new global::System.Data.DataColumn("MOwnerType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMOwnerType);
                this.columnState = new global::System.Data.DataColumn("State", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnState);
                this.columnIsPrimary = new global::System.Data.DataColumn("IsPrimary", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsPrimary);
                this.columnIsCurrent = new global::System.Data.DataColumn("IsCurrent", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsCurrent);
                this.columnIsTaxPayer = new global::System.Data.DataColumn("IsTaxPayer", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsTaxPayer);
                this.columnIsTRExtra = new global::System.Data.DataColumn("IsTRExtra", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsTRExtra);
                this.columnUndividedOwnershipID = new global::System.Data.DataColumn("UndividedOwnershipID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUndividedOwnershipID);
                this.columnZip = new global::System.Data.DataColumn("Zip", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnZip);
                this.columnMOwnerID.AutoIncrement = true;
                this.columnName.MaxLength = 102;
                this.columnFirstName.MaxLength = 50;
                this.columnLastName.MaxLength = 50;
                this.columnAddress1.MaxLength = 50;
                this.columnAddress2.MaxLength = 50;
                this.columnCity.MaxLength = 50;
                this.columnOwnerCode.MaxLength = 20;
                this.columnMOwnerType.MaxLength = 50;
                this.columnState.MaxLength = 50;
                this.columnZip.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListParcelOwnershipDataTableRow NewListParcelOwnershipDataTableRow() {
                return ((ListParcelOwnershipDataTableRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ListParcelOwnershipDataTableRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ListParcelOwnershipDataTableRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ListParcelOwnershipDataTableRowChanged != null)) {
                    this.ListParcelOwnershipDataTableRowChanged(this, new ListParcelOwnershipDataTableRowChangeEvent(((ListParcelOwnershipDataTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ListParcelOwnershipDataTableRowChanging != null)) {
                    this.ListParcelOwnershipDataTableRowChanging(this, new ListParcelOwnershipDataTableRowChangeEvent(((ListParcelOwnershipDataTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ListParcelOwnershipDataTableRowDeleted != null)) {
                    this.ListParcelOwnershipDataTableRowDeleted(this, new ListParcelOwnershipDataTableRowChangeEvent(((ListParcelOwnershipDataTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ListParcelOwnershipDataTableRowDeleting != null)) {
                    this.ListParcelOwnershipDataTableRowDeleting(this, new ListParcelOwnershipDataTableRowChangeEvent(((ListParcelOwnershipDataTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveListParcelOwnershipDataTableRow(ListParcelOwnershipDataTableRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F27006ParcelOwnershipData ds = new F27006ParcelOwnershipData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ListParcelOwnershipDataTableDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ListAllOwnersDetailDataTableDataTable : global::System.Data.TypedTableBase<ListAllOwnersDetailDataTableRow> {
            
            private global::System.Data.DataColumn columnMOwnerID;
            
            private global::System.Data.DataColumn columnOwnerID;
            
            private global::System.Data.DataColumn columnName;
            
            private global::System.Data.DataColumn columnFirstName;
            
            private global::System.Data.DataColumn columnLastName;
            
            private global::System.Data.DataColumn columnAddress1;
            
            private global::System.Data.DataColumn columnAddress2;
            
            private global::System.Data.DataColumn columnCity;
            
            private global::System.Data.DataColumn columnOwnerPercent;
            
            private global::System.Data.DataColumn columnIsBilled;
            
            private global::System.Data.DataColumn columnIsProRated;
            
            private global::System.Data.DataColumn columnOwnerOrder;
            
            private global::System.Data.DataColumn columnOwnerCode;
            
            private global::System.Data.DataColumn columnState;
            
            private global::System.Data.DataColumn columnZip;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListAllOwnersDetailDataTableDataTable() {
                this.TableName = "ListAllOwnersDetailDataTable";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListAllOwnersDetailDataTableDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ListAllOwnersDetailDataTableDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MOwnerIDColumn {
                get {
                    return this.columnMOwnerID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OwnerIDColumn {
                get {
                    return this.columnOwnerID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FirstNameColumn {
                get {
                    return this.columnFirstName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LastNameColumn {
                get {
                    return this.columnLastName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Address1Column {
                get {
                    return this.columnAddress1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Address2Column {
                get {
                    return this.columnAddress2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CityColumn {
                get {
                    return this.columnCity;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OwnerPercentColumn {
                get {
                    return this.columnOwnerPercent;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsBilledColumn {
                get {
                    return this.columnIsBilled;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsProRatedColumn {
                get {
                    return this.columnIsProRated;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OwnerOrderColumn {
                get {
                    return this.columnOwnerOrder;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OwnerCodeColumn {
                get {
                    return this.columnOwnerCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StateColumn {
                get {
                    return this.columnState;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ZipColumn {
                get {
                    return this.columnZip;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListAllOwnersDetailDataTableRow this[int index] {
                get {
                    return ((ListAllOwnersDetailDataTableRow)(this.Rows[index]));
                }
            }
            
            public event ListAllOwnersDetailDataTableRowChangeEventHandler ListAllOwnersDetailDataTableRowChanging;
            
            public event ListAllOwnersDetailDataTableRowChangeEventHandler ListAllOwnersDetailDataTableRowChanged;
            
            public event ListAllOwnersDetailDataTableRowChangeEventHandler ListAllOwnersDetailDataTableRowDeleting;
            
            public event ListAllOwnersDetailDataTableRowChangeEventHandler ListAllOwnersDetailDataTableRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddListAllOwnersDetailDataTableRow(ListAllOwnersDetailDataTableRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListAllOwnersDetailDataTableRow AddListAllOwnersDetailDataTableRow(int MOwnerID, string Name, string FirstName, string LastName, string Address1, string Address2, string City, int OwnerPercent, int IsBilled, int IsProRated, int OwnerOrder, string OwnerCode, string State, string Zip) {
                ListAllOwnersDetailDataTableRow rowListAllOwnersDetailDataTableRow = ((ListAllOwnersDetailDataTableRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        MOwnerID,
                        null,
                        Name,
                        FirstName,
                        LastName,
                        Address1,
                        Address2,
                        City,
                        OwnerPercent,
                        IsBilled,
                        IsProRated,
                        OwnerOrder,
                        OwnerCode,
                        State,
                        Zip};
                rowListAllOwnersDetailDataTableRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowListAllOwnersDetailDataTableRow);
                return rowListAllOwnersDetailDataTableRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListAllOwnersDetailDataTableRow FindByOwnerID(int OwnerID) {
                return ((ListAllOwnersDetailDataTableRow)(this.Rows.Find(new object[] {
                            OwnerID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ListAllOwnersDetailDataTableDataTable cln = ((ListAllOwnersDetailDataTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ListAllOwnersDetailDataTableDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnMOwnerID = base.Columns["MOwnerID"];
                this.columnOwnerID = base.Columns["OwnerID"];
                this.columnName = base.Columns["Name"];
                this.columnFirstName = base.Columns["FirstName"];
                this.columnLastName = base.Columns["LastName"];
                this.columnAddress1 = base.Columns["Address1"];
                this.columnAddress2 = base.Columns["Address2"];
                this.columnCity = base.Columns["City"];
                this.columnOwnerPercent = base.Columns["OwnerPercent"];
                this.columnIsBilled = base.Columns["IsBilled"];
                this.columnIsProRated = base.Columns["IsProRated"];
                this.columnOwnerOrder = base.Columns["OwnerOrder"];
                this.columnOwnerCode = base.Columns["OwnerCode"];
                this.columnState = base.Columns["State"];
                this.columnZip = base.Columns["Zip"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnMOwnerID = new global::System.Data.DataColumn("MOwnerID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMOwnerID);
                this.columnOwnerID = new global::System.Data.DataColumn("OwnerID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOwnerID);
                this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnFirstName = new global::System.Data.DataColumn("FirstName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFirstName);
                this.columnLastName = new global::System.Data.DataColumn("LastName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLastName);
                this.columnAddress1 = new global::System.Data.DataColumn("Address1", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAddress1);
                this.columnAddress2 = new global::System.Data.DataColumn("Address2", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAddress2);
                this.columnCity = new global::System.Data.DataColumn("City", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCity);
                this.columnOwnerPercent = new global::System.Data.DataColumn("OwnerPercent", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOwnerPercent);
                this.columnIsBilled = new global::System.Data.DataColumn("IsBilled", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsBilled);
                this.columnIsProRated = new global::System.Data.DataColumn("IsProRated", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsProRated);
                this.columnOwnerOrder = new global::System.Data.DataColumn("OwnerOrder", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOwnerOrder);
                this.columnOwnerCode = new global::System.Data.DataColumn("OwnerCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOwnerCode);
                this.columnState = new global::System.Data.DataColumn("State", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnState);
                this.columnZip = new global::System.Data.DataColumn("Zip", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnZip);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnOwnerID}, true));
                this.columnOwnerID.AutoIncrement = true;
                this.columnOwnerID.AllowDBNull = false;
                this.columnOwnerID.Unique = true;
                this.columnName.MaxLength = 102;
                this.columnFirstName.MaxLength = 50;
                this.columnLastName.AllowDBNull = false;
                this.columnLastName.MaxLength = 50;
                this.columnAddress1.MaxLength = 50;
                this.columnAddress2.MaxLength = 50;
                this.columnCity.MaxLength = 50;
                this.columnOwnerCode.MaxLength = 20;
                this.columnState.MaxLength = 50;
                this.columnZip.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListAllOwnersDetailDataTableRow NewListAllOwnersDetailDataTableRow() {
                return ((ListAllOwnersDetailDataTableRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ListAllOwnersDetailDataTableRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ListAllOwnersDetailDataTableRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ListAllOwnersDetailDataTableRowChanged != null)) {
                    this.ListAllOwnersDetailDataTableRowChanged(this, new ListAllOwnersDetailDataTableRowChangeEvent(((ListAllOwnersDetailDataTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ListAllOwnersDetailDataTableRowChanging != null)) {
                    this.ListAllOwnersDetailDataTableRowChanging(this, new ListAllOwnersDetailDataTableRowChangeEvent(((ListAllOwnersDetailDataTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ListAllOwnersDetailDataTableRowDeleted != null)) {
                    this.ListAllOwnersDetailDataTableRowDeleted(this, new ListAllOwnersDetailDataTableRowChangeEvent(((ListAllOwnersDetailDataTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ListAllOwnersDetailDataTableRowDeleting != null)) {
                    this.ListAllOwnersDetailDataTableRowDeleting(this, new ListAllOwnersDetailDataTableRowChangeEvent(((ListAllOwnersDetailDataTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveListAllOwnersDetailDataTableRow(ListAllOwnersDetailDataTableRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F27006ParcelOwnershipData ds = new F27006ParcelOwnershipData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ListAllOwnersDetailDataTableDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ListOwnerValidIDRow : global::System.Data.DataRow {
            
            private ListOwnerValidIDDataTable tableListOwnerValidID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListOwnerValidIDRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableListOwnerValidID = ((ListOwnerValidIDDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int KeyID {
                get {
                    try {
                        return ((int)(this[this.tableListOwnerValidID.KeyIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'KeyID\' in table \'ListOwnerValidID\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListOwnerValidID.KeyIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsKeyIDNull() {
                return this.IsNull(this.tableListOwnerValidID.KeyIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetKeyIDNull() {
                this[this.tableListOwnerValidID.KeyIDColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class listMOwnerTypeDataTableRow : global::System.Data.DataRow {
            
            private listMOwnerTypeDataTableDataTable tablelistMOwnerTypeDataTable;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal listMOwnerTypeDataTableRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablelistMOwnerTypeDataTable = ((listMOwnerTypeDataTableDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte MOwnerTypeID {
                get {
                    try {
                        return ((byte)(this[this.tablelistMOwnerTypeDataTable.MOwnerTypeIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MOwnerTypeID\' in table \'listMOwnerTypeDataTable\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tablelistMOwnerTypeDataTable.MOwnerTypeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MOwnerType {
                get {
                    if (this.IsMOwnerTypeNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tablelistMOwnerTypeDataTable.MOwnerTypeColumn]));
                    }
                }
                set {
                    this[this.tablelistMOwnerTypeDataTable.MOwnerTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMOwnerTypeIDNull() {
                return this.IsNull(this.tablelistMOwnerTypeDataTable.MOwnerTypeIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMOwnerTypeIDNull() {
                this[this.tablelistMOwnerTypeDataTable.MOwnerTypeIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMOwnerTypeNull() {
                return this.IsNull(this.tablelistMOwnerTypeDataTable.MOwnerTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMOwnerTypeNull() {
                this[this.tablelistMOwnerTypeDataTable.MOwnerTypeColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ListSeparateStmtDataTableRow : global::System.Data.DataRow {
            
            private ListSeparateStmtDataTableDataTable tableListSeparateStmtDataTable;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListSeparateStmtDataTableRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableListSeparateStmtDataTable = ((ListSeparateStmtDataTableDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int UndividedOwnershipID {
                get {
                    try {
                        return ((int)(this[this.tableListSeparateStmtDataTable.UndividedOwnershipIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UndividedOwnershipID\' in table \'ListSeparateStmtDataTable\' " +
                                "is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListSeparateStmtDataTable.UndividedOwnershipIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UndividedOwnershipOption {
                get {
                    try {
                        return ((string)(this[this.tableListSeparateStmtDataTable.UndividedOwnershipOptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UndividedOwnershipOption\' in table \'ListSeparateStmtDataTab" +
                                "le\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListSeparateStmtDataTable.UndividedOwnershipOptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BackgroundColor {
                get {
                    try {
                        return ((string)(this[this.tableListSeparateStmtDataTable.BackgroundColorColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BackgroundColor\' in table \'ListSeparateStmtDataTable\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tableListSeparateStmtDataTable.BackgroundColorColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUndividedOwnershipIDNull() {
                return this.IsNull(this.tableListSeparateStmtDataTable.UndividedOwnershipIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUndividedOwnershipIDNull() {
                this[this.tableListSeparateStmtDataTable.UndividedOwnershipIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUndividedOwnershipOptionNull() {
                return this.IsNull(this.tableListSeparateStmtDataTable.UndividedOwnershipOptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUndividedOwnershipOptionNull() {
                this[this.tableListSeparateStmtDataTable.UndividedOwnershipOptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBackgroundColorNull() {
                return this.IsNull(this.tableListSeparateStmtDataTable.BackgroundColorColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBackgroundColorNull() {
                this[this.tableListSeparateStmtDataTable.BackgroundColorColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ListParcelOwnershipDataTableRow : global::System.Data.DataRow {
            
            private ListParcelOwnershipDataTableDataTable tableListParcelOwnershipDataTable;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListParcelOwnershipDataTableRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableListParcelOwnershipDataTable = ((ListParcelOwnershipDataTableDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MOwnerID {
                get {
                    try {
                        return ((int)(this[this.tableListParcelOwnershipDataTable.MOwnerIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MOwnerID\' in table \'ListParcelOwnershipDataTable\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableListParcelOwnershipDataTable.MOwnerIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int OwnerID {
                get {
                    try {
                        return ((int)(this[this.tableListParcelOwnershipDataTable.OwnerIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OwnerID\' in table \'ListParcelOwnershipDataTable\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableListParcelOwnershipDataTable.OwnerIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    try {
                        return ((string)(this[this.tableListParcelOwnershipDataTable.NameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Name\' in table \'ListParcelOwnershipDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListParcelOwnershipDataTable.NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FirstName {
                get {
                    try {
                        return ((string)(this[this.tableListParcelOwnershipDataTable.FirstNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FirstName\' in table \'ListParcelOwnershipDataTable\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableListParcelOwnershipDataTable.FirstNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LastName {
                get {
                    try {
                        return ((string)(this[this.tableListParcelOwnershipDataTable.LastNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LastName\' in table \'ListParcelOwnershipDataTable\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableListParcelOwnershipDataTable.LastNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Address1 {
                get {
                    try {
                        return ((string)(this[this.tableListParcelOwnershipDataTable.Address1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Address1\' in table \'ListParcelOwnershipDataTable\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableListParcelOwnershipDataTable.Address1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Address2 {
                get {
                    try {
                        return ((string)(this[this.tableListParcelOwnershipDataTable.Address2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Address2\' in table \'ListParcelOwnershipDataTable\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableListParcelOwnershipDataTable.Address2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string City {
                get {
                    try {
                        return ((string)(this[this.tableListParcelOwnershipDataTable.CityColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'City\' in table \'ListParcelOwnershipDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListParcelOwnershipDataTable.CityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal OwnerPercent {
                get {
                    try {
                        return ((decimal)(this[this.tableListParcelOwnershipDataTable.OwnerPercentColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OwnerPercent\' in table \'ListParcelOwnershipDataTable\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tableListParcelOwnershipDataTable.OwnerPercentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBilled {
                get {
                    try {
                        return ((bool)(this[this.tableListParcelOwnershipDataTable.IsBilledColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsBilled\' in table \'ListParcelOwnershipDataTable\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableListParcelOwnershipDataTable.IsBilledColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProRated {
                get {
                    try {
                        return ((bool)(this[this.tableListParcelOwnershipDataTable.IsProRatedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsProRated\' in table \'ListParcelOwnershipDataTable\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableListParcelOwnershipDataTable.IsProRatedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte OwnerOrder {
                get {
                    try {
                        return ((byte)(this[this.tableListParcelOwnershipDataTable.OwnerOrderColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OwnerOrder\' in table \'ListParcelOwnershipDataTable\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableListParcelOwnershipDataTable.OwnerOrderColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string OwnerCode {
                get {
                    try {
                        return ((string)(this[this.tableListParcelOwnershipDataTable.OwnerCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OwnerCode\' in table \'ListParcelOwnershipDataTable\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableListParcelOwnershipDataTable.OwnerCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte MOwnerTypeID {
                get {
                    try {
                        return ((byte)(this[this.tableListParcelOwnershipDataTable.MOwnerTypeIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MOwnerTypeID\' in table \'ListParcelOwnershipDataTable\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tableListParcelOwnershipDataTable.MOwnerTypeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MOwnerType {
                get {
                    try {
                        return ((string)(this[this.tableListParcelOwnershipDataTable.MOwnerTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MOwnerType\' in table \'ListParcelOwnershipDataTable\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableListParcelOwnershipDataTable.MOwnerTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string State {
                get {
                    try {
                        return ((string)(this[this.tableListParcelOwnershipDataTable.StateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'State\' in table \'ListParcelOwnershipDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListParcelOwnershipDataTable.StateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPrimary {
                get {
                    try {
                        return ((bool)(this[this.tableListParcelOwnershipDataTable.IsPrimaryColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsPrimary\' in table \'ListParcelOwnershipDataTable\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableListParcelOwnershipDataTable.IsPrimaryColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCurrent {
                get {
                    try {
                        return ((bool)(this[this.tableListParcelOwnershipDataTable.IsCurrentColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsCurrent\' in table \'ListParcelOwnershipDataTable\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableListParcelOwnershipDataTable.IsCurrentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTaxPayer {
                get {
                    try {
                        return ((bool)(this[this.tableListParcelOwnershipDataTable.IsTaxPayerColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsTaxPayer\' in table \'ListParcelOwnershipDataTable\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableListParcelOwnershipDataTable.IsTaxPayerColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTRExtra {
                get {
                    try {
                        return ((bool)(this[this.tableListParcelOwnershipDataTable.IsTRExtraColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsTRExtra\' in table \'ListParcelOwnershipDataTable\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableListParcelOwnershipDataTable.IsTRExtraColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int UndividedOwnershipID {
                get {
                    try {
                        return ((int)(this[this.tableListParcelOwnershipDataTable.UndividedOwnershipIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UndividedOwnershipID\' in table \'ListParcelOwnershipDataTabl" +
                                "e\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListParcelOwnershipDataTable.UndividedOwnershipIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Zip {
                get {
                    try {
                        return ((string)(this[this.tableListParcelOwnershipDataTable.ZipColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Zip\' in table \'ListParcelOwnershipDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListParcelOwnershipDataTable.ZipColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMOwnerIDNull() {
                return this.IsNull(this.tableListParcelOwnershipDataTable.MOwnerIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMOwnerIDNull() {
                this[this.tableListParcelOwnershipDataTable.MOwnerIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOwnerIDNull() {
                return this.IsNull(this.tableListParcelOwnershipDataTable.OwnerIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOwnerIDNull() {
                this[this.tableListParcelOwnershipDataTable.OwnerIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNameNull() {
                return this.IsNull(this.tableListParcelOwnershipDataTable.NameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNameNull() {
                this[this.tableListParcelOwnershipDataTable.NameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFirstNameNull() {
                return this.IsNull(this.tableListParcelOwnershipDataTable.FirstNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFirstNameNull() {
                this[this.tableListParcelOwnershipDataTable.FirstNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLastNameNull() {
                return this.IsNull(this.tableListParcelOwnershipDataTable.LastNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLastNameNull() {
                this[this.tableListParcelOwnershipDataTable.LastNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAddress1Null() {
                return this.IsNull(this.tableListParcelOwnershipDataTable.Address1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAddress1Null() {
                this[this.tableListParcelOwnershipDataTable.Address1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAddress2Null() {
                return this.IsNull(this.tableListParcelOwnershipDataTable.Address2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAddress2Null() {
                this[this.tableListParcelOwnershipDataTable.Address2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCityNull() {
                return this.IsNull(this.tableListParcelOwnershipDataTable.CityColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCityNull() {
                this[this.tableListParcelOwnershipDataTable.CityColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOwnerPercentNull() {
                return this.IsNull(this.tableListParcelOwnershipDataTable.OwnerPercentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOwnerPercentNull() {
                this[this.tableListParcelOwnershipDataTable.OwnerPercentColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsBilledNull() {
                return this.IsNull(this.tableListParcelOwnershipDataTable.IsBilledColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsBilledNull() {
                this[this.tableListParcelOwnershipDataTable.IsBilledColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsProRatedNull() {
                return this.IsNull(this.tableListParcelOwnershipDataTable.IsProRatedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsProRatedNull() {
                this[this.tableListParcelOwnershipDataTable.IsProRatedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOwnerOrderNull() {
                return this.IsNull(this.tableListParcelOwnershipDataTable.OwnerOrderColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOwnerOrderNull() {
                this[this.tableListParcelOwnershipDataTable.OwnerOrderColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOwnerCodeNull() {
                return this.IsNull(this.tableListParcelOwnershipDataTable.OwnerCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOwnerCodeNull() {
                this[this.tableListParcelOwnershipDataTable.OwnerCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMOwnerTypeIDNull() {
                return this.IsNull(this.tableListParcelOwnershipDataTable.MOwnerTypeIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMOwnerTypeIDNull() {
                this[this.tableListParcelOwnershipDataTable.MOwnerTypeIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMOwnerTypeNull() {
                return this.IsNull(this.tableListParcelOwnershipDataTable.MOwnerTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMOwnerTypeNull() {
                this[this.tableListParcelOwnershipDataTable.MOwnerTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStateNull() {
                return this.IsNull(this.tableListParcelOwnershipDataTable.StateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStateNull() {
                this[this.tableListParcelOwnershipDataTable.StateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsPrimaryNull() {
                return this.IsNull(this.tableListParcelOwnershipDataTable.IsPrimaryColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsPrimaryNull() {
                this[this.tableListParcelOwnershipDataTable.IsPrimaryColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsCurrentNull() {
                return this.IsNull(this.tableListParcelOwnershipDataTable.IsCurrentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsCurrentNull() {
                this[this.tableListParcelOwnershipDataTable.IsCurrentColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsTaxPayerNull() {
                return this.IsNull(this.tableListParcelOwnershipDataTable.IsTaxPayerColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsTaxPayerNull() {
                this[this.tableListParcelOwnershipDataTable.IsTaxPayerColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsTRExtraNull() {
                return this.IsNull(this.tableListParcelOwnershipDataTable.IsTRExtraColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsTRExtraNull() {
                this[this.tableListParcelOwnershipDataTable.IsTRExtraColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUndividedOwnershipIDNull() {
                return this.IsNull(this.tableListParcelOwnershipDataTable.UndividedOwnershipIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUndividedOwnershipIDNull() {
                this[this.tableListParcelOwnershipDataTable.UndividedOwnershipIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsZipNull() {
                return this.IsNull(this.tableListParcelOwnershipDataTable.ZipColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetZipNull() {
                this[this.tableListParcelOwnershipDataTable.ZipColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ListAllOwnersDetailDataTableRow : global::System.Data.DataRow {
            
            private ListAllOwnersDetailDataTableDataTable tableListAllOwnersDetailDataTable;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListAllOwnersDetailDataTableRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableListAllOwnersDetailDataTable = ((ListAllOwnersDetailDataTableDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MOwnerID {
                get {
                    try {
                        return ((int)(this[this.tableListAllOwnersDetailDataTable.MOwnerIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MOwnerID\' in table \'ListAllOwnersDetailDataTable\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableListAllOwnersDetailDataTable.MOwnerIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int OwnerID {
                get {
                    return ((int)(this[this.tableListAllOwnersDetailDataTable.OwnerIDColumn]));
                }
                set {
                    this[this.tableListAllOwnersDetailDataTable.OwnerIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    try {
                        return ((string)(this[this.tableListAllOwnersDetailDataTable.NameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Name\' in table \'ListAllOwnersDetailDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListAllOwnersDetailDataTable.NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FirstName {
                get {
                    try {
                        return ((string)(this[this.tableListAllOwnersDetailDataTable.FirstNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FirstName\' in table \'ListAllOwnersDetailDataTable\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableListAllOwnersDetailDataTable.FirstNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LastName {
                get {
                    return ((string)(this[this.tableListAllOwnersDetailDataTable.LastNameColumn]));
                }
                set {
                    this[this.tableListAllOwnersDetailDataTable.LastNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Address1 {
                get {
                    try {
                        return ((string)(this[this.tableListAllOwnersDetailDataTable.Address1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Address1\' in table \'ListAllOwnersDetailDataTable\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableListAllOwnersDetailDataTable.Address1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Address2 {
                get {
                    try {
                        return ((string)(this[this.tableListAllOwnersDetailDataTable.Address2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Address2\' in table \'ListAllOwnersDetailDataTable\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableListAllOwnersDetailDataTable.Address2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string City {
                get {
                    try {
                        return ((string)(this[this.tableListAllOwnersDetailDataTable.CityColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'City\' in table \'ListAllOwnersDetailDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListAllOwnersDetailDataTable.CityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int OwnerPercent {
                get {
                    try {
                        return ((int)(this[this.tableListAllOwnersDetailDataTable.OwnerPercentColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OwnerPercent\' in table \'ListAllOwnersDetailDataTable\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tableListAllOwnersDetailDataTable.OwnerPercentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int IsBilled {
                get {
                    try {
                        return ((int)(this[this.tableListAllOwnersDetailDataTable.IsBilledColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsBilled\' in table \'ListAllOwnersDetailDataTable\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableListAllOwnersDetailDataTable.IsBilledColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int IsProRated {
                get {
                    try {
                        return ((int)(this[this.tableListAllOwnersDetailDataTable.IsProRatedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsProRated\' in table \'ListAllOwnersDetailDataTable\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableListAllOwnersDetailDataTable.IsProRatedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int OwnerOrder {
                get {
                    try {
                        return ((int)(this[this.tableListAllOwnersDetailDataTable.OwnerOrderColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OwnerOrder\' in table \'ListAllOwnersDetailDataTable\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableListAllOwnersDetailDataTable.OwnerOrderColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string OwnerCode {
                get {
                    try {
                        return ((string)(this[this.tableListAllOwnersDetailDataTable.OwnerCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OwnerCode\' in table \'ListAllOwnersDetailDataTable\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableListAllOwnersDetailDataTable.OwnerCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string State {
                get {
                    try {
                        return ((string)(this[this.tableListAllOwnersDetailDataTable.StateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'State\' in table \'ListAllOwnersDetailDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListAllOwnersDetailDataTable.StateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Zip {
                get {
                    try {
                        return ((string)(this[this.tableListAllOwnersDetailDataTable.ZipColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Zip\' in table \'ListAllOwnersDetailDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListAllOwnersDetailDataTable.ZipColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMOwnerIDNull() {
                return this.IsNull(this.tableListAllOwnersDetailDataTable.MOwnerIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMOwnerIDNull() {
                this[this.tableListAllOwnersDetailDataTable.MOwnerIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNameNull() {
                return this.IsNull(this.tableListAllOwnersDetailDataTable.NameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNameNull() {
                this[this.tableListAllOwnersDetailDataTable.NameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFirstNameNull() {
                return this.IsNull(this.tableListAllOwnersDetailDataTable.FirstNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFirstNameNull() {
                this[this.tableListAllOwnersDetailDataTable.FirstNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAddress1Null() {
                return this.IsNull(this.tableListAllOwnersDetailDataTable.Address1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAddress1Null() {
                this[this.tableListAllOwnersDetailDataTable.Address1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAddress2Null() {
                return this.IsNull(this.tableListAllOwnersDetailDataTable.Address2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAddress2Null() {
                this[this.tableListAllOwnersDetailDataTable.Address2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCityNull() {
                return this.IsNull(this.tableListAllOwnersDetailDataTable.CityColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCityNull() {
                this[this.tableListAllOwnersDetailDataTable.CityColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOwnerPercentNull() {
                return this.IsNull(this.tableListAllOwnersDetailDataTable.OwnerPercentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOwnerPercentNull() {
                this[this.tableListAllOwnersDetailDataTable.OwnerPercentColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsBilledNull() {
                return this.IsNull(this.tableListAllOwnersDetailDataTable.IsBilledColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsBilledNull() {
                this[this.tableListAllOwnersDetailDataTable.IsBilledColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsProRatedNull() {
                return this.IsNull(this.tableListAllOwnersDetailDataTable.IsProRatedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsProRatedNull() {
                this[this.tableListAllOwnersDetailDataTable.IsProRatedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOwnerOrderNull() {
                return this.IsNull(this.tableListAllOwnersDetailDataTable.OwnerOrderColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOwnerOrderNull() {
                this[this.tableListAllOwnersDetailDataTable.OwnerOrderColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOwnerCodeNull() {
                return this.IsNull(this.tableListAllOwnersDetailDataTable.OwnerCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOwnerCodeNull() {
                this[this.tableListAllOwnersDetailDataTable.OwnerCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStateNull() {
                return this.IsNull(this.tableListAllOwnersDetailDataTable.StateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStateNull() {
                this[this.tableListAllOwnersDetailDataTable.StateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsZipNull() {
                return this.IsNull(this.tableListAllOwnersDetailDataTable.ZipColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetZipNull() {
                this[this.tableListAllOwnersDetailDataTable.ZipColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ListOwnerValidIDRowChangeEvent : global::System.EventArgs {
            
            private ListOwnerValidIDRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListOwnerValidIDRowChangeEvent(ListOwnerValidIDRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListOwnerValidIDRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class listMOwnerTypeDataTableRowChangeEvent : global::System.EventArgs {
            
            private listMOwnerTypeDataTableRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public listMOwnerTypeDataTableRowChangeEvent(listMOwnerTypeDataTableRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public listMOwnerTypeDataTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ListSeparateStmtDataTableRowChangeEvent : global::System.EventArgs {
            
            private ListSeparateStmtDataTableRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListSeparateStmtDataTableRowChangeEvent(ListSeparateStmtDataTableRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListSeparateStmtDataTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ListParcelOwnershipDataTableRowChangeEvent : global::System.EventArgs {
            
            private ListParcelOwnershipDataTableRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListParcelOwnershipDataTableRowChangeEvent(ListParcelOwnershipDataTableRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListParcelOwnershipDataTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ListAllOwnersDetailDataTableRowChangeEvent : global::System.EventArgs {
            
            private ListAllOwnersDetailDataTableRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListAllOwnersDetailDataTableRowChangeEvent(ListAllOwnersDetailDataTableRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListAllOwnersDetailDataTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591