//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3082
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace TerraScan.BusinessEntities {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("F29650ExemptionData")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class F29650ExemptionData : global::System.Data.DataSet {
        
        private GetExemptionDataTable tableGetExemption;
        
        private ListExemptionTypeDataTable tableListExemptionType;
        
        private SaveExemptionDataTable tableSaveExemption;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public F29650ExemptionData() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected F29650ExemptionData(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["GetExemption"] != null)) {
                    base.Tables.Add(new GetExemptionDataTable(ds.Tables["GetExemption"]));
                }
                if ((ds.Tables["ListExemptionType"] != null)) {
                    base.Tables.Add(new ListExemptionTypeDataTable(ds.Tables["ListExemptionType"]));
                }
                if ((ds.Tables["SaveExemption"] != null)) {
                    base.Tables.Add(new SaveExemptionDataTable(ds.Tables["SaveExemption"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GetExemptionDataTable GetExemption {
            get {
                return this.tableGetExemption;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ListExemptionTypeDataTable ListExemptionType {
            get {
                return this.tableListExemptionType;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SaveExemptionDataTable SaveExemption {
            get {
                return this.tableSaveExemption;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            F29650ExemptionData cln = ((F29650ExemptionData)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["GetExemption"] != null)) {
                    base.Tables.Add(new GetExemptionDataTable(ds.Tables["GetExemption"]));
                }
                if ((ds.Tables["ListExemptionType"] != null)) {
                    base.Tables.Add(new ListExemptionTypeDataTable(ds.Tables["ListExemptionType"]));
                }
                if ((ds.Tables["SaveExemption"] != null)) {
                    base.Tables.Add(new SaveExemptionDataTable(ds.Tables["SaveExemption"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableGetExemption = ((GetExemptionDataTable)(base.Tables["GetExemption"]));
            if ((initTable == true)) {
                if ((this.tableGetExemption != null)) {
                    this.tableGetExemption.InitVars();
                }
            }
            this.tableListExemptionType = ((ListExemptionTypeDataTable)(base.Tables["ListExemptionType"]));
            if ((initTable == true)) {
                if ((this.tableListExemptionType != null)) {
                    this.tableListExemptionType.InitVars();
                }
            }
            this.tableSaveExemption = ((SaveExemptionDataTable)(base.Tables["SaveExemption"]));
            if ((initTable == true)) {
                if ((this.tableSaveExemption != null)) {
                    this.tableSaveExemption.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "F29650ExemptionData";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/F29650ExemptionData.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableGetExemption = new GetExemptionDataTable();
            base.Tables.Add(this.tableGetExemption);
            this.tableListExemptionType = new ListExemptionTypeDataTable();
            base.Tables.Add(this.tableListExemptionType);
            this.tableSaveExemption = new SaveExemptionDataTable();
            base.Tables.Add(this.tableSaveExemption);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeGetExemption() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeListExemptionType() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSaveExemption() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            F29650ExemptionData ds = new F29650ExemptionData();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void GetExemptionRowChangeEventHandler(object sender, GetExemptionRowChangeEvent e);
        
        public delegate void ListExemptionTypeRowChangeEventHandler(object sender, ListExemptionTypeRowChangeEvent e);
        
        public delegate void SaveExemptionRowChangeEventHandler(object sender, SaveExemptionRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class GetExemptionDataTable : global::System.Data.TypedTableBase<GetExemptionRow> {
            
            private global::System.Data.DataColumn columnExemptionEventID;
            
            private global::System.Data.DataColumn columnExemptionID;
            
            private global::System.Data.DataColumn columnExemptionCode;
            
            private global::System.Data.DataColumn columnLoss;
            
            private global::System.Data.DataColumn columnReductionOfValue;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetExemptionDataTable() {
                this.TableName = "GetExemption";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetExemptionDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected GetExemptionDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ExemptionEventIDColumn {
                get {
                    return this.columnExemptionEventID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ExemptionIDColumn {
                get {
                    return this.columnExemptionID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ExemptionCodeColumn {
                get {
                    return this.columnExemptionCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LossColumn {
                get {
                    return this.columnLoss;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ReductionOfValueColumn {
                get {
                    return this.columnReductionOfValue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetExemptionRow this[int index] {
                get {
                    return ((GetExemptionRow)(this.Rows[index]));
                }
            }
            
            public event GetExemptionRowChangeEventHandler GetExemptionRowChanging;
            
            public event GetExemptionRowChangeEventHandler GetExemptionRowChanged;
            
            public event GetExemptionRowChangeEventHandler GetExemptionRowDeleting;
            
            public event GetExemptionRowChangeEventHandler GetExemptionRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddGetExemptionRow(GetExemptionRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetExemptionRow AddGetExemptionRow(int ExemptionEventID, int ExemptionID, string ExemptionCode, decimal Loss, decimal ReductionOfValue) {
                GetExemptionRow rowGetExemptionRow = ((GetExemptionRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ExemptionEventID,
                        ExemptionID,
                        ExemptionCode,
                        Loss,
                        ReductionOfValue};
                rowGetExemptionRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowGetExemptionRow);
                return rowGetExemptionRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                GetExemptionDataTable cln = ((GetExemptionDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new GetExemptionDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnExemptionEventID = base.Columns["ExemptionEventID"];
                this.columnExemptionID = base.Columns["ExemptionID"];
                this.columnExemptionCode = base.Columns["ExemptionCode"];
                this.columnLoss = base.Columns["Loss"];
                this.columnReductionOfValue = base.Columns["ReductionOfValue"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnExemptionEventID = new global::System.Data.DataColumn("ExemptionEventID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnExemptionEventID);
                this.columnExemptionID = new global::System.Data.DataColumn("ExemptionID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnExemptionID);
                this.columnExemptionCode = new global::System.Data.DataColumn("ExemptionCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnExemptionCode);
                this.columnLoss = new global::System.Data.DataColumn("Loss", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLoss);
                this.columnReductionOfValue = new global::System.Data.DataColumn("ReductionOfValue", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnReductionOfValue);
                this.columnExemptionCode.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetExemptionRow NewGetExemptionRow() {
                return ((GetExemptionRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new GetExemptionRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(GetExemptionRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GetExemptionRowChanged != null)) {
                    this.GetExemptionRowChanged(this, new GetExemptionRowChangeEvent(((GetExemptionRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GetExemptionRowChanging != null)) {
                    this.GetExemptionRowChanging(this, new GetExemptionRowChangeEvent(((GetExemptionRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GetExemptionRowDeleted != null)) {
                    this.GetExemptionRowDeleted(this, new GetExemptionRowChangeEvent(((GetExemptionRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GetExemptionRowDeleting != null)) {
                    this.GetExemptionRowDeleting(this, new GetExemptionRowChangeEvent(((GetExemptionRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveGetExemptionRow(GetExemptionRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F29650ExemptionData ds = new F29650ExemptionData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "GetExemptionDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ListExemptionTypeDataTable : global::System.Data.TypedTableBase<ListExemptionTypeRow> {
            
            private global::System.Data.DataColumn columnExemptionID;
            
            private global::System.Data.DataColumn columnExemptionCode;
            
            private global::System.Data.DataColumn columnMaximum;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListExemptionTypeDataTable() {
                this.TableName = "ListExemptionType";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListExemptionTypeDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ListExemptionTypeDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ExemptionIDColumn {
                get {
                    return this.columnExemptionID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ExemptionCodeColumn {
                get {
                    return this.columnExemptionCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MaximumColumn {
                get {
                    return this.columnMaximum;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListExemptionTypeRow this[int index] {
                get {
                    return ((ListExemptionTypeRow)(this.Rows[index]));
                }
            }
            
            public event ListExemptionTypeRowChangeEventHandler ListExemptionTypeRowChanging;
            
            public event ListExemptionTypeRowChangeEventHandler ListExemptionTypeRowChanged;
            
            public event ListExemptionTypeRowChangeEventHandler ListExemptionTypeRowDeleting;
            
            public event ListExemptionTypeRowChangeEventHandler ListExemptionTypeRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddListExemptionTypeRow(ListExemptionTypeRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListExemptionTypeRow AddListExemptionTypeRow(int ExemptionID, string ExemptionCode, decimal Maximum) {
                ListExemptionTypeRow rowListExemptionTypeRow = ((ListExemptionTypeRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ExemptionID,
                        ExemptionCode,
                        Maximum};
                rowListExemptionTypeRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowListExemptionTypeRow);
                return rowListExemptionTypeRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ListExemptionTypeDataTable cln = ((ListExemptionTypeDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ListExemptionTypeDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnExemptionID = base.Columns["ExemptionID"];
                this.columnExemptionCode = base.Columns["ExemptionCode"];
                this.columnMaximum = base.Columns["Maximum"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnExemptionID = new global::System.Data.DataColumn("ExemptionID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnExemptionID);
                this.columnExemptionCode = new global::System.Data.DataColumn("ExemptionCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnExemptionCode);
                this.columnMaximum = new global::System.Data.DataColumn("Maximum", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMaximum);
                this.columnExemptionCode.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListExemptionTypeRow NewListExemptionTypeRow() {
                return ((ListExemptionTypeRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ListExemptionTypeRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ListExemptionTypeRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ListExemptionTypeRowChanged != null)) {
                    this.ListExemptionTypeRowChanged(this, new ListExemptionTypeRowChangeEvent(((ListExemptionTypeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ListExemptionTypeRowChanging != null)) {
                    this.ListExemptionTypeRowChanging(this, new ListExemptionTypeRowChangeEvent(((ListExemptionTypeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ListExemptionTypeRowDeleted != null)) {
                    this.ListExemptionTypeRowDeleted(this, new ListExemptionTypeRowChangeEvent(((ListExemptionTypeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ListExemptionTypeRowDeleting != null)) {
                    this.ListExemptionTypeRowDeleting(this, new ListExemptionTypeRowChangeEvent(((ListExemptionTypeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveListExemptionTypeRow(ListExemptionTypeRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F29650ExemptionData ds = new F29650ExemptionData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ListExemptionTypeDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SaveExemptionDataTable : global::System.Data.TypedTableBase<SaveExemptionRow> {
            
            private global::System.Data.DataColumn columnExemptionEventID;
            
            private global::System.Data.DataColumn columnEventID;
            
            private global::System.Data.DataColumn columnExemptionID;
            
            private global::System.Data.DataColumn columnExemptionCode;
            
            private global::System.Data.DataColumn columnLoss;
            
            private global::System.Data.DataColumn columnReductionOfValue;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SaveExemptionDataTable() {
                this.TableName = "SaveExemption";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SaveExemptionDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SaveExemptionDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ExemptionEventIDColumn {
                get {
                    return this.columnExemptionEventID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EventIDColumn {
                get {
                    return this.columnEventID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ExemptionIDColumn {
                get {
                    return this.columnExemptionID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ExemptionCodeColumn {
                get {
                    return this.columnExemptionCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LossColumn {
                get {
                    return this.columnLoss;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ReductionOfValueColumn {
                get {
                    return this.columnReductionOfValue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SaveExemptionRow this[int index] {
                get {
                    return ((SaveExemptionRow)(this.Rows[index]));
                }
            }
            
            public event SaveExemptionRowChangeEventHandler SaveExemptionRowChanging;
            
            public event SaveExemptionRowChangeEventHandler SaveExemptionRowChanged;
            
            public event SaveExemptionRowChangeEventHandler SaveExemptionRowDeleting;
            
            public event SaveExemptionRowChangeEventHandler SaveExemptionRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSaveExemptionRow(SaveExemptionRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SaveExemptionRow AddSaveExemptionRow(int ExemptionEventID, int EventID, int ExemptionID, string ExemptionCode, decimal Loss, decimal ReductionOfValue) {
                SaveExemptionRow rowSaveExemptionRow = ((SaveExemptionRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ExemptionEventID,
                        EventID,
                        ExemptionID,
                        ExemptionCode,
                        Loss,
                        ReductionOfValue};
                rowSaveExemptionRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowSaveExemptionRow);
                return rowSaveExemptionRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                SaveExemptionDataTable cln = ((SaveExemptionDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new SaveExemptionDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnExemptionEventID = base.Columns["ExemptionEventID"];
                this.columnEventID = base.Columns["EventID"];
                this.columnExemptionID = base.Columns["ExemptionID"];
                this.columnExemptionCode = base.Columns["ExemptionCode"];
                this.columnLoss = base.Columns["Loss"];
                this.columnReductionOfValue = base.Columns["ReductionOfValue"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnExemptionEventID = new global::System.Data.DataColumn("ExemptionEventID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnExemptionEventID);
                this.columnEventID = new global::System.Data.DataColumn("EventID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEventID);
                this.columnExemptionID = new global::System.Data.DataColumn("ExemptionID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnExemptionID);
                this.columnExemptionCode = new global::System.Data.DataColumn("ExemptionCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnExemptionCode);
                this.columnLoss = new global::System.Data.DataColumn("Loss", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLoss);
                this.columnReductionOfValue = new global::System.Data.DataColumn("ReductionOfValue", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnReductionOfValue);
                this.columnExemptionCode.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SaveExemptionRow NewSaveExemptionRow() {
                return ((SaveExemptionRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new SaveExemptionRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(SaveExemptionRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SaveExemptionRowChanged != null)) {
                    this.SaveExemptionRowChanged(this, new SaveExemptionRowChangeEvent(((SaveExemptionRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SaveExemptionRowChanging != null)) {
                    this.SaveExemptionRowChanging(this, new SaveExemptionRowChangeEvent(((SaveExemptionRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SaveExemptionRowDeleted != null)) {
                    this.SaveExemptionRowDeleted(this, new SaveExemptionRowChangeEvent(((SaveExemptionRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SaveExemptionRowDeleting != null)) {
                    this.SaveExemptionRowDeleting(this, new SaveExemptionRowChangeEvent(((SaveExemptionRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSaveExemptionRow(SaveExemptionRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F29650ExemptionData ds = new F29650ExemptionData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SaveExemptionDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class GetExemptionRow : global::System.Data.DataRow {
            
            private GetExemptionDataTable tableGetExemption;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetExemptionRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableGetExemption = ((GetExemptionDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ExemptionEventID {
                get {
                    try {
                        return ((int)(this[this.tableGetExemption.ExemptionEventIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ExemptionEventID\' in table \'GetExemption\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetExemption.ExemptionEventIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ExemptionID {
                get {
                    try {
                        return ((int)(this[this.tableGetExemption.ExemptionIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ExemptionID\' in table \'GetExemption\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetExemption.ExemptionIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ExemptionCode {
                get {
                    try {
                        return ((string)(this[this.tableGetExemption.ExemptionCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ExemptionCode\' in table \'GetExemption\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetExemption.ExemptionCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Loss {
                get {
                    try {
                        return ((decimal)(this[this.tableGetExemption.LossColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Loss\' in table \'GetExemption\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetExemption.LossColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal ReductionOfValue {
                get {
                    try {
                        return ((decimal)(this[this.tableGetExemption.ReductionOfValueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ReductionOfValue\' in table \'GetExemption\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetExemption.ReductionOfValueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsExemptionEventIDNull() {
                return this.IsNull(this.tableGetExemption.ExemptionEventIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetExemptionEventIDNull() {
                this[this.tableGetExemption.ExemptionEventIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsExemptionIDNull() {
                return this.IsNull(this.tableGetExemption.ExemptionIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetExemptionIDNull() {
                this[this.tableGetExemption.ExemptionIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsExemptionCodeNull() {
                return this.IsNull(this.tableGetExemption.ExemptionCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetExemptionCodeNull() {
                this[this.tableGetExemption.ExemptionCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLossNull() {
                return this.IsNull(this.tableGetExemption.LossColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLossNull() {
                this[this.tableGetExemption.LossColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsReductionOfValueNull() {
                return this.IsNull(this.tableGetExemption.ReductionOfValueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetReductionOfValueNull() {
                this[this.tableGetExemption.ReductionOfValueColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ListExemptionTypeRow : global::System.Data.DataRow {
            
            private ListExemptionTypeDataTable tableListExemptionType;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListExemptionTypeRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableListExemptionType = ((ListExemptionTypeDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ExemptionID {
                get {
                    try {
                        return ((int)(this[this.tableListExemptionType.ExemptionIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ExemptionID\' in table \'ListExemptionType\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListExemptionType.ExemptionIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ExemptionCode {
                get {
                    try {
                        return ((string)(this[this.tableListExemptionType.ExemptionCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ExemptionCode\' in table \'ListExemptionType\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListExemptionType.ExemptionCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Maximum {
                get {
                    try {
                        return ((decimal)(this[this.tableListExemptionType.MaximumColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Maximum\' in table \'ListExemptionType\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListExemptionType.MaximumColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsExemptionIDNull() {
                return this.IsNull(this.tableListExemptionType.ExemptionIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetExemptionIDNull() {
                this[this.tableListExemptionType.ExemptionIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsExemptionCodeNull() {
                return this.IsNull(this.tableListExemptionType.ExemptionCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetExemptionCodeNull() {
                this[this.tableListExemptionType.ExemptionCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMaximumNull() {
                return this.IsNull(this.tableListExemptionType.MaximumColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMaximumNull() {
                this[this.tableListExemptionType.MaximumColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SaveExemptionRow : global::System.Data.DataRow {
            
            private SaveExemptionDataTable tableSaveExemption;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SaveExemptionRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSaveExemption = ((SaveExemptionDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ExemptionEventID {
                get {
                    try {
                        return ((int)(this[this.tableSaveExemption.ExemptionEventIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ExemptionEventID\' in table \'SaveExemption\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSaveExemption.ExemptionEventIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int EventID {
                get {
                    try {
                        return ((int)(this[this.tableSaveExemption.EventIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EventID\' in table \'SaveExemption\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSaveExemption.EventIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ExemptionID {
                get {
                    try {
                        return ((int)(this[this.tableSaveExemption.ExemptionIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ExemptionID\' in table \'SaveExemption\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSaveExemption.ExemptionIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ExemptionCode {
                get {
                    try {
                        return ((string)(this[this.tableSaveExemption.ExemptionCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ExemptionCode\' in table \'SaveExemption\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSaveExemption.ExemptionCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Loss {
                get {
                    try {
                        return ((decimal)(this[this.tableSaveExemption.LossColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Loss\' in table \'SaveExemption\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSaveExemption.LossColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal ReductionOfValue {
                get {
                    try {
                        return ((decimal)(this[this.tableSaveExemption.ReductionOfValueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ReductionOfValue\' in table \'SaveExemption\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSaveExemption.ReductionOfValueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsExemptionEventIDNull() {
                return this.IsNull(this.tableSaveExemption.ExemptionEventIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetExemptionEventIDNull() {
                this[this.tableSaveExemption.ExemptionEventIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEventIDNull() {
                return this.IsNull(this.tableSaveExemption.EventIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEventIDNull() {
                this[this.tableSaveExemption.EventIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsExemptionIDNull() {
                return this.IsNull(this.tableSaveExemption.ExemptionIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetExemptionIDNull() {
                this[this.tableSaveExemption.ExemptionIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsExemptionCodeNull() {
                return this.IsNull(this.tableSaveExemption.ExemptionCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetExemptionCodeNull() {
                this[this.tableSaveExemption.ExemptionCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLossNull() {
                return this.IsNull(this.tableSaveExemption.LossColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLossNull() {
                this[this.tableSaveExemption.LossColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsReductionOfValueNull() {
                return this.IsNull(this.tableSaveExemption.ReductionOfValueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetReductionOfValueNull() {
                this[this.tableSaveExemption.ReductionOfValueColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class GetExemptionRowChangeEvent : global::System.EventArgs {
            
            private GetExemptionRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetExemptionRowChangeEvent(GetExemptionRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetExemptionRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ListExemptionTypeRowChangeEvent : global::System.EventArgs {
            
            private ListExemptionTypeRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListExemptionTypeRowChangeEvent(ListExemptionTypeRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListExemptionTypeRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SaveExemptionRowChangeEvent : global::System.EventArgs {
            
            private SaveExemptionRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SaveExemptionRowChangeEvent(SaveExemptionRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SaveExemptionRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591