//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.5446
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace TerraScan.BusinessEntities
{


    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("F29551ParcelSaleTrackingData")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class F29551ParcelSaleTrackingData : global::System.Data.DataSet
    {

        private DeedTypeDataTable tableDeedType;

        private StateListDataTable tableStateList;

        private AdvisoryDataTable tableAdvisory;

        private AssignmentDataTable tableAssignment;

        private StatusDataTable tableStatus;

        private ApprasiserDataTable tableApprasiser;

        private LocalQualificationDataTable tableLocalQualification;

        private OwnerDetailsDataTable tableOwnerDetails;

        private SaleDetailsDataTable tableSaleDetails;

        private ParcelDetailsDataTable tableParcelDetails;

        private ValidRecordDataTable tableValidRecord;

        private ReturnMessageDataTable tableReturnMessage;

        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public F29551ParcelSaleTrackingData()
        {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected F29551ParcelSaleTrackingData(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) :
            base(info, context, false)
        {
            if ((this.IsBinarySerialized(info, context) == true))
            {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema))
            {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["DeedType"] != null))
                {
                    base.Tables.Add(new DeedTypeDataTable(ds.Tables["DeedType"]));
                }
                if ((ds.Tables["StateList"] != null))
                {
                    base.Tables.Add(new StateListDataTable(ds.Tables["StateList"]));
                }
                if ((ds.Tables["Advisory"] != null))
                {
                    base.Tables.Add(new AdvisoryDataTable(ds.Tables["Advisory"]));
                }
                if ((ds.Tables["Assignment"] != null))
                {
                    base.Tables.Add(new AssignmentDataTable(ds.Tables["Assignment"]));
                }
                if ((ds.Tables["Status"] != null))
                {
                    base.Tables.Add(new StatusDataTable(ds.Tables["Status"]));
                }
                if ((ds.Tables["Apprasiser"] != null))
                {
                    base.Tables.Add(new ApprasiserDataTable(ds.Tables["Apprasiser"]));
                }
                if ((ds.Tables["LocalQualification"] != null))
                {
                    base.Tables.Add(new LocalQualificationDataTable(ds.Tables["LocalQualification"]));
                }
                if ((ds.Tables["OwnerDetails"] != null))
                {
                    base.Tables.Add(new OwnerDetailsDataTable(ds.Tables["OwnerDetails"]));
                }
                if ((ds.Tables["SaleDetails"] != null))
                {
                    base.Tables.Add(new SaleDetailsDataTable(ds.Tables["SaleDetails"]));
                }
                if ((ds.Tables["ParcelDetails"] != null))
                {
                    base.Tables.Add(new ParcelDetailsDataTable(ds.Tables["ParcelDetails"]));
                }
                if ((ds.Tables["ValidRecord"] != null))
                {
                    base.Tables.Add(new ValidRecordDataTable(ds.Tables["ValidRecord"]));
                }
                if ((ds.Tables["ReturnMessage"] != null))
                {
                    base.Tables.Add(new ReturnMessageDataTable(ds.Tables["ReturnMessage"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else
            {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DeedTypeDataTable DeedType
        {
            get
            {
                return this.tableDeedType;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public StateListDataTable StateList
        {
            get
            {
                return this.tableStateList;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public AdvisoryDataTable Advisory
        {
            get
            {
                return this.tableAdvisory;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public AssignmentDataTable Assignment
        {
            get
            {
                return this.tableAssignment;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public StatusDataTable Status
        {
            get
            {
                return this.tableStatus;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ApprasiserDataTable Apprasiser
        {
            get
            {
                return this.tableApprasiser;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public LocalQualificationDataTable LocalQualification
        {
            get
            {
                return this.tableLocalQualification;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public OwnerDetailsDataTable OwnerDetails
        {
            get
            {
                return this.tableOwnerDetails;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SaleDetailsDataTable SaleDetails
        {
            get
            {
                return this.tableSaleDetails;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ParcelDetailsDataTable ParcelDetails
        {
            get
            {
                return this.tableParcelDetails;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ValidRecordDataTable ValidRecord
        {
            get
            {
                return this.tableValidRecord;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ReturnMessageDataTable ReturnMessage
        {
            get
            {
                return this.tableReturnMessage;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode
        {
            get
            {
                return this._schemaSerializationMode;
            }
            set
            {
                this._schemaSerializationMode = value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables
        {
            get
            {
                return base.Tables;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations
        {
            get
            {
                return base.Relations;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet()
        {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone()
        {
            F29551ParcelSaleTrackingData cln = ((F29551ParcelSaleTrackingData)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables()
        {
            return false;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations()
        {
            return false;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader)
        {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema))
            {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["DeedType"] != null))
                {
                    base.Tables.Add(new DeedTypeDataTable(ds.Tables["DeedType"]));
                }
                if ((ds.Tables["StateList"] != null))
                {
                    base.Tables.Add(new StateListDataTable(ds.Tables["StateList"]));
                }
                if ((ds.Tables["Advisory"] != null))
                {
                    base.Tables.Add(new AdvisoryDataTable(ds.Tables["Advisory"]));
                }
                if ((ds.Tables["Assignment"] != null))
                {
                    base.Tables.Add(new AssignmentDataTable(ds.Tables["Assignment"]));
                }
                if ((ds.Tables["Status"] != null))
                {
                    base.Tables.Add(new StatusDataTable(ds.Tables["Status"]));
                }
                if ((ds.Tables["Apprasiser"] != null))
                {
                    base.Tables.Add(new ApprasiserDataTable(ds.Tables["Apprasiser"]));
                }
                if ((ds.Tables["LocalQualification"] != null))
                {
                    base.Tables.Add(new LocalQualificationDataTable(ds.Tables["LocalQualification"]));
                }
                if ((ds.Tables["OwnerDetails"] != null))
                {
                    base.Tables.Add(new OwnerDetailsDataTable(ds.Tables["OwnerDetails"]));
                }
                if ((ds.Tables["SaleDetails"] != null))
                {
                    base.Tables.Add(new SaleDetailsDataTable(ds.Tables["SaleDetails"]));
                }
                if ((ds.Tables["ParcelDetails"] != null))
                {
                    base.Tables.Add(new ParcelDetailsDataTable(ds.Tables["ParcelDetails"]));
                }
                if ((ds.Tables["ValidRecord"] != null))
                {
                    base.Tables.Add(new ValidRecordDataTable(ds.Tables["ValidRecord"]));
                }
                if ((ds.Tables["ReturnMessage"] != null))
                {
                    base.Tables.Add(new ReturnMessageDataTable(ds.Tables["ReturnMessage"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else
            {
                this.ReadXml(reader);
                this.InitVars();
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable()
        {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars()
        {
            this.InitVars(true);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable)
        {
            this.tableDeedType = ((DeedTypeDataTable)(base.Tables["DeedType"]));
            if ((initTable == true))
            {
                if ((this.tableDeedType != null))
                {
                    this.tableDeedType.InitVars();
                }
            }
            this.tableStateList = ((StateListDataTable)(base.Tables["StateList"]));
            if ((initTable == true))
            {
                if ((this.tableStateList != null))
                {
                    this.tableStateList.InitVars();
                }
            }
            this.tableAdvisory = ((AdvisoryDataTable)(base.Tables["Advisory"]));
            if ((initTable == true))
            {
                if ((this.tableAdvisory != null))
                {
                    this.tableAdvisory.InitVars();
                }
            }
            this.tableAssignment = ((AssignmentDataTable)(base.Tables["Assignment"]));
            if ((initTable == true))
            {
                if ((this.tableAssignment != null))
                {
                    this.tableAssignment.InitVars();
                }
            }
            this.tableStatus = ((StatusDataTable)(base.Tables["Status"]));
            if ((initTable == true))
            {
                if ((this.tableStatus != null))
                {
                    this.tableStatus.InitVars();
                }
            }
            this.tableApprasiser = ((ApprasiserDataTable)(base.Tables["Apprasiser"]));
            if ((initTable == true))
            {
                if ((this.tableApprasiser != null))
                {
                    this.tableApprasiser.InitVars();
                }
            }
            this.tableLocalQualification = ((LocalQualificationDataTable)(base.Tables["LocalQualification"]));
            if ((initTable == true))
            {
                if ((this.tableLocalQualification != null))
                {
                    this.tableLocalQualification.InitVars();
                }
            }
            this.tableOwnerDetails = ((OwnerDetailsDataTable)(base.Tables["OwnerDetails"]));
            if ((initTable == true))
            {
                if ((this.tableOwnerDetails != null))
                {
                    this.tableOwnerDetails.InitVars();
                }
            }
            this.tableSaleDetails = ((SaleDetailsDataTable)(base.Tables["SaleDetails"]));
            if ((initTable == true))
            {
                if ((this.tableSaleDetails != null))
                {
                    this.tableSaleDetails.InitVars();
                }
            }
            this.tableParcelDetails = ((ParcelDetailsDataTable)(base.Tables["ParcelDetails"]));
            if ((initTable == true))
            {
                if ((this.tableParcelDetails != null))
                {
                    this.tableParcelDetails.InitVars();
                }
            }
            this.tableValidRecord = ((ValidRecordDataTable)(base.Tables["ValidRecord"]));
            if ((initTable == true))
            {
                if ((this.tableValidRecord != null))
                {
                    this.tableValidRecord.InitVars();
                }
            }
            this.tableReturnMessage = ((ReturnMessageDataTable)(base.Tables["ReturnMessage"]));
            if ((initTable == true))
            {
                if ((this.tableReturnMessage != null))
                {
                    this.tableReturnMessage.InitVars();
                }
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass()
        {
            this.DataSetName = "F29551ParcelSaleTrackingData";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/F29551ParcelSaleTrackingData.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableDeedType = new DeedTypeDataTable();
            base.Tables.Add(this.tableDeedType);
            this.tableStateList = new StateListDataTable();
            base.Tables.Add(this.tableStateList);
            this.tableAdvisory = new AdvisoryDataTable();
            base.Tables.Add(this.tableAdvisory);
            this.tableAssignment = new AssignmentDataTable();
            base.Tables.Add(this.tableAssignment);
            this.tableStatus = new StatusDataTable();
            base.Tables.Add(this.tableStatus);
            this.tableApprasiser = new ApprasiserDataTable();
            base.Tables.Add(this.tableApprasiser);
            this.tableLocalQualification = new LocalQualificationDataTable();
            base.Tables.Add(this.tableLocalQualification);
            this.tableOwnerDetails = new OwnerDetailsDataTable();
            base.Tables.Add(this.tableOwnerDetails);
            this.tableSaleDetails = new SaleDetailsDataTable();
            base.Tables.Add(this.tableSaleDetails);
            this.tableParcelDetails = new ParcelDetailsDataTable();
            base.Tables.Add(this.tableParcelDetails);
            this.tableValidRecord = new ValidRecordDataTable();
            base.Tables.Add(this.tableValidRecord);
            this.tableReturnMessage = new ReturnMessageDataTable();
            base.Tables.Add(this.tableReturnMessage);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeDeedType()
        {
            return false;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeStateList()
        {
            return false;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeAdvisory()
        {
            return false;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeAssignment()
        {
            return false;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeStatus()
        {
            return false;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeApprasiser()
        {
            return false;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeLocalQualification()
        {
            return false;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeOwnerDetails()
        {
            return false;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSaleDetails()
        {
            return false;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeParcelDetails()
        {
            return false;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeValidRecord()
        {
            return false;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeReturnMessage()
        {
            return false;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e)
        {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove))
            {
                this.InitVars();
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs)
        {
            F29551ParcelSaleTrackingData ds = new F29551ParcelSaleTrackingData();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace))
            {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try
                {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); )
                    {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length))
                        {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length)
                                        && (s1.ReadByte() == s2.ReadByte())); )
                            {
                                ;
                            }
                            if ((s1.Position == s1.Length))
                            {
                                return type;
                            }
                        }
                    }
                }
                finally
                {
                    if ((s1 != null))
                    {
                        s1.Close();
                    }
                    if ((s2 != null))
                    {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }

        public delegate void DeedTypeRowChangeEventHandler(object sender, DeedTypeRowChangeEvent e);

        public delegate void StateListRowChangeEventHandler(object sender, StateListRowChangeEvent e);

        public delegate void AdvisoryRowChangeEventHandler(object sender, AdvisoryRowChangeEvent e);

        public delegate void AssignmentRowChangeEventHandler(object sender, AssignmentRowChangeEvent e);

        public delegate void StatusRowChangeEventHandler(object sender, StatusRowChangeEvent e);

        public delegate void ApprasiserRowChangeEventHandler(object sender, ApprasiserRowChangeEvent e);

        public delegate void LocalQualificationRowChangeEventHandler(object sender, LocalQualificationRowChangeEvent e);

        public delegate void OwnerDetailsRowChangeEventHandler(object sender, OwnerDetailsRowChangeEvent e);

        public delegate void SaleDetailsRowChangeEventHandler(object sender, SaleDetailsRowChangeEvent e);

        public delegate void ParcelDetailsRowChangeEventHandler(object sender, ParcelDetailsRowChangeEvent e);

        public delegate void ValidRecordRowChangeEventHandler(object sender, ValidRecordRowChangeEvent e);

        public delegate void ReturnMessageRowChangeEventHandler(object sender, ReturnMessageRowChangeEvent e);

        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class DeedTypeDataTable : global::System.Data.TypedTableBase<DeedTypeRow>
        {

            private global::System.Data.DataColumn columnDeedTypeID;

            private global::System.Data.DataColumn columnDeedType;

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DeedTypeDataTable()
            {
                this.TableName = "DeedType";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DeedTypeDataTable(global::System.Data.DataTable table)
            {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive))
                {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString()))
                {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace))
                {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected DeedTypeDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) :
                base(info, context)
            {
                this.InitVars();
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeedTypeIDColumn
            {
                get
                {
                    return this.columnDeedTypeID;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeedTypeColumn
            {
                get
                {
                    return this.columnDeedType;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count
            {
                get
                {
                    return this.Rows.Count;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DeedTypeRow this[int index]
            {
                get
                {
                    return ((DeedTypeRow)(this.Rows[index]));
                }
            }

            public event DeedTypeRowChangeEventHandler DeedTypeRowChanging;

            public event DeedTypeRowChangeEventHandler DeedTypeRowChanged;

            public event DeedTypeRowChangeEventHandler DeedTypeRowDeleting;

            public event DeedTypeRowChangeEventHandler DeedTypeRowDeleted;

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddDeedTypeRow(DeedTypeRow row)
            {
                this.Rows.Add(row);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DeedTypeRow AddDeedTypeRow(int DeedTypeID, string DeedType)
            {
                DeedTypeRow rowDeedTypeRow = ((DeedTypeRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        DeedTypeID,
                        DeedType};
                rowDeedTypeRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowDeedTypeRow);
                return rowDeedTypeRow;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone()
            {
                DeedTypeDataTable cln = ((DeedTypeDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance()
            {
                return new DeedTypeDataTable();
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars()
            {
                this.columnDeedTypeID = base.Columns["DeedTypeID"];
                this.columnDeedType = base.Columns["DeedType"];
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass()
            {
                this.columnDeedTypeID = new global::System.Data.DataColumn("DeedTypeID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeedTypeID);
                this.columnDeedType = new global::System.Data.DataColumn("DeedType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeedType);
                this.columnDeedType.MaxLength = 100;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DeedTypeRow NewDeedTypeRow()
            {
                return ((DeedTypeRow)(this.NewRow()));
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder)
            {
                return new DeedTypeRow(builder);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType()
            {
                return typeof(DeedTypeRow);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if ((this.DeedTypeRowChanged != null))
                {
                    this.DeedTypeRowChanged(this, new DeedTypeRowChangeEvent(((DeedTypeRow)(e.Row)), e.Action));
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if ((this.DeedTypeRowChanging != null))
                {
                    this.DeedTypeRowChanging(this, new DeedTypeRowChangeEvent(((DeedTypeRow)(e.Row)), e.Action));
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if ((this.DeedTypeRowDeleted != null))
                {
                    this.DeedTypeRowDeleted(this, new DeedTypeRowChangeEvent(((DeedTypeRow)(e.Row)), e.Action));
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if ((this.DeedTypeRowDeleting != null))
                {
                    this.DeedTypeRowDeleting(this, new DeedTypeRowChangeEvent(((DeedTypeRow)(e.Row)), e.Action));
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveDeedTypeRow(DeedTypeRow row)
            {
                this.Rows.Remove(row);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs)
            {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F29551ParcelSaleTrackingData ds = new F29551ParcelSaleTrackingData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "DeedTypeDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace))
                {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try
                    {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); )
                        {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length))
                            {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length)
                                            && (s1.ReadByte() == s2.ReadByte())); )
                                {
                                    ;
                                }
                                if ((s1.Position == s1.Length))
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if ((s1 != null))
                        {
                            s1.Close();
                        }
                        if ((s2 != null))
                        {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }

        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class StateListDataTable : global::System.Data.TypedTableBase<StateListRow>
        {

            private global::System.Data.DataColumn columnStateQualificationID;

            private global::System.Data.DataColumn columnStateQualification;

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StateListDataTable()
            {
                this.TableName = "StateList";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal StateListDataTable(global::System.Data.DataTable table)
            {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive))
                {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString()))
                {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace))
                {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected StateListDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) :
                base(info, context)
            {
                this.InitVars();
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StateQualificationIDColumn
            {
                get
                {
                    return this.columnStateQualificationID;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StateQualificationColumn
            {
                get
                {
                    return this.columnStateQualification;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count
            {
                get
                {
                    return this.Rows.Count;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StateListRow this[int index]
            {
                get
                {
                    return ((StateListRow)(this.Rows[index]));
                }
            }

            public event StateListRowChangeEventHandler StateListRowChanging;

            public event StateListRowChangeEventHandler StateListRowChanged;

            public event StateListRowChangeEventHandler StateListRowDeleting;

            public event StateListRowChangeEventHandler StateListRowDeleted;

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddStateListRow(StateListRow row)
            {
                this.Rows.Add(row);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StateListRow AddStateListRow(int StateQualificationID, string StateQualification)
            {
                StateListRow rowStateListRow = ((StateListRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        StateQualificationID,
                        StateQualification};
                rowStateListRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowStateListRow);
                return rowStateListRow;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone()
            {
                StateListDataTable cln = ((StateListDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance()
            {
                return new StateListDataTable();
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars()
            {
                this.columnStateQualificationID = base.Columns["StateQualificationID"];
                this.columnStateQualification = base.Columns["StateQualification"];
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass()
            {
                this.columnStateQualificationID = new global::System.Data.DataColumn("StateQualificationID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStateQualificationID);
                this.columnStateQualification = new global::System.Data.DataColumn("StateQualification", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStateQualification);
                this.columnStateQualification.MaxLength = 100;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StateListRow NewStateListRow()
            {
                return ((StateListRow)(this.NewRow()));
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder)
            {
                return new StateListRow(builder);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType()
            {
                return typeof(StateListRow);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if ((this.StateListRowChanged != null))
                {
                    this.StateListRowChanged(this, new StateListRowChangeEvent(((StateListRow)(e.Row)), e.Action));
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if ((this.StateListRowChanging != null))
                {
                    this.StateListRowChanging(this, new StateListRowChangeEvent(((StateListRow)(e.Row)), e.Action));
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if ((this.StateListRowDeleted != null))
                {
                    this.StateListRowDeleted(this, new StateListRowChangeEvent(((StateListRow)(e.Row)), e.Action));
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if ((this.StateListRowDeleting != null))
                {
                    this.StateListRowDeleting(this, new StateListRowChangeEvent(((StateListRow)(e.Row)), e.Action));
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveStateListRow(StateListRow row)
            {
                this.Rows.Remove(row);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs)
            {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F29551ParcelSaleTrackingData ds = new F29551ParcelSaleTrackingData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "StateListDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace))
                {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try
                    {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); )
                        {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length))
                            {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length)
                                            && (s1.ReadByte() == s2.ReadByte())); )
                                {
                                    ;
                                }
                                if ((s1.Position == s1.Length))
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if ((s1 != null))
                        {
                            s1.Close();
                        }
                        if ((s2 != null))
                        {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }

        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class AdvisoryDataTable : global::System.Data.TypedTableBase<AdvisoryRow>
        {

            private global::System.Data.DataColumn columnAdvisoryID;

            private global::System.Data.DataColumn columnAdvisory;

            private global::System.Data.DataColumn columnAdvisoryRGB;

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AdvisoryDataTable()
            {
                this.TableName = "Advisory";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal AdvisoryDataTable(global::System.Data.DataTable table)
            {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive))
                {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString()))
                {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace))
                {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected AdvisoryDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) :
                base(info, context)
            {
                this.InitVars();
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AdvisoryIDColumn
            {
                get
                {
                    return this.columnAdvisoryID;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AdvisoryColumn
            {
                get
                {
                    return this.columnAdvisory;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AdvisoryRGBColumn
            {
                get
                {
                    return this.columnAdvisoryRGB;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count
            {
                get
                {
                    return this.Rows.Count;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AdvisoryRow this[int index]
            {
                get
                {
                    return ((AdvisoryRow)(this.Rows[index]));
                }
            }

            public event AdvisoryRowChangeEventHandler AdvisoryRowChanging;

            public event AdvisoryRowChangeEventHandler AdvisoryRowChanged;

            public event AdvisoryRowChangeEventHandler AdvisoryRowDeleting;

            public event AdvisoryRowChangeEventHandler AdvisoryRowDeleted;

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddAdvisoryRow(AdvisoryRow row)
            {
                this.Rows.Add(row);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AdvisoryRow AddAdvisoryRow(int AdvisoryID, string Advisory, string AdvisoryRGB)
            {
                AdvisoryRow rowAdvisoryRow = ((AdvisoryRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        AdvisoryID,
                        Advisory,
                        AdvisoryRGB};
                rowAdvisoryRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowAdvisoryRow);
                return rowAdvisoryRow;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone()
            {
                AdvisoryDataTable cln = ((AdvisoryDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance()
            {
                return new AdvisoryDataTable();
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars()
            {
                this.columnAdvisoryID = base.Columns["AdvisoryID"];
                this.columnAdvisory = base.Columns["Advisory"];
                this.columnAdvisoryRGB = base.Columns["AdvisoryRGB"];
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass()
            {
                this.columnAdvisoryID = new global::System.Data.DataColumn("AdvisoryID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAdvisoryID);
                this.columnAdvisory = new global::System.Data.DataColumn("Advisory", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAdvisory);
                this.columnAdvisoryRGB = new global::System.Data.DataColumn("AdvisoryRGB", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAdvisoryRGB);
                this.columnAdvisory.MaxLength = 100;
                this.columnAdvisoryRGB.MaxLength = 50;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AdvisoryRow NewAdvisoryRow()
            {
                return ((AdvisoryRow)(this.NewRow()));
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder)
            {
                return new AdvisoryRow(builder);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType()
            {
                return typeof(AdvisoryRow);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if ((this.AdvisoryRowChanged != null))
                {
                    this.AdvisoryRowChanged(this, new AdvisoryRowChangeEvent(((AdvisoryRow)(e.Row)), e.Action));
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if ((this.AdvisoryRowChanging != null))
                {
                    this.AdvisoryRowChanging(this, new AdvisoryRowChangeEvent(((AdvisoryRow)(e.Row)), e.Action));
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if ((this.AdvisoryRowDeleted != null))
                {
                    this.AdvisoryRowDeleted(this, new AdvisoryRowChangeEvent(((AdvisoryRow)(e.Row)), e.Action));
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if ((this.AdvisoryRowDeleting != null))
                {
                    this.AdvisoryRowDeleting(this, new AdvisoryRowChangeEvent(((AdvisoryRow)(e.Row)), e.Action));
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveAdvisoryRow(AdvisoryRow row)
            {
                this.Rows.Remove(row);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs)
            {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F29551ParcelSaleTrackingData ds = new F29551ParcelSaleTrackingData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "AdvisoryDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace))
                {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try
                    {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); )
                        {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length))
                            {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length)
                                            && (s1.ReadByte() == s2.ReadByte())); )
                                {
                                    ;
                                }
                                if ((s1.Position == s1.Length))
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if ((s1 != null))
                        {
                            s1.Close();
                        }
                        if ((s2 != null))
                        {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }

        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class AssignmentDataTable : global::System.Data.TypedTableBase<AssignmentRow>
        {

            private global::System.Data.DataColumn columnAssignmentID;

            private global::System.Data.DataColumn columnAssignment;

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AssignmentDataTable()
            {
                this.TableName = "Assignment";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal AssignmentDataTable(global::System.Data.DataTable table)
            {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive))
                {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString()))
                {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace))
                {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected AssignmentDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) :
                base(info, context)
            {
                this.InitVars();
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AssignmentIDColumn
            {
                get
                {
                    return this.columnAssignmentID;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AssignmentColumn
            {
                get
                {
                    return this.columnAssignment;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count
            {
                get
                {
                    return this.Rows.Count;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AssignmentRow this[int index]
            {
                get
                {
                    return ((AssignmentRow)(this.Rows[index]));
                }
            }

            public event AssignmentRowChangeEventHandler AssignmentRowChanging;

            public event AssignmentRowChangeEventHandler AssignmentRowChanged;

            public event AssignmentRowChangeEventHandler AssignmentRowDeleting;

            public event AssignmentRowChangeEventHandler AssignmentRowDeleted;

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddAssignmentRow(AssignmentRow row)
            {
                this.Rows.Add(row);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AssignmentRow AddAssignmentRow(int AssignmentID, string Assignment)
            {
                AssignmentRow rowAssignmentRow = ((AssignmentRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        AssignmentID,
                        Assignment};
                rowAssignmentRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowAssignmentRow);
                return rowAssignmentRow;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone()
            {
                AssignmentDataTable cln = ((AssignmentDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance()
            {
                return new AssignmentDataTable();
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars()
            {
                this.columnAssignmentID = base.Columns["AssignmentID"];
                this.columnAssignment = base.Columns["Assignment"];
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass()
            {
                this.columnAssignmentID = new global::System.Data.DataColumn("AssignmentID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAssignmentID);
                this.columnAssignment = new global::System.Data.DataColumn("Assignment", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAssignment);
                this.columnAssignment.MaxLength = 100;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AssignmentRow NewAssignmentRow()
            {
                return ((AssignmentRow)(this.NewRow()));
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder)
            {
                return new AssignmentRow(builder);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType()
            {
                return typeof(AssignmentRow);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if ((this.AssignmentRowChanged != null))
                {
                    this.AssignmentRowChanged(this, new AssignmentRowChangeEvent(((AssignmentRow)(e.Row)), e.Action));
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if ((this.AssignmentRowChanging != null))
                {
                    this.AssignmentRowChanging(this, new AssignmentRowChangeEvent(((AssignmentRow)(e.Row)), e.Action));
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if ((this.AssignmentRowDeleted != null))
                {
                    this.AssignmentRowDeleted(this, new AssignmentRowChangeEvent(((AssignmentRow)(e.Row)), e.Action));
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if ((this.AssignmentRowDeleting != null))
                {
                    this.AssignmentRowDeleting(this, new AssignmentRowChangeEvent(((AssignmentRow)(e.Row)), e.Action));
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveAssignmentRow(AssignmentRow row)
            {
                this.Rows.Remove(row);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs)
            {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F29551ParcelSaleTrackingData ds = new F29551ParcelSaleTrackingData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "AssignmentDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace))
                {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try
                    {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); )
                        {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length))
                            {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length)
                                            && (s1.ReadByte() == s2.ReadByte())); )
                                {
                                    ;
                                }
                                if ((s1.Position == s1.Length))
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if ((s1 != null))
                        {
                            s1.Close();
                        }
                        if ((s2 != null))
                        {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }

        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class StatusDataTable : global::System.Data.TypedTableBase<StatusRow>
        {

            private global::System.Data.DataColumn columnStatusID;

            private global::System.Data.DataColumn columnStatus;

            private global::System.Data.DataColumn columnStatusRGB;

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StatusDataTable()
            {
                this.TableName = "Status";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal StatusDataTable(global::System.Data.DataTable table)
            {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive))
                {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString()))
                {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace))
                {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected StatusDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) :
                base(info, context)
            {
                this.InitVars();
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StatusIDColumn
            {
                get
                {
                    return this.columnStatusID;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StatusColumn
            {
                get
                {
                    return this.columnStatus;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StatusRGBColumn
            {
                get
                {
                    return this.columnStatusRGB;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count
            {
                get
                {
                    return this.Rows.Count;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StatusRow this[int index]
            {
                get
                {
                    return ((StatusRow)(this.Rows[index]));
                }
            }

            public event StatusRowChangeEventHandler StatusRowChanging;

            public event StatusRowChangeEventHandler StatusRowChanged;

            public event StatusRowChangeEventHandler StatusRowDeleting;

            public event StatusRowChangeEventHandler StatusRowDeleted;

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddStatusRow(StatusRow row)
            {
                this.Rows.Add(row);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StatusRow AddStatusRow(int StatusID, string Status, string StatusRGB)
            {
                StatusRow rowStatusRow = ((StatusRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        StatusID,
                        Status,
                        StatusRGB};
                rowStatusRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowStatusRow);
                return rowStatusRow;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone()
            {
                StatusDataTable cln = ((StatusDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance()
            {
                return new StatusDataTable();
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars()
            {
                this.columnStatusID = base.Columns["StatusID"];
                this.columnStatus = base.Columns["Status"];
                this.columnStatusRGB = base.Columns["StatusRGB"];
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass()
            {
                this.columnStatusID = new global::System.Data.DataColumn("StatusID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStatusID);
                this.columnStatus = new global::System.Data.DataColumn("Status", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStatus);
                this.columnStatusRGB = new global::System.Data.DataColumn("StatusRGB", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStatusRGB);
                this.columnStatus.MaxLength = 100;
                this.columnStatusRGB.MaxLength = 50;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StatusRow NewStatusRow()
            {
                return ((StatusRow)(this.NewRow()));
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder)
            {
                return new StatusRow(builder);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType()
            {
                return typeof(StatusRow);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if ((this.StatusRowChanged != null))
                {
                    this.StatusRowChanged(this, new StatusRowChangeEvent(((StatusRow)(e.Row)), e.Action));
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if ((this.StatusRowChanging != null))
                {
                    this.StatusRowChanging(this, new StatusRowChangeEvent(((StatusRow)(e.Row)), e.Action));
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if ((this.StatusRowDeleted != null))
                {
                    this.StatusRowDeleted(this, new StatusRowChangeEvent(((StatusRow)(e.Row)), e.Action));
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if ((this.StatusRowDeleting != null))
                {
                    this.StatusRowDeleting(this, new StatusRowChangeEvent(((StatusRow)(e.Row)), e.Action));
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveStatusRow(StatusRow row)
            {
                this.Rows.Remove(row);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs)
            {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F29551ParcelSaleTrackingData ds = new F29551ParcelSaleTrackingData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "StatusDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace))
                {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try
                    {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); )
                        {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length))
                            {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length)
                                            && (s1.ReadByte() == s2.ReadByte())); )
                                {
                                    ;
                                }
                                if ((s1.Position == s1.Length))
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if ((s1 != null))
                        {
                            s1.Close();
                        }
                        if ((s2 != null))
                        {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }

        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ApprasiserDataTable : global::System.Data.TypedTableBase<ApprasiserRow>
        {

            private global::System.Data.DataColumn columnAppraiserID;

            private global::System.Data.DataColumn columnAppraiser;

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ApprasiserDataTable()
            {
                this.TableName = "Apprasiser";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ApprasiserDataTable(global::System.Data.DataTable table)
            {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive))
                {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString()))
                {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace))
                {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ApprasiserDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) :
                base(info, context)
            {
                this.InitVars();
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AppraiserIDColumn
            {
                get
                {
                    return this.columnAppraiserID;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AppraiserColumn
            {
                get
                {
                    return this.columnAppraiser;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count
            {
                get
                {
                    return this.Rows.Count;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ApprasiserRow this[int index]
            {
                get
                {
                    return ((ApprasiserRow)(this.Rows[index]));
                }
            }

            public event ApprasiserRowChangeEventHandler ApprasiserRowChanging;

            public event ApprasiserRowChangeEventHandler ApprasiserRowChanged;

            public event ApprasiserRowChangeEventHandler ApprasiserRowDeleting;

            public event ApprasiserRowChangeEventHandler ApprasiserRowDeleted;

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddApprasiserRow(ApprasiserRow row)
            {
                this.Rows.Add(row);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ApprasiserRow AddApprasiserRow(int AppraiserID, string Appraiser)
            {
                ApprasiserRow rowApprasiserRow = ((ApprasiserRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        AppraiserID,
                        Appraiser};
                rowApprasiserRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowApprasiserRow);
                return rowApprasiserRow;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone()
            {
                ApprasiserDataTable cln = ((ApprasiserDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance()
            {
                return new ApprasiserDataTable();
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars()
            {
                this.columnAppraiserID = base.Columns["AppraiserID"];
                this.columnAppraiser = base.Columns["Appraiser"];
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass()
            {
                this.columnAppraiserID = new global::System.Data.DataColumn("AppraiserID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAppraiserID);
                this.columnAppraiser = new global::System.Data.DataColumn("Appraiser", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAppraiser);
                this.columnAppraiser.MaxLength = 100;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ApprasiserRow NewApprasiserRow()
            {
                return ((ApprasiserRow)(this.NewRow()));
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder)
            {
                return new ApprasiserRow(builder);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType()
            {
                return typeof(ApprasiserRow);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if ((this.ApprasiserRowChanged != null))
                {
                    this.ApprasiserRowChanged(this, new ApprasiserRowChangeEvent(((ApprasiserRow)(e.Row)), e.Action));
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if ((this.ApprasiserRowChanging != null))
                {
                    this.ApprasiserRowChanging(this, new ApprasiserRowChangeEvent(((ApprasiserRow)(e.Row)), e.Action));
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if ((this.ApprasiserRowDeleted != null))
                {
                    this.ApprasiserRowDeleted(this, new ApprasiserRowChangeEvent(((ApprasiserRow)(e.Row)), e.Action));
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if ((this.ApprasiserRowDeleting != null))
                {
                    this.ApprasiserRowDeleting(this, new ApprasiserRowChangeEvent(((ApprasiserRow)(e.Row)), e.Action));
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveApprasiserRow(ApprasiserRow row)
            {
                this.Rows.Remove(row);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs)
            {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F29551ParcelSaleTrackingData ds = new F29551ParcelSaleTrackingData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ApprasiserDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace))
                {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try
                    {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); )
                        {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length))
                            {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length)
                                            && (s1.ReadByte() == s2.ReadByte())); )
                                {
                                    ;
                                }
                                if ((s1.Position == s1.Length))
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if ((s1 != null))
                        {
                            s1.Close();
                        }
                        if ((s2 != null))
                        {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }

        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class LocalQualificationDataTable : global::System.Data.TypedTableBase<LocalQualificationRow>
        {

            private global::System.Data.DataColumn columnLocalQualificationID;

            private global::System.Data.DataColumn columnLocalQualification;

            private global::System.Data.DataColumn columnLocalQualificationRGB;

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LocalQualificationDataTable()
            {
                this.TableName = "LocalQualification";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LocalQualificationDataTable(global::System.Data.DataTable table)
            {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive))
                {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString()))
                {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace))
                {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected LocalQualificationDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) :
                base(info, context)
            {
                this.InitVars();
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LocalQualificationIDColumn
            {
                get
                {
                    return this.columnLocalQualificationID;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LocalQualificationColumn
            {
                get
                {
                    return this.columnLocalQualification;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LocalQualificationRGBColumn
            {
                get
                {
                    return this.columnLocalQualificationRGB;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count
            {
                get
                {
                    return this.Rows.Count;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LocalQualificationRow this[int index]
            {
                get
                {
                    return ((LocalQualificationRow)(this.Rows[index]));
                }
            }

            public event LocalQualificationRowChangeEventHandler LocalQualificationRowChanging;

            public event LocalQualificationRowChangeEventHandler LocalQualificationRowChanged;

            public event LocalQualificationRowChangeEventHandler LocalQualificationRowDeleting;

            public event LocalQualificationRowChangeEventHandler LocalQualificationRowDeleted;

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddLocalQualificationRow(LocalQualificationRow row)
            {
                this.Rows.Add(row);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LocalQualificationRow AddLocalQualificationRow(int LocalQualificationID, string LocalQualification, string LocalQualificationRGB)
            {
                LocalQualificationRow rowLocalQualificationRow = ((LocalQualificationRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        LocalQualificationID,
                        LocalQualification,
                        LocalQualificationRGB};
                rowLocalQualificationRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowLocalQualificationRow);
                return rowLocalQualificationRow;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone()
            {
                LocalQualificationDataTable cln = ((LocalQualificationDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance()
            {
                return new LocalQualificationDataTable();
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars()
            {
                this.columnLocalQualificationID = base.Columns["LocalQualificationID"];
                this.columnLocalQualification = base.Columns["LocalQualification"];
                this.columnLocalQualificationRGB = base.Columns["LocalQualificationRGB"];
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass()
            {
                this.columnLocalQualificationID = new global::System.Data.DataColumn("LocalQualificationID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLocalQualificationID);
                this.columnLocalQualification = new global::System.Data.DataColumn("LocalQualification", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLocalQualification);
                this.columnLocalQualificationRGB = new global::System.Data.DataColumn("LocalQualificationRGB", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLocalQualificationRGB);
                this.columnLocalQualification.MaxLength = 100;
                this.columnLocalQualificationRGB.MaxLength = 50;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LocalQualificationRow NewLocalQualificationRow()
            {
                return ((LocalQualificationRow)(this.NewRow()));
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder)
            {
                return new LocalQualificationRow(builder);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType()
            {
                return typeof(LocalQualificationRow);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if ((this.LocalQualificationRowChanged != null))
                {
                    this.LocalQualificationRowChanged(this, new LocalQualificationRowChangeEvent(((LocalQualificationRow)(e.Row)), e.Action));
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if ((this.LocalQualificationRowChanging != null))
                {
                    this.LocalQualificationRowChanging(this, new LocalQualificationRowChangeEvent(((LocalQualificationRow)(e.Row)), e.Action));
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if ((this.LocalQualificationRowDeleted != null))
                {
                    this.LocalQualificationRowDeleted(this, new LocalQualificationRowChangeEvent(((LocalQualificationRow)(e.Row)), e.Action));
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if ((this.LocalQualificationRowDeleting != null))
                {
                    this.LocalQualificationRowDeleting(this, new LocalQualificationRowChangeEvent(((LocalQualificationRow)(e.Row)), e.Action));
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveLocalQualificationRow(LocalQualificationRow row)
            {
                this.Rows.Remove(row);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs)
            {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F29551ParcelSaleTrackingData ds = new F29551ParcelSaleTrackingData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "LocalQualificationDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace))
                {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try
                    {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); )
                        {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length))
                            {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length)
                                            && (s1.ReadByte() == s2.ReadByte())); )
                                {
                                    ;
                                }
                                if ((s1.Position == s1.Length))
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if ((s1 != null))
                        {
                            s1.Close();
                        }
                        if ((s2 != null))
                        {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }

        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class OwnerDetailsDataTable : global::System.Data.TypedTableBase<OwnerDetailsRow>
        {

            private global::System.Data.DataColumn columnOwnerID;

            private global::System.Data.DataColumn columnOwnerName;

            private global::System.Data.DataColumn columnIsBuyer;

            private global::System.Data.DataColumn columnOwnerAddress;

            private global::System.Data.DataColumn columnOwnerLocation;

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OwnerDetailsDataTable()
            {
                this.TableName = "OwnerDetails";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal OwnerDetailsDataTable(global::System.Data.DataTable table)
            {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive))
                {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString()))
                {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace))
                {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected OwnerDetailsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) :
                base(info, context)
            {
                this.InitVars();
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OwnerIDColumn
            {
                get
                {
                    return this.columnOwnerID;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OwnerNameColumn
            {
                get
                {
                    return this.columnOwnerName;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsBuyerColumn
            {
                get
                {
                    return this.columnIsBuyer;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OwnerAddressColumn
            {
                get
                {
                    return this.columnOwnerAddress;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OwnerLocationColumn
            {
                get
                {
                    return this.columnOwnerLocation;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count
            {
                get
                {
                    return this.Rows.Count;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OwnerDetailsRow this[int index]
            {
                get
                {
                    return ((OwnerDetailsRow)(this.Rows[index]));
                }
            }

            public event OwnerDetailsRowChangeEventHandler OwnerDetailsRowChanging;

            public event OwnerDetailsRowChangeEventHandler OwnerDetailsRowChanged;

            public event OwnerDetailsRowChangeEventHandler OwnerDetailsRowDeleting;

            public event OwnerDetailsRowChangeEventHandler OwnerDetailsRowDeleted;

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddOwnerDetailsRow(OwnerDetailsRow row)
            {
                this.Rows.Add(row);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OwnerDetailsRow AddOwnerDetailsRow(int OwnerID, string OwnerName, int IsBuyer, string OwnerAddress, string OwnerLocation)
            {
                OwnerDetailsRow rowOwnerDetailsRow = ((OwnerDetailsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        OwnerID,
                        OwnerName,
                        IsBuyer,
                        OwnerAddress,
                        OwnerLocation};
                rowOwnerDetailsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowOwnerDetailsRow);
                return rowOwnerDetailsRow;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone()
            {
                OwnerDetailsDataTable cln = ((OwnerDetailsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance()
            {
                return new OwnerDetailsDataTable();
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars()
            {
                this.columnOwnerID = base.Columns["OwnerID"];
                this.columnOwnerName = base.Columns["OwnerName"];
                this.columnIsBuyer = base.Columns["IsBuyer"];
                this.columnOwnerAddress = base.Columns["OwnerAddress"];
                this.columnOwnerLocation = base.Columns["OwnerLocation"];
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass()
            {
                this.columnOwnerID = new global::System.Data.DataColumn("OwnerID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOwnerID);
                this.columnOwnerName = new global::System.Data.DataColumn("OwnerName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOwnerName);
                this.columnIsBuyer = new global::System.Data.DataColumn("IsBuyer", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsBuyer);
                this.columnOwnerAddress = new global::System.Data.DataColumn("OwnerAddress", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOwnerAddress);
                this.columnOwnerLocation = new global::System.Data.DataColumn("OwnerLocation", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOwnerLocation);
                this.columnOwnerName.MaxLength = 150;
                this.columnOwnerAddress.MaxLength = 150;
                this.columnOwnerLocation.MaxLength = 150;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OwnerDetailsRow NewOwnerDetailsRow()
            {
                return ((OwnerDetailsRow)(this.NewRow()));
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder)
            {
                return new OwnerDetailsRow(builder);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType()
            {
                return typeof(OwnerDetailsRow);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if ((this.OwnerDetailsRowChanged != null))
                {
                    this.OwnerDetailsRowChanged(this, new OwnerDetailsRowChangeEvent(((OwnerDetailsRow)(e.Row)), e.Action));
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if ((this.OwnerDetailsRowChanging != null))
                {
                    this.OwnerDetailsRowChanging(this, new OwnerDetailsRowChangeEvent(((OwnerDetailsRow)(e.Row)), e.Action));
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if ((this.OwnerDetailsRowDeleted != null))
                {
                    this.OwnerDetailsRowDeleted(this, new OwnerDetailsRowChangeEvent(((OwnerDetailsRow)(e.Row)), e.Action));
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if ((this.OwnerDetailsRowDeleting != null))
                {
                    this.OwnerDetailsRowDeleting(this, new OwnerDetailsRowChangeEvent(((OwnerDetailsRow)(e.Row)), e.Action));
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveOwnerDetailsRow(OwnerDetailsRow row)
            {
                this.Rows.Remove(row);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs)
            {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F29551ParcelSaleTrackingData ds = new F29551ParcelSaleTrackingData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "OwnerDetailsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace))
                {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try
                    {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); )
                        {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length))
                            {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length)
                                            && (s1.ReadByte() == s2.ReadByte())); )
                                {
                                    ;
                                }
                                if ((s1.Position == s1.Length))
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if ((s1 != null))
                        {
                            s1.Close();
                        }
                        if ((s2 != null))
                        {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }

        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SaleDetailsDataTable : global::System.Data.TypedTableBase<SaleDetailsRow>
        {

            private global::System.Data.DataColumn columnParcelID;

            private global::System.Data.DataColumn columnSaleID;

            private global::System.Data.DataColumn columnOriginalSaleprice;

            private global::System.Data.DataColumn columnDeedType;

            private global::System.Data.DataColumn columnRecordingNumber;

            private global::System.Data.DataColumn columnExciseNumber;

            private global::System.Data.DataColumn columnStateCategoryID;

            private global::System.Data.DataColumn columnSaleDate;

            private global::System.Data.DataColumn columnFilingDate;

            private global::System.Data.DataColumn columnRecordingFee;

            private global::System.Data.DataColumn columnMortgageInstrumentNumber;

            private global::System.Data.DataColumn columnLoanType;

            private global::System.Data.DataColumn columnLoanAmount;

            private global::System.Data.DataColumn columnSaleNote;

            private global::System.Data.DataColumn columnIsLandOnlySale;

            private global::System.Data.DataColumn columnPrimaryImprovement;

            private global::System.Data.DataColumn columnPrimaryLandType;

            private global::System.Data.DataColumn columnNighborhood;

            private global::System.Data.DataColumn columnOriginalSquareFeet;

            private global::System.Data.DataColumn columnAdjTimeSale;

            private global::System.Data.DataColumn columnAdjFinance;

            private global::System.Data.DataColumn columnAdjPersProp;

            private global::System.Data.DataColumn columnAdjustOther;

            private global::System.Data.DataColumn columnAdjustedSquareFeet;

            private global::System.Data.DataColumn columnCurrentEstimate;

            private global::System.Data.DataColumn columnCurrentPerSqFt;

            private global::System.Data.DataColumn columnCurrentRatio;

            private global::System.Data.DataColumn columnAppraisalEstimate;

            private global::System.Data.DataColumn columnAppraisalPerSqFt;

            private global::System.Data.DataColumn columnAppraisalRatio;

            private global::System.Data.DataColumn columnAdvisoryID;

            private global::System.Data.DataColumn columnAssignmentID;

            private global::System.Data.DataColumn columnStatusID;

            private global::System.Data.DataColumn columnAppraiserID;

            private global::System.Data.DataColumn columnReviewDate;

            private global::System.Data.DataColumn columnLocalQualificationID;

            private global::System.Data.DataColumn columnReviewNote;

            private global::System.Data.DataColumn columnRollYear;

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SaleDetailsDataTable()
            {
                this.TableName = "SaleDetails";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SaleDetailsDataTable(global::System.Data.DataTable table)
            {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive))
                {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString()))
                {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace))
                {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SaleDetailsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) :
                base(info, context)
            {
                this.InitVars();
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ParcelIDColumn
            {
                get
                {
                    return this.columnParcelID;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SaleIDColumn
            {
                get
                {
                    return this.columnSaleID;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OriginalSalepriceColumn
            {
                get
                {
                    return this.columnOriginalSaleprice;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeedTypeColumn
            {
                get
                {
                    return this.columnDeedType;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RecordingNumberColumn
            {
                get
                {
                    return this.columnRecordingNumber;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ExciseNumberColumn
            {
                get
                {
                    return this.columnExciseNumber;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StateCategoryIDColumn
            {
                get
                {
                    return this.columnStateCategoryID;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SaleDateColumn
            {
                get
                {
                    return this.columnSaleDate;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FilingDateColumn
            {
                get
                {
                    return this.columnFilingDate;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RecordingFeeColumn
            {
                get
                {
                    return this.columnRecordingFee;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MortgageInstrumentNumberColumn
            {
                get
                {
                    return this.columnMortgageInstrumentNumber;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LoanTypeColumn
            {
                get
                {
                    return this.columnLoanType;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LoanAmountColumn
            {
                get
                {
                    return this.columnLoanAmount;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SaleNoteColumn
            {
                get
                {
                    return this.columnSaleNote;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsLandOnlySaleColumn
            {
                get
                {
                    return this.columnIsLandOnlySale;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PrimaryImprovementColumn
            {
                get
                {
                    return this.columnPrimaryImprovement;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PrimaryLandTypeColumn
            {
                get
                {
                    return this.columnPrimaryLandType;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NighborhoodColumn
            {
                get
                {
                    return this.columnNighborhood;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OriginalSquareFeetColumn
            {
                get
                {
                    return this.columnOriginalSquareFeet;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AdjTimeSaleColumn
            {
                get
                {
                    return this.columnAdjTimeSale;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AdjFinanceColumn
            {
                get
                {
                    return this.columnAdjFinance;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AdjPersPropColumn
            {
                get
                {
                    return this.columnAdjPersProp;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AdjustOtherColumn
            {
                get
                {
                    return this.columnAdjustOther;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AdjustedSquareFeetColumn
            {
                get
                {
                    return this.columnAdjustedSquareFeet;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CurrentEstimateColumn
            {
                get
                {
                    return this.columnCurrentEstimate;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CurrentPerSqFtColumn
            {
                get
                {
                    return this.columnCurrentPerSqFt;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CurrentRatioColumn
            {
                get
                {
                    return this.columnCurrentRatio;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AppraisalEstimateColumn
            {
                get
                {
                    return this.columnAppraisalEstimate;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AppraisalPerSqFtColumn
            {
                get
                {
                    return this.columnAppraisalPerSqFt;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AppraisalRatioColumn
            {
                get
                {
                    return this.columnAppraisalRatio;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AdvisoryIDColumn
            {
                get
                {
                    return this.columnAdvisoryID;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AssignmentIDColumn
            {
                get
                {
                    return this.columnAssignmentID;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StatusIDColumn
            {
                get
                {
                    return this.columnStatusID;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AppraiserIDColumn
            {
                get
                {
                    return this.columnAppraiserID;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ReviewDateColumn
            {
                get
                {
                    return this.columnReviewDate;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LocalQualificationIDColumn
            {
                get
                {
                    return this.columnLocalQualificationID;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ReviewNoteColumn
            {
                get
                {
                    return this.columnReviewNote;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RollYearColumn
            {
                get
                {
                    return this.columnRollYear;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count
            {
                get
                {
                    return this.Rows.Count;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SaleDetailsRow this[int index]
            {
                get
                {
                    return ((SaleDetailsRow)(this.Rows[index]));
                }
            }

            public event SaleDetailsRowChangeEventHandler SaleDetailsRowChanging;

            public event SaleDetailsRowChangeEventHandler SaleDetailsRowChanged;

            public event SaleDetailsRowChangeEventHandler SaleDetailsRowDeleting;

            public event SaleDetailsRowChangeEventHandler SaleDetailsRowDeleted;

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSaleDetailsRow(SaleDetailsRow row)
            {
                this.Rows.Add(row);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SaleDetailsRow AddSaleDetailsRow(
                        int ParcelID,
                        int SaleID,
                        decimal OriginalSaleprice,
                        string DeedType,
                        string RecordingNumber,
                        string ExciseNumber,
                        int StateCategoryID,
                        string SaleDate,
                        string FilingDate,
                        decimal RecordingFee,
                        string MortgageInstrumentNumber,
                        string LoanType,
                        decimal LoanAmount,
                        string SaleNote,
                        string IsLandOnlySale,
                        string PrimaryImprovement,
                        string PrimaryLandType,
                        string Nighborhood,
                        decimal OriginalSquareFeet,
                        decimal AdjTimeSale,
                        decimal AdjFinance,
                        decimal AdjPersProp,
                        decimal AdjustOther,
                        decimal AdjustedSquareFeet,
                        decimal CurrentEstimate,
                        decimal CurrentPerSqFt,
                        decimal CurrentRatio,
                        decimal AppraisalEstimate,
                        decimal AppraisalPerSqFt,
                        decimal AppraisalRatio,
                        int AdvisoryID,
                        int AssignmentID,
                        int StatusID,
                        int AppraiserID,
                        string ReviewDate,
                        byte LocalQualificationID,
                        string ReviewNote,
                        short RollYear)
            {
                SaleDetailsRow rowSaleDetailsRow = ((SaleDetailsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ParcelID,
                        SaleID,
                        OriginalSaleprice,
                        DeedType,
                        RecordingNumber,
                        ExciseNumber,
                        StateCategoryID,
                        SaleDate,
                        FilingDate,
                        RecordingFee,
                        MortgageInstrumentNumber,
                        LoanType,
                        LoanAmount,
                        SaleNote,
                        IsLandOnlySale,
                        PrimaryImprovement,
                        PrimaryLandType,
                        Nighborhood,
                        OriginalSquareFeet,
                        AdjTimeSale,
                        AdjFinance,
                        AdjPersProp,
                        AdjustOther,
                        AdjustedSquareFeet,
                        CurrentEstimate,
                        CurrentPerSqFt,
                        CurrentRatio,
                        AppraisalEstimate,
                        AppraisalPerSqFt,
                        AppraisalRatio,
                        AdvisoryID,
                        AssignmentID,
                        StatusID,
                        AppraiserID,
                        ReviewDate,
                        LocalQualificationID,
                        ReviewNote,
                        RollYear};
                rowSaleDetailsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowSaleDetailsRow);
                return rowSaleDetailsRow;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone()
            {
                SaleDetailsDataTable cln = ((SaleDetailsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance()
            {
                return new SaleDetailsDataTable();
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars()
            {
                this.columnParcelID = base.Columns["ParcelID"];
                this.columnSaleID = base.Columns["SaleID"];
                this.columnOriginalSaleprice = base.Columns["OriginalSaleprice"];
                this.columnDeedType = base.Columns["DeedType"];
                this.columnRecordingNumber = base.Columns["RecordingNumber"];
                this.columnExciseNumber = base.Columns["ExciseNumber"];
                this.columnStateCategoryID = base.Columns["StateCategoryID"];
                this.columnSaleDate = base.Columns["SaleDate"];
                this.columnFilingDate = base.Columns["FilingDate"];
                this.columnRecordingFee = base.Columns["RecordingFee"];
                this.columnMortgageInstrumentNumber = base.Columns["MortgageInstrumentNumber"];
                this.columnLoanType = base.Columns["LoanType"];
                this.columnLoanAmount = base.Columns["LoanAmount"];
                this.columnSaleNote = base.Columns["SaleNote"];
                this.columnIsLandOnlySale = base.Columns["IsLandOnlySale"];
                this.columnPrimaryImprovement = base.Columns["PrimaryImprovement"];
                this.columnPrimaryLandType = base.Columns["PrimaryLandType"];
                this.columnNighborhood = base.Columns["Nighborhood"];
                this.columnOriginalSquareFeet = base.Columns["OriginalSquareFeet"];
                this.columnAdjTimeSale = base.Columns["AdjTimeSale"];
                this.columnAdjFinance = base.Columns["AdjFinance"];
                this.columnAdjPersProp = base.Columns["AdjPersProp"];
                this.columnAdjustOther = base.Columns["AdjustOther"];
                this.columnAdjustedSquareFeet = base.Columns["AdjustedSquareFeet"];
                this.columnCurrentEstimate = base.Columns["CurrentEstimate"];
                this.columnCurrentPerSqFt = base.Columns["CurrentPerSqFt"];
                this.columnCurrentRatio = base.Columns["CurrentRatio"];
                this.columnAppraisalEstimate = base.Columns["AppraisalEstimate"];
                this.columnAppraisalPerSqFt = base.Columns["AppraisalPerSqFt"];
                this.columnAppraisalRatio = base.Columns["AppraisalRatio"];
                this.columnAdvisoryID = base.Columns["AdvisoryID"];
                this.columnAssignmentID = base.Columns["AssignmentID"];
                this.columnStatusID = base.Columns["StatusID"];
                this.columnAppraiserID = base.Columns["AppraiserID"];
                this.columnReviewDate = base.Columns["ReviewDate"];
                this.columnLocalQualificationID = base.Columns["LocalQualificationID"];
                this.columnReviewNote = base.Columns["ReviewNote"];
                this.columnRollYear = base.Columns["RollYear"];
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass()
            {
                this.columnParcelID = new global::System.Data.DataColumn("ParcelID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnParcelID);
                this.columnSaleID = new global::System.Data.DataColumn("SaleID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSaleID);
                this.columnOriginalSaleprice = new global::System.Data.DataColumn("OriginalSaleprice", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOriginalSaleprice);
                this.columnDeedType = new global::System.Data.DataColumn("DeedType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeedType);
                this.columnRecordingNumber = new global::System.Data.DataColumn("RecordingNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRecordingNumber);
                this.columnExciseNumber = new global::System.Data.DataColumn("ExciseNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnExciseNumber);
                this.columnStateCategoryID = new global::System.Data.DataColumn("StateCategoryID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStateCategoryID);
                this.columnSaleDate = new global::System.Data.DataColumn("SaleDate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSaleDate);
                this.columnFilingDate = new global::System.Data.DataColumn("FilingDate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFilingDate);
                this.columnRecordingFee = new global::System.Data.DataColumn("RecordingFee", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRecordingFee);
                this.columnMortgageInstrumentNumber = new global::System.Data.DataColumn("MortgageInstrumentNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMortgageInstrumentNumber);
                this.columnLoanType = new global::System.Data.DataColumn("LoanType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLoanType);
                this.columnLoanAmount = new global::System.Data.DataColumn("LoanAmount", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLoanAmount);
                this.columnSaleNote = new global::System.Data.DataColumn("SaleNote", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSaleNote);
                this.columnIsLandOnlySale = new global::System.Data.DataColumn("IsLandOnlySale", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsLandOnlySale);
                this.columnPrimaryImprovement = new global::System.Data.DataColumn("PrimaryImprovement", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPrimaryImprovement);
                this.columnPrimaryLandType = new global::System.Data.DataColumn("PrimaryLandType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPrimaryLandType);
                this.columnNighborhood = new global::System.Data.DataColumn("Nighborhood", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNighborhood);
                this.columnOriginalSquareFeet = new global::System.Data.DataColumn("OriginalSquareFeet", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOriginalSquareFeet);
                this.columnAdjTimeSale = new global::System.Data.DataColumn("AdjTimeSale", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAdjTimeSale);
                this.columnAdjFinance = new global::System.Data.DataColumn("AdjFinance", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAdjFinance);
                this.columnAdjPersProp = new global::System.Data.DataColumn("AdjPersProp", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAdjPersProp);
                this.columnAdjustOther = new global::System.Data.DataColumn("AdjustOther", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAdjustOther);
                this.columnAdjustedSquareFeet = new global::System.Data.DataColumn("AdjustedSquareFeet", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAdjustedSquareFeet);
                this.columnCurrentEstimate = new global::System.Data.DataColumn("CurrentEstimate", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCurrentEstimate);
                this.columnCurrentPerSqFt = new global::System.Data.DataColumn("CurrentPerSqFt", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCurrentPerSqFt);
                this.columnCurrentRatio = new global::System.Data.DataColumn("CurrentRatio", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCurrentRatio);
                this.columnAppraisalEstimate = new global::System.Data.DataColumn("AppraisalEstimate", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAppraisalEstimate);
                this.columnAppraisalPerSqFt = new global::System.Data.DataColumn("AppraisalPerSqFt", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAppraisalPerSqFt);
                this.columnAppraisalRatio = new global::System.Data.DataColumn("AppraisalRatio", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAppraisalRatio);
                this.columnAdvisoryID = new global::System.Data.DataColumn("AdvisoryID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAdvisoryID);
                this.columnAssignmentID = new global::System.Data.DataColumn("AssignmentID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAssignmentID);
                this.columnStatusID = new global::System.Data.DataColumn("StatusID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStatusID);
                this.columnAppraiserID = new global::System.Data.DataColumn("AppraiserID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAppraiserID);
                this.columnReviewDate = new global::System.Data.DataColumn("ReviewDate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnReviewDate);
                this.columnLocalQualificationID = new global::System.Data.DataColumn("LocalQualificationID", typeof(byte), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLocalQualificationID);
                this.columnReviewNote = new global::System.Data.DataColumn("ReviewNote", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnReviewNote);
                this.columnRollYear = new global::System.Data.DataColumn("RollYear", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRollYear);
                this.columnDeedType.MaxLength = 100;
                this.columnRecordingNumber.MaxLength = 50;
                this.columnExciseNumber.MaxLength = 50;
                this.columnSaleDate.MaxLength = 10;
                this.columnFilingDate.MaxLength = 10;
                this.columnMortgageInstrumentNumber.MaxLength = 50;
                this.columnLoanType.MaxLength = 50;
                this.columnSaleNote.MaxLength = 250;
                this.columnPrimaryImprovement.MaxLength = 50;
                this.columnPrimaryLandType.MaxLength = 50;
                this.columnNighborhood.MaxLength = 150;
                this.columnReviewNote.MaxLength = 250;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SaleDetailsRow NewSaleDetailsRow()
            {
                return ((SaleDetailsRow)(this.NewRow()));
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder)
            {
                return new SaleDetailsRow(builder);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType()
            {
                return typeof(SaleDetailsRow);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if ((this.SaleDetailsRowChanged != null))
                {
                    this.SaleDetailsRowChanged(this, new SaleDetailsRowChangeEvent(((SaleDetailsRow)(e.Row)), e.Action));
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if ((this.SaleDetailsRowChanging != null))
                {
                    this.SaleDetailsRowChanging(this, new SaleDetailsRowChangeEvent(((SaleDetailsRow)(e.Row)), e.Action));
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if ((this.SaleDetailsRowDeleted != null))
                {
                    this.SaleDetailsRowDeleted(this, new SaleDetailsRowChangeEvent(((SaleDetailsRow)(e.Row)), e.Action));
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if ((this.SaleDetailsRowDeleting != null))
                {
                    this.SaleDetailsRowDeleting(this, new SaleDetailsRowChangeEvent(((SaleDetailsRow)(e.Row)), e.Action));
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSaleDetailsRow(SaleDetailsRow row)
            {
                this.Rows.Remove(row);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs)
            {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F29551ParcelSaleTrackingData ds = new F29551ParcelSaleTrackingData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SaleDetailsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace))
                {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try
                    {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); )
                        {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length))
                            {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length)
                                            && (s1.ReadByte() == s2.ReadByte())); )
                                {
                                    ;
                                }
                                if ((s1.Position == s1.Length))
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if ((s1 != null))
                        {
                            s1.Close();
                        }
                        if ((s2 != null))
                        {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }

        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ParcelDetailsDataTable : global::System.Data.TypedTableBase<ParcelDetailsRow>
        {

            private global::System.Data.DataColumn columnSaleParcelID;

            private global::System.Data.DataColumn columnIsBaseParcel;

            private global::System.Data.DataColumn columnParcelNumber;

            private global::System.Data.DataColumn columnAcres;

            private global::System.Data.DataColumn columnDOR;

            private global::System.Data.DataColumn columnDORTooltip;

            private global::System.Data.DataColumn columnLand;

            private global::System.Data.DataColumn columnImpr;

            private global::System.Data.DataColumn columnCrop;

            private global::System.Data.DataColumn columnTotals;

            private global::System.Data.DataColumn columnParcelID;

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ParcelDetailsDataTable()
            {
                this.TableName = "ParcelDetails";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ParcelDetailsDataTable(global::System.Data.DataTable table)
            {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive))
                {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString()))
                {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace))
                {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ParcelDetailsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) :
                base(info, context)
            {
                this.InitVars();
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SaleParcelIDColumn
            {
                get
                {
                    return this.columnSaleParcelID;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsBaseParcelColumn
            {
                get
                {
                    return this.columnIsBaseParcel;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ParcelNumberColumn
            {
                get
                {
                    return this.columnParcelNumber;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AcresColumn
            {
                get
                {
                    return this.columnAcres;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DORColumn
            {
                get
                {
                    return this.columnDOR;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DORTooltipColumn
            {
                get
                {
                    return this.columnDORTooltip;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LandColumn
            {
                get
                {
                    return this.columnLand;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ImprColumn
            {
                get
                {
                    return this.columnImpr;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CropColumn
            {
                get
                {
                    return this.columnCrop;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalsColumn
            {
                get
                {
                    return this.columnTotals;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ParcelIDColumn
            {
                get
                {
                    return this.columnParcelID;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count
            {
                get
                {
                    return this.Rows.Count;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ParcelDetailsRow this[int index]
            {
                get
                {
                    return ((ParcelDetailsRow)(this.Rows[index]));
                }
            }

            public event ParcelDetailsRowChangeEventHandler ParcelDetailsRowChanging;

            public event ParcelDetailsRowChangeEventHandler ParcelDetailsRowChanged;

            public event ParcelDetailsRowChangeEventHandler ParcelDetailsRowDeleting;

            public event ParcelDetailsRowChangeEventHandler ParcelDetailsRowDeleted;

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddParcelDetailsRow(ParcelDetailsRow row)
            {
                this.Rows.Add(row);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ParcelDetailsRow AddParcelDetailsRow(int SaleParcelID, int IsBaseParcel, string ParcelNumber, string Acres, string DOR, string DORTooltip, int Land, int Impr, int Crop, int Totals, int ParcelID)
            {
                ParcelDetailsRow rowParcelDetailsRow = ((ParcelDetailsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        SaleParcelID,
                        IsBaseParcel,
                        ParcelNumber,
                        Acres,
                        DOR,
                        DORTooltip,
                        Land,
                        Impr,
                        Crop,
                        Totals,
                        ParcelID};
                rowParcelDetailsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowParcelDetailsRow);
                return rowParcelDetailsRow;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone()
            {
                ParcelDetailsDataTable cln = ((ParcelDetailsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance()
            {
                return new ParcelDetailsDataTable();
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars()
            {
                this.columnSaleParcelID = base.Columns["SaleParcelID"];
                this.columnIsBaseParcel = base.Columns["IsBaseParcel"];
                this.columnParcelNumber = base.Columns["ParcelNumber"];
                this.columnAcres = base.Columns["Acres"];
                this.columnDOR = base.Columns["DOR"];
                this.columnDORTooltip = base.Columns["DORTooltip"];
                this.columnLand = base.Columns["Land"];
                this.columnImpr = base.Columns["Impr"];
                this.columnCrop = base.Columns["Crop"];
                this.columnTotals = base.Columns["Totals"];
                this.columnParcelID = base.Columns["ParcelID"];
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass()
            {
                this.columnSaleParcelID = new global::System.Data.DataColumn("SaleParcelID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSaleParcelID);
                this.columnIsBaseParcel = new global::System.Data.DataColumn("IsBaseParcel", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsBaseParcel);
                this.columnParcelNumber = new global::System.Data.DataColumn("ParcelNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnParcelNumber);
                this.columnAcres = new global::System.Data.DataColumn("Acres", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAcres);
                this.columnDOR = new global::System.Data.DataColumn("DOR", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDOR);
                this.columnDORTooltip = new global::System.Data.DataColumn("DORTooltip", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDORTooltip);
                this.columnLand = new global::System.Data.DataColumn("Land", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLand);
                this.columnImpr = new global::System.Data.DataColumn("Impr", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnImpr);
                this.columnCrop = new global::System.Data.DataColumn("Crop", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCrop);
                this.columnTotals = new global::System.Data.DataColumn("Totals", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotals);
                this.columnParcelID = new global::System.Data.DataColumn("ParcelID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnParcelID);
                this.columnParcelNumber.MaxLength = 50;
                this.columnAcres.MaxLength = 50;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ParcelDetailsRow NewParcelDetailsRow()
            {
                return ((ParcelDetailsRow)(this.NewRow()));
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder)
            {
                return new ParcelDetailsRow(builder);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType()
            {
                return typeof(ParcelDetailsRow);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if ((this.ParcelDetailsRowChanged != null))
                {
                    this.ParcelDetailsRowChanged(this, new ParcelDetailsRowChangeEvent(((ParcelDetailsRow)(e.Row)), e.Action));
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if ((this.ParcelDetailsRowChanging != null))
                {
                    this.ParcelDetailsRowChanging(this, new ParcelDetailsRowChangeEvent(((ParcelDetailsRow)(e.Row)), e.Action));
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if ((this.ParcelDetailsRowDeleted != null))
                {
                    this.ParcelDetailsRowDeleted(this, new ParcelDetailsRowChangeEvent(((ParcelDetailsRow)(e.Row)), e.Action));
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if ((this.ParcelDetailsRowDeleting != null))
                {
                    this.ParcelDetailsRowDeleting(this, new ParcelDetailsRowChangeEvent(((ParcelDetailsRow)(e.Row)), e.Action));
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveParcelDetailsRow(ParcelDetailsRow row)
            {
                this.Rows.Remove(row);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs)
            {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F29551ParcelSaleTrackingData ds = new F29551ParcelSaleTrackingData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ParcelDetailsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace))
                {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try
                    {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); )
                        {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length))
                            {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length)
                                            && (s1.ReadByte() == s2.ReadByte())); )
                                {
                                    ;
                                }
                                if ((s1.Position == s1.Length))
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if ((s1 != null))
                        {
                            s1.Close();
                        }
                        if ((s2 != null))
                        {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }

        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ValidRecordDataTable : global::System.Data.TypedTableBase<ValidRecordRow>
        {

            private global::System.Data.DataColumn columnIsValid;

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ValidRecordDataTable()
            {
                this.TableName = "ValidRecord";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ValidRecordDataTable(global::System.Data.DataTable table)
            {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive))
                {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString()))
                {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace))
                {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ValidRecordDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) :
                base(info, context)
            {
                this.InitVars();
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsValidColumn
            {
                get
                {
                    return this.columnIsValid;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count
            {
                get
                {
                    return this.Rows.Count;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ValidRecordRow this[int index]
            {
                get
                {
                    return ((ValidRecordRow)(this.Rows[index]));
                }
            }

            public event ValidRecordRowChangeEventHandler ValidRecordRowChanging;

            public event ValidRecordRowChangeEventHandler ValidRecordRowChanged;

            public event ValidRecordRowChangeEventHandler ValidRecordRowDeleting;

            public event ValidRecordRowChangeEventHandler ValidRecordRowDeleted;

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddValidRecordRow(ValidRecordRow row)
            {
                this.Rows.Add(row);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ValidRecordRow AddValidRecordRow(string IsValid)
            {
                ValidRecordRow rowValidRecordRow = ((ValidRecordRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        IsValid};
                rowValidRecordRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowValidRecordRow);
                return rowValidRecordRow;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone()
            {
                ValidRecordDataTable cln = ((ValidRecordDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance()
            {
                return new ValidRecordDataTable();
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars()
            {
                this.columnIsValid = base.Columns["IsValid"];
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass()
            {
                this.columnIsValid = new global::System.Data.DataColumn("IsValid", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsValid);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ValidRecordRow NewValidRecordRow()
            {
                return ((ValidRecordRow)(this.NewRow()));
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder)
            {
                return new ValidRecordRow(builder);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType()
            {
                return typeof(ValidRecordRow);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if ((this.ValidRecordRowChanged != null))
                {
                    this.ValidRecordRowChanged(this, new ValidRecordRowChangeEvent(((ValidRecordRow)(e.Row)), e.Action));
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if ((this.ValidRecordRowChanging != null))
                {
                    this.ValidRecordRowChanging(this, new ValidRecordRowChangeEvent(((ValidRecordRow)(e.Row)), e.Action));
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if ((this.ValidRecordRowDeleted != null))
                {
                    this.ValidRecordRowDeleted(this, new ValidRecordRowChangeEvent(((ValidRecordRow)(e.Row)), e.Action));
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if ((this.ValidRecordRowDeleting != null))
                {
                    this.ValidRecordRowDeleting(this, new ValidRecordRowChangeEvent(((ValidRecordRow)(e.Row)), e.Action));
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveValidRecordRow(ValidRecordRow row)
            {
                this.Rows.Remove(row);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs)
            {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F29551ParcelSaleTrackingData ds = new F29551ParcelSaleTrackingData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ValidRecordDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace))
                {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try
                    {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); )
                        {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length))
                            {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length)
                                            && (s1.ReadByte() == s2.ReadByte())); )
                                {
                                    ;
                                }
                                if ((s1.Position == s1.Length))
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if ((s1 != null))
                        {
                            s1.Close();
                        }
                        if ((s2 != null))
                        {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }

        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ReturnMessageDataTable : global::System.Data.TypedTableBase<ReturnMessageRow>
        {

            private global::System.Data.DataColumn columnDialogText;

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReturnMessageDataTable()
            {
                this.TableName = "ReturnMessage";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ReturnMessageDataTable(global::System.Data.DataTable table)
            {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive))
                {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString()))
                {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace))
                {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ReturnMessageDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) :
                base(info, context)
            {
                this.InitVars();
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DialogTextColumn
            {
                get
                {
                    return this.columnDialogText;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count
            {
                get
                {
                    return this.Rows.Count;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReturnMessageRow this[int index]
            {
                get
                {
                    return ((ReturnMessageRow)(this.Rows[index]));
                }
            }

            public event ReturnMessageRowChangeEventHandler ReturnMessageRowChanging;

            public event ReturnMessageRowChangeEventHandler ReturnMessageRowChanged;

            public event ReturnMessageRowChangeEventHandler ReturnMessageRowDeleting;

            public event ReturnMessageRowChangeEventHandler ReturnMessageRowDeleted;

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddReturnMessageRow(ReturnMessageRow row)
            {
                this.Rows.Add(row);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReturnMessageRow AddReturnMessageRow(string DialogText)
            {
                ReturnMessageRow rowReturnMessageRow = ((ReturnMessageRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        DialogText};
                rowReturnMessageRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowReturnMessageRow);
                return rowReturnMessageRow;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone()
            {
                ReturnMessageDataTable cln = ((ReturnMessageDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance()
            {
                return new ReturnMessageDataTable();
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars()
            {
                this.columnDialogText = base.Columns["DialogText"];
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass()
            {
                this.columnDialogText = new global::System.Data.DataColumn("DialogText", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDialogText);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReturnMessageRow NewReturnMessageRow()
            {
                return ((ReturnMessageRow)(this.NewRow()));
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder)
            {
                return new ReturnMessageRow(builder);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType()
            {
                return typeof(ReturnMessageRow);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if ((this.ReturnMessageRowChanged != null))
                {
                    this.ReturnMessageRowChanged(this, new ReturnMessageRowChangeEvent(((ReturnMessageRow)(e.Row)), e.Action));
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if ((this.ReturnMessageRowChanging != null))
                {
                    this.ReturnMessageRowChanging(this, new ReturnMessageRowChangeEvent(((ReturnMessageRow)(e.Row)), e.Action));
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if ((this.ReturnMessageRowDeleted != null))
                {
                    this.ReturnMessageRowDeleted(this, new ReturnMessageRowChangeEvent(((ReturnMessageRow)(e.Row)), e.Action));
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if ((this.ReturnMessageRowDeleting != null))
                {
                    this.ReturnMessageRowDeleting(this, new ReturnMessageRowChangeEvent(((ReturnMessageRow)(e.Row)), e.Action));
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveReturnMessageRow(ReturnMessageRow row)
            {
                this.Rows.Remove(row);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs)
            {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F29551ParcelSaleTrackingData ds = new F29551ParcelSaleTrackingData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ReturnMessageDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace))
                {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try
                    {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); )
                        {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length))
                            {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length)
                                            && (s1.ReadByte() == s2.ReadByte())); )
                                {
                                    ;
                                }
                                if ((s1.Position == s1.Length))
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if ((s1 != null))
                        {
                            s1.Close();
                        }
                        if ((s2 != null))
                        {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }

        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class DeedTypeRow : global::System.Data.DataRow
        {

            private DeedTypeDataTable tableDeedType;

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DeedTypeRow(global::System.Data.DataRowBuilder rb) :
                base(rb)
            {
                this.tableDeedType = ((DeedTypeDataTable)(this.Table));
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int DeedTypeID
            {
                get
                {
                    try
                    {
                        return ((int)(this[this.tableDeedType.DeedTypeIDColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'DeedTypeID\' in table \'DeedType\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableDeedType.DeedTypeIDColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DeedType
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableDeedType.DeedTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'DeedType\' in table \'DeedType\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableDeedType.DeedTypeColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDeedTypeIDNull()
            {
                return this.IsNull(this.tableDeedType.DeedTypeIDColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDeedTypeIDNull()
            {
                this[this.tableDeedType.DeedTypeIDColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDeedTypeNull()
            {
                return this.IsNull(this.tableDeedType.DeedTypeColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDeedTypeNull()
            {
                this[this.tableDeedType.DeedTypeColumn] = global::System.Convert.DBNull;
            }
        }

        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class StateListRow : global::System.Data.DataRow
        {

            private StateListDataTable tableStateList;

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal StateListRow(global::System.Data.DataRowBuilder rb) :
                base(rb)
            {
                this.tableStateList = ((StateListDataTable)(this.Table));
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int StateQualificationID
            {
                get
                {
                    try
                    {
                        return ((int)(this[this.tableStateList.StateQualificationIDColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'StateQualificationID\' in table \'StateList\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableStateList.StateQualificationIDColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string StateQualification
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableStateList.StateQualificationColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'StateQualification\' in table \'StateList\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableStateList.StateQualificationColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStateQualificationIDNull()
            {
                return this.IsNull(this.tableStateList.StateQualificationIDColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStateQualificationIDNull()
            {
                this[this.tableStateList.StateQualificationIDColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStateQualificationNull()
            {
                return this.IsNull(this.tableStateList.StateQualificationColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStateQualificationNull()
            {
                this[this.tableStateList.StateQualificationColumn] = global::System.Convert.DBNull;
            }
        }

        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class AdvisoryRow : global::System.Data.DataRow
        {

            private AdvisoryDataTable tableAdvisory;

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal AdvisoryRow(global::System.Data.DataRowBuilder rb) :
                base(rb)
            {
                this.tableAdvisory = ((AdvisoryDataTable)(this.Table));
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int AdvisoryID
            {
                get
                {
                    try
                    {
                        return ((int)(this[this.tableAdvisory.AdvisoryIDColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'AdvisoryID\' in table \'Advisory\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableAdvisory.AdvisoryIDColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Advisory
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableAdvisory.AdvisoryColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'Advisory\' in table \'Advisory\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableAdvisory.AdvisoryColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AdvisoryRGB
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableAdvisory.AdvisoryRGBColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'AdvisoryRGB\' in table \'Advisory\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableAdvisory.AdvisoryRGBColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAdvisoryIDNull()
            {
                return this.IsNull(this.tableAdvisory.AdvisoryIDColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAdvisoryIDNull()
            {
                this[this.tableAdvisory.AdvisoryIDColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAdvisoryNull()
            {
                return this.IsNull(this.tableAdvisory.AdvisoryColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAdvisoryNull()
            {
                this[this.tableAdvisory.AdvisoryColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAdvisoryRGBNull()
            {
                return this.IsNull(this.tableAdvisory.AdvisoryRGBColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAdvisoryRGBNull()
            {
                this[this.tableAdvisory.AdvisoryRGBColumn] = global::System.Convert.DBNull;
            }
        }

        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class AssignmentRow : global::System.Data.DataRow
        {

            private AssignmentDataTable tableAssignment;

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal AssignmentRow(global::System.Data.DataRowBuilder rb) :
                base(rb)
            {
                this.tableAssignment = ((AssignmentDataTable)(this.Table));
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int AssignmentID
            {
                get
                {
                    try
                    {
                        return ((int)(this[this.tableAssignment.AssignmentIDColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'AssignmentID\' in table \'Assignment\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableAssignment.AssignmentIDColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Assignment
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableAssignment.AssignmentColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'Assignment\' in table \'Assignment\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableAssignment.AssignmentColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAssignmentIDNull()
            {
                return this.IsNull(this.tableAssignment.AssignmentIDColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAssignmentIDNull()
            {
                this[this.tableAssignment.AssignmentIDColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAssignmentNull()
            {
                return this.IsNull(this.tableAssignment.AssignmentColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAssignmentNull()
            {
                this[this.tableAssignment.AssignmentColumn] = global::System.Convert.DBNull;
            }
        }

        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class StatusRow : global::System.Data.DataRow
        {

            private StatusDataTable tableStatus;

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal StatusRow(global::System.Data.DataRowBuilder rb) :
                base(rb)
            {
                this.tableStatus = ((StatusDataTable)(this.Table));
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int StatusID
            {
                get
                {
                    try
                    {
                        return ((int)(this[this.tableStatus.StatusIDColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'StatusID\' in table \'Status\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableStatus.StatusIDColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Status
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableStatus.StatusColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'Status\' in table \'Status\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableStatus.StatusColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string StatusRGB
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableStatus.StatusRGBColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'StatusRGB\' in table \'Status\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableStatus.StatusRGBColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStatusIDNull()
            {
                return this.IsNull(this.tableStatus.StatusIDColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStatusIDNull()
            {
                this[this.tableStatus.StatusIDColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStatusNull()
            {
                return this.IsNull(this.tableStatus.StatusColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStatusNull()
            {
                this[this.tableStatus.StatusColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStatusRGBNull()
            {
                return this.IsNull(this.tableStatus.StatusRGBColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStatusRGBNull()
            {
                this[this.tableStatus.StatusRGBColumn] = global::System.Convert.DBNull;
            }
        }

        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ApprasiserRow : global::System.Data.DataRow
        {

            private ApprasiserDataTable tableApprasiser;

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ApprasiserRow(global::System.Data.DataRowBuilder rb) :
                base(rb)
            {
                this.tableApprasiser = ((ApprasiserDataTable)(this.Table));
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int AppraiserID
            {
                get
                {
                    try
                    {
                        return ((int)(this[this.tableApprasiser.AppraiserIDColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'AppraiserID\' in table \'Apprasiser\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableApprasiser.AppraiserIDColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Appraiser
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableApprasiser.AppraiserColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'Appraiser\' in table \'Apprasiser\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableApprasiser.AppraiserColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAppraiserIDNull()
            {
                return this.IsNull(this.tableApprasiser.AppraiserIDColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAppraiserIDNull()
            {
                this[this.tableApprasiser.AppraiserIDColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAppraiserNull()
            {
                return this.IsNull(this.tableApprasiser.AppraiserColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAppraiserNull()
            {
                this[this.tableApprasiser.AppraiserColumn] = global::System.Convert.DBNull;
            }
        }

        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class LocalQualificationRow : global::System.Data.DataRow
        {

            private LocalQualificationDataTable tableLocalQualification;

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LocalQualificationRow(global::System.Data.DataRowBuilder rb) :
                base(rb)
            {
                this.tableLocalQualification = ((LocalQualificationDataTable)(this.Table));
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LocalQualificationID
            {
                get
                {
                    try
                    {
                        return ((int)(this[this.tableLocalQualification.LocalQualificationIDColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'LocalQualificationID\' in table \'LocalQualification\' is DBNu" +
                                "ll.", e);
                    }
                }
                set
                {
                    this[this.tableLocalQualification.LocalQualificationIDColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LocalQualification
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableLocalQualification.LocalQualificationColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'LocalQualification\' in table \'LocalQualification\' is DBNull" +
                                ".", e);
                    }
                }
                set
                {
                    this[this.tableLocalQualification.LocalQualificationColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LocalQualificationRGB
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableLocalQualification.LocalQualificationRGBColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'LocalQualificationRGB\' in table \'LocalQualification\' is DBN" +
                                "ull.", e);
                    }
                }
                set
                {
                    this[this.tableLocalQualification.LocalQualificationRGBColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLocalQualificationIDNull()
            {
                return this.IsNull(this.tableLocalQualification.LocalQualificationIDColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLocalQualificationIDNull()
            {
                this[this.tableLocalQualification.LocalQualificationIDColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLocalQualificationNull()
            {
                return this.IsNull(this.tableLocalQualification.LocalQualificationColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLocalQualificationNull()
            {
                this[this.tableLocalQualification.LocalQualificationColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLocalQualificationRGBNull()
            {
                return this.IsNull(this.tableLocalQualification.LocalQualificationRGBColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLocalQualificationRGBNull()
            {
                this[this.tableLocalQualification.LocalQualificationRGBColumn] = global::System.Convert.DBNull;
            }
        }

        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class OwnerDetailsRow : global::System.Data.DataRow
        {

            private OwnerDetailsDataTable tableOwnerDetails;

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal OwnerDetailsRow(global::System.Data.DataRowBuilder rb) :
                base(rb)
            {
                this.tableOwnerDetails = ((OwnerDetailsDataTable)(this.Table));
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int OwnerID
            {
                get
                {
                    try
                    {
                        return ((int)(this[this.tableOwnerDetails.OwnerIDColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'OwnerID\' in table \'OwnerDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableOwnerDetails.OwnerIDColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string OwnerName
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableOwnerDetails.OwnerNameColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'OwnerName\' in table \'OwnerDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableOwnerDetails.OwnerNameColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int IsBuyer
            {
                get
                {
                    try
                    {
                        return ((int)(this[this.tableOwnerDetails.IsBuyerColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsBuyer\' in table \'OwnerDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableOwnerDetails.IsBuyerColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string OwnerAddress
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableOwnerDetails.OwnerAddressColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'OwnerAddress\' in table \'OwnerDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableOwnerDetails.OwnerAddressColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string OwnerLocation
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableOwnerDetails.OwnerLocationColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'OwnerLocation\' in table \'OwnerDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableOwnerDetails.OwnerLocationColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOwnerIDNull()
            {
                return this.IsNull(this.tableOwnerDetails.OwnerIDColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOwnerIDNull()
            {
                this[this.tableOwnerDetails.OwnerIDColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOwnerNameNull()
            {
                return this.IsNull(this.tableOwnerDetails.OwnerNameColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOwnerNameNull()
            {
                this[this.tableOwnerDetails.OwnerNameColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsBuyerNull()
            {
                return this.IsNull(this.tableOwnerDetails.IsBuyerColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsBuyerNull()
            {
                this[this.tableOwnerDetails.IsBuyerColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOwnerAddressNull()
            {
                return this.IsNull(this.tableOwnerDetails.OwnerAddressColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOwnerAddressNull()
            {
                this[this.tableOwnerDetails.OwnerAddressColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOwnerLocationNull()
            {
                return this.IsNull(this.tableOwnerDetails.OwnerLocationColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOwnerLocationNull()
            {
                this[this.tableOwnerDetails.OwnerLocationColumn] = global::System.Convert.DBNull;
            }
        }

        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SaleDetailsRow : global::System.Data.DataRow
        {

            private SaleDetailsDataTable tableSaleDetails;

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SaleDetailsRow(global::System.Data.DataRowBuilder rb) :
                base(rb)
            {
                this.tableSaleDetails = ((SaleDetailsDataTable)(this.Table));
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ParcelID
            {
                get
                {
                    try
                    {
                        return ((int)(this[this.tableSaleDetails.ParcelIDColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'ParcelID\' in table \'SaleDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableSaleDetails.ParcelIDColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SaleID
            {
                get
                {
                    try
                    {
                        return ((int)(this[this.tableSaleDetails.SaleIDColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'SaleID\' in table \'SaleDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableSaleDetails.SaleIDColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal OriginalSaleprice
            {
                get
                {
                    try
                    {
                        return ((decimal)(this[this.tableSaleDetails.OriginalSalepriceColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'OriginalSaleprice\' in table \'SaleDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableSaleDetails.OriginalSalepriceColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DeedType
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableSaleDetails.DeedTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'DeedType\' in table \'SaleDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableSaleDetails.DeedTypeColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RecordingNumber
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableSaleDetails.RecordingNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'RecordingNumber\' in table \'SaleDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableSaleDetails.RecordingNumberColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ExciseNumber
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableSaleDetails.ExciseNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'ExciseNumber\' in table \'SaleDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableSaleDetails.ExciseNumberColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int StateCategoryID
            {
                get
                {
                    try
                    {
                        return ((int)(this[this.tableSaleDetails.StateCategoryIDColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'StateCategoryID\' in table \'SaleDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableSaleDetails.StateCategoryIDColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SaleDate
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableSaleDetails.SaleDateColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'SaleDate\' in table \'SaleDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableSaleDetails.SaleDateColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FilingDate
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableSaleDetails.FilingDateColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'FilingDate\' in table \'SaleDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableSaleDetails.FilingDateColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal RecordingFee
            {
                get
                {
                    try
                    {
                        return ((decimal)(this[this.tableSaleDetails.RecordingFeeColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'RecordingFee\' in table \'SaleDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableSaleDetails.RecordingFeeColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MortgageInstrumentNumber
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableSaleDetails.MortgageInstrumentNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'MortgageInstrumentNumber\' in table \'SaleDetails\' is DBNull." +
                                "", e);
                    }
                }
                set
                {
                    this[this.tableSaleDetails.MortgageInstrumentNumberColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LoanType
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableSaleDetails.LoanTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'LoanType\' in table \'SaleDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableSaleDetails.LoanTypeColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal LoanAmount
            {
                get
                {
                    try
                    {
                        return ((decimal)(this[this.tableSaleDetails.LoanAmountColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'LoanAmount\' in table \'SaleDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableSaleDetails.LoanAmountColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SaleNote
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableSaleDetails.SaleNoteColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'SaleNote\' in table \'SaleDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableSaleDetails.SaleNoteColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IsLandOnlySale
            {
                get
                {
                    if (this.IsIsLandOnlySaleNull())
                    {
                        return null;
                    }
                    else
                    {
                        return ((string)(this[this.tableSaleDetails.IsLandOnlySaleColumn]));
                    }
                }
                set
                {
                    this[this.tableSaleDetails.IsLandOnlySaleColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PrimaryImprovement
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableSaleDetails.PrimaryImprovementColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'PrimaryImprovement\' in table \'SaleDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableSaleDetails.PrimaryImprovementColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PrimaryLandType
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableSaleDetails.PrimaryLandTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'PrimaryLandType\' in table \'SaleDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableSaleDetails.PrimaryLandTypeColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Nighborhood
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableSaleDetails.NighborhoodColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'Nighborhood\' in table \'SaleDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableSaleDetails.NighborhoodColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal OriginalSquareFeet
            {
                get
                {
                    try
                    {
                        return ((decimal)(this[this.tableSaleDetails.OriginalSquareFeetColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'OriginalSquareFeet\' in table \'SaleDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableSaleDetails.OriginalSquareFeetColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal AdjTimeSale
            {
                get
                {
                    try
                    {
                        return ((decimal)(this[this.tableSaleDetails.AdjTimeSaleColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'AdjTimeSale\' in table \'SaleDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableSaleDetails.AdjTimeSaleColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal AdjFinance
            {
                get
                {
                    try
                    {
                        return ((decimal)(this[this.tableSaleDetails.AdjFinanceColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'AdjFinance\' in table \'SaleDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableSaleDetails.AdjFinanceColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal AdjPersProp
            {
                get
                {
                    try
                    {
                        return ((decimal)(this[this.tableSaleDetails.AdjPersPropColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'AdjPersProp\' in table \'SaleDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableSaleDetails.AdjPersPropColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal AdjustOther
            {
                get
                {
                    try
                    {
                        return ((decimal)(this[this.tableSaleDetails.AdjustOtherColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'AdjustOther\' in table \'SaleDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableSaleDetails.AdjustOtherColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal AdjustedSquareFeet
            {
                get
                {
                    try
                    {
                        return ((decimal)(this[this.tableSaleDetails.AdjustedSquareFeetColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'AdjustedSquareFeet\' in table \'SaleDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableSaleDetails.AdjustedSquareFeetColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CurrentEstimate
            {
                get
                {
                    try
                    {
                        return ((decimal)(this[this.tableSaleDetails.CurrentEstimateColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'CurrentEstimate\' in table \'SaleDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableSaleDetails.CurrentEstimateColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CurrentPerSqFt
            {
                get
                {
                    try
                    {
                        return ((decimal)(this[this.tableSaleDetails.CurrentPerSqFtColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'CurrentPerSqFt\' in table \'SaleDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableSaleDetails.CurrentPerSqFtColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CurrentRatio
            {
                get
                {
                    try
                    {
                        return ((decimal)(this[this.tableSaleDetails.CurrentRatioColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'CurrentRatio\' in table \'SaleDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableSaleDetails.CurrentRatioColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal AppraisalEstimate
            {
                get
                {
                    try
                    {
                        return ((decimal)(this[this.tableSaleDetails.AppraisalEstimateColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'AppraisalEstimate\' in table \'SaleDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableSaleDetails.AppraisalEstimateColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal AppraisalPerSqFt
            {
                get
                {
                    try
                    {
                        return ((decimal)(this[this.tableSaleDetails.AppraisalPerSqFtColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'AppraisalPerSqFt\' in table \'SaleDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableSaleDetails.AppraisalPerSqFtColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal AppraisalRatio
            {
                get
                {
                    try
                    {
                        return ((decimal)(this[this.tableSaleDetails.AppraisalRatioColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'AppraisalRatio\' in table \'SaleDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableSaleDetails.AppraisalRatioColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int AdvisoryID
            {
                get
                {
                    try
                    {
                        return ((int)(this[this.tableSaleDetails.AdvisoryIDColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'AdvisoryID\' in table \'SaleDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableSaleDetails.AdvisoryIDColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int AssignmentID
            {
                get
                {
                    try
                    {
                        return ((int)(this[this.tableSaleDetails.AssignmentIDColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'AssignmentID\' in table \'SaleDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableSaleDetails.AssignmentIDColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int StatusID
            {
                get
                {
                    try
                    {
                        return ((int)(this[this.tableSaleDetails.StatusIDColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'StatusID\' in table \'SaleDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableSaleDetails.StatusIDColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int AppraiserID
            {
                get
                {
                    try
                    {
                        return ((int)(this[this.tableSaleDetails.AppraiserIDColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'AppraiserID\' in table \'SaleDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableSaleDetails.AppraiserIDColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ReviewDate
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableSaleDetails.ReviewDateColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'ReviewDate\' in table \'SaleDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableSaleDetails.ReviewDateColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte LocalQualificationID
            {
                get
                {
                    try
                    {
                        return ((byte)(this[this.tableSaleDetails.LocalQualificationIDColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'LocalQualificationID\' in table \'SaleDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableSaleDetails.LocalQualificationIDColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ReviewNote
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableSaleDetails.ReviewNoteColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'ReviewNote\' in table \'SaleDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableSaleDetails.ReviewNoteColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short RollYear
            {
                get
                {
                    try
                    {
                        return ((short)(this[this.tableSaleDetails.RollYearColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'RollYear\' in table \'SaleDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableSaleDetails.RollYearColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsParcelIDNull()
            {
                return this.IsNull(this.tableSaleDetails.ParcelIDColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetParcelIDNull()
            {
                this[this.tableSaleDetails.ParcelIDColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSaleIDNull()
            {
                return this.IsNull(this.tableSaleDetails.SaleIDColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSaleIDNull()
            {
                this[this.tableSaleDetails.SaleIDColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOriginalSalepriceNull()
            {
                return this.IsNull(this.tableSaleDetails.OriginalSalepriceColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOriginalSalepriceNull()
            {
                this[this.tableSaleDetails.OriginalSalepriceColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDeedTypeNull()
            {
                return this.IsNull(this.tableSaleDetails.DeedTypeColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDeedTypeNull()
            {
                this[this.tableSaleDetails.DeedTypeColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRecordingNumberNull()
            {
                return this.IsNull(this.tableSaleDetails.RecordingNumberColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRecordingNumberNull()
            {
                this[this.tableSaleDetails.RecordingNumberColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsExciseNumberNull()
            {
                return this.IsNull(this.tableSaleDetails.ExciseNumberColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetExciseNumberNull()
            {
                this[this.tableSaleDetails.ExciseNumberColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStateCategoryIDNull()
            {
                return this.IsNull(this.tableSaleDetails.StateCategoryIDColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStateCategoryIDNull()
            {
                this[this.tableSaleDetails.StateCategoryIDColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSaleDateNull()
            {
                return this.IsNull(this.tableSaleDetails.SaleDateColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSaleDateNull()
            {
                this[this.tableSaleDetails.SaleDateColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFilingDateNull()
            {
                return this.IsNull(this.tableSaleDetails.FilingDateColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFilingDateNull()
            {
                this[this.tableSaleDetails.FilingDateColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRecordingFeeNull()
            {
                return this.IsNull(this.tableSaleDetails.RecordingFeeColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRecordingFeeNull()
            {
                this[this.tableSaleDetails.RecordingFeeColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMortgageInstrumentNumberNull()
            {
                return this.IsNull(this.tableSaleDetails.MortgageInstrumentNumberColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMortgageInstrumentNumberNull()
            {
                this[this.tableSaleDetails.MortgageInstrumentNumberColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLoanTypeNull()
            {
                return this.IsNull(this.tableSaleDetails.LoanTypeColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLoanTypeNull()
            {
                this[this.tableSaleDetails.LoanTypeColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLoanAmountNull()
            {
                return this.IsNull(this.tableSaleDetails.LoanAmountColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLoanAmountNull()
            {
                this[this.tableSaleDetails.LoanAmountColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSaleNoteNull()
            {
                return this.IsNull(this.tableSaleDetails.SaleNoteColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSaleNoteNull()
            {
                this[this.tableSaleDetails.SaleNoteColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsLandOnlySaleNull()
            {
                return this.IsNull(this.tableSaleDetails.IsLandOnlySaleColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsLandOnlySaleNull()
            {
                this[this.tableSaleDetails.IsLandOnlySaleColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPrimaryImprovementNull()
            {
                return this.IsNull(this.tableSaleDetails.PrimaryImprovementColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPrimaryImprovementNull()
            {
                this[this.tableSaleDetails.PrimaryImprovementColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPrimaryLandTypeNull()
            {
                return this.IsNull(this.tableSaleDetails.PrimaryLandTypeColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPrimaryLandTypeNull()
            {
                this[this.tableSaleDetails.PrimaryLandTypeColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNighborhoodNull()
            {
                return this.IsNull(this.tableSaleDetails.NighborhoodColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNighborhoodNull()
            {
                this[this.tableSaleDetails.NighborhoodColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOriginalSquareFeetNull()
            {
                return this.IsNull(this.tableSaleDetails.OriginalSquareFeetColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOriginalSquareFeetNull()
            {
                this[this.tableSaleDetails.OriginalSquareFeetColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAdjTimeSaleNull()
            {
                return this.IsNull(this.tableSaleDetails.AdjTimeSaleColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAdjTimeSaleNull()
            {
                this[this.tableSaleDetails.AdjTimeSaleColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAdjFinanceNull()
            {
                return this.IsNull(this.tableSaleDetails.AdjFinanceColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAdjFinanceNull()
            {
                this[this.tableSaleDetails.AdjFinanceColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAdjPersPropNull()
            {
                return this.IsNull(this.tableSaleDetails.AdjPersPropColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAdjPersPropNull()
            {
                this[this.tableSaleDetails.AdjPersPropColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAdjustOtherNull()
            {
                return this.IsNull(this.tableSaleDetails.AdjustOtherColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAdjustOtherNull()
            {
                this[this.tableSaleDetails.AdjustOtherColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAdjustedSquareFeetNull()
            {
                return this.IsNull(this.tableSaleDetails.AdjustedSquareFeetColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAdjustedSquareFeetNull()
            {
                this[this.tableSaleDetails.AdjustedSquareFeetColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCurrentEstimateNull()
            {
                return this.IsNull(this.tableSaleDetails.CurrentEstimateColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCurrentEstimateNull()
            {
                this[this.tableSaleDetails.CurrentEstimateColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCurrentPerSqFtNull()
            {
                return this.IsNull(this.tableSaleDetails.CurrentPerSqFtColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCurrentPerSqFtNull()
            {
                this[this.tableSaleDetails.CurrentPerSqFtColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCurrentRatioNull()
            {
                return this.IsNull(this.tableSaleDetails.CurrentRatioColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCurrentRatioNull()
            {
                this[this.tableSaleDetails.CurrentRatioColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAppraisalEstimateNull()
            {
                return this.IsNull(this.tableSaleDetails.AppraisalEstimateColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAppraisalEstimateNull()
            {
                this[this.tableSaleDetails.AppraisalEstimateColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAppraisalPerSqFtNull()
            {
                return this.IsNull(this.tableSaleDetails.AppraisalPerSqFtColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAppraisalPerSqFtNull()
            {
                this[this.tableSaleDetails.AppraisalPerSqFtColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAppraisalRatioNull()
            {
                return this.IsNull(this.tableSaleDetails.AppraisalRatioColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAppraisalRatioNull()
            {
                this[this.tableSaleDetails.AppraisalRatioColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAdvisoryIDNull()
            {
                return this.IsNull(this.tableSaleDetails.AdvisoryIDColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAdvisoryIDNull()
            {
                this[this.tableSaleDetails.AdvisoryIDColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAssignmentIDNull()
            {
                return this.IsNull(this.tableSaleDetails.AssignmentIDColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAssignmentIDNull()
            {
                this[this.tableSaleDetails.AssignmentIDColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStatusIDNull()
            {
                return this.IsNull(this.tableSaleDetails.StatusIDColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStatusIDNull()
            {
                this[this.tableSaleDetails.StatusIDColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAppraiserIDNull()
            {
                return this.IsNull(this.tableSaleDetails.AppraiserIDColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAppraiserIDNull()
            {
                this[this.tableSaleDetails.AppraiserIDColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsReviewDateNull()
            {
                return this.IsNull(this.tableSaleDetails.ReviewDateColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetReviewDateNull()
            {
                this[this.tableSaleDetails.ReviewDateColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLocalQualificationIDNull()
            {
                return this.IsNull(this.tableSaleDetails.LocalQualificationIDColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLocalQualificationIDNull()
            {
                this[this.tableSaleDetails.LocalQualificationIDColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsReviewNoteNull()
            {
                return this.IsNull(this.tableSaleDetails.ReviewNoteColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetReviewNoteNull()
            {
                this[this.tableSaleDetails.ReviewNoteColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRollYearNull()
            {
                return this.IsNull(this.tableSaleDetails.RollYearColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRollYearNull()
            {
                this[this.tableSaleDetails.RollYearColumn] = global::System.Convert.DBNull;
            }
        }

        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ParcelDetailsRow : global::System.Data.DataRow
        {

            private ParcelDetailsDataTable tableParcelDetails;

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ParcelDetailsRow(global::System.Data.DataRowBuilder rb) :
                base(rb)
            {
                this.tableParcelDetails = ((ParcelDetailsDataTable)(this.Table));
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SaleParcelID
            {
                get
                {
                    try
                    {
                        return ((int)(this[this.tableParcelDetails.SaleParcelIDColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'SaleParcelID\' in table \'ParcelDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableParcelDetails.SaleParcelIDColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int IsBaseParcel
            {
                get
                {
                    try
                    {
                        return ((int)(this[this.tableParcelDetails.IsBaseParcelColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsBaseParcel\' in table \'ParcelDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableParcelDetails.IsBaseParcelColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ParcelNumber
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableParcelDetails.ParcelNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'ParcelNumber\' in table \'ParcelDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableParcelDetails.ParcelNumberColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Acres
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableParcelDetails.AcresColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'Acres\' in table \'ParcelDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableParcelDetails.AcresColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DOR
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableParcelDetails.DORColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'DOR\' in table \'ParcelDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableParcelDetails.DORColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DORTooltip
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableParcelDetails.DORTooltipColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'DORTooltip\' in table \'ParcelDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableParcelDetails.DORTooltipColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Land
            {
                get
                {
                    try
                    {
                        return ((int)(this[this.tableParcelDetails.LandColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'Land\' in table \'ParcelDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableParcelDetails.LandColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Impr
            {
                get
                {
                    try
                    {
                        return ((int)(this[this.tableParcelDetails.ImprColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'Impr\' in table \'ParcelDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableParcelDetails.ImprColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Crop
            {
                get
                {
                    try
                    {
                        return ((int)(this[this.tableParcelDetails.CropColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'Crop\' in table \'ParcelDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableParcelDetails.CropColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Totals
            {
                get
                {
                    try
                    {
                        return ((int)(this[this.tableParcelDetails.TotalsColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'Totals\' in table \'ParcelDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableParcelDetails.TotalsColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ParcelID
            {
                get
                {
                    try
                    {
                        return ((int)(this[this.tableParcelDetails.ParcelIDColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'ParcelID\' in table \'ParcelDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableParcelDetails.ParcelIDColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSaleParcelIDNull()
            {
                return this.IsNull(this.tableParcelDetails.SaleParcelIDColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSaleParcelIDNull()
            {
                this[this.tableParcelDetails.SaleParcelIDColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsBaseParcelNull()
            {
                return this.IsNull(this.tableParcelDetails.IsBaseParcelColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsBaseParcelNull()
            {
                this[this.tableParcelDetails.IsBaseParcelColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsParcelNumberNull()
            {
                return this.IsNull(this.tableParcelDetails.ParcelNumberColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetParcelNumberNull()
            {
                this[this.tableParcelDetails.ParcelNumberColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAcresNull()
            {
                return this.IsNull(this.tableParcelDetails.AcresColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAcresNull()
            {
                this[this.tableParcelDetails.AcresColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDORNull()
            {
                return this.IsNull(this.tableParcelDetails.DORColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDORNull()
            {
                this[this.tableParcelDetails.DORColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDORTooltipNull()
            {
                return this.IsNull(this.tableParcelDetails.DORTooltipColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDORTooltipNull()
            {
                this[this.tableParcelDetails.DORTooltipColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLandNull()
            {
                return this.IsNull(this.tableParcelDetails.LandColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLandNull()
            {
                this[this.tableParcelDetails.LandColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsImprNull()
            {
                return this.IsNull(this.tableParcelDetails.ImprColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetImprNull()
            {
                this[this.tableParcelDetails.ImprColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCropNull()
            {
                return this.IsNull(this.tableParcelDetails.CropColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCropNull()
            {
                this[this.tableParcelDetails.CropColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalsNull()
            {
                return this.IsNull(this.tableParcelDetails.TotalsColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalsNull()
            {
                this[this.tableParcelDetails.TotalsColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsParcelIDNull()
            {
                return this.IsNull(this.tableParcelDetails.ParcelIDColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetParcelIDNull()
            {
                this[this.tableParcelDetails.ParcelIDColumn] = global::System.Convert.DBNull;
            }
        }

        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ValidRecordRow : global::System.Data.DataRow
        {

            private ValidRecordDataTable tableValidRecord;

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ValidRecordRow(global::System.Data.DataRowBuilder rb) :
                base(rb)
            {
                this.tableValidRecord = ((ValidRecordDataTable)(this.Table));
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IsValid
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableValidRecord.IsValidColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsValid\' in table \'ValidRecord\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableValidRecord.IsValidColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsValidNull()
            {
                return this.IsNull(this.tableValidRecord.IsValidColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsValidNull()
            {
                this[this.tableValidRecord.IsValidColumn] = global::System.Convert.DBNull;
            }
        }

        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ReturnMessageRow : global::System.Data.DataRow
        {

            private ReturnMessageDataTable tableReturnMessage;

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ReturnMessageRow(global::System.Data.DataRowBuilder rb) :
                base(rb)
            {
                this.tableReturnMessage = ((ReturnMessageDataTable)(this.Table));
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DialogText
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableReturnMessage.DialogTextColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'DialogText\' in table \'ReturnMessage\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableReturnMessage.DialogTextColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDialogTextNull()
            {
                return this.IsNull(this.tableReturnMessage.DialogTextColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDialogTextNull()
            {
                this[this.tableReturnMessage.DialogTextColumn] = global::System.Convert.DBNull;
            }
        }

        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class DeedTypeRowChangeEvent : global::System.EventArgs
        {

            private DeedTypeRow eventRow;

            private global::System.Data.DataRowAction eventAction;

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DeedTypeRowChangeEvent(DeedTypeRow row, global::System.Data.DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DeedTypeRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
        }

        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class StateListRowChangeEvent : global::System.EventArgs
        {

            private StateListRow eventRow;

            private global::System.Data.DataRowAction eventAction;

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StateListRowChangeEvent(StateListRow row, global::System.Data.DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StateListRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
        }

        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class AdvisoryRowChangeEvent : global::System.EventArgs
        {

            private AdvisoryRow eventRow;

            private global::System.Data.DataRowAction eventAction;

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AdvisoryRowChangeEvent(AdvisoryRow row, global::System.Data.DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AdvisoryRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
        }

        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class AssignmentRowChangeEvent : global::System.EventArgs
        {

            private AssignmentRow eventRow;

            private global::System.Data.DataRowAction eventAction;

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AssignmentRowChangeEvent(AssignmentRow row, global::System.Data.DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AssignmentRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
        }

        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class StatusRowChangeEvent : global::System.EventArgs
        {

            private StatusRow eventRow;

            private global::System.Data.DataRowAction eventAction;

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StatusRowChangeEvent(StatusRow row, global::System.Data.DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StatusRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
        }

        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ApprasiserRowChangeEvent : global::System.EventArgs
        {

            private ApprasiserRow eventRow;

            private global::System.Data.DataRowAction eventAction;

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ApprasiserRowChangeEvent(ApprasiserRow row, global::System.Data.DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ApprasiserRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
        }

        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class LocalQualificationRowChangeEvent : global::System.EventArgs
        {

            private LocalQualificationRow eventRow;

            private global::System.Data.DataRowAction eventAction;

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LocalQualificationRowChangeEvent(LocalQualificationRow row, global::System.Data.DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LocalQualificationRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
        }

        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class OwnerDetailsRowChangeEvent : global::System.EventArgs
        {

            private OwnerDetailsRow eventRow;

            private global::System.Data.DataRowAction eventAction;

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OwnerDetailsRowChangeEvent(OwnerDetailsRow row, global::System.Data.DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OwnerDetailsRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
        }

        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SaleDetailsRowChangeEvent : global::System.EventArgs
        {

            private SaleDetailsRow eventRow;

            private global::System.Data.DataRowAction eventAction;

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SaleDetailsRowChangeEvent(SaleDetailsRow row, global::System.Data.DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SaleDetailsRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
        }

        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ParcelDetailsRowChangeEvent : global::System.EventArgs
        {

            private ParcelDetailsRow eventRow;

            private global::System.Data.DataRowAction eventAction;

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ParcelDetailsRowChangeEvent(ParcelDetailsRow row, global::System.Data.DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ParcelDetailsRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
        }

        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ValidRecordRowChangeEvent : global::System.EventArgs
        {

            private ValidRecordRow eventRow;

            private global::System.Data.DataRowAction eventAction;

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ValidRecordRowChangeEvent(ValidRecordRow row, global::System.Data.DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ValidRecordRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
        }

        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ReturnMessageRowChangeEvent : global::System.EventArgs
        {

            private ReturnMessageRow eventRow;

            private global::System.Data.DataRowAction eventAction;

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReturnMessageRowChangeEvent(ReturnMessageRow row, global::System.Data.DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReturnMessageRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591