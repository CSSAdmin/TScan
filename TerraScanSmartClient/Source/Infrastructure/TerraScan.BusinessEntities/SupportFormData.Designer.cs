//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1433
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace TerraScan.BusinessEntities {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("SupportFormData")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class SupportFormData : global::System.Data.DataSet {
        
        private ListUsersDataTable tableListUsers;
        
        private GetFormDetailsDataTable tableGetFormDetails;
        
        private GetFormManagementDetailsDataTable tableGetFormManagementDetails;
        
        private FormCallTranslateDataTable tableFormCallTranslate;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public SupportFormData() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected SupportFormData(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["ListUsers"] != null)) {
                    base.Tables.Add(new ListUsersDataTable(ds.Tables["ListUsers"]));
                }
                if ((ds.Tables["GetFormDetails"] != null)) {
                    base.Tables.Add(new GetFormDetailsDataTable(ds.Tables["GetFormDetails"]));
                }
                if ((ds.Tables["GetFormManagementDetails"] != null)) {
                    base.Tables.Add(new GetFormManagementDetailsDataTable(ds.Tables["GetFormManagementDetails"]));
                }
                if ((ds.Tables["FormCallTranslate"] != null)) {
                    base.Tables.Add(new FormCallTranslateDataTable(ds.Tables["FormCallTranslate"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ListUsersDataTable ListUsers {
            get {
                return this.tableListUsers;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GetFormDetailsDataTable GetFormDetails {
            get {
                return this.tableGetFormDetails;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GetFormManagementDetailsDataTable GetFormManagementDetails {
            get {
                return this.tableGetFormManagementDetails;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public FormCallTranslateDataTable FormCallTranslate {
            get {
                return this.tableFormCallTranslate;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            SupportFormData cln = ((SupportFormData)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["ListUsers"] != null)) {
                    base.Tables.Add(new ListUsersDataTable(ds.Tables["ListUsers"]));
                }
                if ((ds.Tables["GetFormDetails"] != null)) {
                    base.Tables.Add(new GetFormDetailsDataTable(ds.Tables["GetFormDetails"]));
                }
                if ((ds.Tables["GetFormManagementDetails"] != null)) {
                    base.Tables.Add(new GetFormManagementDetailsDataTable(ds.Tables["GetFormManagementDetails"]));
                }
                if ((ds.Tables["FormCallTranslate"] != null)) {
                    base.Tables.Add(new FormCallTranslateDataTable(ds.Tables["FormCallTranslate"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableListUsers = ((ListUsersDataTable)(base.Tables["ListUsers"]));
            if ((initTable == true)) {
                if ((this.tableListUsers != null)) {
                    this.tableListUsers.InitVars();
                }
            }
            this.tableGetFormDetails = ((GetFormDetailsDataTable)(base.Tables["GetFormDetails"]));
            if ((initTable == true)) {
                if ((this.tableGetFormDetails != null)) {
                    this.tableGetFormDetails.InitVars();
                }
            }
            this.tableGetFormManagementDetails = ((GetFormManagementDetailsDataTable)(base.Tables["GetFormManagementDetails"]));
            if ((initTable == true)) {
                if ((this.tableGetFormManagementDetails != null)) {
                    this.tableGetFormManagementDetails.InitVars();
                }
            }
            this.tableFormCallTranslate = ((FormCallTranslateDataTable)(base.Tables["FormCallTranslate"]));
            if ((initTable == true)) {
                if ((this.tableFormCallTranslate != null)) {
                    this.tableFormCallTranslate.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "SupportFormData";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/SupportFormData.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableListUsers = new ListUsersDataTable();
            base.Tables.Add(this.tableListUsers);
            this.tableGetFormDetails = new GetFormDetailsDataTable();
            base.Tables.Add(this.tableGetFormDetails);
            this.tableGetFormManagementDetails = new GetFormManagementDetailsDataTable();
            base.Tables.Add(this.tableGetFormManagementDetails);
            this.tableFormCallTranslate = new FormCallTranslateDataTable();
            base.Tables.Add(this.tableFormCallTranslate);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeListUsers() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeGetFormDetails() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeGetFormManagementDetails() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeFormCallTranslate() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            SupportFormData ds = new SupportFormData();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void ListUsersRowChangeEventHandler(object sender, ListUsersRowChangeEvent e);
        
        public delegate void GetFormDetailsRowChangeEventHandler(object sender, GetFormDetailsRowChangeEvent e);
        
        public delegate void GetFormManagementDetailsRowChangeEventHandler(object sender, GetFormManagementDetailsRowChangeEvent e);
        
        public delegate void FormCallTranslateRowChangeEventHandler(object sender, FormCallTranslateRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ListUsersDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnName_Display;
            
            private global::System.Data.DataColumn columnUserID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListUsersDataTable() {
                this.TableName = "ListUsers";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListUsersDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ListUsersDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Name_DisplayColumn {
                get {
                    return this.columnName_Display;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UserIDColumn {
                get {
                    return this.columnUserID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListUsersRow this[int index] {
                get {
                    return ((ListUsersRow)(this.Rows[index]));
                }
            }
            
            public event ListUsersRowChangeEventHandler ListUsersRowChanging;
            
            public event ListUsersRowChangeEventHandler ListUsersRowChanged;
            
            public event ListUsersRowChangeEventHandler ListUsersRowDeleting;
            
            public event ListUsersRowChangeEventHandler ListUsersRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddListUsersRow(ListUsersRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListUsersRow AddListUsersRow(string Name_Display) {
                ListUsersRow rowListUsersRow = ((ListUsersRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Name_Display,
                        null};
                rowListUsersRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowListUsersRow);
                return rowListUsersRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListUsersRow FindByUserID(int UserID) {
                return ((ListUsersRow)(this.Rows.Find(new object[] {
                            UserID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ListUsersDataTable cln = ((ListUsersDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ListUsersDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnName_Display = base.Columns["Name_Display"];
                this.columnUserID = base.Columns["UserID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnName_Display = new global::System.Data.DataColumn("Name_Display", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnName_Display);
                this.columnUserID = new global::System.Data.DataColumn("UserID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUserID);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnUserID}, true));
                this.columnName_Display.MaxLength = 50;
                this.columnUserID.AutoIncrement = true;
                this.columnUserID.AllowDBNull = false;
                this.columnUserID.ReadOnly = true;
                this.columnUserID.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListUsersRow NewListUsersRow() {
                return ((ListUsersRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ListUsersRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ListUsersRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ListUsersRowChanged != null)) {
                    this.ListUsersRowChanged(this, new ListUsersRowChangeEvent(((ListUsersRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ListUsersRowChanging != null)) {
                    this.ListUsersRowChanging(this, new ListUsersRowChangeEvent(((ListUsersRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ListUsersRowDeleted != null)) {
                    this.ListUsersRowDeleted(this, new ListUsersRowChangeEvent(((ListUsersRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ListUsersRowDeleting != null)) {
                    this.ListUsersRowDeleting(this, new ListUsersRowChangeEvent(((ListUsersRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveListUsersRow(ListUsersRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                SupportFormData ds = new SupportFormData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ListUsersDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class GetFormDetailsDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnUSER_NAMES;
            
            private global::System.Data.DataColumn columnFormFile;
            
            private global::System.Data.DataColumn columnDescription;
            
            private global::System.Data.DataColumn columnMenuName;
            
            private global::System.Data.DataColumn columnMenuOrder;
            
            private global::System.Data.DataColumn columnMenuGroupID;
            
            private global::System.Data.DataColumn columnIsPermissionMenu;
            
            private global::System.Data.DataColumn columnIsPermissionOpen;
            
            private global::System.Data.DataColumn columnIsPermissionEdit;
            
            private global::System.Data.DataColumn columnIsPermissionAdd;
            
            private global::System.Data.DataColumn columnIsPermissionDelete;
            
            private global::System.Data.DataColumn columnIsSlice;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetFormDetailsDataTable() {
                this.TableName = "GetFormDetails";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetFormDetailsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected GetFormDetailsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn USER_NAMESColumn {
                get {
                    return this.columnUSER_NAMES;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FormFileColumn {
                get {
                    return this.columnFormFile;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MenuNameColumn {
                get {
                    return this.columnMenuName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MenuOrderColumn {
                get {
                    return this.columnMenuOrder;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MenuGroupIDColumn {
                get {
                    return this.columnMenuGroupID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsPermissionMenuColumn {
                get {
                    return this.columnIsPermissionMenu;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsPermissionOpenColumn {
                get {
                    return this.columnIsPermissionOpen;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsPermissionEditColumn {
                get {
                    return this.columnIsPermissionEdit;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsPermissionAddColumn {
                get {
                    return this.columnIsPermissionAdd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsPermissionDeleteColumn {
                get {
                    return this.columnIsPermissionDelete;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsSliceColumn {
                get {
                    return this.columnIsSlice;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetFormDetailsRow this[int index] {
                get {
                    return ((GetFormDetailsRow)(this.Rows[index]));
                }
            }
            
            public event GetFormDetailsRowChangeEventHandler GetFormDetailsRowChanging;
            
            public event GetFormDetailsRowChangeEventHandler GetFormDetailsRowChanged;
            
            public event GetFormDetailsRowChangeEventHandler GetFormDetailsRowDeleting;
            
            public event GetFormDetailsRowChangeEventHandler GetFormDetailsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddGetFormDetailsRow(GetFormDetailsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetFormDetailsRow AddGetFormDetailsRow(string USER_NAMES, string FormFile, string Description, string MenuName, byte MenuOrder, short MenuGroupID, string IsPermissionMenu, string IsPermissionOpen, string IsPermissionEdit, string IsPermissionAdd, string IsPermissionDelete, string IsSlice) {
                GetFormDetailsRow rowGetFormDetailsRow = ((GetFormDetailsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        USER_NAMES,
                        FormFile,
                        Description,
                        MenuName,
                        MenuOrder,
                        MenuGroupID,
                        IsPermissionMenu,
                        IsPermissionOpen,
                        IsPermissionEdit,
                        IsPermissionAdd,
                        IsPermissionDelete,
                        IsSlice};
                rowGetFormDetailsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowGetFormDetailsRow);
                return rowGetFormDetailsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                GetFormDetailsDataTable cln = ((GetFormDetailsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new GetFormDetailsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnUSER_NAMES = base.Columns["USER_NAMES"];
                this.columnFormFile = base.Columns["FormFile"];
                this.columnDescription = base.Columns["Description"];
                this.columnMenuName = base.Columns["MenuName"];
                this.columnMenuOrder = base.Columns["MenuOrder"];
                this.columnMenuGroupID = base.Columns["MenuGroupID"];
                this.columnIsPermissionMenu = base.Columns["IsPermissionMenu"];
                this.columnIsPermissionOpen = base.Columns["IsPermissionOpen"];
                this.columnIsPermissionEdit = base.Columns["IsPermissionEdit"];
                this.columnIsPermissionAdd = base.Columns["IsPermissionAdd"];
                this.columnIsPermissionDelete = base.Columns["IsPermissionDelete"];
                this.columnIsSlice = base.Columns["IsSlice"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnUSER_NAMES = new global::System.Data.DataColumn("USER_NAMES", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUSER_NAMES);
                this.columnFormFile = new global::System.Data.DataColumn("FormFile", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFormFile);
                this.columnDescription = new global::System.Data.DataColumn("Description", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescription);
                this.columnMenuName = new global::System.Data.DataColumn("MenuName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMenuName);
                this.columnMenuOrder = new global::System.Data.DataColumn("MenuOrder", typeof(byte), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMenuOrder);
                this.columnMenuGroupID = new global::System.Data.DataColumn("MenuGroupID", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMenuGroupID);
                this.columnIsPermissionMenu = new global::System.Data.DataColumn("IsPermissionMenu", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsPermissionMenu);
                this.columnIsPermissionOpen = new global::System.Data.DataColumn("IsPermissionOpen", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsPermissionOpen);
                this.columnIsPermissionEdit = new global::System.Data.DataColumn("IsPermissionEdit", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsPermissionEdit);
                this.columnIsPermissionAdd = new global::System.Data.DataColumn("IsPermissionAdd", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsPermissionAdd);
                this.columnIsPermissionDelete = new global::System.Data.DataColumn("IsPermissionDelete", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsPermissionDelete);
                this.columnIsSlice = new global::System.Data.DataColumn("IsSlice", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsSlice);
                this.columnUSER_NAMES.ReadOnly = true;
                this.columnUSER_NAMES.MaxLength = 63;
                this.columnFormFile.MaxLength = 50;
                this.columnDescription.AllowDBNull = false;
                this.columnDescription.MaxLength = 50;
                this.columnMenuName.AllowDBNull = false;
                this.columnMenuName.MaxLength = 50;
                this.columnMenuOrder.AllowDBNull = false;
                this.columnMenuGroupID.AllowDBNull = false;
                this.columnIsPermissionMenu.ReadOnly = true;
                this.columnIsPermissionMenu.MaxLength = 5;
                this.columnIsPermissionOpen.ReadOnly = true;
                this.columnIsPermissionOpen.MaxLength = 5;
                this.columnIsPermissionEdit.ReadOnly = true;
                this.columnIsPermissionEdit.MaxLength = 5;
                this.columnIsPermissionAdd.ReadOnly = true;
                this.columnIsPermissionAdd.MaxLength = 5;
                this.columnIsPermissionDelete.ReadOnly = true;
                this.columnIsPermissionDelete.MaxLength = 5;
                this.columnIsSlice.ReadOnly = true;
                this.columnIsSlice.MaxLength = 5;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetFormDetailsRow NewGetFormDetailsRow() {
                return ((GetFormDetailsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new GetFormDetailsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(GetFormDetailsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GetFormDetailsRowChanged != null)) {
                    this.GetFormDetailsRowChanged(this, new GetFormDetailsRowChangeEvent(((GetFormDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GetFormDetailsRowChanging != null)) {
                    this.GetFormDetailsRowChanging(this, new GetFormDetailsRowChangeEvent(((GetFormDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GetFormDetailsRowDeleted != null)) {
                    this.GetFormDetailsRowDeleted(this, new GetFormDetailsRowChangeEvent(((GetFormDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GetFormDetailsRowDeleting != null)) {
                    this.GetFormDetailsRowDeleting(this, new GetFormDetailsRowChangeEvent(((GetFormDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveGetFormDetailsRow(GetFormDetailsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                SupportFormData ds = new SupportFormData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "GetFormDetailsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class GetFormManagementDetailsDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnForm;
            
            private global::System.Data.DataColumn columnFormFile;
            
            private global::System.Data.DataColumn columnIsPermissionMenu;
            
            private global::System.Data.DataColumn columnIsPermissionOpen;
            
            private global::System.Data.DataColumn columnIsPermissionEdit;
            
            private global::System.Data.DataColumn columnIsPermissionAdd;
            
            private global::System.Data.DataColumn columnIsPermissionDelete;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetFormManagementDetailsDataTable() {
                this.TableName = "GetFormManagementDetails";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetFormManagementDetailsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected GetFormManagementDetailsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FormColumn {
                get {
                    return this.columnForm;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FormFileColumn {
                get {
                    return this.columnFormFile;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsPermissionMenuColumn {
                get {
                    return this.columnIsPermissionMenu;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsPermissionOpenColumn {
                get {
                    return this.columnIsPermissionOpen;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsPermissionEditColumn {
                get {
                    return this.columnIsPermissionEdit;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsPermissionAddColumn {
                get {
                    return this.columnIsPermissionAdd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsPermissionDeleteColumn {
                get {
                    return this.columnIsPermissionDelete;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetFormManagementDetailsRow this[int index] {
                get {
                    return ((GetFormManagementDetailsRow)(this.Rows[index]));
                }
            }
            
            public event GetFormManagementDetailsRowChangeEventHandler GetFormManagementDetailsRowChanging;
            
            public event GetFormManagementDetailsRowChangeEventHandler GetFormManagementDetailsRowChanged;
            
            public event GetFormManagementDetailsRowChangeEventHandler GetFormManagementDetailsRowDeleting;
            
            public event GetFormManagementDetailsRowChangeEventHandler GetFormManagementDetailsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddGetFormManagementDetailsRow(GetFormManagementDetailsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetFormManagementDetailsRow AddGetFormManagementDetailsRow(int Form, string FormFile, string IsPermissionMenu, string IsPermissionOpen, string IsPermissionEdit, string IsPermissionAdd, string IsPermissionDelete) {
                GetFormManagementDetailsRow rowGetFormManagementDetailsRow = ((GetFormManagementDetailsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Form,
                        FormFile,
                        IsPermissionMenu,
                        IsPermissionOpen,
                        IsPermissionEdit,
                        IsPermissionAdd,
                        IsPermissionDelete};
                rowGetFormManagementDetailsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowGetFormManagementDetailsRow);
                return rowGetFormManagementDetailsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                GetFormManagementDetailsDataTable cln = ((GetFormManagementDetailsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new GetFormManagementDetailsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnForm = base.Columns["Form"];
                this.columnFormFile = base.Columns["FormFile"];
                this.columnIsPermissionMenu = base.Columns["IsPermissionMenu"];
                this.columnIsPermissionOpen = base.Columns["IsPermissionOpen"];
                this.columnIsPermissionEdit = base.Columns["IsPermissionEdit"];
                this.columnIsPermissionAdd = base.Columns["IsPermissionAdd"];
                this.columnIsPermissionDelete = base.Columns["IsPermissionDelete"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnForm = new global::System.Data.DataColumn("Form", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnForm);
                this.columnFormFile = new global::System.Data.DataColumn("FormFile", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFormFile);
                this.columnIsPermissionMenu = new global::System.Data.DataColumn("IsPermissionMenu", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsPermissionMenu);
                this.columnIsPermissionOpen = new global::System.Data.DataColumn("IsPermissionOpen", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsPermissionOpen);
                this.columnIsPermissionEdit = new global::System.Data.DataColumn("IsPermissionEdit", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsPermissionEdit);
                this.columnIsPermissionAdd = new global::System.Data.DataColumn("IsPermissionAdd", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsPermissionAdd);
                this.columnIsPermissionDelete = new global::System.Data.DataColumn("IsPermissionDelete", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsPermissionDelete);
                this.columnForm.ReadOnly = true;
                this.columnFormFile.ReadOnly = true;
                this.columnFormFile.MaxLength = 50;
                this.columnIsPermissionMenu.ReadOnly = true;
                this.columnIsPermissionOpen.ReadOnly = true;
                this.columnIsPermissionEdit.ReadOnly = true;
                this.columnIsPermissionAdd.ReadOnly = true;
                this.columnIsPermissionDelete.ReadOnly = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetFormManagementDetailsRow NewGetFormManagementDetailsRow() {
                return ((GetFormManagementDetailsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new GetFormManagementDetailsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(GetFormManagementDetailsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GetFormManagementDetailsRowChanged != null)) {
                    this.GetFormManagementDetailsRowChanged(this, new GetFormManagementDetailsRowChangeEvent(((GetFormManagementDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GetFormManagementDetailsRowChanging != null)) {
                    this.GetFormManagementDetailsRowChanging(this, new GetFormManagementDetailsRowChangeEvent(((GetFormManagementDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GetFormManagementDetailsRowDeleted != null)) {
                    this.GetFormManagementDetailsRowDeleted(this, new GetFormManagementDetailsRowChangeEvent(((GetFormManagementDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GetFormManagementDetailsRowDeleting != null)) {
                    this.GetFormManagementDetailsRowDeleting(this, new GetFormManagementDetailsRowChangeEvent(((GetFormManagementDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveGetFormManagementDetailsRow(GetFormManagementDetailsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                SupportFormData ds = new SupportFormData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "GetFormManagementDetailsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class FormCallTranslateDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnForm;
            
            private global::System.Data.DataColumn columnParam1Out;
            
            private global::System.Data.DataColumn columnParam2;
            
            private global::System.Data.DataColumn columnParam3;
            
            private global::System.Data.DataColumn columnParam4;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FormCallTranslateDataTable() {
                this.TableName = "FormCallTranslate";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal FormCallTranslateDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected FormCallTranslateDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FormColumn {
                get {
                    return this.columnForm;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Param1OutColumn {
                get {
                    return this.columnParam1Out;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Param2Column {
                get {
                    return this.columnParam2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Param3Column {
                get {
                    return this.columnParam3;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Param4Column {
                get {
                    return this.columnParam4;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FormCallTranslateRow this[int index] {
                get {
                    return ((FormCallTranslateRow)(this.Rows[index]));
                }
            }
            
            public event FormCallTranslateRowChangeEventHandler FormCallTranslateRowChanging;
            
            public event FormCallTranslateRowChangeEventHandler FormCallTranslateRowChanged;
            
            public event FormCallTranslateRowChangeEventHandler FormCallTranslateRowDeleting;
            
            public event FormCallTranslateRowChangeEventHandler FormCallTranslateRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddFormCallTranslateRow(FormCallTranslateRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FormCallTranslateRow AddFormCallTranslateRow(int Form, int Param1Out, string Param2, string Param3, string Param4) {
                FormCallTranslateRow rowFormCallTranslateRow = ((FormCallTranslateRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Form,
                        Param1Out,
                        Param2,
                        Param3,
                        Param4};
                rowFormCallTranslateRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowFormCallTranslateRow);
                return rowFormCallTranslateRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                FormCallTranslateDataTable cln = ((FormCallTranslateDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new FormCallTranslateDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnForm = base.Columns["Form"];
                this.columnParam1Out = base.Columns["Param1Out"];
                this.columnParam2 = base.Columns["Param2"];
                this.columnParam3 = base.Columns["Param3"];
                this.columnParam4 = base.Columns["Param4"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnForm = new global::System.Data.DataColumn("Form", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnForm);
                this.columnParam1Out = new global::System.Data.DataColumn("Param1Out", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnParam1Out);
                this.columnParam2 = new global::System.Data.DataColumn("Param2", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnParam2);
                this.columnParam3 = new global::System.Data.DataColumn("Param3", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnParam3);
                this.columnParam4 = new global::System.Data.DataColumn("Param4", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnParam4);
                this.columnForm.ReadOnly = true;
                this.columnParam1Out.ReadOnly = true;
                this.columnParam2.ReadOnly = true;
                this.columnParam3.ReadOnly = true;
                this.columnParam4.ReadOnly = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FormCallTranslateRow NewFormCallTranslateRow() {
                return ((FormCallTranslateRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new FormCallTranslateRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(FormCallTranslateRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.FormCallTranslateRowChanged != null)) {
                    this.FormCallTranslateRowChanged(this, new FormCallTranslateRowChangeEvent(((FormCallTranslateRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.FormCallTranslateRowChanging != null)) {
                    this.FormCallTranslateRowChanging(this, new FormCallTranslateRowChangeEvent(((FormCallTranslateRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.FormCallTranslateRowDeleted != null)) {
                    this.FormCallTranslateRowDeleted(this, new FormCallTranslateRowChangeEvent(((FormCallTranslateRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.FormCallTranslateRowDeleting != null)) {
                    this.FormCallTranslateRowDeleting(this, new FormCallTranslateRowChangeEvent(((FormCallTranslateRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveFormCallTranslateRow(FormCallTranslateRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                SupportFormData ds = new SupportFormData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "FormCallTranslateDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ListUsersRow : global::System.Data.DataRow {
            
            private ListUsersDataTable tableListUsers;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListUsersRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableListUsers = ((ListUsersDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name_Display {
                get {
                    try {
                        return ((string)(this[this.tableListUsers.Name_DisplayColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Name_Display\' in table \'ListUsers\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListUsers.Name_DisplayColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int UserID {
                get {
                    return ((int)(this[this.tableListUsers.UserIDColumn]));
                }
                set {
                    this[this.tableListUsers.UserIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsName_DisplayNull() {
                return this.IsNull(this.tableListUsers.Name_DisplayColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetName_DisplayNull() {
                this[this.tableListUsers.Name_DisplayColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class GetFormDetailsRow : global::System.Data.DataRow {
            
            private GetFormDetailsDataTable tableGetFormDetails;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetFormDetailsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableGetFormDetails = ((GetFormDetailsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string USER_NAMES {
                get {
                    try {
                        return ((string)(this[this.tableGetFormDetails.USER_NAMESColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'USER_NAMES\' in table \'GetFormDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetFormDetails.USER_NAMESColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FormFile {
                get {
                    try {
                        return ((string)(this[this.tableGetFormDetails.FormFileColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FormFile\' in table \'GetFormDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetFormDetails.FormFileColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Description {
                get {
                    return ((string)(this[this.tableGetFormDetails.DescriptionColumn]));
                }
                set {
                    this[this.tableGetFormDetails.DescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MenuName {
                get {
                    return ((string)(this[this.tableGetFormDetails.MenuNameColumn]));
                }
                set {
                    this[this.tableGetFormDetails.MenuNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte MenuOrder {
                get {
                    return ((byte)(this[this.tableGetFormDetails.MenuOrderColumn]));
                }
                set {
                    this[this.tableGetFormDetails.MenuOrderColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short MenuGroupID {
                get {
                    return ((short)(this[this.tableGetFormDetails.MenuGroupIDColumn]));
                }
                set {
                    this[this.tableGetFormDetails.MenuGroupIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IsPermissionMenu {
                get {
                    try {
                        return ((string)(this[this.tableGetFormDetails.IsPermissionMenuColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsPermissionMenu\' in table \'GetFormDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetFormDetails.IsPermissionMenuColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IsPermissionOpen {
                get {
                    try {
                        return ((string)(this[this.tableGetFormDetails.IsPermissionOpenColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsPermissionOpen\' in table \'GetFormDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetFormDetails.IsPermissionOpenColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IsPermissionEdit {
                get {
                    try {
                        return ((string)(this[this.tableGetFormDetails.IsPermissionEditColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsPermissionEdit\' in table \'GetFormDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetFormDetails.IsPermissionEditColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IsPermissionAdd {
                get {
                    try {
                        return ((string)(this[this.tableGetFormDetails.IsPermissionAddColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsPermissionAdd\' in table \'GetFormDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetFormDetails.IsPermissionAddColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IsPermissionDelete {
                get {
                    try {
                        return ((string)(this[this.tableGetFormDetails.IsPermissionDeleteColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsPermissionDelete\' in table \'GetFormDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetFormDetails.IsPermissionDeleteColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IsSlice {
                get {
                    try {
                        return ((string)(this[this.tableGetFormDetails.IsSliceColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsSlice\' in table \'GetFormDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetFormDetails.IsSliceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUSER_NAMESNull() {
                return this.IsNull(this.tableGetFormDetails.USER_NAMESColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUSER_NAMESNull() {
                this[this.tableGetFormDetails.USER_NAMESColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFormFileNull() {
                return this.IsNull(this.tableGetFormDetails.FormFileColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFormFileNull() {
                this[this.tableGetFormDetails.FormFileColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsPermissionMenuNull() {
                return this.IsNull(this.tableGetFormDetails.IsPermissionMenuColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsPermissionMenuNull() {
                this[this.tableGetFormDetails.IsPermissionMenuColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsPermissionOpenNull() {
                return this.IsNull(this.tableGetFormDetails.IsPermissionOpenColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsPermissionOpenNull() {
                this[this.tableGetFormDetails.IsPermissionOpenColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsPermissionEditNull() {
                return this.IsNull(this.tableGetFormDetails.IsPermissionEditColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsPermissionEditNull() {
                this[this.tableGetFormDetails.IsPermissionEditColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsPermissionAddNull() {
                return this.IsNull(this.tableGetFormDetails.IsPermissionAddColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsPermissionAddNull() {
                this[this.tableGetFormDetails.IsPermissionAddColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsPermissionDeleteNull() {
                return this.IsNull(this.tableGetFormDetails.IsPermissionDeleteColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsPermissionDeleteNull() {
                this[this.tableGetFormDetails.IsPermissionDeleteColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsSliceNull() {
                return this.IsNull(this.tableGetFormDetails.IsSliceColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsSliceNull() {
                this[this.tableGetFormDetails.IsSliceColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class GetFormManagementDetailsRow : global::System.Data.DataRow {
            
            private GetFormManagementDetailsDataTable tableGetFormManagementDetails;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetFormManagementDetailsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableGetFormManagementDetails = ((GetFormManagementDetailsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Form {
                get {
                    try {
                        return ((int)(this[this.tableGetFormManagementDetails.FormColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Form\' in table \'GetFormManagementDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetFormManagementDetails.FormColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FormFile {
                get {
                    try {
                        return ((string)(this[this.tableGetFormManagementDetails.FormFileColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FormFile\' in table \'GetFormManagementDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetFormManagementDetails.FormFileColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IsPermissionMenu {
                get {
                    try {
                        return ((string)(this[this.tableGetFormManagementDetails.IsPermissionMenuColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsPermissionMenu\' in table \'GetFormManagementDetails\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tableGetFormManagementDetails.IsPermissionMenuColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IsPermissionOpen {
                get {
                    try {
                        return ((string)(this[this.tableGetFormManagementDetails.IsPermissionOpenColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsPermissionOpen\' in table \'GetFormManagementDetails\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tableGetFormManagementDetails.IsPermissionOpenColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IsPermissionEdit {
                get {
                    try {
                        return ((string)(this[this.tableGetFormManagementDetails.IsPermissionEditColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsPermissionEdit\' in table \'GetFormManagementDetails\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tableGetFormManagementDetails.IsPermissionEditColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IsPermissionAdd {
                get {
                    try {
                        return ((string)(this[this.tableGetFormManagementDetails.IsPermissionAddColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsPermissionAdd\' in table \'GetFormManagementDetails\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableGetFormManagementDetails.IsPermissionAddColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IsPermissionDelete {
                get {
                    try {
                        return ((string)(this[this.tableGetFormManagementDetails.IsPermissionDeleteColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsPermissionDelete\' in table \'GetFormManagementDetails\' is " +
                                "DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetFormManagementDetails.IsPermissionDeleteColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFormNull() {
                return this.IsNull(this.tableGetFormManagementDetails.FormColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFormNull() {
                this[this.tableGetFormManagementDetails.FormColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFormFileNull() {
                return this.IsNull(this.tableGetFormManagementDetails.FormFileColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFormFileNull() {
                this[this.tableGetFormManagementDetails.FormFileColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsPermissionMenuNull() {
                return this.IsNull(this.tableGetFormManagementDetails.IsPermissionMenuColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsPermissionMenuNull() {
                this[this.tableGetFormManagementDetails.IsPermissionMenuColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsPermissionOpenNull() {
                return this.IsNull(this.tableGetFormManagementDetails.IsPermissionOpenColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsPermissionOpenNull() {
                this[this.tableGetFormManagementDetails.IsPermissionOpenColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsPermissionEditNull() {
                return this.IsNull(this.tableGetFormManagementDetails.IsPermissionEditColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsPermissionEditNull() {
                this[this.tableGetFormManagementDetails.IsPermissionEditColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsPermissionAddNull() {
                return this.IsNull(this.tableGetFormManagementDetails.IsPermissionAddColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsPermissionAddNull() {
                this[this.tableGetFormManagementDetails.IsPermissionAddColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsPermissionDeleteNull() {
                return this.IsNull(this.tableGetFormManagementDetails.IsPermissionDeleteColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsPermissionDeleteNull() {
                this[this.tableGetFormManagementDetails.IsPermissionDeleteColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class FormCallTranslateRow : global::System.Data.DataRow {
            
            private FormCallTranslateDataTable tableFormCallTranslate;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal FormCallTranslateRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableFormCallTranslate = ((FormCallTranslateDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Form {
                get {
                    try {
                        return ((int)(this[this.tableFormCallTranslate.FormColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Form\' in table \'FormCallTranslate\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFormCallTranslate.FormColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Param1Out {
                get {
                    try {
                        return ((int)(this[this.tableFormCallTranslate.Param1OutColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Param1Out\' in table \'FormCallTranslate\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFormCallTranslate.Param1OutColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Param2 {
                get {
                    try {
                        return ((string)(this[this.tableFormCallTranslate.Param2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Param2\' in table \'FormCallTranslate\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFormCallTranslate.Param2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Param3 {
                get {
                    try {
                        return ((string)(this[this.tableFormCallTranslate.Param3Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Param3\' in table \'FormCallTranslate\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFormCallTranslate.Param3Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Param4 {
                get {
                    try {
                        return ((string)(this[this.tableFormCallTranslate.Param4Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Param4\' in table \'FormCallTranslate\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFormCallTranslate.Param4Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFormNull() {
                return this.IsNull(this.tableFormCallTranslate.FormColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFormNull() {
                this[this.tableFormCallTranslate.FormColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsParam1OutNull() {
                return this.IsNull(this.tableFormCallTranslate.Param1OutColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetParam1OutNull() {
                this[this.tableFormCallTranslate.Param1OutColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsParam2Null() {
                return this.IsNull(this.tableFormCallTranslate.Param2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetParam2Null() {
                this[this.tableFormCallTranslate.Param2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsParam3Null() {
                return this.IsNull(this.tableFormCallTranslate.Param3Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetParam3Null() {
                this[this.tableFormCallTranslate.Param3Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsParam4Null() {
                return this.IsNull(this.tableFormCallTranslate.Param4Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetParam4Null() {
                this[this.tableFormCallTranslate.Param4Column] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ListUsersRowChangeEvent : global::System.EventArgs {
            
            private ListUsersRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListUsersRowChangeEvent(ListUsersRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListUsersRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class GetFormDetailsRowChangeEvent : global::System.EventArgs {
            
            private GetFormDetailsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetFormDetailsRowChangeEvent(GetFormDetailsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetFormDetailsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class GetFormManagementDetailsRowChangeEvent : global::System.EventArgs {
            
            private GetFormManagementDetailsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetFormManagementDetailsRowChangeEvent(GetFormManagementDetailsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetFormManagementDetailsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class FormCallTranslateRowChangeEvent : global::System.EventArgs {
            
            private FormCallTranslateRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FormCallTranslateRowChangeEvent(FormCallTranslateRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FormCallTranslateRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591