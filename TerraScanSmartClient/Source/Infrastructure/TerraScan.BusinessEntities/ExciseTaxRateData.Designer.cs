//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1433
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace TerraScan.BusinessEntities {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("ExciseTaxRateData")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class ExciseTaxRateData : global::System.Data.DataSet {
        
        private ListExciseTaxRateDataTable tableListExciseTaxRate;
        
        private SaveExciseTaxRateDataTable tableSaveExciseTaxRate;
        
        private GetExciseTaxAccountInfoDataTable tableGetExciseTaxAccountInfo;
        
        private GetExciseTaxRateDataTable tableGetExciseTaxRate;
        
        private LocalTypeDataTable tableLocalType;
        
        private GetDistrictNameDataTable tableGetDistrictName;
        
        private GetAccountNameDataTable tableGetAccountName;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ExciseTaxRateData() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected ExciseTaxRateData(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["ListExciseTaxRate"] != null)) {
                    base.Tables.Add(new ListExciseTaxRateDataTable(ds.Tables["ListExciseTaxRate"]));
                }
                if ((ds.Tables["SaveExciseTaxRate"] != null)) {
                    base.Tables.Add(new SaveExciseTaxRateDataTable(ds.Tables["SaveExciseTaxRate"]));
                }
                if ((ds.Tables["GetExciseTaxAccountInfo"] != null)) {
                    base.Tables.Add(new GetExciseTaxAccountInfoDataTable(ds.Tables["GetExciseTaxAccountInfo"]));
                }
                if ((ds.Tables["GetExciseTaxRate"] != null)) {
                    base.Tables.Add(new GetExciseTaxRateDataTable(ds.Tables["GetExciseTaxRate"]));
                }
                if ((ds.Tables["LocalType"] != null)) {
                    base.Tables.Add(new LocalTypeDataTable(ds.Tables["LocalType"]));
                }
                if ((ds.Tables["GetDistrictName"] != null)) {
                    base.Tables.Add(new GetDistrictNameDataTable(ds.Tables["GetDistrictName"]));
                }
                if ((ds.Tables["GetAccountName"] != null)) {
                    base.Tables.Add(new GetAccountNameDataTable(ds.Tables["GetAccountName"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ListExciseTaxRateDataTable ListExciseTaxRate {
            get {
                return this.tableListExciseTaxRate;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SaveExciseTaxRateDataTable SaveExciseTaxRate {
            get {
                return this.tableSaveExciseTaxRate;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GetExciseTaxAccountInfoDataTable GetExciseTaxAccountInfo {
            get {
                return this.tableGetExciseTaxAccountInfo;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GetExciseTaxRateDataTable GetExciseTaxRate {
            get {
                return this.tableGetExciseTaxRate;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public LocalTypeDataTable LocalType {
            get {
                return this.tableLocalType;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GetDistrictNameDataTable GetDistrictName {
            get {
                return this.tableGetDistrictName;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GetAccountNameDataTable GetAccountName {
            get {
                return this.tableGetAccountName;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            ExciseTaxRateData cln = ((ExciseTaxRateData)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["ListExciseTaxRate"] != null)) {
                    base.Tables.Add(new ListExciseTaxRateDataTable(ds.Tables["ListExciseTaxRate"]));
                }
                if ((ds.Tables["SaveExciseTaxRate"] != null)) {
                    base.Tables.Add(new SaveExciseTaxRateDataTable(ds.Tables["SaveExciseTaxRate"]));
                }
                if ((ds.Tables["GetExciseTaxAccountInfo"] != null)) {
                    base.Tables.Add(new GetExciseTaxAccountInfoDataTable(ds.Tables["GetExciseTaxAccountInfo"]));
                }
                if ((ds.Tables["GetExciseTaxRate"] != null)) {
                    base.Tables.Add(new GetExciseTaxRateDataTable(ds.Tables["GetExciseTaxRate"]));
                }
                if ((ds.Tables["LocalType"] != null)) {
                    base.Tables.Add(new LocalTypeDataTable(ds.Tables["LocalType"]));
                }
                if ((ds.Tables["GetDistrictName"] != null)) {
                    base.Tables.Add(new GetDistrictNameDataTable(ds.Tables["GetDistrictName"]));
                }
                if ((ds.Tables["GetAccountName"] != null)) {
                    base.Tables.Add(new GetAccountNameDataTable(ds.Tables["GetAccountName"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableListExciseTaxRate = ((ListExciseTaxRateDataTable)(base.Tables["ListExciseTaxRate"]));
            if ((initTable == true)) {
                if ((this.tableListExciseTaxRate != null)) {
                    this.tableListExciseTaxRate.InitVars();
                }
            }
            this.tableSaveExciseTaxRate = ((SaveExciseTaxRateDataTable)(base.Tables["SaveExciseTaxRate"]));
            if ((initTable == true)) {
                if ((this.tableSaveExciseTaxRate != null)) {
                    this.tableSaveExciseTaxRate.InitVars();
                }
            }
            this.tableGetExciseTaxAccountInfo = ((GetExciseTaxAccountInfoDataTable)(base.Tables["GetExciseTaxAccountInfo"]));
            if ((initTable == true)) {
                if ((this.tableGetExciseTaxAccountInfo != null)) {
                    this.tableGetExciseTaxAccountInfo.InitVars();
                }
            }
            this.tableGetExciseTaxRate = ((GetExciseTaxRateDataTable)(base.Tables["GetExciseTaxRate"]));
            if ((initTable == true)) {
                if ((this.tableGetExciseTaxRate != null)) {
                    this.tableGetExciseTaxRate.InitVars();
                }
            }
            this.tableLocalType = ((LocalTypeDataTable)(base.Tables["LocalType"]));
            if ((initTable == true)) {
                if ((this.tableLocalType != null)) {
                    this.tableLocalType.InitVars();
                }
            }
            this.tableGetDistrictName = ((GetDistrictNameDataTable)(base.Tables["GetDistrictName"]));
            if ((initTable == true)) {
                if ((this.tableGetDistrictName != null)) {
                    this.tableGetDistrictName.InitVars();
                }
            }
            this.tableGetAccountName = ((GetAccountNameDataTable)(base.Tables["GetAccountName"]));
            if ((initTable == true)) {
                if ((this.tableGetAccountName != null)) {
                    this.tableGetAccountName.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "ExciseTaxRateData";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/ExciseTaxRateData.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableListExciseTaxRate = new ListExciseTaxRateDataTable();
            base.Tables.Add(this.tableListExciseTaxRate);
            this.tableSaveExciseTaxRate = new SaveExciseTaxRateDataTable();
            base.Tables.Add(this.tableSaveExciseTaxRate);
            this.tableGetExciseTaxAccountInfo = new GetExciseTaxAccountInfoDataTable();
            base.Tables.Add(this.tableGetExciseTaxAccountInfo);
            this.tableGetExciseTaxRate = new GetExciseTaxRateDataTable();
            base.Tables.Add(this.tableGetExciseTaxRate);
            this.tableLocalType = new LocalTypeDataTable();
            base.Tables.Add(this.tableLocalType);
            this.tableGetDistrictName = new GetDistrictNameDataTable();
            base.Tables.Add(this.tableGetDistrictName);
            this.tableGetAccountName = new GetAccountNameDataTable();
            base.Tables.Add(this.tableGetAccountName);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeListExciseTaxRate() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSaveExciseTaxRate() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeGetExciseTaxAccountInfo() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeGetExciseTaxRate() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeLocalType() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeGetDistrictName() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeGetAccountName() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            ExciseTaxRateData ds = new ExciseTaxRateData();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void ListExciseTaxRateRowChangeEventHandler(object sender, ListExciseTaxRateRowChangeEvent e);
        
        public delegate void SaveExciseTaxRateRowChangeEventHandler(object sender, SaveExciseTaxRateRowChangeEvent e);
        
        public delegate void GetExciseTaxAccountInfoRowChangeEventHandler(object sender, GetExciseTaxAccountInfoRowChangeEvent e);
        
        public delegate void GetExciseTaxRateRowChangeEventHandler(object sender, GetExciseTaxRateRowChangeEvent e);
        
        public delegate void LocalTypeRowChangeEventHandler(object sender, LocalTypeRowChangeEvent e);
        
        public delegate void GetDistrictNameRowChangeEventHandler(object sender, GetDistrictNameRowChangeEvent e);
        
        public delegate void GetAccountNameRowChangeEventHandler(object sender, GetAccountNameRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ListExciseTaxRateDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnKeyID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListExciseTaxRateDataTable() {
                this.TableName = "ListExciseTaxRate";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListExciseTaxRateDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ListExciseTaxRateDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn KeyIDColumn {
                get {
                    return this.columnKeyID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListExciseTaxRateRow this[int index] {
                get {
                    return ((ListExciseTaxRateRow)(this.Rows[index]));
                }
            }
            
            public event ListExciseTaxRateRowChangeEventHandler ListExciseTaxRateRowChanging;
            
            public event ListExciseTaxRateRowChangeEventHandler ListExciseTaxRateRowChanged;
            
            public event ListExciseTaxRateRowChangeEventHandler ListExciseTaxRateRowDeleting;
            
            public event ListExciseTaxRateRowChangeEventHandler ListExciseTaxRateRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddListExciseTaxRateRow(ListExciseTaxRateRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListExciseTaxRateRow AddListExciseTaxRateRow(int KeyID) {
                ListExciseTaxRateRow rowListExciseTaxRateRow = ((ListExciseTaxRateRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        KeyID};
                rowListExciseTaxRateRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowListExciseTaxRateRow);
                return rowListExciseTaxRateRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ListExciseTaxRateDataTable cln = ((ListExciseTaxRateDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ListExciseTaxRateDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnKeyID = base.Columns["KeyID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnKeyID = new global::System.Data.DataColumn("KeyID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnKeyID);
                this.columnKeyID.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListExciseTaxRateRow NewListExciseTaxRateRow() {
                return ((ListExciseTaxRateRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ListExciseTaxRateRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ListExciseTaxRateRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ListExciseTaxRateRowChanged != null)) {
                    this.ListExciseTaxRateRowChanged(this, new ListExciseTaxRateRowChangeEvent(((ListExciseTaxRateRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ListExciseTaxRateRowChanging != null)) {
                    this.ListExciseTaxRateRowChanging(this, new ListExciseTaxRateRowChangeEvent(((ListExciseTaxRateRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ListExciseTaxRateRowDeleted != null)) {
                    this.ListExciseTaxRateRowDeleted(this, new ListExciseTaxRateRowChangeEvent(((ListExciseTaxRateRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ListExciseTaxRateRowDeleting != null)) {
                    this.ListExciseTaxRateRowDeleting(this, new ListExciseTaxRateRowChangeEvent(((ListExciseTaxRateRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveListExciseTaxRateRow(ListExciseTaxRateRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ExciseTaxRateData ds = new ExciseTaxRateData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ListExciseTaxRateDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SaveExciseTaxRateDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnExciseRateID;
            
            private global::System.Data.DataColumn columnDistrictID;
            
            private global::System.Data.DataColumn columnAdminFee;
            
            private global::System.Data.DataColumn columnTransFee;
            
            private global::System.Data.DataColumn columnTechFee;
            
            private global::System.Data.DataColumn columnYear;
            
            private global::System.Data.DataColumn columnLocalTaxRate;
            
            private global::System.Data.DataColumn columnIsCounty;
            
            private global::System.Data.DataColumn columnDescription;
            
            private global::System.Data.DataColumn columnAdminAcct;
            
            private global::System.Data.DataColumn columnTransFeeAcct;
            
            private global::System.Data.DataColumn columnTechFeeAcct;
            
            private global::System.Data.DataColumn columnStateTaxAcct;
            
            private global::System.Data.DataColumn columnStateIntAcct;
            
            private global::System.Data.DataColumn columnStatePenAcct;
            
            private global::System.Data.DataColumn columnLocalTaxAcct;
            
            private global::System.Data.DataColumn columnLocalIntAcct;
            
            private global::System.Data.DataColumn columnLocalPenAcct;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SaveExciseTaxRateDataTable() {
                this.TableName = "SaveExciseTaxRate";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SaveExciseTaxRateDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SaveExciseTaxRateDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ExciseRateIDColumn {
                get {
                    return this.columnExciseRateID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DistrictIDColumn {
                get {
                    return this.columnDistrictID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AdminFeeColumn {
                get {
                    return this.columnAdminFee;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TransFeeColumn {
                get {
                    return this.columnTransFee;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TechFeeColumn {
                get {
                    return this.columnTechFee;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn YearColumn {
                get {
                    return this.columnYear;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LocalTaxRateColumn {
                get {
                    return this.columnLocalTaxRate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsCountyColumn {
                get {
                    return this.columnIsCounty;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AdminAcctColumn {
                get {
                    return this.columnAdminAcct;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TransFeeAcctColumn {
                get {
                    return this.columnTransFeeAcct;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TechFeeAcctColumn {
                get {
                    return this.columnTechFeeAcct;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StateTaxAcctColumn {
                get {
                    return this.columnStateTaxAcct;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StateIntAcctColumn {
                get {
                    return this.columnStateIntAcct;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StatePenAcctColumn {
                get {
                    return this.columnStatePenAcct;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LocalTaxAcctColumn {
                get {
                    return this.columnLocalTaxAcct;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LocalIntAcctColumn {
                get {
                    return this.columnLocalIntAcct;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LocalPenAcctColumn {
                get {
                    return this.columnLocalPenAcct;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SaveExciseTaxRateRow this[int index] {
                get {
                    return ((SaveExciseTaxRateRow)(this.Rows[index]));
                }
            }
            
            public event SaveExciseTaxRateRowChangeEventHandler SaveExciseTaxRateRowChanging;
            
            public event SaveExciseTaxRateRowChangeEventHandler SaveExciseTaxRateRowChanged;
            
            public event SaveExciseTaxRateRowChangeEventHandler SaveExciseTaxRateRowDeleting;
            
            public event SaveExciseTaxRateRowChangeEventHandler SaveExciseTaxRateRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSaveExciseTaxRateRow(SaveExciseTaxRateRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SaveExciseTaxRateRow AddSaveExciseTaxRateRow(
                        int ExciseRateID, 
                        int DistrictID, 
                        decimal AdminFee, 
                        decimal TransFee, 
                        decimal TechFee, 
                        int Year, 
                        decimal LocalTaxRate, 
                        int IsCounty, 
                        string Description, 
                        int AdminAcct, 
                        int TransFeeAcct, 
                        int TechFeeAcct, 
                        int StateTaxAcct, 
                        int StateIntAcct, 
                        int StatePenAcct, 
                        int LocalTaxAcct, 
                        int LocalIntAcct, 
                        int LocalPenAcct) {
                SaveExciseTaxRateRow rowSaveExciseTaxRateRow = ((SaveExciseTaxRateRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ExciseRateID,
                        DistrictID,
                        AdminFee,
                        TransFee,
                        TechFee,
                        Year,
                        LocalTaxRate,
                        IsCounty,
                        Description,
                        AdminAcct,
                        TransFeeAcct,
                        TechFeeAcct,
                        StateTaxAcct,
                        StateIntAcct,
                        StatePenAcct,
                        LocalTaxAcct,
                        LocalIntAcct,
                        LocalPenAcct};
                rowSaveExciseTaxRateRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowSaveExciseTaxRateRow);
                return rowSaveExciseTaxRateRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                SaveExciseTaxRateDataTable cln = ((SaveExciseTaxRateDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new SaveExciseTaxRateDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnExciseRateID = base.Columns["ExciseRateID"];
                this.columnDistrictID = base.Columns["DistrictID"];
                this.columnAdminFee = base.Columns["AdminFee"];
                this.columnTransFee = base.Columns["TransFee"];
                this.columnTechFee = base.Columns["TechFee"];
                this.columnYear = base.Columns["Year"];
                this.columnLocalTaxRate = base.Columns["LocalTaxRate"];
                this.columnIsCounty = base.Columns["IsCounty"];
                this.columnDescription = base.Columns["Description"];
                this.columnAdminAcct = base.Columns["AdminAcct"];
                this.columnTransFeeAcct = base.Columns["TransFeeAcct"];
                this.columnTechFeeAcct = base.Columns["TechFeeAcct"];
                this.columnStateTaxAcct = base.Columns["StateTaxAcct"];
                this.columnStateIntAcct = base.Columns["StateIntAcct"];
                this.columnStatePenAcct = base.Columns["StatePenAcct"];
                this.columnLocalTaxAcct = base.Columns["LocalTaxAcct"];
                this.columnLocalIntAcct = base.Columns["LocalIntAcct"];
                this.columnLocalPenAcct = base.Columns["LocalPenAcct"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnExciseRateID = new global::System.Data.DataColumn("ExciseRateID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnExciseRateID);
                this.columnDistrictID = new global::System.Data.DataColumn("DistrictID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDistrictID);
                this.columnAdminFee = new global::System.Data.DataColumn("AdminFee", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAdminFee);
                this.columnTransFee = new global::System.Data.DataColumn("TransFee", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTransFee);
                this.columnTechFee = new global::System.Data.DataColumn("TechFee", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTechFee);
                this.columnYear = new global::System.Data.DataColumn("Year", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnYear);
                this.columnLocalTaxRate = new global::System.Data.DataColumn("LocalTaxRate", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLocalTaxRate);
                this.columnIsCounty = new global::System.Data.DataColumn("IsCounty", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsCounty);
                this.columnDescription = new global::System.Data.DataColumn("Description", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescription);
                this.columnAdminAcct = new global::System.Data.DataColumn("AdminAcct", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAdminAcct);
                this.columnTransFeeAcct = new global::System.Data.DataColumn("TransFeeAcct", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTransFeeAcct);
                this.columnTechFeeAcct = new global::System.Data.DataColumn("TechFeeAcct", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTechFeeAcct);
                this.columnStateTaxAcct = new global::System.Data.DataColumn("StateTaxAcct", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStateTaxAcct);
                this.columnStateIntAcct = new global::System.Data.DataColumn("StateIntAcct", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStateIntAcct);
                this.columnStatePenAcct = new global::System.Data.DataColumn("StatePenAcct", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStatePenAcct);
                this.columnLocalTaxAcct = new global::System.Data.DataColumn("LocalTaxAcct", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLocalTaxAcct);
                this.columnLocalIntAcct = new global::System.Data.DataColumn("LocalIntAcct", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLocalIntAcct);
                this.columnLocalPenAcct = new global::System.Data.DataColumn("LocalPenAcct", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLocalPenAcct);
                this.columnDistrictID.AllowDBNull = false;
                this.columnAdminFee.AllowDBNull = false;
                this.columnTransFee.AllowDBNull = false;
                this.columnTechFee.AllowDBNull = false;
                this.columnYear.AllowDBNull = false;
                this.columnLocalTaxRate.AllowDBNull = false;
                this.columnIsCounty.AllowDBNull = false;
                this.columnDescription.MaxLength = 50;
                this.columnAdminAcct.AllowDBNull = false;
                this.columnLocalPenAcct.ReadOnly = true;
                this.columnLocalPenAcct.Caption = "District";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SaveExciseTaxRateRow NewSaveExciseTaxRateRow() {
                return ((SaveExciseTaxRateRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new SaveExciseTaxRateRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(SaveExciseTaxRateRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SaveExciseTaxRateRowChanged != null)) {
                    this.SaveExciseTaxRateRowChanged(this, new SaveExciseTaxRateRowChangeEvent(((SaveExciseTaxRateRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SaveExciseTaxRateRowChanging != null)) {
                    this.SaveExciseTaxRateRowChanging(this, new SaveExciseTaxRateRowChangeEvent(((SaveExciseTaxRateRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SaveExciseTaxRateRowDeleted != null)) {
                    this.SaveExciseTaxRateRowDeleted(this, new SaveExciseTaxRateRowChangeEvent(((SaveExciseTaxRateRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SaveExciseTaxRateRowDeleting != null)) {
                    this.SaveExciseTaxRateRowDeleting(this, new SaveExciseTaxRateRowChangeEvent(((SaveExciseTaxRateRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSaveExciseTaxRateRow(SaveExciseTaxRateRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ExciseTaxRateData ds = new ExciseTaxRateData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SaveExciseTaxRateDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class GetExciseTaxAccountInfoDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnAdminAcct;
            
            private global::System.Data.DataColumn columnAdminAcctID;
            
            private global::System.Data.DataColumn columnAdminAcctPending;
            
            private global::System.Data.DataColumn columnTechFeeAcct;
            
            private global::System.Data.DataColumn columnTechFeeAcctID;
            
            private global::System.Data.DataColumn columnTechFeePending;
            
            private global::System.Data.DataColumn columnTransFeeAcct;
            
            private global::System.Data.DataColumn columnTransFeeAcctID;
            
            private global::System.Data.DataColumn columnTransFeePending;
            
            private global::System.Data.DataColumn columnLocalTaxAcct;
            
            private global::System.Data.DataColumn columnLocalTaxAcctID;
            
            private global::System.Data.DataColumn columnLocalTaxPending;
            
            private global::System.Data.DataColumn columnLocalIntAcct;
            
            private global::System.Data.DataColumn columnLocalIntAcctID;
            
            private global::System.Data.DataColumn columnLocalIntPending;
            
            private global::System.Data.DataColumn columnLocalPenAcct;
            
            private global::System.Data.DataColumn columnLocalPenAcctID;
            
            private global::System.Data.DataColumn columnLocalPenPending;
            
            private global::System.Data.DataColumn columnStateTaxAcct;
            
            private global::System.Data.DataColumn columnStateTaxAcctID;
            
            private global::System.Data.DataColumn columnStateTaxPending;
            
            private global::System.Data.DataColumn columnStateIntAcct;
            
            private global::System.Data.DataColumn columnStateIntAcctID;
            
            private global::System.Data.DataColumn columnStateIntPending;
            
            private global::System.Data.DataColumn columnStatePenAcct;
            
            private global::System.Data.DataColumn columnStatePenAcctId;
            
            private global::System.Data.DataColumn columnStatePenPending;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetExciseTaxAccountInfoDataTable() {
                this.TableName = "GetExciseTaxAccountInfo";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetExciseTaxAccountInfoDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected GetExciseTaxAccountInfoDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AdminAcctColumn {
                get {
                    return this.columnAdminAcct;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AdminAcctIDColumn {
                get {
                    return this.columnAdminAcctID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AdminAcctPendingColumn {
                get {
                    return this.columnAdminAcctPending;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TechFeeAcctColumn {
                get {
                    return this.columnTechFeeAcct;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TechFeeAcctIDColumn {
                get {
                    return this.columnTechFeeAcctID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TechFeePendingColumn {
                get {
                    return this.columnTechFeePending;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TransFeeAcctColumn {
                get {
                    return this.columnTransFeeAcct;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TransFeeAcctIDColumn {
                get {
                    return this.columnTransFeeAcctID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TransFeePendingColumn {
                get {
                    return this.columnTransFeePending;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LocalTaxAcctColumn {
                get {
                    return this.columnLocalTaxAcct;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LocalTaxAcctIDColumn {
                get {
                    return this.columnLocalTaxAcctID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LocalTaxPendingColumn {
                get {
                    return this.columnLocalTaxPending;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LocalIntAcctColumn {
                get {
                    return this.columnLocalIntAcct;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LocalIntAcctIDColumn {
                get {
                    return this.columnLocalIntAcctID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LocalIntPendingColumn {
                get {
                    return this.columnLocalIntPending;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LocalPenAcctColumn {
                get {
                    return this.columnLocalPenAcct;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LocalPenAcctIDColumn {
                get {
                    return this.columnLocalPenAcctID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LocalPenPendingColumn {
                get {
                    return this.columnLocalPenPending;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StateTaxAcctColumn {
                get {
                    return this.columnStateTaxAcct;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StateTaxAcctIDColumn {
                get {
                    return this.columnStateTaxAcctID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StateTaxPendingColumn {
                get {
                    return this.columnStateTaxPending;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StateIntAcctColumn {
                get {
                    return this.columnStateIntAcct;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StateIntAcctIDColumn {
                get {
                    return this.columnStateIntAcctID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StateIntPendingColumn {
                get {
                    return this.columnStateIntPending;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StatePenAcctColumn {
                get {
                    return this.columnStatePenAcct;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StatePenAcctIdColumn {
                get {
                    return this.columnStatePenAcctId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StatePenPendingColumn {
                get {
                    return this.columnStatePenPending;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetExciseTaxAccountInfoRow this[int index] {
                get {
                    return ((GetExciseTaxAccountInfoRow)(this.Rows[index]));
                }
            }
            
            public event GetExciseTaxAccountInfoRowChangeEventHandler GetExciseTaxAccountInfoRowChanging;
            
            public event GetExciseTaxAccountInfoRowChangeEventHandler GetExciseTaxAccountInfoRowChanged;
            
            public event GetExciseTaxAccountInfoRowChangeEventHandler GetExciseTaxAccountInfoRowDeleting;
            
            public event GetExciseTaxAccountInfoRowChangeEventHandler GetExciseTaxAccountInfoRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddGetExciseTaxAccountInfoRow(GetExciseTaxAccountInfoRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetExciseTaxAccountInfoRow AddGetExciseTaxAccountInfoRow(
                        string AdminAcct, 
                        int AdminAcctID, 
                        bool AdminAcctPending, 
                        string TechFeeAcct, 
                        int TechFeeAcctID, 
                        bool TechFeePending, 
                        string TransFeeAcct, 
                        int TransFeeAcctID, 
                        bool TransFeePending, 
                        string LocalTaxAcct, 
                        int LocalTaxAcctID, 
                        bool LocalTaxPending, 
                        string LocalIntAcct, 
                        int LocalIntAcctID, 
                        bool LocalIntPending, 
                        string LocalPenAcct, 
                        int LocalPenAcctID, 
                        bool LocalPenPending, 
                        string StateTaxAcct, 
                        int StateTaxAcctID, 
                        bool StateTaxPending, 
                        string StateIntAcct, 
                        int StateIntAcctID, 
                        bool StateIntPending, 
                        string StatePenAcct, 
                        int StatePenAcctId, 
                        bool StatePenPending) {
                GetExciseTaxAccountInfoRow rowGetExciseTaxAccountInfoRow = ((GetExciseTaxAccountInfoRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        AdminAcct,
                        AdminAcctID,
                        AdminAcctPending,
                        TechFeeAcct,
                        TechFeeAcctID,
                        TechFeePending,
                        TransFeeAcct,
                        TransFeeAcctID,
                        TransFeePending,
                        LocalTaxAcct,
                        LocalTaxAcctID,
                        LocalTaxPending,
                        LocalIntAcct,
                        LocalIntAcctID,
                        LocalIntPending,
                        LocalPenAcct,
                        LocalPenAcctID,
                        LocalPenPending,
                        StateTaxAcct,
                        StateTaxAcctID,
                        StateTaxPending,
                        StateIntAcct,
                        StateIntAcctID,
                        StateIntPending,
                        StatePenAcct,
                        StatePenAcctId,
                        StatePenPending};
                rowGetExciseTaxAccountInfoRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowGetExciseTaxAccountInfoRow);
                return rowGetExciseTaxAccountInfoRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                GetExciseTaxAccountInfoDataTable cln = ((GetExciseTaxAccountInfoDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new GetExciseTaxAccountInfoDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnAdminAcct = base.Columns["AdminAcct"];
                this.columnAdminAcctID = base.Columns["AdminAcctID"];
                this.columnAdminAcctPending = base.Columns["AdminAcctPending"];
                this.columnTechFeeAcct = base.Columns["TechFeeAcct"];
                this.columnTechFeeAcctID = base.Columns["TechFeeAcctID"];
                this.columnTechFeePending = base.Columns["TechFeePending"];
                this.columnTransFeeAcct = base.Columns["TransFeeAcct"];
                this.columnTransFeeAcctID = base.Columns["TransFeeAcctID"];
                this.columnTransFeePending = base.Columns["TransFeePending"];
                this.columnLocalTaxAcct = base.Columns["LocalTaxAcct"];
                this.columnLocalTaxAcctID = base.Columns["LocalTaxAcctID"];
                this.columnLocalTaxPending = base.Columns["LocalTaxPending"];
                this.columnLocalIntAcct = base.Columns["LocalIntAcct"];
                this.columnLocalIntAcctID = base.Columns["LocalIntAcctID"];
                this.columnLocalIntPending = base.Columns["LocalIntPending"];
                this.columnLocalPenAcct = base.Columns["LocalPenAcct"];
                this.columnLocalPenAcctID = base.Columns["LocalPenAcctID"];
                this.columnLocalPenPending = base.Columns["LocalPenPending"];
                this.columnStateTaxAcct = base.Columns["StateTaxAcct"];
                this.columnStateTaxAcctID = base.Columns["StateTaxAcctID"];
                this.columnStateTaxPending = base.Columns["StateTaxPending"];
                this.columnStateIntAcct = base.Columns["StateIntAcct"];
                this.columnStateIntAcctID = base.Columns["StateIntAcctID"];
                this.columnStateIntPending = base.Columns["StateIntPending"];
                this.columnStatePenAcct = base.Columns["StatePenAcct"];
                this.columnStatePenAcctId = base.Columns["StatePenAcctId"];
                this.columnStatePenPending = base.Columns["StatePenPending"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnAdminAcct = new global::System.Data.DataColumn("AdminAcct", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAdminAcct);
                this.columnAdminAcctID = new global::System.Data.DataColumn("AdminAcctID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAdminAcctID);
                this.columnAdminAcctPending = new global::System.Data.DataColumn("AdminAcctPending", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAdminAcctPending);
                this.columnTechFeeAcct = new global::System.Data.DataColumn("TechFeeAcct", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTechFeeAcct);
                this.columnTechFeeAcctID = new global::System.Data.DataColumn("TechFeeAcctID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTechFeeAcctID);
                this.columnTechFeePending = new global::System.Data.DataColumn("TechFeePending", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTechFeePending);
                this.columnTransFeeAcct = new global::System.Data.DataColumn("TransFeeAcct", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTransFeeAcct);
                this.columnTransFeeAcctID = new global::System.Data.DataColumn("TransFeeAcctID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTransFeeAcctID);
                this.columnTransFeePending = new global::System.Data.DataColumn("TransFeePending", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTransFeePending);
                this.columnLocalTaxAcct = new global::System.Data.DataColumn("LocalTaxAcct", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLocalTaxAcct);
                this.columnLocalTaxAcctID = new global::System.Data.DataColumn("LocalTaxAcctID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLocalTaxAcctID);
                this.columnLocalTaxPending = new global::System.Data.DataColumn("LocalTaxPending", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLocalTaxPending);
                this.columnLocalIntAcct = new global::System.Data.DataColumn("LocalIntAcct", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLocalIntAcct);
                this.columnLocalIntAcctID = new global::System.Data.DataColumn("LocalIntAcctID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLocalIntAcctID);
                this.columnLocalIntPending = new global::System.Data.DataColumn("LocalIntPending", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLocalIntPending);
                this.columnLocalPenAcct = new global::System.Data.DataColumn("LocalPenAcct", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLocalPenAcct);
                this.columnLocalPenAcctID = new global::System.Data.DataColumn("LocalPenAcctID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLocalPenAcctID);
                this.columnLocalPenPending = new global::System.Data.DataColumn("LocalPenPending", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLocalPenPending);
                this.columnStateTaxAcct = new global::System.Data.DataColumn("StateTaxAcct", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStateTaxAcct);
                this.columnStateTaxAcctID = new global::System.Data.DataColumn("StateTaxAcctID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStateTaxAcctID);
                this.columnStateTaxPending = new global::System.Data.DataColumn("StateTaxPending", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStateTaxPending);
                this.columnStateIntAcct = new global::System.Data.DataColumn("StateIntAcct", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStateIntAcct);
                this.columnStateIntAcctID = new global::System.Data.DataColumn("StateIntAcctID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStateIntAcctID);
                this.columnStateIntPending = new global::System.Data.DataColumn("StateIntPending", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStateIntPending);
                this.columnStatePenAcct = new global::System.Data.DataColumn("StatePenAcct", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStatePenAcct);
                this.columnStatePenAcctId = new global::System.Data.DataColumn("StatePenAcctId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStatePenAcctId);
                this.columnStatePenPending = new global::System.Data.DataColumn("StatePenPending", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStatePenPending);
                this.columnAdminAcct.ReadOnly = true;
                this.columnAdminAcct.MaxLength = 262;
                this.columnAdminAcctID.AllowDBNull = false;
                this.columnAdminAcctPending.ReadOnly = true;
                this.columnTechFeeAcct.ReadOnly = true;
                this.columnTechFeeAcct.MaxLength = 262;
                this.columnTechFeeAcctID.AllowDBNull = false;
                this.columnTechFeePending.ReadOnly = true;
                this.columnTransFeeAcct.ReadOnly = true;
                this.columnTransFeeAcct.MaxLength = 262;
                this.columnTransFeeAcctID.AllowDBNull = false;
                this.columnTransFeePending.ReadOnly = true;
                this.columnLocalTaxAcct.ReadOnly = true;
                this.columnLocalTaxAcct.MaxLength = 262;
                this.columnLocalTaxAcctID.AllowDBNull = false;
                this.columnLocalTaxPending.ReadOnly = true;
                this.columnLocalIntAcct.ReadOnly = true;
                this.columnLocalIntAcct.MaxLength = 262;
                this.columnLocalIntAcctID.AllowDBNull = false;
                this.columnLocalIntPending.ReadOnly = true;
                this.columnLocalPenAcct.ReadOnly = true;
                this.columnLocalPenAcct.MaxLength = 262;
                this.columnLocalPenAcctID.AllowDBNull = false;
                this.columnLocalPenPending.ReadOnly = true;
                this.columnStateTaxAcct.ReadOnly = true;
                this.columnStateTaxAcct.MaxLength = 262;
                this.columnStateTaxAcctID.AllowDBNull = false;
                this.columnStateTaxPending.ReadOnly = true;
                this.columnStateIntAcct.ReadOnly = true;
                this.columnStateIntAcct.MaxLength = 262;
                this.columnStateIntAcctID.AllowDBNull = false;
                this.columnStateIntPending.ReadOnly = true;
                this.columnStatePenAcct.ReadOnly = true;
                this.columnStatePenAcct.MaxLength = 262;
                this.columnStatePenAcctId.AllowDBNull = false;
                this.columnStatePenPending.ReadOnly = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetExciseTaxAccountInfoRow NewGetExciseTaxAccountInfoRow() {
                return ((GetExciseTaxAccountInfoRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new GetExciseTaxAccountInfoRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(GetExciseTaxAccountInfoRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GetExciseTaxAccountInfoRowChanged != null)) {
                    this.GetExciseTaxAccountInfoRowChanged(this, new GetExciseTaxAccountInfoRowChangeEvent(((GetExciseTaxAccountInfoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GetExciseTaxAccountInfoRowChanging != null)) {
                    this.GetExciseTaxAccountInfoRowChanging(this, new GetExciseTaxAccountInfoRowChangeEvent(((GetExciseTaxAccountInfoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GetExciseTaxAccountInfoRowDeleted != null)) {
                    this.GetExciseTaxAccountInfoRowDeleted(this, new GetExciseTaxAccountInfoRowChangeEvent(((GetExciseTaxAccountInfoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GetExciseTaxAccountInfoRowDeleting != null)) {
                    this.GetExciseTaxAccountInfoRowDeleting(this, new GetExciseTaxAccountInfoRowChangeEvent(((GetExciseTaxAccountInfoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveGetExciseTaxAccountInfoRow(GetExciseTaxAccountInfoRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ExciseTaxRateData ds = new ExciseTaxRateData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "GetExciseTaxAccountInfoDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class GetExciseTaxRateDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnExciseRateID;
            
            private global::System.Data.DataColumn columnAdminFee;
            
            private global::System.Data.DataColumn columnTransFee;
            
            private global::System.Data.DataColumn columnTechFee;
            
            private global::System.Data.DataColumn columnYear;
            
            private global::System.Data.DataColumn columnLocalTaxRate;
            
            private global::System.Data.DataColumn columnIsCounty;
            
            private global::System.Data.DataColumn columnDistrict;
            
            private global::System.Data.DataColumn columnDescription;
            
            private global::System.Data.DataColumn columnDistrictID;
            
            private global::System.Data.DataColumn columnTotalTaxRate;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetExciseTaxRateDataTable() {
                this.TableName = "GetExciseTaxRate";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetExciseTaxRateDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected GetExciseTaxRateDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ExciseRateIDColumn {
                get {
                    return this.columnExciseRateID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AdminFeeColumn {
                get {
                    return this.columnAdminFee;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TransFeeColumn {
                get {
                    return this.columnTransFee;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TechFeeColumn {
                get {
                    return this.columnTechFee;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn YearColumn {
                get {
                    return this.columnYear;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LocalTaxRateColumn {
                get {
                    return this.columnLocalTaxRate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsCountyColumn {
                get {
                    return this.columnIsCounty;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DistrictColumn {
                get {
                    return this.columnDistrict;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DistrictIDColumn {
                get {
                    return this.columnDistrictID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalTaxRateColumn {
                get {
                    return this.columnTotalTaxRate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetExciseTaxRateRow this[int index] {
                get {
                    return ((GetExciseTaxRateRow)(this.Rows[index]));
                }
            }
            
            public event GetExciseTaxRateRowChangeEventHandler GetExciseTaxRateRowChanging;
            
            public event GetExciseTaxRateRowChangeEventHandler GetExciseTaxRateRowChanged;
            
            public event GetExciseTaxRateRowChangeEventHandler GetExciseTaxRateRowDeleting;
            
            public event GetExciseTaxRateRowChangeEventHandler GetExciseTaxRateRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddGetExciseTaxRateRow(GetExciseTaxRateRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetExciseTaxRateRow AddGetExciseTaxRateRow(int ExciseRateID, float AdminFee, decimal TransFee, decimal TechFee, uint Year, float LocalTaxRate, int IsCounty, string District, string Description, int DistrictID, float TotalTaxRate) {
                GetExciseTaxRateRow rowGetExciseTaxRateRow = ((GetExciseTaxRateRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ExciseRateID,
                        AdminFee,
                        TransFee,
                        TechFee,
                        Year,
                        LocalTaxRate,
                        IsCounty,
                        District,
                        Description,
                        DistrictID,
                        TotalTaxRate};
                rowGetExciseTaxRateRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowGetExciseTaxRateRow);
                return rowGetExciseTaxRateRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                GetExciseTaxRateDataTable cln = ((GetExciseTaxRateDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new GetExciseTaxRateDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnExciseRateID = base.Columns["ExciseRateID"];
                this.columnAdminFee = base.Columns["AdminFee"];
                this.columnTransFee = base.Columns["TransFee"];
                this.columnTechFee = base.Columns["TechFee"];
                this.columnYear = base.Columns["Year"];
                this.columnLocalTaxRate = base.Columns["LocalTaxRate"];
                this.columnIsCounty = base.Columns["IsCounty"];
                this.columnDistrict = base.Columns["District"];
                this.columnDescription = base.Columns["Description"];
                this.columnDistrictID = base.Columns["DistrictID"];
                this.columnTotalTaxRate = base.Columns["TotalTaxRate"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnExciseRateID = new global::System.Data.DataColumn("ExciseRateID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnExciseRateID);
                this.columnAdminFee = new global::System.Data.DataColumn("AdminFee", typeof(float), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAdminFee);
                this.columnTransFee = new global::System.Data.DataColumn("TransFee", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTransFee);
                this.columnTechFee = new global::System.Data.DataColumn("TechFee", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTechFee);
                this.columnYear = new global::System.Data.DataColumn("Year", typeof(uint), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnYear);
                this.columnLocalTaxRate = new global::System.Data.DataColumn("LocalTaxRate", typeof(float), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLocalTaxRate);
                this.columnIsCounty = new global::System.Data.DataColumn("IsCounty", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsCounty);
                this.columnDistrict = new global::System.Data.DataColumn("District", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDistrict);
                this.columnDescription = new global::System.Data.DataColumn("Description", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescription);
                this.columnDistrictID = new global::System.Data.DataColumn("DistrictID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDistrictID);
                this.columnTotalTaxRate = new global::System.Data.DataColumn("TotalTaxRate", typeof(float), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalTaxRate);
                this.columnExciseRateID.AllowDBNull = false;
                this.columnAdminFee.AllowDBNull = false;
                this.columnTransFee.AllowDBNull = false;
                this.columnTechFee.AllowDBNull = false;
                this.columnYear.ReadOnly = true;
                this.columnLocalTaxRate.AllowDBNull = false;
                this.columnIsCounty.ReadOnly = true;
                this.columnDistrict.ReadOnly = true;
                this.columnDistrict.MaxLength = 103;
                this.columnDescription.MaxLength = 50;
                this.columnDistrictID.AllowDBNull = false;
                this.columnTotalTaxRate.ReadOnly = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetExciseTaxRateRow NewGetExciseTaxRateRow() {
                return ((GetExciseTaxRateRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new GetExciseTaxRateRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(GetExciseTaxRateRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GetExciseTaxRateRowChanged != null)) {
                    this.GetExciseTaxRateRowChanged(this, new GetExciseTaxRateRowChangeEvent(((GetExciseTaxRateRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GetExciseTaxRateRowChanging != null)) {
                    this.GetExciseTaxRateRowChanging(this, new GetExciseTaxRateRowChangeEvent(((GetExciseTaxRateRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GetExciseTaxRateRowDeleted != null)) {
                    this.GetExciseTaxRateRowDeleted(this, new GetExciseTaxRateRowChangeEvent(((GetExciseTaxRateRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GetExciseTaxRateRowDeleting != null)) {
                    this.GetExciseTaxRateRowDeleting(this, new GetExciseTaxRateRowChangeEvent(((GetExciseTaxRateRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveGetExciseTaxRateRow(GetExciseTaxRateRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ExciseTaxRateData ds = new ExciseTaxRateData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "GetExciseTaxRateDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class LocalTypeDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnLocalID;
            
            private global::System.Data.DataColumn columnLocalName;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LocalTypeDataTable() {
                this.TableName = "LocalType";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LocalTypeDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected LocalTypeDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LocalIDColumn {
                get {
                    return this.columnLocalID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LocalNameColumn {
                get {
                    return this.columnLocalName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LocalTypeRow this[int index] {
                get {
                    return ((LocalTypeRow)(this.Rows[index]));
                }
            }
            
            public event LocalTypeRowChangeEventHandler LocalTypeRowChanging;
            
            public event LocalTypeRowChangeEventHandler LocalTypeRowChanged;
            
            public event LocalTypeRowChangeEventHandler LocalTypeRowDeleting;
            
            public event LocalTypeRowChangeEventHandler LocalTypeRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddLocalTypeRow(LocalTypeRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LocalTypeRow AddLocalTypeRow(string LocalID, string LocalName) {
                LocalTypeRow rowLocalTypeRow = ((LocalTypeRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        LocalID,
                        LocalName};
                rowLocalTypeRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowLocalTypeRow);
                return rowLocalTypeRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                LocalTypeDataTable cln = ((LocalTypeDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new LocalTypeDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnLocalID = base.Columns["LocalID"];
                this.columnLocalName = base.Columns["LocalName"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnLocalID = new global::System.Data.DataColumn("LocalID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLocalID);
                this.columnLocalName = new global::System.Data.DataColumn("LocalName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLocalName);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LocalTypeRow NewLocalTypeRow() {
                return ((LocalTypeRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new LocalTypeRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(LocalTypeRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.LocalTypeRowChanged != null)) {
                    this.LocalTypeRowChanged(this, new LocalTypeRowChangeEvent(((LocalTypeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.LocalTypeRowChanging != null)) {
                    this.LocalTypeRowChanging(this, new LocalTypeRowChangeEvent(((LocalTypeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.LocalTypeRowDeleted != null)) {
                    this.LocalTypeRowDeleted(this, new LocalTypeRowChangeEvent(((LocalTypeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.LocalTypeRowDeleting != null)) {
                    this.LocalTypeRowDeleting(this, new LocalTypeRowChangeEvent(((LocalTypeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveLocalTypeRow(LocalTypeRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ExciseTaxRateData ds = new ExciseTaxRateData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "LocalTypeDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class GetDistrictNameDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnDistrictName;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetDistrictNameDataTable() {
                this.TableName = "GetDistrictName";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetDistrictNameDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected GetDistrictNameDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DistrictNameColumn {
                get {
                    return this.columnDistrictName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetDistrictNameRow this[int index] {
                get {
                    return ((GetDistrictNameRow)(this.Rows[index]));
                }
            }
            
            public event GetDistrictNameRowChangeEventHandler GetDistrictNameRowChanging;
            
            public event GetDistrictNameRowChangeEventHandler GetDistrictNameRowChanged;
            
            public event GetDistrictNameRowChangeEventHandler GetDistrictNameRowDeleting;
            
            public event GetDistrictNameRowChangeEventHandler GetDistrictNameRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddGetDistrictNameRow(GetDistrictNameRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetDistrictNameRow AddGetDistrictNameRow(string DistrictName) {
                GetDistrictNameRow rowGetDistrictNameRow = ((GetDistrictNameRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        DistrictName};
                rowGetDistrictNameRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowGetDistrictNameRow);
                return rowGetDistrictNameRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                GetDistrictNameDataTable cln = ((GetDistrictNameDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new GetDistrictNameDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnDistrictName = base.Columns["DistrictName"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnDistrictName = new global::System.Data.DataColumn("DistrictName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDistrictName);
                this.columnDistrictName.ReadOnly = true;
                this.columnDistrictName.Caption = "Column1";
                this.columnDistrictName.MaxLength = 63;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetDistrictNameRow NewGetDistrictNameRow() {
                return ((GetDistrictNameRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new GetDistrictNameRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(GetDistrictNameRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GetDistrictNameRowChanged != null)) {
                    this.GetDistrictNameRowChanged(this, new GetDistrictNameRowChangeEvent(((GetDistrictNameRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GetDistrictNameRowChanging != null)) {
                    this.GetDistrictNameRowChanging(this, new GetDistrictNameRowChangeEvent(((GetDistrictNameRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GetDistrictNameRowDeleted != null)) {
                    this.GetDistrictNameRowDeleted(this, new GetDistrictNameRowChangeEvent(((GetDistrictNameRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GetDistrictNameRowDeleting != null)) {
                    this.GetDistrictNameRowDeleting(this, new GetDistrictNameRowChangeEvent(((GetDistrictNameRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveGetDistrictNameRow(GetDistrictNameRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ExciseTaxRateData ds = new ExciseTaxRateData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "GetDistrictNameDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class GetAccountNameDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnAdminAcct;
            
            private global::System.Data.DataColumn columnDescription;
            
            private global::System.Data.DataColumn columnAdminAcctPending;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetAccountNameDataTable() {
                this.TableName = "GetAccountName";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetAccountNameDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected GetAccountNameDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AdminAcctColumn {
                get {
                    return this.columnAdminAcct;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AdminAcctPendingColumn {
                get {
                    return this.columnAdminAcctPending;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetAccountNameRow this[int index] {
                get {
                    return ((GetAccountNameRow)(this.Rows[index]));
                }
            }
            
            public event GetAccountNameRowChangeEventHandler GetAccountNameRowChanging;
            
            public event GetAccountNameRowChangeEventHandler GetAccountNameRowChanged;
            
            public event GetAccountNameRowChangeEventHandler GetAccountNameRowDeleting;
            
            public event GetAccountNameRowChangeEventHandler GetAccountNameRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddGetAccountNameRow(GetAccountNameRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetAccountNameRow AddGetAccountNameRow(string AdminAcct, string Description, bool AdminAcctPending) {
                GetAccountNameRow rowGetAccountNameRow = ((GetAccountNameRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        AdminAcct,
                        Description,
                        AdminAcctPending};
                rowGetAccountNameRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowGetAccountNameRow);
                return rowGetAccountNameRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                GetAccountNameDataTable cln = ((GetAccountNameDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new GetAccountNameDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnAdminAcct = base.Columns["AdminAcct"];
                this.columnDescription = base.Columns["Description"];
                this.columnAdminAcctPending = base.Columns["AdminAcctPending"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnAdminAcct = new global::System.Data.DataColumn("AdminAcct", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAdminAcct);
                this.columnDescription = new global::System.Data.DataColumn("Description", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescription);
                this.columnAdminAcctPending = new global::System.Data.DataColumn("AdminAcctPending", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAdminAcctPending);
                this.columnAdminAcct.ReadOnly = true;
                this.columnAdminAcct.MaxLength = 262;
                this.columnDescription.ReadOnly = true;
                this.columnDescription.DefaultValue = ((string)(""));
                this.columnAdminAcctPending.ReadOnly = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetAccountNameRow NewGetAccountNameRow() {
                return ((GetAccountNameRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new GetAccountNameRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(GetAccountNameRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GetAccountNameRowChanged != null)) {
                    this.GetAccountNameRowChanged(this, new GetAccountNameRowChangeEvent(((GetAccountNameRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GetAccountNameRowChanging != null)) {
                    this.GetAccountNameRowChanging(this, new GetAccountNameRowChangeEvent(((GetAccountNameRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GetAccountNameRowDeleted != null)) {
                    this.GetAccountNameRowDeleted(this, new GetAccountNameRowChangeEvent(((GetAccountNameRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GetAccountNameRowDeleting != null)) {
                    this.GetAccountNameRowDeleting(this, new GetAccountNameRowChangeEvent(((GetAccountNameRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveGetAccountNameRow(GetAccountNameRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ExciseTaxRateData ds = new ExciseTaxRateData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "GetAccountNameDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ListExciseTaxRateRow : global::System.Data.DataRow {
            
            private ListExciseTaxRateDataTable tableListExciseTaxRate;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListExciseTaxRateRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableListExciseTaxRate = ((ListExciseTaxRateDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int KeyID {
                get {
                    return ((int)(this[this.tableListExciseTaxRate.KeyIDColumn]));
                }
                set {
                    this[this.tableListExciseTaxRate.KeyIDColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SaveExciseTaxRateRow : global::System.Data.DataRow {
            
            private SaveExciseTaxRateDataTable tableSaveExciseTaxRate;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SaveExciseTaxRateRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSaveExciseTaxRate = ((SaveExciseTaxRateDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ExciseRateID {
                get {
                    try {
                        return ((int)(this[this.tableSaveExciseTaxRate.ExciseRateIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ExciseRateID\' in table \'SaveExciseTaxRate\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSaveExciseTaxRate.ExciseRateIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int DistrictID {
                get {
                    return ((int)(this[this.tableSaveExciseTaxRate.DistrictIDColumn]));
                }
                set {
                    this[this.tableSaveExciseTaxRate.DistrictIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal AdminFee {
                get {
                    return ((decimal)(this[this.tableSaveExciseTaxRate.AdminFeeColumn]));
                }
                set {
                    this[this.tableSaveExciseTaxRate.AdminFeeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TransFee {
                get {
                    return ((decimal)(this[this.tableSaveExciseTaxRate.TransFeeColumn]));
                }
                set {
                    this[this.tableSaveExciseTaxRate.TransFeeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TechFee {
                get {
                    return ((decimal)(this[this.tableSaveExciseTaxRate.TechFeeColumn]));
                }
                set {
                    this[this.tableSaveExciseTaxRate.TechFeeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Year {
                get {
                    return ((int)(this[this.tableSaveExciseTaxRate.YearColumn]));
                }
                set {
                    this[this.tableSaveExciseTaxRate.YearColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal LocalTaxRate {
                get {
                    return ((decimal)(this[this.tableSaveExciseTaxRate.LocalTaxRateColumn]));
                }
                set {
                    this[this.tableSaveExciseTaxRate.LocalTaxRateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int IsCounty {
                get {
                    return ((int)(this[this.tableSaveExciseTaxRate.IsCountyColumn]));
                }
                set {
                    this[this.tableSaveExciseTaxRate.IsCountyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Description {
                get {
                    try {
                        return ((string)(this[this.tableSaveExciseTaxRate.DescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Description\' in table \'SaveExciseTaxRate\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSaveExciseTaxRate.DescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int AdminAcct {
                get {
                    return ((int)(this[this.tableSaveExciseTaxRate.AdminAcctColumn]));
                }
                set {
                    this[this.tableSaveExciseTaxRate.AdminAcctColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TransFeeAcct {
                get {
                    try {
                        return ((int)(this[this.tableSaveExciseTaxRate.TransFeeAcctColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TransFeeAcct\' in table \'SaveExciseTaxRate\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSaveExciseTaxRate.TransFeeAcctColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TechFeeAcct {
                get {
                    try {
                        return ((int)(this[this.tableSaveExciseTaxRate.TechFeeAcctColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TechFeeAcct\' in table \'SaveExciseTaxRate\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSaveExciseTaxRate.TechFeeAcctColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int StateTaxAcct {
                get {
                    try {
                        return ((int)(this[this.tableSaveExciseTaxRate.StateTaxAcctColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StateTaxAcct\' in table \'SaveExciseTaxRate\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSaveExciseTaxRate.StateTaxAcctColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int StateIntAcct {
                get {
                    try {
                        return ((int)(this[this.tableSaveExciseTaxRate.StateIntAcctColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StateIntAcct\' in table \'SaveExciseTaxRate\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSaveExciseTaxRate.StateIntAcctColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int StatePenAcct {
                get {
                    try {
                        return ((int)(this[this.tableSaveExciseTaxRate.StatePenAcctColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StatePenAcct\' in table \'SaveExciseTaxRate\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSaveExciseTaxRate.StatePenAcctColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LocalTaxAcct {
                get {
                    try {
                        return ((int)(this[this.tableSaveExciseTaxRate.LocalTaxAcctColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LocalTaxAcct\' in table \'SaveExciseTaxRate\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSaveExciseTaxRate.LocalTaxAcctColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LocalIntAcct {
                get {
                    try {
                        return ((int)(this[this.tableSaveExciseTaxRate.LocalIntAcctColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LocalIntAcct\' in table \'SaveExciseTaxRate\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSaveExciseTaxRate.LocalIntAcctColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LocalPenAcct {
                get {
                    try {
                        return ((int)(this[this.tableSaveExciseTaxRate.LocalPenAcctColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LocalPenAcct\' in table \'SaveExciseTaxRate\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSaveExciseTaxRate.LocalPenAcctColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsExciseRateIDNull() {
                return this.IsNull(this.tableSaveExciseTaxRate.ExciseRateIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetExciseRateIDNull() {
                this[this.tableSaveExciseTaxRate.ExciseRateIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDescriptionNull() {
                return this.IsNull(this.tableSaveExciseTaxRate.DescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDescriptionNull() {
                this[this.tableSaveExciseTaxRate.DescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTransFeeAcctNull() {
                return this.IsNull(this.tableSaveExciseTaxRate.TransFeeAcctColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTransFeeAcctNull() {
                this[this.tableSaveExciseTaxRate.TransFeeAcctColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTechFeeAcctNull() {
                return this.IsNull(this.tableSaveExciseTaxRate.TechFeeAcctColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTechFeeAcctNull() {
                this[this.tableSaveExciseTaxRate.TechFeeAcctColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStateTaxAcctNull() {
                return this.IsNull(this.tableSaveExciseTaxRate.StateTaxAcctColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStateTaxAcctNull() {
                this[this.tableSaveExciseTaxRate.StateTaxAcctColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStateIntAcctNull() {
                return this.IsNull(this.tableSaveExciseTaxRate.StateIntAcctColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStateIntAcctNull() {
                this[this.tableSaveExciseTaxRate.StateIntAcctColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStatePenAcctNull() {
                return this.IsNull(this.tableSaveExciseTaxRate.StatePenAcctColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStatePenAcctNull() {
                this[this.tableSaveExciseTaxRate.StatePenAcctColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLocalTaxAcctNull() {
                return this.IsNull(this.tableSaveExciseTaxRate.LocalTaxAcctColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLocalTaxAcctNull() {
                this[this.tableSaveExciseTaxRate.LocalTaxAcctColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLocalIntAcctNull() {
                return this.IsNull(this.tableSaveExciseTaxRate.LocalIntAcctColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLocalIntAcctNull() {
                this[this.tableSaveExciseTaxRate.LocalIntAcctColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLocalPenAcctNull() {
                return this.IsNull(this.tableSaveExciseTaxRate.LocalPenAcctColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLocalPenAcctNull() {
                this[this.tableSaveExciseTaxRate.LocalPenAcctColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class GetExciseTaxAccountInfoRow : global::System.Data.DataRow {
            
            private GetExciseTaxAccountInfoDataTable tableGetExciseTaxAccountInfo;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetExciseTaxAccountInfoRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableGetExciseTaxAccountInfo = ((GetExciseTaxAccountInfoDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AdminAcct {
                get {
                    try {
                        return ((string)(this[this.tableGetExciseTaxAccountInfo.AdminAcctColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AdminAcct\' in table \'GetExciseTaxAccountInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetExciseTaxAccountInfo.AdminAcctColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int AdminAcctID {
                get {
                    return ((int)(this[this.tableGetExciseTaxAccountInfo.AdminAcctIDColumn]));
                }
                set {
                    this[this.tableGetExciseTaxAccountInfo.AdminAcctIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool AdminAcctPending {
                get {
                    try {
                        return ((bool)(this[this.tableGetExciseTaxAccountInfo.AdminAcctPendingColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AdminAcctPending\' in table \'GetExciseTaxAccountInfo\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableGetExciseTaxAccountInfo.AdminAcctPendingColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TechFeeAcct {
                get {
                    try {
                        return ((string)(this[this.tableGetExciseTaxAccountInfo.TechFeeAcctColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TechFeeAcct\' in table \'GetExciseTaxAccountInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetExciseTaxAccountInfo.TechFeeAcctColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TechFeeAcctID {
                get {
                    return ((int)(this[this.tableGetExciseTaxAccountInfo.TechFeeAcctIDColumn]));
                }
                set {
                    this[this.tableGetExciseTaxAccountInfo.TechFeeAcctIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool TechFeePending {
                get {
                    try {
                        return ((bool)(this[this.tableGetExciseTaxAccountInfo.TechFeePendingColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TechFeePending\' in table \'GetExciseTaxAccountInfo\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableGetExciseTaxAccountInfo.TechFeePendingColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TransFeeAcct {
                get {
                    try {
                        return ((string)(this[this.tableGetExciseTaxAccountInfo.TransFeeAcctColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TransFeeAcct\' in table \'GetExciseTaxAccountInfo\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableGetExciseTaxAccountInfo.TransFeeAcctColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TransFeeAcctID {
                get {
                    return ((int)(this[this.tableGetExciseTaxAccountInfo.TransFeeAcctIDColumn]));
                }
                set {
                    this[this.tableGetExciseTaxAccountInfo.TransFeeAcctIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool TransFeePending {
                get {
                    try {
                        return ((bool)(this[this.tableGetExciseTaxAccountInfo.TransFeePendingColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TransFeePending\' in table \'GetExciseTaxAccountInfo\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableGetExciseTaxAccountInfo.TransFeePendingColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LocalTaxAcct {
                get {
                    try {
                        return ((string)(this[this.tableGetExciseTaxAccountInfo.LocalTaxAcctColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LocalTaxAcct\' in table \'GetExciseTaxAccountInfo\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableGetExciseTaxAccountInfo.LocalTaxAcctColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LocalTaxAcctID {
                get {
                    return ((int)(this[this.tableGetExciseTaxAccountInfo.LocalTaxAcctIDColumn]));
                }
                set {
                    this[this.tableGetExciseTaxAccountInfo.LocalTaxAcctIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool LocalTaxPending {
                get {
                    try {
                        return ((bool)(this[this.tableGetExciseTaxAccountInfo.LocalTaxPendingColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LocalTaxPending\' in table \'GetExciseTaxAccountInfo\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableGetExciseTaxAccountInfo.LocalTaxPendingColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LocalIntAcct {
                get {
                    try {
                        return ((string)(this[this.tableGetExciseTaxAccountInfo.LocalIntAcctColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LocalIntAcct\' in table \'GetExciseTaxAccountInfo\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableGetExciseTaxAccountInfo.LocalIntAcctColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LocalIntAcctID {
                get {
                    return ((int)(this[this.tableGetExciseTaxAccountInfo.LocalIntAcctIDColumn]));
                }
                set {
                    this[this.tableGetExciseTaxAccountInfo.LocalIntAcctIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool LocalIntPending {
                get {
                    try {
                        return ((bool)(this[this.tableGetExciseTaxAccountInfo.LocalIntPendingColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LocalIntPending\' in table \'GetExciseTaxAccountInfo\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableGetExciseTaxAccountInfo.LocalIntPendingColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LocalPenAcct {
                get {
                    try {
                        return ((string)(this[this.tableGetExciseTaxAccountInfo.LocalPenAcctColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LocalPenAcct\' in table \'GetExciseTaxAccountInfo\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableGetExciseTaxAccountInfo.LocalPenAcctColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LocalPenAcctID {
                get {
                    return ((int)(this[this.tableGetExciseTaxAccountInfo.LocalPenAcctIDColumn]));
                }
                set {
                    this[this.tableGetExciseTaxAccountInfo.LocalPenAcctIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool LocalPenPending {
                get {
                    try {
                        return ((bool)(this[this.tableGetExciseTaxAccountInfo.LocalPenPendingColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LocalPenPending\' in table \'GetExciseTaxAccountInfo\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableGetExciseTaxAccountInfo.LocalPenPendingColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string StateTaxAcct {
                get {
                    try {
                        return ((string)(this[this.tableGetExciseTaxAccountInfo.StateTaxAcctColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StateTaxAcct\' in table \'GetExciseTaxAccountInfo\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableGetExciseTaxAccountInfo.StateTaxAcctColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int StateTaxAcctID {
                get {
                    return ((int)(this[this.tableGetExciseTaxAccountInfo.StateTaxAcctIDColumn]));
                }
                set {
                    this[this.tableGetExciseTaxAccountInfo.StateTaxAcctIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool StateTaxPending {
                get {
                    try {
                        return ((bool)(this[this.tableGetExciseTaxAccountInfo.StateTaxPendingColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StateTaxPending\' in table \'GetExciseTaxAccountInfo\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableGetExciseTaxAccountInfo.StateTaxPendingColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string StateIntAcct {
                get {
                    try {
                        return ((string)(this[this.tableGetExciseTaxAccountInfo.StateIntAcctColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StateIntAcct\' in table \'GetExciseTaxAccountInfo\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableGetExciseTaxAccountInfo.StateIntAcctColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int StateIntAcctID {
                get {
                    return ((int)(this[this.tableGetExciseTaxAccountInfo.StateIntAcctIDColumn]));
                }
                set {
                    this[this.tableGetExciseTaxAccountInfo.StateIntAcctIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool StateIntPending {
                get {
                    try {
                        return ((bool)(this[this.tableGetExciseTaxAccountInfo.StateIntPendingColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StateIntPending\' in table \'GetExciseTaxAccountInfo\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableGetExciseTaxAccountInfo.StateIntPendingColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string StatePenAcct {
                get {
                    try {
                        return ((string)(this[this.tableGetExciseTaxAccountInfo.StatePenAcctColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StatePenAcct\' in table \'GetExciseTaxAccountInfo\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableGetExciseTaxAccountInfo.StatePenAcctColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int StatePenAcctId {
                get {
                    return ((int)(this[this.tableGetExciseTaxAccountInfo.StatePenAcctIdColumn]));
                }
                set {
                    this[this.tableGetExciseTaxAccountInfo.StatePenAcctIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool StatePenPending {
                get {
                    try {
                        return ((bool)(this[this.tableGetExciseTaxAccountInfo.StatePenPendingColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StatePenPending\' in table \'GetExciseTaxAccountInfo\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableGetExciseTaxAccountInfo.StatePenPendingColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAdminAcctNull() {
                return this.IsNull(this.tableGetExciseTaxAccountInfo.AdminAcctColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAdminAcctNull() {
                this[this.tableGetExciseTaxAccountInfo.AdminAcctColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAdminAcctPendingNull() {
                return this.IsNull(this.tableGetExciseTaxAccountInfo.AdminAcctPendingColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAdminAcctPendingNull() {
                this[this.tableGetExciseTaxAccountInfo.AdminAcctPendingColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTechFeeAcctNull() {
                return this.IsNull(this.tableGetExciseTaxAccountInfo.TechFeeAcctColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTechFeeAcctNull() {
                this[this.tableGetExciseTaxAccountInfo.TechFeeAcctColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTechFeePendingNull() {
                return this.IsNull(this.tableGetExciseTaxAccountInfo.TechFeePendingColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTechFeePendingNull() {
                this[this.tableGetExciseTaxAccountInfo.TechFeePendingColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTransFeeAcctNull() {
                return this.IsNull(this.tableGetExciseTaxAccountInfo.TransFeeAcctColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTransFeeAcctNull() {
                this[this.tableGetExciseTaxAccountInfo.TransFeeAcctColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTransFeePendingNull() {
                return this.IsNull(this.tableGetExciseTaxAccountInfo.TransFeePendingColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTransFeePendingNull() {
                this[this.tableGetExciseTaxAccountInfo.TransFeePendingColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLocalTaxAcctNull() {
                return this.IsNull(this.tableGetExciseTaxAccountInfo.LocalTaxAcctColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLocalTaxAcctNull() {
                this[this.tableGetExciseTaxAccountInfo.LocalTaxAcctColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLocalTaxPendingNull() {
                return this.IsNull(this.tableGetExciseTaxAccountInfo.LocalTaxPendingColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLocalTaxPendingNull() {
                this[this.tableGetExciseTaxAccountInfo.LocalTaxPendingColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLocalIntAcctNull() {
                return this.IsNull(this.tableGetExciseTaxAccountInfo.LocalIntAcctColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLocalIntAcctNull() {
                this[this.tableGetExciseTaxAccountInfo.LocalIntAcctColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLocalIntPendingNull() {
                return this.IsNull(this.tableGetExciseTaxAccountInfo.LocalIntPendingColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLocalIntPendingNull() {
                this[this.tableGetExciseTaxAccountInfo.LocalIntPendingColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLocalPenAcctNull() {
                return this.IsNull(this.tableGetExciseTaxAccountInfo.LocalPenAcctColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLocalPenAcctNull() {
                this[this.tableGetExciseTaxAccountInfo.LocalPenAcctColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLocalPenPendingNull() {
                return this.IsNull(this.tableGetExciseTaxAccountInfo.LocalPenPendingColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLocalPenPendingNull() {
                this[this.tableGetExciseTaxAccountInfo.LocalPenPendingColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStateTaxAcctNull() {
                return this.IsNull(this.tableGetExciseTaxAccountInfo.StateTaxAcctColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStateTaxAcctNull() {
                this[this.tableGetExciseTaxAccountInfo.StateTaxAcctColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStateTaxPendingNull() {
                return this.IsNull(this.tableGetExciseTaxAccountInfo.StateTaxPendingColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStateTaxPendingNull() {
                this[this.tableGetExciseTaxAccountInfo.StateTaxPendingColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStateIntAcctNull() {
                return this.IsNull(this.tableGetExciseTaxAccountInfo.StateIntAcctColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStateIntAcctNull() {
                this[this.tableGetExciseTaxAccountInfo.StateIntAcctColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStateIntPendingNull() {
                return this.IsNull(this.tableGetExciseTaxAccountInfo.StateIntPendingColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStateIntPendingNull() {
                this[this.tableGetExciseTaxAccountInfo.StateIntPendingColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStatePenAcctNull() {
                return this.IsNull(this.tableGetExciseTaxAccountInfo.StatePenAcctColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStatePenAcctNull() {
                this[this.tableGetExciseTaxAccountInfo.StatePenAcctColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStatePenPendingNull() {
                return this.IsNull(this.tableGetExciseTaxAccountInfo.StatePenPendingColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStatePenPendingNull() {
                this[this.tableGetExciseTaxAccountInfo.StatePenPendingColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class GetExciseTaxRateRow : global::System.Data.DataRow {
            
            private GetExciseTaxRateDataTable tableGetExciseTaxRate;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetExciseTaxRateRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableGetExciseTaxRate = ((GetExciseTaxRateDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ExciseRateID {
                get {
                    return ((int)(this[this.tableGetExciseTaxRate.ExciseRateIDColumn]));
                }
                set {
                    this[this.tableGetExciseTaxRate.ExciseRateIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float AdminFee {
                get {
                    return ((float)(this[this.tableGetExciseTaxRate.AdminFeeColumn]));
                }
                set {
                    this[this.tableGetExciseTaxRate.AdminFeeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TransFee {
                get {
                    return ((decimal)(this[this.tableGetExciseTaxRate.TransFeeColumn]));
                }
                set {
                    this[this.tableGetExciseTaxRate.TransFeeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TechFee {
                get {
                    return ((decimal)(this[this.tableGetExciseTaxRate.TechFeeColumn]));
                }
                set {
                    this[this.tableGetExciseTaxRate.TechFeeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public uint Year {
                get {
                    try {
                        return ((uint)(this[this.tableGetExciseTaxRate.YearColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Year\' in table \'GetExciseTaxRate\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetExciseTaxRate.YearColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float LocalTaxRate {
                get {
                    return ((float)(this[this.tableGetExciseTaxRate.LocalTaxRateColumn]));
                }
                set {
                    this[this.tableGetExciseTaxRate.LocalTaxRateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int IsCounty {
                get {
                    try {
                        return ((int)(this[this.tableGetExciseTaxRate.IsCountyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsCounty\' in table \'GetExciseTaxRate\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetExciseTaxRate.IsCountyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string District {
                get {
                    try {
                        return ((string)(this[this.tableGetExciseTaxRate.DistrictColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'District\' in table \'GetExciseTaxRate\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetExciseTaxRate.DistrictColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Description {
                get {
                    try {
                        return ((string)(this[this.tableGetExciseTaxRate.DescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Description\' in table \'GetExciseTaxRate\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetExciseTaxRate.DescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int DistrictID {
                get {
                    return ((int)(this[this.tableGetExciseTaxRate.DistrictIDColumn]));
                }
                set {
                    this[this.tableGetExciseTaxRate.DistrictIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float TotalTaxRate {
                get {
                    try {
                        return ((float)(this[this.tableGetExciseTaxRate.TotalTaxRateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalTaxRate\' in table \'GetExciseTaxRate\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetExciseTaxRate.TotalTaxRateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsYearNull() {
                return this.IsNull(this.tableGetExciseTaxRate.YearColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetYearNull() {
                this[this.tableGetExciseTaxRate.YearColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsCountyNull() {
                return this.IsNull(this.tableGetExciseTaxRate.IsCountyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsCountyNull() {
                this[this.tableGetExciseTaxRate.IsCountyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDistrictNull() {
                return this.IsNull(this.tableGetExciseTaxRate.DistrictColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDistrictNull() {
                this[this.tableGetExciseTaxRate.DistrictColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDescriptionNull() {
                return this.IsNull(this.tableGetExciseTaxRate.DescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDescriptionNull() {
                this[this.tableGetExciseTaxRate.DescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalTaxRateNull() {
                return this.IsNull(this.tableGetExciseTaxRate.TotalTaxRateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalTaxRateNull() {
                this[this.tableGetExciseTaxRate.TotalTaxRateColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class LocalTypeRow : global::System.Data.DataRow {
            
            private LocalTypeDataTable tableLocalType;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LocalTypeRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableLocalType = ((LocalTypeDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LocalID {
                get {
                    try {
                        return ((string)(this[this.tableLocalType.LocalIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LocalID\' in table \'LocalType\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLocalType.LocalIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LocalName {
                get {
                    try {
                        return ((string)(this[this.tableLocalType.LocalNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LocalName\' in table \'LocalType\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLocalType.LocalNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLocalIDNull() {
                return this.IsNull(this.tableLocalType.LocalIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLocalIDNull() {
                this[this.tableLocalType.LocalIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLocalNameNull() {
                return this.IsNull(this.tableLocalType.LocalNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLocalNameNull() {
                this[this.tableLocalType.LocalNameColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class GetDistrictNameRow : global::System.Data.DataRow {
            
            private GetDistrictNameDataTable tableGetDistrictName;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetDistrictNameRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableGetDistrictName = ((GetDistrictNameDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DistrictName {
                get {
                    try {
                        return ((string)(this[this.tableGetDistrictName.DistrictNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DistrictName\' in table \'GetDistrictName\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetDistrictName.DistrictNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDistrictNameNull() {
                return this.IsNull(this.tableGetDistrictName.DistrictNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDistrictNameNull() {
                this[this.tableGetDistrictName.DistrictNameColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class GetAccountNameRow : global::System.Data.DataRow {
            
            private GetAccountNameDataTable tableGetAccountName;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetAccountNameRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableGetAccountName = ((GetAccountNameDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AdminAcct {
                get {
                    try {
                        return ((string)(this[this.tableGetAccountName.AdminAcctColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AdminAcct\' in table \'GetAccountName\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetAccountName.AdminAcctColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Description {
                get {
                    try {
                        return ((string)(this[this.tableGetAccountName.DescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Description\' in table \'GetAccountName\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetAccountName.DescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool AdminAcctPending {
                get {
                    try {
                        return ((bool)(this[this.tableGetAccountName.AdminAcctPendingColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AdminAcctPending\' in table \'GetAccountName\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetAccountName.AdminAcctPendingColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAdminAcctNull() {
                return this.IsNull(this.tableGetAccountName.AdminAcctColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAdminAcctNull() {
                this[this.tableGetAccountName.AdminAcctColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDescriptionNull() {
                return this.IsNull(this.tableGetAccountName.DescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDescriptionNull() {
                this[this.tableGetAccountName.DescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAdminAcctPendingNull() {
                return this.IsNull(this.tableGetAccountName.AdminAcctPendingColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAdminAcctPendingNull() {
                this[this.tableGetAccountName.AdminAcctPendingColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ListExciseTaxRateRowChangeEvent : global::System.EventArgs {
            
            private ListExciseTaxRateRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListExciseTaxRateRowChangeEvent(ListExciseTaxRateRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListExciseTaxRateRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SaveExciseTaxRateRowChangeEvent : global::System.EventArgs {
            
            private SaveExciseTaxRateRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SaveExciseTaxRateRowChangeEvent(SaveExciseTaxRateRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SaveExciseTaxRateRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class GetExciseTaxAccountInfoRowChangeEvent : global::System.EventArgs {
            
            private GetExciseTaxAccountInfoRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetExciseTaxAccountInfoRowChangeEvent(GetExciseTaxAccountInfoRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetExciseTaxAccountInfoRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class GetExciseTaxRateRowChangeEvent : global::System.EventArgs {
            
            private GetExciseTaxRateRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetExciseTaxRateRowChangeEvent(GetExciseTaxRateRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetExciseTaxRateRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class LocalTypeRowChangeEvent : global::System.EventArgs {
            
            private LocalTypeRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LocalTypeRowChangeEvent(LocalTypeRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LocalTypeRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class GetDistrictNameRowChangeEvent : global::System.EventArgs {
            
            private GetDistrictNameRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetDistrictNameRowChangeEvent(GetDistrictNameRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetDistrictNameRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class GetAccountNameRowChangeEvent : global::System.EventArgs {
            
            private GetAccountNameRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetAccountNameRowChangeEvent(GetAccountNameRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetAccountNameRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591