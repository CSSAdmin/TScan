//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4959
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace TerraScan.BusinessEntities {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("F39135LandData")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class F39135LandData : global::System.Data.DataSet {
        
        private GetWeightedRating_DataTable tableGetWeightedRating_;
        
        private GetTotalUnitsDataTable tableGetTotalUnits;
        
        private GetCalculateBaseValueDataTable tableGetCalculateBaseValue;
        
        private ListLandTypes3DataTable tableListLandTypes3;
        
        private GetLandUseTypes_DataTable tableGetLandUseTypes_;
        
        private ListLandTypes1DataTable tableListLandTypes1;
        
        private ListLandTypes2DataTable tableListLandTypes2;
        
        private ListAdjustmentTypeDataTable tableListAdjustmentType;
        
        private GetLandValuesSliceDetailsDataTable tableGetLandValuesSliceDetails;
        
        private GetRollYearDataTable tableGetRollYear;
        
        private ListGridInfluencesDataTable tableListGridInfluences;
        
        private ListInfluenceTypesDataTable tableListInfluenceTypes;
        
        private Get_LandCodeDataTable tableGet_LandCode;
        
        private Get_LandCodeBaseValueDataTable tableGet_LandCodeBaseValue;
        
        private ListLandCodeDataTable tableListLandCode;
        
        private WeightedRating_DataTable tableWeightedRating_;
        
        private GetValueSliceValidDataTable tableGetValueSliceValid;
        
        private GetTotalValueDataTable tableGetTotalValue;
        
        private GetTotalRatingDataTable tableGetTotalRating;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public F39135LandData() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected F39135LandData(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["GetWeightedRating "] != null)) {
                    base.Tables.Add(new GetWeightedRating_DataTable(ds.Tables["GetWeightedRating "]));
                }
                if ((ds.Tables["GetTotalUnits"] != null)) {
                    base.Tables.Add(new GetTotalUnitsDataTable(ds.Tables["GetTotalUnits"]));
                }
                if ((ds.Tables["GetCalculateBaseValue"] != null)) {
                    base.Tables.Add(new GetCalculateBaseValueDataTable(ds.Tables["GetCalculateBaseValue"]));
                }
                if ((ds.Tables["ListLandTypes3"] != null)) {
                    base.Tables.Add(new ListLandTypes3DataTable(ds.Tables["ListLandTypes3"]));
                }
                if ((ds.Tables["GetLandUseTypes "] != null)) {
                    base.Tables.Add(new GetLandUseTypes_DataTable(ds.Tables["GetLandUseTypes "]));
                }
                if ((ds.Tables["ListLandTypes1"] != null)) {
                    base.Tables.Add(new ListLandTypes1DataTable(ds.Tables["ListLandTypes1"]));
                }
                if ((ds.Tables["ListLandTypes2"] != null)) {
                    base.Tables.Add(new ListLandTypes2DataTable(ds.Tables["ListLandTypes2"]));
                }
                if ((ds.Tables["ListAdjustmentType"] != null)) {
                    base.Tables.Add(new ListAdjustmentTypeDataTable(ds.Tables["ListAdjustmentType"]));
                }
                if ((ds.Tables["GetLandValuesSliceDetails"] != null)) {
                    base.Tables.Add(new GetLandValuesSliceDetailsDataTable(ds.Tables["GetLandValuesSliceDetails"]));
                }
                if ((ds.Tables["GetRollYear"] != null)) {
                    base.Tables.Add(new GetRollYearDataTable(ds.Tables["GetRollYear"]));
                }
                if ((ds.Tables["ListGridInfluences"] != null)) {
                    base.Tables.Add(new ListGridInfluencesDataTable(ds.Tables["ListGridInfluences"]));
                }
                if ((ds.Tables["ListInfluenceTypes"] != null)) {
                    base.Tables.Add(new ListInfluenceTypesDataTable(ds.Tables["ListInfluenceTypes"]));
                }
                if ((ds.Tables["Get_LandCode"] != null)) {
                    base.Tables.Add(new Get_LandCodeDataTable(ds.Tables["Get_LandCode"]));
                }
                if ((ds.Tables["Get_LandCodeBaseValue"] != null)) {
                    base.Tables.Add(new Get_LandCodeBaseValueDataTable(ds.Tables["Get_LandCodeBaseValue"]));
                }
                if ((ds.Tables["ListLandCode"] != null)) {
                    base.Tables.Add(new ListLandCodeDataTable(ds.Tables["ListLandCode"]));
                }
                if ((ds.Tables["WeightedRating "] != null)) {
                    base.Tables.Add(new WeightedRating_DataTable(ds.Tables["WeightedRating "]));
                }
                if ((ds.Tables["GetValueSliceValid"] != null)) {
                    base.Tables.Add(new GetValueSliceValidDataTable(ds.Tables["GetValueSliceValid"]));
                }
                if ((ds.Tables["GetTotalValue"] != null)) {
                    base.Tables.Add(new GetTotalValueDataTable(ds.Tables["GetTotalValue"]));
                }
                if ((ds.Tables["GetTotalRating"] != null)) {
                    base.Tables.Add(new GetTotalRatingDataTable(ds.Tables["GetTotalRating"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GetWeightedRating_DataTable GetWeightedRating_ {
            get {
                return this.tableGetWeightedRating_;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GetTotalUnitsDataTable GetTotalUnits {
            get {
                return this.tableGetTotalUnits;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GetCalculateBaseValueDataTable GetCalculateBaseValue {
            get {
                return this.tableGetCalculateBaseValue;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ListLandTypes3DataTable ListLandTypes3 {
            get {
                return this.tableListLandTypes3;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GetLandUseTypes_DataTable GetLandUseTypes_ {
            get {
                return this.tableGetLandUseTypes_;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ListLandTypes1DataTable ListLandTypes1 {
            get {
                return this.tableListLandTypes1;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ListLandTypes2DataTable ListLandTypes2 {
            get {
                return this.tableListLandTypes2;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ListAdjustmentTypeDataTable ListAdjustmentType {
            get {
                return this.tableListAdjustmentType;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GetLandValuesSliceDetailsDataTable GetLandValuesSliceDetails {
            get {
                return this.tableGetLandValuesSliceDetails;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GetRollYearDataTable GetRollYear {
            get {
                return this.tableGetRollYear;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ListGridInfluencesDataTable ListGridInfluences {
            get {
                return this.tableListGridInfluences;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ListInfluenceTypesDataTable ListInfluenceTypes {
            get {
                return this.tableListInfluenceTypes;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Get_LandCodeDataTable Get_LandCode {
            get {
                return this.tableGet_LandCode;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Get_LandCodeBaseValueDataTable Get_LandCodeBaseValue {
            get {
                return this.tableGet_LandCodeBaseValue;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ListLandCodeDataTable ListLandCode {
            get {
                return this.tableListLandCode;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public WeightedRating_DataTable WeightedRating_ {
            get {
                return this.tableWeightedRating_;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GetValueSliceValidDataTable GetValueSliceValid {
            get {
                return this.tableGetValueSliceValid;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GetTotalValueDataTable GetTotalValue {
            get {
                return this.tableGetTotalValue;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GetTotalRatingDataTable GetTotalRating {
            get {
                return this.tableGetTotalRating;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            F39135LandData cln = ((F39135LandData)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["GetWeightedRating "] != null)) {
                    base.Tables.Add(new GetWeightedRating_DataTable(ds.Tables["GetWeightedRating "]));
                }
                if ((ds.Tables["GetTotalUnits"] != null)) {
                    base.Tables.Add(new GetTotalUnitsDataTable(ds.Tables["GetTotalUnits"]));
                }
                if ((ds.Tables["GetCalculateBaseValue"] != null)) {
                    base.Tables.Add(new GetCalculateBaseValueDataTable(ds.Tables["GetCalculateBaseValue"]));
                }
                if ((ds.Tables["ListLandTypes3"] != null)) {
                    base.Tables.Add(new ListLandTypes3DataTable(ds.Tables["ListLandTypes3"]));
                }
                if ((ds.Tables["GetLandUseTypes "] != null)) {
                    base.Tables.Add(new GetLandUseTypes_DataTable(ds.Tables["GetLandUseTypes "]));
                }
                if ((ds.Tables["ListLandTypes1"] != null)) {
                    base.Tables.Add(new ListLandTypes1DataTable(ds.Tables["ListLandTypes1"]));
                }
                if ((ds.Tables["ListLandTypes2"] != null)) {
                    base.Tables.Add(new ListLandTypes2DataTable(ds.Tables["ListLandTypes2"]));
                }
                if ((ds.Tables["ListAdjustmentType"] != null)) {
                    base.Tables.Add(new ListAdjustmentTypeDataTable(ds.Tables["ListAdjustmentType"]));
                }
                if ((ds.Tables["GetLandValuesSliceDetails"] != null)) {
                    base.Tables.Add(new GetLandValuesSliceDetailsDataTable(ds.Tables["GetLandValuesSliceDetails"]));
                }
                if ((ds.Tables["GetRollYear"] != null)) {
                    base.Tables.Add(new GetRollYearDataTable(ds.Tables["GetRollYear"]));
                }
                if ((ds.Tables["ListGridInfluences"] != null)) {
                    base.Tables.Add(new ListGridInfluencesDataTable(ds.Tables["ListGridInfluences"]));
                }
                if ((ds.Tables["ListInfluenceTypes"] != null)) {
                    base.Tables.Add(new ListInfluenceTypesDataTable(ds.Tables["ListInfluenceTypes"]));
                }
                if ((ds.Tables["Get_LandCode"] != null)) {
                    base.Tables.Add(new Get_LandCodeDataTable(ds.Tables["Get_LandCode"]));
                }
                if ((ds.Tables["Get_LandCodeBaseValue"] != null)) {
                    base.Tables.Add(new Get_LandCodeBaseValueDataTable(ds.Tables["Get_LandCodeBaseValue"]));
                }
                if ((ds.Tables["ListLandCode"] != null)) {
                    base.Tables.Add(new ListLandCodeDataTable(ds.Tables["ListLandCode"]));
                }
                if ((ds.Tables["WeightedRating "] != null)) {
                    base.Tables.Add(new WeightedRating_DataTable(ds.Tables["WeightedRating "]));
                }
                if ((ds.Tables["GetValueSliceValid"] != null)) {
                    base.Tables.Add(new GetValueSliceValidDataTable(ds.Tables["GetValueSliceValid"]));
                }
                if ((ds.Tables["GetTotalValue"] != null)) {
                    base.Tables.Add(new GetTotalValueDataTable(ds.Tables["GetTotalValue"]));
                }
                if ((ds.Tables["GetTotalRating"] != null)) {
                    base.Tables.Add(new GetTotalRatingDataTable(ds.Tables["GetTotalRating"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableGetWeightedRating_ = ((GetWeightedRating_DataTable)(base.Tables["GetWeightedRating "]));
            if ((initTable == true)) {
                if ((this.tableGetWeightedRating_ != null)) {
                    this.tableGetWeightedRating_.InitVars();
                }
            }
            this.tableGetTotalUnits = ((GetTotalUnitsDataTable)(base.Tables["GetTotalUnits"]));
            if ((initTable == true)) {
                if ((this.tableGetTotalUnits != null)) {
                    this.tableGetTotalUnits.InitVars();
                }
            }
            this.tableGetCalculateBaseValue = ((GetCalculateBaseValueDataTable)(base.Tables["GetCalculateBaseValue"]));
            if ((initTable == true)) {
                if ((this.tableGetCalculateBaseValue != null)) {
                    this.tableGetCalculateBaseValue.InitVars();
                }
            }
            this.tableListLandTypes3 = ((ListLandTypes3DataTable)(base.Tables["ListLandTypes3"]));
            if ((initTable == true)) {
                if ((this.tableListLandTypes3 != null)) {
                    this.tableListLandTypes3.InitVars();
                }
            }
            this.tableGetLandUseTypes_ = ((GetLandUseTypes_DataTable)(base.Tables["GetLandUseTypes "]));
            if ((initTable == true)) {
                if ((this.tableGetLandUseTypes_ != null)) {
                    this.tableGetLandUseTypes_.InitVars();
                }
            }
            this.tableListLandTypes1 = ((ListLandTypes1DataTable)(base.Tables["ListLandTypes1"]));
            if ((initTable == true)) {
                if ((this.tableListLandTypes1 != null)) {
                    this.tableListLandTypes1.InitVars();
                }
            }
            this.tableListLandTypes2 = ((ListLandTypes2DataTable)(base.Tables["ListLandTypes2"]));
            if ((initTable == true)) {
                if ((this.tableListLandTypes2 != null)) {
                    this.tableListLandTypes2.InitVars();
                }
            }
            this.tableListAdjustmentType = ((ListAdjustmentTypeDataTable)(base.Tables["ListAdjustmentType"]));
            if ((initTable == true)) {
                if ((this.tableListAdjustmentType != null)) {
                    this.tableListAdjustmentType.InitVars();
                }
            }
            this.tableGetLandValuesSliceDetails = ((GetLandValuesSliceDetailsDataTable)(base.Tables["GetLandValuesSliceDetails"]));
            if ((initTable == true)) {
                if ((this.tableGetLandValuesSliceDetails != null)) {
                    this.tableGetLandValuesSliceDetails.InitVars();
                }
            }
            this.tableGetRollYear = ((GetRollYearDataTable)(base.Tables["GetRollYear"]));
            if ((initTable == true)) {
                if ((this.tableGetRollYear != null)) {
                    this.tableGetRollYear.InitVars();
                }
            }
            this.tableListGridInfluences = ((ListGridInfluencesDataTable)(base.Tables["ListGridInfluences"]));
            if ((initTable == true)) {
                if ((this.tableListGridInfluences != null)) {
                    this.tableListGridInfluences.InitVars();
                }
            }
            this.tableListInfluenceTypes = ((ListInfluenceTypesDataTable)(base.Tables["ListInfluenceTypes"]));
            if ((initTable == true)) {
                if ((this.tableListInfluenceTypes != null)) {
                    this.tableListInfluenceTypes.InitVars();
                }
            }
            this.tableGet_LandCode = ((Get_LandCodeDataTable)(base.Tables["Get_LandCode"]));
            if ((initTable == true)) {
                if ((this.tableGet_LandCode != null)) {
                    this.tableGet_LandCode.InitVars();
                }
            }
            this.tableGet_LandCodeBaseValue = ((Get_LandCodeBaseValueDataTable)(base.Tables["Get_LandCodeBaseValue"]));
            if ((initTable == true)) {
                if ((this.tableGet_LandCodeBaseValue != null)) {
                    this.tableGet_LandCodeBaseValue.InitVars();
                }
            }
            this.tableListLandCode = ((ListLandCodeDataTable)(base.Tables["ListLandCode"]));
            if ((initTable == true)) {
                if ((this.tableListLandCode != null)) {
                    this.tableListLandCode.InitVars();
                }
            }
            this.tableWeightedRating_ = ((WeightedRating_DataTable)(base.Tables["WeightedRating "]));
            if ((initTable == true)) {
                if ((this.tableWeightedRating_ != null)) {
                    this.tableWeightedRating_.InitVars();
                }
            }
            this.tableGetValueSliceValid = ((GetValueSliceValidDataTable)(base.Tables["GetValueSliceValid"]));
            if ((initTable == true)) {
                if ((this.tableGetValueSliceValid != null)) {
                    this.tableGetValueSliceValid.InitVars();
                }
            }
            this.tableGetTotalValue = ((GetTotalValueDataTable)(base.Tables["GetTotalValue"]));
            if ((initTable == true)) {
                if ((this.tableGetTotalValue != null)) {
                    this.tableGetTotalValue.InitVars();
                }
            }
            this.tableGetTotalRating = ((GetTotalRatingDataTable)(base.Tables["GetTotalRating"]));
            if ((initTable == true)) {
                if ((this.tableGetTotalRating != null)) {
                    this.tableGetTotalRating.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "F39135LandData";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/F39135LandData.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableGetWeightedRating_ = new GetWeightedRating_DataTable();
            base.Tables.Add(this.tableGetWeightedRating_);
            this.tableGetTotalUnits = new GetTotalUnitsDataTable();
            base.Tables.Add(this.tableGetTotalUnits);
            this.tableGetCalculateBaseValue = new GetCalculateBaseValueDataTable();
            base.Tables.Add(this.tableGetCalculateBaseValue);
            this.tableListLandTypes3 = new ListLandTypes3DataTable();
            base.Tables.Add(this.tableListLandTypes3);
            this.tableGetLandUseTypes_ = new GetLandUseTypes_DataTable();
            base.Tables.Add(this.tableGetLandUseTypes_);
            this.tableListLandTypes1 = new ListLandTypes1DataTable();
            base.Tables.Add(this.tableListLandTypes1);
            this.tableListLandTypes2 = new ListLandTypes2DataTable();
            base.Tables.Add(this.tableListLandTypes2);
            this.tableListAdjustmentType = new ListAdjustmentTypeDataTable();
            base.Tables.Add(this.tableListAdjustmentType);
            this.tableGetLandValuesSliceDetails = new GetLandValuesSliceDetailsDataTable();
            base.Tables.Add(this.tableGetLandValuesSliceDetails);
            this.tableGetRollYear = new GetRollYearDataTable();
            base.Tables.Add(this.tableGetRollYear);
            this.tableListGridInfluences = new ListGridInfluencesDataTable();
            base.Tables.Add(this.tableListGridInfluences);
            this.tableListInfluenceTypes = new ListInfluenceTypesDataTable();
            base.Tables.Add(this.tableListInfluenceTypes);
            this.tableGet_LandCode = new Get_LandCodeDataTable();
            base.Tables.Add(this.tableGet_LandCode);
            this.tableGet_LandCodeBaseValue = new Get_LandCodeBaseValueDataTable();
            base.Tables.Add(this.tableGet_LandCodeBaseValue);
            this.tableListLandCode = new ListLandCodeDataTable();
            base.Tables.Add(this.tableListLandCode);
            this.tableWeightedRating_ = new WeightedRating_DataTable();
            base.Tables.Add(this.tableWeightedRating_);
            this.tableGetValueSliceValid = new GetValueSliceValidDataTable();
            base.Tables.Add(this.tableGetValueSliceValid);
            this.tableGetTotalValue = new GetTotalValueDataTable();
            base.Tables.Add(this.tableGetTotalValue);
            this.tableGetTotalRating = new GetTotalRatingDataTable();
            base.Tables.Add(this.tableGetTotalRating);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeGetWeightedRating_() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeGetTotalUnits() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeGetCalculateBaseValue() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeListLandTypes3() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeGetLandUseTypes_() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeListLandTypes1() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeListLandTypes2() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeListAdjustmentType() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeGetLandValuesSliceDetails() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeGetRollYear() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeListGridInfluences() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeListInfluenceTypes() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeGet_LandCode() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeGet_LandCodeBaseValue() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeListLandCode() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeWeightedRating_() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeGetValueSliceValid() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeGetTotalValue() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeGetTotalRating() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            F39135LandData ds = new F39135LandData();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void GetWeightedRating_RowChangeEventHandler(object sender, GetWeightedRating_RowChangeEvent e);
        
        public delegate void GetTotalUnitsRowChangeEventHandler(object sender, GetTotalUnitsRowChangeEvent e);
        
        public delegate void GetCalculateBaseValueRowChangeEventHandler(object sender, GetCalculateBaseValueRowChangeEvent e);
        
        public delegate void ListLandTypes3RowChangeEventHandler(object sender, ListLandTypes3RowChangeEvent e);
        
        public delegate void GetLandUseTypes_RowChangeEventHandler(object sender, GetLandUseTypes_RowChangeEvent e);
        
        public delegate void ListLandTypes1RowChangeEventHandler(object sender, ListLandTypes1RowChangeEvent e);
        
        public delegate void ListLandTypes2RowChangeEventHandler(object sender, ListLandTypes2RowChangeEvent e);
        
        public delegate void ListAdjustmentTypeRowChangeEventHandler(object sender, ListAdjustmentTypeRowChangeEvent e);
        
        public delegate void GetLandValuesSliceDetailsRowChangeEventHandler(object sender, GetLandValuesSliceDetailsRowChangeEvent e);
        
        public delegate void GetRollYearRowChangeEventHandler(object sender, GetRollYearRowChangeEvent e);
        
        public delegate void ListGridInfluencesRowChangeEventHandler(object sender, ListGridInfluencesRowChangeEvent e);
        
        public delegate void ListInfluenceTypesRowChangeEventHandler(object sender, ListInfluenceTypesRowChangeEvent e);
        
        public delegate void Get_LandCodeRowChangeEventHandler(object sender, Get_LandCodeRowChangeEvent e);
        
        public delegate void Get_LandCodeBaseValueRowChangeEventHandler(object sender, Get_LandCodeBaseValueRowChangeEvent e);
        
        public delegate void ListLandCodeRowChangeEventHandler(object sender, ListLandCodeRowChangeEvent e);
        
        public delegate void WeightedRating_RowChangeEventHandler(object sender, WeightedRating_RowChangeEvent e);
        
        public delegate void GetValueSliceValidRowChangeEventHandler(object sender, GetValueSliceValidRowChangeEvent e);
        
        public delegate void GetTotalValueRowChangeEventHandler(object sender, GetTotalValueRowChangeEvent e);
        
        public delegate void GetTotalRatingRowChangeEventHandler(object sender, GetTotalRatingRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class GetWeightedRating_DataTable : global::System.Data.TypedTableBase<GetWeightedRating_Row> {
            
            private global::System.Data.DataColumn columnWeightedRating;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetWeightedRating_DataTable() {
                this.TableName = "GetWeightedRating ";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetWeightedRating_DataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected GetWeightedRating_DataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WeightedRatingColumn {
                get {
                    return this.columnWeightedRating;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetWeightedRating_Row this[int index] {
                get {
                    return ((GetWeightedRating_Row)(this.Rows[index]));
                }
            }
            
            public event GetWeightedRating_RowChangeEventHandler GetWeightedRating_RowChanging;
            
            public event GetWeightedRating_RowChangeEventHandler GetWeightedRating_RowChanged;
            
            public event GetWeightedRating_RowChangeEventHandler GetWeightedRating_RowDeleting;
            
            public event GetWeightedRating_RowChangeEventHandler GetWeightedRating_RowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddGetWeightedRating_Row(GetWeightedRating_Row row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetWeightedRating_Row AddGetWeightedRating_Row(decimal WeightedRating) {
                GetWeightedRating_Row rowGetWeightedRating_Row = ((GetWeightedRating_Row)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        WeightedRating};
                rowGetWeightedRating_Row.ItemArray = columnValuesArray;
                this.Rows.Add(rowGetWeightedRating_Row);
                return rowGetWeightedRating_Row;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                GetWeightedRating_DataTable cln = ((GetWeightedRating_DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new GetWeightedRating_DataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnWeightedRating = base.Columns["WeightedRating"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnWeightedRating = new global::System.Data.DataColumn("WeightedRating", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWeightedRating);
                this.columnWeightedRating.ReadOnly = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetWeightedRating_Row NewGetWeightedRating_Row() {
                return ((GetWeightedRating_Row)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new GetWeightedRating_Row(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(GetWeightedRating_Row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GetWeightedRating_RowChanged != null)) {
                    this.GetWeightedRating_RowChanged(this, new GetWeightedRating_RowChangeEvent(((GetWeightedRating_Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GetWeightedRating_RowChanging != null)) {
                    this.GetWeightedRating_RowChanging(this, new GetWeightedRating_RowChangeEvent(((GetWeightedRating_Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GetWeightedRating_RowDeleted != null)) {
                    this.GetWeightedRating_RowDeleted(this, new GetWeightedRating_RowChangeEvent(((GetWeightedRating_Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GetWeightedRating_RowDeleting != null)) {
                    this.GetWeightedRating_RowDeleting(this, new GetWeightedRating_RowChangeEvent(((GetWeightedRating_Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveGetWeightedRating_Row(GetWeightedRating_Row row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F39135LandData ds = new F39135LandData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "GetWeightedRating_DataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class GetTotalUnitsDataTable : global::System.Data.TypedTableBase<GetTotalUnitsRow> {
            
            private global::System.Data.DataColumn columnTotalUnits;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetTotalUnitsDataTable() {
                this.TableName = "GetTotalUnits";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetTotalUnitsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected GetTotalUnitsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalUnitsColumn {
                get {
                    return this.columnTotalUnits;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetTotalUnitsRow this[int index] {
                get {
                    return ((GetTotalUnitsRow)(this.Rows[index]));
                }
            }
            
            public event GetTotalUnitsRowChangeEventHandler GetTotalUnitsRowChanging;
            
            public event GetTotalUnitsRowChangeEventHandler GetTotalUnitsRowChanged;
            
            public event GetTotalUnitsRowChangeEventHandler GetTotalUnitsRowDeleting;
            
            public event GetTotalUnitsRowChangeEventHandler GetTotalUnitsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddGetTotalUnitsRow(GetTotalUnitsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetTotalUnitsRow AddGetTotalUnitsRow(decimal TotalUnits) {
                GetTotalUnitsRow rowGetTotalUnitsRow = ((GetTotalUnitsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        TotalUnits};
                rowGetTotalUnitsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowGetTotalUnitsRow);
                return rowGetTotalUnitsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                GetTotalUnitsDataTable cln = ((GetTotalUnitsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new GetTotalUnitsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnTotalUnits = base.Columns["TotalUnits"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnTotalUnits = new global::System.Data.DataColumn("TotalUnits", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalUnits);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetTotalUnitsRow NewGetTotalUnitsRow() {
                return ((GetTotalUnitsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new GetTotalUnitsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(GetTotalUnitsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GetTotalUnitsRowChanged != null)) {
                    this.GetTotalUnitsRowChanged(this, new GetTotalUnitsRowChangeEvent(((GetTotalUnitsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GetTotalUnitsRowChanging != null)) {
                    this.GetTotalUnitsRowChanging(this, new GetTotalUnitsRowChangeEvent(((GetTotalUnitsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GetTotalUnitsRowDeleted != null)) {
                    this.GetTotalUnitsRowDeleted(this, new GetTotalUnitsRowChangeEvent(((GetTotalUnitsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GetTotalUnitsRowDeleting != null)) {
                    this.GetTotalUnitsRowDeleting(this, new GetTotalUnitsRowChangeEvent(((GetTotalUnitsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveGetTotalUnitsRow(GetTotalUnitsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F39135LandData ds = new F39135LandData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "GetTotalUnitsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class GetCalculateBaseValueDataTable : global::System.Data.TypedTableBase<GetCalculateBaseValueRow> {
            
            private global::System.Data.DataColumn columnBaseValue;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetCalculateBaseValueDataTable() {
                this.TableName = "GetCalculateBaseValue";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetCalculateBaseValueDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected GetCalculateBaseValueDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BaseValueColumn {
                get {
                    return this.columnBaseValue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetCalculateBaseValueRow this[int index] {
                get {
                    return ((GetCalculateBaseValueRow)(this.Rows[index]));
                }
            }
            
            public event GetCalculateBaseValueRowChangeEventHandler GetCalculateBaseValueRowChanging;
            
            public event GetCalculateBaseValueRowChangeEventHandler GetCalculateBaseValueRowChanged;
            
            public event GetCalculateBaseValueRowChangeEventHandler GetCalculateBaseValueRowDeleting;
            
            public event GetCalculateBaseValueRowChangeEventHandler GetCalculateBaseValueRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddGetCalculateBaseValueRow(GetCalculateBaseValueRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetCalculateBaseValueRow AddGetCalculateBaseValueRow(decimal BaseValue) {
                GetCalculateBaseValueRow rowGetCalculateBaseValueRow = ((GetCalculateBaseValueRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        BaseValue};
                rowGetCalculateBaseValueRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowGetCalculateBaseValueRow);
                return rowGetCalculateBaseValueRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                GetCalculateBaseValueDataTable cln = ((GetCalculateBaseValueDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new GetCalculateBaseValueDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnBaseValue = base.Columns["BaseValue"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnBaseValue = new global::System.Data.DataColumn("BaseValue", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBaseValue);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetCalculateBaseValueRow NewGetCalculateBaseValueRow() {
                return ((GetCalculateBaseValueRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new GetCalculateBaseValueRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(GetCalculateBaseValueRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GetCalculateBaseValueRowChanged != null)) {
                    this.GetCalculateBaseValueRowChanged(this, new GetCalculateBaseValueRowChangeEvent(((GetCalculateBaseValueRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GetCalculateBaseValueRowChanging != null)) {
                    this.GetCalculateBaseValueRowChanging(this, new GetCalculateBaseValueRowChangeEvent(((GetCalculateBaseValueRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GetCalculateBaseValueRowDeleted != null)) {
                    this.GetCalculateBaseValueRowDeleted(this, new GetCalculateBaseValueRowChangeEvent(((GetCalculateBaseValueRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GetCalculateBaseValueRowDeleting != null)) {
                    this.GetCalculateBaseValueRowDeleting(this, new GetCalculateBaseValueRowChangeEvent(((GetCalculateBaseValueRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveGetCalculateBaseValueRow(GetCalculateBaseValueRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F39135LandData ds = new F39135LandData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "GetCalculateBaseValueDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ListLandTypes3DataTable : global::System.Data.TypedTableBase<ListLandTypes3Row> {
            
            private global::System.Data.DataColumn columnLandTypeID;
            
            private global::System.Data.DataColumn columnLandType;
            
            private global::System.Data.DataColumn columnRollYear;
            
            private global::System.Data.DataColumn columnDescription;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListLandTypes3DataTable() {
                this.TableName = "ListLandTypes3";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListLandTypes3DataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ListLandTypes3DataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LandTypeIDColumn {
                get {
                    return this.columnLandTypeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LandTypeColumn {
                get {
                    return this.columnLandType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RollYearColumn {
                get {
                    return this.columnRollYear;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListLandTypes3Row this[int index] {
                get {
                    return ((ListLandTypes3Row)(this.Rows[index]));
                }
            }
            
            public event ListLandTypes3RowChangeEventHandler ListLandTypes3RowChanging;
            
            public event ListLandTypes3RowChangeEventHandler ListLandTypes3RowChanged;
            
            public event ListLandTypes3RowChangeEventHandler ListLandTypes3RowDeleting;
            
            public event ListLandTypes3RowChangeEventHandler ListLandTypes3RowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddListLandTypes3Row(ListLandTypes3Row row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListLandTypes3Row AddListLandTypes3Row(int LandTypeID, string LandType, short RollYear, string Description) {
                ListLandTypes3Row rowListLandTypes3Row = ((ListLandTypes3Row)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        LandTypeID,
                        LandType,
                        RollYear,
                        Description};
                rowListLandTypes3Row.ItemArray = columnValuesArray;
                this.Rows.Add(rowListLandTypes3Row);
                return rowListLandTypes3Row;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ListLandTypes3DataTable cln = ((ListLandTypes3DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ListLandTypes3DataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnLandTypeID = base.Columns["LandTypeID"];
                this.columnLandType = base.Columns["LandType"];
                this.columnRollYear = base.Columns["RollYear"];
                this.columnDescription = base.Columns["Description"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnLandTypeID = new global::System.Data.DataColumn("LandTypeID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLandTypeID);
                this.columnLandType = new global::System.Data.DataColumn("LandType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLandType);
                this.columnRollYear = new global::System.Data.DataColumn("RollYear", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRollYear);
                this.columnDescription = new global::System.Data.DataColumn("Description", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescription);
                this.columnLandType.MaxLength = 20;
                this.columnDescription.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListLandTypes3Row NewListLandTypes3Row() {
                return ((ListLandTypes3Row)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ListLandTypes3Row(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ListLandTypes3Row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ListLandTypes3RowChanged != null)) {
                    this.ListLandTypes3RowChanged(this, new ListLandTypes3RowChangeEvent(((ListLandTypes3Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ListLandTypes3RowChanging != null)) {
                    this.ListLandTypes3RowChanging(this, new ListLandTypes3RowChangeEvent(((ListLandTypes3Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ListLandTypes3RowDeleted != null)) {
                    this.ListLandTypes3RowDeleted(this, new ListLandTypes3RowChangeEvent(((ListLandTypes3Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ListLandTypes3RowDeleting != null)) {
                    this.ListLandTypes3RowDeleting(this, new ListLandTypes3RowChangeEvent(((ListLandTypes3Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveListLandTypes3Row(ListLandTypes3Row row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F39135LandData ds = new F39135LandData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ListLandTypes3DataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class GetLandUseTypes_DataTable : global::System.Data.TypedTableBase<GetLandUseTypes_Row> {
            
            private global::System.Data.DataColumn columnAglandID;
            
            private global::System.Data.DataColumn columnUse;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetLandUseTypes_DataTable() {
                this.TableName = "GetLandUseTypes ";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetLandUseTypes_DataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected GetLandUseTypes_DataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AglandIDColumn {
                get {
                    return this.columnAglandID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UseColumn {
                get {
                    return this.columnUse;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetLandUseTypes_Row this[int index] {
                get {
                    return ((GetLandUseTypes_Row)(this.Rows[index]));
                }
            }
            
            public event GetLandUseTypes_RowChangeEventHandler GetLandUseTypes_RowChanging;
            
            public event GetLandUseTypes_RowChangeEventHandler GetLandUseTypes_RowChanged;
            
            public event GetLandUseTypes_RowChangeEventHandler GetLandUseTypes_RowDeleting;
            
            public event GetLandUseTypes_RowChangeEventHandler GetLandUseTypes_RowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddGetLandUseTypes_Row(GetLandUseTypes_Row row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetLandUseTypes_Row AddGetLandUseTypes_Row(int AglandID, string Use) {
                GetLandUseTypes_Row rowGetLandUseTypes_Row = ((GetLandUseTypes_Row)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        AglandID,
                        Use};
                rowGetLandUseTypes_Row.ItemArray = columnValuesArray;
                this.Rows.Add(rowGetLandUseTypes_Row);
                return rowGetLandUseTypes_Row;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                GetLandUseTypes_DataTable cln = ((GetLandUseTypes_DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new GetLandUseTypes_DataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnAglandID = base.Columns["AglandID"];
                this.columnUse = base.Columns["Use"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnAglandID = new global::System.Data.DataColumn("AglandID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAglandID);
                this.columnUse = new global::System.Data.DataColumn("Use", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUse);
                this.columnUse.MaxLength = 100;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetLandUseTypes_Row NewGetLandUseTypes_Row() {
                return ((GetLandUseTypes_Row)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new GetLandUseTypes_Row(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(GetLandUseTypes_Row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GetLandUseTypes_RowChanged != null)) {
                    this.GetLandUseTypes_RowChanged(this, new GetLandUseTypes_RowChangeEvent(((GetLandUseTypes_Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GetLandUseTypes_RowChanging != null)) {
                    this.GetLandUseTypes_RowChanging(this, new GetLandUseTypes_RowChangeEvent(((GetLandUseTypes_Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GetLandUseTypes_RowDeleted != null)) {
                    this.GetLandUseTypes_RowDeleted(this, new GetLandUseTypes_RowChangeEvent(((GetLandUseTypes_Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GetLandUseTypes_RowDeleting != null)) {
                    this.GetLandUseTypes_RowDeleting(this, new GetLandUseTypes_RowChangeEvent(((GetLandUseTypes_Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveGetLandUseTypes_Row(GetLandUseTypes_Row row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F39135LandData ds = new F39135LandData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "GetLandUseTypes_DataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ListLandTypes1DataTable : global::System.Data.TypedTableBase<ListLandTypes1Row> {
            
            private global::System.Data.DataColumn columnLandTypeID;
            
            private global::System.Data.DataColumn columnLandType;
            
            private global::System.Data.DataColumn columnRollYear;
            
            private global::System.Data.DataColumn columnDescription;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListLandTypes1DataTable() {
                this.TableName = "ListLandTypes1";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListLandTypes1DataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ListLandTypes1DataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LandTypeIDColumn {
                get {
                    return this.columnLandTypeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LandTypeColumn {
                get {
                    return this.columnLandType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RollYearColumn {
                get {
                    return this.columnRollYear;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListLandTypes1Row this[int index] {
                get {
                    return ((ListLandTypes1Row)(this.Rows[index]));
                }
            }
            
            public event ListLandTypes1RowChangeEventHandler ListLandTypes1RowChanging;
            
            public event ListLandTypes1RowChangeEventHandler ListLandTypes1RowChanged;
            
            public event ListLandTypes1RowChangeEventHandler ListLandTypes1RowDeleting;
            
            public event ListLandTypes1RowChangeEventHandler ListLandTypes1RowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddListLandTypes1Row(ListLandTypes1Row row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListLandTypes1Row AddListLandTypes1Row(int LandTypeID, string LandType, short RollYear, string Description) {
                ListLandTypes1Row rowListLandTypes1Row = ((ListLandTypes1Row)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        LandTypeID,
                        LandType,
                        RollYear,
                        Description};
                rowListLandTypes1Row.ItemArray = columnValuesArray;
                this.Rows.Add(rowListLandTypes1Row);
                return rowListLandTypes1Row;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ListLandTypes1DataTable cln = ((ListLandTypes1DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ListLandTypes1DataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnLandTypeID = base.Columns["LandTypeID"];
                this.columnLandType = base.Columns["LandType"];
                this.columnRollYear = base.Columns["RollYear"];
                this.columnDescription = base.Columns["Description"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnLandTypeID = new global::System.Data.DataColumn("LandTypeID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLandTypeID);
                this.columnLandType = new global::System.Data.DataColumn("LandType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLandType);
                this.columnRollYear = new global::System.Data.DataColumn("RollYear", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRollYear);
                this.columnDescription = new global::System.Data.DataColumn("Description", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescription);
                this.columnLandType.MaxLength = 20;
                this.columnDescription.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListLandTypes1Row NewListLandTypes1Row() {
                return ((ListLandTypes1Row)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ListLandTypes1Row(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ListLandTypes1Row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ListLandTypes1RowChanged != null)) {
                    this.ListLandTypes1RowChanged(this, new ListLandTypes1RowChangeEvent(((ListLandTypes1Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ListLandTypes1RowChanging != null)) {
                    this.ListLandTypes1RowChanging(this, new ListLandTypes1RowChangeEvent(((ListLandTypes1Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ListLandTypes1RowDeleted != null)) {
                    this.ListLandTypes1RowDeleted(this, new ListLandTypes1RowChangeEvent(((ListLandTypes1Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ListLandTypes1RowDeleting != null)) {
                    this.ListLandTypes1RowDeleting(this, new ListLandTypes1RowChangeEvent(((ListLandTypes1Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveListLandTypes1Row(ListLandTypes1Row row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F39135LandData ds = new F39135LandData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ListLandTypes1DataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ListLandTypes2DataTable : global::System.Data.TypedTableBase<ListLandTypes2Row> {
            
            private global::System.Data.DataColumn columnLandTypeID;
            
            private global::System.Data.DataColumn columnLandType;
            
            private global::System.Data.DataColumn columnRollYear;
            
            private global::System.Data.DataColumn columnDescription;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListLandTypes2DataTable() {
                this.TableName = "ListLandTypes2";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListLandTypes2DataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ListLandTypes2DataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LandTypeIDColumn {
                get {
                    return this.columnLandTypeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LandTypeColumn {
                get {
                    return this.columnLandType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RollYearColumn {
                get {
                    return this.columnRollYear;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListLandTypes2Row this[int index] {
                get {
                    return ((ListLandTypes2Row)(this.Rows[index]));
                }
            }
            
            public event ListLandTypes2RowChangeEventHandler ListLandTypes2RowChanging;
            
            public event ListLandTypes2RowChangeEventHandler ListLandTypes2RowChanged;
            
            public event ListLandTypes2RowChangeEventHandler ListLandTypes2RowDeleting;
            
            public event ListLandTypes2RowChangeEventHandler ListLandTypes2RowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddListLandTypes2Row(ListLandTypes2Row row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListLandTypes2Row AddListLandTypes2Row(int LandTypeID, string LandType, short RollYear, string Description) {
                ListLandTypes2Row rowListLandTypes2Row = ((ListLandTypes2Row)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        LandTypeID,
                        LandType,
                        RollYear,
                        Description};
                rowListLandTypes2Row.ItemArray = columnValuesArray;
                this.Rows.Add(rowListLandTypes2Row);
                return rowListLandTypes2Row;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ListLandTypes2DataTable cln = ((ListLandTypes2DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ListLandTypes2DataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnLandTypeID = base.Columns["LandTypeID"];
                this.columnLandType = base.Columns["LandType"];
                this.columnRollYear = base.Columns["RollYear"];
                this.columnDescription = base.Columns["Description"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnLandTypeID = new global::System.Data.DataColumn("LandTypeID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLandTypeID);
                this.columnLandType = new global::System.Data.DataColumn("LandType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLandType);
                this.columnRollYear = new global::System.Data.DataColumn("RollYear", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRollYear);
                this.columnDescription = new global::System.Data.DataColumn("Description", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescription);
                this.columnLandType.MaxLength = 20;
                this.columnDescription.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListLandTypes2Row NewListLandTypes2Row() {
                return ((ListLandTypes2Row)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ListLandTypes2Row(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ListLandTypes2Row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ListLandTypes2RowChanged != null)) {
                    this.ListLandTypes2RowChanged(this, new ListLandTypes2RowChangeEvent(((ListLandTypes2Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ListLandTypes2RowChanging != null)) {
                    this.ListLandTypes2RowChanging(this, new ListLandTypes2RowChangeEvent(((ListLandTypes2Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ListLandTypes2RowDeleted != null)) {
                    this.ListLandTypes2RowDeleted(this, new ListLandTypes2RowChangeEvent(((ListLandTypes2Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ListLandTypes2RowDeleting != null)) {
                    this.ListLandTypes2RowDeleting(this, new ListLandTypes2RowChangeEvent(((ListLandTypes2Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveListLandTypes2Row(ListLandTypes2Row row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F39135LandData ds = new F39135LandData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ListLandTypes2DataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ListAdjustmentTypeDataTable : global::System.Data.TypedTableBase<ListAdjustmentTypeRow> {
            
            private global::System.Data.DataColumn columnAdjustmentTypeID;
            
            private global::System.Data.DataColumn columnAdjustmentType;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListAdjustmentTypeDataTable() {
                this.TableName = "ListAdjustmentType";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListAdjustmentTypeDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ListAdjustmentTypeDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AdjustmentTypeIDColumn {
                get {
                    return this.columnAdjustmentTypeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AdjustmentTypeColumn {
                get {
                    return this.columnAdjustmentType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListAdjustmentTypeRow this[int index] {
                get {
                    return ((ListAdjustmentTypeRow)(this.Rows[index]));
                }
            }
            
            public event ListAdjustmentTypeRowChangeEventHandler ListAdjustmentTypeRowChanging;
            
            public event ListAdjustmentTypeRowChangeEventHandler ListAdjustmentTypeRowChanged;
            
            public event ListAdjustmentTypeRowChangeEventHandler ListAdjustmentTypeRowDeleting;
            
            public event ListAdjustmentTypeRowChangeEventHandler ListAdjustmentTypeRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddListAdjustmentTypeRow(ListAdjustmentTypeRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListAdjustmentTypeRow AddListAdjustmentTypeRow(int AdjustmentTypeID, string AdjustmentType) {
                ListAdjustmentTypeRow rowListAdjustmentTypeRow = ((ListAdjustmentTypeRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        AdjustmentTypeID,
                        AdjustmentType};
                rowListAdjustmentTypeRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowListAdjustmentTypeRow);
                return rowListAdjustmentTypeRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ListAdjustmentTypeDataTable cln = ((ListAdjustmentTypeDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ListAdjustmentTypeDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnAdjustmentTypeID = base.Columns["AdjustmentTypeID"];
                this.columnAdjustmentType = base.Columns["AdjustmentType"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnAdjustmentTypeID = new global::System.Data.DataColumn("AdjustmentTypeID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAdjustmentTypeID);
                this.columnAdjustmentType = new global::System.Data.DataColumn("AdjustmentType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAdjustmentType);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListAdjustmentTypeRow NewListAdjustmentTypeRow() {
                return ((ListAdjustmentTypeRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ListAdjustmentTypeRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ListAdjustmentTypeRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ListAdjustmentTypeRowChanged != null)) {
                    this.ListAdjustmentTypeRowChanged(this, new ListAdjustmentTypeRowChangeEvent(((ListAdjustmentTypeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ListAdjustmentTypeRowChanging != null)) {
                    this.ListAdjustmentTypeRowChanging(this, new ListAdjustmentTypeRowChangeEvent(((ListAdjustmentTypeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ListAdjustmentTypeRowDeleted != null)) {
                    this.ListAdjustmentTypeRowDeleted(this, new ListAdjustmentTypeRowChangeEvent(((ListAdjustmentTypeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ListAdjustmentTypeRowDeleting != null)) {
                    this.ListAdjustmentTypeRowDeleting(this, new ListAdjustmentTypeRowChangeEvent(((ListAdjustmentTypeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveListAdjustmentTypeRow(ListAdjustmentTypeRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F39135LandData ds = new F39135LandData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ListAdjustmentTypeDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class GetLandValuesSliceDetailsDataTable : global::System.Data.TypedTableBase<GetLandValuesSliceDetailsRow> {
            
            private global::System.Data.DataColumn columnLUID;
            
            private global::System.Data.DataColumn columnValueSliceID;
            
            private global::System.Data.DataColumn columnRollYear;
            
            private global::System.Data.DataColumn columnLandTypeID1;
            
            private global::System.Data.DataColumn columnLandType1;
            
            private global::System.Data.DataColumn columnLandTypeID2;
            
            private global::System.Data.DataColumn columnLandType2;
            
            private global::System.Data.DataColumn columnLandTypeID3;
            
            private global::System.Data.DataColumn columnLandType3;
            
            private global::System.Data.DataColumn columnLandCode;
            
            private global::System.Data.DataColumn columnBaseValue;
            
            private global::System.Data.DataColumn columnBreak1;
            
            private global::System.Data.DataColumn columnValue1;
            
            private global::System.Data.DataColumn columnBreak2;
            
            private global::System.Data.DataColumn columnValue2;
            
            private global::System.Data.DataColumn columnBreak3;
            
            private global::System.Data.DataColumn columnValue3;
            
            private global::System.Data.DataColumn columnBreak4;
            
            private global::System.Data.DataColumn columnValue4;
            
            private global::System.Data.DataColumn columnBreak5;
            
            private global::System.Data.DataColumn columnValue5;
            
            private global::System.Data.DataColumn columnAdjustmentType;
            
            private global::System.Data.DataColumn columnAdjTypeDescription;
            
            private global::System.Data.DataColumn columnAdjustment;
            
            private global::System.Data.DataColumn columnAdjDescription;
            
            private global::System.Data.DataColumn columnUnitType;
            
            private global::System.Data.DataColumn columnUnits;
            
            private global::System.Data.DataColumn columnFinalMrktValue;
            
            private global::System.Data.DataColumn columnLotWidth;
            
            private global::System.Data.DataColumn columnLotDepth;
            
            private global::System.Data.DataColumn columnLandShape;
            
            private global::System.Data.DataColumn columnBaseMrktValue;
            
            private global::System.Data.DataColumn columnGridFinalValue;
            
            private global::System.Data.DataColumn columnVFormula;
            
            private global::System.Data.DataColumn columnBaseDollarPerUnit;
            
            private global::System.Data.DataColumn columnGridUnitsTotal;
            
            private global::System.Data.DataColumn columnMrktMultiplier;
            
            private global::System.Data.DataColumn columnUseMultiplier;
            
            private global::System.Data.DataColumn columnSrAcres;
            
            private global::System.Data.DataColumn columnWeightedRating;
            
            private global::System.Data.DataColumn columnAglandID;
            
            private global::System.Data.DataColumn columnLandUse;
            
            private global::System.Data.DataColumn columnInfluenceTypeID1;
            
            private global::System.Data.DataColumn columnInfluenceType1;
            
            private global::System.Data.DataColumn columnInfluence1;
            
            private global::System.Data.DataColumn columnInfluenceDesc1;
            
            private global::System.Data.DataColumn columnInfluenceTypeID2;
            
            private global::System.Data.DataColumn columnInfluenceType2;
            
            private global::System.Data.DataColumn columnInfluence2;
            
            private global::System.Data.DataColumn columnInfluenceDesc2;
            
            private global::System.Data.DataColumn columnInfluenceTypeID3;
            
            private global::System.Data.DataColumn columnInfluenceType3;
            
            private global::System.Data.DataColumn columnInfluence3;
            
            private global::System.Data.DataColumn columnInfluenceDesc3;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetLandValuesSliceDetailsDataTable() {
                this.TableName = "GetLandValuesSliceDetails";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetLandValuesSliceDetailsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected GetLandValuesSliceDetailsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LUIDColumn {
                get {
                    return this.columnLUID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ValueSliceIDColumn {
                get {
                    return this.columnValueSliceID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RollYearColumn {
                get {
                    return this.columnRollYear;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LandTypeID1Column {
                get {
                    return this.columnLandTypeID1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LandType1Column {
                get {
                    return this.columnLandType1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LandTypeID2Column {
                get {
                    return this.columnLandTypeID2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LandType2Column {
                get {
                    return this.columnLandType2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LandTypeID3Column {
                get {
                    return this.columnLandTypeID3;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LandType3Column {
                get {
                    return this.columnLandType3;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LandCodeColumn {
                get {
                    return this.columnLandCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BaseValueColumn {
                get {
                    return this.columnBaseValue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Break1Column {
                get {
                    return this.columnBreak1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Value1Column {
                get {
                    return this.columnValue1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Break2Column {
                get {
                    return this.columnBreak2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Value2Column {
                get {
                    return this.columnValue2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Break3Column {
                get {
                    return this.columnBreak3;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Value3Column {
                get {
                    return this.columnValue3;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Break4Column {
                get {
                    return this.columnBreak4;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Value4Column {
                get {
                    return this.columnValue4;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Break5Column {
                get {
                    return this.columnBreak5;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Value5Column {
                get {
                    return this.columnValue5;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AdjustmentTypeColumn {
                get {
                    return this.columnAdjustmentType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AdjTypeDescriptionColumn {
                get {
                    return this.columnAdjTypeDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AdjustmentColumn {
                get {
                    return this.columnAdjustment;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AdjDescriptionColumn {
                get {
                    return this.columnAdjDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UnitTypeColumn {
                get {
                    return this.columnUnitType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UnitsColumn {
                get {
                    return this.columnUnits;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FinalMrktValueColumn {
                get {
                    return this.columnFinalMrktValue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LotWidthColumn {
                get {
                    return this.columnLotWidth;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LotDepthColumn {
                get {
                    return this.columnLotDepth;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LandShapeColumn {
                get {
                    return this.columnLandShape;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BaseMrktValueColumn {
                get {
                    return this.columnBaseMrktValue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GridFinalValueColumn {
                get {
                    return this.columnGridFinalValue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn VFormulaColumn {
                get {
                    return this.columnVFormula;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BaseDollarPerUnitColumn {
                get {
                    return this.columnBaseDollarPerUnit;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GridUnitsTotalColumn {
                get {
                    return this.columnGridUnitsTotal;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MrktMultiplierColumn {
                get {
                    return this.columnMrktMultiplier;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UseMultiplierColumn {
                get {
                    return this.columnUseMultiplier;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SrAcresColumn {
                get {
                    return this.columnSrAcres;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WeightedRatingColumn {
                get {
                    return this.columnWeightedRating;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AglandIDColumn {
                get {
                    return this.columnAglandID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LandUseColumn {
                get {
                    return this.columnLandUse;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InfluenceTypeID1Column {
                get {
                    return this.columnInfluenceTypeID1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InfluenceType1Column {
                get {
                    return this.columnInfluenceType1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Influence1Column {
                get {
                    return this.columnInfluence1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InfluenceDesc1Column {
                get {
                    return this.columnInfluenceDesc1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InfluenceTypeID2Column {
                get {
                    return this.columnInfluenceTypeID2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InfluenceType2Column {
                get {
                    return this.columnInfluenceType2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Influence2Column {
                get {
                    return this.columnInfluence2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InfluenceDesc2Column {
                get {
                    return this.columnInfluenceDesc2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InfluenceTypeID3Column {
                get {
                    return this.columnInfluenceTypeID3;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InfluenceType3Column {
                get {
                    return this.columnInfluenceType3;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Influence3Column {
                get {
                    return this.columnInfluence3;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InfluenceDesc3Column {
                get {
                    return this.columnInfluenceDesc3;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetLandValuesSliceDetailsRow this[int index] {
                get {
                    return ((GetLandValuesSliceDetailsRow)(this.Rows[index]));
                }
            }
            
            public event GetLandValuesSliceDetailsRowChangeEventHandler GetLandValuesSliceDetailsRowChanging;
            
            public event GetLandValuesSliceDetailsRowChangeEventHandler GetLandValuesSliceDetailsRowChanged;
            
            public event GetLandValuesSliceDetailsRowChangeEventHandler GetLandValuesSliceDetailsRowDeleting;
            
            public event GetLandValuesSliceDetailsRowChangeEventHandler GetLandValuesSliceDetailsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddGetLandValuesSliceDetailsRow(GetLandValuesSliceDetailsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetLandValuesSliceDetailsRow AddGetLandValuesSliceDetailsRow(
                        int LUID, 
                        int ValueSliceID, 
                        short RollYear, 
                        int LandTypeID1, 
                        string LandType1, 
                        int LandTypeID2, 
                        string LandType2, 
                        int LandTypeID3, 
                        string LandType3, 
                        string LandCode, 
                        decimal BaseValue, 
                        decimal Break1, 
                        decimal Value1, 
                        decimal Break2, 
                        decimal Value2, 
                        decimal Break3, 
                        decimal Value3, 
                        decimal Break4, 
                        decimal Value4, 
                        int Break5, 
                        int Value5, 
                        int AdjustmentType, 
                        string AdjTypeDescription, 
                        string Adjustment, 
                        string AdjDescription, 
                        string UnitType, 
                        decimal Units, 
                        decimal FinalMrktValue, 
                        decimal LotWidth, 
                        decimal LotDepth, 
                        string LandShape, 
                        decimal BaseMrktValue, 
                        decimal GridFinalValue, 
                        string VFormula, 
                        decimal BaseDollarPerUnit, 
                        decimal GridUnitsTotal, 
                        decimal MrktMultiplier, 
                        decimal UseMultiplier, 
                        decimal SrAcres, 
                        decimal WeightedRating, 
                        int AglandID, 
                        string LandUse, 
                        int InfluenceTypeID1, 
                        string InfluenceType1, 
                        decimal Influence1, 
                        string InfluenceDesc1, 
                        int InfluenceTypeID2, 
                        string InfluenceType2, 
                        decimal Influence2, 
                        string InfluenceDesc2, 
                        int InfluenceTypeID3, 
                        string InfluenceType3, 
                        decimal Influence3, 
                        string InfluenceDesc3) {
                GetLandValuesSliceDetailsRow rowGetLandValuesSliceDetailsRow = ((GetLandValuesSliceDetailsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        LUID,
                        ValueSliceID,
                        RollYear,
                        LandTypeID1,
                        LandType1,
                        LandTypeID2,
                        LandType2,
                        LandTypeID3,
                        LandType3,
                        LandCode,
                        BaseValue,
                        Break1,
                        Value1,
                        Break2,
                        Value2,
                        Break3,
                        Value3,
                        Break4,
                        Value4,
                        Break5,
                        Value5,
                        AdjustmentType,
                        AdjTypeDescription,
                        Adjustment,
                        AdjDescription,
                        UnitType,
                        Units,
                        FinalMrktValue,
                        LotWidth,
                        LotDepth,
                        LandShape,
                        BaseMrktValue,
                        GridFinalValue,
                        VFormula,
                        BaseDollarPerUnit,
                        GridUnitsTotal,
                        MrktMultiplier,
                        UseMultiplier,
                        SrAcres,
                        WeightedRating,
                        AglandID,
                        LandUse,
                        InfluenceTypeID1,
                        InfluenceType1,
                        Influence1,
                        InfluenceDesc1,
                        InfluenceTypeID2,
                        InfluenceType2,
                        Influence2,
                        InfluenceDesc2,
                        InfluenceTypeID3,
                        InfluenceType3,
                        Influence3,
                        InfluenceDesc3};
                rowGetLandValuesSliceDetailsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowGetLandValuesSliceDetailsRow);
                return rowGetLandValuesSliceDetailsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                GetLandValuesSliceDetailsDataTable cln = ((GetLandValuesSliceDetailsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new GetLandValuesSliceDetailsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnLUID = base.Columns["LUID"];
                this.columnValueSliceID = base.Columns["ValueSliceID"];
                this.columnRollYear = base.Columns["RollYear"];
                this.columnLandTypeID1 = base.Columns["LandTypeID1"];
                this.columnLandType1 = base.Columns["LandType1"];
                this.columnLandTypeID2 = base.Columns["LandTypeID2"];
                this.columnLandType2 = base.Columns["LandType2"];
                this.columnLandTypeID3 = base.Columns["LandTypeID3"];
                this.columnLandType3 = base.Columns["LandType3"];
                this.columnLandCode = base.Columns["LandCode"];
                this.columnBaseValue = base.Columns["BaseValue"];
                this.columnBreak1 = base.Columns["Break1"];
                this.columnValue1 = base.Columns["Value1"];
                this.columnBreak2 = base.Columns["Break2"];
                this.columnValue2 = base.Columns["Value2"];
                this.columnBreak3 = base.Columns["Break3"];
                this.columnValue3 = base.Columns["Value3"];
                this.columnBreak4 = base.Columns["Break4"];
                this.columnValue4 = base.Columns["Value4"];
                this.columnBreak5 = base.Columns["Break5"];
                this.columnValue5 = base.Columns["Value5"];
                this.columnAdjustmentType = base.Columns["AdjustmentType"];
                this.columnAdjTypeDescription = base.Columns["AdjTypeDescription"];
                this.columnAdjustment = base.Columns["Adjustment"];
                this.columnAdjDescription = base.Columns["AdjDescription"];
                this.columnUnitType = base.Columns["UnitType"];
                this.columnUnits = base.Columns["Units"];
                this.columnFinalMrktValue = base.Columns["FinalMrktValue"];
                this.columnLotWidth = base.Columns["LotWidth"];
                this.columnLotDepth = base.Columns["LotDepth"];
                this.columnLandShape = base.Columns["LandShape"];
                this.columnBaseMrktValue = base.Columns["BaseMrktValue"];
                this.columnGridFinalValue = base.Columns["GridFinalValue"];
                this.columnVFormula = base.Columns["VFormula"];
                this.columnBaseDollarPerUnit = base.Columns["BaseDollarPerUnit"];
                this.columnGridUnitsTotal = base.Columns["GridUnitsTotal"];
                this.columnMrktMultiplier = base.Columns["MrktMultiplier"];
                this.columnUseMultiplier = base.Columns["UseMultiplier"];
                this.columnSrAcres = base.Columns["SrAcres"];
                this.columnWeightedRating = base.Columns["WeightedRating"];
                this.columnAglandID = base.Columns["AglandID"];
                this.columnLandUse = base.Columns["LandUse"];
                this.columnInfluenceTypeID1 = base.Columns["InfluenceTypeID1"];
                this.columnInfluenceType1 = base.Columns["InfluenceType1"];
                this.columnInfluence1 = base.Columns["Influence1"];
                this.columnInfluenceDesc1 = base.Columns["InfluenceDesc1"];
                this.columnInfluenceTypeID2 = base.Columns["InfluenceTypeID2"];
                this.columnInfluenceType2 = base.Columns["InfluenceType2"];
                this.columnInfluence2 = base.Columns["Influence2"];
                this.columnInfluenceDesc2 = base.Columns["InfluenceDesc2"];
                this.columnInfluenceTypeID3 = base.Columns["InfluenceTypeID3"];
                this.columnInfluenceType3 = base.Columns["InfluenceType3"];
                this.columnInfluence3 = base.Columns["Influence3"];
                this.columnInfluenceDesc3 = base.Columns["InfluenceDesc3"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnLUID = new global::System.Data.DataColumn("LUID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLUID);
                this.columnValueSliceID = new global::System.Data.DataColumn("ValueSliceID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnValueSliceID);
                this.columnRollYear = new global::System.Data.DataColumn("RollYear", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRollYear);
                this.columnLandTypeID1 = new global::System.Data.DataColumn("LandTypeID1", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLandTypeID1);
                this.columnLandType1 = new global::System.Data.DataColumn("LandType1", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLandType1);
                this.columnLandTypeID2 = new global::System.Data.DataColumn("LandTypeID2", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLandTypeID2);
                this.columnLandType2 = new global::System.Data.DataColumn("LandType2", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLandType2);
                this.columnLandTypeID3 = new global::System.Data.DataColumn("LandTypeID3", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLandTypeID3);
                this.columnLandType3 = new global::System.Data.DataColumn("LandType3", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLandType3);
                this.columnLandCode = new global::System.Data.DataColumn("LandCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLandCode);
                this.columnBaseValue = new global::System.Data.DataColumn("BaseValue", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBaseValue);
                this.columnBreak1 = new global::System.Data.DataColumn("Break1", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBreak1);
                this.columnValue1 = new global::System.Data.DataColumn("Value1", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnValue1);
                this.columnBreak2 = new global::System.Data.DataColumn("Break2", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBreak2);
                this.columnValue2 = new global::System.Data.DataColumn("Value2", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnValue2);
                this.columnBreak3 = new global::System.Data.DataColumn("Break3", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBreak3);
                this.columnValue3 = new global::System.Data.DataColumn("Value3", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnValue3);
                this.columnBreak4 = new global::System.Data.DataColumn("Break4", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBreak4);
                this.columnValue4 = new global::System.Data.DataColumn("Value4", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnValue4);
                this.columnBreak5 = new global::System.Data.DataColumn("Break5", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBreak5);
                this.columnValue5 = new global::System.Data.DataColumn("Value5", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnValue5);
                this.columnAdjustmentType = new global::System.Data.DataColumn("AdjustmentType", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAdjustmentType);
                this.columnAdjTypeDescription = new global::System.Data.DataColumn("AdjTypeDescription", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAdjTypeDescription);
                this.columnAdjustment = new global::System.Data.DataColumn("Adjustment", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAdjustment);
                this.columnAdjDescription = new global::System.Data.DataColumn("AdjDescription", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAdjDescription);
                this.columnUnitType = new global::System.Data.DataColumn("UnitType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUnitType);
                this.columnUnits = new global::System.Data.DataColumn("Units", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUnits);
                this.columnFinalMrktValue = new global::System.Data.DataColumn("FinalMrktValue", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFinalMrktValue);
                this.columnLotWidth = new global::System.Data.DataColumn("LotWidth", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLotWidth);
                this.columnLotDepth = new global::System.Data.DataColumn("LotDepth", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLotDepth);
                this.columnLandShape = new global::System.Data.DataColumn("LandShape", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLandShape);
                this.columnBaseMrktValue = new global::System.Data.DataColumn("BaseMrktValue", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBaseMrktValue);
                this.columnGridFinalValue = new global::System.Data.DataColumn("GridFinalValue", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGridFinalValue);
                this.columnVFormula = new global::System.Data.DataColumn("VFormula", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVFormula);
                this.columnBaseDollarPerUnit = new global::System.Data.DataColumn("BaseDollarPerUnit", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBaseDollarPerUnit);
                this.columnGridUnitsTotal = new global::System.Data.DataColumn("GridUnitsTotal", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGridUnitsTotal);
                this.columnMrktMultiplier = new global::System.Data.DataColumn("MrktMultiplier", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMrktMultiplier);
                this.columnUseMultiplier = new global::System.Data.DataColumn("UseMultiplier", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUseMultiplier);
                this.columnSrAcres = new global::System.Data.DataColumn("SrAcres", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSrAcres);
                this.columnWeightedRating = new global::System.Data.DataColumn("WeightedRating", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWeightedRating);
                this.columnAglandID = new global::System.Data.DataColumn("AglandID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAglandID);
                this.columnLandUse = new global::System.Data.DataColumn("LandUse", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLandUse);
                this.columnInfluenceTypeID1 = new global::System.Data.DataColumn("InfluenceTypeID1", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInfluenceTypeID1);
                this.columnInfluenceType1 = new global::System.Data.DataColumn("InfluenceType1", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInfluenceType1);
                this.columnInfluence1 = new global::System.Data.DataColumn("Influence1", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInfluence1);
                this.columnInfluenceDesc1 = new global::System.Data.DataColumn("InfluenceDesc1", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInfluenceDesc1);
                this.columnInfluenceTypeID2 = new global::System.Data.DataColumn("InfluenceTypeID2", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInfluenceTypeID2);
                this.columnInfluenceType2 = new global::System.Data.DataColumn("InfluenceType2", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInfluenceType2);
                this.columnInfluence2 = new global::System.Data.DataColumn("Influence2", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInfluence2);
                this.columnInfluenceDesc2 = new global::System.Data.DataColumn("InfluenceDesc2", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInfluenceDesc2);
                this.columnInfluenceTypeID3 = new global::System.Data.DataColumn("InfluenceTypeID3", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInfluenceTypeID3);
                this.columnInfluenceType3 = new global::System.Data.DataColumn("InfluenceType3", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInfluenceType3);
                this.columnInfluence3 = new global::System.Data.DataColumn("Influence3", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInfluence3);
                this.columnInfluenceDesc3 = new global::System.Data.DataColumn("InfluenceDesc3", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInfluenceDesc3);
                this.columnLandType1.MaxLength = 20;
                this.columnLandType2.MaxLength = 20;
                this.columnLandType3.MaxLength = 20;
                this.columnLandCode.MaxLength = 20;
                this.columnAdjTypeDescription.MaxLength = 50;
                this.columnAdjustment.MaxLength = 20;
                this.columnAdjDescription.MaxLength = 50;
                this.columnUnitType.MaxLength = 20;
                this.columnLandShape.MaxLength = 20;
                this.columnVFormula.MaxLength = 1000;
                this.columnInfluenceType1.MaxLength = 30;
                this.columnInfluenceDesc1.MaxLength = 30;
                this.columnInfluenceType2.MaxLength = 30;
                this.columnInfluenceDesc2.MaxLength = 30;
                this.columnInfluenceType3.MaxLength = 30;
                this.columnInfluenceDesc3.MaxLength = 30;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetLandValuesSliceDetailsRow NewGetLandValuesSliceDetailsRow() {
                return ((GetLandValuesSliceDetailsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new GetLandValuesSliceDetailsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(GetLandValuesSliceDetailsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GetLandValuesSliceDetailsRowChanged != null)) {
                    this.GetLandValuesSliceDetailsRowChanged(this, new GetLandValuesSliceDetailsRowChangeEvent(((GetLandValuesSliceDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GetLandValuesSliceDetailsRowChanging != null)) {
                    this.GetLandValuesSliceDetailsRowChanging(this, new GetLandValuesSliceDetailsRowChangeEvent(((GetLandValuesSliceDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GetLandValuesSliceDetailsRowDeleted != null)) {
                    this.GetLandValuesSliceDetailsRowDeleted(this, new GetLandValuesSliceDetailsRowChangeEvent(((GetLandValuesSliceDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GetLandValuesSliceDetailsRowDeleting != null)) {
                    this.GetLandValuesSliceDetailsRowDeleting(this, new GetLandValuesSliceDetailsRowChangeEvent(((GetLandValuesSliceDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveGetLandValuesSliceDetailsRow(GetLandValuesSliceDetailsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F39135LandData ds = new F39135LandData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "GetLandValuesSliceDetailsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class GetRollYearDataTable : global::System.Data.TypedTableBase<GetRollYearRow> {
            
            private global::System.Data.DataColumn columnRollYear;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetRollYearDataTable() {
                this.TableName = "GetRollYear";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetRollYearDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected GetRollYearDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RollYearColumn {
                get {
                    return this.columnRollYear;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetRollYearRow this[int index] {
                get {
                    return ((GetRollYearRow)(this.Rows[index]));
                }
            }
            
            public event GetRollYearRowChangeEventHandler GetRollYearRowChanging;
            
            public event GetRollYearRowChangeEventHandler GetRollYearRowChanged;
            
            public event GetRollYearRowChangeEventHandler GetRollYearRowDeleting;
            
            public event GetRollYearRowChangeEventHandler GetRollYearRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddGetRollYearRow(GetRollYearRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetRollYearRow AddGetRollYearRow(int RollYear) {
                GetRollYearRow rowGetRollYearRow = ((GetRollYearRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        RollYear};
                rowGetRollYearRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowGetRollYearRow);
                return rowGetRollYearRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                GetRollYearDataTable cln = ((GetRollYearDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new GetRollYearDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnRollYear = base.Columns["RollYear"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnRollYear = new global::System.Data.DataColumn("RollYear", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRollYear);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetRollYearRow NewGetRollYearRow() {
                return ((GetRollYearRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new GetRollYearRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(GetRollYearRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GetRollYearRowChanged != null)) {
                    this.GetRollYearRowChanged(this, new GetRollYearRowChangeEvent(((GetRollYearRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GetRollYearRowChanging != null)) {
                    this.GetRollYearRowChanging(this, new GetRollYearRowChangeEvent(((GetRollYearRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GetRollYearRowDeleted != null)) {
                    this.GetRollYearRowDeleted(this, new GetRollYearRowChangeEvent(((GetRollYearRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GetRollYearRowDeleting != null)) {
                    this.GetRollYearRowDeleting(this, new GetRollYearRowChangeEvent(((GetRollYearRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveGetRollYearRow(GetRollYearRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F39135LandData ds = new F39135LandData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "GetRollYearDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ListGridInfluencesDataTable : global::System.Data.TypedTableBase<ListGridInfluencesRow> {
            
            private global::System.Data.DataColumn columnInfluenceItemID;
            
            private global::System.Data.DataColumn columnInfluenceTypeID;
            
            private global::System.Data.DataColumn columnInfluenceType;
            
            private global::System.Data.DataColumn columnInfluence;
            
            private global::System.Data.DataColumn columnInfluenceDesc;
            
            private global::System.Data.DataColumn columnInfluenceValue;
            
            private global::System.Data.DataColumn columnLUID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListGridInfluencesDataTable() {
                this.TableName = "ListGridInfluences";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListGridInfluencesDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ListGridInfluencesDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InfluenceItemIDColumn {
                get {
                    return this.columnInfluenceItemID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InfluenceTypeIDColumn {
                get {
                    return this.columnInfluenceTypeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InfluenceTypeColumn {
                get {
                    return this.columnInfluenceType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InfluenceColumn {
                get {
                    return this.columnInfluence;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InfluenceDescColumn {
                get {
                    return this.columnInfluenceDesc;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InfluenceValueColumn {
                get {
                    return this.columnInfluenceValue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LUIDColumn {
                get {
                    return this.columnLUID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListGridInfluencesRow this[int index] {
                get {
                    return ((ListGridInfluencesRow)(this.Rows[index]));
                }
            }
            
            public event ListGridInfluencesRowChangeEventHandler ListGridInfluencesRowChanging;
            
            public event ListGridInfluencesRowChangeEventHandler ListGridInfluencesRowChanged;
            
            public event ListGridInfluencesRowChangeEventHandler ListGridInfluencesRowDeleting;
            
            public event ListGridInfluencesRowChangeEventHandler ListGridInfluencesRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddListGridInfluencesRow(ListGridInfluencesRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListGridInfluencesRow AddListGridInfluencesRow(int InfluenceItemID, int InfluenceTypeID, string InfluenceType, decimal Influence, string InfluenceDesc, decimal InfluenceValue, int LUID) {
                ListGridInfluencesRow rowListGridInfluencesRow = ((ListGridInfluencesRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        InfluenceItemID,
                        InfluenceTypeID,
                        InfluenceType,
                        Influence,
                        InfluenceDesc,
                        InfluenceValue,
                        LUID};
                rowListGridInfluencesRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowListGridInfluencesRow);
                return rowListGridInfluencesRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ListGridInfluencesDataTable cln = ((ListGridInfluencesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ListGridInfluencesDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnInfluenceItemID = base.Columns["InfluenceItemID"];
                this.columnInfluenceTypeID = base.Columns["InfluenceTypeID"];
                this.columnInfluenceType = base.Columns["InfluenceType"];
                this.columnInfluence = base.Columns["Influence"];
                this.columnInfluenceDesc = base.Columns["InfluenceDesc"];
                this.columnInfluenceValue = base.Columns["InfluenceValue"];
                this.columnLUID = base.Columns["LUID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnInfluenceItemID = new global::System.Data.DataColumn("InfluenceItemID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInfluenceItemID);
                this.columnInfluenceTypeID = new global::System.Data.DataColumn("InfluenceTypeID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInfluenceTypeID);
                this.columnInfluenceType = new global::System.Data.DataColumn("InfluenceType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInfluenceType);
                this.columnInfluence = new global::System.Data.DataColumn("Influence", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInfluence);
                this.columnInfluenceDesc = new global::System.Data.DataColumn("InfluenceDesc", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInfluenceDesc);
                this.columnInfluenceValue = new global::System.Data.DataColumn("InfluenceValue", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInfluenceValue);
                this.columnLUID = new global::System.Data.DataColumn("LUID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLUID);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListGridInfluencesRow NewListGridInfluencesRow() {
                return ((ListGridInfluencesRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ListGridInfluencesRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ListGridInfluencesRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ListGridInfluencesRowChanged != null)) {
                    this.ListGridInfluencesRowChanged(this, new ListGridInfluencesRowChangeEvent(((ListGridInfluencesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ListGridInfluencesRowChanging != null)) {
                    this.ListGridInfluencesRowChanging(this, new ListGridInfluencesRowChangeEvent(((ListGridInfluencesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ListGridInfluencesRowDeleted != null)) {
                    this.ListGridInfluencesRowDeleted(this, new ListGridInfluencesRowChangeEvent(((ListGridInfluencesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ListGridInfluencesRowDeleting != null)) {
                    this.ListGridInfluencesRowDeleting(this, new ListGridInfluencesRowChangeEvent(((ListGridInfluencesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveListGridInfluencesRow(ListGridInfluencesRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F39135LandData ds = new F39135LandData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ListGridInfluencesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ListInfluenceTypesDataTable : global::System.Data.TypedTableBase<ListInfluenceTypesRow> {
            
            private global::System.Data.DataColumn columnInfluenceTypeID;
            
            private global::System.Data.DataColumn columnInfluenceType;
            
            private global::System.Data.DataColumn columnInfluence;
            
            private global::System.Data.DataColumn columnType;
            
            private global::System.Data.DataColumn columnDescription;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListInfluenceTypesDataTable() {
                this.TableName = "ListInfluenceTypes";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListInfluenceTypesDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ListInfluenceTypesDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InfluenceTypeIDColumn {
                get {
                    return this.columnInfluenceTypeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InfluenceTypeColumn {
                get {
                    return this.columnInfluenceType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InfluenceColumn {
                get {
                    return this.columnInfluence;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TypeColumn {
                get {
                    return this.columnType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListInfluenceTypesRow this[int index] {
                get {
                    return ((ListInfluenceTypesRow)(this.Rows[index]));
                }
            }
            
            public event ListInfluenceTypesRowChangeEventHandler ListInfluenceTypesRowChanging;
            
            public event ListInfluenceTypesRowChangeEventHandler ListInfluenceTypesRowChanged;
            
            public event ListInfluenceTypesRowChangeEventHandler ListInfluenceTypesRowDeleting;
            
            public event ListInfluenceTypesRowChangeEventHandler ListInfluenceTypesRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddListInfluenceTypesRow(ListInfluenceTypesRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListInfluenceTypesRow AddListInfluenceTypesRow(int InfluenceTypeID, string InfluenceType, decimal Influence, byte Type, string Description) {
                ListInfluenceTypesRow rowListInfluenceTypesRow = ((ListInfluenceTypesRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        InfluenceTypeID,
                        InfluenceType,
                        Influence,
                        Type,
                        Description};
                rowListInfluenceTypesRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowListInfluenceTypesRow);
                return rowListInfluenceTypesRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ListInfluenceTypesDataTable cln = ((ListInfluenceTypesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ListInfluenceTypesDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnInfluenceTypeID = base.Columns["InfluenceTypeID"];
                this.columnInfluenceType = base.Columns["InfluenceType"];
                this.columnInfluence = base.Columns["Influence"];
                this.columnType = base.Columns["Type"];
                this.columnDescription = base.Columns["Description"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnInfluenceTypeID = new global::System.Data.DataColumn("InfluenceTypeID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInfluenceTypeID);
                this.columnInfluenceType = new global::System.Data.DataColumn("InfluenceType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInfluenceType);
                this.columnInfluence = new global::System.Data.DataColumn("Influence", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInfluence);
                this.columnType = new global::System.Data.DataColumn("Type", typeof(byte), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnType);
                this.columnDescription = new global::System.Data.DataColumn("Description", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescription);
                this.columnInfluenceTypeID.ReadOnly = true;
                this.columnInfluenceType.MaxLength = 30;
                this.columnDescription.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListInfluenceTypesRow NewListInfluenceTypesRow() {
                return ((ListInfluenceTypesRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ListInfluenceTypesRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ListInfluenceTypesRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ListInfluenceTypesRowChanged != null)) {
                    this.ListInfluenceTypesRowChanged(this, new ListInfluenceTypesRowChangeEvent(((ListInfluenceTypesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ListInfluenceTypesRowChanging != null)) {
                    this.ListInfluenceTypesRowChanging(this, new ListInfluenceTypesRowChangeEvent(((ListInfluenceTypesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ListInfluenceTypesRowDeleted != null)) {
                    this.ListInfluenceTypesRowDeleted(this, new ListInfluenceTypesRowChangeEvent(((ListInfluenceTypesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ListInfluenceTypesRowDeleting != null)) {
                    this.ListInfluenceTypesRowDeleting(this, new ListInfluenceTypesRowChangeEvent(((ListInfluenceTypesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveListInfluenceTypesRow(ListInfluenceTypesRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F39135LandData ds = new F39135LandData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ListInfluenceTypesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class Get_LandCodeDataTable : global::System.Data.TypedTableBase<Get_LandCodeRow> {
            
            private global::System.Data.DataColumn columnLuVID;
            
            private global::System.Data.DataColumn columnRollYear;
            
            private global::System.Data.DataColumn columnLandCode;
            
            private global::System.Data.DataColumn columnReportAS;
            
            private global::System.Data.DataColumn columnUnitType;
            
            private global::System.Data.DataColumn columnBaseValue;
            
            private global::System.Data.DataColumn columnBreak1;
            
            private global::System.Data.DataColumn columnValue1;
            
            private global::System.Data.DataColumn columnBreak2;
            
            private global::System.Data.DataColumn columnValue2;
            
            private global::System.Data.DataColumn columnBreak3;
            
            private global::System.Data.DataColumn columnValue3;
            
            private global::System.Data.DataColumn columnBreak4;
            
            private global::System.Data.DataColumn columnValue4;
            
            private global::System.Data.DataColumn columnUseValue;
            
            private global::System.Data.DataColumn columnUsePerUnit;
            
            private global::System.Data.DataColumn columnUseBaseValue;
            
            private global::System.Data.DataColumn columnUseAdjustmentType;
            
            private global::System.Data.DataColumn columnUseAdjustment;
            
            private global::System.Data.DataColumn columnUseAdjDescription;
            
            private global::System.Data.DataColumn columnMrktMultiplier;
            
            private global::System.Data.DataColumn columnLotWidth;
            
            private global::System.Data.DataColumn columnLotDepth;
            
            private global::System.Data.DataColumn columnVFormula;
            
            private global::System.Data.DataColumn columnUseMultiplier;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Get_LandCodeDataTable() {
                this.TableName = "Get_LandCode";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Get_LandCodeDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected Get_LandCodeDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LuVIDColumn {
                get {
                    return this.columnLuVID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RollYearColumn {
                get {
                    return this.columnRollYear;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LandCodeColumn {
                get {
                    return this.columnLandCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ReportASColumn {
                get {
                    return this.columnReportAS;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UnitTypeColumn {
                get {
                    return this.columnUnitType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BaseValueColumn {
                get {
                    return this.columnBaseValue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Break1Column {
                get {
                    return this.columnBreak1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Value1Column {
                get {
                    return this.columnValue1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Break2Column {
                get {
                    return this.columnBreak2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Value2Column {
                get {
                    return this.columnValue2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Break3Column {
                get {
                    return this.columnBreak3;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Value3Column {
                get {
                    return this.columnValue3;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Break4Column {
                get {
                    return this.columnBreak4;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Value4Column {
                get {
                    return this.columnValue4;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UseValueColumn {
                get {
                    return this.columnUseValue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UsePerUnitColumn {
                get {
                    return this.columnUsePerUnit;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UseBaseValueColumn {
                get {
                    return this.columnUseBaseValue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UseAdjustmentTypeColumn {
                get {
                    return this.columnUseAdjustmentType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UseAdjustmentColumn {
                get {
                    return this.columnUseAdjustment;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UseAdjDescriptionColumn {
                get {
                    return this.columnUseAdjDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MrktMultiplierColumn {
                get {
                    return this.columnMrktMultiplier;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LotWidthColumn {
                get {
                    return this.columnLotWidth;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LotDepthColumn {
                get {
                    return this.columnLotDepth;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn VFormulaColumn {
                get {
                    return this.columnVFormula;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UseMultiplierColumn {
                get {
                    return this.columnUseMultiplier;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Get_LandCodeRow this[int index] {
                get {
                    return ((Get_LandCodeRow)(this.Rows[index]));
                }
            }
            
            public event Get_LandCodeRowChangeEventHandler Get_LandCodeRowChanging;
            
            public event Get_LandCodeRowChangeEventHandler Get_LandCodeRowChanged;
            
            public event Get_LandCodeRowChangeEventHandler Get_LandCodeRowDeleting;
            
            public event Get_LandCodeRowChangeEventHandler Get_LandCodeRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddGet_LandCodeRow(Get_LandCodeRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Get_LandCodeRow AddGet_LandCodeRow(
                        int LuVID, 
                        short RollYear, 
                        string LandCode, 
                        string ReportAS, 
                        string UnitType, 
                        decimal BaseValue, 
                        decimal Break1, 
                        decimal Value1, 
                        decimal Break2, 
                        decimal Value2, 
                        decimal Break3, 
                        decimal Value3, 
                        decimal Break4, 
                        decimal Value4, 
                        decimal UseValue, 
                        decimal UsePerUnit, 
                        decimal UseBaseValue, 
                        byte UseAdjustmentType, 
                        string UseAdjustment, 
                        string UseAdjDescription, 
                        decimal MrktMultiplier, 
                        string LotWidth, 
                        string LotDepth, 
                        string VFormula, 
                        decimal UseMultiplier) {
                Get_LandCodeRow rowGet_LandCodeRow = ((Get_LandCodeRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        LuVID,
                        RollYear,
                        LandCode,
                        ReportAS,
                        UnitType,
                        BaseValue,
                        Break1,
                        Value1,
                        Break2,
                        Value2,
                        Break3,
                        Value3,
                        Break4,
                        Value4,
                        UseValue,
                        UsePerUnit,
                        UseBaseValue,
                        UseAdjustmentType,
                        UseAdjustment,
                        UseAdjDescription,
                        MrktMultiplier,
                        LotWidth,
                        LotDepth,
                        VFormula,
                        UseMultiplier};
                rowGet_LandCodeRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowGet_LandCodeRow);
                return rowGet_LandCodeRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                Get_LandCodeDataTable cln = ((Get_LandCodeDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new Get_LandCodeDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnLuVID = base.Columns["LuVID"];
                this.columnRollYear = base.Columns["RollYear"];
                this.columnLandCode = base.Columns["LandCode"];
                this.columnReportAS = base.Columns["ReportAS"];
                this.columnUnitType = base.Columns["UnitType"];
                this.columnBaseValue = base.Columns["BaseValue"];
                this.columnBreak1 = base.Columns["Break1"];
                this.columnValue1 = base.Columns["Value1"];
                this.columnBreak2 = base.Columns["Break2"];
                this.columnValue2 = base.Columns["Value2"];
                this.columnBreak3 = base.Columns["Break3"];
                this.columnValue3 = base.Columns["Value3"];
                this.columnBreak4 = base.Columns["Break4"];
                this.columnValue4 = base.Columns["Value4"];
                this.columnUseValue = base.Columns["UseValue"];
                this.columnUsePerUnit = base.Columns["UsePerUnit"];
                this.columnUseBaseValue = base.Columns["UseBaseValue"];
                this.columnUseAdjustmentType = base.Columns["UseAdjustmentType"];
                this.columnUseAdjustment = base.Columns["UseAdjustment"];
                this.columnUseAdjDescription = base.Columns["UseAdjDescription"];
                this.columnMrktMultiplier = base.Columns["MrktMultiplier"];
                this.columnLotWidth = base.Columns["LotWidth"];
                this.columnLotDepth = base.Columns["LotDepth"];
                this.columnVFormula = base.Columns["VFormula"];
                this.columnUseMultiplier = base.Columns["UseMultiplier"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnLuVID = new global::System.Data.DataColumn("LuVID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLuVID);
                this.columnRollYear = new global::System.Data.DataColumn("RollYear", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRollYear);
                this.columnLandCode = new global::System.Data.DataColumn("LandCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLandCode);
                this.columnReportAS = new global::System.Data.DataColumn("ReportAS", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnReportAS);
                this.columnUnitType = new global::System.Data.DataColumn("UnitType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUnitType);
                this.columnBaseValue = new global::System.Data.DataColumn("BaseValue", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBaseValue);
                this.columnBreak1 = new global::System.Data.DataColumn("Break1", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBreak1);
                this.columnValue1 = new global::System.Data.DataColumn("Value1", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnValue1);
                this.columnBreak2 = new global::System.Data.DataColumn("Break2", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBreak2);
                this.columnValue2 = new global::System.Data.DataColumn("Value2", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnValue2);
                this.columnBreak3 = new global::System.Data.DataColumn("Break3", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBreak3);
                this.columnValue3 = new global::System.Data.DataColumn("Value3", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnValue3);
                this.columnBreak4 = new global::System.Data.DataColumn("Break4", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBreak4);
                this.columnValue4 = new global::System.Data.DataColumn("Value4", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnValue4);
                this.columnUseValue = new global::System.Data.DataColumn("UseValue", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUseValue);
                this.columnUsePerUnit = new global::System.Data.DataColumn("UsePerUnit", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUsePerUnit);
                this.columnUseBaseValue = new global::System.Data.DataColumn("UseBaseValue", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUseBaseValue);
                this.columnUseAdjustmentType = new global::System.Data.DataColumn("UseAdjustmentType", typeof(byte), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUseAdjustmentType);
                this.columnUseAdjustment = new global::System.Data.DataColumn("UseAdjustment", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUseAdjustment);
                this.columnUseAdjDescription = new global::System.Data.DataColumn("UseAdjDescription", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUseAdjDescription);
                this.columnMrktMultiplier = new global::System.Data.DataColumn("MrktMultiplier", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMrktMultiplier);
                this.columnLotWidth = new global::System.Data.DataColumn("LotWidth", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLotWidth);
                this.columnLotDepth = new global::System.Data.DataColumn("LotDepth", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLotDepth);
                this.columnVFormula = new global::System.Data.DataColumn("VFormula", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVFormula);
                this.columnUseMultiplier = new global::System.Data.DataColumn("UseMultiplier", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUseMultiplier);
                this.columnLandCode.MaxLength = 20;
                this.columnReportAS.MaxLength = 20;
                this.columnUnitType.MaxLength = 20;
                this.columnUseAdjustment.MaxLength = 20;
                this.columnUseAdjDescription.MaxLength = 50;
                this.columnLotWidth.MaxLength = 20;
                this.columnLotDepth.MaxLength = 20;
                this.columnVFormula.MaxLength = 1000;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Get_LandCodeRow NewGet_LandCodeRow() {
                return ((Get_LandCodeRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new Get_LandCodeRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(Get_LandCodeRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.Get_LandCodeRowChanged != null)) {
                    this.Get_LandCodeRowChanged(this, new Get_LandCodeRowChangeEvent(((Get_LandCodeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.Get_LandCodeRowChanging != null)) {
                    this.Get_LandCodeRowChanging(this, new Get_LandCodeRowChangeEvent(((Get_LandCodeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.Get_LandCodeRowDeleted != null)) {
                    this.Get_LandCodeRowDeleted(this, new Get_LandCodeRowChangeEvent(((Get_LandCodeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.Get_LandCodeRowDeleting != null)) {
                    this.Get_LandCodeRowDeleting(this, new Get_LandCodeRowChangeEvent(((Get_LandCodeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveGet_LandCodeRow(Get_LandCodeRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F39135LandData ds = new F39135LandData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "Get_LandCodeDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class Get_LandCodeBaseValueDataTable : global::System.Data.TypedTableBase<Get_LandCodeBaseValueRow> {
            
            private global::System.Data.DataColumn columnBaseValue;
            
            private global::System.Data.DataColumn columnUseBaseValue;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Get_LandCodeBaseValueDataTable() {
                this.TableName = "Get_LandCodeBaseValue";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Get_LandCodeBaseValueDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected Get_LandCodeBaseValueDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BaseValueColumn {
                get {
                    return this.columnBaseValue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UseBaseValueColumn {
                get {
                    return this.columnUseBaseValue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Get_LandCodeBaseValueRow this[int index] {
                get {
                    return ((Get_LandCodeBaseValueRow)(this.Rows[index]));
                }
            }
            
            public event Get_LandCodeBaseValueRowChangeEventHandler Get_LandCodeBaseValueRowChanging;
            
            public event Get_LandCodeBaseValueRowChangeEventHandler Get_LandCodeBaseValueRowChanged;
            
            public event Get_LandCodeBaseValueRowChangeEventHandler Get_LandCodeBaseValueRowDeleting;
            
            public event Get_LandCodeBaseValueRowChangeEventHandler Get_LandCodeBaseValueRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddGet_LandCodeBaseValueRow(Get_LandCodeBaseValueRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Get_LandCodeBaseValueRow AddGet_LandCodeBaseValueRow(decimal BaseValue, decimal UseBaseValue) {
                Get_LandCodeBaseValueRow rowGet_LandCodeBaseValueRow = ((Get_LandCodeBaseValueRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        BaseValue,
                        UseBaseValue};
                rowGet_LandCodeBaseValueRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowGet_LandCodeBaseValueRow);
                return rowGet_LandCodeBaseValueRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                Get_LandCodeBaseValueDataTable cln = ((Get_LandCodeBaseValueDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new Get_LandCodeBaseValueDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnBaseValue = base.Columns["BaseValue"];
                this.columnUseBaseValue = base.Columns["UseBaseValue"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnBaseValue = new global::System.Data.DataColumn("BaseValue", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBaseValue);
                this.columnUseBaseValue = new global::System.Data.DataColumn("UseBaseValue", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUseBaseValue);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Get_LandCodeBaseValueRow NewGet_LandCodeBaseValueRow() {
                return ((Get_LandCodeBaseValueRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new Get_LandCodeBaseValueRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(Get_LandCodeBaseValueRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.Get_LandCodeBaseValueRowChanged != null)) {
                    this.Get_LandCodeBaseValueRowChanged(this, new Get_LandCodeBaseValueRowChangeEvent(((Get_LandCodeBaseValueRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.Get_LandCodeBaseValueRowChanging != null)) {
                    this.Get_LandCodeBaseValueRowChanging(this, new Get_LandCodeBaseValueRowChangeEvent(((Get_LandCodeBaseValueRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.Get_LandCodeBaseValueRowDeleted != null)) {
                    this.Get_LandCodeBaseValueRowDeleted(this, new Get_LandCodeBaseValueRowChangeEvent(((Get_LandCodeBaseValueRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.Get_LandCodeBaseValueRowDeleting != null)) {
                    this.Get_LandCodeBaseValueRowDeleting(this, new Get_LandCodeBaseValueRowChangeEvent(((Get_LandCodeBaseValueRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveGet_LandCodeBaseValueRow(Get_LandCodeBaseValueRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F39135LandData ds = new F39135LandData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "Get_LandCodeBaseValueDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ListLandCodeDataTable : global::System.Data.TypedTableBase<ListLandCodeRow> {
            
            private global::System.Data.DataColumn columnLandCode;
            
            private global::System.Data.DataColumn columnRollYear;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListLandCodeDataTable() {
                this.TableName = "ListLandCode";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListLandCodeDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ListLandCodeDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LandCodeColumn {
                get {
                    return this.columnLandCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RollYearColumn {
                get {
                    return this.columnRollYear;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListLandCodeRow this[int index] {
                get {
                    return ((ListLandCodeRow)(this.Rows[index]));
                }
            }
            
            public event ListLandCodeRowChangeEventHandler ListLandCodeRowChanging;
            
            public event ListLandCodeRowChangeEventHandler ListLandCodeRowChanged;
            
            public event ListLandCodeRowChangeEventHandler ListLandCodeRowDeleting;
            
            public event ListLandCodeRowChangeEventHandler ListLandCodeRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddListLandCodeRow(ListLandCodeRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListLandCodeRow AddListLandCodeRow(string LandCode, short RollYear) {
                ListLandCodeRow rowListLandCodeRow = ((ListLandCodeRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        LandCode,
                        RollYear};
                rowListLandCodeRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowListLandCodeRow);
                return rowListLandCodeRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ListLandCodeDataTable cln = ((ListLandCodeDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ListLandCodeDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnLandCode = base.Columns["LandCode"];
                this.columnRollYear = base.Columns["RollYear"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnLandCode = new global::System.Data.DataColumn("LandCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLandCode);
                this.columnRollYear = new global::System.Data.DataColumn("RollYear", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRollYear);
                this.columnLandCode.MaxLength = 20;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListLandCodeRow NewListLandCodeRow() {
                return ((ListLandCodeRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ListLandCodeRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ListLandCodeRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ListLandCodeRowChanged != null)) {
                    this.ListLandCodeRowChanged(this, new ListLandCodeRowChangeEvent(((ListLandCodeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ListLandCodeRowChanging != null)) {
                    this.ListLandCodeRowChanging(this, new ListLandCodeRowChangeEvent(((ListLandCodeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ListLandCodeRowDeleted != null)) {
                    this.ListLandCodeRowDeleted(this, new ListLandCodeRowChangeEvent(((ListLandCodeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ListLandCodeRowDeleting != null)) {
                    this.ListLandCodeRowDeleting(this, new ListLandCodeRowChangeEvent(((ListLandCodeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveListLandCodeRow(ListLandCodeRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F39135LandData ds = new F39135LandData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ListLandCodeDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class WeightedRating_DataTable : global::System.Data.TypedTableBase<WeightedRating_Row> {
            
            private global::System.Data.DataColumn columnWeightedRating;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public WeightedRating_DataTable() {
                this.TableName = "WeightedRating ";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal WeightedRating_DataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected WeightedRating_DataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WeightedRatingColumn {
                get {
                    return this.columnWeightedRating;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public WeightedRating_Row this[int index] {
                get {
                    return ((WeightedRating_Row)(this.Rows[index]));
                }
            }
            
            public event WeightedRating_RowChangeEventHandler WeightedRating_RowChanging;
            
            public event WeightedRating_RowChangeEventHandler WeightedRating_RowChanged;
            
            public event WeightedRating_RowChangeEventHandler WeightedRating_RowDeleting;
            
            public event WeightedRating_RowChangeEventHandler WeightedRating_RowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddWeightedRating_Row(WeightedRating_Row row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public WeightedRating_Row AddWeightedRating_Row(decimal WeightedRating) {
                WeightedRating_Row rowWeightedRating_Row = ((WeightedRating_Row)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        WeightedRating};
                rowWeightedRating_Row.ItemArray = columnValuesArray;
                this.Rows.Add(rowWeightedRating_Row);
                return rowWeightedRating_Row;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                WeightedRating_DataTable cln = ((WeightedRating_DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new WeightedRating_DataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnWeightedRating = base.Columns["WeightedRating"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnWeightedRating = new global::System.Data.DataColumn("WeightedRating", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWeightedRating);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public WeightedRating_Row NewWeightedRating_Row() {
                return ((WeightedRating_Row)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new WeightedRating_Row(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(WeightedRating_Row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.WeightedRating_RowChanged != null)) {
                    this.WeightedRating_RowChanged(this, new WeightedRating_RowChangeEvent(((WeightedRating_Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.WeightedRating_RowChanging != null)) {
                    this.WeightedRating_RowChanging(this, new WeightedRating_RowChangeEvent(((WeightedRating_Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.WeightedRating_RowDeleted != null)) {
                    this.WeightedRating_RowDeleted(this, new WeightedRating_RowChangeEvent(((WeightedRating_Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.WeightedRating_RowDeleting != null)) {
                    this.WeightedRating_RowDeleting(this, new WeightedRating_RowChangeEvent(((WeightedRating_Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveWeightedRating_Row(WeightedRating_Row row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F39135LandData ds = new F39135LandData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "WeightedRating_DataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class GetValueSliceValidDataTable : global::System.Data.TypedTableBase<GetValueSliceValidRow> {
            
            private global::System.Data.DataColumn columnIsOpen;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetValueSliceValidDataTable() {
                this.TableName = "GetValueSliceValid";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetValueSliceValidDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected GetValueSliceValidDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsOpenColumn {
                get {
                    return this.columnIsOpen;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetValueSliceValidRow this[int index] {
                get {
                    return ((GetValueSliceValidRow)(this.Rows[index]));
                }
            }
            
            public event GetValueSliceValidRowChangeEventHandler GetValueSliceValidRowChanging;
            
            public event GetValueSliceValidRowChangeEventHandler GetValueSliceValidRowChanged;
            
            public event GetValueSliceValidRowChangeEventHandler GetValueSliceValidRowDeleting;
            
            public event GetValueSliceValidRowChangeEventHandler GetValueSliceValidRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddGetValueSliceValidRow(GetValueSliceValidRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetValueSliceValidRow AddGetValueSliceValidRow(int IsOpen) {
                GetValueSliceValidRow rowGetValueSliceValidRow = ((GetValueSliceValidRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        IsOpen};
                rowGetValueSliceValidRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowGetValueSliceValidRow);
                return rowGetValueSliceValidRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                GetValueSliceValidDataTable cln = ((GetValueSliceValidDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new GetValueSliceValidDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnIsOpen = base.Columns["IsOpen"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnIsOpen = new global::System.Data.DataColumn("IsOpen", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsOpen);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetValueSliceValidRow NewGetValueSliceValidRow() {
                return ((GetValueSliceValidRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new GetValueSliceValidRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(GetValueSliceValidRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GetValueSliceValidRowChanged != null)) {
                    this.GetValueSliceValidRowChanged(this, new GetValueSliceValidRowChangeEvent(((GetValueSliceValidRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GetValueSliceValidRowChanging != null)) {
                    this.GetValueSliceValidRowChanging(this, new GetValueSliceValidRowChangeEvent(((GetValueSliceValidRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GetValueSliceValidRowDeleted != null)) {
                    this.GetValueSliceValidRowDeleted(this, new GetValueSliceValidRowChangeEvent(((GetValueSliceValidRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GetValueSliceValidRowDeleting != null)) {
                    this.GetValueSliceValidRowDeleting(this, new GetValueSliceValidRowChangeEvent(((GetValueSliceValidRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveGetValueSliceValidRow(GetValueSliceValidRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F39135LandData ds = new F39135LandData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "GetValueSliceValidDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class GetTotalValueDataTable : global::System.Data.TypedTableBase<GetTotalValueRow> {
            
            private global::System.Data.DataColumn columnTotalValue;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetTotalValueDataTable() {
                this.TableName = "GetTotalValue";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetTotalValueDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected GetTotalValueDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalValueColumn {
                get {
                    return this.columnTotalValue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetTotalValueRow this[int index] {
                get {
                    return ((GetTotalValueRow)(this.Rows[index]));
                }
            }
            
            public event GetTotalValueRowChangeEventHandler GetTotalValueRowChanging;
            
            public event GetTotalValueRowChangeEventHandler GetTotalValueRowChanged;
            
            public event GetTotalValueRowChangeEventHandler GetTotalValueRowDeleting;
            
            public event GetTotalValueRowChangeEventHandler GetTotalValueRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddGetTotalValueRow(GetTotalValueRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetTotalValueRow AddGetTotalValueRow(decimal TotalValue) {
                GetTotalValueRow rowGetTotalValueRow = ((GetTotalValueRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        TotalValue};
                rowGetTotalValueRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowGetTotalValueRow);
                return rowGetTotalValueRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                GetTotalValueDataTable cln = ((GetTotalValueDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new GetTotalValueDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnTotalValue = base.Columns["TotalValue"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnTotalValue = new global::System.Data.DataColumn("TotalValue", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalValue);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetTotalValueRow NewGetTotalValueRow() {
                return ((GetTotalValueRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new GetTotalValueRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(GetTotalValueRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GetTotalValueRowChanged != null)) {
                    this.GetTotalValueRowChanged(this, new GetTotalValueRowChangeEvent(((GetTotalValueRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GetTotalValueRowChanging != null)) {
                    this.GetTotalValueRowChanging(this, new GetTotalValueRowChangeEvent(((GetTotalValueRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GetTotalValueRowDeleted != null)) {
                    this.GetTotalValueRowDeleted(this, new GetTotalValueRowChangeEvent(((GetTotalValueRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GetTotalValueRowDeleting != null)) {
                    this.GetTotalValueRowDeleting(this, new GetTotalValueRowChangeEvent(((GetTotalValueRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveGetTotalValueRow(GetTotalValueRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F39135LandData ds = new F39135LandData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "GetTotalValueDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class GetTotalRatingDataTable : global::System.Data.TypedTableBase<GetTotalRatingRow> {
            
            private global::System.Data.DataColumn columnTotalRating;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetTotalRatingDataTable() {
                this.TableName = "GetTotalRating";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetTotalRatingDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected GetTotalRatingDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalRatingColumn {
                get {
                    return this.columnTotalRating;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetTotalRatingRow this[int index] {
                get {
                    return ((GetTotalRatingRow)(this.Rows[index]));
                }
            }
            
            public event GetTotalRatingRowChangeEventHandler GetTotalRatingRowChanging;
            
            public event GetTotalRatingRowChangeEventHandler GetTotalRatingRowChanged;
            
            public event GetTotalRatingRowChangeEventHandler GetTotalRatingRowDeleting;
            
            public event GetTotalRatingRowChangeEventHandler GetTotalRatingRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddGetTotalRatingRow(GetTotalRatingRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetTotalRatingRow AddGetTotalRatingRow(decimal TotalRating) {
                GetTotalRatingRow rowGetTotalRatingRow = ((GetTotalRatingRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        TotalRating};
                rowGetTotalRatingRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowGetTotalRatingRow);
                return rowGetTotalRatingRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                GetTotalRatingDataTable cln = ((GetTotalRatingDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new GetTotalRatingDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnTotalRating = base.Columns["TotalRating"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnTotalRating = new global::System.Data.DataColumn("TotalRating", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalRating);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetTotalRatingRow NewGetTotalRatingRow() {
                return ((GetTotalRatingRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new GetTotalRatingRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(GetTotalRatingRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GetTotalRatingRowChanged != null)) {
                    this.GetTotalRatingRowChanged(this, new GetTotalRatingRowChangeEvent(((GetTotalRatingRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GetTotalRatingRowChanging != null)) {
                    this.GetTotalRatingRowChanging(this, new GetTotalRatingRowChangeEvent(((GetTotalRatingRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GetTotalRatingRowDeleted != null)) {
                    this.GetTotalRatingRowDeleted(this, new GetTotalRatingRowChangeEvent(((GetTotalRatingRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GetTotalRatingRowDeleting != null)) {
                    this.GetTotalRatingRowDeleting(this, new GetTotalRatingRowChangeEvent(((GetTotalRatingRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveGetTotalRatingRow(GetTotalRatingRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F39135LandData ds = new F39135LandData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "GetTotalRatingDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class GetWeightedRating_Row : global::System.Data.DataRow {
            
            private GetWeightedRating_DataTable tableGetWeightedRating_;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetWeightedRating_Row(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableGetWeightedRating_ = ((GetWeightedRating_DataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal WeightedRating {
                get {
                    try {
                        return ((decimal)(this[this.tableGetWeightedRating_.WeightedRatingColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'WeightedRating\' in table \'GetWeightedRating \' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetWeightedRating_.WeightedRatingColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWeightedRatingNull() {
                return this.IsNull(this.tableGetWeightedRating_.WeightedRatingColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWeightedRatingNull() {
                this[this.tableGetWeightedRating_.WeightedRatingColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class GetTotalUnitsRow : global::System.Data.DataRow {
            
            private GetTotalUnitsDataTable tableGetTotalUnits;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetTotalUnitsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableGetTotalUnits = ((GetTotalUnitsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TotalUnits {
                get {
                    try {
                        return ((decimal)(this[this.tableGetTotalUnits.TotalUnitsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalUnits\' in table \'GetTotalUnits\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetTotalUnits.TotalUnitsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalUnitsNull() {
                return this.IsNull(this.tableGetTotalUnits.TotalUnitsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalUnitsNull() {
                this[this.tableGetTotalUnits.TotalUnitsColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class GetCalculateBaseValueRow : global::System.Data.DataRow {
            
            private GetCalculateBaseValueDataTable tableGetCalculateBaseValue;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetCalculateBaseValueRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableGetCalculateBaseValue = ((GetCalculateBaseValueDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal BaseValue {
                get {
                    try {
                        return ((decimal)(this[this.tableGetCalculateBaseValue.BaseValueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BaseValue\' in table \'GetCalculateBaseValue\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetCalculateBaseValue.BaseValueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBaseValueNull() {
                return this.IsNull(this.tableGetCalculateBaseValue.BaseValueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBaseValueNull() {
                this[this.tableGetCalculateBaseValue.BaseValueColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ListLandTypes3Row : global::System.Data.DataRow {
            
            private ListLandTypes3DataTable tableListLandTypes3;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListLandTypes3Row(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableListLandTypes3 = ((ListLandTypes3DataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LandTypeID {
                get {
                    try {
                        return ((int)(this[this.tableListLandTypes3.LandTypeIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LandTypeID\' in table \'ListLandTypes3\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListLandTypes3.LandTypeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LandType {
                get {
                    try {
                        return ((string)(this[this.tableListLandTypes3.LandTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LandType\' in table \'ListLandTypes3\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListLandTypes3.LandTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short RollYear {
                get {
                    try {
                        return ((short)(this[this.tableListLandTypes3.RollYearColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RollYear\' in table \'ListLandTypes3\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListLandTypes3.RollYearColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Description {
                get {
                    try {
                        return ((string)(this[this.tableListLandTypes3.DescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Description\' in table \'ListLandTypes3\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListLandTypes3.DescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLandTypeIDNull() {
                return this.IsNull(this.tableListLandTypes3.LandTypeIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLandTypeIDNull() {
                this[this.tableListLandTypes3.LandTypeIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLandTypeNull() {
                return this.IsNull(this.tableListLandTypes3.LandTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLandTypeNull() {
                this[this.tableListLandTypes3.LandTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRollYearNull() {
                return this.IsNull(this.tableListLandTypes3.RollYearColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRollYearNull() {
                this[this.tableListLandTypes3.RollYearColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDescriptionNull() {
                return this.IsNull(this.tableListLandTypes3.DescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDescriptionNull() {
                this[this.tableListLandTypes3.DescriptionColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class GetLandUseTypes_Row : global::System.Data.DataRow {
            
            private GetLandUseTypes_DataTable tableGetLandUseTypes_;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetLandUseTypes_Row(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableGetLandUseTypes_ = ((GetLandUseTypes_DataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int AglandID {
                get {
                    try {
                        return ((int)(this[this.tableGetLandUseTypes_.AglandIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AglandID\' in table \'GetLandUseTypes \' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetLandUseTypes_.AglandIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Use {
                get {
                    try {
                        return ((string)(this[this.tableGetLandUseTypes_.UseColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Use\' in table \'GetLandUseTypes \' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetLandUseTypes_.UseColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAglandIDNull() {
                return this.IsNull(this.tableGetLandUseTypes_.AglandIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAglandIDNull() {
                this[this.tableGetLandUseTypes_.AglandIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUseNull() {
                return this.IsNull(this.tableGetLandUseTypes_.UseColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUseNull() {
                this[this.tableGetLandUseTypes_.UseColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ListLandTypes1Row : global::System.Data.DataRow {
            
            private ListLandTypes1DataTable tableListLandTypes1;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListLandTypes1Row(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableListLandTypes1 = ((ListLandTypes1DataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LandTypeID {
                get {
                    try {
                        return ((int)(this[this.tableListLandTypes1.LandTypeIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LandTypeID\' in table \'ListLandTypes1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListLandTypes1.LandTypeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LandType {
                get {
                    try {
                        return ((string)(this[this.tableListLandTypes1.LandTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LandType\' in table \'ListLandTypes1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListLandTypes1.LandTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short RollYear {
                get {
                    try {
                        return ((short)(this[this.tableListLandTypes1.RollYearColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RollYear\' in table \'ListLandTypes1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListLandTypes1.RollYearColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Description {
                get {
                    try {
                        return ((string)(this[this.tableListLandTypes1.DescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Description\' in table \'ListLandTypes1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListLandTypes1.DescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLandTypeIDNull() {
                return this.IsNull(this.tableListLandTypes1.LandTypeIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLandTypeIDNull() {
                this[this.tableListLandTypes1.LandTypeIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLandTypeNull() {
                return this.IsNull(this.tableListLandTypes1.LandTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLandTypeNull() {
                this[this.tableListLandTypes1.LandTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRollYearNull() {
                return this.IsNull(this.tableListLandTypes1.RollYearColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRollYearNull() {
                this[this.tableListLandTypes1.RollYearColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDescriptionNull() {
                return this.IsNull(this.tableListLandTypes1.DescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDescriptionNull() {
                this[this.tableListLandTypes1.DescriptionColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ListLandTypes2Row : global::System.Data.DataRow {
            
            private ListLandTypes2DataTable tableListLandTypes2;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListLandTypes2Row(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableListLandTypes2 = ((ListLandTypes2DataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LandTypeID {
                get {
                    try {
                        return ((int)(this[this.tableListLandTypes2.LandTypeIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LandTypeID\' in table \'ListLandTypes2\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListLandTypes2.LandTypeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LandType {
                get {
                    try {
                        return ((string)(this[this.tableListLandTypes2.LandTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LandType\' in table \'ListLandTypes2\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListLandTypes2.LandTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short RollYear {
                get {
                    try {
                        return ((short)(this[this.tableListLandTypes2.RollYearColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RollYear\' in table \'ListLandTypes2\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListLandTypes2.RollYearColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Description {
                get {
                    try {
                        return ((string)(this[this.tableListLandTypes2.DescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Description\' in table \'ListLandTypes2\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListLandTypes2.DescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLandTypeIDNull() {
                return this.IsNull(this.tableListLandTypes2.LandTypeIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLandTypeIDNull() {
                this[this.tableListLandTypes2.LandTypeIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLandTypeNull() {
                return this.IsNull(this.tableListLandTypes2.LandTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLandTypeNull() {
                this[this.tableListLandTypes2.LandTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRollYearNull() {
                return this.IsNull(this.tableListLandTypes2.RollYearColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRollYearNull() {
                this[this.tableListLandTypes2.RollYearColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDescriptionNull() {
                return this.IsNull(this.tableListLandTypes2.DescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDescriptionNull() {
                this[this.tableListLandTypes2.DescriptionColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ListAdjustmentTypeRow : global::System.Data.DataRow {
            
            private ListAdjustmentTypeDataTable tableListAdjustmentType;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListAdjustmentTypeRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableListAdjustmentType = ((ListAdjustmentTypeDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int AdjustmentTypeID {
                get {
                    try {
                        return ((int)(this[this.tableListAdjustmentType.AdjustmentTypeIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AdjustmentTypeID\' in table \'ListAdjustmentType\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListAdjustmentType.AdjustmentTypeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AdjustmentType {
                get {
                    try {
                        return ((string)(this[this.tableListAdjustmentType.AdjustmentTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AdjustmentType\' in table \'ListAdjustmentType\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListAdjustmentType.AdjustmentTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAdjustmentTypeIDNull() {
                return this.IsNull(this.tableListAdjustmentType.AdjustmentTypeIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAdjustmentTypeIDNull() {
                this[this.tableListAdjustmentType.AdjustmentTypeIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAdjustmentTypeNull() {
                return this.IsNull(this.tableListAdjustmentType.AdjustmentTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAdjustmentTypeNull() {
                this[this.tableListAdjustmentType.AdjustmentTypeColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class GetLandValuesSliceDetailsRow : global::System.Data.DataRow {
            
            private GetLandValuesSliceDetailsDataTable tableGetLandValuesSliceDetails;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetLandValuesSliceDetailsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableGetLandValuesSliceDetails = ((GetLandValuesSliceDetailsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LUID {
                get {
                    try {
                        return ((int)(this[this.tableGetLandValuesSliceDetails.LUIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LUID\' in table \'GetLandValuesSliceDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetLandValuesSliceDetails.LUIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ValueSliceID {
                get {
                    try {
                        return ((int)(this[this.tableGetLandValuesSliceDetails.ValueSliceIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ValueSliceID\' in table \'GetLandValuesSliceDetails\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableGetLandValuesSliceDetails.ValueSliceIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short RollYear {
                get {
                    try {
                        return ((short)(this[this.tableGetLandValuesSliceDetails.RollYearColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RollYear\' in table \'GetLandValuesSliceDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetLandValuesSliceDetails.RollYearColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LandTypeID1 {
                get {
                    try {
                        return ((int)(this[this.tableGetLandValuesSliceDetails.LandTypeID1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LandTypeID1\' in table \'GetLandValuesSliceDetails\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableGetLandValuesSliceDetails.LandTypeID1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LandType1 {
                get {
                    try {
                        return ((string)(this[this.tableGetLandValuesSliceDetails.LandType1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LandType1\' in table \'GetLandValuesSliceDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetLandValuesSliceDetails.LandType1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LandTypeID2 {
                get {
                    try {
                        return ((int)(this[this.tableGetLandValuesSliceDetails.LandTypeID2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LandTypeID2\' in table \'GetLandValuesSliceDetails\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableGetLandValuesSliceDetails.LandTypeID2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LandType2 {
                get {
                    try {
                        return ((string)(this[this.tableGetLandValuesSliceDetails.LandType2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LandType2\' in table \'GetLandValuesSliceDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetLandValuesSliceDetails.LandType2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LandTypeID3 {
                get {
                    try {
                        return ((int)(this[this.tableGetLandValuesSliceDetails.LandTypeID3Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LandTypeID3\' in table \'GetLandValuesSliceDetails\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableGetLandValuesSliceDetails.LandTypeID3Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LandType3 {
                get {
                    try {
                        return ((string)(this[this.tableGetLandValuesSliceDetails.LandType3Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LandType3\' in table \'GetLandValuesSliceDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetLandValuesSliceDetails.LandType3Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LandCode {
                get {
                    try {
                        return ((string)(this[this.tableGetLandValuesSliceDetails.LandCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LandCode\' in table \'GetLandValuesSliceDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetLandValuesSliceDetails.LandCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal BaseValue {
                get {
                    try {
                        return ((decimal)(this[this.tableGetLandValuesSliceDetails.BaseValueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BaseValue\' in table \'GetLandValuesSliceDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetLandValuesSliceDetails.BaseValueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Break1 {
                get {
                    try {
                        return ((decimal)(this[this.tableGetLandValuesSliceDetails.Break1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Break1\' in table \'GetLandValuesSliceDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetLandValuesSliceDetails.Break1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Value1 {
                get {
                    try {
                        return ((decimal)(this[this.tableGetLandValuesSliceDetails.Value1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Value1\' in table \'GetLandValuesSliceDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetLandValuesSliceDetails.Value1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Break2 {
                get {
                    try {
                        return ((decimal)(this[this.tableGetLandValuesSliceDetails.Break2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Break2\' in table \'GetLandValuesSliceDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetLandValuesSliceDetails.Break2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Value2 {
                get {
                    try {
                        return ((decimal)(this[this.tableGetLandValuesSliceDetails.Value2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Value2\' in table \'GetLandValuesSliceDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetLandValuesSliceDetails.Value2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Break3 {
                get {
                    try {
                        return ((decimal)(this[this.tableGetLandValuesSliceDetails.Break3Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Break3\' in table \'GetLandValuesSliceDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetLandValuesSliceDetails.Break3Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Value3 {
                get {
                    try {
                        return ((decimal)(this[this.tableGetLandValuesSliceDetails.Value3Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Value3\' in table \'GetLandValuesSliceDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetLandValuesSliceDetails.Value3Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Break4 {
                get {
                    try {
                        return ((decimal)(this[this.tableGetLandValuesSliceDetails.Break4Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Break4\' in table \'GetLandValuesSliceDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetLandValuesSliceDetails.Break4Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Value4 {
                get {
                    try {
                        return ((decimal)(this[this.tableGetLandValuesSliceDetails.Value4Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Value4\' in table \'GetLandValuesSliceDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetLandValuesSliceDetails.Value4Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Break5 {
                get {
                    try {
                        return ((int)(this[this.tableGetLandValuesSliceDetails.Break5Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Break5\' in table \'GetLandValuesSliceDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetLandValuesSliceDetails.Break5Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Value5 {
                get {
                    try {
                        return ((int)(this[this.tableGetLandValuesSliceDetails.Value5Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Value5\' in table \'GetLandValuesSliceDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetLandValuesSliceDetails.Value5Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int AdjustmentType {
                get {
                    try {
                        return ((int)(this[this.tableGetLandValuesSliceDetails.AdjustmentTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AdjustmentType\' in table \'GetLandValuesSliceDetails\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableGetLandValuesSliceDetails.AdjustmentTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AdjTypeDescription {
                get {
                    try {
                        return ((string)(this[this.tableGetLandValuesSliceDetails.AdjTypeDescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AdjTypeDescription\' in table \'GetLandValuesSliceDetails\' is" +
                                " DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetLandValuesSliceDetails.AdjTypeDescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Adjustment {
                get {
                    try {
                        return ((string)(this[this.tableGetLandValuesSliceDetails.AdjustmentColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Adjustment\' in table \'GetLandValuesSliceDetails\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableGetLandValuesSliceDetails.AdjustmentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AdjDescription {
                get {
                    try {
                        return ((string)(this[this.tableGetLandValuesSliceDetails.AdjDescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AdjDescription\' in table \'GetLandValuesSliceDetails\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableGetLandValuesSliceDetails.AdjDescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UnitType {
                get {
                    try {
                        return ((string)(this[this.tableGetLandValuesSliceDetails.UnitTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UnitType\' in table \'GetLandValuesSliceDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetLandValuesSliceDetails.UnitTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Units {
                get {
                    try {
                        return ((decimal)(this[this.tableGetLandValuesSliceDetails.UnitsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Units\' in table \'GetLandValuesSliceDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetLandValuesSliceDetails.UnitsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal FinalMrktValue {
                get {
                    try {
                        return ((decimal)(this[this.tableGetLandValuesSliceDetails.FinalMrktValueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FinalMrktValue\' in table \'GetLandValuesSliceDetails\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableGetLandValuesSliceDetails.FinalMrktValueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal LotWidth {
                get {
                    try {
                        return ((decimal)(this[this.tableGetLandValuesSliceDetails.LotWidthColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LotWidth\' in table \'GetLandValuesSliceDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetLandValuesSliceDetails.LotWidthColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal LotDepth {
                get {
                    try {
                        return ((decimal)(this[this.tableGetLandValuesSliceDetails.LotDepthColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LotDepth\' in table \'GetLandValuesSliceDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetLandValuesSliceDetails.LotDepthColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LandShape {
                get {
                    try {
                        return ((string)(this[this.tableGetLandValuesSliceDetails.LandShapeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LandShape\' in table \'GetLandValuesSliceDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetLandValuesSliceDetails.LandShapeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal BaseMrktValue {
                get {
                    try {
                        return ((decimal)(this[this.tableGetLandValuesSliceDetails.BaseMrktValueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BaseMrktValue\' in table \'GetLandValuesSliceDetails\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableGetLandValuesSliceDetails.BaseMrktValueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal GridFinalValue {
                get {
                    try {
                        return ((decimal)(this[this.tableGetLandValuesSliceDetails.GridFinalValueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GridFinalValue\' in table \'GetLandValuesSliceDetails\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableGetLandValuesSliceDetails.GridFinalValueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string VFormula {
                get {
                    try {
                        return ((string)(this[this.tableGetLandValuesSliceDetails.VFormulaColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'VFormula\' in table \'GetLandValuesSliceDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetLandValuesSliceDetails.VFormulaColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal BaseDollarPerUnit {
                get {
                    try {
                        return ((decimal)(this[this.tableGetLandValuesSliceDetails.BaseDollarPerUnitColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BaseDollarPerUnit\' in table \'GetLandValuesSliceDetails\' is " +
                                "DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetLandValuesSliceDetails.BaseDollarPerUnitColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal GridUnitsTotal {
                get {
                    try {
                        return ((decimal)(this[this.tableGetLandValuesSliceDetails.GridUnitsTotalColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GridUnitsTotal\' in table \'GetLandValuesSliceDetails\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableGetLandValuesSliceDetails.GridUnitsTotalColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal MrktMultiplier {
                get {
                    try {
                        return ((decimal)(this[this.tableGetLandValuesSliceDetails.MrktMultiplierColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MrktMultiplier\' in table \'GetLandValuesSliceDetails\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableGetLandValuesSliceDetails.MrktMultiplierColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal UseMultiplier {
                get {
                    try {
                        return ((decimal)(this[this.tableGetLandValuesSliceDetails.UseMultiplierColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UseMultiplier\' in table \'GetLandValuesSliceDetails\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableGetLandValuesSliceDetails.UseMultiplierColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal SrAcres {
                get {
                    try {
                        return ((decimal)(this[this.tableGetLandValuesSliceDetails.SrAcresColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SrAcres\' in table \'GetLandValuesSliceDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetLandValuesSliceDetails.SrAcresColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal WeightedRating {
                get {
                    try {
                        return ((decimal)(this[this.tableGetLandValuesSliceDetails.WeightedRatingColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'WeightedRating\' in table \'GetLandValuesSliceDetails\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableGetLandValuesSliceDetails.WeightedRatingColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int AglandID {
                get {
                    try {
                        return ((int)(this[this.tableGetLandValuesSliceDetails.AglandIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AglandID\' in table \'GetLandValuesSliceDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetLandValuesSliceDetails.AglandIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LandUse {
                get {
                    try {
                        return ((string)(this[this.tableGetLandValuesSliceDetails.LandUseColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LandUse\' in table \'GetLandValuesSliceDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetLandValuesSliceDetails.LandUseColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int InfluenceTypeID1 {
                get {
                    try {
                        return ((int)(this[this.tableGetLandValuesSliceDetails.InfluenceTypeID1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InfluenceTypeID1\' in table \'GetLandValuesSliceDetails\' is D" +
                                "BNull.", e);
                    }
                }
                set {
                    this[this.tableGetLandValuesSliceDetails.InfluenceTypeID1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string InfluenceType1 {
                get {
                    try {
                        return ((string)(this[this.tableGetLandValuesSliceDetails.InfluenceType1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InfluenceType1\' in table \'GetLandValuesSliceDetails\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableGetLandValuesSliceDetails.InfluenceType1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Influence1 {
                get {
                    try {
                        return ((decimal)(this[this.tableGetLandValuesSliceDetails.Influence1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Influence1\' in table \'GetLandValuesSliceDetails\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableGetLandValuesSliceDetails.Influence1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string InfluenceDesc1 {
                get {
                    try {
                        return ((string)(this[this.tableGetLandValuesSliceDetails.InfluenceDesc1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InfluenceDesc1\' in table \'GetLandValuesSliceDetails\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableGetLandValuesSliceDetails.InfluenceDesc1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int InfluenceTypeID2 {
                get {
                    try {
                        return ((int)(this[this.tableGetLandValuesSliceDetails.InfluenceTypeID2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InfluenceTypeID2\' in table \'GetLandValuesSliceDetails\' is D" +
                                "BNull.", e);
                    }
                }
                set {
                    this[this.tableGetLandValuesSliceDetails.InfluenceTypeID2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string InfluenceType2 {
                get {
                    try {
                        return ((string)(this[this.tableGetLandValuesSliceDetails.InfluenceType2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InfluenceType2\' in table \'GetLandValuesSliceDetails\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableGetLandValuesSliceDetails.InfluenceType2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Influence2 {
                get {
                    try {
                        return ((decimal)(this[this.tableGetLandValuesSliceDetails.Influence2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Influence2\' in table \'GetLandValuesSliceDetails\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableGetLandValuesSliceDetails.Influence2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string InfluenceDesc2 {
                get {
                    try {
                        return ((string)(this[this.tableGetLandValuesSliceDetails.InfluenceDesc2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InfluenceDesc2\' in table \'GetLandValuesSliceDetails\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableGetLandValuesSliceDetails.InfluenceDesc2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int InfluenceTypeID3 {
                get {
                    try {
                        return ((int)(this[this.tableGetLandValuesSliceDetails.InfluenceTypeID3Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InfluenceTypeID3\' in table \'GetLandValuesSliceDetails\' is D" +
                                "BNull.", e);
                    }
                }
                set {
                    this[this.tableGetLandValuesSliceDetails.InfluenceTypeID3Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string InfluenceType3 {
                get {
                    try {
                        return ((string)(this[this.tableGetLandValuesSliceDetails.InfluenceType3Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InfluenceType3\' in table \'GetLandValuesSliceDetails\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableGetLandValuesSliceDetails.InfluenceType3Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Influence3 {
                get {
                    try {
                        return ((decimal)(this[this.tableGetLandValuesSliceDetails.Influence3Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Influence3\' in table \'GetLandValuesSliceDetails\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableGetLandValuesSliceDetails.Influence3Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string InfluenceDesc3 {
                get {
                    try {
                        return ((string)(this[this.tableGetLandValuesSliceDetails.InfluenceDesc3Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InfluenceDesc3\' in table \'GetLandValuesSliceDetails\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableGetLandValuesSliceDetails.InfluenceDesc3Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLUIDNull() {
                return this.IsNull(this.tableGetLandValuesSliceDetails.LUIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLUIDNull() {
                this[this.tableGetLandValuesSliceDetails.LUIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsValueSliceIDNull() {
                return this.IsNull(this.tableGetLandValuesSliceDetails.ValueSliceIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetValueSliceIDNull() {
                this[this.tableGetLandValuesSliceDetails.ValueSliceIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRollYearNull() {
                return this.IsNull(this.tableGetLandValuesSliceDetails.RollYearColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRollYearNull() {
                this[this.tableGetLandValuesSliceDetails.RollYearColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLandTypeID1Null() {
                return this.IsNull(this.tableGetLandValuesSliceDetails.LandTypeID1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLandTypeID1Null() {
                this[this.tableGetLandValuesSliceDetails.LandTypeID1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLandType1Null() {
                return this.IsNull(this.tableGetLandValuesSliceDetails.LandType1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLandType1Null() {
                this[this.tableGetLandValuesSliceDetails.LandType1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLandTypeID2Null() {
                return this.IsNull(this.tableGetLandValuesSliceDetails.LandTypeID2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLandTypeID2Null() {
                this[this.tableGetLandValuesSliceDetails.LandTypeID2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLandType2Null() {
                return this.IsNull(this.tableGetLandValuesSliceDetails.LandType2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLandType2Null() {
                this[this.tableGetLandValuesSliceDetails.LandType2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLandTypeID3Null() {
                return this.IsNull(this.tableGetLandValuesSliceDetails.LandTypeID3Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLandTypeID3Null() {
                this[this.tableGetLandValuesSliceDetails.LandTypeID3Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLandType3Null() {
                return this.IsNull(this.tableGetLandValuesSliceDetails.LandType3Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLandType3Null() {
                this[this.tableGetLandValuesSliceDetails.LandType3Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLandCodeNull() {
                return this.IsNull(this.tableGetLandValuesSliceDetails.LandCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLandCodeNull() {
                this[this.tableGetLandValuesSliceDetails.LandCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBaseValueNull() {
                return this.IsNull(this.tableGetLandValuesSliceDetails.BaseValueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBaseValueNull() {
                this[this.tableGetLandValuesSliceDetails.BaseValueColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBreak1Null() {
                return this.IsNull(this.tableGetLandValuesSliceDetails.Break1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBreak1Null() {
                this[this.tableGetLandValuesSliceDetails.Break1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsValue1Null() {
                return this.IsNull(this.tableGetLandValuesSliceDetails.Value1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetValue1Null() {
                this[this.tableGetLandValuesSliceDetails.Value1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBreak2Null() {
                return this.IsNull(this.tableGetLandValuesSliceDetails.Break2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBreak2Null() {
                this[this.tableGetLandValuesSliceDetails.Break2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsValue2Null() {
                return this.IsNull(this.tableGetLandValuesSliceDetails.Value2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetValue2Null() {
                this[this.tableGetLandValuesSliceDetails.Value2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBreak3Null() {
                return this.IsNull(this.tableGetLandValuesSliceDetails.Break3Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBreak3Null() {
                this[this.tableGetLandValuesSliceDetails.Break3Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsValue3Null() {
                return this.IsNull(this.tableGetLandValuesSliceDetails.Value3Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetValue3Null() {
                this[this.tableGetLandValuesSliceDetails.Value3Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBreak4Null() {
                return this.IsNull(this.tableGetLandValuesSliceDetails.Break4Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBreak4Null() {
                this[this.tableGetLandValuesSliceDetails.Break4Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsValue4Null() {
                return this.IsNull(this.tableGetLandValuesSliceDetails.Value4Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetValue4Null() {
                this[this.tableGetLandValuesSliceDetails.Value4Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBreak5Null() {
                return this.IsNull(this.tableGetLandValuesSliceDetails.Break5Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBreak5Null() {
                this[this.tableGetLandValuesSliceDetails.Break5Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsValue5Null() {
                return this.IsNull(this.tableGetLandValuesSliceDetails.Value5Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetValue5Null() {
                this[this.tableGetLandValuesSliceDetails.Value5Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAdjustmentTypeNull() {
                return this.IsNull(this.tableGetLandValuesSliceDetails.AdjustmentTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAdjustmentTypeNull() {
                this[this.tableGetLandValuesSliceDetails.AdjustmentTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAdjTypeDescriptionNull() {
                return this.IsNull(this.tableGetLandValuesSliceDetails.AdjTypeDescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAdjTypeDescriptionNull() {
                this[this.tableGetLandValuesSliceDetails.AdjTypeDescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAdjustmentNull() {
                return this.IsNull(this.tableGetLandValuesSliceDetails.AdjustmentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAdjustmentNull() {
                this[this.tableGetLandValuesSliceDetails.AdjustmentColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAdjDescriptionNull() {
                return this.IsNull(this.tableGetLandValuesSliceDetails.AdjDescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAdjDescriptionNull() {
                this[this.tableGetLandValuesSliceDetails.AdjDescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUnitTypeNull() {
                return this.IsNull(this.tableGetLandValuesSliceDetails.UnitTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUnitTypeNull() {
                this[this.tableGetLandValuesSliceDetails.UnitTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUnitsNull() {
                return this.IsNull(this.tableGetLandValuesSliceDetails.UnitsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUnitsNull() {
                this[this.tableGetLandValuesSliceDetails.UnitsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFinalMrktValueNull() {
                return this.IsNull(this.tableGetLandValuesSliceDetails.FinalMrktValueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFinalMrktValueNull() {
                this[this.tableGetLandValuesSliceDetails.FinalMrktValueColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLotWidthNull() {
                return this.IsNull(this.tableGetLandValuesSliceDetails.LotWidthColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLotWidthNull() {
                this[this.tableGetLandValuesSliceDetails.LotWidthColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLotDepthNull() {
                return this.IsNull(this.tableGetLandValuesSliceDetails.LotDepthColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLotDepthNull() {
                this[this.tableGetLandValuesSliceDetails.LotDepthColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLandShapeNull() {
                return this.IsNull(this.tableGetLandValuesSliceDetails.LandShapeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLandShapeNull() {
                this[this.tableGetLandValuesSliceDetails.LandShapeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBaseMrktValueNull() {
                return this.IsNull(this.tableGetLandValuesSliceDetails.BaseMrktValueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBaseMrktValueNull() {
                this[this.tableGetLandValuesSliceDetails.BaseMrktValueColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGridFinalValueNull() {
                return this.IsNull(this.tableGetLandValuesSliceDetails.GridFinalValueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGridFinalValueNull() {
                this[this.tableGetLandValuesSliceDetails.GridFinalValueColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsVFormulaNull() {
                return this.IsNull(this.tableGetLandValuesSliceDetails.VFormulaColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetVFormulaNull() {
                this[this.tableGetLandValuesSliceDetails.VFormulaColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBaseDollarPerUnitNull() {
                return this.IsNull(this.tableGetLandValuesSliceDetails.BaseDollarPerUnitColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBaseDollarPerUnitNull() {
                this[this.tableGetLandValuesSliceDetails.BaseDollarPerUnitColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGridUnitsTotalNull() {
                return this.IsNull(this.tableGetLandValuesSliceDetails.GridUnitsTotalColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGridUnitsTotalNull() {
                this[this.tableGetLandValuesSliceDetails.GridUnitsTotalColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMrktMultiplierNull() {
                return this.IsNull(this.tableGetLandValuesSliceDetails.MrktMultiplierColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMrktMultiplierNull() {
                this[this.tableGetLandValuesSliceDetails.MrktMultiplierColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUseMultiplierNull() {
                return this.IsNull(this.tableGetLandValuesSliceDetails.UseMultiplierColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUseMultiplierNull() {
                this[this.tableGetLandValuesSliceDetails.UseMultiplierColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSrAcresNull() {
                return this.IsNull(this.tableGetLandValuesSliceDetails.SrAcresColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSrAcresNull() {
                this[this.tableGetLandValuesSliceDetails.SrAcresColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWeightedRatingNull() {
                return this.IsNull(this.tableGetLandValuesSliceDetails.WeightedRatingColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWeightedRatingNull() {
                this[this.tableGetLandValuesSliceDetails.WeightedRatingColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAglandIDNull() {
                return this.IsNull(this.tableGetLandValuesSliceDetails.AglandIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAglandIDNull() {
                this[this.tableGetLandValuesSliceDetails.AglandIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLandUseNull() {
                return this.IsNull(this.tableGetLandValuesSliceDetails.LandUseColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLandUseNull() {
                this[this.tableGetLandValuesSliceDetails.LandUseColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInfluenceTypeID1Null() {
                return this.IsNull(this.tableGetLandValuesSliceDetails.InfluenceTypeID1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInfluenceTypeID1Null() {
                this[this.tableGetLandValuesSliceDetails.InfluenceTypeID1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInfluenceType1Null() {
                return this.IsNull(this.tableGetLandValuesSliceDetails.InfluenceType1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInfluenceType1Null() {
                this[this.tableGetLandValuesSliceDetails.InfluenceType1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInfluence1Null() {
                return this.IsNull(this.tableGetLandValuesSliceDetails.Influence1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInfluence1Null() {
                this[this.tableGetLandValuesSliceDetails.Influence1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInfluenceDesc1Null() {
                return this.IsNull(this.tableGetLandValuesSliceDetails.InfluenceDesc1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInfluenceDesc1Null() {
                this[this.tableGetLandValuesSliceDetails.InfluenceDesc1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInfluenceTypeID2Null() {
                return this.IsNull(this.tableGetLandValuesSliceDetails.InfluenceTypeID2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInfluenceTypeID2Null() {
                this[this.tableGetLandValuesSliceDetails.InfluenceTypeID2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInfluenceType2Null() {
                return this.IsNull(this.tableGetLandValuesSliceDetails.InfluenceType2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInfluenceType2Null() {
                this[this.tableGetLandValuesSliceDetails.InfluenceType2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInfluence2Null() {
                return this.IsNull(this.tableGetLandValuesSliceDetails.Influence2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInfluence2Null() {
                this[this.tableGetLandValuesSliceDetails.Influence2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInfluenceDesc2Null() {
                return this.IsNull(this.tableGetLandValuesSliceDetails.InfluenceDesc2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInfluenceDesc2Null() {
                this[this.tableGetLandValuesSliceDetails.InfluenceDesc2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInfluenceTypeID3Null() {
                return this.IsNull(this.tableGetLandValuesSliceDetails.InfluenceTypeID3Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInfluenceTypeID3Null() {
                this[this.tableGetLandValuesSliceDetails.InfluenceTypeID3Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInfluenceType3Null() {
                return this.IsNull(this.tableGetLandValuesSliceDetails.InfluenceType3Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInfluenceType3Null() {
                this[this.tableGetLandValuesSliceDetails.InfluenceType3Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInfluence3Null() {
                return this.IsNull(this.tableGetLandValuesSliceDetails.Influence3Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInfluence3Null() {
                this[this.tableGetLandValuesSliceDetails.Influence3Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInfluenceDesc3Null() {
                return this.IsNull(this.tableGetLandValuesSliceDetails.InfluenceDesc3Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInfluenceDesc3Null() {
                this[this.tableGetLandValuesSliceDetails.InfluenceDesc3Column] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class GetRollYearRow : global::System.Data.DataRow {
            
            private GetRollYearDataTable tableGetRollYear;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetRollYearRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableGetRollYear = ((GetRollYearDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RollYear {
                get {
                    try {
                        return ((int)(this[this.tableGetRollYear.RollYearColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RollYear\' in table \'GetRollYear\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetRollYear.RollYearColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRollYearNull() {
                return this.IsNull(this.tableGetRollYear.RollYearColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRollYearNull() {
                this[this.tableGetRollYear.RollYearColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ListGridInfluencesRow : global::System.Data.DataRow {
            
            private ListGridInfluencesDataTable tableListGridInfluences;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListGridInfluencesRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableListGridInfluences = ((ListGridInfluencesDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int InfluenceItemID {
                get {
                    try {
                        return ((int)(this[this.tableListGridInfluences.InfluenceItemIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InfluenceItemID\' in table \'ListGridInfluences\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListGridInfluences.InfluenceItemIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int InfluenceTypeID {
                get {
                    try {
                        return ((int)(this[this.tableListGridInfluences.InfluenceTypeIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InfluenceTypeID\' in table \'ListGridInfluences\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListGridInfluences.InfluenceTypeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string InfluenceType {
                get {
                    try {
                        return ((string)(this[this.tableListGridInfluences.InfluenceTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InfluenceType\' in table \'ListGridInfluences\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListGridInfluences.InfluenceTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Influence {
                get {
                    try {
                        return ((decimal)(this[this.tableListGridInfluences.InfluenceColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Influence\' in table \'ListGridInfluences\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListGridInfluences.InfluenceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string InfluenceDesc {
                get {
                    try {
                        return ((string)(this[this.tableListGridInfluences.InfluenceDescColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InfluenceDesc\' in table \'ListGridInfluences\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListGridInfluences.InfluenceDescColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal InfluenceValue {
                get {
                    try {
                        return ((decimal)(this[this.tableListGridInfluences.InfluenceValueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InfluenceValue\' in table \'ListGridInfluences\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListGridInfluences.InfluenceValueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LUID {
                get {
                    try {
                        return ((int)(this[this.tableListGridInfluences.LUIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LUID\' in table \'ListGridInfluences\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListGridInfluences.LUIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInfluenceItemIDNull() {
                return this.IsNull(this.tableListGridInfluences.InfluenceItemIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInfluenceItemIDNull() {
                this[this.tableListGridInfluences.InfluenceItemIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInfluenceTypeIDNull() {
                return this.IsNull(this.tableListGridInfluences.InfluenceTypeIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInfluenceTypeIDNull() {
                this[this.tableListGridInfluences.InfluenceTypeIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInfluenceTypeNull() {
                return this.IsNull(this.tableListGridInfluences.InfluenceTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInfluenceTypeNull() {
                this[this.tableListGridInfluences.InfluenceTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInfluenceNull() {
                return this.IsNull(this.tableListGridInfluences.InfluenceColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInfluenceNull() {
                this[this.tableListGridInfluences.InfluenceColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInfluenceDescNull() {
                return this.IsNull(this.tableListGridInfluences.InfluenceDescColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInfluenceDescNull() {
                this[this.tableListGridInfluences.InfluenceDescColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInfluenceValueNull() {
                return this.IsNull(this.tableListGridInfluences.InfluenceValueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInfluenceValueNull() {
                this[this.tableListGridInfluences.InfluenceValueColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLUIDNull() {
                return this.IsNull(this.tableListGridInfluences.LUIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLUIDNull() {
                this[this.tableListGridInfluences.LUIDColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ListInfluenceTypesRow : global::System.Data.DataRow {
            
            private ListInfluenceTypesDataTable tableListInfluenceTypes;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListInfluenceTypesRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableListInfluenceTypes = ((ListInfluenceTypesDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int InfluenceTypeID {
                get {
                    try {
                        return ((int)(this[this.tableListInfluenceTypes.InfluenceTypeIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InfluenceTypeID\' in table \'ListInfluenceTypes\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListInfluenceTypes.InfluenceTypeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string InfluenceType {
                get {
                    if (this.IsInfluenceTypeNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableListInfluenceTypes.InfluenceTypeColumn]));
                    }
                }
                set {
                    this[this.tableListInfluenceTypes.InfluenceTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Influence {
                get {
                    try {
                        return ((decimal)(this[this.tableListInfluenceTypes.InfluenceColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Influence\' in table \'ListInfluenceTypes\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListInfluenceTypes.InfluenceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte Type {
                get {
                    try {
                        return ((byte)(this[this.tableListInfluenceTypes.TypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Type\' in table \'ListInfluenceTypes\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListInfluenceTypes.TypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Description {
                get {
                    if (this.IsDescriptionNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableListInfluenceTypes.DescriptionColumn]));
                    }
                }
                set {
                    this[this.tableListInfluenceTypes.DescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInfluenceTypeIDNull() {
                return this.IsNull(this.tableListInfluenceTypes.InfluenceTypeIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInfluenceTypeIDNull() {
                this[this.tableListInfluenceTypes.InfluenceTypeIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInfluenceTypeNull() {
                return this.IsNull(this.tableListInfluenceTypes.InfluenceTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInfluenceTypeNull() {
                this[this.tableListInfluenceTypes.InfluenceTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInfluenceNull() {
                return this.IsNull(this.tableListInfluenceTypes.InfluenceColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInfluenceNull() {
                this[this.tableListInfluenceTypes.InfluenceColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTypeNull() {
                return this.IsNull(this.tableListInfluenceTypes.TypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTypeNull() {
                this[this.tableListInfluenceTypes.TypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDescriptionNull() {
                return this.IsNull(this.tableListInfluenceTypes.DescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDescriptionNull() {
                this[this.tableListInfluenceTypes.DescriptionColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class Get_LandCodeRow : global::System.Data.DataRow {
            
            private Get_LandCodeDataTable tableGet_LandCode;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Get_LandCodeRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableGet_LandCode = ((Get_LandCodeDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LuVID {
                get {
                    try {
                        return ((int)(this[this.tableGet_LandCode.LuVIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LuVID\' in table \'Get_LandCode\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGet_LandCode.LuVIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short RollYear {
                get {
                    try {
                        return ((short)(this[this.tableGet_LandCode.RollYearColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RollYear\' in table \'Get_LandCode\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGet_LandCode.RollYearColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LandCode {
                get {
                    try {
                        return ((string)(this[this.tableGet_LandCode.LandCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LandCode\' in table \'Get_LandCode\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGet_LandCode.LandCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ReportAS {
                get {
                    try {
                        return ((string)(this[this.tableGet_LandCode.ReportASColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ReportAS\' in table \'Get_LandCode\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGet_LandCode.ReportASColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UnitType {
                get {
                    try {
                        return ((string)(this[this.tableGet_LandCode.UnitTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UnitType\' in table \'Get_LandCode\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGet_LandCode.UnitTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal BaseValue {
                get {
                    try {
                        return ((decimal)(this[this.tableGet_LandCode.BaseValueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BaseValue\' in table \'Get_LandCode\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGet_LandCode.BaseValueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Break1 {
                get {
                    try {
                        return ((decimal)(this[this.tableGet_LandCode.Break1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Break1\' in table \'Get_LandCode\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGet_LandCode.Break1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Value1 {
                get {
                    try {
                        return ((decimal)(this[this.tableGet_LandCode.Value1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Value1\' in table \'Get_LandCode\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGet_LandCode.Value1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Break2 {
                get {
                    try {
                        return ((decimal)(this[this.tableGet_LandCode.Break2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Break2\' in table \'Get_LandCode\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGet_LandCode.Break2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Value2 {
                get {
                    try {
                        return ((decimal)(this[this.tableGet_LandCode.Value2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Value2\' in table \'Get_LandCode\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGet_LandCode.Value2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Break3 {
                get {
                    try {
                        return ((decimal)(this[this.tableGet_LandCode.Break3Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Break3\' in table \'Get_LandCode\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGet_LandCode.Break3Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Value3 {
                get {
                    try {
                        return ((decimal)(this[this.tableGet_LandCode.Value3Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Value3\' in table \'Get_LandCode\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGet_LandCode.Value3Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Break4 {
                get {
                    try {
                        return ((decimal)(this[this.tableGet_LandCode.Break4Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Break4\' in table \'Get_LandCode\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGet_LandCode.Break4Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Value4 {
                get {
                    try {
                        return ((decimal)(this[this.tableGet_LandCode.Value4Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Value4\' in table \'Get_LandCode\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGet_LandCode.Value4Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal UseValue {
                get {
                    try {
                        return ((decimal)(this[this.tableGet_LandCode.UseValueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UseValue\' in table \'Get_LandCode\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGet_LandCode.UseValueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal UsePerUnit {
                get {
                    try {
                        return ((decimal)(this[this.tableGet_LandCode.UsePerUnitColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UsePerUnit\' in table \'Get_LandCode\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGet_LandCode.UsePerUnitColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal UseBaseValue {
                get {
                    try {
                        return ((decimal)(this[this.tableGet_LandCode.UseBaseValueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UseBaseValue\' in table \'Get_LandCode\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGet_LandCode.UseBaseValueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte UseAdjustmentType {
                get {
                    try {
                        return ((byte)(this[this.tableGet_LandCode.UseAdjustmentTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UseAdjustmentType\' in table \'Get_LandCode\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGet_LandCode.UseAdjustmentTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UseAdjustment {
                get {
                    try {
                        return ((string)(this[this.tableGet_LandCode.UseAdjustmentColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UseAdjustment\' in table \'Get_LandCode\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGet_LandCode.UseAdjustmentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UseAdjDescription {
                get {
                    try {
                        return ((string)(this[this.tableGet_LandCode.UseAdjDescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UseAdjDescription\' in table \'Get_LandCode\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGet_LandCode.UseAdjDescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal MrktMultiplier {
                get {
                    try {
                        return ((decimal)(this[this.tableGet_LandCode.MrktMultiplierColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MrktMultiplier\' in table \'Get_LandCode\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGet_LandCode.MrktMultiplierColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LotWidth {
                get {
                    try {
                        return ((string)(this[this.tableGet_LandCode.LotWidthColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LotWidth\' in table \'Get_LandCode\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGet_LandCode.LotWidthColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LotDepth {
                get {
                    try {
                        return ((string)(this[this.tableGet_LandCode.LotDepthColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LotDepth\' in table \'Get_LandCode\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGet_LandCode.LotDepthColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string VFormula {
                get {
                    if (this.IsVFormulaNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableGet_LandCode.VFormulaColumn]));
                    }
                }
                set {
                    this[this.tableGet_LandCode.VFormulaColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal UseMultiplier {
                get {
                    try {
                        return ((decimal)(this[this.tableGet_LandCode.UseMultiplierColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UseMultiplier\' in table \'Get_LandCode\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGet_LandCode.UseMultiplierColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLuVIDNull() {
                return this.IsNull(this.tableGet_LandCode.LuVIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLuVIDNull() {
                this[this.tableGet_LandCode.LuVIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRollYearNull() {
                return this.IsNull(this.tableGet_LandCode.RollYearColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRollYearNull() {
                this[this.tableGet_LandCode.RollYearColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLandCodeNull() {
                return this.IsNull(this.tableGet_LandCode.LandCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLandCodeNull() {
                this[this.tableGet_LandCode.LandCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsReportASNull() {
                return this.IsNull(this.tableGet_LandCode.ReportASColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetReportASNull() {
                this[this.tableGet_LandCode.ReportASColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUnitTypeNull() {
                return this.IsNull(this.tableGet_LandCode.UnitTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUnitTypeNull() {
                this[this.tableGet_LandCode.UnitTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBaseValueNull() {
                return this.IsNull(this.tableGet_LandCode.BaseValueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBaseValueNull() {
                this[this.tableGet_LandCode.BaseValueColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBreak1Null() {
                return this.IsNull(this.tableGet_LandCode.Break1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBreak1Null() {
                this[this.tableGet_LandCode.Break1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsValue1Null() {
                return this.IsNull(this.tableGet_LandCode.Value1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetValue1Null() {
                this[this.tableGet_LandCode.Value1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBreak2Null() {
                return this.IsNull(this.tableGet_LandCode.Break2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBreak2Null() {
                this[this.tableGet_LandCode.Break2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsValue2Null() {
                return this.IsNull(this.tableGet_LandCode.Value2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetValue2Null() {
                this[this.tableGet_LandCode.Value2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBreak3Null() {
                return this.IsNull(this.tableGet_LandCode.Break3Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBreak3Null() {
                this[this.tableGet_LandCode.Break3Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsValue3Null() {
                return this.IsNull(this.tableGet_LandCode.Value3Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetValue3Null() {
                this[this.tableGet_LandCode.Value3Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBreak4Null() {
                return this.IsNull(this.tableGet_LandCode.Break4Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBreak4Null() {
                this[this.tableGet_LandCode.Break4Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsValue4Null() {
                return this.IsNull(this.tableGet_LandCode.Value4Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetValue4Null() {
                this[this.tableGet_LandCode.Value4Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUseValueNull() {
                return this.IsNull(this.tableGet_LandCode.UseValueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUseValueNull() {
                this[this.tableGet_LandCode.UseValueColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUsePerUnitNull() {
                return this.IsNull(this.tableGet_LandCode.UsePerUnitColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUsePerUnitNull() {
                this[this.tableGet_LandCode.UsePerUnitColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUseBaseValueNull() {
                return this.IsNull(this.tableGet_LandCode.UseBaseValueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUseBaseValueNull() {
                this[this.tableGet_LandCode.UseBaseValueColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUseAdjustmentTypeNull() {
                return this.IsNull(this.tableGet_LandCode.UseAdjustmentTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUseAdjustmentTypeNull() {
                this[this.tableGet_LandCode.UseAdjustmentTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUseAdjustmentNull() {
                return this.IsNull(this.tableGet_LandCode.UseAdjustmentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUseAdjustmentNull() {
                this[this.tableGet_LandCode.UseAdjustmentColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUseAdjDescriptionNull() {
                return this.IsNull(this.tableGet_LandCode.UseAdjDescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUseAdjDescriptionNull() {
                this[this.tableGet_LandCode.UseAdjDescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMrktMultiplierNull() {
                return this.IsNull(this.tableGet_LandCode.MrktMultiplierColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMrktMultiplierNull() {
                this[this.tableGet_LandCode.MrktMultiplierColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLotWidthNull() {
                return this.IsNull(this.tableGet_LandCode.LotWidthColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLotWidthNull() {
                this[this.tableGet_LandCode.LotWidthColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLotDepthNull() {
                return this.IsNull(this.tableGet_LandCode.LotDepthColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLotDepthNull() {
                this[this.tableGet_LandCode.LotDepthColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsVFormulaNull() {
                return this.IsNull(this.tableGet_LandCode.VFormulaColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetVFormulaNull() {
                this[this.tableGet_LandCode.VFormulaColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUseMultiplierNull() {
                return this.IsNull(this.tableGet_LandCode.UseMultiplierColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUseMultiplierNull() {
                this[this.tableGet_LandCode.UseMultiplierColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class Get_LandCodeBaseValueRow : global::System.Data.DataRow {
            
            private Get_LandCodeBaseValueDataTable tableGet_LandCodeBaseValue;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Get_LandCodeBaseValueRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableGet_LandCodeBaseValue = ((Get_LandCodeBaseValueDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal BaseValue {
                get {
                    try {
                        return ((decimal)(this[this.tableGet_LandCodeBaseValue.BaseValueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BaseValue\' in table \'Get_LandCodeBaseValue\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGet_LandCodeBaseValue.BaseValueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal UseBaseValue {
                get {
                    try {
                        return ((decimal)(this[this.tableGet_LandCodeBaseValue.UseBaseValueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UseBaseValue\' in table \'Get_LandCodeBaseValue\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGet_LandCodeBaseValue.UseBaseValueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBaseValueNull() {
                return this.IsNull(this.tableGet_LandCodeBaseValue.BaseValueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBaseValueNull() {
                this[this.tableGet_LandCodeBaseValue.BaseValueColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUseBaseValueNull() {
                return this.IsNull(this.tableGet_LandCodeBaseValue.UseBaseValueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUseBaseValueNull() {
                this[this.tableGet_LandCodeBaseValue.UseBaseValueColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ListLandCodeRow : global::System.Data.DataRow {
            
            private ListLandCodeDataTable tableListLandCode;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListLandCodeRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableListLandCode = ((ListLandCodeDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LandCode {
                get {
                    try {
                        return ((string)(this[this.tableListLandCode.LandCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LandCode\' in table \'ListLandCode\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListLandCode.LandCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short RollYear {
                get {
                    try {
                        return ((short)(this[this.tableListLandCode.RollYearColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RollYear\' in table \'ListLandCode\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListLandCode.RollYearColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLandCodeNull() {
                return this.IsNull(this.tableListLandCode.LandCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLandCodeNull() {
                this[this.tableListLandCode.LandCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRollYearNull() {
                return this.IsNull(this.tableListLandCode.RollYearColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRollYearNull() {
                this[this.tableListLandCode.RollYearColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class WeightedRating_Row : global::System.Data.DataRow {
            
            private WeightedRating_DataTable tableWeightedRating_;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal WeightedRating_Row(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableWeightedRating_ = ((WeightedRating_DataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal WeightedRating {
                get {
                    try {
                        return ((decimal)(this[this.tableWeightedRating_.WeightedRatingColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'WeightedRating\' in table \'WeightedRating \' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableWeightedRating_.WeightedRatingColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWeightedRatingNull() {
                return this.IsNull(this.tableWeightedRating_.WeightedRatingColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWeightedRatingNull() {
                this[this.tableWeightedRating_.WeightedRatingColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class GetValueSliceValidRow : global::System.Data.DataRow {
            
            private GetValueSliceValidDataTable tableGetValueSliceValid;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetValueSliceValidRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableGetValueSliceValid = ((GetValueSliceValidDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int IsOpen {
                get {
                    try {
                        return ((int)(this[this.tableGetValueSliceValid.IsOpenColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsOpen\' in table \'GetValueSliceValid\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetValueSliceValid.IsOpenColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsOpenNull() {
                return this.IsNull(this.tableGetValueSliceValid.IsOpenColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsOpenNull() {
                this[this.tableGetValueSliceValid.IsOpenColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class GetTotalValueRow : global::System.Data.DataRow {
            
            private GetTotalValueDataTable tableGetTotalValue;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetTotalValueRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableGetTotalValue = ((GetTotalValueDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TotalValue {
                get {
                    try {
                        return ((decimal)(this[this.tableGetTotalValue.TotalValueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalValue\' in table \'GetTotalValue\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetTotalValue.TotalValueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalValueNull() {
                return this.IsNull(this.tableGetTotalValue.TotalValueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalValueNull() {
                this[this.tableGetTotalValue.TotalValueColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class GetTotalRatingRow : global::System.Data.DataRow {
            
            private GetTotalRatingDataTable tableGetTotalRating;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetTotalRatingRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableGetTotalRating = ((GetTotalRatingDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TotalRating {
                get {
                    try {
                        return ((decimal)(this[this.tableGetTotalRating.TotalRatingColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalRating\' in table \'GetTotalRating\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetTotalRating.TotalRatingColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalRatingNull() {
                return this.IsNull(this.tableGetTotalRating.TotalRatingColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalRatingNull() {
                this[this.tableGetTotalRating.TotalRatingColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class GetWeightedRating_RowChangeEvent : global::System.EventArgs {
            
            private GetWeightedRating_Row eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetWeightedRating_RowChangeEvent(GetWeightedRating_Row row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetWeightedRating_Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class GetTotalUnitsRowChangeEvent : global::System.EventArgs {
            
            private GetTotalUnitsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetTotalUnitsRowChangeEvent(GetTotalUnitsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetTotalUnitsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class GetCalculateBaseValueRowChangeEvent : global::System.EventArgs {
            
            private GetCalculateBaseValueRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetCalculateBaseValueRowChangeEvent(GetCalculateBaseValueRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetCalculateBaseValueRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ListLandTypes3RowChangeEvent : global::System.EventArgs {
            
            private ListLandTypes3Row eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListLandTypes3RowChangeEvent(ListLandTypes3Row row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListLandTypes3Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class GetLandUseTypes_RowChangeEvent : global::System.EventArgs {
            
            private GetLandUseTypes_Row eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetLandUseTypes_RowChangeEvent(GetLandUseTypes_Row row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetLandUseTypes_Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ListLandTypes1RowChangeEvent : global::System.EventArgs {
            
            private ListLandTypes1Row eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListLandTypes1RowChangeEvent(ListLandTypes1Row row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListLandTypes1Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ListLandTypes2RowChangeEvent : global::System.EventArgs {
            
            private ListLandTypes2Row eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListLandTypes2RowChangeEvent(ListLandTypes2Row row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListLandTypes2Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ListAdjustmentTypeRowChangeEvent : global::System.EventArgs {
            
            private ListAdjustmentTypeRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListAdjustmentTypeRowChangeEvent(ListAdjustmentTypeRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListAdjustmentTypeRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class GetLandValuesSliceDetailsRowChangeEvent : global::System.EventArgs {
            
            private GetLandValuesSliceDetailsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetLandValuesSliceDetailsRowChangeEvent(GetLandValuesSliceDetailsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetLandValuesSliceDetailsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class GetRollYearRowChangeEvent : global::System.EventArgs {
            
            private GetRollYearRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetRollYearRowChangeEvent(GetRollYearRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetRollYearRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ListGridInfluencesRowChangeEvent : global::System.EventArgs {
            
            private ListGridInfluencesRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListGridInfluencesRowChangeEvent(ListGridInfluencesRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListGridInfluencesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ListInfluenceTypesRowChangeEvent : global::System.EventArgs {
            
            private ListInfluenceTypesRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListInfluenceTypesRowChangeEvent(ListInfluenceTypesRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListInfluenceTypesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class Get_LandCodeRowChangeEvent : global::System.EventArgs {
            
            private Get_LandCodeRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Get_LandCodeRowChangeEvent(Get_LandCodeRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Get_LandCodeRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class Get_LandCodeBaseValueRowChangeEvent : global::System.EventArgs {
            
            private Get_LandCodeBaseValueRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Get_LandCodeBaseValueRowChangeEvent(Get_LandCodeBaseValueRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Get_LandCodeBaseValueRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ListLandCodeRowChangeEvent : global::System.EventArgs {
            
            private ListLandCodeRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListLandCodeRowChangeEvent(ListLandCodeRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListLandCodeRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class WeightedRating_RowChangeEvent : global::System.EventArgs {
            
            private WeightedRating_Row eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public WeightedRating_RowChangeEvent(WeightedRating_Row row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public WeightedRating_Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class GetValueSliceValidRowChangeEvent : global::System.EventArgs {
            
            private GetValueSliceValidRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetValueSliceValidRowChangeEvent(GetValueSliceValidRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetValueSliceValidRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class GetTotalValueRowChangeEvent : global::System.EventArgs {
            
            private GetTotalValueRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetTotalValueRowChangeEvent(GetTotalValueRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetTotalValueRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class GetTotalRatingRowChangeEvent : global::System.EventArgs {
            
            private GetTotalRatingRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetTotalRatingRowChangeEvent(GetTotalRatingRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetTotalRatingRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591