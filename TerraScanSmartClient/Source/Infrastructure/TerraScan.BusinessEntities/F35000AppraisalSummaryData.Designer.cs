//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4984
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace TerraScan.BusinessEntities {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("F35000AppraisalSummaryData")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class F35000AppraisalSummaryData : global::System.Data.DataSet {
        
        private GetObjectSummaryTableDataTable tableGetObjectSummaryTable;
        
        private ListObjectTypesDataTable tableListObjectTypes;
        
        private ListSliceTypesDataTable tableListSliceTypes;
        
        private GetSliceSummaryTableDataTable tableGetSliceSummaryTable;
        
        private GetParcelValidTableDataTable tableGetParcelValidTable;
        
        private f35000_checkAppraisalUserTableDataTable tablef35000_checkAppraisalUserTable;
        
        private f35000ObjectTotalDataTable tablef35000ObjectTotal;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public F35000AppraisalSummaryData() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected F35000AppraisalSummaryData(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["GetObjectSummaryTable"] != null)) {
                    base.Tables.Add(new GetObjectSummaryTableDataTable(ds.Tables["GetObjectSummaryTable"]));
                }
                if ((ds.Tables["ListObjectTypes"] != null)) {
                    base.Tables.Add(new ListObjectTypesDataTable(ds.Tables["ListObjectTypes"]));
                }
                if ((ds.Tables["ListSliceTypes"] != null)) {
                    base.Tables.Add(new ListSliceTypesDataTable(ds.Tables["ListSliceTypes"]));
                }
                if ((ds.Tables["GetSliceSummaryTable"] != null)) {
                    base.Tables.Add(new GetSliceSummaryTableDataTable(ds.Tables["GetSliceSummaryTable"]));
                }
                if ((ds.Tables["GetParcelValidTable"] != null)) {
                    base.Tables.Add(new GetParcelValidTableDataTable(ds.Tables["GetParcelValidTable"]));
                }
                if ((ds.Tables["f35000 checkAppraisalUserTable"] != null)) {
                    base.Tables.Add(new f35000_checkAppraisalUserTableDataTable(ds.Tables["f35000 checkAppraisalUserTable"]));
                }
                if ((ds.Tables["f35000ObjectTotal"] != null)) {
                    base.Tables.Add(new f35000ObjectTotalDataTable(ds.Tables["f35000ObjectTotal"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GetObjectSummaryTableDataTable GetObjectSummaryTable {
            get {
                return this.tableGetObjectSummaryTable;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ListObjectTypesDataTable ListObjectTypes {
            get {
                return this.tableListObjectTypes;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ListSliceTypesDataTable ListSliceTypes {
            get {
                return this.tableListSliceTypes;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GetSliceSummaryTableDataTable GetSliceSummaryTable {
            get {
                return this.tableGetSliceSummaryTable;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GetParcelValidTableDataTable GetParcelValidTable {
            get {
                return this.tableGetParcelValidTable;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public f35000_checkAppraisalUserTableDataTable f35000_checkAppraisalUserTable {
            get {
                return this.tablef35000_checkAppraisalUserTable;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public f35000ObjectTotalDataTable f35000ObjectTotal {
            get {
                return this.tablef35000ObjectTotal;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            F35000AppraisalSummaryData cln = ((F35000AppraisalSummaryData)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["GetObjectSummaryTable"] != null)) {
                    base.Tables.Add(new GetObjectSummaryTableDataTable(ds.Tables["GetObjectSummaryTable"]));
                }
                if ((ds.Tables["ListObjectTypes"] != null)) {
                    base.Tables.Add(new ListObjectTypesDataTable(ds.Tables["ListObjectTypes"]));
                }
                if ((ds.Tables["ListSliceTypes"] != null)) {
                    base.Tables.Add(new ListSliceTypesDataTable(ds.Tables["ListSliceTypes"]));
                }
                if ((ds.Tables["GetSliceSummaryTable"] != null)) {
                    base.Tables.Add(new GetSliceSummaryTableDataTable(ds.Tables["GetSliceSummaryTable"]));
                }
                if ((ds.Tables["GetParcelValidTable"] != null)) {
                    base.Tables.Add(new GetParcelValidTableDataTable(ds.Tables["GetParcelValidTable"]));
                }
                if ((ds.Tables["f35000 checkAppraisalUserTable"] != null)) {
                    base.Tables.Add(new f35000_checkAppraisalUserTableDataTable(ds.Tables["f35000 checkAppraisalUserTable"]));
                }
                if ((ds.Tables["f35000ObjectTotal"] != null)) {
                    base.Tables.Add(new f35000ObjectTotalDataTable(ds.Tables["f35000ObjectTotal"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableGetObjectSummaryTable = ((GetObjectSummaryTableDataTable)(base.Tables["GetObjectSummaryTable"]));
            if ((initTable == true)) {
                if ((this.tableGetObjectSummaryTable != null)) {
                    this.tableGetObjectSummaryTable.InitVars();
                }
            }
            this.tableListObjectTypes = ((ListObjectTypesDataTable)(base.Tables["ListObjectTypes"]));
            if ((initTable == true)) {
                if ((this.tableListObjectTypes != null)) {
                    this.tableListObjectTypes.InitVars();
                }
            }
            this.tableListSliceTypes = ((ListSliceTypesDataTable)(base.Tables["ListSliceTypes"]));
            if ((initTable == true)) {
                if ((this.tableListSliceTypes != null)) {
                    this.tableListSliceTypes.InitVars();
                }
            }
            this.tableGetSliceSummaryTable = ((GetSliceSummaryTableDataTable)(base.Tables["GetSliceSummaryTable"]));
            if ((initTable == true)) {
                if ((this.tableGetSliceSummaryTable != null)) {
                    this.tableGetSliceSummaryTable.InitVars();
                }
            }
            this.tableGetParcelValidTable = ((GetParcelValidTableDataTable)(base.Tables["GetParcelValidTable"]));
            if ((initTable == true)) {
                if ((this.tableGetParcelValidTable != null)) {
                    this.tableGetParcelValidTable.InitVars();
                }
            }
            this.tablef35000_checkAppraisalUserTable = ((f35000_checkAppraisalUserTableDataTable)(base.Tables["f35000 checkAppraisalUserTable"]));
            if ((initTable == true)) {
                if ((this.tablef35000_checkAppraisalUserTable != null)) {
                    this.tablef35000_checkAppraisalUserTable.InitVars();
                }
            }
            this.tablef35000ObjectTotal = ((f35000ObjectTotalDataTable)(base.Tables["f35000ObjectTotal"]));
            if ((initTable == true)) {
                if ((this.tablef35000ObjectTotal != null)) {
                    this.tablef35000ObjectTotal.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "F35000AppraisalSummaryData";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/F35000AppraisalSummaryData.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableGetObjectSummaryTable = new GetObjectSummaryTableDataTable();
            base.Tables.Add(this.tableGetObjectSummaryTable);
            this.tableListObjectTypes = new ListObjectTypesDataTable();
            base.Tables.Add(this.tableListObjectTypes);
            this.tableListSliceTypes = new ListSliceTypesDataTable();
            base.Tables.Add(this.tableListSliceTypes);
            this.tableGetSliceSummaryTable = new GetSliceSummaryTableDataTable();
            base.Tables.Add(this.tableGetSliceSummaryTable);
            this.tableGetParcelValidTable = new GetParcelValidTableDataTable();
            base.Tables.Add(this.tableGetParcelValidTable);
            this.tablef35000_checkAppraisalUserTable = new f35000_checkAppraisalUserTableDataTable();
            base.Tables.Add(this.tablef35000_checkAppraisalUserTable);
            this.tablef35000ObjectTotal = new f35000ObjectTotalDataTable();
            base.Tables.Add(this.tablef35000ObjectTotal);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeGetObjectSummaryTable() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeListObjectTypes() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeListSliceTypes() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeGetSliceSummaryTable() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeGetParcelValidTable() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializef35000_checkAppraisalUserTable() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializef35000ObjectTotal() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            F35000AppraisalSummaryData ds = new F35000AppraisalSummaryData();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void GetObjectSummaryTableRowChangeEventHandler(object sender, GetObjectSummaryTableRowChangeEvent e);
        
        public delegate void ListObjectTypesRowChangeEventHandler(object sender, ListObjectTypesRowChangeEvent e);
        
        public delegate void ListSliceTypesRowChangeEventHandler(object sender, ListSliceTypesRowChangeEvent e);
        
        public delegate void GetSliceSummaryTableRowChangeEventHandler(object sender, GetSliceSummaryTableRowChangeEvent e);
        
        public delegate void GetParcelValidTableRowChangeEventHandler(object sender, GetParcelValidTableRowChangeEvent e);
        
        public delegate void f35000_checkAppraisalUserTableRowChangeEventHandler(object sender, f35000_checkAppraisalUserTableRowChangeEvent e);
        
        public delegate void f35000ObjectTotalRowChangeEventHandler(object sender, f35000ObjectTotalRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class GetObjectSummaryTableDataTable : global::System.Data.TypedTableBase<GetObjectSummaryTableRow> {
            
            private global::System.Data.DataColumn columnObjectID;
            
            private global::System.Data.DataColumn columnParcelID;
            
            private global::System.Data.DataColumn columnObjectTypeID;
            
            private global::System.Data.DataColumn columnObjectType;
            
            private global::System.Data.DataColumn columnDescription;
            
            private global::System.Data.DataColumn columnOValue;
            
            private global::System.Data.DataColumn columnValueBit;
            
            private global::System.Data.DataColumn columnValueString;
            
            private global::System.Data.DataColumn columnRollBit;
            
            private global::System.Data.DataColumn columnRollString;
            
            private global::System.Data.DataColumn columnAdjustmentValue;
            
            private global::System.Data.DataColumn columnType;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetObjectSummaryTableDataTable() {
                this.TableName = "GetObjectSummaryTable";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetObjectSummaryTableDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected GetObjectSummaryTableDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ObjectIDColumn {
                get {
                    return this.columnObjectID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ParcelIDColumn {
                get {
                    return this.columnParcelID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ObjectTypeIDColumn {
                get {
                    return this.columnObjectTypeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ObjectTypeColumn {
                get {
                    return this.columnObjectType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OValueColumn {
                get {
                    return this.columnOValue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ValueBitColumn {
                get {
                    return this.columnValueBit;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ValueStringColumn {
                get {
                    return this.columnValueString;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RollBitColumn {
                get {
                    return this.columnRollBit;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RollStringColumn {
                get {
                    return this.columnRollString;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AdjustmentValueColumn {
                get {
                    return this.columnAdjustmentValue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TypeColumn {
                get {
                    return this.columnType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetObjectSummaryTableRow this[int index] {
                get {
                    return ((GetObjectSummaryTableRow)(this.Rows[index]));
                }
            }
            
            public event GetObjectSummaryTableRowChangeEventHandler GetObjectSummaryTableRowChanging;
            
            public event GetObjectSummaryTableRowChangeEventHandler GetObjectSummaryTableRowChanged;
            
            public event GetObjectSummaryTableRowChangeEventHandler GetObjectSummaryTableRowDeleting;
            
            public event GetObjectSummaryTableRowChangeEventHandler GetObjectSummaryTableRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddGetObjectSummaryTableRow(GetObjectSummaryTableRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetObjectSummaryTableRow AddGetObjectSummaryTableRow(int ObjectID, int ParcelID, short ObjectTypeID, string ObjectType, string Description, string OValue, bool ValueBit, string ValueString, bool RollBit, string RollString, string AdjustmentValue, string Type) {
                GetObjectSummaryTableRow rowGetObjectSummaryTableRow = ((GetObjectSummaryTableRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ObjectID,
                        ParcelID,
                        ObjectTypeID,
                        ObjectType,
                        Description,
                        OValue,
                        ValueBit,
                        ValueString,
                        RollBit,
                        RollString,
                        AdjustmentValue,
                        Type};
                rowGetObjectSummaryTableRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowGetObjectSummaryTableRow);
                return rowGetObjectSummaryTableRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                GetObjectSummaryTableDataTable cln = ((GetObjectSummaryTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new GetObjectSummaryTableDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnObjectID = base.Columns["ObjectID"];
                this.columnParcelID = base.Columns["ParcelID"];
                this.columnObjectTypeID = base.Columns["ObjectTypeID"];
                this.columnObjectType = base.Columns["ObjectType"];
                this.columnDescription = base.Columns["Description"];
                this.columnOValue = base.Columns["OValue"];
                this.columnValueBit = base.Columns["ValueBit"];
                this.columnValueString = base.Columns["ValueString"];
                this.columnRollBit = base.Columns["RollBit"];
                this.columnRollString = base.Columns["RollString"];
                this.columnAdjustmentValue = base.Columns["AdjustmentValue"];
                this.columnType = base.Columns["Type"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnObjectID = new global::System.Data.DataColumn("ObjectID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnObjectID);
                this.columnParcelID = new global::System.Data.DataColumn("ParcelID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnParcelID);
                this.columnObjectTypeID = new global::System.Data.DataColumn("ObjectTypeID", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnObjectTypeID);
                this.columnObjectType = new global::System.Data.DataColumn("ObjectType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnObjectType);
                this.columnDescription = new global::System.Data.DataColumn("Description", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescription);
                this.columnOValue = new global::System.Data.DataColumn("OValue", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOValue);
                this.columnValueBit = new global::System.Data.DataColumn("ValueBit", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnValueBit);
                this.columnValueString = new global::System.Data.DataColumn("ValueString", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnValueString);
                this.columnRollBit = new global::System.Data.DataColumn("RollBit", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRollBit);
                this.columnRollString = new global::System.Data.DataColumn("RollString", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRollString);
                this.columnAdjustmentValue = new global::System.Data.DataColumn("AdjustmentValue", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAdjustmentValue);
                this.columnType = new global::System.Data.DataColumn("Type", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnType);
                this.columnObjectID.ReadOnly = true;
                this.columnParcelID.ReadOnly = true;
                this.columnObjectType.MaxLength = 50;
                this.columnDescription.MaxLength = 200;
                this.columnOValue.ReadOnly = true;
                this.columnValueString.ReadOnly = true;
                this.columnValueString.MaxLength = 5;
                this.columnRollString.ReadOnly = true;
                this.columnRollString.MaxLength = 4;
                this.columnAdjustmentValue.ReadOnly = true;
                this.columnAdjustmentValue.MaxLength = 10;
                this.columnType.ReadOnly = true;
                this.columnType.MaxLength = 1;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetObjectSummaryTableRow NewGetObjectSummaryTableRow() {
                return ((GetObjectSummaryTableRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new GetObjectSummaryTableRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(GetObjectSummaryTableRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GetObjectSummaryTableRowChanged != null)) {
                    this.GetObjectSummaryTableRowChanged(this, new GetObjectSummaryTableRowChangeEvent(((GetObjectSummaryTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GetObjectSummaryTableRowChanging != null)) {
                    this.GetObjectSummaryTableRowChanging(this, new GetObjectSummaryTableRowChangeEvent(((GetObjectSummaryTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GetObjectSummaryTableRowDeleted != null)) {
                    this.GetObjectSummaryTableRowDeleted(this, new GetObjectSummaryTableRowChangeEvent(((GetObjectSummaryTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GetObjectSummaryTableRowDeleting != null)) {
                    this.GetObjectSummaryTableRowDeleting(this, new GetObjectSummaryTableRowChangeEvent(((GetObjectSummaryTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveGetObjectSummaryTableRow(GetObjectSummaryTableRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F35000AppraisalSummaryData ds = new F35000AppraisalSummaryData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "GetObjectSummaryTableDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ListObjectTypesDataTable : global::System.Data.TypedTableBase<ListObjectTypesRow> {
            
            private global::System.Data.DataColumn columnObjectTypeID;
            
            private global::System.Data.DataColumn columnObjectType;
            
            private global::System.Data.DataColumn columnDescription;
            
            private global::System.Data.DataColumn columnObjectGroupID;
            
            private global::System.Data.DataColumn columnObjectOrder;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListObjectTypesDataTable() {
                this.TableName = "ListObjectTypes";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListObjectTypesDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ListObjectTypesDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ObjectTypeIDColumn {
                get {
                    return this.columnObjectTypeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ObjectTypeColumn {
                get {
                    return this.columnObjectType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ObjectGroupIDColumn {
                get {
                    return this.columnObjectGroupID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ObjectOrderColumn {
                get {
                    return this.columnObjectOrder;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListObjectTypesRow this[int index] {
                get {
                    return ((ListObjectTypesRow)(this.Rows[index]));
                }
            }
            
            public event ListObjectTypesRowChangeEventHandler ListObjectTypesRowChanging;
            
            public event ListObjectTypesRowChangeEventHandler ListObjectTypesRowChanged;
            
            public event ListObjectTypesRowChangeEventHandler ListObjectTypesRowDeleting;
            
            public event ListObjectTypesRowChangeEventHandler ListObjectTypesRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddListObjectTypesRow(ListObjectTypesRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListObjectTypesRow AddListObjectTypesRow(short ObjectTypeID, string ObjectType, string Description, short ObjectGroupID, byte ObjectOrder) {
                ListObjectTypesRow rowListObjectTypesRow = ((ListObjectTypesRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ObjectTypeID,
                        ObjectType,
                        Description,
                        ObjectGroupID,
                        ObjectOrder};
                rowListObjectTypesRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowListObjectTypesRow);
                return rowListObjectTypesRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ListObjectTypesDataTable cln = ((ListObjectTypesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ListObjectTypesDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnObjectTypeID = base.Columns["ObjectTypeID"];
                this.columnObjectType = base.Columns["ObjectType"];
                this.columnDescription = base.Columns["Description"];
                this.columnObjectGroupID = base.Columns["ObjectGroupID"];
                this.columnObjectOrder = base.Columns["ObjectOrder"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnObjectTypeID = new global::System.Data.DataColumn("ObjectTypeID", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnObjectTypeID);
                this.columnObjectType = new global::System.Data.DataColumn("ObjectType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnObjectType);
                this.columnDescription = new global::System.Data.DataColumn("Description", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescription);
                this.columnObjectGroupID = new global::System.Data.DataColumn("ObjectGroupID", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnObjectGroupID);
                this.columnObjectOrder = new global::System.Data.DataColumn("ObjectOrder", typeof(byte), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnObjectOrder);
                this.columnObjectType.MaxLength = 50;
                this.columnDescription.MaxLength = 100;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListObjectTypesRow NewListObjectTypesRow() {
                return ((ListObjectTypesRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ListObjectTypesRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ListObjectTypesRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ListObjectTypesRowChanged != null)) {
                    this.ListObjectTypesRowChanged(this, new ListObjectTypesRowChangeEvent(((ListObjectTypesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ListObjectTypesRowChanging != null)) {
                    this.ListObjectTypesRowChanging(this, new ListObjectTypesRowChangeEvent(((ListObjectTypesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ListObjectTypesRowDeleted != null)) {
                    this.ListObjectTypesRowDeleted(this, new ListObjectTypesRowChangeEvent(((ListObjectTypesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ListObjectTypesRowDeleting != null)) {
                    this.ListObjectTypesRowDeleting(this, new ListObjectTypesRowChangeEvent(((ListObjectTypesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveListObjectTypesRow(ListObjectTypesRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F35000AppraisalSummaryData ds = new F35000AppraisalSummaryData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ListObjectTypesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ListSliceTypesDataTable : global::System.Data.TypedTableBase<ListSliceTypesRow> {
            
            private global::System.Data.DataColumn columnSliceTypeID;
            
            private global::System.Data.DataColumn columnObjectTypeID;
            
            private global::System.Data.DataColumn columnSliceType;
            
            private global::System.Data.DataColumn columnDescription;
            
            private global::System.Data.DataColumn columnIsActive;
            
            private global::System.Data.DataColumn columnIsDisabled;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListSliceTypesDataTable() {
                this.TableName = "ListSliceTypes";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListSliceTypesDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ListSliceTypesDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SliceTypeIDColumn {
                get {
                    return this.columnSliceTypeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ObjectTypeIDColumn {
                get {
                    return this.columnObjectTypeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SliceTypeColumn {
                get {
                    return this.columnSliceType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsActiveColumn {
                get {
                    return this.columnIsActive;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsDisabledColumn {
                get {
                    return this.columnIsDisabled;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListSliceTypesRow this[int index] {
                get {
                    return ((ListSliceTypesRow)(this.Rows[index]));
                }
            }
            
            public event ListSliceTypesRowChangeEventHandler ListSliceTypesRowChanging;
            
            public event ListSliceTypesRowChangeEventHandler ListSliceTypesRowChanged;
            
            public event ListSliceTypesRowChangeEventHandler ListSliceTypesRowDeleting;
            
            public event ListSliceTypesRowChangeEventHandler ListSliceTypesRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddListSliceTypesRow(ListSliceTypesRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListSliceTypesRow AddListSliceTypesRow(short SliceTypeID, short ObjectTypeID, string SliceType, string Description, bool IsActive, bool IsDisabled) {
                ListSliceTypesRow rowListSliceTypesRow = ((ListSliceTypesRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        SliceTypeID,
                        ObjectTypeID,
                        SliceType,
                        Description,
                        IsActive,
                        IsDisabled};
                rowListSliceTypesRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowListSliceTypesRow);
                return rowListSliceTypesRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ListSliceTypesDataTable cln = ((ListSliceTypesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ListSliceTypesDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnSliceTypeID = base.Columns["SliceTypeID"];
                this.columnObjectTypeID = base.Columns["ObjectTypeID"];
                this.columnSliceType = base.Columns["SliceType"];
                this.columnDescription = base.Columns["Description"];
                this.columnIsActive = base.Columns["IsActive"];
                this.columnIsDisabled = base.Columns["IsDisabled"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnSliceTypeID = new global::System.Data.DataColumn("SliceTypeID", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSliceTypeID);
                this.columnObjectTypeID = new global::System.Data.DataColumn("ObjectTypeID", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnObjectTypeID);
                this.columnSliceType = new global::System.Data.DataColumn("SliceType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSliceType);
                this.columnDescription = new global::System.Data.DataColumn("Description", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescription);
                this.columnIsActive = new global::System.Data.DataColumn("IsActive", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsActive);
                this.columnIsDisabled = new global::System.Data.DataColumn("IsDisabled", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsDisabled);
                this.columnSliceType.MaxLength = 50;
                this.columnDescription.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListSliceTypesRow NewListSliceTypesRow() {
                return ((ListSliceTypesRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ListSliceTypesRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ListSliceTypesRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ListSliceTypesRowChanged != null)) {
                    this.ListSliceTypesRowChanged(this, new ListSliceTypesRowChangeEvent(((ListSliceTypesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ListSliceTypesRowChanging != null)) {
                    this.ListSliceTypesRowChanging(this, new ListSliceTypesRowChangeEvent(((ListSliceTypesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ListSliceTypesRowDeleted != null)) {
                    this.ListSliceTypesRowDeleted(this, new ListSliceTypesRowChangeEvent(((ListSliceTypesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ListSliceTypesRowDeleting != null)) {
                    this.ListSliceTypesRowDeleting(this, new ListSliceTypesRowChangeEvent(((ListSliceTypesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveListSliceTypesRow(ListSliceTypesRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F35000AppraisalSummaryData ds = new F35000AppraisalSummaryData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ListSliceTypesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class GetSliceSummaryTableDataTable : global::System.Data.TypedTableBase<GetSliceSummaryTableRow> {
            
            private global::System.Data.DataColumn columnValueSliceID;
            
            private global::System.Data.DataColumn columnObjectID;
            
            private global::System.Data.DataColumn columnParcelID;
            
            private global::System.Data.DataColumn columnSliceTypeID;
            
            private global::System.Data.DataColumn columnSliceType;
            
            private global::System.Data.DataColumn columnAdjustmentValue;
            
            private global::System.Data.DataColumn columnAmount;
            
            private global::System.Data.DataColumn columnDescription;
            
            private global::System.Data.DataColumn columnValueBit;
            
            private global::System.Data.DataColumn columnValueString;
            
            private global::System.Data.DataColumn columnRollBit;
            
            private global::System.Data.DataColumn columnRollString;
            
            private global::System.Data.DataColumn columnType;
            
            private global::System.Data.DataColumn columnForm;
            
            private global::System.Data.DataColumn columnImageType;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetSliceSummaryTableDataTable() {
                this.TableName = "GetSliceSummaryTable";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetSliceSummaryTableDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected GetSliceSummaryTableDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ValueSliceIDColumn {
                get {
                    return this.columnValueSliceID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ObjectIDColumn {
                get {
                    return this.columnObjectID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ParcelIDColumn {
                get {
                    return this.columnParcelID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SliceTypeIDColumn {
                get {
                    return this.columnSliceTypeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SliceTypeColumn {
                get {
                    return this.columnSliceType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AdjustmentValueColumn {
                get {
                    return this.columnAdjustmentValue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AmountColumn {
                get {
                    return this.columnAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ValueBitColumn {
                get {
                    return this.columnValueBit;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ValueStringColumn {
                get {
                    return this.columnValueString;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RollBitColumn {
                get {
                    return this.columnRollBit;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RollStringColumn {
                get {
                    return this.columnRollString;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TypeColumn {
                get {
                    return this.columnType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FormColumn {
                get {
                    return this.columnForm;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ImageTypeColumn {
                get {
                    return this.columnImageType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetSliceSummaryTableRow this[int index] {
                get {
                    return ((GetSliceSummaryTableRow)(this.Rows[index]));
                }
            }
            
            public event GetSliceSummaryTableRowChangeEventHandler GetSliceSummaryTableRowChanging;
            
            public event GetSliceSummaryTableRowChangeEventHandler GetSliceSummaryTableRowChanged;
            
            public event GetSliceSummaryTableRowChangeEventHandler GetSliceSummaryTableRowDeleting;
            
            public event GetSliceSummaryTableRowChangeEventHandler GetSliceSummaryTableRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddGetSliceSummaryTableRow(GetSliceSummaryTableRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetSliceSummaryTableRow AddGetSliceSummaryTableRow(int ValueSliceID, int ObjectID, int ParcelID, short SliceTypeID, string SliceType, string AdjustmentValue, string Amount, string Description, bool ValueBit, string ValueString, bool RollBit, string RollString, string Type, int Form, string ImageType) {
                GetSliceSummaryTableRow rowGetSliceSummaryTableRow = ((GetSliceSummaryTableRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ValueSliceID,
                        ObjectID,
                        ParcelID,
                        SliceTypeID,
                        SliceType,
                        AdjustmentValue,
                        Amount,
                        Description,
                        ValueBit,
                        ValueString,
                        RollBit,
                        RollString,
                        Type,
                        Form,
                        ImageType};
                rowGetSliceSummaryTableRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowGetSliceSummaryTableRow);
                return rowGetSliceSummaryTableRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                GetSliceSummaryTableDataTable cln = ((GetSliceSummaryTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new GetSliceSummaryTableDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnValueSliceID = base.Columns["ValueSliceID"];
                this.columnObjectID = base.Columns["ObjectID"];
                this.columnParcelID = base.Columns["ParcelID"];
                this.columnSliceTypeID = base.Columns["SliceTypeID"];
                this.columnSliceType = base.Columns["SliceType"];
                this.columnAdjustmentValue = base.Columns["AdjustmentValue"];
                this.columnAmount = base.Columns["Amount"];
                this.columnDescription = base.Columns["Description"];
                this.columnValueBit = base.Columns["ValueBit"];
                this.columnValueString = base.Columns["ValueString"];
                this.columnRollBit = base.Columns["RollBit"];
                this.columnRollString = base.Columns["RollString"];
                this.columnType = base.Columns["Type"];
                this.columnForm = base.Columns["Form"];
                this.columnImageType = base.Columns["ImageType"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnValueSliceID = new global::System.Data.DataColumn("ValueSliceID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnValueSliceID);
                this.columnObjectID = new global::System.Data.DataColumn("ObjectID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnObjectID);
                this.columnParcelID = new global::System.Data.DataColumn("ParcelID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnParcelID);
                this.columnSliceTypeID = new global::System.Data.DataColumn("SliceTypeID", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSliceTypeID);
                this.columnSliceType = new global::System.Data.DataColumn("SliceType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSliceType);
                this.columnAdjustmentValue = new global::System.Data.DataColumn("AdjustmentValue", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAdjustmentValue);
                this.columnAmount = new global::System.Data.DataColumn("Amount", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAmount);
                this.columnDescription = new global::System.Data.DataColumn("Description", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescription);
                this.columnValueBit = new global::System.Data.DataColumn("ValueBit", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnValueBit);
                this.columnValueString = new global::System.Data.DataColumn("ValueString", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnValueString);
                this.columnRollBit = new global::System.Data.DataColumn("RollBit", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRollBit);
                this.columnRollString = new global::System.Data.DataColumn("RollString", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRollString);
                this.columnType = new global::System.Data.DataColumn("Type", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnType);
                this.columnForm = new global::System.Data.DataColumn("Form", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnForm);
                this.columnImageType = new global::System.Data.DataColumn("ImageType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnImageType);
                this.columnValueSliceID.ReadOnly = true;
                this.columnObjectID.ReadOnly = true;
                this.columnParcelID.ReadOnly = true;
                this.columnSliceType.MaxLength = 50;
                this.columnAdjustmentValue.ReadOnly = true;
                this.columnAdjustmentValue.MaxLength = 22;
                this.columnAmount.ReadOnly = true;
                this.columnAmount.MaxLength = 22;
                this.columnDescription.MaxLength = 50;
                this.columnValueString.ReadOnly = true;
                this.columnValueString.MaxLength = 5;
                this.columnRollString.ReadOnly = true;
                this.columnRollString.MaxLength = 4;
                this.columnType.ReadOnly = true;
                this.columnType.MaxLength = 10;
                this.columnImageType.ReadOnly = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetSliceSummaryTableRow NewGetSliceSummaryTableRow() {
                return ((GetSliceSummaryTableRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new GetSliceSummaryTableRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(GetSliceSummaryTableRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GetSliceSummaryTableRowChanged != null)) {
                    this.GetSliceSummaryTableRowChanged(this, new GetSliceSummaryTableRowChangeEvent(((GetSliceSummaryTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GetSliceSummaryTableRowChanging != null)) {
                    this.GetSliceSummaryTableRowChanging(this, new GetSliceSummaryTableRowChangeEvent(((GetSliceSummaryTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GetSliceSummaryTableRowDeleted != null)) {
                    this.GetSliceSummaryTableRowDeleted(this, new GetSliceSummaryTableRowChangeEvent(((GetSliceSummaryTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GetSliceSummaryTableRowDeleting != null)) {
                    this.GetSliceSummaryTableRowDeleting(this, new GetSliceSummaryTableRowChangeEvent(((GetSliceSummaryTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveGetSliceSummaryTableRow(GetSliceSummaryTableRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F35000AppraisalSummaryData ds = new F35000AppraisalSummaryData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "GetSliceSummaryTableDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class GetParcelValidTableDataTable : global::System.Data.TypedTableBase<GetParcelValidTableRow> {
            
            private global::System.Data.DataColumn columnIsOpen;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetParcelValidTableDataTable() {
                this.TableName = "GetParcelValidTable";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetParcelValidTableDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected GetParcelValidTableDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsOpenColumn {
                get {
                    return this.columnIsOpen;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetParcelValidTableRow this[int index] {
                get {
                    return ((GetParcelValidTableRow)(this.Rows[index]));
                }
            }
            
            public event GetParcelValidTableRowChangeEventHandler GetParcelValidTableRowChanging;
            
            public event GetParcelValidTableRowChangeEventHandler GetParcelValidTableRowChanged;
            
            public event GetParcelValidTableRowChangeEventHandler GetParcelValidTableRowDeleting;
            
            public event GetParcelValidTableRowChangeEventHandler GetParcelValidTableRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddGetParcelValidTableRow(GetParcelValidTableRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetParcelValidTableRow AddGetParcelValidTableRow(bool IsOpen) {
                GetParcelValidTableRow rowGetParcelValidTableRow = ((GetParcelValidTableRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        IsOpen};
                rowGetParcelValidTableRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowGetParcelValidTableRow);
                return rowGetParcelValidTableRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                GetParcelValidTableDataTable cln = ((GetParcelValidTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new GetParcelValidTableDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnIsOpen = base.Columns["IsOpen"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnIsOpen = new global::System.Data.DataColumn("IsOpen", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsOpen);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetParcelValidTableRow NewGetParcelValidTableRow() {
                return ((GetParcelValidTableRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new GetParcelValidTableRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(GetParcelValidTableRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GetParcelValidTableRowChanged != null)) {
                    this.GetParcelValidTableRowChanged(this, new GetParcelValidTableRowChangeEvent(((GetParcelValidTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GetParcelValidTableRowChanging != null)) {
                    this.GetParcelValidTableRowChanging(this, new GetParcelValidTableRowChangeEvent(((GetParcelValidTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GetParcelValidTableRowDeleted != null)) {
                    this.GetParcelValidTableRowDeleted(this, new GetParcelValidTableRowChangeEvent(((GetParcelValidTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GetParcelValidTableRowDeleting != null)) {
                    this.GetParcelValidTableRowDeleting(this, new GetParcelValidTableRowChangeEvent(((GetParcelValidTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveGetParcelValidTableRow(GetParcelValidTableRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F35000AppraisalSummaryData ds = new F35000AppraisalSummaryData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "GetParcelValidTableDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class f35000_checkAppraisalUserTableDataTable : global::System.Data.TypedTableBase<f35000_checkAppraisalUserTableRow> {
            
            private global::System.Data.DataColumn columnName_Display;
            
            private global::System.Data.DataColumn columnPrimaryKeyID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public f35000_checkAppraisalUserTableDataTable() {
                this.TableName = "f35000 checkAppraisalUserTable";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal f35000_checkAppraisalUserTableDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected f35000_checkAppraisalUserTableDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Name_DisplayColumn {
                get {
                    return this.columnName_Display;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PrimaryKeyIDColumn {
                get {
                    return this.columnPrimaryKeyID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public f35000_checkAppraisalUserTableRow this[int index] {
                get {
                    return ((f35000_checkAppraisalUserTableRow)(this.Rows[index]));
                }
            }
            
            public event f35000_checkAppraisalUserTableRowChangeEventHandler f35000_checkAppraisalUserTableRowChanging;
            
            public event f35000_checkAppraisalUserTableRowChangeEventHandler f35000_checkAppraisalUserTableRowChanged;
            
            public event f35000_checkAppraisalUserTableRowChangeEventHandler f35000_checkAppraisalUserTableRowDeleting;
            
            public event f35000_checkAppraisalUserTableRowChangeEventHandler f35000_checkAppraisalUserTableRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Addf35000_checkAppraisalUserTableRow(f35000_checkAppraisalUserTableRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public f35000_checkAppraisalUserTableRow Addf35000_checkAppraisalUserTableRow(string Name_Display, int PrimaryKeyID) {
                f35000_checkAppraisalUserTableRow rowf35000_checkAppraisalUserTableRow = ((f35000_checkAppraisalUserTableRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Name_Display,
                        PrimaryKeyID};
                rowf35000_checkAppraisalUserTableRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowf35000_checkAppraisalUserTableRow);
                return rowf35000_checkAppraisalUserTableRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                f35000_checkAppraisalUserTableDataTable cln = ((f35000_checkAppraisalUserTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new f35000_checkAppraisalUserTableDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnName_Display = base.Columns["Name_Display"];
                this.columnPrimaryKeyID = base.Columns["PrimaryKeyID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnName_Display = new global::System.Data.DataColumn("Name_Display", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnName_Display);
                this.columnPrimaryKeyID = new global::System.Data.DataColumn("PrimaryKeyID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPrimaryKeyID);
                this.columnName_Display.MaxLength = 50;
                this.columnPrimaryKeyID.ReadOnly = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public f35000_checkAppraisalUserTableRow Newf35000_checkAppraisalUserTableRow() {
                return ((f35000_checkAppraisalUserTableRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new f35000_checkAppraisalUserTableRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(f35000_checkAppraisalUserTableRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.f35000_checkAppraisalUserTableRowChanged != null)) {
                    this.f35000_checkAppraisalUserTableRowChanged(this, new f35000_checkAppraisalUserTableRowChangeEvent(((f35000_checkAppraisalUserTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.f35000_checkAppraisalUserTableRowChanging != null)) {
                    this.f35000_checkAppraisalUserTableRowChanging(this, new f35000_checkAppraisalUserTableRowChangeEvent(((f35000_checkAppraisalUserTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.f35000_checkAppraisalUserTableRowDeleted != null)) {
                    this.f35000_checkAppraisalUserTableRowDeleted(this, new f35000_checkAppraisalUserTableRowChangeEvent(((f35000_checkAppraisalUserTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.f35000_checkAppraisalUserTableRowDeleting != null)) {
                    this.f35000_checkAppraisalUserTableRowDeleting(this, new f35000_checkAppraisalUserTableRowChangeEvent(((f35000_checkAppraisalUserTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Removef35000_checkAppraisalUserTableRow(f35000_checkAppraisalUserTableRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F35000AppraisalSummaryData ds = new F35000AppraisalSummaryData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "f35000_checkAppraisalUserTableDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class f35000ObjectTotalDataTable : global::System.Data.TypedTableBase<f35000ObjectTotalRow> {
            
            private global::System.Data.DataColumn columnTotalObjectValue;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public f35000ObjectTotalDataTable() {
                this.TableName = "f35000ObjectTotal";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal f35000ObjectTotalDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected f35000ObjectTotalDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalObjectValueColumn {
                get {
                    return this.columnTotalObjectValue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public f35000ObjectTotalRow this[int index] {
                get {
                    return ((f35000ObjectTotalRow)(this.Rows[index]));
                }
            }
            
            public event f35000ObjectTotalRowChangeEventHandler f35000ObjectTotalRowChanging;
            
            public event f35000ObjectTotalRowChangeEventHandler f35000ObjectTotalRowChanged;
            
            public event f35000ObjectTotalRowChangeEventHandler f35000ObjectTotalRowDeleting;
            
            public event f35000ObjectTotalRowChangeEventHandler f35000ObjectTotalRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Addf35000ObjectTotalRow(f35000ObjectTotalRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public f35000ObjectTotalRow Addf35000ObjectTotalRow(decimal TotalObjectValue) {
                f35000ObjectTotalRow rowf35000ObjectTotalRow = ((f35000ObjectTotalRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        TotalObjectValue};
                rowf35000ObjectTotalRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowf35000ObjectTotalRow);
                return rowf35000ObjectTotalRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                f35000ObjectTotalDataTable cln = ((f35000ObjectTotalDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new f35000ObjectTotalDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnTotalObjectValue = base.Columns["TotalObjectValue"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnTotalObjectValue = new global::System.Data.DataColumn("TotalObjectValue", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalObjectValue);
                this.columnTotalObjectValue.ReadOnly = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public f35000ObjectTotalRow Newf35000ObjectTotalRow() {
                return ((f35000ObjectTotalRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new f35000ObjectTotalRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(f35000ObjectTotalRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.f35000ObjectTotalRowChanged != null)) {
                    this.f35000ObjectTotalRowChanged(this, new f35000ObjectTotalRowChangeEvent(((f35000ObjectTotalRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.f35000ObjectTotalRowChanging != null)) {
                    this.f35000ObjectTotalRowChanging(this, new f35000ObjectTotalRowChangeEvent(((f35000ObjectTotalRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.f35000ObjectTotalRowDeleted != null)) {
                    this.f35000ObjectTotalRowDeleted(this, new f35000ObjectTotalRowChangeEvent(((f35000ObjectTotalRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.f35000ObjectTotalRowDeleting != null)) {
                    this.f35000ObjectTotalRowDeleting(this, new f35000ObjectTotalRowChangeEvent(((f35000ObjectTotalRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Removef35000ObjectTotalRow(f35000ObjectTotalRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F35000AppraisalSummaryData ds = new F35000AppraisalSummaryData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "f35000ObjectTotalDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class GetObjectSummaryTableRow : global::System.Data.DataRow {
            
            private GetObjectSummaryTableDataTable tableGetObjectSummaryTable;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetObjectSummaryTableRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableGetObjectSummaryTable = ((GetObjectSummaryTableDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ObjectID {
                get {
                    try {
                        return ((int)(this[this.tableGetObjectSummaryTable.ObjectIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ObjectID\' in table \'GetObjectSummaryTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetObjectSummaryTable.ObjectIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ParcelID {
                get {
                    try {
                        return ((int)(this[this.tableGetObjectSummaryTable.ParcelIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ParcelID\' in table \'GetObjectSummaryTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetObjectSummaryTable.ParcelIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short ObjectTypeID {
                get {
                    try {
                        return ((short)(this[this.tableGetObjectSummaryTable.ObjectTypeIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ObjectTypeID\' in table \'GetObjectSummaryTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetObjectSummaryTable.ObjectTypeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ObjectType {
                get {
                    try {
                        return ((string)(this[this.tableGetObjectSummaryTable.ObjectTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ObjectType\' in table \'GetObjectSummaryTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetObjectSummaryTable.ObjectTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Description {
                get {
                    try {
                        return ((string)(this[this.tableGetObjectSummaryTable.DescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Description\' in table \'GetObjectSummaryTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetObjectSummaryTable.DescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string OValue {
                get {
                    try {
                        return ((string)(this[this.tableGetObjectSummaryTable.OValueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OValue\' in table \'GetObjectSummaryTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetObjectSummaryTable.OValueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool ValueBit {
                get {
                    try {
                        return ((bool)(this[this.tableGetObjectSummaryTable.ValueBitColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ValueBit\' in table \'GetObjectSummaryTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetObjectSummaryTable.ValueBitColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ValueString {
                get {
                    try {
                        return ((string)(this[this.tableGetObjectSummaryTable.ValueStringColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ValueString\' in table \'GetObjectSummaryTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetObjectSummaryTable.ValueStringColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool RollBit {
                get {
                    try {
                        return ((bool)(this[this.tableGetObjectSummaryTable.RollBitColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RollBit\' in table \'GetObjectSummaryTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetObjectSummaryTable.RollBitColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RollString {
                get {
                    try {
                        return ((string)(this[this.tableGetObjectSummaryTable.RollStringColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RollString\' in table \'GetObjectSummaryTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetObjectSummaryTable.RollStringColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AdjustmentValue {
                get {
                    try {
                        return ((string)(this[this.tableGetObjectSummaryTable.AdjustmentValueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AdjustmentValue\' in table \'GetObjectSummaryTable\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableGetObjectSummaryTable.AdjustmentValueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Type {
                get {
                    try {
                        return ((string)(this[this.tableGetObjectSummaryTable.TypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Type\' in table \'GetObjectSummaryTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetObjectSummaryTable.TypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsObjectIDNull() {
                return this.IsNull(this.tableGetObjectSummaryTable.ObjectIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetObjectIDNull() {
                this[this.tableGetObjectSummaryTable.ObjectIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsParcelIDNull() {
                return this.IsNull(this.tableGetObjectSummaryTable.ParcelIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetParcelIDNull() {
                this[this.tableGetObjectSummaryTable.ParcelIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsObjectTypeIDNull() {
                return this.IsNull(this.tableGetObjectSummaryTable.ObjectTypeIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetObjectTypeIDNull() {
                this[this.tableGetObjectSummaryTable.ObjectTypeIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsObjectTypeNull() {
                return this.IsNull(this.tableGetObjectSummaryTable.ObjectTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetObjectTypeNull() {
                this[this.tableGetObjectSummaryTable.ObjectTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDescriptionNull() {
                return this.IsNull(this.tableGetObjectSummaryTable.DescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDescriptionNull() {
                this[this.tableGetObjectSummaryTable.DescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOValueNull() {
                return this.IsNull(this.tableGetObjectSummaryTable.OValueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOValueNull() {
                this[this.tableGetObjectSummaryTable.OValueColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsValueBitNull() {
                return this.IsNull(this.tableGetObjectSummaryTable.ValueBitColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetValueBitNull() {
                this[this.tableGetObjectSummaryTable.ValueBitColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsValueStringNull() {
                return this.IsNull(this.tableGetObjectSummaryTable.ValueStringColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetValueStringNull() {
                this[this.tableGetObjectSummaryTable.ValueStringColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRollBitNull() {
                return this.IsNull(this.tableGetObjectSummaryTable.RollBitColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRollBitNull() {
                this[this.tableGetObjectSummaryTable.RollBitColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRollStringNull() {
                return this.IsNull(this.tableGetObjectSummaryTable.RollStringColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRollStringNull() {
                this[this.tableGetObjectSummaryTable.RollStringColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAdjustmentValueNull() {
                return this.IsNull(this.tableGetObjectSummaryTable.AdjustmentValueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAdjustmentValueNull() {
                this[this.tableGetObjectSummaryTable.AdjustmentValueColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTypeNull() {
                return this.IsNull(this.tableGetObjectSummaryTable.TypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTypeNull() {
                this[this.tableGetObjectSummaryTable.TypeColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ListObjectTypesRow : global::System.Data.DataRow {
            
            private ListObjectTypesDataTable tableListObjectTypes;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListObjectTypesRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableListObjectTypes = ((ListObjectTypesDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short ObjectTypeID {
                get {
                    try {
                        return ((short)(this[this.tableListObjectTypes.ObjectTypeIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ObjectTypeID\' in table \'ListObjectTypes\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListObjectTypes.ObjectTypeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ObjectType {
                get {
                    try {
                        return ((string)(this[this.tableListObjectTypes.ObjectTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ObjectType\' in table \'ListObjectTypes\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListObjectTypes.ObjectTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Description {
                get {
                    try {
                        return ((string)(this[this.tableListObjectTypes.DescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Description\' in table \'ListObjectTypes\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListObjectTypes.DescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short ObjectGroupID {
                get {
                    try {
                        return ((short)(this[this.tableListObjectTypes.ObjectGroupIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ObjectGroupID\' in table \'ListObjectTypes\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListObjectTypes.ObjectGroupIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte ObjectOrder {
                get {
                    try {
                        return ((byte)(this[this.tableListObjectTypes.ObjectOrderColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ObjectOrder\' in table \'ListObjectTypes\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListObjectTypes.ObjectOrderColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsObjectTypeIDNull() {
                return this.IsNull(this.tableListObjectTypes.ObjectTypeIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetObjectTypeIDNull() {
                this[this.tableListObjectTypes.ObjectTypeIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsObjectTypeNull() {
                return this.IsNull(this.tableListObjectTypes.ObjectTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetObjectTypeNull() {
                this[this.tableListObjectTypes.ObjectTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDescriptionNull() {
                return this.IsNull(this.tableListObjectTypes.DescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDescriptionNull() {
                this[this.tableListObjectTypes.DescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsObjectGroupIDNull() {
                return this.IsNull(this.tableListObjectTypes.ObjectGroupIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetObjectGroupIDNull() {
                this[this.tableListObjectTypes.ObjectGroupIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsObjectOrderNull() {
                return this.IsNull(this.tableListObjectTypes.ObjectOrderColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetObjectOrderNull() {
                this[this.tableListObjectTypes.ObjectOrderColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ListSliceTypesRow : global::System.Data.DataRow {
            
            private ListSliceTypesDataTable tableListSliceTypes;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListSliceTypesRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableListSliceTypes = ((ListSliceTypesDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short SliceTypeID {
                get {
                    try {
                        return ((short)(this[this.tableListSliceTypes.SliceTypeIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SliceTypeID\' in table \'ListSliceTypes\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListSliceTypes.SliceTypeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short ObjectTypeID {
                get {
                    try {
                        return ((short)(this[this.tableListSliceTypes.ObjectTypeIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ObjectTypeID\' in table \'ListSliceTypes\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListSliceTypes.ObjectTypeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SliceType {
                get {
                    try {
                        return ((string)(this[this.tableListSliceTypes.SliceTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SliceType\' in table \'ListSliceTypes\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListSliceTypes.SliceTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Description {
                get {
                    try {
                        return ((string)(this[this.tableListSliceTypes.DescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Description\' in table \'ListSliceTypes\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListSliceTypes.DescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsActive {
                get {
                    try {
                        return ((bool)(this[this.tableListSliceTypes.IsActiveColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsActive\' in table \'ListSliceTypes\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListSliceTypes.IsActiveColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDisabled {
                get {
                    try {
                        return ((bool)(this[this.tableListSliceTypes.IsDisabledColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsDisabled\' in table \'ListSliceTypes\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListSliceTypes.IsDisabledColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSliceTypeIDNull() {
                return this.IsNull(this.tableListSliceTypes.SliceTypeIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSliceTypeIDNull() {
                this[this.tableListSliceTypes.SliceTypeIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsObjectTypeIDNull() {
                return this.IsNull(this.tableListSliceTypes.ObjectTypeIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetObjectTypeIDNull() {
                this[this.tableListSliceTypes.ObjectTypeIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSliceTypeNull() {
                return this.IsNull(this.tableListSliceTypes.SliceTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSliceTypeNull() {
                this[this.tableListSliceTypes.SliceTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDescriptionNull() {
                return this.IsNull(this.tableListSliceTypes.DescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDescriptionNull() {
                this[this.tableListSliceTypes.DescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsActiveNull() {
                return this.IsNull(this.tableListSliceTypes.IsActiveColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsActiveNull() {
                this[this.tableListSliceTypes.IsActiveColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsDisabledNull() {
                return this.IsNull(this.tableListSliceTypes.IsDisabledColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsDisabledNull() {
                this[this.tableListSliceTypes.IsDisabledColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class GetSliceSummaryTableRow : global::System.Data.DataRow {
            
            private GetSliceSummaryTableDataTable tableGetSliceSummaryTable;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetSliceSummaryTableRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableGetSliceSummaryTable = ((GetSliceSummaryTableDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ValueSliceID {
                get {
                    try {
                        return ((int)(this[this.tableGetSliceSummaryTable.ValueSliceIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ValueSliceID\' in table \'GetSliceSummaryTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetSliceSummaryTable.ValueSliceIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ObjectID {
                get {
                    try {
                        return ((int)(this[this.tableGetSliceSummaryTable.ObjectIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ObjectID\' in table \'GetSliceSummaryTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetSliceSummaryTable.ObjectIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ParcelID {
                get {
                    try {
                        return ((int)(this[this.tableGetSliceSummaryTable.ParcelIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ParcelID\' in table \'GetSliceSummaryTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetSliceSummaryTable.ParcelIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short SliceTypeID {
                get {
                    try {
                        return ((short)(this[this.tableGetSliceSummaryTable.SliceTypeIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SliceTypeID\' in table \'GetSliceSummaryTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetSliceSummaryTable.SliceTypeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SliceType {
                get {
                    try {
                        return ((string)(this[this.tableGetSliceSummaryTable.SliceTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SliceType\' in table \'GetSliceSummaryTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetSliceSummaryTable.SliceTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AdjustmentValue {
                get {
                    try {
                        return ((string)(this[this.tableGetSliceSummaryTable.AdjustmentValueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AdjustmentValue\' in table \'GetSliceSummaryTable\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableGetSliceSummaryTable.AdjustmentValueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Amount {
                get {
                    try {
                        return ((string)(this[this.tableGetSliceSummaryTable.AmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Amount\' in table \'GetSliceSummaryTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetSliceSummaryTable.AmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Description {
                get {
                    try {
                        return ((string)(this[this.tableGetSliceSummaryTable.DescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Description\' in table \'GetSliceSummaryTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetSliceSummaryTable.DescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool ValueBit {
                get {
                    try {
                        return ((bool)(this[this.tableGetSliceSummaryTable.ValueBitColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ValueBit\' in table \'GetSliceSummaryTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetSliceSummaryTable.ValueBitColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ValueString {
                get {
                    try {
                        return ((string)(this[this.tableGetSliceSummaryTable.ValueStringColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ValueString\' in table \'GetSliceSummaryTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetSliceSummaryTable.ValueStringColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool RollBit {
                get {
                    try {
                        return ((bool)(this[this.tableGetSliceSummaryTable.RollBitColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RollBit\' in table \'GetSliceSummaryTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetSliceSummaryTable.RollBitColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RollString {
                get {
                    try {
                        return ((string)(this[this.tableGetSliceSummaryTable.RollStringColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RollString\' in table \'GetSliceSummaryTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetSliceSummaryTable.RollStringColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Type {
                get {
                    try {
                        return ((string)(this[this.tableGetSliceSummaryTable.TypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Type\' in table \'GetSliceSummaryTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetSliceSummaryTable.TypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Form {
                get {
                    try {
                        return ((int)(this[this.tableGetSliceSummaryTable.FormColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Form\' in table \'GetSliceSummaryTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetSliceSummaryTable.FormColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ImageType {
                get {
                    try {
                        return ((string)(this[this.tableGetSliceSummaryTable.ImageTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ImageType\' in table \'GetSliceSummaryTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetSliceSummaryTable.ImageTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsValueSliceIDNull() {
                return this.IsNull(this.tableGetSliceSummaryTable.ValueSliceIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetValueSliceIDNull() {
                this[this.tableGetSliceSummaryTable.ValueSliceIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsObjectIDNull() {
                return this.IsNull(this.tableGetSliceSummaryTable.ObjectIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetObjectIDNull() {
                this[this.tableGetSliceSummaryTable.ObjectIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsParcelIDNull() {
                return this.IsNull(this.tableGetSliceSummaryTable.ParcelIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetParcelIDNull() {
                this[this.tableGetSliceSummaryTable.ParcelIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSliceTypeIDNull() {
                return this.IsNull(this.tableGetSliceSummaryTable.SliceTypeIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSliceTypeIDNull() {
                this[this.tableGetSliceSummaryTable.SliceTypeIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSliceTypeNull() {
                return this.IsNull(this.tableGetSliceSummaryTable.SliceTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSliceTypeNull() {
                this[this.tableGetSliceSummaryTable.SliceTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAdjustmentValueNull() {
                return this.IsNull(this.tableGetSliceSummaryTable.AdjustmentValueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAdjustmentValueNull() {
                this[this.tableGetSliceSummaryTable.AdjustmentValueColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAmountNull() {
                return this.IsNull(this.tableGetSliceSummaryTable.AmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAmountNull() {
                this[this.tableGetSliceSummaryTable.AmountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDescriptionNull() {
                return this.IsNull(this.tableGetSliceSummaryTable.DescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDescriptionNull() {
                this[this.tableGetSliceSummaryTable.DescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsValueBitNull() {
                return this.IsNull(this.tableGetSliceSummaryTable.ValueBitColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetValueBitNull() {
                this[this.tableGetSliceSummaryTable.ValueBitColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsValueStringNull() {
                return this.IsNull(this.tableGetSliceSummaryTable.ValueStringColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetValueStringNull() {
                this[this.tableGetSliceSummaryTable.ValueStringColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRollBitNull() {
                return this.IsNull(this.tableGetSliceSummaryTable.RollBitColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRollBitNull() {
                this[this.tableGetSliceSummaryTable.RollBitColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRollStringNull() {
                return this.IsNull(this.tableGetSliceSummaryTable.RollStringColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRollStringNull() {
                this[this.tableGetSliceSummaryTable.RollStringColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTypeNull() {
                return this.IsNull(this.tableGetSliceSummaryTable.TypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTypeNull() {
                this[this.tableGetSliceSummaryTable.TypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFormNull() {
                return this.IsNull(this.tableGetSliceSummaryTable.FormColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFormNull() {
                this[this.tableGetSliceSummaryTable.FormColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsImageTypeNull() {
                return this.IsNull(this.tableGetSliceSummaryTable.ImageTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetImageTypeNull() {
                this[this.tableGetSliceSummaryTable.ImageTypeColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class GetParcelValidTableRow : global::System.Data.DataRow {
            
            private GetParcelValidTableDataTable tableGetParcelValidTable;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetParcelValidTableRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableGetParcelValidTable = ((GetParcelValidTableDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOpen {
                get {
                    try {
                        return ((bool)(this[this.tableGetParcelValidTable.IsOpenColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsOpen\' in table \'GetParcelValidTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetParcelValidTable.IsOpenColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsOpenNull() {
                return this.IsNull(this.tableGetParcelValidTable.IsOpenColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsOpenNull() {
                this[this.tableGetParcelValidTable.IsOpenColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class f35000_checkAppraisalUserTableRow : global::System.Data.DataRow {
            
            private f35000_checkAppraisalUserTableDataTable tablef35000_checkAppraisalUserTable;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal f35000_checkAppraisalUserTableRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablef35000_checkAppraisalUserTable = ((f35000_checkAppraisalUserTableDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name_Display {
                get {
                    try {
                        return ((string)(this[this.tablef35000_checkAppraisalUserTable.Name_DisplayColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Name_Display\' in table \'f35000 checkAppraisalUserTable\' is " +
                                "DBNull.", e);
                    }
                }
                set {
                    this[this.tablef35000_checkAppraisalUserTable.Name_DisplayColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PrimaryKeyID {
                get {
                    try {
                        return ((int)(this[this.tablef35000_checkAppraisalUserTable.PrimaryKeyIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PrimaryKeyID\' in table \'f35000 checkAppraisalUserTable\' is " +
                                "DBNull.", e);
                    }
                }
                set {
                    this[this.tablef35000_checkAppraisalUserTable.PrimaryKeyIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsName_DisplayNull() {
                return this.IsNull(this.tablef35000_checkAppraisalUserTable.Name_DisplayColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetName_DisplayNull() {
                this[this.tablef35000_checkAppraisalUserTable.Name_DisplayColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPrimaryKeyIDNull() {
                return this.IsNull(this.tablef35000_checkAppraisalUserTable.PrimaryKeyIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPrimaryKeyIDNull() {
                this[this.tablef35000_checkAppraisalUserTable.PrimaryKeyIDColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class f35000ObjectTotalRow : global::System.Data.DataRow {
            
            private f35000ObjectTotalDataTable tablef35000ObjectTotal;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal f35000ObjectTotalRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablef35000ObjectTotal = ((f35000ObjectTotalDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TotalObjectValue {
                get {
                    try {
                        return ((decimal)(this[this.tablef35000ObjectTotal.TotalObjectValueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalObjectValue\' in table \'f35000ObjectTotal\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablef35000ObjectTotal.TotalObjectValueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalObjectValueNull() {
                return this.IsNull(this.tablef35000ObjectTotal.TotalObjectValueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalObjectValueNull() {
                this[this.tablef35000ObjectTotal.TotalObjectValueColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class GetObjectSummaryTableRowChangeEvent : global::System.EventArgs {
            
            private GetObjectSummaryTableRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetObjectSummaryTableRowChangeEvent(GetObjectSummaryTableRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetObjectSummaryTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ListObjectTypesRowChangeEvent : global::System.EventArgs {
            
            private ListObjectTypesRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListObjectTypesRowChangeEvent(ListObjectTypesRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListObjectTypesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ListSliceTypesRowChangeEvent : global::System.EventArgs {
            
            private ListSliceTypesRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListSliceTypesRowChangeEvent(ListSliceTypesRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListSliceTypesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class GetSliceSummaryTableRowChangeEvent : global::System.EventArgs {
            
            private GetSliceSummaryTableRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetSliceSummaryTableRowChangeEvent(GetSliceSummaryTableRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetSliceSummaryTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class GetParcelValidTableRowChangeEvent : global::System.EventArgs {
            
            private GetParcelValidTableRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetParcelValidTableRowChangeEvent(GetParcelValidTableRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetParcelValidTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class f35000_checkAppraisalUserTableRowChangeEvent : global::System.EventArgs {
            
            private f35000_checkAppraisalUserTableRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public f35000_checkAppraisalUserTableRowChangeEvent(f35000_checkAppraisalUserTableRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public f35000_checkAppraisalUserTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class f35000ObjectTotalRowChangeEvent : global::System.EventArgs {
            
            private f35000ObjectTotalRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public f35000ObjectTotalRowChangeEvent(f35000ObjectTotalRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public f35000ObjectTotalRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591