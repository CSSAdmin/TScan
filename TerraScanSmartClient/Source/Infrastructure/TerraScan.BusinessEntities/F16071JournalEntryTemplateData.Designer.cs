//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4952
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace TerraScan.BusinessEntities {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("F16071JournalEntryTemplateData")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class F16071JournalEntryTemplateData : global::System.Data.DataSet {
        
        private f11071_GetHeaderJETempalteDataTable tablef11071_GetHeaderJETempalte;
        
        private f11071_GridJETempalteDataTable tablef11071_GridJETempalte;
        
        private f11024_TempToAccountTableDataTable tablef11024_TempToAccountTable;
        
        private f11024_TempFromAccountTableDataTable tablef11024_TempFromAccountTable;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public F16071JournalEntryTemplateData() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected F16071JournalEntryTemplateData(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["f11071_GetHeaderJETempalte"] != null)) {
                    base.Tables.Add(new f11071_GetHeaderJETempalteDataTable(ds.Tables["f11071_GetHeaderJETempalte"]));
                }
                if ((ds.Tables["f11071_GridJETempalte"] != null)) {
                    base.Tables.Add(new f11071_GridJETempalteDataTable(ds.Tables["f11071_GridJETempalte"]));
                }
                if ((ds.Tables["f11024_TempToAccountTable"] != null)) {
                    base.Tables.Add(new f11024_TempToAccountTableDataTable(ds.Tables["f11024_TempToAccountTable"]));
                }
                if ((ds.Tables["f11024_TempFromAccountTable"] != null)) {
                    base.Tables.Add(new f11024_TempFromAccountTableDataTable(ds.Tables["f11024_TempFromAccountTable"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public f11071_GetHeaderJETempalteDataTable f11071_GetHeaderJETempalte {
            get {
                return this.tablef11071_GetHeaderJETempalte;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public f11071_GridJETempalteDataTable f11071_GridJETempalte {
            get {
                return this.tablef11071_GridJETempalte;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public f11024_TempToAccountTableDataTable f11024_TempToAccountTable {
            get {
                return this.tablef11024_TempToAccountTable;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public f11024_TempFromAccountTableDataTable f11024_TempFromAccountTable {
            get {
                return this.tablef11024_TempFromAccountTable;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            F16071JournalEntryTemplateData cln = ((F16071JournalEntryTemplateData)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["f11071_GetHeaderJETempalte"] != null)) {
                    base.Tables.Add(new f11071_GetHeaderJETempalteDataTable(ds.Tables["f11071_GetHeaderJETempalte"]));
                }
                if ((ds.Tables["f11071_GridJETempalte"] != null)) {
                    base.Tables.Add(new f11071_GridJETempalteDataTable(ds.Tables["f11071_GridJETempalte"]));
                }
                if ((ds.Tables["f11024_TempToAccountTable"] != null)) {
                    base.Tables.Add(new f11024_TempToAccountTableDataTable(ds.Tables["f11024_TempToAccountTable"]));
                }
                if ((ds.Tables["f11024_TempFromAccountTable"] != null)) {
                    base.Tables.Add(new f11024_TempFromAccountTableDataTable(ds.Tables["f11024_TempFromAccountTable"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tablef11071_GetHeaderJETempalte = ((f11071_GetHeaderJETempalteDataTable)(base.Tables["f11071_GetHeaderJETempalte"]));
            if ((initTable == true)) {
                if ((this.tablef11071_GetHeaderJETempalte != null)) {
                    this.tablef11071_GetHeaderJETempalte.InitVars();
                }
            }
            this.tablef11071_GridJETempalte = ((f11071_GridJETempalteDataTable)(base.Tables["f11071_GridJETempalte"]));
            if ((initTable == true)) {
                if ((this.tablef11071_GridJETempalte != null)) {
                    this.tablef11071_GridJETempalte.InitVars();
                }
            }
            this.tablef11024_TempToAccountTable = ((f11024_TempToAccountTableDataTable)(base.Tables["f11024_TempToAccountTable"]));
            if ((initTable == true)) {
                if ((this.tablef11024_TempToAccountTable != null)) {
                    this.tablef11024_TempToAccountTable.InitVars();
                }
            }
            this.tablef11024_TempFromAccountTable = ((f11024_TempFromAccountTableDataTable)(base.Tables["f11024_TempFromAccountTable"]));
            if ((initTable == true)) {
                if ((this.tablef11024_TempFromAccountTable != null)) {
                    this.tablef11024_TempFromAccountTable.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "F16071JournalEntryTemplateData";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/F16071JournalEntryTemplateData.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tablef11071_GetHeaderJETempalte = new f11071_GetHeaderJETempalteDataTable();
            base.Tables.Add(this.tablef11071_GetHeaderJETempalte);
            this.tablef11071_GridJETempalte = new f11071_GridJETempalteDataTable();
            base.Tables.Add(this.tablef11071_GridJETempalte);
            this.tablef11024_TempToAccountTable = new f11024_TempToAccountTableDataTable();
            base.Tables.Add(this.tablef11024_TempToAccountTable);
            this.tablef11024_TempFromAccountTable = new f11024_TempFromAccountTableDataTable();
            base.Tables.Add(this.tablef11024_TempFromAccountTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializef11071_GetHeaderJETempalte() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializef11071_GridJETempalte() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializef11024_TempToAccountTable() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializef11024_TempFromAccountTable() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            F16071JournalEntryTemplateData ds = new F16071JournalEntryTemplateData();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void f11071_GetHeaderJETempalteRowChangeEventHandler(object sender, f11071_GetHeaderJETempalteRowChangeEvent e);
        
        public delegate void f11071_GridJETempalteRowChangeEventHandler(object sender, f11071_GridJETempalteRowChangeEvent e);
        
        public delegate void f11024_TempToAccountTableRowChangeEventHandler(object sender, f11024_TempToAccountTableRowChangeEvent e);
        
        public delegate void f11024_TempFromAccountTableRowChangeEventHandler(object sender, f11024_TempFromAccountTableRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class f11071_GetHeaderJETempalteDataTable : global::System.Data.TypedTableBase<f11071_GetHeaderJETempalteRow> {
            
            private global::System.Data.DataColumn columnRollyear;
            
            private global::System.Data.DataColumn columnTransferDescription;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public f11071_GetHeaderJETempalteDataTable() {
                this.TableName = "f11071_GetHeaderJETempalte";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal f11071_GetHeaderJETempalteDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected f11071_GetHeaderJETempalteDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RollyearColumn {
                get {
                    return this.columnRollyear;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TransferDescriptionColumn {
                get {
                    return this.columnTransferDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public f11071_GetHeaderJETempalteRow this[int index] {
                get {
                    return ((f11071_GetHeaderJETempalteRow)(this.Rows[index]));
                }
            }
            
            public event f11071_GetHeaderJETempalteRowChangeEventHandler f11071_GetHeaderJETempalteRowChanging;
            
            public event f11071_GetHeaderJETempalteRowChangeEventHandler f11071_GetHeaderJETempalteRowChanged;
            
            public event f11071_GetHeaderJETempalteRowChangeEventHandler f11071_GetHeaderJETempalteRowDeleting;
            
            public event f11071_GetHeaderJETempalteRowChangeEventHandler f11071_GetHeaderJETempalteRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Addf11071_GetHeaderJETempalteRow(f11071_GetHeaderJETempalteRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public f11071_GetHeaderJETempalteRow Addf11071_GetHeaderJETempalteRow(int Rollyear, string TransferDescription) {
                f11071_GetHeaderJETempalteRow rowf11071_GetHeaderJETempalteRow = ((f11071_GetHeaderJETempalteRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Rollyear,
                        TransferDescription};
                rowf11071_GetHeaderJETempalteRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowf11071_GetHeaderJETempalteRow);
                return rowf11071_GetHeaderJETempalteRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                f11071_GetHeaderJETempalteDataTable cln = ((f11071_GetHeaderJETempalteDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new f11071_GetHeaderJETempalteDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnRollyear = base.Columns["Rollyear"];
                this.columnTransferDescription = base.Columns["TransferDescription"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnRollyear = new global::System.Data.DataColumn("Rollyear", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRollyear);
                this.columnTransferDescription = new global::System.Data.DataColumn("TransferDescription", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTransferDescription);
                this.columnTransferDescription.MaxLength = 100;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public f11071_GetHeaderJETempalteRow Newf11071_GetHeaderJETempalteRow() {
                return ((f11071_GetHeaderJETempalteRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new f11071_GetHeaderJETempalteRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(f11071_GetHeaderJETempalteRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.f11071_GetHeaderJETempalteRowChanged != null)) {
                    this.f11071_GetHeaderJETempalteRowChanged(this, new f11071_GetHeaderJETempalteRowChangeEvent(((f11071_GetHeaderJETempalteRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.f11071_GetHeaderJETempalteRowChanging != null)) {
                    this.f11071_GetHeaderJETempalteRowChanging(this, new f11071_GetHeaderJETempalteRowChangeEvent(((f11071_GetHeaderJETempalteRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.f11071_GetHeaderJETempalteRowDeleted != null)) {
                    this.f11071_GetHeaderJETempalteRowDeleted(this, new f11071_GetHeaderJETempalteRowChangeEvent(((f11071_GetHeaderJETempalteRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.f11071_GetHeaderJETempalteRowDeleting != null)) {
                    this.f11071_GetHeaderJETempalteRowDeleting(this, new f11071_GetHeaderJETempalteRowChangeEvent(((f11071_GetHeaderJETempalteRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Removef11071_GetHeaderJETempalteRow(f11071_GetHeaderJETempalteRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F16071JournalEntryTemplateData ds = new F16071JournalEntryTemplateData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "f11071_GetHeaderJETempalteDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class f11071_GridJETempalteDataTable : global::System.Data.TypedTableBase<f11071_GridJETempalteRow> {
            
            private global::System.Data.DataColumn columnFromAccountID;
            
            private global::System.Data.DataColumn columnFromAccount;
            
            private global::System.Data.DataColumn columnToAccountID;
            
            private global::System.Data.DataColumn columnToAccount;
            
            private global::System.Data.DataColumn columnTransferAmount;
            
            private global::System.Data.DataColumn columnTemplateItemID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public f11071_GridJETempalteDataTable() {
                this.TableName = "f11071_GridJETempalte";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal f11071_GridJETempalteDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected f11071_GridJETempalteDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FromAccountIDColumn {
                get {
                    return this.columnFromAccountID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FromAccountColumn {
                get {
                    return this.columnFromAccount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ToAccountIDColumn {
                get {
                    return this.columnToAccountID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ToAccountColumn {
                get {
                    return this.columnToAccount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TransferAmountColumn {
                get {
                    return this.columnTransferAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TemplateItemIDColumn {
                get {
                    return this.columnTemplateItemID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public f11071_GridJETempalteRow this[int index] {
                get {
                    return ((f11071_GridJETempalteRow)(this.Rows[index]));
                }
            }
            
            public event f11071_GridJETempalteRowChangeEventHandler f11071_GridJETempalteRowChanging;
            
            public event f11071_GridJETempalteRowChangeEventHandler f11071_GridJETempalteRowChanged;
            
            public event f11071_GridJETempalteRowChangeEventHandler f11071_GridJETempalteRowDeleting;
            
            public event f11071_GridJETempalteRowChangeEventHandler f11071_GridJETempalteRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Addf11071_GridJETempalteRow(f11071_GridJETempalteRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public f11071_GridJETempalteRow Addf11071_GridJETempalteRow(int FromAccountID, string FromAccount, int ToAccountID, string ToAccount, decimal TransferAmount, int TemplateItemID) {
                f11071_GridJETempalteRow rowf11071_GridJETempalteRow = ((f11071_GridJETempalteRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        FromAccountID,
                        FromAccount,
                        ToAccountID,
                        ToAccount,
                        TransferAmount,
                        TemplateItemID};
                rowf11071_GridJETempalteRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowf11071_GridJETempalteRow);
                return rowf11071_GridJETempalteRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                f11071_GridJETempalteDataTable cln = ((f11071_GridJETempalteDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new f11071_GridJETempalteDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnFromAccountID = base.Columns["FromAccountID"];
                this.columnFromAccount = base.Columns["FromAccount"];
                this.columnToAccountID = base.Columns["ToAccountID"];
                this.columnToAccount = base.Columns["ToAccount"];
                this.columnTransferAmount = base.Columns["TransferAmount"];
                this.columnTemplateItemID = base.Columns["TemplateItemID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnFromAccountID = new global::System.Data.DataColumn("FromAccountID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFromAccountID);
                this.columnFromAccount = new global::System.Data.DataColumn("FromAccount", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFromAccount);
                this.columnToAccountID = new global::System.Data.DataColumn("ToAccountID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnToAccountID);
                this.columnToAccount = new global::System.Data.DataColumn("ToAccount", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnToAccount);
                this.columnTransferAmount = new global::System.Data.DataColumn("TransferAmount", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTransferAmount);
                this.columnTemplateItemID = new global::System.Data.DataColumn("TemplateItemID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTemplateItemID);
                this.columnFromAccount.MaxLength = 368;
                this.columnToAccount.MaxLength = 368;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public f11071_GridJETempalteRow Newf11071_GridJETempalteRow() {
                return ((f11071_GridJETempalteRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new f11071_GridJETempalteRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(f11071_GridJETempalteRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.f11071_GridJETempalteRowChanged != null)) {
                    this.f11071_GridJETempalteRowChanged(this, new f11071_GridJETempalteRowChangeEvent(((f11071_GridJETempalteRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.f11071_GridJETempalteRowChanging != null)) {
                    this.f11071_GridJETempalteRowChanging(this, new f11071_GridJETempalteRowChangeEvent(((f11071_GridJETempalteRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.f11071_GridJETempalteRowDeleted != null)) {
                    this.f11071_GridJETempalteRowDeleted(this, new f11071_GridJETempalteRowChangeEvent(((f11071_GridJETempalteRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.f11071_GridJETempalteRowDeleting != null)) {
                    this.f11071_GridJETempalteRowDeleting(this, new f11071_GridJETempalteRowChangeEvent(((f11071_GridJETempalteRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Removef11071_GridJETempalteRow(f11071_GridJETempalteRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F16071JournalEntryTemplateData ds = new F16071JournalEntryTemplateData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "f11071_GridJETempalteDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class f11024_TempToAccountTableDataTable : global::System.Data.TypedTableBase<f11024_TempToAccountTableRow> {
            
            private global::System.Data.DataColumn columnToAccountID;
            
            private global::System.Data.DataColumn columnToAccount;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public f11024_TempToAccountTableDataTable() {
                this.TableName = "f11024_TempToAccountTable";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal f11024_TempToAccountTableDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected f11024_TempToAccountTableDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ToAccountIDColumn {
                get {
                    return this.columnToAccountID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ToAccountColumn {
                get {
                    return this.columnToAccount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public f11024_TempToAccountTableRow this[int index] {
                get {
                    return ((f11024_TempToAccountTableRow)(this.Rows[index]));
                }
            }
            
            public event f11024_TempToAccountTableRowChangeEventHandler f11024_TempToAccountTableRowChanging;
            
            public event f11024_TempToAccountTableRowChangeEventHandler f11024_TempToAccountTableRowChanged;
            
            public event f11024_TempToAccountTableRowChangeEventHandler f11024_TempToAccountTableRowDeleting;
            
            public event f11024_TempToAccountTableRowChangeEventHandler f11024_TempToAccountTableRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Addf11024_TempToAccountTableRow(f11024_TempToAccountTableRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public f11024_TempToAccountTableRow Addf11024_TempToAccountTableRow(string ToAccountID, string ToAccount) {
                f11024_TempToAccountTableRow rowf11024_TempToAccountTableRow = ((f11024_TempToAccountTableRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ToAccountID,
                        ToAccount};
                rowf11024_TempToAccountTableRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowf11024_TempToAccountTableRow);
                return rowf11024_TempToAccountTableRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                f11024_TempToAccountTableDataTable cln = ((f11024_TempToAccountTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new f11024_TempToAccountTableDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnToAccountID = base.Columns["ToAccountID"];
                this.columnToAccount = base.Columns["ToAccount"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnToAccountID = new global::System.Data.DataColumn("ToAccountID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnToAccountID);
                this.columnToAccount = new global::System.Data.DataColumn("ToAccount", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnToAccount);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public f11024_TempToAccountTableRow Newf11024_TempToAccountTableRow() {
                return ((f11024_TempToAccountTableRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new f11024_TempToAccountTableRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(f11024_TempToAccountTableRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.f11024_TempToAccountTableRowChanged != null)) {
                    this.f11024_TempToAccountTableRowChanged(this, new f11024_TempToAccountTableRowChangeEvent(((f11024_TempToAccountTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.f11024_TempToAccountTableRowChanging != null)) {
                    this.f11024_TempToAccountTableRowChanging(this, new f11024_TempToAccountTableRowChangeEvent(((f11024_TempToAccountTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.f11024_TempToAccountTableRowDeleted != null)) {
                    this.f11024_TempToAccountTableRowDeleted(this, new f11024_TempToAccountTableRowChangeEvent(((f11024_TempToAccountTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.f11024_TempToAccountTableRowDeleting != null)) {
                    this.f11024_TempToAccountTableRowDeleting(this, new f11024_TempToAccountTableRowChangeEvent(((f11024_TempToAccountTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Removef11024_TempToAccountTableRow(f11024_TempToAccountTableRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F16071JournalEntryTemplateData ds = new F16071JournalEntryTemplateData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "f11024_TempToAccountTableDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class f11024_TempFromAccountTableDataTable : global::System.Data.TypedTableBase<f11024_TempFromAccountTableRow> {
            
            private global::System.Data.DataColumn columnFromAccountID;
            
            private global::System.Data.DataColumn columnFromAccount;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public f11024_TempFromAccountTableDataTable() {
                this.TableName = "f11024_TempFromAccountTable";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal f11024_TempFromAccountTableDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected f11024_TempFromAccountTableDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FromAccountIDColumn {
                get {
                    return this.columnFromAccountID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FromAccountColumn {
                get {
                    return this.columnFromAccount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public f11024_TempFromAccountTableRow this[int index] {
                get {
                    return ((f11024_TempFromAccountTableRow)(this.Rows[index]));
                }
            }
            
            public event f11024_TempFromAccountTableRowChangeEventHandler f11024_TempFromAccountTableRowChanging;
            
            public event f11024_TempFromAccountTableRowChangeEventHandler f11024_TempFromAccountTableRowChanged;
            
            public event f11024_TempFromAccountTableRowChangeEventHandler f11024_TempFromAccountTableRowDeleting;
            
            public event f11024_TempFromAccountTableRowChangeEventHandler f11024_TempFromAccountTableRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Addf11024_TempFromAccountTableRow(f11024_TempFromAccountTableRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public f11024_TempFromAccountTableRow Addf11024_TempFromAccountTableRow(string FromAccountID, string FromAccount) {
                f11024_TempFromAccountTableRow rowf11024_TempFromAccountTableRow = ((f11024_TempFromAccountTableRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        FromAccountID,
                        FromAccount};
                rowf11024_TempFromAccountTableRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowf11024_TempFromAccountTableRow);
                return rowf11024_TempFromAccountTableRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                f11024_TempFromAccountTableDataTable cln = ((f11024_TempFromAccountTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new f11024_TempFromAccountTableDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnFromAccountID = base.Columns["FromAccountID"];
                this.columnFromAccount = base.Columns["FromAccount"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnFromAccountID = new global::System.Data.DataColumn("FromAccountID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFromAccountID);
                this.columnFromAccount = new global::System.Data.DataColumn("FromAccount", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFromAccount);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public f11024_TempFromAccountTableRow Newf11024_TempFromAccountTableRow() {
                return ((f11024_TempFromAccountTableRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new f11024_TempFromAccountTableRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(f11024_TempFromAccountTableRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.f11024_TempFromAccountTableRowChanged != null)) {
                    this.f11024_TempFromAccountTableRowChanged(this, new f11024_TempFromAccountTableRowChangeEvent(((f11024_TempFromAccountTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.f11024_TempFromAccountTableRowChanging != null)) {
                    this.f11024_TempFromAccountTableRowChanging(this, new f11024_TempFromAccountTableRowChangeEvent(((f11024_TempFromAccountTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.f11024_TempFromAccountTableRowDeleted != null)) {
                    this.f11024_TempFromAccountTableRowDeleted(this, new f11024_TempFromAccountTableRowChangeEvent(((f11024_TempFromAccountTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.f11024_TempFromAccountTableRowDeleting != null)) {
                    this.f11024_TempFromAccountTableRowDeleting(this, new f11024_TempFromAccountTableRowChangeEvent(((f11024_TempFromAccountTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Removef11024_TempFromAccountTableRow(f11024_TempFromAccountTableRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F16071JournalEntryTemplateData ds = new F16071JournalEntryTemplateData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "f11024_TempFromAccountTableDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class f11071_GetHeaderJETempalteRow : global::System.Data.DataRow {
            
            private f11071_GetHeaderJETempalteDataTable tablef11071_GetHeaderJETempalte;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal f11071_GetHeaderJETempalteRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablef11071_GetHeaderJETempalte = ((f11071_GetHeaderJETempalteDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Rollyear {
                get {
                    try {
                        return ((int)(this[this.tablef11071_GetHeaderJETempalte.RollyearColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Rollyear\' in table \'f11071_GetHeaderJETempalte\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablef11071_GetHeaderJETempalte.RollyearColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TransferDescription {
                get {
                    try {
                        return ((string)(this[this.tablef11071_GetHeaderJETempalte.TransferDescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TransferDescription\' in table \'f11071_GetHeaderJETempalte\' " +
                                "is DBNull.", e);
                    }
                }
                set {
                    this[this.tablef11071_GetHeaderJETempalte.TransferDescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRollyearNull() {
                return this.IsNull(this.tablef11071_GetHeaderJETempalte.RollyearColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRollyearNull() {
                this[this.tablef11071_GetHeaderJETempalte.RollyearColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTransferDescriptionNull() {
                return this.IsNull(this.tablef11071_GetHeaderJETempalte.TransferDescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTransferDescriptionNull() {
                this[this.tablef11071_GetHeaderJETempalte.TransferDescriptionColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class f11071_GridJETempalteRow : global::System.Data.DataRow {
            
            private f11071_GridJETempalteDataTable tablef11071_GridJETempalte;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal f11071_GridJETempalteRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablef11071_GridJETempalte = ((f11071_GridJETempalteDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int FromAccountID {
                get {
                    try {
                        return ((int)(this[this.tablef11071_GridJETempalte.FromAccountIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FromAccountID\' in table \'f11071_GridJETempalte\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablef11071_GridJETempalte.FromAccountIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FromAccount {
                get {
                    try {
                        return ((string)(this[this.tablef11071_GridJETempalte.FromAccountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FromAccount\' in table \'f11071_GridJETempalte\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablef11071_GridJETempalte.FromAccountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ToAccountID {
                get {
                    try {
                        return ((int)(this[this.tablef11071_GridJETempalte.ToAccountIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ToAccountID\' in table \'f11071_GridJETempalte\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablef11071_GridJETempalte.ToAccountIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ToAccount {
                get {
                    try {
                        return ((string)(this[this.tablef11071_GridJETempalte.ToAccountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ToAccount\' in table \'f11071_GridJETempalte\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablef11071_GridJETempalte.ToAccountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TransferAmount {
                get {
                    try {
                        return ((decimal)(this[this.tablef11071_GridJETempalte.TransferAmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TransferAmount\' in table \'f11071_GridJETempalte\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tablef11071_GridJETempalte.TransferAmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TemplateItemID {
                get {
                    try {
                        return ((int)(this[this.tablef11071_GridJETempalte.TemplateItemIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TemplateItemID\' in table \'f11071_GridJETempalte\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tablef11071_GridJETempalte.TemplateItemIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFromAccountIDNull() {
                return this.IsNull(this.tablef11071_GridJETempalte.FromAccountIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFromAccountIDNull() {
                this[this.tablef11071_GridJETempalte.FromAccountIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFromAccountNull() {
                return this.IsNull(this.tablef11071_GridJETempalte.FromAccountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFromAccountNull() {
                this[this.tablef11071_GridJETempalte.FromAccountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsToAccountIDNull() {
                return this.IsNull(this.tablef11071_GridJETempalte.ToAccountIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetToAccountIDNull() {
                this[this.tablef11071_GridJETempalte.ToAccountIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsToAccountNull() {
                return this.IsNull(this.tablef11071_GridJETempalte.ToAccountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetToAccountNull() {
                this[this.tablef11071_GridJETempalte.ToAccountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTransferAmountNull() {
                return this.IsNull(this.tablef11071_GridJETempalte.TransferAmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTransferAmountNull() {
                this[this.tablef11071_GridJETempalte.TransferAmountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTemplateItemIDNull() {
                return this.IsNull(this.tablef11071_GridJETempalte.TemplateItemIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTemplateItemIDNull() {
                this[this.tablef11071_GridJETempalte.TemplateItemIDColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class f11024_TempToAccountTableRow : global::System.Data.DataRow {
            
            private f11024_TempToAccountTableDataTable tablef11024_TempToAccountTable;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal f11024_TempToAccountTableRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablef11024_TempToAccountTable = ((f11024_TempToAccountTableDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ToAccountID {
                get {
                    try {
                        return ((string)(this[this.tablef11024_TempToAccountTable.ToAccountIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ToAccountID\' in table \'f11024_TempToAccountTable\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tablef11024_TempToAccountTable.ToAccountIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ToAccount {
                get {
                    try {
                        return ((string)(this[this.tablef11024_TempToAccountTable.ToAccountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ToAccount\' in table \'f11024_TempToAccountTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablef11024_TempToAccountTable.ToAccountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsToAccountIDNull() {
                return this.IsNull(this.tablef11024_TempToAccountTable.ToAccountIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetToAccountIDNull() {
                this[this.tablef11024_TempToAccountTable.ToAccountIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsToAccountNull() {
                return this.IsNull(this.tablef11024_TempToAccountTable.ToAccountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetToAccountNull() {
                this[this.tablef11024_TempToAccountTable.ToAccountColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class f11024_TempFromAccountTableRow : global::System.Data.DataRow {
            
            private f11024_TempFromAccountTableDataTable tablef11024_TempFromAccountTable;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal f11024_TempFromAccountTableRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablef11024_TempFromAccountTable = ((f11024_TempFromAccountTableDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FromAccountID {
                get {
                    try {
                        return ((string)(this[this.tablef11024_TempFromAccountTable.FromAccountIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FromAccountID\' in table \'f11024_TempFromAccountTable\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tablef11024_TempFromAccountTable.FromAccountIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FromAccount {
                get {
                    try {
                        return ((string)(this[this.tablef11024_TempFromAccountTable.FromAccountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FromAccount\' in table \'f11024_TempFromAccountTable\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tablef11024_TempFromAccountTable.FromAccountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFromAccountIDNull() {
                return this.IsNull(this.tablef11024_TempFromAccountTable.FromAccountIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFromAccountIDNull() {
                this[this.tablef11024_TempFromAccountTable.FromAccountIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFromAccountNull() {
                return this.IsNull(this.tablef11024_TempFromAccountTable.FromAccountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFromAccountNull() {
                this[this.tablef11024_TempFromAccountTable.FromAccountColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class f11071_GetHeaderJETempalteRowChangeEvent : global::System.EventArgs {
            
            private f11071_GetHeaderJETempalteRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public f11071_GetHeaderJETempalteRowChangeEvent(f11071_GetHeaderJETempalteRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public f11071_GetHeaderJETempalteRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class f11071_GridJETempalteRowChangeEvent : global::System.EventArgs {
            
            private f11071_GridJETempalteRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public f11071_GridJETempalteRowChangeEvent(f11071_GridJETempalteRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public f11071_GridJETempalteRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class f11024_TempToAccountTableRowChangeEvent : global::System.EventArgs {
            
            private f11024_TempToAccountTableRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public f11024_TempToAccountTableRowChangeEvent(f11024_TempToAccountTableRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public f11024_TempToAccountTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class f11024_TempFromAccountTableRowChangeEvent : global::System.EventArgs {
            
            private f11024_TempFromAccountTableRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public f11024_TempFromAccountTableRowChangeEvent(f11024_TempFromAccountTableRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public f11024_TempFromAccountTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591