// -------------------------------------------------------------------------------------------
// <copyright file="WSHelper.cs" company="Congruent">
//     Copyright (c) Congruent Infotech.  All rights reserved.
// </copyright>
// <summary>This files provides the various methods for data component accessing</summary>
// Release history
// VERSION	DESCRIPTION
// -------------------------------------------------------------------------------------------
[assembly: System.CLSCompliant(false)]
namespace TerraScan.Helper
{
    using System;
    using System.Collections.Generic;
    using System.Text;
    using System.Data;
    using System.Collections;
    using System.Diagnostics;
    using System.Configuration;
    using System.Xml;
    using System.IO;
    using System.Reflection;
    using System.ServiceModel;
    using TerraScan.ReportService2008;
    using BusinessEntities;
    using WCFService;
    using DalHelper;

    /// <summary>
    /// DataCompHelper is a wrapper to access WebService.
    /// </summary>
    public static class WSHelper
    {
        #region Static Constructor

        /// <summary>
        /// Used to store current User's in Online or field status
        /// </summary>
        private static bool isOnLine = true;


        /// <summary>
        /// Added by Biju on 15/oct/2009
        /// Used to store the execution info after loading the report using report printer service.
        /// </summary>
        private static ExecutionInfo executionInformation = null;

        /// <summary>
        /// Instance variable is used to store the terrascan service.
        /// </summary>
        public static SmartClientServiceClient terraScanService;

        /// <summary>
        /// Instance variable to hold the print report service.
        /// </summary>
        private static TerraScan.ReportService2008.ReportExecutionService printReportService;

        /// <summary>
        /// Instance variable to hold the terrascan reet service.
        /// </summary>
        private static TerraScan.ReetWebService.Service terraScanReetService;

        /// <summary>
        /// Initializes the <see cref="WSHelper"/> class.
        /// </summary>
        static WSHelper()
        {
            try
            {
                terraScanService = new SmartClientServiceClient();

            }
            catch (Exception)
            {
            }

            printReportService = new global::TerraScan.Helper.TerraScan.ReportService2008.ReportExecutionService();

            if (!String.IsNullOrEmpty(ConfigurationManager.AppSettings["ReportServiceAsmx"]))
            {
                printReportService.Url = ConfigurationManager.AppSettings["ReportServiceAsmx"];
            }
        }

        #endregion

        #region property

        /// <summary>
        /// Gets or sets a value indicating whether this instance is on line mode.
        /// </summary>
        /// <value>
        ///	<c>true</c> if this instance is on line mode; otherwise, <c>false</c>.
        /// </value>
        public static bool IsOnLineMode
        {
            get
            {
                return isOnLine;
            }
            set
            {
                isOnLine = value;
            }
        }
        /// <summary>
        /// Added by Biju on 15/oct/2009
        /// Used to set the report execution info after loading the report. 
        /// This will be used in Report.cs
        /// </summary>
        public static ExecutionInfo ExecInfo
        {
            get
            {
                return executionInformation;
            }
        }
        #endregion property

        /// <summary>
        /// Metod for refresh report url
        /// </summary>
        public static void RefreshReportSettings()
        {
            printReportService = new global::TerraScan.Helper.TerraScan.ReportService2008.ReportExecutionService();

            if (!String.IsNullOrEmpty(ConfigurationManager.AppSettings["ReportServiceAsmx"]))
            {
                printReportService.Url = ConfigurationManager.AppSettings["ReportServiceAsmx"];
            }

        }

        #region Receipt Engine Usercontrols

        #region List Receipts History Details

        /// <summary>
        /// Lists the history information of the statement.
        /// </summary>
        /// <param name="statementId"> The statement id of the statement's history to be fetched.</param>
        /// <returns> The typed dataset containing the history information of the statementid.</returns>
        public static ReceiptEngineData ListHistoryGrid(int statementId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string listHistoryGridValue;
                ReceiptEngineData receiptEngineData = new ReceiptEngineData();
                listHistoryGridValue = terraScanService.ListHistoryGrid(statementId);
                receiptEngineData.ReadXml(Utilities.SharedFunctions.XmlParser(listHistoryGridValue));
                return receiptEngineData;
            }
            else
            {
                ReceiptEngineData receiptEngineData = new ReceiptEngineData();
                receiptEngineData = Helper.ListHistoryGrid(statementId);
                return receiptEngineData;
            }
        }

        #endregion

        #region Get Receipts Details

        /// <summary>
        /// Get a cecipt detials.
        /// </summary>
        /// <param name="receiptId"> The reciept id of the reciept details to be fetched.</param>
        /// <returns> The typed dataset containing the details of the reciept.</returns>
        public static ReceiptEngineData GetReceiptDetails(int receiptId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string getReceiptDetailsValue;
                ReceiptEngineData receiptEngineData = new ReceiptEngineData();
                getReceiptDetailsValue = terraScanService.GetReceiptDetails(receiptId);
                receiptEngineData.ReadXml(Utilities.SharedFunctions.XmlParser(getReceiptDetailsValue));
                return receiptEngineData;
            }
            else
            {
                ReceiptEngineData receiptEngineData = new ReceiptEngineData();
                receiptEngineData = Helper.GetReceiptDetails(receiptId);
                return receiptEngineData;
            }
        }

        /// <summary>
        /// Test for reciept validity
        /// </summary>
        /// <param name="statementId">The statement id.</param>
        /// <param name="receiptDate">The transaction date of the reciept.</param>
        /// <returns>The string containing the recipiet's validity information.</returns>
        public static string GetValidReceiptTest(int statementId, DateTime receiptDate)
        {
            if (WSHelper.IsOnLineMode)
            {
                return (string)terraScanService.GetValidReceiptTest(statementId, receiptDate);
            }
            else
            {
                return (string)Helper.GetValidReceiptTest(statementId, receiptDate);
            }
        }

        #endregion

        #region List Tender Type

        /// <summary>
        /// Lists the tender type.
        /// </summary>
        /// <param name="allowOverUnder">if set to <c>true</c> [allow over under].</param>
        /// <returns>
        /// The typed dataset containing the types of tender.
        /// </returns>
        public static ReceiptEngineData ListTenderType(bool allowOverUnder)
        {
            if (WSHelper.IsOnLineMode)
            {
                string listTenderTypeValue;
                ReceiptEngineData receiptEngineData = new ReceiptEngineData();
                listTenderTypeValue = terraScanService.ListTenderType(allowOverUnder);
                receiptEngineData.ReadXml(Utilities.SharedFunctions.XmlParser(listTenderTypeValue));
                return receiptEngineData;
            }
            else
            {
                return Helper.ListTenderType(allowOverUnder);
            }
        }

        #endregion

        #region Tax Calculation

        /// <summary>
        /// Gets the minimum tax due amount
        /// </summary>
        /// <param name="statmentId"> The statement id of the statement's minimum tax due amount to be fetched.</param>
        /// <param name="interestDate"> The interest date of the reciept.</param>
        /// <returns> The decimal containing minimum tax amount due.</returns>
        public static decimal GetMinTaxDue(int statmentId, string interestDate)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.GetMinTaxDue(statmentId, interestDate);
            }
            else
            {
                return Helper.GetMinTaxDue(statmentId, interestDate);
            }
        }

        /// <summary>
        /// Get the interest amoount.
        /// </summary>
        /// <param name="statmentId">The statement id for which interest amount to be fetched.</param>
        /// <param name="interestDate">The interest date of the reciept.</param>
        /// <param name="taxDueAmount">The tax due amount.</param>
        /// <returns>
        /// The decimal containing the interest information.
        /// </returns>
        public static decimal GetInterestAmount(int statmentId, string interestDate, decimal taxDueAmount)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.GetInterestAmount(statmentId, interestDate, taxDueAmount);
            }
            else
            {
                return Helper.GetInterestAmount(statmentId, interestDate, taxDueAmount);
            }
        }

        #endregion

        #region SaveReceipt

        /// <summary>
        /// Saves the receipt.
        /// </summary>
        /// <param name="receiptItems">The receipt items.</param>
        /// <param name="paymentItems">The payment items.</param>
        /// <param name="userId">The user id.</param>
        /// <returns>The receipt engine dataset.</returns>
        public static ReceiptEngineData SaveReceipt(string receiptItems, string paymentItems, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string saveReceiptValue;
                ReceiptEngineData receiptEngineData = new ReceiptEngineData();
                saveReceiptValue = terraScanService.SaveReceipt(receiptItems, paymentItems, userId);
                receiptEngineData.ReadXml(Utilities.SharedFunctions.XmlParser(saveReceiptValue));
                return receiptEngineData;
            }
            else
            {
                return Helper.SaveReceipt(receiptItems, paymentItems, userId);
            }
        }

        #endregion

        #endregion

        #region PayeeDetails


        /// <summary>
        /// Get Payee detail based of payeeId
        /// </summary>
        /// <param name="payeeId">The payee id.</param>
        /// <returns>The typed dataset containing the Payee details.</returns>
        public static PaymentEngineData F1019_GetPayeeDetails(int PayeeID)
        {
            if (WSHelper.IsOnLineMode)
            {
                string getPayeeValue;
                PaymentEngineData OwnerDetailDataSet = new PaymentEngineData();
                getPayeeValue = terraScanService.F1019_GetPayeeDetails(PayeeID);
                OwnerDetailDataSet.ReadXml(Utilities.SharedFunctions.XmlParser(getPayeeValue));
                return OwnerDetailDataSet;
            }
            else
            {
                return Helper.F1019_GetPayeeDetails(PayeeID);
            }
        }



        #endregion


        #region Payment Engine User Control

        #region GetPayment

        /// <summary>
        /// Get Payment detail based of ppaymentId
        /// </summary>
        /// <param name="ppaymentId">The ppayment id.</param>
        /// <returns>The typed dataset containing the Payments.</returns>
        public static PaymentEngineData GetPayment(int ppaymentId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string getPaymentValue;
                PaymentEngineData paymentEngineData = new PaymentEngineData();
                getPaymentValue = terraScanService.GetPayment(ppaymentId);
                paymentEngineData.ReadXml(Utilities.SharedFunctions.XmlParser(getPaymentValue));
                return paymentEngineData;
            }
            else
            {
                return Helper.GetPayment(ppaymentId);
            }
        }

        /// <summary>
        /// Get Payment detail based of  multiple ppaymentId
        /// </summary>
        /// <param name="ppaymentId">The ppayment id.</param>
        /// <returns>The typed dataset containing the Payments.</returns>
        public static PaymentEngineData GetMultiplePayment(string ppaymentId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string getPaymentValue;
                PaymentEngineData paymentEngineData = new PaymentEngineData();
                getPaymentValue = terraScanService.GetMultiplePayment(ppaymentId);
                paymentEngineData.ReadXml(Utilities.SharedFunctions.XmlParser(getPaymentValue));
                return paymentEngineData;
            }
            else
            {
                return Helper.GetMultiplePayment(ppaymentId);
            }
        }
        #endregion GetPayment

        #region Save Payment

        /// <summary>
        /// Saves the payment.
        /// </summary>
        /// <param name="ppaymentId">The ppayment id.</param>
        /// <param name="paymentItems">The payment items.</param>
        /// <param name="userId">The user id.</param>
        /// <param name="ownerId">The ownerId id.</param>
        /// <returns>Return PPayment ID</returns>
        public static int SavePayment(int ppaymentId, string paymentItems, int userId, int ownerId)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.SavePayment(ppaymentId, paymentItems, userId, ownerId);
            }
            else
            {
                return Helper.SavePayment(ppaymentId, paymentItems, userId, ownerId);
            }
        }

        #endregion Save Payment

        #region Get Tender Type Configuration

        /// <summary>
        /// Gets the payment.
        /// </summary>
        /// <returns>Tender type configuartion information</returns>
        public static PaymentEngineData GetTenderTypeConfiguration()
        {
            if (WSHelper.IsOnLineMode)
            {
                string getTenderTypeConfiguration;
                PaymentEngineData paymentEngineData = new PaymentEngineData();
                getTenderTypeConfiguration = terraScanService.GetTenderTypeConfiguration();
                paymentEngineData.ReadXml(Utilities.SharedFunctions.XmlParser(getTenderTypeConfiguration));
                return paymentEngineData;
            }
            else
            {
                return Helper.GetTenderTypeConfiguration();
            }
        }

        #endregion

        #endregion Payment Engine

        #region Attachments

        /*/// <summary>
        /// Attachment Images
        /// </summary>
        /// <param name="attachmentDetails"></param>
        /// public static void AttachmentImages(string attachmentDetails)
        /// {
        ///   TerraScan.WebService.TerraScanService terraScanService = new global::TerraScan.Helper.TerraScan.WebService.TerraScanService();
        ///   terraScanService.AttachmentImages(attachmentDetails);
        /// }*/

        /// <summary>
        /// Gets the attachment count.
        /// </summary>
        /// <param name="formId">The form id.</param>
        /// <param name="receiptId">The receipt id.</param>
        /// <param name="userId">The user id.</param>
        /// <returns>The count of attachments.</returns>
        public static int GetAttachmentCount(int formId, int receiptId, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.GetAttachmentCount(formId, receiptId, userId);
            }
            else
            {
                return Helper.GetAttachmentCount(formId, receiptId, userId);
            }
        }

        /// <summary>
        /// Gets the attachment items.
        /// </summary>
        /// <param name="formId">The form id.</param>
        /// <param name="keyId">The key id.</param>
        /// <param name="userId">The user id.</param>
        /// <returns>The typed dataset containing the attachment items.</returns>
        public static AttachmentsData GetAttachmentItems(int formId, int keyId, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string getAttachmentItemsValue;
                AttachmentsData attachmentsData = new AttachmentsData();
                getAttachmentItemsValue = terraScanService.GetAttachmentItems(formId, keyId, userId);
                attachmentsData.ReadXml(Utilities.SharedFunctions.XmlParser(getAttachmentItemsValue));
                return attachmentsData;
            }
            else
            {
                return Helper.GetAttachmentItems(formId, keyId, userId);
            }
        }

        /// <summary>
        /// Get the attachment function name.
        /// </summary>
        /// <param name="formId"> The form id  of the form being used.</param>
        /// <returns> The typed dataset containing the attachment function name.</returns>
        public static AttachmentsData GetAttachementFunctionName(int formId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string getAttachementFunctionNameValue;
                AttachmentsData attachmentsData = new AttachmentsData();
                getAttachementFunctionNameValue = terraScanService.GetAttachementFunctionName(formId);
                attachmentsData.ReadXml(Utilities.SharedFunctions.XmlParser(getAttachementFunctionNameValue));
                return attachmentsData;
            }
            else
            {
                return Helper.GetAttachementFunctionName(formId);
            }
        }

        /// <summary>
        /// Saves the attachments.
        /// </summary>
        /// <param name="fileId">The file id.</param>
        /// <param name="extension">The extension.</param>
        /// <param name="formId">The form id.</param>
        /// <param name="keyId">The key id.</param>
        /// <param name="fileTypeId">The file type id.</param>
        /// <param name="source">The source.</param>
        /// <param name="primary">The primary.</param>
        /// <param name="description">The description.</param>
        /// <param name="eventDate">The event date.</param>
        /// <param name="userId">The user id.</param>
        /// <param name="publicValue">The public value.</param>
        /// <param name="isroll">The isroll.</param>
        /// <param name="linktype">The linktype.</param>
        /// <param name="aurl">The aurl.</param>
        /// <param name="pfileid">The pfileid.</param>
        /// <param name="sourceConfig">The source config.</param>
        /// <returns>File ID</returns>
        public static AttachmentsData SaveAttachments(int? fileId, string extension, int formId, int keyId, int fileTypeId, string source, int primary, string description, string eventDate, int userId, int publicValue, int isroll, int linktype, string aurl, int pfileid, string sourceConfig)
        {
            if (WSHelper.IsOnLineMode)
            {
                string getAttachementFileDetails;
                AttachmentsData attachmentsData = new AttachmentsData();
                getAttachementFileDetails = terraScanService.SaveAttachments(fileId, extension, formId, keyId, fileTypeId, source, primary, description, eventDate, userId, publicValue, isroll, linktype, aurl, pfileid, sourceConfig);
                attachmentsData.ReadXml(Utilities.SharedFunctions.XmlParser(getAttachementFileDetails));
                return attachmentsData;
            }
            else
            {
                return Helper.SaveAttachments(fileId, extension, formId, keyId, fileTypeId, source, primary, description, eventDate, userId, publicValue, isroll, linktype, aurl, pfileid, sourceConfig);
            }
        }

        /// <summary>
        /// Deletes the attachments.
        /// </summary>
        /// <param name="fileId">The file id.</param>
        /// <param name="userId">The user id.</param>
        public static void DeleteAttachments(int fileId, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                terraScanService.DeleteAttachments(fileId, userId);
            }
            else
            {
                Helper.DeleteAttachments(fileId, userId);
            }
        }

        /// <summary>
        /// GetProgramId
        /// </summary>
        /// <param name="fileTypeId"> The integer name of the file type.</param>
        /// <returns> The typed dataset containing the attachment file type.</returns>
        public static AttachmentsData GetProgramId(int fileTypeId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string getProgramIdValue;
                AttachmentsData attachmentsData = new AttachmentsData();
                getProgramIdValue = terraScanService.GetProgramId(fileTypeId);
                attachmentsData.ReadXml(Utilities.SharedFunctions.XmlParser(getProgramIdValue));
                return attachmentsData;
            }
            else
            {
                return Helper.GetProgramId(fileTypeId);
            }
        }

        /// <summary>
        /// Gets the files path
        /// </summary>
        /// <param name="source"> The source path of the file.</param>
        /// <param name="formId"> The form id  of the form being used.</param>
        /// <param name="keyId"> Reciept or statement information in xml format.</param>
        /// <param name="extension"> The file extension.</param>
        /// <param name="userId">userId</param>
        /// <returns> The typed dataset containing the path of the file.</returns>
        public static AttachmentsData GetFilePath(string source, int formId, int keyId, string extension, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string getFilePathValue;
                AttachmentsData attachmentsData = new AttachmentsData();
                getFilePathValue = terraScanService.GetFilePath(source, formId, keyId, extension, userId);
                attachmentsData.ReadXml(Utilities.SharedFunctions.XmlParser(getFilePathValue));
                return attachmentsData;
            }
            else
            {
                return Helper.GetFilePath(source, formId, keyId, extension, userId);
            }
        }

        /// <summary>
        /// F9005_s the get original file path.
        /// </summary>
        /// <param name="fileId">The file id.</param>
        /// <param name="userId">The user id.</param>
        /// <returns>The original file path.</returns>
        public static string F9005_GetOriginalFilePath(int fileId, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F9005_GetOriginalFilePath(fileId, userId);
            }
            else
            {
                return Helper.F9005_GetOriginalFilePath(fileId, userId);
            }
        }

        /// <summary>
        /// Create Thumbnails
        /// </summary>
        /// <param name="fileId">The file id.</param>
        /// <param name="userId">The userId.</param>
        public static void GenerateThumbnail(int? fileId, int userId, string fileIdXml)
        {
            if (WSHelper.IsOnLineMode)
            {
                terraScanService.GenerateThumbnail(fileId, userId, fileIdXml);
            }
            else
            {
                Helper.GenerateThumbnail(fileId, userId, fileIdXml);
            }
        }

        #endregion

        #region  Comments

        /// <summary>
        /// Gets the comments count.
        /// </summary>
        /// <param name="formId">The form id.</param>
        /// <param name="keyId">The key id.</param>
        /// <param name="userId">The user id.</param>
        /// <returns>The typed dataset having comments count</returns>
        public static CommentsData GetCommentsCount(int formId, int keyId, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string getCommentsCountvalue;
                CommentsData commentsData = new CommentsData();
                getCommentsCountvalue = terraScanService.GetCommentsCount(formId, keyId, userId);
                commentsData.ReadXml(Utilities.SharedFunctions.XmlParser(getCommentsCountvalue));
                return commentsData;
            }
            else
            {
                return Helper.GetCommentsCount(formId, keyId, userId);
            }
        }

        /// <summary>
        /// Gets the comments based on the keyid, formid.
        /// </summary>
        /// <param name="keyId">The key id.</param>
        /// <param name="formId">The form id.</param>
        /// <returns>The dataset containing the comment and priority.</returns>
        public static CommentsData F9075_GetComment(int keyId, int formId)
        {
            if (WSHelper.IsOnLineMode)
            {
                CommentsData commentsData = new CommentsData();
                string getComments = terraScanService.F9075_GetComment(keyId, formId);
                commentsData.ReadXml(Utilities.SharedFunctions.XmlParser(getComments));
                return commentsData;
            }
            else
            {
                return Helper.F9075_GetComment(keyId, formId);
            }
        }

        /// <summary>
        /// Gets the comments based on the keyid, formid and userid.
        /// </summary>
        /// <param name="keyId"> Reciept or statement information in xml format.</param>
        /// <param name="formId"> The form id  of the form being used.</param>
        /// <param name="userId"> The user id of the user logged in.</param>
        /// <returns> The typed dataset containing the comments.</returns>
        public static CommentsData GetComments(int keyId, int formId, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string getCommentsValue;
                CommentsData commentsData = new CommentsData();
                getCommentsValue = terraScanService.GetComments(keyId, formId, userId);
                commentsData.ReadXml(Utilities.SharedFunctions.XmlParser(getCommentsValue));
                return commentsData;
            }
            else
            {
                return Helper.GetComments(keyId, formId, userId);
            }
        }

        /// <summary>
        /// Saves the comments.
        /// </summary>
        /// <param name="commentId">The comment id.</param>
        /// <param name="formId">The form id.</param>
        /// <param name="keyId">The key id.</param>
        /// <param name="commentDate">The comment date.</param>
        /// <param name="userId">The user id.</param>
        /// <param name="comments">The comments.</param>
        /// <param name="printOnReceipt">The print on receipt.</param>
        /// <param name="publicComment">The public comment.</param>
        /// <param name="ispriority">The is priority.</param>
        /// <param name="isroll">roll</param>
        /// <param name="commentPriorityId">commentPriorityId</param>
        public static void SaveComments(int commentId, int formId, int keyId, DateTime commentDate, int userId, string comments, int printOnReceipt, int publicComment, int ispriority, int isroll, int commentPriorityId)
        {
            if (WSHelper.IsOnLineMode)
            {
                terraScanService.SaveComments(commentId, formId, keyId, commentDate, userId, comments, printOnReceipt, publicComment, ispriority, isroll, commentPriorityId);
            }
            else
            {
                Helper.SaveComments(commentId, formId, keyId, commentDate, userId, comments, printOnReceipt, publicComment, ispriority, isroll, commentPriorityId);
            }
        }

        /// <summary>
        /// Delete the comment based on the commentid, formid and keyid.
        /// </summary>
        /// <param name="keyId"> Reciept or statement information in xml format.</param>
        /// <param name="formId"> The form id  of the form being used.</param>
        /// <param name="commentId"> The commentid of the comment to be deletd.</param>
        /// <param name="userId">UserID</param>
        public static void DeleteComments(int keyId, int formId, int commentId, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                terraScanService.DeleteComments(keyId, formId, commentId, userId);
            }
            else
            {
                Helper.DeleteComments(keyId, formId, commentId, userId);
            }
        }

        /// <summary>
        /// F27080_GetExemptionError
        /// </summary>
        /// <param name="exemptionId">exemptionId</param>
        ///  /// <param name="exemptionCode">exemptionCode</param>
        /// <returns>dataset</returns>
        public static string F27080_GetExemptionError(int exemptionId, string exemptionCode)
        {
            if (WSHelper.IsOnLineMode)
            {
                string Message;
                Message = terraScanService.F27080_GetExemptionError(exemptionId, exemptionCode);
                return Message;
            }
            else
            {
                return Helper.F27080_GetExemptionError(exemptionId, exemptionCode);
            }
        }


        /// <summary>
        /// F27080_DeleteExemption
        /// </summary>
        /// <param name="exemptionId">exemptionId</param>
        /// <param name="userId">userId</param>
        ///  /// <param name="exemptionCode">exemptionCode</param>
        /// <returns>NULL</returns>
        public static void F27080_DeleteExemption(int userId, int exemptionId, string exemptionCode)
        {
            if (WSHelper.IsOnLineMode)
            {
                terraScanService.F27080_DeleteExemption(userId, exemptionId, exemptionCode);
            }
            else
            {
                Helper.F27080_DeleteExemption(userId, exemptionId, exemptionCode);
            }
        }
     
        /// <summary>
        /// Gets the comments based on the keyid, formid and userid.
        /// </summary>
        /// <param name="configName">Name of the config.</param>
        /// <returns>The typed dataset containing the comments.</returns>
        public static CommentsData GetConfigDetails(string configName)
        {
            if (WSHelper.IsOnLineMode)
            {
                string getConfigDetailsValues;
                CommentsData commentsData = new CommentsData();
                getConfigDetailsValues = terraScanService.GetConfigDetails(configName);
                commentsData.ReadXml(Utilities.SharedFunctions.XmlParser(getConfigDetailsValues));
                return commentsData;
            }
            else
            {
                return Helper.GetConfigDetails(configName);
            }
        }

        /// <summary>
        /// For Testing Purpose added this method. later stage it should be removed.
        /// </summary>
        /// <param name="msversionId">The msversion id.</param>
        /// <returns>Connection string.</returns>
        public static CommonData GetConnectionString(int msversionId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string getconnectionstring;
                CommonData commonData = new CommonData();
                getconnectionstring = terraScanService.GetConnectionString(msversionId);
                commonData.ReadXml(Utilities.SharedFunctions.XmlParser(getconnectionstring));
                return commonData;
            }
            else
            {
                return Helper.GetConnectionString(msversionId);
            }
        }

        #endregion

        #region Real Estate
        #region Get Real Estate Statement Count

        /// <summary>
        /// Gets the real estate statementcount
        /// </summary>
        /// <returns> The count of statements.</returns>
        public static int GetRealEstateStatementCount()
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.GetRealEstateStatementCount();
            }
            else
            {
                return Helper.GetRealEstateStatementCount();
            }
        }
        #endregion

        #region Get Real Estate Statement Ids

        /// <summary>
        /// Gets the real estate statement Id's
        /// </summary>
        /// <param name="sortField"> The orderbycolumn name.</param>
        /// <param name="orderBy"> The orderby direction.</param>
        /// <returns> The Typed dataset containing the list of real estate statementids.</returns>
        public static RealEstateData GetRealEstateStatementIds(string sortField, string orderBy)
        {
            if (WSHelper.IsOnLineMode)
            {
                string getRealEstateStatementIds;
                RealEstateData realEstateData = new RealEstateData();
                getRealEstateStatementIds = terraScanService.GetRealEstateStatementIds(sortField, orderBy);
                realEstateData.ReadXml(Utilities.SharedFunctions.XmlParser(getRealEstateStatementIds));
                return realEstateData;
            }
            else
            {
                return Helper.GetRealEstateStatementIds(sortField, orderBy);
            }
        }

        #endregion

        #region Get Real Estate Statement

        /// <summary>
        /// Gets the real estate statement based on the statement id
        /// </summary>
        /// <param name="statementId"> The statement id of the statement to be fetched.</param>
        /// <returns> The Typed dataset containing the statement information of the statementid.</returns>
        public static RealEstateData GetRealEstateStatement(int statementId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string getRealEstateStatement;
                RealEstateData realEstateData = new RealEstateData();
                getRealEstateStatement = terraScanService.GetRealEstateStatement(statementId);
                realEstateData.ReadXml(Utilities.SharedFunctions.XmlParser(getRealEstateStatement));
                return realEstateData;
            }
            else
            {
                return Helper.GetRealEstateStatement(statementId);
            }
        }

        #endregion

        #endregion

        #region  Query

        #region List Query

        /// <summary>
        /// Lists the queries.
        /// </summary>
        /// <param name="formId"> The form id  of the form being used.</param>
        /// <param name="userId"> The user id of the user logged in.</param>
        /// <returns> The dataset containing the list of queries.</returns>
        public static DataSet ListQuery(int formId, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.ListQuery(formId, userId);
            }
            else
            {
                return Helper.ListQuery(formId, userId);
            }
        }
        #endregion

        #region List Sort Query
        /// <summary>
        /// Lists the Sorted query.
        /// </summary>
        /// <param name="savedQueryId"> The query Id of the query saved.</param>
        /// <param name="orderByCondition"> The order by condition.</param>
        /// <param name="formId"> The form id  of the form being used.</param>
        /// <returns> The dataset containing sorted order of the query result.</returns>
        public static DataSet ListSortQuery(int savedQueryId, string orderByCondition, int formId)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.ListSortQuery(savedQueryId, orderByCondition, formId);
            }
            else
            {
                return Helper.ListSortQuery(savedQueryId, orderByCondition, formId);
            }
        }
        #endregion

        #region Execute Query

        /// <summary>
        /// Method to exceute a sql query
        /// </summary>
        /// <param name="whereCondition">The whereCondition to be applied on query.</param>
        /// <param name="orderByCondition">The order by condition.</param>
        /// <param name="formId"> The form id  of the form being used.</param>
        /// <returns> The Typed datatset having the exceuted query results.</returns>
        public static QueryData ExecuteQuery(string whereCondition, string orderByCondition, int formId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string executeQuery;
                QueryData queryData = new QueryData();
                executeQuery = terraScanService.ExecuteQuery(whereCondition, orderByCondition, formId);
                queryData.ReadXml(Utilities.SharedFunctions.XmlParser(executeQuery));
                return queryData;
            }
            else
            {
                return Helper.ExecuteQuery(whereCondition, orderByCondition, formId);
            }
        }

        #endregion

        #region Save Query

        /// <summary>
        /// Method to save query
        /// </summary>
        /// <param name="savedQueryName"> Name of the saved query.</param>
        /// <param name="formId">  The form id  of the form being used.</param>
        /// <param name="savedQueryNote"> Note of the saved query.</param>
        /// <param name="userId"> The user id of the user logged in.</param>
        /// <param name="savedQueryDate"> Date of the saved query.</param>
        /// <param name="savedQuery"> The query to be saved.</param>
        /// <param name="whereCondn"> The where condition in the query.</param>
        /// <param name="canOverride"> Flag to specify override or not.</param>
        /// <returns> The datset containing the saved query details.</returns>
        public static DataSet SaveQuery(string savedQueryName, int formId, string savedQueryNote, int userId, DateTime savedQueryDate, string savedQuery, string whereCondn, bool canOverride)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.SaveQuery(savedQueryName, formId, savedQueryNote, userId, savedQueryDate, savedQuery, whereCondn, canOverride);
            }
            else
            {
                return Helper.SaveQuery(savedQueryName, formId, savedQueryNote, userId, savedQueryDate, savedQuery, whereCondn, canOverride);
            }
        }
        #endregion

        #region Check Query Exist
        /// <summary>
        /// Checks the query exist.
        /// </summary>
        /// <param name="formId"> The form id  of the form being used.</param>
        /// <param name="savedQueryName"> Name of the saved query.</param>
        /// <returns> The status indicating the presence of the query.</returns>
        public static int CheckQueryExist(int formId, string savedQueryName)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.CheckQueryExist(formId, savedQueryName);
            }
            else
            {
                return Helper.CheckQueryExist(formId, savedQueryName);
            }
        }

        #endregion

        #region Get Query Result

        /// <summary>
        /// Fetches the query result for the query id passed.
        /// </summary>
        /// <param name="queryId"> The query ID of the query to be exceuted.</param>
        /// <param name="orderByCondn">The orderBy condition.</param>
        /// <returns> The Typed dataset containing the query results.</returns>
        public static QueryData GetQueryResult(int queryId, string orderByCondn)
        {
            if (WSHelper.IsOnLineMode)
            {
                string getQueryResult;
                QueryData queryData = new QueryData();
                getQueryResult = terraScanService.GetQueryResult(queryId, orderByCondn);
                queryData.ReadXml(Utilities.SharedFunctions.XmlParser(getQueryResult));
                return queryData;
            }
            else
            {
                return Helper.GetQueryResult(queryId, orderByCondn);
            }
        }

        #endregion

        #region Delete Query
        /// <summary>
        /// Deletes the query with the specified query id.
        /// </summary>
        /// <param name="queryId"> The query ID of the query to be deleted.</param>
        /// <param name="userId">UserID</param>
        public static void DeleteQuery(int queryId, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                terraScanService.DeleteQuery(queryId, userId);
            }
            else
            {
                Helper.DeleteQuery(queryId, userId);
            }
        }

        #endregion
        #endregion

        #region SnapShot

        #region Execute Snapshot

        /// <summary>
        /// Method to apply filter on snapshot
        /// </summary>
        /// <param name="snapshotId"> The id used to retrieve snapshotitems to which filter applied</param>
        /// <param name="whereCondition">wherecondition used to query snapshotitems</param>
        /// <param name="orderByCondition">The order by condition.</param>
        /// <param name="formId"> The form Id</param>
        /// <returns>Typed Dataset</returns>
        public static QueryData ExecuteSnapshot(int snapshotId, string whereCondition, string orderByCondition, int formId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string executeSnapshot;
                QueryData queryData = new QueryData();
                executeSnapshot = terraScanService.ExecuteSnapshot(snapshotId, whereCondition, orderByCondition, formId);
                queryData.ReadXml(Utilities.SharedFunctions.XmlParser(executeSnapshot));
                return queryData;
            }
            else
            {
                return Helper.ExecuteSnapshot(snapshotId, whereCondition, orderByCondition, formId);
            }
        }

        #endregion

        #region Save Snapshot
        /// <summary>
        /// Method to save the snapshot
        /// </summary>
        /// <param name="snapshotName"> Name of the snapshot to be named.</param>
        /// <param name="formId"> The form id  of the form being used.</param>
        /// <param name="snapshotNote"> Note of the snapshot.</param>
        /// <param name="userId"> The user id of the user logged in.</param>
        /// <param name="snapshotDate"> Date of the saved snapshot.</param>
        /// <param name="snapshotQuery"> Query of the snapshot.</param>
        /// <param name="whereCondn"> The where condition of the query.</param>
        /// <param name="keyIDs"> Reciept or statement information in xml format.</param>
        /// <param name="canOverride"> Flag to specify override or not.</param>
        /// <returns> The datset containing the saved snapshot details.</returns>
        public static DataSet SaveSnapShot(string snapshotName, int formId, string snapshotNote, int userId, DateTime snapshotDate, string snapshotQuery, string whereCondn, string keyIDs, bool canOverride)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.SaveSnapShot(snapshotName, formId, snapshotNote, userId, snapshotDate, snapshotQuery, whereCondn, keyIDs, canOverride);
            }
            else
            {
                return Helper.SaveSnapShot(snapshotName, formId, snapshotNote, userId, snapshotDate, snapshotQuery, whereCondn, keyIDs, canOverride);
            }
        }
        #endregion

        #region List SnapShot
        /// <summary>
        /// Lists the snapshots.
        /// </summary>
        /// <param name="formId"> The form id  of the form being used.</param>
        /// <returns> The datset containing the list of the snapshots.</returns>
        public static DataSet ListSnapShot(int formId)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.ListSnapShot(formId);
            }
            else
            {
                return Helper.ListSnapShot(formId);
            }
        }
        #endregion

        #region List Sort SnapShot
        /// <summary>
        /// Lists the Sorted SnapShot.
        /// </summary>
        /// <param name="snapShotId"> The snapshot Id of the snapshot executed.</param>
        /// <param name="orderByCondition"> The order by condition.</param>
        /// <param name="formId"> The form id  of the form being used.</param>
        /// <returns> The dataset containing sorted order of the snapshot result.</returns>
        public static DataSet ListSortSnapShot(int snapShotId, string orderByCondition, int formId)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.ListSortSnapShot(snapShotId, orderByCondition, formId);
            }
            else
            {
                return Helper.ListSortSnapShot(snapShotId, orderByCondition, formId);
            }
        }
        #endregion

        #region Check SnapShot Exist
        /// <summary>
        /// Checks the snap shot exist.
        /// </summary>
        /// <param name="formId">The form ID.</param>
        /// <param name="savedSnapShotName">Name of the saved snap shot.</param>
        /// <returns>True if snapshot name exist and False if not exist.</returns>
        public static int CheckSnapShotExist(int formId, string savedSnapShotName)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.CheckSnapShotExist(formId, savedSnapShotName);
            }
            else
            {
                return Helper.CheckSnapShotExist(formId, savedSnapShotName);
            }
        }
        #endregion

        #region Get SnapShot Result

        /// <summary>
        /// Get the result of the snapshot.
        /// </summary>
        /// <param name="snapShotId"> The snapshot ID of the snapshot to be exceuted.</param>
        /// <param name="orderByCondn">The orderBy condition.</param>
        /// <returns> The Typed datset containing the snapshot results.</returns>
        public static QueryData GetSnapShotResult(int snapShotId, string orderByCondn)
        {
            if (WSHelper.IsOnLineMode)
            {
                string getSnapShotResult;
                QueryData queryData = new QueryData();
                getSnapShotResult = terraScanService.GetSnapShotResult(snapShotId, orderByCondn);
                queryData.ReadXml(Utilities.SharedFunctions.XmlParser(getSnapShotResult));
                return queryData;
            }
            else
            {
                return Helper.GetSnapShotResult(snapShotId, orderByCondn);
            }
        }

        #endregion

        #region Delete SnapShot
        /// <summary>
        /// Deletes the snapshot with the specified snapshot id.
        /// </summary>
        /// <param name="snapShotId"> The snapshot ID of the snapshot to be deleted.</param>
        /// <param name="userId">UserID</param>
        public static void DeleteSnapShot(int snapShotId, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                terraScanService.DeleteSnapShot(snapShotId, userId);
            }
            else
            {
                Helper.DeleteSnapShot(snapShotId, userId);
            }
        }
        #endregion

        #endregion

        #region report

        #region GetReportDetails
        /// <summary>
        /// Gets the report details.
        /// </summary>
        /// <param name="reportId">The report Id.</param>
        /// <param name="userId">The user Id.</param>
        /// <returns>DataSet With Report Details</returns>
        public static DataSet GetReportDetails(int reportId, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.GetReportDetails(reportId, userId);
            }
            else
            {
                return Helper.GetReportDetails(reportId, userId);
            }
        }

        /// <summary>
        /// Gets the report details.
        /// </summary>
        /// <param name="userId">The user id.</param>
        /// <returns>F9008ReportDetailsData</returns>
        public static F9008ReportDetailsData F9008GetReportDetails(int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string form9008GetReportDetails;
                F9008ReportDetailsData form9008ReportDetailsData = new F9008ReportDetailsData();
                form9008GetReportDetails = terraScanService.F9008_GetReportDetails(userId);
                form9008ReportDetailsData.ReadXml(Utilities.SharedFunctions.XmlParser(form9008GetReportDetails));
                return form9008ReportDetailsData;
            }
            else
            {
                F9008ReportDetailsData form9008ReportDetailsData = new F9008ReportDetailsData();
                form9008ReportDetailsData = Helper.F9008GetReportDetails(userId);
                return form9008ReportDetailsData;
            }
        }

        #region SaveReportDetails

        /// <summary>
        /// To Save Report Details.
        /// </summary>
        /// <param name="userId">The user id.</param>
        /// <param name="printerConf">The printer conf.</param>
        public static void F9008_SaveReportDetails(int userId, string printerConf)
        {
            if (WSHelper.IsOnLineMode)
            {
                terraScanService.F9008_SaveReportDetails(userId, printerConf);
            }
            else
            {
                Helper.F9008_SaveReportDetails(userId, printerConf);
            }
        }

        #endregion SaveReportDetails

        #endregion

        #region print
        /// <summary>
        /// Gets the render report.
        /// </summary>
        /// <param name="reportPath">The report path.</param>
        /// <param name="format">The format.</param>
        /// <param name="deviceInfo">The device info.</param>
        /// <param name="encoding">The encoding.</param>
        /// <param name="mimetype">The mimetype.</param>
        /// <param name="streamids">The streamids.</param>
        /// <param name="key">The key.</param>
        /// <param name="keyId">The key id.</param>
        /// <returns>The Render Report</returns>
        public static byte[] GetRenderReport(string reportPath, string format, string deviceInfo, out string encoding, out string mimetype, out string[] streamids, string key, string keyId)
        {
            printReportService.Credentials = System.Net.CredentialCache.DefaultCredentials;
            string historyID = null;

            string extension;
            Warning[] warnings = null;
            
            ParameterValue keyParameter = new ParameterValue();
            keyParameter.Name = key;
            keyParameter.Value = keyId;
            keyParameter.Label = key;
            ParameterValue[] parameters = new ParameterValue[1];
            parameters[0] = keyParameter;

            ExecutionInfo execInfo = new ExecutionInfo();
            ExecutionHeader execHeader = new ExecutionHeader();
            printReportService.ExecutionHeaderValue = execHeader;
            execInfo = printReportService.LoadReport(reportPath, historyID);
            /// Added by Biju on 15/oct/2009 to retrieve the page settings in Report.cs
            executionInformation = execInfo;
            printReportService.SetExecutionParameters(parameters, "en-us");

            return printReportService.Render(format, deviceInfo, out extension, out encoding, out mimetype, out warnings, out streamids);
        }

        #endregion

        #region GetAutoPrintStatus

        /// <summary>
        /// Gets the auto print status.
        /// </summary>
        /// <param name="formId">The form id.</param>
        /// <param name="userId">The user id.</param>
        /// <returns>Returns true/false</returns>
        public static int GetAutoPrintStatus(int formId, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.GetAutoPrintStatus(formId, userId);
            }
            else
            {
                return Helper.GetAutoPrintStatus(formId, userId);
            }
        }

        #endregion GetAutoPrintStatus

        #region SaveAutoPrint

        /// <summary>
        /// Saves the auto print.
        /// </summary>
        /// <param name="formId">The form id.</param>
        /// <param name="userId">The user id.</param>
        /// <param name="autoPrint">if set to <c>true</c> [is auto print].</param>
        public static void SaveAutoPrint(int formId, int userId, bool autoPrint)
        {
            if (WSHelper.IsOnLineMode)
            {
                terraScanService.SaveAutoPrint(formId, userId, autoPrint);
            }
            else
            {
                Helper.SaveAutoPrint(formId, userId, autoPrint);
            }
        }

        #endregion SaveAutoPrint
        #endregion

        #region GetTheMenuItems
        /// <summary>
        /// Get the MenuItems Depends On the UserId and ApplicationId
        /// </summary>
        /// <param name="userId">userId to get menuItems</param>
        /// <param name="applicationId">applicationId to get MenuItems</param>
        /// <returns>DataSet which holds the MenuItems depends on UserId and applicationId</returns>
        public static DataSet GetMenuItems(int userId, int applicationId)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.GetMenuItems(userId, applicationId);
            }
            else
            {
                return Helper.GetMenuItems(userId, applicationId);
            }
        }

        #endregion

        #region GetFormItems

        /// <summary>
        /// Gets the form items.
        /// </summary>
        /// <returns>return dataset</returns>
        public static DataSet GetFormItems()
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.GetFormItems();
            }
            else
            {
                return Helper.GetFormItems();
            }
        }

        #endregion

        #region GetFormTitle

        /// <summary>
        /// Gets the form title.
        /// </summary>
        /// <param name="formId">The form id.</param>
        /// <returns>String with Title</returns>
        public static string GetFormTitle(int formId)
        {
            if (WSHelper.IsOnLineMode)
            {
                return (string)terraScanService.GetFormTitle(formId);
            }
            else
            {
                return Helper.GetFormTitle(formId);
            }
        }

        #endregion

        #region GetFormPermissions
        /// <summary>
        /// Get the Form Permissions Depends On the UserId and ApplicationId
        /// </summary>
        /// <param name="userId">userId to get Form Permissions</param>
        /// <param name="applicationId">applicationId to get Form Permissions</param>
        /// <returns>DataSet which holds the Form Permissions depends on UserId and applicationId</returns>
        public static DataSet GetFormPermissions(int userId, int applicationId)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.GetFormPermissions(userId, applicationId);
            }
            else
            {
                return Helper.GetFormPermissions(userId, applicationId);
            }
        }

        #endregion

        #region UserManagement
        #region UserTab
        #region GetUSerGroupDetails
        /// <summary>
        /// Lists the history information of the statement.
        /// </summary>
        /// <param name="applicationId">ApplicationID</param>
        /// <returns>
        /// The dataset containing the history information of the statementid.
        /// </returns>
        public static UserManagementData GetUserGroupDetails(int applicationId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string userManagementValue;
                UserManagementData userManagementData = new UserManagementData();
                userManagementValue = terraScanService.GetUserGroupDetails(applicationId);
                userManagementData.ReadXml(Utilities.SharedFunctions.XmlParser(userManagementValue));
                return userManagementData;
            }
            else
            {
                return Helper.GetUserGroupDetails(applicationId);
            }
        }

        #endregion

        #region InsertUserDetails
        /// <summary>
        /// Insert the user Detials
        /// </summary>
        /// <param name="userId">The user id.</param>
        /// <param name="nameDisplay">The name display.</param>
        /// <param name="nameFull">The name full.</param>
        /// <param name="nameNet">The name net.</param>
        /// <param name="email">The email.</param>
        /// <param name="active">if set to <c>true</c> [active].</param>
        /// <param name="administrator">if set to <c>true</c> [administrator].</param>
        /// <param name="applicationId">ApplicationID</param>
        /// <param name="loginUserId">The login user id.</param>
        /// <returns>Return Dataset 0 valid insert or 1</returns>
        public static UserManagementData SaveUserDetails(int userId, string nameDisplay, string nameFull, string nameNet, string email, int active, int administrator,int appraiser, int applicationId, int loginUserId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string userManagementValue;
                UserManagementData userManagementData = new UserManagementData();
                userManagementValue = terraScanService.SaveUserDetails(userId, nameDisplay, nameFull, nameNet, email, active, administrator,appraiser, applicationId, loginUserId);
                userManagementData.ReadXml(Utilities.SharedFunctions.XmlParser(userManagementValue));
                return userManagementData;
            }
            else
            {
                return Helper.SaveUserDetails(userId, nameDisplay, nameFull, nameNet, email, active, administrator, appraiser, applicationId, loginUserId);
            }
        }

        #endregion

        #region Delete
        /// <summary>
        /// Insert the user Detials
        /// </summary>
        /// <param name="userId">The user id.</param>
        /// <param name="loginUserId">The login user id.</param>
        public static void DeleteUserDetails(int userId, int loginUserId)
        {
            if (WSHelper.IsOnLineMode)
            {
                terraScanService.DeleteUserDetails(userId, loginUserId);
            }
            else
            {
                Helper.DeleteUserDetails(userId, loginUserId);
            }
        }

        #endregion

        #endregion

        #region Group Tab

        #region GetGroupDetails
        /// <summary>
        /// List The Group Inforamtion
        /// </summary>
        /// <param name="userId">UserID</param>
        /// <returns>
        /// The dataset containing Details of Group and User.
        /// </returns>
        public static UserManagementData GetGroupDetails(int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string userManagementValue;
                UserManagementData userManagementData = new UserManagementData();
                userManagementValue = terraScanService.GetGroupDetails(userId);
                userManagementData.ReadXml(Utilities.SharedFunctions.XmlParser(userManagementValue));
                return userManagementData;
            }
            else
            {
                return Helper.GetGroupDetails(userId);
            }
        }

        #endregion

        #region InsertUserDetails
        /// <summary>
        /// Insert the user Detials
        /// </summary>
        /// <param name="groupId">The group id.</param>
        /// <param name="groupName">Name of the group.</param>
        /// <param name="description">The description.</param>
        /// <param name="userGroup">The user group.</param>
        /// <param name="userId">UserID</param>
        /// <returns>DataSet 1 for success insert 0 for error</returns>
        public static UserManagementData InsertGroupDetails(int groupId, string groupName, string description, string userGroup, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string userManagementValue;
                UserManagementData userManagementData = new UserManagementData();
                userManagementValue = terraScanService.InsertGroupDetails(groupId, groupName, description, userGroup, userId);
                userManagementData.ReadXml(Utilities.SharedFunctions.XmlParser(userManagementValue));
                return userManagementData;
            }
            else
            {
                return Helper.InsertGroupDetails(groupId, groupName, description, userGroup, userId);
            }
        }

        #endregion

        #region Delete
        /// <summary>
        /// Delete the Group Detials
        /// </summary>
        /// <param name="groupId">The group id.</param>
        /// <param name="userId">UserID</param>
        public static void DeleteGroupDetails(int groupId, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                terraScanService.DeleteGroupDetails(groupId, userId);
            }
            else
            {
                Helper.DeleteGroupDetails(groupId, userId);
            }
        }
        #endregion

        #endregion

        #region PermissionsTab

        #region GetGroupPermissionDetails
        /// <summary>
        /// Gets the group permission details.
        /// </summary>
        /// <param name="userId">UserID</param>
        /// <returns>DataSet With Forms name and realitve permissions</returns>
        public static UserManagementData GetGroupPermissionDetails(int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string userManagementValue;
                UserManagementData userManagementData = new UserManagementData();
                userManagementValue = terraScanService.GetGroupPermissionDetails(userId);
                userManagementData.EnforceConstraints = false;
                userManagementData.ReadXml(Utilities.SharedFunctions.XmlParser(userManagementValue));
                return userManagementData;
            }
            else
            {
                return Helper.GetGroupPermissionDetails(userId);
            }
        }

        #endregion

        #region SaveGroupPermissionDetails
        /// <summary>
        /// Gets the group permission details.
        /// </summary>
        /// <param name="groupId">The group id.</param>
        /// <param name="formpermissions">The formpermissions.</param>
        /// <param name="userId">UserID</param>
        public static void SaveGroupPermissionDetails(int groupId, string formpermissions, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                terraScanService.SaveGroupPermissionDetails(groupId, formpermissions, userId);
            }
            else
            {
                Helper.SaveGrouPermissionDetails(groupId, formpermissions, userId);
            }
        }

        #endregion
        #endregion

        #endregion

        #region Query Utility

        /// <summary>
        /// Gets the query utility list.
        /// </summary>
        /// <param name="formId">The form ID.</param>
        /// <returns>return dataset</returns>
        public static QueryUtilityData GetQueryUtilityList(int formId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string queryUtilityValue;
                QueryUtilityData queryUtilityData = new QueryUtilityData();
                queryUtilityValue = terraScanService.GetQueryUtilityList(formId);
                queryUtilityData.ReadXml(Utilities.SharedFunctions.XmlParser(queryUtilityValue));
                return queryUtilityData;
            }
            else
            {
                return Helper.GetQueryUtilityList(formId);
            }
        }

        /// <summary>
        /// Deletes the query utility.
        /// </summary>
        /// <param name="queryId">The query id.</param>
        /// <param name="userId">UserID</param>
        public static void DeleteQueryUtility(int queryId, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                terraScanService.DeleteQueryUtility(queryId, userId);
            }
            else
            {
                Helper.DeleteQueryUtility(queryId, userId);
            }
        }

        /// <summary>
        /// Inserts the query utility.
        /// </summary>
        /// <param name="queryId">The query id.</param>
        /// <param name="queryName">Name of the query.</param>
        /// <param name="formId">The form id.</param>
        /// <param name="description">The description.</param>
        /// <param name="userId">The user id.</param>
        /// <param name="whereCondition">The where condition.</param>
        /// <param name="userWhereCondition">The user where condition.</param>
        /// <param name="overrideValue">The override value.</param>
        /// <returns>return integer</returns>
        public static int InsertQueryUtility(int queryId, string queryName, int formId, string description, int userId, string whereCondition, string userWhereCondition, int overrideValue)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.InsertQueryUtility(queryId, queryName, formId, description, userId, whereCondition, userWhereCondition, overrideValue);
            }
            else
            {
                return Helper.InsertQueryUtility(queryId, queryName, formId, description, userId, whereCondition, userWhereCondition, overrideValue);
            }
        }

        #endregion

        #region Snapshot Utility

        /// <summary>
        /// Gets the snapshot utility list.
        /// </summary>
        /// <param name="formId">The form id.</param>
        /// <returns>return dataset</returns>
        public static SnapshotUtilityData GetSnapshotUtilityList(int formId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string snapshotUtilityValue;
                SnapshotUtilityData snapshotUtilityData = new SnapshotUtilityData();
                snapshotUtilityValue = terraScanService.GetSnapshotUtilityList(formId);
                snapshotUtilityData.ReadXml(Utilities.SharedFunctions.XmlParser(snapshotUtilityValue));
                return snapshotUtilityData;
            }
            else
            {
                return Helper.GetSnapshotUtilityList(formId);
            }
        }

        /// <summary>
        /// Deletes the snapshot utility.
        /// </summary>
        /// <param name="snapshotId">The snapshot id.</param>
        /// <param name="userId">UserID</param>
        public static void DeleteSnapshotUtility(int snapshotId, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                terraScanService.DeleteSnapshotUtility(snapshotId, userId);
            }
            else
            {
                Helper.DeleteSnapshotUtility(snapshotId, userId);
            }
        }

        /// <summary>
        /// Inserts the snapshot utility.
        /// </summary>
        /// <param name="snapshotId">The snapshot id.</param>
        /// <param name="snapshotName">Name of the snapshot.</param>
        /// <param name="snapshotFormId">The snapshot form id.</param>
        /// <param name="description">The description.</param>
        /// <param name="recordCount">The record count.</param>
        /// <param name="userId">The user id.</param>
        /// <param name="overrideValue">The override value.</param>
        /// <param name="keyIds">The key ids.</param>
        /// <returns>returns integer</returns>
        public static int InsertSnapshotUtility(int snapshotId, string snapshotName, int snapshotFormId, string description, int recordCount, int userId, int overrideValue, string keyIds)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.InsertSnapshotUtility(snapshotId, snapshotName, snapshotFormId, description, recordCount, userId, overrideValue, keyIds);
            }
            else
            {
                return Helper.InsertSnapshotUtility(snapshotId, snapshotName, snapshotFormId, description, recordCount, userId, overrideValue, keyIds);
            }
        }

        #endregion

        #region VaildateUser

        /// <summary>
        /// Validates the user.
        /// </summary>
        /// <param name="userName">UserName.</param>
        /// <param name="password">Password.</param>
        /// <returns>User Status</returns>
        public static bool ValidateUser(string userName, string password)
        {
            ////if (WSHelper.IsOnLineMode)
            ////{
            return terraScanService.Validation(userName, password);
            ////}
            ////else
            ////{
            ////    return Helper.Validation(userName, password);
            ////}
        }

        #endregion

        #region Login User Information

        /// <summary>
        /// Gets the user information.
        /// </summary>
        /// <param name="userName">Name of the user.</param>
        /// <param name="applicationId">The application id.</param>
        /// <returns>return dataset</returns>
        public static DataSet GetUserInformation(string userName, int applicationId)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.GetUserInformation(userName, applicationId);
            }
            else
            {
                return Helper.GetUserInformation(userName, applicationId);
            }
        }

        /// <summary>
        /// Used To get the Net_Name for a particular User
        /// </summary>
        /// <param name="userFullName">User FullName</param>
        /// <returns>NetName for a particular fullname</returns>
        public static DataSet GetUserNetName(string userFullName)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.GetUserNetName(userFullName);
            }
            else
            {
                return Helper.GetUserNetName(userFullName);
            }
        }

        /// <summary>
        /// Gets the config information.
        /// </summary>
        /// <returns>returns dataset</returns>
        public static DataSet GetConfigInformation()
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.GetConfigInformation();
            }
            else
            {
                return Helper.GetConfigInformation();
            }
        }

        /// <summary>
        /// Gets the state of the authentication.
        /// </summary>
        /// <returns>dataset having authentication</returns>
        public static DataSet GetAuthenticationState()
        {
            try
            {
                if (WSHelper.IsOnLineMode)
                {
                    return terraScanService.GetAuthenticationState();
                }
                else
                {
                    return Helper.GetAuthenticationState();
                }
            }
            catch (Exception)
            {
                isOnLine = false;
                return new DataSet();
            }
        }
        #endregion

        #region SQL Support

        /// <summary>
        /// Gets the SQL query result.
        /// </summary>
        /// <param name="sqlQuery">The SQL query.</param>
        /// <returns>return dataset</returns>
        public static DataSet GetSQLQueryResult(string sqlQuery)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.GetSQLQueryResult(sqlQuery);
            }
            else
            {
                return Helper.GetSQLQueryResult(sqlQuery);
            }
        }

        /// <summary>
        /// Gets the SQL catagory
        /// </summary>
        /// <returns>SQLSupportData Dataset</returns>
        public static SQLSupportData GetSQLCategory()
        {
            if (WSHelper.IsOnLineMode)
            {
                string sqlCatagoryValue;
                SQLSupportData sqlsupport = new SQLSupportData();
                sqlCatagoryValue = terraScanService.GetSQLCategory();
                sqlsupport.ReadXml(Utilities.SharedFunctions.XmlParser(sqlCatagoryValue));
                return sqlsupport;
            }
            else
            {
                return Helper.GetSQLCategory();
            }
        }

        /// <summary>
        /// Gets the SQL description.
        /// </summary>
        /// <param name="categoryId">The category id.</param>
        /// <returns>SQLSupportData</returns>
        public static SQLSupportData GetSQLDescription(int categoryId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string sqlDescriptionValue;
                SQLSupportData sqlsupport = new SQLSupportData();
                sqlDescriptionValue = terraScanService.GetSQLDescription(categoryId);
                sqlsupport.ReadXml(Utilities.SharedFunctions.XmlParser(sqlDescriptionValue));
                return sqlsupport;
            }
            else
            {
                return Helper.GetSQLDescription(categoryId);
            }
        }

        /// <summary>
        /// Gets SQLString
        /// </summary>
        /// <param name="categoryId">category</param>
        /// <param name="sqlId">description</param>
        /// <returns>SQLSupportData Dateset</returns>
        public static SQLSupportData GetSQLString(int categoryId, int sqlId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string sqlStringValue;
                SQLSupportData sqlsupport = new SQLSupportData();
                sqlStringValue = terraScanService.GetSQLString(categoryId, sqlId);
                sqlsupport.ReadXml(Utilities.SharedFunctions.XmlParser(sqlStringValue));
                return sqlsupport;
            }
            else
            {
                return Helper.GetSQLString(categoryId, sqlId);
            }
        }

        /// <summary>
        /// Saves the SQL query.
        /// </summary>
        /// <param name="categoryId">The category id.</param>
        /// <param name="description">The description.</param>
        /// <param name="statement">The statement.</param>
        /// <param name="moduleId">The module id.</param>
        /// <param name="userId">The user id.</param>
        /// <param name="sqlId">The SQL id.</param>
        /// <returns>Integer</returns>
        public static int SaveSQLQuery(int categoryId, string description, string statement, int moduleId, int userId, int sqlId)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.SaveSQLQuery(categoryId, description, statement, moduleId, userId, sqlId);
            }
            else
            {
                return Helper.SaveSQLQuery(categoryId, description, statement, moduleId, userId, sqlId);
            }
        }

        /// <summary>
        /// F9015_s the delete query.
        /// </summary>
        /// <param name="sqlId">The SQL id.</param>
        /// <returns>QueryId</returns>
        /// <param name="userId">UserID</param>
        public static int F9015_DeleteQuery(int sqlId, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F9015_DeleteQuery(sqlId, userId);
            }
            else
            {
                return Helper.F9015_DeleteQuery(sqlId, userId);
            }
        }

        #endregion

        #region CountyConfiguration
        #region GetCountyConfiguration
        /// <summary>
        /// Gets the county configuration.
        /// </summary>
        /// <param name="applicationId">The application id.</param>
        /// <param name="userId">The User id.</param>
        /// <returns>DataSet With County Confiugartion Details</returns>
        public static DataSet GetCountyConfiguration(int applicationId, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.GetCountyConfiguration(applicationId, userId);
            }
            else
            {
                return Helper.GetCountyConfiguration(applicationId, userId);
            }
        }
        #endregion

        #region Update
        /// <summary>
        /// Gets the county configuration.
        /// </summary>
        /// <param name="configId">The config id.</param>
        /// <param name="configDescription">The config description.</param>
        /// <param name="userId">UserID</param>
        public static void UpdateCountyConfigDetails(int configId, string configDescription, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                terraScanService.UpdateCountyConfigDetails(configId, configDescription, userId);
            }
            else
            {
                Helper.UpdateCountyConfigDetails(configId, configDescription, userId);
            }
        }
        #endregion

        #endregion

        #region MortgageImportTemplate

        #region Get
        /// <summary>
        /// Gets the mortgage template.
        /// </summary>
        /// <param name="templateId">The template id.</param>
        /// <returns>DataSet With Mortgage Import Template Details</returns>
        public static MortgageImpotTemplateData GetMortgageTemplate(int templateId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string mortgageImportTemplateXml;
                MortgageImpotTemplateData mortgageImpotTemplateData = new MortgageImpotTemplateData();
                mortgageImportTemplateXml = terraScanService.GetMortgageTemplate(templateId);
                mortgageImpotTemplateData.ReadXml(Utilities.SharedFunctions.XmlParser(mortgageImportTemplateXml));
                return mortgageImpotTemplateData;
            }
            else
            {
                return Helper.GetMortgageTemplate(templateId);
            }
        }
        #endregion

        #region List Mortgage Import Template
        /// <summary>
        /// Lists the mortgage template.
        /// </summary>
        /// <returns>DataSet With Mortgage Import Template Details</returns>
        public static MortgageImpotTemplateData ListMortgageTemplate()
        {
            if (WSHelper.IsOnLineMode)
            {
                string mortgageImpotTemplateXML;
                MortgageImpotTemplateData mortgageImpotTemplateData = new MortgageImpotTemplateData();
                mortgageImpotTemplateXML = terraScanService.ListMortgageTemplate();
                mortgageImpotTemplateData.ReadXml(Utilities.SharedFunctions.XmlParser(mortgageImpotTemplateXML));
                return mortgageImpotTemplateData;
            }
            else
            {
                return Helper.ListMortgageTemplate();
            }
        }
        #endregion

        #region List MortgageImportFileType
        /// <summary>
        /// Lists the type of the mortgage import file.
        /// </summary>
        /// <returns>The dataset containing the Mortgage Import FileType</returns>
        public static MortageImportData ListMortgageImportFileType()
        {
            if (WSHelper.IsOnLineMode)
            {
                string mortgageImportXml;
                MortageImportData mortgageImportData = new MortageImportData();
                mortgageImportXml = terraScanService.ListMortgageImportFileType();
                mortgageImportData.ReadXml(Utilities.SharedFunctions.XmlParser(mortgageImportXml));
                return mortgageImportData;
            }
            else
            {
                return Helper.ListMortgageImportFileType();
            }
        }

        #endregion

        #region Save Mortgage Import Template


        public static void SaveMortgageImportTemplate(int templateId, string templateName, int typeId, int userId, string description, string filePath, int statementIdPos, int statementIdWid, int statementNumPos, int statementNumWid, int amountPos, int amountWid, int commentPos, int commentWid, int bankCodePos, int bankCodeWid, int loanNumPos, int loanNumWid, int taxPayNamePos, int taxPayNameWid, int ParcelNumPos, int ParcelNumWid, int PostTypePos, int PostTypeWid, int OwnerIDPos, int OwnerIDWid, int CartIdPos, int CartidWid)
        {
            if (WSHelper.IsOnLineMode)
            {
                terraScanService.SaveMortgageImportTemplate(templateId, templateName, typeId, userId, description, filePath, statementIdPos, statementIdWid, statementNumPos, statementNumWid, amountPos, amountWid, commentPos, commentWid, bankCodePos, bankCodeWid, loanNumPos, loanNumWid, taxPayNamePos, taxPayNameWid, ParcelNumPos, ParcelNumWid, PostTypePos, PostTypeWid, OwnerIDPos, OwnerIDWid,CartIdPos,CartidWid);
            }
            else
            {
                Helper.SaveMortgageImportTemplate(templateId, templateName, typeId, userId, description, filePath, statementIdPos, statementIdWid, statementNumPos, statementNumWid, amountPos, amountWid, commentPos, commentWid, bankCodePos, bankCodeWid, loanNumPos, loanNumWid, taxPayNamePos, taxPayNameWid, ParcelNumPos, ParcelNumWid, PostTypePos, PostTypeWid, OwnerIDPos, OwnerIDWid,CartIdPos,CartidWid);
            }
        }

        #endregion

        #region Delete Mortgage Template

        /// <summary>
        /// Deletes the mortgage template.
        /// </summary>
        /// <param name="templateId">The template id.</param>
        /// <param name="overrideStatus">if set to <c>true</c> [override status].</param>
        /// <param name="userId">UserID</param>
        /// <returns>The return value specifying status of the delete action.</returns>
        public static int DeleteMortgageTemplate(int templateId, bool overrideStatus, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.DeleteMortgageTemplate(templateId, overrideStatus, userId);
            }
            else
            {
                return Helper.DeleteMortgageTemplate(templateId, overrideStatus, userId);
            }
        }
        #endregion

        #endregion


        #region Mortgage Import Template


        #region Mortgage Import Statement Ids

        /// <summary>
        /// Gets the Mortgage Import statement Id's
        /// </summary>
        /// <returns> The dataset containing the list of Mortgage Import statementids.</returns>
        public static DataSet GetMortgageImportStatementIds()
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.GetMortgageImportStatementIds();
            }
            else
            {
                return Helper.GetMortgageImportStatementIds();
            }
        }

        #endregion

        #region MortgageImport Statement

        /// <summary>
        /// Gets the Mortgage Import statement based on the import id
        /// </summary>
        /// <param name="importId"> The importEd of the statement to be fetched.</param>
        ///  <param name="nextAvailableRecord">true fetch next available record if current record deleted,false previoud record</param>
        /// <returns> The dataset containing the statement information of the importId.</returns>
        public static MortageImportData GetMortgageImportStatement(int importId, bool nextAvailableRecord)
        {
            if (WSHelper.IsOnLineMode)
            {
                string mortageImportDataXml;
                MortageImportData mortageImportData = new MortageImportData();
                mortageImportDataXml = terraScanService.GetMortgageImportStatement(importId, nextAvailableRecord);
                mortageImportData.ReadXml(Utilities.SharedFunctions.XmlParser(mortageImportDataXml));
                return mortageImportData;
            }
            else
            {
                return Helper.GetMortgageImportStatement(importId, nextAvailableRecord);
            }
        }
        #endregion

        #region MortgageImport Error Check

        /// <summary>
        /// Method Will Check the Error Records for given parameters
        /// </summary>
        /// <param name="importId">importId</param>
        /// <param name="templateId">templateId</param>
        /// <param name="templateName">templateName</param>
        /// <param name="typeId">typeId</param>
        /// <param name="filePath">filePath</param>
        /// <param name="recieptDate">recieptDate</param>
        /// <param name="interestDate">interestDate</param>
        /// <param name="payCode">payCode</param>
        /// <param name="userId">userId</param>
        /// <param name="rollYear">rollYear</param>
        /// <param name="ppaymentId">The ppayment id.</param>
        /// <returns>
        /// the DataSet Containing the Error Records Information
        /// </returns>
        public static MortageImportData MortgageImportCheckErrors(int importId, int templateId, string templateName, int typeId, string filePath, DateTime recieptDate, DateTime interestDate, bool payCode, int userId, int rollYear,int firstHalfpaycode, int ppaymentId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string mortageImportDataXml;
                MortageImportData mortageImportData = new MortageImportData();
                mortageImportDataXml = terraScanService.MortgageImportCheckErrors(importId, templateId, templateName, typeId, filePath, recieptDate, interestDate, payCode, userId, rollYear,firstHalfpaycode, ppaymentId);
                mortageImportData.ReadXml(Utilities.SharedFunctions.XmlParser(mortageImportDataXml));
                return mortageImportData;
            }
            else
            {
                return Helper.MortgageImportCheckErrors(importId, templateId, templateName, typeId, filePath, recieptDate, interestDate, payCode, userId, rollYear,firstHalfpaycode, ppaymentId);
            }
        }

        #endregion

        #region Save Mortgage Import Entries

        /// <summary>
        /// Saves Mortgage Import Entries
        /// </summary>
        /// <param name="importId">the Import id</param>
        /// <param name="templateId">The template id</param>
        /// <param name="templateName">The template name</param>
        /// <param name="typeId">The type id</param>
        /// <param name="filePath">The file path</param>
        /// <param name="receiptDate">The receipt date</param>
        /// <param name="interestDate">The interest date</param>
        /// <param name="payCode">The pay code</param>
        /// <param name="userId">the userId</param>
        /// <param name="rollYear">The rollyear</param>
        /// <param name="ppaymentId">The ppayment id.</param>
        /// <param name="mortgageImportEntries">The Mortgage Import Entries</param>
        /// <returns>
        /// The DataSet containg inserted entries details
        /// </returns>
        public static MortageImportData SaveMortgageImportEntries(int importId, int templateId, string templateName, int typeId, string filePath, DateTime receiptDate, DateTime interestDate, bool payCode, int userId, int rollYear, int ppaymentId,int firstHalfPayCode, string mortgageImportEntries)
        {
            if (WSHelper.IsOnLineMode)
            {
                string mortageImportDataXml;
                MortageImportData mortageImportData = new MortageImportData();
                mortageImportDataXml = terraScanService.SaveMortgageImportEntries(importId, templateId, templateName, typeId, filePath, receiptDate, interestDate, payCode, userId, rollYear, ppaymentId,firstHalfPayCode, mortgageImportEntries);
                mortageImportData.ReadXml(Utilities.SharedFunctions.XmlParser(mortageImportDataXml));
                return mortageImportData;
            }
            else
            {
                return Helper.SaveMortgageImportEntries(importId, templateId, templateName, typeId, filePath, receiptDate, interestDate, payCode, userId, rollYear, ppaymentId,firstHalfPayCode, mortgageImportEntries);
            }
        }

        #endregion

        #region Save Mortgage Import

        /// <summary>
        /// Saves Mortgage Import
        /// </summary>
        /// <param name="importId">The import id</param>
        /// <param name="templateId">The template id</param>
        /// <param name="templateName">The template name</param>
        /// <param name="typeId">The type id</param>
        /// <param name="filePath">The file path</param>
        /// <param name="receiptDate">The receipt date</param>
        /// <param name="interestDate">The interest date</param>
        /// <param name="payCode">The pay code</param>
        /// <param name="userId">The user id</param>
        /// <param name="rollYear">The roll year</param>
        /// <param name="ppaymentId">The ppayment id.</param>
        /// <param name="resetErrorCheck">resetErrorCheck</param>
        /// <returns>
        /// The DataSet containg inserted entries import id
        /// </returns>
        public static MortageImportData SaveMortgageImport(int importId, int templateId, string templateName, int typeId, string filePath, DateTime receiptDate, DateTime interestDate, bool payCode, int userId, int rollYear, int ppaymentId,int firstHalfPayCode, bool resetErrorCheck)
        {
            if (WSHelper.IsOnLineMode)
            {
                string mortageImportDataXml;
                MortageImportData mortageImportData = new MortageImportData();
                mortageImportDataXml = terraScanService.SaveMortgageImport(importId, templateId, templateName, typeId, filePath, receiptDate, interestDate, payCode, userId, rollYear, ppaymentId,firstHalfPayCode, resetErrorCheck);
                mortageImportData.ReadXml(Utilities.SharedFunctions.XmlParser(mortageImportDataXml));
                return mortageImportData;
            }
            else
            {
                return Helper.SaveMortgageImport(importId, templateId, templateName, typeId, filePath, receiptDate, interestDate, payCode, userId, rollYear, ppaymentId,firstHalfPayCode, resetErrorCheck);
            }
        }

        #endregion

        #region Create Receipt
        /// <summary>
        /// Saves the payment.
        /// </summary>
        /// <param name="importId">The import id.</param>
        /// <param name="templateId">The template id.</param>
        /// <param name="templateName">Name of the template.</param>
        /// <param name="filePath">The file path.</param>
        /// <param name="typeId">The type id.</param>
        /// <param name="receiptDate">The receipt date.</param>
        /// <param name="interestDate">The interest date.</param>
        /// <param name="payCode">The pay code.</param>
        /// <param name="userId">The user id.</param>
        /// <param name="rollYear">The roll year.</param>
        /// <param name="ppaymentId">The ppayment id.</param>
        /// <param name="resetErrorCheck">if set to <c>true</c> [reset error check].</param>
        /// <returns>Dataset Holds the Reciept</returns>
        public static MortageImportData CreateReceipt(int importId, int templateId, string templateName, string filePath, int typeId, DateTime receiptDate, DateTime interestDate, bool payCode,int firsthalfpayCode, int userId, int rollYear, int? ppaymentId, bool resetErrorCheck)
        {
            if (WSHelper.IsOnLineMode)
            {
                string mortageImportDataXml;
                MortageImportData mortageImportData = new MortageImportData();
                mortageImportDataXml = terraScanService.CreateReceipt(importId, templateId, templateName, filePath, typeId, receiptDate, interestDate, payCode,firsthalfpayCode, userId, rollYear, ppaymentId, resetErrorCheck);
                mortageImportData.ReadXml(Utilities.SharedFunctions.XmlParser(mortageImportDataXml));
                return mortageImportData;
            }
            else
            {
                return Helper.CreateReceipt(importId, templateId, templateName, filePath, typeId, receiptDate, interestDate, payCode,firsthalfpayCode, userId, rollYear, ppaymentId, resetErrorCheck);
            }
        }
        #endregion  Create Receipt
        #endregion

        #region Mortgage Import Template Selection

        /// <summary>
        /// Gets the Mortgage Import Template Details 
        /// </summary>
        /// <returns> The dataset containing the list of Mortgage Import Template Details.</returns>
        public static MortgageImportTemplateSelectData GetMortgageImportTemplateDetails()
        {
            if (WSHelper.IsOnLineMode)
            {
                string mortgageImportTemplateSelectDataXml;
                MortgageImportTemplateSelectData mortgageImportTemplateSelectData = new MortgageImportTemplateSelectData();
                mortgageImportTemplateSelectDataXml = terraScanService.GetMortgageImportTemplateDetails();
                mortgageImportTemplateSelectData.ReadXml(Utilities.SharedFunctions.XmlParser(mortgageImportTemplateSelectDataXml));
                return mortgageImportTemplateSelectData;
            }
            else
            {
                return Helper.GetMortgageImportTemplateDetails();
            }
        }

        #endregion

        #region Mortgage Import Check Valid Receipt

        /// <summary>
        /// Check For Valid Receipt 
        /// </summary>
        /// <param name="importId">The import id</param>       
        /// <param name="receiptDate">The receipt date</param>       
        /// <returns>The DataSet containg valid receipt details</returns>
        public static MortageImportData CheckMortgageImportValidReceipt(int importId, DateTime receiptDate)
        {
            if (WSHelper.IsOnLineMode)
            {
                string mortageImportDataXml;
                MortageImportData mortageImportData = new MortageImportData();
                mortageImportDataXml = terraScanService.CheckMortgageImportValidReceipt(importId, receiptDate);
                mortageImportData.ReadXml(Utilities.SharedFunctions.XmlParser(mortageImportDataXml));
                return mortageImportData;
            }
            else
            {
                return Helper.CheckMortgageImportValidReceipt(importId, receiptDate);
            }
        }

        #endregion

        #region Delete Mortgage Import

        /// <summary>
        /// Delete Mortgage import record
        /// </summary>
        /// <param name="importId">The import id</param>
        /// <param name="userId">UserID</param>
        /// <returns>The DataSet</returns>
        public static MortageImportData DeleteMortgageImport(int importId, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string mortageImportDataXml;
                MortageImportData mortageImportData = new MortageImportData();
                mortageImportDataXml = terraScanService.DeleteMortgageImport(importId, userId);
                mortageImportData.ReadXml(Utilities.SharedFunctions.XmlParser(mortageImportDataXml));
                return mortageImportData;
            }
            else
            {
                return Helper.DeleteMortgageImport(importId, userId);
            }
        }

        /// <summary>
        /// Delete Mortgage import file entries
        /// </summary>
        /// <param name="importId">The import id</param>
        /// <param name="userId">UserID</param>
        /// <returns>The DataSet</returns>
        public static MortageImportData DeleteMortgageImportFileEntries(int importId, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string mortageImportDataXml;
                MortageImportData mortageImportData = new MortageImportData();
                mortageImportDataXml = terraScanService.DeleteMortgageImportFileEntries(importId, userId);
                mortageImportData.ReadXml(Utilities.SharedFunctions.XmlParser(mortageImportDataXml));
                return mortageImportData;
            }
            else
            {
                return Helper.DeleteMortgageImportFileEntries(importId, userId);
            }
        }

        #endregion

        #region Error Engine

        /// <summary>
        /// Gets the error engine.
        /// </summary>
        /// <param name="errorTypeId">The error type id.</param>
        /// <returns>return Error engine data</returns>
        public static ErrorEngineData GetErrorEngine(int errorTypeId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string errorEngineDataXml;
                ErrorEngineData errorEngineData = new ErrorEngineData();
                errorEngineDataXml = terraScanService.GetErrorEngine(errorTypeId);
                errorEngineData.ReadXml(Utilities.SharedFunctions.XmlParser(errorEngineDataXml));
                return errorEngineData;
            }
            else
            {
                return Helper.GetErrorEngine(errorTypeId);
            }
        }

        /// <summary>
        /// Inserts the error engine.
        /// </summary>
        /// <param name="errorDate">The error date.</param>
        /// <param name="userId">The user id.</param>
        /// <param name="userIP">The user IP.</param>
        /// <param name="errorTypeId">The error type id.</param>
        /// <param name="parameter">The parameter.</param>
        /// <param name="comment">The comment.</param>
        public static void InsertErrorEngine(string errorDate, int userId, string userIP, int errorTypeId, string parameter, string comment)
        {
            if (WSHelper.IsOnLineMode)
            {
                terraScanService.InsertErrorEngine(errorDate, userId, userIP, errorTypeId, parameter, comment);
            }
            else
            {
                Helper.InsertErrorEngine(errorDate, userId, userIP, errorTypeId, parameter, comment);
            }
        }

        #endregion

        #region NextNumber Configuration

        #region List NextNumber Configuration
        /// <summary>
        /// List the NextNumber Configuration details
        /// </summary>
        /// <returns>return Error engine data</returns>
        public static NextNumberData ListNextNumberConfiguration()
        {
            if (WSHelper.IsOnLineMode)
            {
                string listNextNumberConfigurationValue;
                NextNumberData nextNumberData = new NextNumberData();
                listNextNumberConfigurationValue = terraScanService.ListNextNumberConfiguration();
                nextNumberData.ReadXml(Utilities.SharedFunctions.XmlParser(listNextNumberConfigurationValue));
                return nextNumberData;
            }
            else
            {
                return Helper.ListNextNumberConfiguration();
            }
        }

        #endregion

        #region Check Next Number
        /// <summary>
        /// Check for valid Next Number
        /// </summary>
        /// <param name="rollYear">The roll year.</param>
        /// <param name="nextNum">The next num.</param>
        /// <param name="formula">The formula.</param>
        /// <returns>The dataset containing the valid Next Number details.</returns>
        public static DataSet CheckNextNumber(int rollYear, int nextNum, string formula)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.CheckNextNumber(rollYear, nextNum, formula);
            }
            else
            {
                return Helper.CheckNextNumber(rollYear, nextNum, formula);
            }
        }
        #endregion

        #region Update NextNumber ConfigDetails
        /// <summary>
        /// Saves Next Number configuration details
        /// </summary>
        /// <param name="nextNumId">The next num id.</param>
        /// <param name="nextNum">The next num.</param>
        /// <param name="formula">The formula.</param>
        /// <param name="userId">UserID</param>
        public static void UpdateNextNumberConfigDetails(int nextNumId, int nextNum, string formula, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                terraScanService.UpdateNextNumberConfigDetails(nextNumId, nextNum, formula, userId);
            }
            else
            {
                Helper.UpdateNextNumberConfigDetails(nextNumId, nextNum, formula, userId);
            }
        }
        #endregion

        #endregion

        #region  Excise Tax Affidavit

        #region  For Loading The Details

        /// <summary>
        /// Gets the type of the excise individual.
        /// </summary>
        /// <returns>returns ExciseIndividualType </returns>
        public static ExciseIndividualType GetExciseIndividualType()
        {
            if (WSHelper.IsOnLineMode)
            {
                string exciseTaxAffidavitValue;
                ExciseIndividualType exciseIndividualType = new ExciseIndividualType();
                exciseTaxAffidavitValue = terraScanService.GetExciseIndividualType();
                exciseIndividualType.ReadXml(Utilities.SharedFunctions.XmlParser(exciseTaxAffidavitValue));
                return exciseIndividualType;
            }
            else
            {
                return Helper.GetExciseIndividualType();
            }
        }

        /// <summary>
        /// Gets the excise tax affidavit details.
        /// </summary>
        /// <param name="statmentId">The statment id.</param>
        /// <returns>Return ExciseTaxAffidavitData Dataset</returns>
        public static ExciseTaxAffidavitData GetExciseTaxAffidavitDetails(int statmentId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string exciseTaxAffidavitDataValue;
                ExciseTaxAffidavitData exciseTaxAffidavitData = new ExciseTaxAffidavitData();
                exciseTaxAffidavitDataValue = terraScanService.GetExciseTaxAffidavitDetails(statmentId);
                exciseTaxAffidavitData.ReadXml(Utilities.SharedFunctions.XmlParser(exciseTaxAffidavitDataValue));
                return exciseTaxAffidavitData;
            }
            else
            {
                return Helper.GetExciseTaxAffidavitDetails(statmentId);
            }
        }

        /// <summary>
        /// Excises the tax affidavit calulate amount due.
        /// </summary>
        /// <param name="saleDate">The sale date.</param>
        /// <param name="paymentDate">The payment date.</param>
        /// <param name="exciseRateId">The excise rate id.</param>
        /// <param name="taxCode">The tax code.</param>
        /// <param name="taxableSaleAmount">The taxable sale amount.</param>
        /// <returns>returns dataset</returns>
        public static ExciseTaxAffidavitAmountDueData GetExciseTaxAffidavitCalulateAmountDue(DateTime saleDate, DateTime paymentDate, int exciseRateId, int taxCode, double taxableSaleAmount)
        {
            if (WSHelper.IsOnLineMode)
            {
                string exciseAffidavitAmountDueDataValue;
                ExciseTaxAffidavitAmountDueData exciseTaxAffidavitAmountDueData = new ExciseTaxAffidavitAmountDueData();
                exciseAffidavitAmountDueDataValue = terraScanService.GetExciseTaxAffidavitCalulateAmountDue(saleDate, paymentDate, exciseRateId, taxCode, taxableSaleAmount);
                exciseTaxAffidavitAmountDueData.ReadXml(Utilities.SharedFunctions.XmlParser(exciseAffidavitAmountDueDataValue));
                return exciseTaxAffidavitAmountDueData;
            }
            else
            {
                return Helper.GetExciseTaxAffidavitCalulateAmountDue(saleDate, paymentDate, exciseRateId, taxCode, taxableSaleAmount);
            }
        }

        /// <summary>
        /// Gets the affidavit statement id.
        /// </summary>
        /// <param name="formId">The form id.</param>
        /// <param name="orderField">The order field.</param>
        /// <param name="orderBy">The order by.</param>
        /// <returns>Returns dataset for list of statementID</returns>
        public static ExciseTaxAffidavitData GetAffidavitStatementId(int formId, string orderField, string orderBy)
        {
            if (WSHelper.IsOnLineMode)
            {
                string affidavitStatementIdDataValue;
                ExciseTaxAffidavitData affidavitStatementIdData = new ExciseTaxAffidavitData();
                affidavitStatementIdDataValue = terraScanService.GetAffidavitStatementId(formId, orderField, orderBy);
                affidavitStatementIdData.ReadXml(Utilities.SharedFunctions.XmlParser(affidavitStatementIdDataValue));
                return affidavitStatementIdData;
            }
            else
            {
                return Helper.GetAffidavitStatementId(formId, orderField, orderBy);
            }
        }

        /// <summary>
        /// Executes the affdvt query.
        /// </summary>
        /// <param name="formId">The form id.</param>
        /// <param name="whereCondnSql">The where condn SQL.</param>
        /// <param name="orderByCondn">The order by condn.</param>
        /// <returns>Returns ExecuteAffdvtQuery Dataset</returns>
        public static QueryByFormData ExecuteAffdvtQuery(int formId, string whereCondnSql, string orderByCondn)
        {
            if (WSHelper.IsOnLineMode)
            {
                string queryByFormValue;
                QueryByFormData queryByFormData = new QueryByFormData();
                queryByFormValue = terraScanService.ExecuteAffdvtQuery(formId, whereCondnSql, orderByCondn);
                queryByFormData.ReadXml(Utilities.SharedFunctions.XmlParser(queryByFormValue));
                return queryByFormData;
            }
            else
            {
                return Helper.ExecuteAffdvtQuery(formId, whereCondnSql, orderByCondn);
            }
        }

        /// <summary>
        /// Gets the affidavit statement id.
        /// </summary>
        /// <param name="statementId">The statement id.</param>
        /// <param name="partiesAddress">The parties address.</param>
        /// <param name="parcelDetails">The parcel details.</param>
        /// <param name="exciseAffidavitDetails">The excise affidavit details.</param>
        /// <param name="userId">UserID</param>
        /// <returns>returns dataset containing AffiDavit Details</returns>
        public static int SaveAffiDavitDetails(int statementId, string partiesAddress, string parcelDetails, string exciseAffidavitDetails, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.SaveAffiDavitDetails(statementId, partiesAddress, parcelDetails, exciseAffidavitDetails, userId);
            }
            else
            {
                return Helper.SaveAffiDavitDetails(statementId, partiesAddress, parcelDetails, exciseAffidavitDetails, userId);
            }
        }

        /// <summary>
        /// Gets the owner details.
        /// </summary>
        /// <param name="ownerId">The owner id.</param>
        /// <returns>Returns PartiesOwnerDetails Dataset</returns>
        public static PartiesOwnerDetailsData GetOwnerDetails(int ownerId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string ownerDetailDataValue;
                PartiesOwnerDetailsData ownerDetailData = new PartiesOwnerDetailsData();
                ownerDetailDataValue = terraScanService.GetOwnerDetails(ownerId);
                ownerDetailData.ReadXml(Utilities.SharedFunctions.XmlParser(ownerDetailDataValue));
                return ownerDetailData;
            }
            else
            {
                return Helper.GetOwnerDetails(ownerId);
            }
        }

        /// <summary>
        /// Gets the district selection.
        /// </summary>
        /// <param name="exciseRateId">The excise rate id.</param>
        /// <returns>Returns Dataset foe District Selection</returns>
        public static AffidavitDistrictSelectionData GetDistrictSelection(int exciseRateId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string districtSelectionValue;
                AffidavitDistrictSelectionData districtSelectionDataSet = new AffidavitDistrictSelectionData();
                districtSelectionValue = terraScanService.GetDistrictSelection(exciseRateId);
                districtSelectionDataSet.ReadXml(Utilities.SharedFunctions.XmlParser(districtSelectionValue));
                return districtSelectionDataSet;
            }
            else
            {
                return Helper.GetDistrictSelection(exciseRateId);
            }
        }

        /// <summary>
        /// Deletes the affidavit details for the particular statement id.
        /// </summary>
        /// <param name="statementId">The statement id.</param>
        /// <param name="userId">UserID</param>
        public static void DeleteAffidavitDetails(int statementId, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                terraScanService.DeleteAffidavitDetails(statementId, userId);
            }
            else
            {
                Helper.DeleteAffidavitDetails(statementId, userId);
            }
        }

        #endregion

        #endregion

        #region ExciseWorkQueue

        #region Affidavit Work Queue

        /// <summary>
        /// Gets the work queue search result.
        /// </summary>
        /// <param name="parcelNumber">The parcel number.</param>
        /// <param name="name">The name.</param>
        /// <param name="receiptDate">The Receipt date.</param>
        /// <param name="address">The address.</param>
        /// <param name="taxCode">The tax code.</param>
        /// <param name="treasurer">The treasurer.</param>
        /// <param name="assessor">The assessor.</param>
        /// <param name="statementNumber">StatementNumber</param>
        /// <returns>Return Dataset for AffidavitWorkQueueData Search</returns>
        public static AffidavitWorkQueueData F1107_ExciseWorkQueue_GetWorkQueueSearchResult(string parcelNumber, string name, string receiptDate, string address, string taxCode, string treasurer, string assessor, string statementNumber)
        {
            if (WSHelper.IsOnLineMode)
            {
                string affidavitWorkQueueSearch;
                AffidavitWorkQueueData affidavitWorkQueue = new AffidavitWorkQueueData();
                affidavitWorkQueueSearch = terraScanService.F1107_ExciseWorkQueue_GetWorkQueueSearchResult(parcelNumber, name, receiptDate, address, taxCode, treasurer, assessor, statementNumber);
                affidavitWorkQueue.ReadXml(Utilities.SharedFunctions.XmlParser(affidavitWorkQueueSearch));
                return affidavitWorkQueue;
            }
            else
            {
                return Helper.F1107_ExciseWorkQueue_GetWorkQueueSearchResult(parcelNumber, name, receiptDate, address, taxCode, treasurer, assessor, statementNumber);
            }
        }
        #endregion

        #region Management Work Queue

        /// <summary>
        /// F1109_s the list management queue.
        /// </summary>
        /// <param name="parcelNumber">The parcel number.</param>
        /// <param name="name">The name.</param>
        /// <param name="saleDate">The sale date.</param>
        /// <param name="address">The address.</param>
        /// <param name="taxCode">The tax code.</param>
        /// <param name="treasurer">The treasurer.</param>
        /// <param name="assessor">The assessor.</param>
        /// <param name="rollYear">The roll year.</param>
        /// <param name="statementNumber">Statement Number</param>
        /// <returns>Returns ManagementWorkQueue DataSet</returns>
        public static AffidavitManagementQueue F1109_ListManagementQueue(string parcelNumber, string name, string saleDate, string address, string taxCode, string treasurer, string assessor, int rollYear, string statementNumber)
        {
            if (WSHelper.IsOnLineMode)
            {
                string managementWorkQueueValue;
                AffidavitManagementQueue managementWorkQueue = new AffidavitManagementQueue();
                managementWorkQueueValue = terraScanService.F1109_ListManagementQueue(parcelNumber, name, saleDate, address, taxCode, treasurer, assessor, rollYear, statementNumber);
                managementWorkQueue.ReadXml(Utilities.SharedFunctions.XmlParser(managementWorkQueueValue));
                return managementWorkQueue;
            }
            else
            {
                return Helper.F1109_ListManagementQueue(parcelNumber, name, saleDate, address, taxCode, treasurer, assessor, rollYear, statementNumber);
            }
        }

        /// <summary>
        /// F1109_s the management queue filter result.
        /// </summary>
        /// <param name="statusFilterId">The status filter id.</param>
        /// <param name="rollYear">The roll year.</param>
        /// <param name="filterFromDate">The filter from date.</param>
        /// <param name="filterToDate">The filter to date.</param>
        /// <returns>
        /// Returns ManagementWorkQueue Filter Result
        /// </returns>
        public static AffidavitManagementQueue F1109_ManagementQueueFilterResult(int statusFilterId, int rollYear, string filterFromDate, string filterToDate)
        {
            if (WSHelper.IsOnLineMode)
            {
                string managementWorkQueueFilterValue;
                AffidavitManagementQueue managementWorkQueue = new AffidavitManagementQueue();
                managementWorkQueueFilterValue = terraScanService.F1109_ManagementQueueFilterResult(statusFilterId, rollYear, filterFromDate, filterToDate);
                managementWorkQueue.ReadXml(Utilities.SharedFunctions.XmlParser(managementWorkQueueFilterValue));
                return managementWorkQueue;
            }
            else
            {
                return Helper.F1109_ManagementQueueFilterResult(statusFilterId, rollYear, filterFromDate, filterToDate);
            }
        }

        /// <summary>
        /// F1109_s the filter search affidavit.
        /// </summary>
        /// <param name="filterXml">The filter XML.</param>
        /// <returns>Returns ManagementWorkQueue Filter Result</returns>
        public static AffidavitManagementQueue F1109_FilterSearchAffidavit(string filterXml)
        {
            if (WSHelper.IsOnLineMode)
            {
                string managementWorkQueueFilterValue;
                AffidavitManagementQueue managementWorkQueue = new AffidavitManagementQueue();
                managementWorkQueueFilterValue = terraScanService.F1109_FilterSearchAffidavit(filterXml);
                managementWorkQueue.ReadXml(Utilities.SharedFunctions.XmlParser(managementWorkQueueFilterValue));
                return managementWorkQueue;
            }
            else
            {
                return Helper.F1109_FilterSearchAffidavit(filterXml);
            }
        }

        /// <summary>
        /// F1109_s the list roll year.
        /// </summary>
        /// <returns>Returns Rollyear DataSet</returns>
        public static AffidavitManagementQueue F1109_ListRollYear()
        {
            if (WSHelper.IsOnLineMode)
            {
                string managementRollYear;
                AffidavitManagementQueue managementWorkQueue = new AffidavitManagementQueue();
                managementRollYear = terraScanService.F1109_ListRollYear();
                managementWorkQueue.ReadXml(Utilities.SharedFunctions.XmlParser(managementRollYear));
                return managementWorkQueue;
            }
            else
            {
                return Helper.F1109_ListRollYear();
            }
        }

        #endregion

        #region Submittal Queue

        /// <summary>
        /// F1108_s the get submit affidavit.
        /// </summary>
        /// <param name="statementId">The statement id.</param>
        /// <returns>Returns SubmitAffidavit DatatSet</returns>
        public static REETA F1108_GetSubmitAffidavit(string statementId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string submitValue;
                REETA submitDataset = new REETA();
                submitValue = terraScanService.F1108_GetSubmitAffidavit(statementId);
                submitDataset.ReadXml(Utilities.SharedFunctions.XmlParser(submitValue));
                return submitDataset;
            }
            else
            {
                return Helper.F1108_GetSubmitAffidavit(statementId);
            }
        }

        /// <summary>
        /// F1108_s the list management queue.
        /// </summary>
        /// <param name="parcelNumber">The parcel number.</param>
        /// <param name="name">The name.</param>
        /// <param name="receiptDate">The Receipt date.</param>
        /// <param name="address">The address.</param>
        /// <param name="taxCode">The tax code.</param>
        /// <param name="receiptNumber">The receipt number.</param>
        /// <param name="statementNumber">Statement Number</param>
        /// <returns>Returns SubmittalQueue dataset</returns>
        public static SubmittalQueueData F1108_ListManagementQueue(string parcelNumber, string name, string receiptDate, string address, string taxCode, string receiptNumber, string statementNumber)
        {
            if (WSHelper.IsOnLineMode)
            {
                string submittalValue;
                SubmittalQueueData submittalDataset = new SubmittalQueueData();
                submittalValue = terraScanService.F1108_ListManagementQueue(parcelNumber, name, receiptDate, address, taxCode, receiptNumber, statementNumber);
                submittalDataset.ReadXml(Utilities.SharedFunctions.XmlParser(submittalValue));
                return submittalDataset;
            }
            else
            {
                return Helper.F1108_ListManagementQueue(parcelNumber, name, receiptDate, address, taxCode, receiptNumber, statementNumber);
            }
        }

        /// <summary>
        /// F1108_s the list configuration detail.
        /// </summary>
        /// <returns>Returns Configuration Detail</returns>
        public static SubmittalQueueData F1108_ListConfigurationDetail()
        {
            if (WSHelper.IsOnLineMode)
            {
                string submittalConfigValue;
                SubmittalQueueData submittalDataset = new SubmittalQueueData();
                submittalConfigValue = terraScanService.F1108_ListConfigurationDetail();
                submittalDataset.ReadXml(Utilities.SharedFunctions.XmlParser(submittalConfigValue));
                return submittalDataset;
            }
            else
            {
                return Helper.F1108_ListConfigurationDetail();
            }
        }

        /// <summary>
        /// F1108_s the get reet web service reply.
        /// </summary>
        /// <param name="urlValue">The URL value.</param>
        /// <param name="methodName">Name of the method.</param>
        /// <param name="userId">The user id.</param>
        /// <param name="password">The password.</param>
        /// <param name="xml">The XML.</param>
        /// <param name="amend">if set to <c>true</c> [amend].</param>
        /// <returns>Returns SubmitAffidavit DatatSet</returns>
        public static string F1108_GetReetWebServiceReply(string urlValue, string methodName, string userId, string password, string xml, bool amend)
        {
            ////Todo check
            object submitValue;
            object[] args = new object[] { userId, password, xml, amend };
            terraScanReetService = new TerraScan.ReetWebService.Service();
            terraScanReetService.Url = urlValue;
            MethodInfo mi = terraScanReetService.GetType().GetMethod(methodName);
            submitValue = mi.Invoke(terraScanReetService, args);
            return submitValue.ToString();
        }

        /// <summary>
        /// F1108_s the get submit affidavit reply.
        /// </summary>
        /// <param name="reetReplyXml">The reet reply XML.</param>
        /// <param name="userId">The user id.</param>
        /// <returns>Returns SubmitAffidavit reply datatSet</returns>
        public static REETA F1108_GetSubmitAffidavitReply(string reetReplyXml, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string reetreply;
                REETA reetDataset = new REETA();
                reetreply = terraScanService.F1108_GetSubmitAffidavitReply(reetReplyXml, userId);
                reetDataset.ReadXml(Utilities.SharedFunctions.XmlParser(reetreply));
                return reetDataset;
            }
            else
            {
                return Helper.F1108_GetSubmitAffidavitReply(reetReplyXml, userId);
            }
        }

        /// <summary>
        /// Used to save the xml for testing
        /// </summary>
        /// <param name="reetXml">The reet XML.</param>
        /// <param name="reetReplyXml">The reet reply XML.</param>
        /// <param name="userId">UserID</param>
        /// <returns>Returns SubmitAffidavit DatatSet</returns>
        public static int F1108_SaveReplyReetXml(string reetXml, string reetReplyXml, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                int tempKeyValue;
                int.TryParse(terraScanService.F1108_SaveReplyReetXml(reetXml, reetReplyXml, userId).ToString(), out tempKeyValue);
                return tempKeyValue;
            }
            else
            {
                int tempKeyValue;
                int.TryParse(Helper.F1108_SaveReplyReetXml(reetXml, reetReplyXml, userId).ToString(), out tempKeyValue);
                return tempKeyValue;
            }
        }
        #endregion

        #endregion

        #region Excise Tax Statement

        #region Get Excise Tax Statement

        /// <summary>
        /// Gets the excise tax statement.
        /// </summary>
        /// <param name="statementId">The statement id.</param>
        /// <returns>The typed dataset containing the ExciseTaxStatement information based on statementId</returns>
        public static ExciseTaxStatementData GetExciseTaxStatement(int statementId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string getExciseTaxStatementValue;
                ExciseTaxStatementData exciseTaxStatementData = new ExciseTaxStatementData();
                getExciseTaxStatementValue = terraScanService.GetExciseTaxStatement(statementId);
                exciseTaxStatementData.ReadXml(Utilities.SharedFunctions.XmlParser(getExciseTaxStatementValue));
                return exciseTaxStatementData;
            }
            else
            {
                return Helper.GetExciseTaxStatement(statementId);
            }
        }

        #endregion

        #region Get Excise Tax Receipt

        /// <summary>
        /// Gets the excise tax receipt.
        /// </summary>
        /// <param name="statementId">The statement id.</param>
        /// <returns>The typed dataset containing the ExciseTaxReceipt information based on statementId</returns>
        public static ExciseTaxReceiptData GetExciseTaxReceipt(int statementId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string getExciseTaxReceiptValue;
                ExciseTaxReceiptData exciseTaxReceiptData = new ExciseTaxReceiptData();
                getExciseTaxReceiptValue = terraScanService.GetExciseTaxReceipt(statementId);
                exciseTaxReceiptData.ReadXml(Utilities.SharedFunctions.XmlParser(getExciseTaxReceiptValue));
                return exciseTaxReceiptData;
            }
            else
            {
                return Helper.GetExciseTaxReceipt(statementId);
            }
        }

        #endregion

        #region List Excise Tax Statement

        /// <summary>
        /// lists the Excise Tax statement ID
        /// </summary>
        /// <returns>The typed dataset containing the ExciseTax Statement ID</returns>
        public static ExciseTaxStatementData ListExciseTaxStatemnet()
        {
            if (WSHelper.IsOnLineMode)
            {
                string listExciseTaxStatementValue;
                ExciseTaxStatementData exciseTaxStatementData = new ExciseTaxStatementData();
                listExciseTaxStatementValue = terraScanService.ListExciseTaxStatement();
                exciseTaxStatementData.ReadXml(Utilities.SharedFunctions.XmlParser(listExciseTaxStatementValue));
                return exciseTaxStatementData;
            }
            else
            {
                return Helper.ListExciseTaxStatement();
            }
        }

        #endregion List Excise Tax Statement

        #region Save Tax Receipt

        /// <summary>
        /// Saves the excise tax receipt.
        /// </summary>
        /// <param name="statementItems">The statement items.</param>
        /// <param name="userId">UserID</param>
        /// <returns>returns statementItems</returns>
        public static ExciseTaxStatementData SaveExciseTaxReceipt(string statementItems, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string saveExciseTaxReceipt;
                ExciseTaxStatementData exciseTaxStatementData = new ExciseTaxStatementData();
                saveExciseTaxReceipt = terraScanService.SaveExciseTaxReceipt(statementItems, userId);
                exciseTaxStatementData.ReadXml(Utilities.SharedFunctions.XmlParser(saveExciseTaxReceipt));
                return exciseTaxStatementData;
            }
            else
            {
                return Helper.SaveExciseTaxReceipt(statementItems, userId);
            }
        }

        #endregion Save Tax Receipt

        #endregion

        #region ExciseTax Affidavit validation

        #region  Get ExciseTaxAffidavitStatus

        /// <summary>
        /// Gets the excise tax affidavit status.
        /// </summary>
        /// <param name="statementId">The statement id.</param>
        /// <param name="treasurerStatus">The treasurer status.</param>
        /// <returns>The dataset containing statementID status</returns>
        public static ExciseAffidavitValidationData GetExciseTaxAffidavitStatus(int statementId, int treasurerStatus)
        {
            if (WSHelper.IsOnLineMode)
            {
                string affidavitValidationData;
                ExciseAffidavitValidationData exciseAffidavitValidationData = new ExciseAffidavitValidationData();
                affidavitValidationData = terraScanService.GetExciseTaxAffidavitStatus(statementId, treasurerStatus);
                exciseAffidavitValidationData.ReadXml(Utilities.SharedFunctions.XmlParser(affidavitValidationData));
                return exciseAffidavitValidationData;
            }
            else
            {
                return Helper.GetExciseTaxAffidavitStatus(statementId, treasurerStatus);
            }
        }

        #endregion Get ExciseTaxAffidavitStatus

        #region  Update ExciseTaxAffidavitStatus

        /// <summary>
        /// Updates the excise affidavit status.
        /// </summary>
        /// <param name="statementId">The statement id.</param>
        /// <param name="treasurerStatus">The treasurer status.</param>
        /// <param name="statusId">The status id.</param>
        /// <param name="userId">UserID</param>
        public static void UpdateExciseAffidavitStatus(int statementId, int treasurerStatus, int statusId, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                terraScanService.UpdateExciseAffidavitStatus(statementId, treasurerStatus, statusId, userId);
            }
            else
            {
                Helper.UpdateExciseAffidavitStatus(statementId, treasurerStatus, statusId, userId);
            }
        }
        #endregion Update ExciseTaxAffidavitStatus

        #endregion

        #region Excise Rate District Selection

        #region List Excise Rate District

        /// <summary>
        /// Lists the excise rate district.
        /// </summary>
        /// <param name="district">The district.</param>
        /// <param name="year">The year.</param>
        /// <param name="description">The description.</param>
        /// <returns>return dataset for Excise Rate District</returns>
        public static ExciseRateDistrictSelectionData ListExciseRateDistrict(string district, int year, string description)
        {
            if (WSHelper.IsOnLineMode)
            {
                string listExciseRateDistrictValue;
                ExciseRateDistrictSelectionData exciseRateDistrictSelectionData = new ExciseRateDistrictSelectionData();
                listExciseRateDistrictValue = terraScanService.ListExciseRateDistrict(district, year, description);
                exciseRateDistrictSelectionData.ReadXml(Utilities.SharedFunctions.XmlParser(listExciseRateDistrictValue));
                return exciseRateDistrictSelectionData;
            }
            else
            {
                return Helper.ListExciseRateDistrict(district, year, description);
            }
        }

        #endregion
        #endregion

        #region Excise District Copy

        #region Get Excise District Copy

        /// <summary>
        /// Get the district and base year 
        /// </summary>
        /// <param name="exciserateId">exciserateId</param>
        /// <returns>DataSet having district and base year  </returns>
        public static ExciseDistrictCopyData GetExciseDistrictCopy(int exciserateId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string getExciseDistrictCopyData;
                ExciseDistrictCopyData exciseDistrictCopy = new ExciseDistrictCopyData();
                getExciseDistrictCopyData = terraScanService.GetExciseDistrictCopy(exciserateId);
                exciseDistrictCopy.ReadXml(Utilities.SharedFunctions.XmlParser(getExciseDistrictCopyData));
                return exciseDistrictCopy;
            }
            else
            {
                return Helper.GetExciseDistrictCopy(exciserateId);
            }
        }

        #endregion Get Excise District Copy

        #region Save Excise District Copy

        /// <summary>
        /// Save Diatrict,roll year And new year Details
        /// The returns values from Database 
        /// 0 = When The record is successfully saved.
        /// 1 = When Invalid Source Record
        /// 2 = When Invalid Destination Record
        /// </summary>
        /// <param name="district">The district</param>
        /// <param name="basedOnYear">The based On year</param>
        /// <param name="newDistrictYear">The new year</param>
        /// <param name="userId">UserID</param>
        /// <returns>
        /// The returns values from Database 
        /// 0 = When The record is successfully saved.
        /// 1 = When Invalid Source Record
        /// 2 = When Invalid Destination Record
        /// </returns>
        public static int SaveExciseDistrictCopy(int district, int basedOnYear, int newDistrictYear, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.SaveExciseDistrcitCopy(district, basedOnYear, newDistrictYear, userId);
            }
            else
            {
                return Helper.SaveExciseDistrcitCopy(district, basedOnYear, newDistrictYear, userId);
            }
        }

        #endregion Save Excise District Copy

        #endregion Excise District Copy

        #region MasterNameSearch

        /// <summary>
        /// Gets the master name search.
        /// </summary>
        /// <param name="lastName">Name of the last.</param>
        /// <param name="firstName">Name of the first.</param>
        /// <param name="address">The address.</param>
        /// <returns>Returns MasterNameSearchData dataset</returns>
        public static MasterNameSearchData GetMasterNameSearch(string lastName, string firstName, string address)
        {
            if (WSHelper.IsOnLineMode)
            {
                string masterName;
                MasterNameSearchData masterNameSearch = new MasterNameSearchData();
                masterName = terraScanService.GetMasterNameSearch(lastName, firstName, address);
                masterNameSearch.ReadXml(Utilities.SharedFunctions.XmlParser(masterName));
                return masterNameSearch;
            }
            else
            {
                return Helper.GetMasterNameSearch(lastName, firstName, address);
            }
        }

        #endregion

        #region Excise Tax Rate

        #region Get Excise Tax Rate

        /// <summary>
        /// Gets the excise tax rate.
        /// </summary>
        /// <param name="exciseRateId">The excise rate id.</param>
        /// <returns>returns dataset contains Excise Tax Rate Details</returns>
        public static ExciseTaxRateData GetExciseTaxRate(int exciseRateId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string getExciseTaxRateValue;
                ExciseTaxRateData exciseTaxRateData = new ExciseTaxRateData();
                getExciseTaxRateValue = terraScanService.GetExciseTaxRate(exciseRateId);
                exciseTaxRateData.ReadXml(Utilities.SharedFunctions.XmlParser(getExciseTaxRateValue));
                return exciseTaxRateData;
            }
            else
            {
                return Helper.GetExciseTaxRate(exciseRateId);
            }
        }

        #endregion

        #region List Excise Tax Rate

        /// <summary>
        /// Lists the excise tax rate.
        /// </summary>
        /// <returns>returns dataset contains Excise Tax Rate Details</returns>
        public static ExciseTaxRateData ListExciseTaxRate()
        {
            if (WSHelper.IsOnLineMode)
            {
                string listExciseTaxRateValue;
                ExciseTaxRateData exciseTaxRateData = new ExciseTaxRateData();
                listExciseTaxRateValue = terraScanService.ListExciseTaxRate();
                exciseTaxRateData.ReadXml(Utilities.SharedFunctions.XmlParser(listExciseTaxRateValue));
                return exciseTaxRateData;
            }
            else
            {
                return Helper.ListExciseTaxRate();
            }
        }

        #endregion

        #region Save Excise Tax Rate

        /// <summary>
        /// Save the excise tax rate.
        /// </summary>
        /// <param name="exciseRateId">The excise rate id.</param>
        /// <param name="exciseTaxDetails">The excise tax details.</param>
        /// <param name="userId">UserID</param>
        public static void SaveExciseTaxRate(int exciseRateId, string exciseTaxDetails, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                terraScanService.SaveExciseTaxRate(exciseRateId, exciseTaxDetails, userId);
            }
            else
            {
                Helper.SaveExciseTaxRate(exciseRateId, exciseTaxDetails, userId);
            }
        }

        #endregion

        #region Delete Excise Tax Rate

        /// <summary>
        /// Deletes the Excise Tax Rate
        /// </summary>
        /// <param name="exciseRateId">The excise rate Id.</param>
        /// <param name="userId">UserID</param>
        /// <returns>The return value specifying status of the delete action.</returns>
        public static int DeleteExciseTaxRate(int exciseRateId, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.DeleteExciseTaxRate(exciseRateId, userId);
            }
            else
            {
                return Helper.DeleteExciseTaxRate(exciseRateId, userId);
            }
        }
        #endregion

        #region Get District Name

        /// <summary>
        /// Gets the Excise Tax Statement
        /// </summary>
        /// <param name="districtId">The district id.</param>
        /// <returns>returns dataset contains District Name</returns>
        public static ExciseTaxRateData GetDistrictName(int districtId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string getDistrictNameValue;
                ExciseTaxRateData exciseTaxRateData = new ExciseTaxRateData();
                getDistrictNameValue = terraScanService.GetDistrictName(districtId);
                exciseTaxRateData.ReadXml(Utilities.SharedFunctions.XmlParser(getDistrictNameValue));
                return exciseTaxRateData;
            }
            else
            {
                return Helper.GetDistrictName(districtId);
            }
        }

        /// <summary>
        /// Gets the district sub fund Items data.
        /// </summary>
        /// <param name="districtId">The district ID.</param>
        /// <returns>returns DistrictSelectionData</returns>
        public static DistrictSelectionData GetDistrictData(int districtId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string getDistrictNameValue;
                DistrictSelectionData getDistrictData = new DistrictSelectionData();
                getDistrictNameValue = terraScanService.GetDistrictData(districtId);
                getDistrictData.ReadXml(Utilities.SharedFunctions.XmlParser(getDistrictNameValue));
                return getDistrictData;
            }
            else
            {
                return Helper.GetDistrictData(districtId);
            }

        }

        #endregion

        #region Get Account Name

        /// <summary>
        /// Gets the Account Name
        /// </summary>
        /// <param name="accountId">The account id.</param>
        /// <returns>returns dataset contains Account Name</returns>
        public static ExciseTaxRateData GetAccountName(int accountId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string getAccountNameValue;
                ExciseTaxRateData exciseTaxRateData = new ExciseTaxRateData();
                getAccountNameValue = terraScanService.GetAccountName(accountId);
                exciseTaxRateData.ReadXml(Utilities.SharedFunctions.XmlParser(getAccountNameValue));
                return exciseTaxRateData;
            }
            else
            {
                return Helper.GetAccountName(accountId);
            }
        }
        #endregion

        #endregion

        #region Account Slection

        #region Get Account Slection Data

        /// <summary>
        /// Gets the account selection data.
        /// </summary>
        /// <param name="subFund">The sub fund.</param>
        /// <param name="bars">The bars.</param>
        /// <param name="functionName">Name of the function.</param>
        /// <param name="objectname">The objectname.</param>
        /// <param name="line">The line.</param>
        /// <param name="rollYear">The roll year.</param>
        /// <param name="desciption">The desciption.</param>
        /// <param name="iscash">The iscash.</param>
        /// <returns>The account selection data.</returns>
        public static AccountSelectionData GetAccountSelectionData(string subFund, string bars, string functionName, string objectname, string line, int rollYear, string desciption, int iscash)
        {
            if (WSHelper.IsOnLineMode)
            {
                string accountdata;
                AccountSelectionData accountSelectionData = new AccountSelectionData();
                accountdata = terraScanService.GetAccountSelectionData(subFund, bars, functionName, objectname, line, rollYear, desciption, iscash);
                accountSelectionData.ReadXml(Utilities.SharedFunctions.XmlParser(accountdata));
                return accountSelectionData;
            }
            else
            {
                return Helper.GetAccountSelectionData(subFund, bars, functionName, objectname, line, rollYear, desciption, iscash);
            }
        }

        #endregion Account Slection data

        #endregion Account Slection

        #region F1512 District Slection

        #region Get District Slection Data

        /// <summary>
        /// Gets the district selection data.
        /// </summary>
        /// <param name="districtId">The district id.</param>
        /// <param name="district">The district.</param>
        /// <param name="description">The description.</param>
        /// <param name="rollYear">The roll year.</param>
        /// <returns>returns DistrictSelectionData dataset</returns>
        public static F1512DistrictSelectionData F1512_GetDistrictSelectionData(int districtId, string district, string description, int rollYear)
        {
            if (WSHelper.IsOnLineMode)
            {
                string districtdata;
                F1512DistrictSelectionData districtSelectionData = new F1512DistrictSelectionData();
                districtdata = terraScanService.F1512_GetDistrictSelectionData(districtId, district, description, rollYear);
                districtSelectionData.ReadXml(Utilities.SharedFunctions.XmlParser(districtdata));
                return districtSelectionData;
            }
            else
            {
                return Helper.F1512_GetDistrictSelectionData(districtId, district, description, rollYear);
            }
        }

        #endregion Get District Slection data

        #endregion F1512 District Slection

        #region Help Engine

        #region List Help Engine

        /// <summary>
        /// Lists the Help Documents
        /// </summary>
        /// <param name="formFile">The form file.</param>
        /// <returns>returns dataset contains Help Form details</returns>
        public static HelpEngineData ListHelpDocumentForm(string formFile)
        {
            if (WSHelper.IsOnLineMode)
            {
                string listHelpDocumentFormValue;
                HelpEngineData helpEngineData = new HelpEngineData();
                listHelpDocumentFormValue = terraScanService.ListHelpDocumentForm(formFile);
                helpEngineData.ReadXml(Utilities.SharedFunctions.XmlParser(listHelpDocumentFormValue));
                return helpEngineData;
            }
            else
            {
                return Helper.ListHelpDocumentForm(formFile);
            }
        }
        #endregion

        #endregion

        #region GDocEventEngine

        /// <summary>
        /// Inserts the G doc event engine data.
        /// </summary>
        /// <param name="eventEngineInsertData">The event engine insert data.</param>
        /// <param name="userId">UserID</param>
        /// <returns>inserted eventID</returns>
        public static int InsertGDocEventEngineData(string eventEngineInsertData, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.InsertGDocEventEngineData(eventEngineInsertData, userId);
            }
            else
            {
                return Helper.InsertGDocEventEngineData(eventEngineInsertData, userId);
            }
        }

        /// <summary>
        /// Inserts the G doc event engine data.
        /// </summary>
        /// <param name="featureId">featureId</param>
        /// <returns>inserted eventID</returns>
        public static int GetGDocEventEngineFeatureClassId(int featureId)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.GetGDocEventEngineFeatureClassId(featureId);
            }
            else
            {
                return Helper.GetGDocEventEngineFeatureClassId(featureId);
            }
        }

        /// <summary>
        /// Lists the Help Documents
        /// </summary>
        /// <param name="featureClassID">The feature class ID.</param>
        /// <returns>
        /// returns dataset contains Event Status and Type
        /// </returns>
        public static GDocEventEngineTypeStatusData ListEventTypeStatusDetails(int featureClassID)
        {
            if (WSHelper.IsOnLineMode)
            {
                string listEventTypeStatusValue;
                GDocEventEngineTypeStatusData gdocEventEngineTypeStatusData = new GDocEventEngineTypeStatusData();
                listEventTypeStatusValue = terraScanService.ListEventTypeStatusDetails(featureClassID);
                gdocEventEngineTypeStatusData.ReadXml(Utilities.SharedFunctions.XmlParser(listEventTypeStatusValue));
                return gdocEventEngineTypeStatusData;
            }
            else
            {
                return Helper.ListEventTypeStatusDetails(featureClassID);
            }
        }

        /// <summary>
        /// Lists the Help Documents
        /// </summary>
        /// <param name="featureClassID">The feature class ID.</param>
        /// <param name="featureID">The feature ID.</param>
        /// <returns>
        /// returns dataset contains EnvetEngine Datas
        /// </returns>
        public static GDocEventEngineData LoadEventEngineData(int featureClassID, int featureID)
        {
            if (WSHelper.IsOnLineMode)
            {
                string listEventTypeStatusValue;
                GDocEventEngineData gdocEventEngineData = new GDocEventEngineData();
                listEventTypeStatusValue = terraScanService.LoadEventEngineData(featureClassID, featureID);
                gdocEventEngineData.ReadXml(Utilities.SharedFunctions.XmlParser(listEventTypeStatusValue));
                return gdocEventEngineData;
            }
            else
            {
                return Helper.LoadEventEngineData(featureClassID, featureID);
            }
        }

        /// <summary>
        /// Lists the Help Documents
        /// </summary>
        /// <param name="featureClassId">The feature class id.</param>
        /// <param name="featureId">The feature id.</param>
        /// <returns>
        /// returns dataset contains EnvetEngine Datas For Header
        /// </returns>
        public static GDocEventEngineData GetEventEngineDataHeader(int featureClassId, int featureId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string listEventTypeStatusValue;
                GDocEventEngineData gdocEventEngineData = new GDocEventEngineData();
                listEventTypeStatusValue = terraScanService.GetEventEngineDataHeader(featureClassId, featureId);
                gdocEventEngineData.ReadXml(Utilities.SharedFunctions.XmlParser(listEventTypeStatusValue));
                return gdocEventEngineData;
            }
            else
            {
                return Helper.GetEventEngineDataHeader(featureClassId, featureId);
            }
        }

        #region Active Work Order Details

        /// <summary>
        /// Gets the work order details.
        /// </summary>
        /// <param name="featureClassId">The featureClass id.</param>
        /// <returns>typed dataset containing the WOID,Date,Type and Comments</returns>
        public static GDocWorkOrderData GetWorkOrderDetails(int featureClassId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string getWorkOrderDetails;
                GDocWorkOrderData docWorkOrderData = new GDocWorkOrderData();
                getWorkOrderDetails = terraScanService.GetWorkOrderDetails(featureClassId);
                docWorkOrderData.ReadXml(Utilities.SharedFunctions.XmlParser(getWorkOrderDetails));
                return docWorkOrderData;
            }
            else
            {
                return Helper.GetWorkOrderDetails(featureClassId);
            }
        }

        #endregion Active Work Order Details

        #endregion

        #region GDoc Comment

        #region Get GDoc Comment

        /// <summary>
        /// Gets the GDoc Comment.
        /// </summary>
        /// <param name="eventId">The event id.</param>
        /// <returns>Typed Dataset containing the GDoc comment</returns>
        public static GDocCommentData GetGDocComment(int eventId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string getGDocCommentValue;
                GDocCommentData gdocCommentData = new GDocCommentData();
                getGDocCommentValue = terraScanService.GetGDocComment(eventId);
                gdocCommentData.ReadXml(Utilities.SharedFunctions.XmlParser(getGDocCommentValue));
                return gdocCommentData;
            }
            else
            {
                return Helper.GetGDocComment(eventId);
            }
        }

        #endregion Get GDoc Comment

        #region Save GDoc Comment

        /// <summary>
        /// Saves the GDoc comment.
        /// </summary>
        /// <param name="eventId">The event id.</param>
        /// <param name="comment">The comment.</param>
        /// <param name="userId">UserID</param>
        public static void SaveGDocComment(int eventId, string comment, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                terraScanService.SaveGDocComment(eventId, comment, userId);
            }
            else
            {
                Helper.SaveGDocComment(eventId, comment, userId);
            }
        }

        #endregion Save GDoc Comment

        #endregion GDoc Comment

        #region GDoc Event Header

        #region GetGDocEventHeader

        /// <summary>
        /// Gets the GDoc event header.
        /// </summary>
        /// <param name="eventId">The event id.</param>
        /// <returns>Typed dataset containing the Event,Event date,Work Order and Is complete. </returns>
        public static GDocEventHeaderData GetGDocEventHeader(int eventId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string getGDocEventHeaderValue;
                GDocEventHeaderData gdocEventHeaderData = new GDocEventHeaderData();
                getGDocEventHeaderValue = terraScanService.GetGDocEventHeader(eventId);
                gdocEventHeaderData.ReadXml(Utilities.SharedFunctions.XmlParser(getGDocEventHeaderValue));
                return gdocEventHeaderData;
            }
            else
            {
                return Helper.GetGDocEventHeader(eventId);
            }
        }

        #endregion GetGDocEventHeader

        #region ListGDocEventHeaderStatus

        /// <summary>
        /// Lists the GDoc event header status.
        /// </summary>
        /// <param name="eventId">The eventId.</param>
        /// <returns>Typed status containing Event Engine status.</returns>
        public static GDocEventHeaderData ListGDocEventHeaderStatus(int eventId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string listGDocEventHeaderStatus;
                GDocEventHeaderData gdocEventHeaderData = new GDocEventHeaderData();
                listGDocEventHeaderStatus = terraScanService.ListGDocEventHeaderStatus(eventId);
                gdocEventHeaderData.ReadXml(Utilities.SharedFunctions.XmlParser(listGDocEventHeaderStatus));
                return gdocEventHeaderData;
            }
            else
            {
                return Helper.ListGDocEventHeaderStatus(eventId);
            }
        }

        #endregion  ListGDocEventHeaderStatus

        #region DeleteGDocEventHeader

        /// <summary>
        /// Deletes the GDoc event header.
        /// </summary>
        /// <param name="eventId">The event id.</param>
        /// <param name="childFlag">The child flag.</param>
        /// <param name="userId">UserID</param>
        public static void DeleteGDocEventHeader(int eventId, int childFlag, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                terraScanService.DeleteGDocEventHeader(eventId, childFlag, userId);
            }
            else
            {
                Helper.DeleteGDocEventHeader(eventId, childFlag, userId);
            }
        }

        #endregion DeleteGDocEventHeader

        #region SaveGDocEventHeader

        /// <summary>
        /// Saves the GDoc event header.
        /// </summary>
        /// <param name="eventItems">The event items.</param>
        /// <param name="userId">UserID</param>
        /// <returns>Typed dataset</returns>
        public static GDocEventHeaderData SaveGDocEventHeader(string eventItems, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string saveGDocEventHeaderValue;
                GDocEventHeaderData gdocEventHeaderData = new GDocEventHeaderData();
                saveGDocEventHeaderValue = terraScanService.SaveGDocEventHeader(eventItems, userId);
                gdocEventHeaderData.ReadXml(Utilities.SharedFunctions.XmlParser(saveGDocEventHeaderValue));
                return gdocEventHeaderData;
            }
            else
            {
                return Helper.SaveGDocEventHeader(eventItems, userId);
            }
        }

        #endregion SaveGDocEventHeader

        #endregion GDoc Event Header

        #region 8912 GDoc Work order CallIn

        #region Get GDoc Work order CallIn

        /// <summary>
        /// Get work order call In values  for F8912.
        /// </summary>
        /// <param name="workorderId">The work order id.</param>
        /// <returns>Typed DataSet Containing the Gdoc Work Order CallIn Values</returns>
        public static GDocWorkorderCallInData F8912_GetWorkOrderCallIn(int workorderId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string getWorkOrderCallInValue;
                GDocWorkorderCallInData gdocWorkorderCallInData = new GDocWorkorderCallInData();
                getWorkOrderCallInValue = terraScanService.F8912_GetWorkOrderCallIn(workorderId);
                gdocWorkorderCallInData.ReadXml(Utilities.SharedFunctions.XmlParser(getWorkOrderCallInValue));
                return gdocWorkorderCallInData;
            }
            else
            {
                return Helper.F8912_GetWorkOrderCallIn(workorderId);
            }
        }

        #endregion Get GDoc Work order CallIn

        #region Get GDoc Addresses

        /// <summary>
        /// To Get Addresses for GDOC Form Slices.
        /// </summary>
        /// <returns>
        /// Typed DataSet Containing the Gdoc Addresses
        /// </returns>
        public static GDocWorkorderCallInData wListAddresses()
        {
            if (WSHelper.IsOnLineMode)
            {
                string getWorkOrderCallInAddressValues;
                GDocWorkorderCallInData gdocWorkorderCallInData = new GDocWorkorderCallInData();
                getWorkOrderCallInAddressValues = terraScanService.wListAddresses();
                gdocWorkorderCallInData.ReadXml(Utilities.SharedFunctions.XmlParser(getWorkOrderCallInAddressValues));
                return gdocWorkorderCallInData;
            }
            else
            {
                return Helper.wListAddresses();
            }
        }

        #endregion Get GDoc Addresses

        #region Save GDoc Work order CallIn

        /// <summary>
        /// Save GDoc work order call In Values.
        /// </summary>
        /// <param name="workOrderCall">The work order call.</param>
        /// <param name="userId">UserID</param>
        /// <returns>Typed DataSet Containing the Gdoc Work Order CallIn Values</returns>
        public static GDocWorkorderCallInData F8912_SaveWorkOrderCallIn(string workOrderCall, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string saveWorkOrderCallInValues;
                GDocWorkorderCallInData gdocWorkorderCallInData = new GDocWorkorderCallInData();
                saveWorkOrderCallInValues = terraScanService.F8912_SaveWorkOrderCallIn(workOrderCall, userId);
                gdocWorkorderCallInData.ReadXml(Utilities.SharedFunctions.XmlParser(saveWorkOrderCallInValues));
                return gdocWorkorderCallInData;
            }
            else
            {
                return Helper.F8912_SaveWorkOrderCallIn(workOrderCall, userId);
            }
        }

        #endregion Save GDoc Work order CallIn

        #endregion GDoc Work order CallIn

        #region  8910 GDoc Work order General

        #region Get GDoc Work order General

        /// <summary>
        /// Get work order general values for F8910.
        /// </summary>
        /// <param name="workorderId">The workorder id.</param>
        /// <returns>Typed DataSet containing the GDoc Work order General Values</returns>
        public static GDocWorkOrderGeneralData F8910_GetWorkOrderGeneral(int workorderId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string getWorkOrderGeneralValues;
                GDocWorkOrderGeneralData gdocWorkOrderGeneralData = new GDocWorkOrderGeneralData();
                getWorkOrderGeneralValues = terraScanService.F8910_GetWorkOrderGeneral(workorderId);
                gdocWorkOrderGeneralData.ReadXml(Utilities.SharedFunctions.XmlParser(getWorkOrderGeneralValues));
                return gdocWorkOrderGeneralData;
            }
            else
            {
                return Helper.F8910_GetWorkOrderGeneral(workorderId);
            }
        }

        #endregion Get GDoc Work order General

        #region Save GDoc Work order General

        /// <summary>
        /// Save work order general values for F8910.
        /// </summary>
        /// <param name="workOrderGeneral">The work order general.</param>
        /// <param name="userId">UserID</param>
        /// <returns>Typed DataSet containing the GDoc Work order General Values</returns>
        public static GDocWorkOrderGeneralData F8910_SaveWorkOrderGeneral(string workOrderGeneral, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string saveWorkOrderGeneralValues;
                GDocWorkOrderGeneralData gdocWorkOrderGeneralData = new GDocWorkOrderGeneralData();
                saveWorkOrderGeneralValues = terraScanService.F8910_SaveWorkOrderGeneral(workOrderGeneral, userId);
                gdocWorkOrderGeneralData.ReadXml(Utilities.SharedFunctions.XmlParser(saveWorkOrderGeneralValues));
                return gdocWorkOrderGeneralData;
            }
            else
            {
                return Helper.F8910_SaveWorkOrderGeneral(workOrderGeneral, userId);
            }
        }

        #endregion Save GDoc Work order General

        #endregion GDoc Work order General

        #region 8106 Stoppage Event Details

        #region Get stoppage Event Details
        /// <summary>
        /// Gets the Stoppage event Footer Data
        /// </summary>
        /// <param name="eventId">eventId</param>
        /// <returns>Typed DataSet </returns>
        public static StoppageEventData F8106_GetStoppageEventDetails(int eventId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string getGDocStoppageEventDetails;
                StoppageEventData stoppageEventData = new StoppageEventData();
                getGDocStoppageEventDetails = terraScanService.F8016_GetStoppageEventDetails(eventId);
                stoppageEventData.ReadXml(Utilities.SharedFunctions.XmlParser(getGDocStoppageEventDetails));
                return stoppageEventData;
            }
            else
            {
                return Helper.F8016_GetStoppageEventDetails(eventId);
            }
        }
        #endregion Get stoppage Event Details

        #region Save Stoppage Event Details
        /// <summary>
        /// Stoppage Event details passed to Web Service to be inserted into DB
        /// </summary>
        /// <param name="eventItems">Stoppage event details as XML of type string</param>
        /// <param name="userId">UserID</param>
        /// <returns>Typed DataSet</returns>
        public static StoppageEventData F8106_SaveStoppageEventDetails(string eventItems, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string saveStoppageEventDetails;
                StoppageEventData stoppageEventData = new StoppageEventData();
                saveStoppageEventDetails = terraScanService.F8016_SaveStoppageEventDetails(eventItems, userId);
                stoppageEventData.ReadXml(Utilities.SharedFunctions.XmlParser(saveStoppageEventDetails));
                return stoppageEventData;
            }
            else
            {
                return Helper.F8016_SaveStoppageEventDetails(eventItems, userId);
            }
        }
        #endregion Save Stoppage Event Details
        #endregion 8106 Stoppage Event Details

        #region 8042 Time Footer
        /// <summary>
        /// Gets the Time Footer Data
        /// </summary>
        /// <param name="eventId">eventId</param>
        /// <param name="formId">The form id.</param>
        /// <returns>TimeFooterData Typed Dataset</returns>
        public static TimeFooterData F8042_GetTimeFooterDetails(int eventId, int formId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string getTimeFooterDetails;
                TimeFooterData timeFooterData = new TimeFooterData();
                getTimeFooterDetails = terraScanService.F8042_GetTimeFooterDetails(eventId, formId);
                timeFooterData.ReadXml(Utilities.SharedFunctions.XmlParser(getTimeFooterDetails));
                return timeFooterData;
            }
            else
            {
                return Helper.F8042_GetTimeFooterDetails(eventId, formId);
            }
        }
        #endregion 8042 Time Footer

        #region Receipt Management UserControl

        /// <summary>
        /// Gets the receipt header details.
        /// </summary>
        /// <param name="receiptId">The receipt id.</param>
        /// <returns>ReceiptHeaderData Typed Dataset</returns>
        public static F15100ReceiptHeaderData GetReceiptHeaderDetails(int receiptId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string getReceiptHeaderDetails;
                F15100ReceiptHeaderData form15100ReceiptHeaderData = new F15100ReceiptHeaderData();
                getReceiptHeaderDetails = terraScanService.GetReceiptHeaderDetails(receiptId);
                form15100ReceiptHeaderData.ReadXml(Utilities.SharedFunctions.XmlParser(getReceiptHeaderDetails));
                return form15100ReceiptHeaderData;
            }
            else
            {
                return Helper.GetReceiptHeaderDetails(receiptId);
            }
        }

        /// <summary>
        /// Gets the receipt header details.
        /// </summary>
        /// <param name="receiptId">The receipt id.</param>
        /// <returns>ReceiptHeaderData Typed Dataset</returns>
        public static F15100ReceiptHeaderData GetReceiptListDetails(int receiptId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string getReceiptHeaderDetails;
                F15100ReceiptHeaderData form15100ReceiptHeaderData = new F15100ReceiptHeaderData();
                getReceiptHeaderDetails = terraScanService.GetReceiptListDetails(receiptId);
                form15100ReceiptHeaderData.ReadXml(Utilities.SharedFunctions.XmlParser(getReceiptHeaderDetails));
                return form15100ReceiptHeaderData;
            }
            else
            {
                return Helper.GetReceiptListDetails(receiptId);
            }
        }

        #region Save Receipt Header

        /// <summary>
        /// F15100_s the save receipt headerreceipt number.
        /// </summary>
        /// <param name="receiptId">The receipt id.</param>
        /// <param name="receiptNumber">The receipt number.</param>
        /// <param name="userId">The user id.</param>
        public static void F15100_SaveReceiptHeaderreceiptNumber(int receiptId, string receiptNumber, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                terraScanService.F15100_SaveReceiptHeaderreceiptNumber(receiptId, receiptNumber, userId);
            }
            else
            {
                Helper.F15100_SaveReceiptHeaderreceiptNumber(receiptId, receiptNumber, userId);
            }
        }

        #endregion Save Receipt Header

        /// <summary>
        /// Lists the receipt items.
        /// </summary>
        /// <param name="receiptId">The receipt id.</param>
        /// <returns>Returns Receipt Item</returns>
        public static F15101ReceiptItemsData ListReceiptItems(int receiptId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string listReceiptItems;
                F15101ReceiptItemsData form15101ReceiptItemsData = new F15101ReceiptItemsData();
                listReceiptItems = terraScanService.ListReceiptItems(receiptId);
                form15101ReceiptItemsData.ReadXml(Utilities.SharedFunctions.XmlParser(listReceiptItems));
                return form15101ReceiptItemsData;
            }
            else
            {
                return Helper.ListReceiptItems(receiptId);
            }
        }

        #region Update Transaction Items

        /// <summary>
        /// F15101_s the update transaction items.
        /// </summary>
        /// <param name="transactionItems">The transaction items.</param>
        /// <param name="userId">The user id.</param>
        /// <returns>the status.</returns>
        public static int F15101_UpdateTransactionItems(string transactionItems, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F15101_UpdateTransactionItems(transactionItems, userId);
            }
            else
            {
                return Helper.F15101_UpdateTransactionItems(transactionItems, userId);
            }
        }

        #endregion Update Transaction Items

        /// <summary>
        /// Gets the receipt statement header details.
        /// </summary>
        /// <param name="receiptId">The receipt id.</param>
        /// <returns>ReceiptStatementHeader Typed Dataset</returns>
        public static F15102ReceiptStatementHeaderData GetReceiptStatementHeaderDetails(int receiptId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string getReceiptStatementHeaderDetails;
                F15102ReceiptStatementHeaderData formF15102ReceiptStatementHeaderData = new F15102ReceiptStatementHeaderData();
                getReceiptStatementHeaderDetails = terraScanService.GetReceiptStatementHeaderDetails(receiptId);
                formF15102ReceiptStatementHeaderData.ReadXml(Utilities.SharedFunctions.XmlParser(getReceiptStatementHeaderDetails));
                return formF15102ReceiptStatementHeaderData;
            }
            else
            {
                return Helper.GetReceiptStatementHeaderDetails(receiptId);
            }
        }

        /// <summary>
        /// Lists the receipt owners.
        /// </summary>
        /// <param name="receiptId">The receipt id.</param>
        /// <returns></returns>
        public static F15103ReceiptOwnersData ListReceiptOwners(int receiptId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string listReceiptOwners;
                F15103ReceiptOwnersData formF15103ReceiptOwnersData = new F15103ReceiptOwnersData();
                listReceiptOwners = terraScanService.ListReceiptOwners(receiptId);
                formF15103ReceiptOwnersData.ReadXml(Utilities.SharedFunctions.XmlParser(listReceiptOwners));
                return formF15103ReceiptOwnersData;
            }
            else
            {
                return Helper.ListReceiptOwners(receiptId);
            }
        }

        #endregion Receipt Management UserControl

        #region 8046 Materials Footer
        /// <summary>
        /// Gets the Materials Footer Data
        /// </summary>
        /// <param name="eventId">eventId</param>
        /// <param name="formId">The form id.</param>
        /// <returns>MaterialsFooterData Typed Dataset</returns>
        public static MaterialsFooterData F8046_GetMaterialsFooterDetails(int eventId, int formId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string getMaterialsFooterDetails;
                MaterialsFooterData materialsFooterData = new MaterialsFooterData();
                getMaterialsFooterDetails = terraScanService.F8046_GetMaterialsFooterDetails(eventId, formId);
                materialsFooterData.ReadXml(Utilities.SharedFunctions.XmlParser(getMaterialsFooterDetails));
                return materialsFooterData;
            }
            else
            {
                return Helper.F8046_GetMaterialsFooterDetails(eventId, formId);
            }
        }
        #endregion 8046 Materials Footer

        #region 27007 parcelheaderslim
        /// <summary>
        /// Gets the 27007 parcelheaderslim Data
        /// </summary>
        /// <param name="parcelId">The parcel id.</param>
        /// <returns>MaterialsFooterData Typed Dataset</returns>
        public static F27007ParcelHeaderSlimData F27007_GetParcelHeaderSlimDetails(int parcelId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string getParcelHeaderSlimDetails;
                F27007ParcelHeaderSlimData parcelHeaderSlimData = new F27007ParcelHeaderSlimData();
                getParcelHeaderSlimDetails = terraScanService.F27007_GetParcelHeaderSlimDetails(parcelId);
                parcelHeaderSlimData.ReadXml(Utilities.SharedFunctions.XmlParser(getParcelHeaderSlimDetails));
                return parcelHeaderSlimData;
            }
            else
            {
                return Helper.F27007_GetParcelHeaderSlimDetails(parcelId);
            }
        }
        #endregion 27007 parcelheaderslim

        #region GDoc Work Order Engine

        #region GetSystemID

        /// <summary>
        /// Gets the system id.
        /// </summary>
        /// <param name="userId">The user id.</param>
        /// <param name="formNumber">The form number.</param>
        /// <returns>The System Id</returns>
        public static int GetSystemId(int userId, int formNumber)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.GetSystemId(userId, formNumber);
            }
            else
            {
                return Helper.GetSystemId(userId, formNumber);
            }
        }
        #endregion GetSystemID

        #region GetWorkOrderEngine

        /// <summary>
        /// Gets the work order engine.
        /// </summary>
        /// <param name="systemId">The system id.</param>
        /// <param name="isopen">The is open.</param>
        /// <returns>Typed Dataset containing the Work Order Engine Values</returns>
        public static GDocWorkOrderEngineData F8901_GetWorkOrderEngine(int systemId, int isopen)
        {
            if (WSHelper.IsOnLineMode)
            {
                string getWorkOrderEngineValues;
                GDocWorkOrderEngineData gdocWorkOrderEngineData = new GDocWorkOrderEngineData();
                getWorkOrderEngineValues = terraScanService.F8901_GetWorkOrderEngine(systemId, isopen);
                gdocWorkOrderEngineData.ReadXml(Utilities.SharedFunctions.XmlParser(getWorkOrderEngineValues));
                return gdocWorkOrderEngineData;
            }
            else
            {
                return Helper.F8901_GetWorkOrderEngine(systemId, isopen);
            }
        }

        #endregion GetWorkOrderEngine

        #region GetWorkOrderType

        /// <summary>
        /// Gets the type of the work order.
        /// </summary>
        /// <param name="systemId">The system id.</param>        
        /// <returns>Typed Dataset containing the Work Order Type Values</returns>
        public static GDocWorkOrderEngineData F8901_GetWorkOrderType(int systemId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string getWorkOrderTypeValues;
                GDocWorkOrderEngineData gdocWorkOrderEngineData = new GDocWorkOrderEngineData();
                getWorkOrderTypeValues = terraScanService.F8901_GetWorkOrderType(systemId);
                gdocWorkOrderEngineData.ReadXml(Utilities.SharedFunctions.XmlParser(getWorkOrderTypeValues));
                return gdocWorkOrderEngineData;
            }
            else
            {
                return Helper.F8901_GetWorkOrderType(systemId);
            }
        }

        #endregion GetWorkOrderType

        #region SaveWorkOrderEngine

        /// <summary>
        /// Saves the work order engine.
        /// </summary>
        /// <param name="workOrderItems">The work order items.</param>
        /// <param name="userId">UserID</param>
        /// <returns>Typed Dataset containing the Work Order Engine Values</returns>
        public static GDocWorkOrderEngineData F8901_SaveWorkOrderEngine(string workOrderItems, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string saveWorkOrderEngineValues;
                GDocWorkOrderEngineData gdocWorkOrderEngineData = new GDocWorkOrderEngineData();
                saveWorkOrderEngineValues = terraScanService.F8901_SaveWorkOrderEngine(workOrderItems, userId);
                gdocWorkOrderEngineData.ReadXml(Utilities.SharedFunctions.XmlParser(saveWorkOrderEngineValues));
                return gdocWorkOrderEngineData;
            }
            else
            {
                return Helper.F8901_SaveWorkOrderEngine(workOrderItems, userId);
            }
        }

        #endregion SaveWorkOrderEngine

        #endregion GDoc Work Order Engine

        #region MakeDeposits

        #region GetPaymentItemsDeails

        /// <summary>
        /// lists the PaymentItmes Details
        /// </summary>
        /// <returns>The typed dataset containing the PaymentItems Details</returns>
        public static MakeDepositsData GetPaymentItemsDetails()
        {
            if (WSHelper.IsOnLineMode)
            {
                string paymentItemsValue;
                MakeDepositsData makeDepositsData = new MakeDepositsData();
                paymentItemsValue = terraScanService.GetPaymentItemsDetails();
                makeDepositsData.ReadXml(Utilities.SharedFunctions.XmlParser(paymentItemsValue));
                return makeDepositsData;
            }
            else
            {
                return Helper.GetPaymentItemsDetails();
            }
        }

        #endregion

        #region SavePaymentItemsDetails

        /// <summary>
        /// Saves the payment items details.
        /// </summary>
        /// <param name="registerId">The register id.</param>
        /// <param name="amount">The amount.</param>
        /// <param name="userId">The user id.</param>
        /// <param name="paymentItemsDetails">The payment items details.</param>
        public static void SavePaymentItemsDetails(int registerId, decimal amount, int userId, string paymentItemsDetails)
        {
            if (WSHelper.IsOnLineMode)
            {
                terraScanService.SavePaymentItemsDetails(registerId, amount, userId, paymentItemsDetails);
            }
            else
            {
                Helper.SavePaymentItemsDetails(registerId, amount, userId, paymentItemsDetails);
            }
        }

        #endregion

        #endregion

        #region PostingHistory

        #region ListPostTypes

        /// <summary>
        /// Lists the post types.
        /// </summary>
        /// <param name="form">The form.</param>
        /// <returns>ListPostTypeDataTable</returns>
        public static PostingHistoryData.ListPostTypeDataTable ListPostTypes(int form)
        {
            if (WSHelper.IsOnLineMode)
            {
                string postingType;
                PostingHistoryData postingHistoryData = new PostingHistoryData();
                postingType = terraScanService.ListPostTypes(form);
                postingHistoryData.ReadXml(Utilities.SharedFunctions.XmlParser(postingType));
                return postingHistoryData.ListPostType;
            }
            else
            {
                PostingHistoryData.ListPostTypeDataTable postingHistoryData = new PostingHistoryData.ListPostTypeDataTable();
                postingHistoryData = Helper.ListPostTypes(form);
                return postingHistoryData;
            }
        }

        #endregion

        #region ListPostingHistory

        /// <summary>
        /// Lists the posting history.
        /// </summary>
        /// <param name="count">The count.</param>
        /// <param name="postTypeID">The post type ID.</param>
        /// <returns>ListPostingHistoryDataTable</returns>
        public static PostingHistoryData.ListPostingHistoryDataTable ListPostingHistory(int count, int postTypeID)
        {
            if (WSHelper.IsOnLineMode)
            {
                string postingHistory;
                PostingHistoryData postingHistoryData = new PostingHistoryData();
                postingHistory = terraScanService.ListPostingHistory(count, postTypeID);
                postingHistoryData.ReadXml(Utilities.SharedFunctions.XmlParser(postingHistory));
                return postingHistoryData.ListPostingHistory;
            }
            else
            {
                PostingHistoryData.ListPostingHistoryDataTable postingHistoryData = new PostingHistoryData.ListPostingHistoryDataTable();
                postingHistoryData = Helper.ListPostingHistory(count, postTypeID);
                return postingHistoryData;
            }
        }

        #endregion

        #endregion

        #region PostingErrors

        #region ListPostErrors

        /// <summary>
        /// Lists the posting errors.
        /// </summary>
        /// <param name="userId">The user id.</param>
        /// <returns>ListPostingErrors</returns>
        public static PostingErrorsData ListPostingErrors(int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string postingErrors;
                PostingErrorsData postingErrorsData = new PostingErrorsData();
                postingErrors = terraScanService.ListPostingErrors(userId);
                postingErrorsData.ReadXml(Utilities.SharedFunctions.XmlParser(postingErrors));
                return postingErrorsData;
            }
            else
            {
                return Helper.ListPostErrors(userId);
            }
        }

        #endregion

        #region InsertAccount

        /// <summary>
        /// Inserts the account.
        /// </summary>
        /// <param name="userId">The user id.</param>
        /// <param name="errorTypeId">The error type id.</param>
        public static void InsertAccount(int userId, int errorTypeId)
        {
            if (WSHelper.IsOnLineMode)
            {
                terraScanService.InsertAccount(userId, errorTypeId);
            }
            else
            {
                Helper.InsertAccount(userId, errorTypeId);
            }
        }

        #endregion

        #endregion

        #region Posting

        #region List PostTypes

        /// <summary>
        /// Lists the post types.
        /// </summary>
        /// <returns>PostingHistoryComp.ListPostTypesData</returns>
        public static PostingData ListPostTypes()
        {
            if (WSHelper.IsOnLineMode)
            {
                string postingType;
                PostingData postingData = new PostingData();
                postingType = terraScanService.ListPostingQueue();
                postingData.ReadXml(Utilities.SharedFunctions.XmlParser(postingType));
                return postingData;
            }
            else
            {
                return Helper.ListPostTypes();
            }
        }

        #endregion

        #region List PreviewPosting

        /// <summary>
        /// Lists the preview posting.
        /// </summary>
        /// <param name="postDate">The post date.</param>
        /// <returns>returns dataset containg PreviewPosting details</returns>
        public static PostingData ListPreviewPosting(DateTime postDate)
        {
            if (WSHelper.IsOnLineMode)
            {
                string postingPreview;
                PostingData postingData = new PostingData();
                postingPreview = terraScanService.ListPreviewPosting(postDate);
                postingData.ReadXml(Utilities.SharedFunctions.XmlParser(postingPreview));
                return postingData;
            }
            else
            {
                return Helper.ListPreviewPosting(postDate);
            }
        }

        #endregion

        #region Delete

        /// <summary>
        /// Clears the temporary records.
        /// </summary>
        /// <param name="userId">The user id.</param>
        public static void ClearTemporaryRecords(int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                terraScanService.ClearTemporaryRecords(userId);
            }
            else
            {
                Helper.ClearTemporaryRecords(userId);
            }
        }

        #endregion Delete

        #region Save

        /// <summary>
        /// Compiles the posting record set.
        /// </summary>
        /// <param name="postDate">The post date.</param>
        /// <param name="selectedPostTypes">The selected post types.</param>
        /// <param name="userId">The user id.</param>
        /// <returns>the PostingData</returns>
        public static PostingData CompilePostingRecordSet(DateTime postDate, string selectedPostTypes, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string postingErrorCount;
                PostingData postingData = new PostingData();
                postingErrorCount = terraScanService.CompilePostingRecordSet(postDate, selectedPostTypes, userId);
                postingData.ReadXml(Utilities.SharedFunctions.XmlParser(postingErrorCount));
                return postingData;
            }
            else
            {
                return Helper.CompilePostingRecordSet(postDate, selectedPostTypes, userId);
            }
        }

        /// <summary>
        /// Performs the posting.
        /// </summary>
        /// <param name="postDate">The post date.</param>
        /// <param name="selectedPostTypes">The selected post types.</param>
        /// <param name="userId">The user id.</param>
        /// <returns>PostingData</returns>
        public static PostingData PerformPosting(DateTime postDate, string selectedPostTypes, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string postLocksCount;
                PostingData postingData = new PostingData();
                postLocksCount = terraScanService.PerformPosting(postDate, selectedPostTypes, userId);
                postingData.ReadXml(Utilities.SharedFunctions.XmlParser(postLocksCount));
                return postingData;
            }
            else
            {
                return Helper.PerformPosting(postDate, selectedPostTypes, userId);
            }
        }

        #endregion Save

        #endregion

        #region Reverse GL Post

        #region Get PostId Details

        /// <summary>
        /// Gets the post id details.
        /// </summary>
        /// <param name="postId">The post id.</param>
        /// <returns>postIdDetails</returns>
        public static PostIdDetailsData GetPostIdDetails(int postId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string postIdDetails;
                PostIdDetailsData postIdDetailsData = new PostIdDetailsData();
                postIdDetails = terraScanService.GetPostIdDetails(postId);
                postIdDetailsData.ReadXml(Utilities.SharedFunctions.XmlParser(postIdDetails));
                return postIdDetailsData;
            }
            else
            {
                return Helper.GetPostIdDetails(postId);
            }
        }

        #endregion

        #region Inset Reverse GL Post

        /// <summary>
        /// Inserts the reverse GL post.
        /// </summary>
        /// <param name="postId">The post id.</param>
        /// <param name="userId">The user id.</param>
        public static void InsertReverseGLPost(int postId, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                terraScanService.InsertReverseGLPost(postId, userId);
            }
            else
            {
                Helper.InsertReverseGLPost(postId, userId);
            }
        }

        #endregion

        #endregion

        #region Sanitary Pipe Inspection

        #region Get Event Properties

        /// <summary>
        /// Gets the Event Properties
        /// </summary>
        /// <param name="eventId">The event id.</param>
        /// <returns>returns dataset contains Event Properties Details</returns>
        public static SanitaryPipeInspectionData GetEventEngineEventProperties(int eventId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string getEventEngineEventPropertiesValue;
                SanitaryPipeInspectionData sanitaryPipeInspectionData = new SanitaryPipeInspectionData();
                getEventEngineEventPropertiesValue = terraScanService.GetEventEngineEventProperties(eventId);
                sanitaryPipeInspectionData.ReadXml(Utilities.SharedFunctions.XmlParser(getEventEngineEventPropertiesValue));
                return sanitaryPipeInspectionData;
            }
            else
            {
                return Helper.GetEventEngineEventProperties(eventId);
            }
        }

        #endregion

        #region Save Event Properties

        /// <summary>
        /// Save the ExciseTaxRate
        /// </summary>
        /// <param name="eventItems">The event items.</param>
        /// <param name="userId">UserID</param>
        public static void SaveEventEngineEventProperties(string eventItems, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                terraScanService.SaveEventEngineEventProperties(eventItems, userId);
            }
            else
            {
                Helper.SaveEventEngineEventProperties(eventItems, userId);
            }
        }

        #endregion

        #endregion

        #region Sanitary Pipe Inspection Details

        #region List Event Engine TV Details

        /// <summary>
        /// Lists the EventEngineTVDetails
        /// </summary>
        /// <param name="eventId">The event id.</param>
        /// <returns>returns dataset contains EventEngine TVDetails</returns>
        public static SanitaryPipeInspectionDetailsData ListEventEngineTVDetails(int eventId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string listEventEngineTVDetailsValue;
                SanitaryPipeInspectionDetailsData sanitaryPipeInspectionDetailsData = new SanitaryPipeInspectionDetailsData();
                listEventEngineTVDetailsValue = terraScanService.ListEventEngineTVDetails(eventId);
                sanitaryPipeInspectionDetailsData.ReadXml(Utilities.SharedFunctions.XmlParser(listEventEngineTVDetailsValue));
                return sanitaryPipeInspectionDetailsData;
            }
            else
            {
                return Helper.ListEventEngineTVDetails(eventId);
            }
        }

        #endregion

        #region List EventEngine Detail Types

        /// <summary>
        /// Lists the EventEngine DetailTypes
        /// </summary>
        /// <returns>returns dataset contains DetailTypes</returns>
        public static SanitaryPipeInspectionDetailsData ListEventEngineDetailTypes()
        {
            if (WSHelper.IsOnLineMode)
            {
                string listEventEngineDetailTypesValue;
                SanitaryPipeInspectionDetailsData sanitaryPipeInspectionDetailsData = new SanitaryPipeInspectionDetailsData();
                listEventEngineDetailTypesValue = terraScanService.ListEventEngineDetailTypes();
                sanitaryPipeInspectionDetailsData.ReadXml(Utilities.SharedFunctions.XmlParser(listEventEngineDetailTypesValue));
                return sanitaryPipeInspectionDetailsData;
            }
            else
            {
                return Helper.ListEventEngineDetailTypes();
            }
        }

        #endregion

        #region Save EventEngine TV Details

        /// <summary>
        /// Save the ExciseTaxRate
        /// </summary>
        /// <param name="eventItems">The event items.</param>
        /// <param name="userId">UserID</param>
        public static void SaveEventEngineTVDetails(string eventItems, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                terraScanService.SaveEventEngineTVDetails(eventItems, userId);
            }
            else
            {
                Helper.SaveEventEngineTVDetails(eventItems, userId);
            }
        }

        #endregion

        #region Update EventEngine TV Details

        /// <summary>
        /// Updates the Event Engine TV Details
        /// </summary>
        /// <param name="eventItems">The event items.</param>
        /// <param name="userId">UserID</param>
        public static void UpdateEventEngineTVDetails(string eventItems, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                terraScanService.UpdateEventEngineTVDetails(eventItems, userId);
            }
            else
            {
                Helper.UpdateEventEngineTVDetails(eventItems, userId);
            }
        }

        #endregion

        #region Delete Excise Tax Rate

        /// <summary>
        /// Deletes the excise tax rate.
        /// </summary>
        /// <param name="detailId">The detail id.</param>
        /// <param name="userId">UserID</param>
        /// <returns>The return value specifying status of the delete action.</returns>
        public static int DeleteEventEngineTVDetails(int detailId, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.DeleteEventEngineTVDetails(detailId, userId);
            }
            else
            {
                return Helper.DeleteEventEngineTVDetails(detailId, userId);
            }
        }
        #endregion

        #endregion

        #region FormMaster

        #region GetSandwichAndItsSliceInformation

        /// <summary>
        /// Gets the sandwich and its slice information.
        /// </summary>
        /// <param name="form">The form.</param>
        /// <param name="keyId">The key id.</param>
        /// <param name="userId">The user id.</param>
        /// <returns>FormMaster</returns>
        public static FormMasterData GetSandwichAndItsSliceInformation(int form, int keyId, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string formMasterDataValue;
                FormMasterData formMasterDataSet = new FormMasterData();
                formMasterDataValue = terraScanService.GetSandwichAndItsSliceInformation(form, keyId, userId);
                formMasterDataSet.ReadXml(Utilities.SharedFunctions.XmlParser(formMasterDataValue));
                return formMasterDataSet;
            }
            else
            {
                return Helper.GetSandwichAndItsSliceInformation(form, keyId, userId);
            }
        }

        #endregion GetSandwichAndItsSliceInformation

        #region GetSandwichSubTitleInformation


        /// <summary>
        /// Gets the sandwich sub title information.
        /// </summary>
        /// <param name="form">The form.</param>
        /// <param name="keyId">The key id.</param>
        /// <param name="userId">The user id.</param>
        /// <returns>Sandwich details</returns>
        public static FormMasterData GetSandwichSubTitleInformation(int form, int keyId, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string formMasterDataValue;
                FormMasterData formMasterDataSet = new FormMasterData();
                formMasterDataValue = terraScanService.GetSandwichSubTitleInformation(form, keyId, userId);
                formMasterDataSet.ReadXml(Utilities.SharedFunctions.XmlParser(formMasterDataValue));
                return formMasterDataSet;
            }
            else
            {
                return Helper.GetSandwichSubTitleInformation(form, keyId, userId);
            }
        }

        #endregion GetSandwichSubTitleInformation

        #endregion FormMaster

        #region SupportForm

        #region GetFormDetails

        /// <summary>
        /// Gets the FormDetails
        /// </summary>
        /// <param name="form">The form.</param>
        /// <param name="userId">UserName</param>
        /// <returns>SupportFormData Dataset</returns>
        public static SupportFormData GetFormDetails(int form, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string supportFormValue;
                SupportFormData supportForm = new SupportFormData();
                supportFormValue = terraScanService.GetFormDetails(form, userId);
                supportForm.ReadXml(Utilities.SharedFunctions.XmlParser(supportFormValue));
                return supportForm;
            }
            else
            {
                return Helper.GetFormDetails(form, userId);
            }
        }
        /// <summary>
        /// Gets the ParcelDetails
        /// </summary>
        /// <param name="keyId">The Key ID.</param>
        /// <returns>ParcelDetails Dataset</returns>
        public static F25006ParcelNavigation GetParcelDetails(int keyID, bool IsNext)
        {
            if (WSHelper.IsOnLineMode)
            {
                string parcelNum;
                F25006ParcelNavigation parcelDetails = new F25006ParcelNavigation();
                parcelNum = terraScanService.GetParcelDetails(keyID, IsNext);
                parcelDetails.ReadXml(Utilities.SharedFunctions.XmlParser(parcelNum));
                return parcelDetails;

            }
            else
            {
                return Helper.GetParcelDetails(keyID, IsNext);
            }
        }
        /// <summary>
        /// Gets the translated form details.
        /// </summary>
        /// <param name="formNo">The form no.</param>
        /// <param name="keyValue">The key value.</param>
        /// <returns>DataSet</returns>
        public static SupportFormData GetTranslatedFormDetails(int formNo, string keyValue)
        {
            if (WSHelper.IsOnLineMode)
            {
                string supportFormValue;
                SupportFormData supportForm = new SupportFormData();
                supportFormValue = terraScanService.GetTranslatedFormDetails(formNo, keyValue);
                supportForm.ReadXml(Utilities.SharedFunctions.XmlParser(supportFormValue));
                return supportForm;
            }
            else
            {
                return Helper.GetTranslatedFormDetails(formNo, keyValue);
            }
        }

        /// <summary>
        /// F9002_s the get form management details.
        /// </summary>
        /// <param name="form">The form.</param>
        /// <param name="userId">The user id.</param>
        /// <returns>String</returns>
        public static SupportFormData F9002_GetFormManagementDetails(int form, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string getFormManagementDetailsValue;
                SupportFormData supportForm = new SupportFormData();
                getFormManagementDetailsValue = terraScanService.F9002_GetFormManagementDetails(form, userId);
                supportForm.ReadXml(Utilities.SharedFunctions.XmlParser(getFormManagementDetailsValue));
                return supportForm;
            }
            else
            {
                return Helper.F9002_GetFormManagementDetails(form, userId);
            }
        }

        #endregion

        #region ListUserNames

        /// <summary>
        /// List UserNames
        /// </summary>
        /// <returns>SupportFormData Dataset</returns>
        public static SupportFormData ListUserNames()
        {
            if (WSHelper.IsOnLineMode)
            {
                string supportFormValue;
                SupportFormData supportForm = new SupportFormData();
                supportFormValue = terraScanService.ListUserNames();
                supportForm.ReadXml(Utilities.SharedFunctions.XmlParser(supportFormValue));
                return supportForm;
            }
            else
            {
                return Helper.ListUserNames();
            }
        }

        #endregion

        #endregion

        #region Deposit History

        #region List DepositHistroy Details

        /// <summary>
        /// Lists the deposit history details.
        /// </summary>
        /// <returns>the DataSet Which Holds the DepositHistoryDetails</returns>
        public static DepositHistoryData ListDepositHistoryDetails()
        {
            if (WSHelper.IsOnLineMode)
            {
                string depositHistoryValue;
                DepositHistoryData depositHistoryData = new DepositHistoryData();
                depositHistoryValue = terraScanService.ListDepositHistoryDetails();
                depositHistoryData.ReadXml(Utilities.SharedFunctions.XmlParser(depositHistoryValue));
                return depositHistoryData;
            }
            else
            {
                return Helper.ListDepositHistoryDetails();
            }
        }

        #endregion

        #region Get DepositHistory Serach Results

        /// <summary>
        /// Gets the deposit history search result.
        /// </summary>
        /// <param name="form">The form.</param>
        /// <param name="whereCondnSql">The where condn SQL.</param>
        /// <returns>DepositHistoryDataSet contains the resulted Search</returns>
        public static DepositHistoryData GetDepositHistorySearchResult(int form, string whereCondnSql)
        {
            if (WSHelper.IsOnLineMode)
            {
                string depositHistorySearchValue;
                DepositHistoryData depositHistoryData = new DepositHistoryData();
                depositHistorySearchValue = terraScanService.GetDepositHistorySearchResult(form, whereCondnSql);
                depositHistoryData.ReadXml(Utilities.SharedFunctions.XmlParser(depositHistorySearchValue));
                return depositHistoryData;
            }
            else
            {
                return Helper.GetDepositHistorySearchResult(form, whereCondnSql);
            }
        }

        #endregion

        #region Update Deposit History

        /// <summary>
        /// Updates the deposit history.
        /// </summary>
        /// <param name="clid">The clid.</param>
        /// <param name="userId">The user id.</param>
        public static void UpdateDepositHistory(int clid, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                terraScanService.UpdateDepositHistory(clid, userId);
            }
            else
            {
                Helper.UpdateDepositHistory(clid, userId);
            }
        }

        #endregion

        #region List AccontNames

        /// <summary>
        /// Lists the account names.
        /// </summary>
        /// <returns>The dataset containing the AccountNames.</returns>
        public static DepositHistoryData.ListAccountNameDataTable ListAccountNames()
        {
            if (WSHelper.IsOnLineMode)
            {
                string depositHistoryAccountNamesValue;
                DepositHistoryData depositHistoryData = new DepositHistoryData();
                depositHistoryAccountNamesValue = terraScanService.ListAccountNames();
                depositHistoryData.ReadXml(Utilities.SharedFunctions.XmlParser(depositHistoryAccountNamesValue));
                return depositHistoryData.ListAccountName;
            }
            else
            {
                DepositHistoryData.ListAccountNameDataTable depositHistoryData = new DepositHistoryData.ListAccountNameDataTable();
                depositHistoryData = Helper.ListAccountNames();
                return depositHistoryData;
            }
        }

        #endregion

        #endregion

        #region Linear Event Type

        #region Get Linear Event Type

        /// <summary>
        /// Gets the Linear Event Properties
        /// </summary>
        /// <param name="eventId">The event id.</param>
        /// <returns>returns dataset contains Linear Event Properties</returns>
        public static LinearEventData GetLinearEventType(int eventId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string getLinearEventTypeValue;
                LinearEventData linearEventData = new LinearEventData();
                getLinearEventTypeValue = terraScanService.GetLinearEventType(eventId);
                linearEventData.ReadXml(Utilities.SharedFunctions.XmlParser(getLinearEventTypeValue));
                return linearEventData;
            }
            else
            {
                return Helper.GetLinearEventType(eventId);
            }
        }

        #endregion

        #region Save Linear Event Type

        /// <summary>
        /// Save the Linear Event Type
        /// </summary>
        /// <param name="eventItems">The event items.</param>
        /// <param name="userId">UserID</param>
        public static void SaveLinearEventType(string eventItems, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                terraScanService.SaveLinearEventType(eventItems, userId);
            }
            else
            {
                Helper.SaveLinearEventType(eventItems, userId);
            }
        }

        #endregion

        #endregion

        #region Point Event Type

        #region Get Point Event Type

        /// <summary>
        /// Gets the Point Event Properties
        /// </summary>
        /// <param name="eventId">The event id.</param>
        /// <returns>returns dataset contains Point Event Properties</returns>
        public static PointEventData GetPointEventType(int eventId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string getPointEventTypeValue;
                PointEventData pointEventData = new PointEventData();
                getPointEventTypeValue = terraScanService.GetPointEventType(eventId);
                pointEventData.ReadXml(Utilities.SharedFunctions.XmlParser(getPointEventTypeValue));
                return pointEventData;
            }
            else
            {
                return Helper.GetPointEventType(eventId);
            }
        }

        #endregion

        #region Save Point Event Type

        /// <summary>
        /// Save the Point Event Type
        /// </summary>
        /// <param name="eventItems">The event items.</param>
        /// <param name="userId">UserID</param>
        public static void SavePointEventType(string eventItems, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                terraScanService.SavePointEventType(eventItems, userId);
            }
            else
            {
                Helper.SavePointEventType(eventItems, userId);
            }
        }

        #endregion

        #endregion

        #region 1211 DisbursementCheckStaging

        /// <summary>
        /// Gets the disbursement check list.
        /// </summary>
        /// <returns>DisbursementCheckStagingData dataset</returns>
        public static DisbursementCheckStagingData F1211_GetDisbursementCheckList()
        {
            if (WSHelper.IsOnLineMode)
            {
                string disbursementValue;
                DisbursementCheckStagingData disbursementCheck = new DisbursementCheckStagingData();
                disbursementValue = terraScanService.F1211_GetDisbursementCheckList();
                disbursementCheck.ReadXml(Utilities.SharedFunctions.XmlParser(disbursementValue));
                return disbursementCheck;
            }
            else
            {
                return Helper.F1211_GetDisbursementCheckList();
            }
        }

        /// <summary>
        /// Updates the check staging.
        /// </summary>
        /// <param name="tclId">The TCL id.</param>
        /// <param name="disbursementCheck">The disbursement check.</param>
        /// <param name="checkItems">The check items.</param>
        /// <param name="userId">UserID</param>
        public static void F1211_UpdateCheckStaging(int tclId, string disbursementCheck, string checkItems, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                terraScanService.F1211_UpdateCheckStaging(tclId, disbursementCheck, checkItems, userId);
            }
            else
            {
                Helper.F1211_UpdateCheckStaging(tclId, disbursementCheck, checkItems, userId);
            }
        }

        /// <summary>
        /// Updates the agency valid status.
        /// </summary>
        /// <param name="tclIds">The TCL ids.</param>
        /// <param name="validStatus">The valid status.</param>
        /// <param name="userId">UserID</param>
        public static void F1211_UpdateAgencyValidStatus(string tclIds, int validStatus, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                terraScanService.F1211_UpdateAgencyValidStatus(tclIds, validStatus, userId);
            }
            else
            {
                Helper.F1211_UpdateAgencyValidStatus(tclIds, validStatus, userId);
            }
        }

        /// <summary>
        /// F1211_s the delete check staging.
        /// </summary>
        /// <param name="tclIdDelete">The TCL id delete.</param>
        /// <param name="userId">UserID</param>
        public static void F1211_DeleteCheckStaging(string tclIdDelete, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                terraScanService.F1211_DeleteCheckStaging(tclIdDelete, userId);
            }
            else
            {
                Helper.F1211_DeleteCheckStaging(tclIdDelete, userId);
            }
        }

        /// <summary>
        /// F1211_s the create checks.
        /// </summary>
        /// <param name="userId">The user id.</param>
        /// <param name="createChecksTclId">The create checks TCL id.</param>
        /// <returns>Returns Count</returns>
        public static int F1211_CreateChecks(int userId, string createChecksTclId)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F1211_CreateChecks(userId, createChecksTclId);
            }
            else
            {
                return Helper.F1211_CreateChecks(userId, createChecksTclId);
            }
        }

        #endregion

        #region Inspection Event

        #region List Inspection Details

        /// <summary>
        /// Lists the Inspection Details
        /// </summary>
        /// <param name="eventId">The event id.</param>
        /// <returns>returns dataset contains Inspection Details</returns>
        public static InspectionEventData F8056_ListInspectionDetails(int eventId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string listInspectionDetailsValue;
                InspectionEventData inspectionEventData = new InspectionEventData();
                listInspectionDetailsValue = terraScanService.F8056_ListInspectionDetails(eventId);
                inspectionEventData.ReadXml(Utilities.SharedFunctions.XmlParser(listInspectionDetailsValue));
                return inspectionEventData;
            }
            else
            {
                return Helper.F8056_ListInspectionDetails(eventId);
            }
        }

        #endregion

        #region Save Inspection Details

        /// <summary>
        /// Save the Inspection Details
        /// </summary>
        /// <param name="eventItems">The event items.</param>
        /// <param name="userId">UserID</param>
        public static void F8056_SaveInspectionDetails(string eventItems, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                terraScanService.F8056_SaveInspectionDetails(eventItems, userId);
            }
            else
            {
                Helper.F8056_SaveInspectionDetails(eventItems, userId);
            }
        }

        #endregion

        #region Update Inspection Details

        /// <summary>
        /// Updates the Inspection Details
        /// </summary>
        /// <param name="eventItems">The event items.</param>
        /// <param name="userId">UserID</param>
        public static void F8056_UpdateInspectionDetails(string eventItems, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                terraScanService.F8056_UpdateInspectionDetails(eventItems, userId);
            }
            else
            {
                Helper.F8056_UpdateInspectionDetails(eventItems, userId);
            }
        }

        #endregion

        #region Delete a Inspection Item

        /// <summary>
        /// Deletes the Inspection Item
        /// </summary>
        /// <param name="inspectionId">The inspection id.</param>
        /// <param name="userId">UserID</param>
        /// <returns>The return value specifying status of the delete action.</returns>
        public static int F8056_DeleteInspectionDetails(int inspectionId, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F8056_DeleteInspectionDetails(inspectionId, userId);
            }
            else
            {
                return Helper.F8056_DeleteInspectionDetails(inspectionId, userId);
            }
        }
        #endregion

        #endregion

        #region 1210 Disbursement

        #region List Disbursement Agency/SubFund Details

        /// <summary>
        /// Gets the disbursement details.
        /// </summary>
        /// <param name="postDate">The post date.</param>
        /// <returns>DisbursementDetails</returns>
        public static DisbursementData F1210_GetDisbursementDetails(DateTime postDate)
        {
            if (WSHelper.IsOnLineMode)
            {
                string disbursementValue;
                DisbursementData disbursementData = new DisbursementData();
                disbursementValue = terraScanService.F1210_GetDisbursementDetails(postDate);
                disbursementData.ReadXml(Utilities.SharedFunctions.XmlParser(disbursementValue));
                return disbursementData;
            }
            else
            {
                return Helper.F1210_GetDisbursementDetails(postDate);
            }
        }

        #endregion

        #region List AccontNames

        /// <summary>
        /// Lists the account names.
        /// </summary>
        /// <returns>The dataTable containing the AccountNames.</returns>
        public static DisbursementData.ListAccountNameDataTable F1210_DisbursementAccountNames()
        {
            if (WSHelper.IsOnLineMode)
            {
                string disbursementAccontNameValue;
                DisbursementData disbursementData = new DisbursementData();
                disbursementAccontNameValue = terraScanService.F1210_DisbursementAccountNames();
                disbursementData.ReadXml(Utilities.SharedFunctions.XmlParser(disbursementAccontNameValue));
                return disbursementData.ListAccountName;
            }
            else
            {
                DisbursementData.ListAccountNameDataTable disbursementData = new DisbursementData.ListAccountNameDataTable();
                disbursementData = Helper.F1210_DisbursementAccountNames();
                return disbursementData;
            }
        }

        #endregion

        #region Save Disbursement

        /// <summary>
        /// F1210s the save disbursement.
        /// </summary>
        /// <param name="registerId">The register id.</param>
        /// <param name="userId">The user id.</param>
        /// <param name="postDate">The post date.</param>
        /// <param name="agencies">The agencies.</param>
        /// <param name="overrideStatus">The override status.</param>
        /// <returns>bit Value to Override the Checks</returns>
        public static int F1210_SaveDisbursement(int registerId, int userId, DateTime postDate, string agencies, int overrideStatus)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F1210_SaveDisbursement(registerId, userId, postDate, agencies, overrideStatus);
            }
            else
            {
                return Helper.F1210_SaveDisbursement(registerId, userId, postDate, agencies, overrideStatus);
            }
        }

        #endregion

        #endregion

        #region Refund Management

        #region List AccontNames

        /// <summary>
        /// F1214 the account names.
        /// </summary>
        /// <returns>the datatable contains the Account Names</returns>
        public static RefundManagementData.ListAccountNamesDataTable F1214_AccountNames()
        {
            if (WSHelper.IsOnLineMode)
            {
                string refundManagementAccontNameValue;
                RefundManagementData refundManagementData = new RefundManagementData();
                refundManagementAccontNameValue = terraScanService.F1214_AccountNames();
                refundManagementData.ReadXml(Utilities.SharedFunctions.XmlParser(refundManagementAccontNameValue));
                return refundManagementData.ListAccountNames;
            }
            else
            {
                RefundManagementData.ListAccountNamesDataTable refundManagementData = new RefundManagementData.ListAccountNamesDataTable();
                refundManagementData = Helper.F1214_AccountNames();
                return refundManagementData;
            }
        }

        #endregion

        #region List RefundPayments

        /// <summary>
        /// Lists the refund payments.
        /// </summary>
        /// <param name="form">The form.</param>
        /// <param name="whereCondnSql">The where condn SQL.</param>
        /// <returns>RefundManagement</returns>
        public static RefundManagementData.ListRefundPaymentsDataTable ListRefundPayments(int form, string whereCondnSql)
        {
            if (WSHelper.IsOnLineMode)
            {
                string refundPeaymentsValue;
                RefundManagementData refundManagementData = new RefundManagementData();
                refundPeaymentsValue = terraScanService.F1214_ListRefundPayments(form, whereCondnSql);
                refundManagementData.ReadXml(Utilities.SharedFunctions.XmlParser(refundPeaymentsValue));
                return refundManagementData.ListRefundPayments;
            }
            else
            {
                RefundManagementData refundManagementData = new RefundManagementData();
                refundManagementData.ListRefundPayments.Clear();
                refundManagementData.ListRefundPayments.Merge(Helper.ListRefundPayments(form, whereCondnSql));
                return refundManagementData.ListRefundPayments;
            }
        }

        #endregion

        #region Prepare Checks

        /// <summary>
        /// F1214_s the prepare checks.
        /// </summary>
        /// <param name="registerId">The register id.</param>
        /// <param name="ownerId">The owner id.</param>
        /// <param name="interestDate">The interest date.</param>
        /// <param name="userId">The user id.</param>
        /// <param name="paymentItems">The payment items.</param>
        /// <returns>ErrorID</returns>
        public static int F1214_PrepareChecks(int registerId, int ownerId, DateTime interestDate, int userId, string paymentItems)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F1214_PrepareChecks(registerId, ownerId, interestDate, userId, paymentItems);
            }
            else
            {
                return Helper.F1214_PrepareChecks(registerId, ownerId, interestDate, userId, paymentItems);
            }
        }

        #endregion

        #endregion

        #region Check Detail

        #region Get and List Check Detail

        /// <summary>
        /// Gets the Cash Ledger ID
        /// </summary>
        /// <returns>Cash Ledger ID</returns>
        public static CheckDetailData F1226_ListCashLedger()
        {
            if (WSHelper.IsOnLineMode)
            {
                string cashLedger;
                CheckDetailData checkDetailData = new CheckDetailData();
                cashLedger = terraScanService.F1226_ListCashLedger();
                checkDetailData.ReadXml(Utilities.SharedFunctions.XmlParser(cashLedger));
                return checkDetailData;
            }
            else
            {
                return Helper.F1226_ListCashLedger();
            }
        }

        /// <summary>
        /// Gets the Cash Ledger(check) Detail
        /// </summary>
        /// <param name="clid">The clid.</param>
        /// <returns>CheckDetailData with Cash Ledger Detail</returns>
        public static CheckDetailData F1226_GetCashLedger(int clid)
        {
            if (WSHelper.IsOnLineMode)
            {
                string cashLedger;
                CheckDetailData checkDetailData = new CheckDetailData();
                cashLedger = terraScanService.F1226_GetCashLedger(clid);
                checkDetailData.ReadXml(Utilities.SharedFunctions.XmlParser(cashLedger));
                return checkDetailData;
            }
            else
            {
                return Helper.F1226_GetCashLedger(clid);
            }
        }

        #endregion

        #region Update Check Detail And Status

        /// <summary>
        /// Updates the Cash Ledger
        /// </summary>
        /// <param name="clid">The clid.</param>
        /// <param name="overRide">The over ride.</param>
        /// <param name="checkDetails">The check details.</param>
        /// <param name="userId">UserID</param>
        /// <returns>1 if checkno already exist else 0</returns>
        public static int F1221_UpdateCashLedger(int clid, int overRide, string checkDetails, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F1221_UpdateCashLedger(clid, overRide, checkDetails, userId);
            }
            else
            {
                return Helper.F1221_UpdateCashLedger(clid, overRide, checkDetails, userId);
            }
        }

        /// <summary>
        /// Updates the Cash Ledger Status
        /// </summary>
        /// <param name="clid">The clid.</param>
        /// <param name="userId">The user id.</param>
        /// <param name="functionDate">The function date.</param>
        /// <param name="functionId">The function id.</param>
        /// <param name="loginUserId">UserID</param>
        public static void F1226_UpdateCashLedgerStatus(int clid, int userId, DateTime functionDate, int functionId, int loginUserId)
        {
            if (WSHelper.IsOnLineMode)
            {
                terraScanService.F1226_UpdateCashLedgerStatus(clid, userId, functionDate, functionId, loginUserId);
            }
            else
            {
                Helper.F1226_UpdateCashLedgerStatus(clid, userId, functionDate, functionId, loginUserId);
            }
        }

        #endregion

        #region Delete

        /// <summary>
        /// Delete the Cash Ledger
        /// </summary>
        /// <param name="clid">The clid.</param>
        /// <param name="userId">UserID</param>
        public static void F1226_DeleteCashLedger(int clid, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                terraScanService.F1226_DeleteCashLedger(clid, userId);
            }
            else
            {
                Helper.F1226_DeleteCashLedger(clid, userId);
            }
        }

        #endregion

        #endregion Check Detail

        #region F8902 WorkOrderHeader

        #region Get

        /// <summary>
        /// F8902GetHeader Method
        /// </summary>
        /// <param name="workId">workId</param>
        /// <returns>XML</returns>
        public static F8902HeaderData F8902_GetHeader(int workId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string headerValue;
                F8902HeaderData headerData = new F8902HeaderData();
                headerValue = terraScanService.F8902_GetHeader(workId);
                headerData.ReadXml(Utilities.SharedFunctions.XmlParser(headerValue));
                return headerData;
            }
            else
            {
                return Helper.F8902_GetHeader(workId);
            }
        }

        #endregion

        #region Save

        /// <summary>
        /// F8902 SaveHeader
        /// </summary>
        /// <param name="header">header XML</param>
        /// <param name="userId">UserID</param>
        public static void F8902_SaveHeader(string header, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                terraScanService.F8902_SaveHeader(header, userId);
            }
            else
            {
                Helper.F8902_SaveHeader(header, userId);
            }
        }

        #endregion

        #region Delete

        /// <summary>
        /// F8902Delete Header
        /// </summary>
        /// <param name="workId">workId</param>
        /// <param name="userId">UserID</param>
        public static void F8902_DeleteHeader(int workId, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                terraScanService.F8902_Delete(workId, userId);
            }
            else
            {
                Helper.F8902_DeleteHeader(workId, userId);
            }
        }

        #endregion

        #endregion

        #region 8040 Time

        #region List
        /// <summary>
        /// F8040_s the list time information.
        /// </summary>
        /// <param name="formId">The form id.</param>
        /// <param name="keyId">The key id.</param>
        /// <returns> List of time details of 8040</returns>
        public static F8040TimeData F8040_ListTimeInformation(int formId, int keyId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string timeDetails;
                F8040TimeData timeDataSet = new F8040TimeData();
                timeDetails = terraScanService.F8040_ListTimeInformation(formId, keyId);
                timeDataSet.ReadXml(Utilities.SharedFunctions.XmlParser(timeDetails));
                return timeDataSet;
            }
            else
            {
                return Helper.F8040_ListTimeInformation(formId, keyId);
            }
        }

        /// <summary>
        /// F8040_s the list time information.
        /// </summary>
        /// <param name="isactive">The active value</param>
        /// <returns>ListTimeDataTable</returns>
        public static F8040TimeData F8040_ListTimeResourceInformation(int isactive)
        {
            if (WSHelper.IsOnLineMode)
            {
                string timeDetails;
                F8040TimeData timeDataSet = new F8040TimeData();
                timeDetails = terraScanService.F8040_ListTimeResourceInformation(isactive);
                timeDataSet.ReadXml(Utilities.SharedFunctions.XmlParser(timeDetails));
                return timeDataSet;
            }
            else
            {
                return Helper.F8040_ListTimeResourceInformation(isactive);
            }
        }
        #endregion List

        #region Save
        /// <summary>
        /// F8040_s the save time.
        /// </summary>
        /// <param name="timeDetails">The time details.</param>
        /// <param name="userId">UserID</param>
        public static void F8040_SaveTime(string timeDetails, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                terraScanService.F8040_SaveTime(timeDetails, userId);
            }
            else
            {
                Helper.F8040_SaveTime(timeDetails, userId);
            }
        }
        #endregion Save

        #region Update
        /// <summary>
        /// F8040_s the update time.
        /// </summary>
        /// <param name="timeDetails">The time details.</param>
        /// <param name="userId">UserID</param>
        public static void F8040_UpdateTime(string timeDetails, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                terraScanService.F8040_UpdateTime(timeDetails, userId);
            }
            else
            {
                Helper.F8040_UpdateTime(timeDetails, userId);
            }
        }
        #endregion Update

        #region Delete
        /// <summary>
        /// F8040_s the delete time.
        /// </summary>
        /// <param name="timeId">The time id.</param>
        /// <param name="userId">UserID</param>
        public static void F8040_DeleteTime(int timeId, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                terraScanService.F8040_DeleteTime(timeId, userId);
            }
            else
            {
                Helper.F8040_DeleteTime(timeId, userId);
            }
        }
        #endregion Delete

        #region F8040_CheckEventId

        /// <summary>
        /// F8040_s the check event id.
        /// </summary>
        /// <param name="formId">The form id.</param>
        /// <param name="keyId">The key id.</param>
        /// <returns>Integer</returns>
        public static int F8040_CheckEventId(int formId, int keyId)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F8040_CheckEventId(formId, keyId);
            }
            else
            {
                return Helper.F8040_CheckEventId(formId, keyId);
            }
        }

        #endregion F8040_CheckEventId

        #endregion

        #region 8044 Material

        #region List Event Engine TV Details

        /// <summary>
        /// Lists the EventEngineTVDetails
        /// </summary>
        /// <param name="formId">The form id.</param>
        /// <param name="keyId">The key id.</param>
        /// <returns>returns dataset contains EventEngine TVDetails</returns>
        public static F8044MaterialsData F8044_ListMaterialDetails(int formId, int keyId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string listMatetialDetailsValue;
                F8044MaterialsData materialsData = new F8044MaterialsData();
                listMatetialDetailsValue = terraScanService.F8044_ListMaterialDetails(formId, keyId);
                materialsData.ReadXml(Utilities.SharedFunctions.XmlParser(listMatetialDetailsValue));
                return materialsData;
            }
            else
            {
                return Helper.F8044_ListMaterialDetails(formId, keyId);
            }
        }

        #endregion

        #region List EventEngine Detail Types

        /// <summary>
        /// Lists the EventEngine DetailTypes
        /// </summary>
        /// <param name="flagActiveAndAll">The flag active and all.</param>
        /// <param name="eventId">The event id.</param>
        /// <returns>returns dataset contains DetailTypes</returns>
        public static F8044MaterialsData F8044_ListMaterialsResourceType(int flagActiveAndAll, int eventId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string listMaterialsResourceValue;
                F8044MaterialsData materialsData = new F8044MaterialsData();
                listMaterialsResourceValue = terraScanService.F8044_ListMaterialsResourceType(flagActiveAndAll, eventId);
                materialsData.ReadXml(Utilities.SharedFunctions.XmlParser(listMaterialsResourceValue));
                return materialsData;
            }
            else
            {
                return Helper.F8044_ListMaterialsResourceType(flagActiveAndAll, eventId);
            }
        }

        #endregion

        #region Save Material Details

        /// <summary>
        /// Save the Material Details
        /// </summary>
        /// <param name="materialItems">The material items.</param>
        /// <param name="userId">UserID</param>
        public static void F8044_SaveMaterialDetails(string materialItems, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                terraScanService.F8044_SaveMaterialDetails(materialItems, userId);
            }
            else
            {
                Helper.F8044_SaveMaterialDetails(materialItems, userId);
            }
        }

        #endregion

        #region Update Inspection Details

        /// <summary>
        /// Updates the Material Details
        /// </summary>
        /// <param name="materialItems">The material items.</param>
        /// <param name="userId">UserID</param>
        public static void F8044_UpdateMaterialDetails(string materialItems, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                terraScanService.F8044_UpdateMaterialDetails(materialItems, userId);
            }
            else
            {
                Helper.F8044_UpdateMaterialDetails(materialItems, userId);
            }
        }

        #endregion

        #region Delete a Material Item

        /// <summary>
        /// Deletes the Material Item
        /// </summary>
        /// <param name="materialId">The material id.</param>
        /// <param name="userId">UserID</param>
        /// <returns>The return value specifying status of the delete action.</returns>
        public static int F8044_DeleteMaterialItem(int materialId, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F8044_DeleteMaterialItem(materialId, userId);
            }
            else
            {
                return Helper.F8044_DeleteMaterialItem(materialId, userId);
            }
        }
        #endregion

        #endregion

        #region 1220 Account Register

        #region List AccontNames

        /// <summary>
        /// F1220_s the account names.
        /// </summary>
        /// <returns>the datatable contains the Account Names</returns>
        public static F1220AccountRegisterData.ListAccountNamesDataTable F1220_AccountNames()
        {
            if (WSHelper.IsOnLineMode)
            {
                string accountRegisterAccontNameValue;
                F1220AccountRegisterData accountRegisterData = new F1220AccountRegisterData();
                accountRegisterAccontNameValue = terraScanService.F1220_AccountNames();
                accountRegisterData.ReadXml(Utilities.SharedFunctions.XmlParser(accountRegisterAccontNameValue));
                return accountRegisterData.ListAccountNames;
            }
            else
            {
                F1220AccountRegisterData.ListAccountNamesDataTable accountRegisterData = new F1220AccountRegisterData.ListAccountNamesDataTable();
                accountRegisterData = Helper.F1220_AccountNames();
                return accountRegisterData;
            }
        }

        #endregion

        #region Get ReconciledDetails

        /// <summary>
        /// F1220_s the get reconciled details.
        /// </summary>
        /// <param name="registerId">The register id.</param>
        /// <returns>datatable holds the Reconciled Details</returns>
        public static F1220AccountRegisterData.ReconciledDetailsDataTable F1220_GetReconciledDetails(int registerId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string getReconciledDetailsValue;
                F1220AccountRegisterData accountRegisterData = new F1220AccountRegisterData();
                getReconciledDetailsValue = terraScanService.F1220_GetReconciledDetails(registerId);
                accountRegisterData.ReadXml(Utilities.SharedFunctions.XmlParser(getReconciledDetailsValue));
                return accountRegisterData.ReconciledDetails;
            }
            else
            {
                F1220AccountRegisterData.ReconciledDetailsDataTable accountRegisterData = new F1220AccountRegisterData.ReconciledDetailsDataTable();
                accountRegisterData = Helper.F1220_GetReconciledDetails(registerId);
                return accountRegisterData;
            }
        }

        #endregion

        #region List AccountRegister

        /// <summary>
        /// F1220_s the list account register.
        /// </summary>
        /// <param name="registerId">The register id.</param>
        /// <param name="beginningDate">The beginning date.</param>
        /// <returns>datatable contains the Account Register Details</returns>
        public static F1220AccountRegisterData.ListAccountRegisterDataTable F1220_ListAccountRegister(int registerId, DateTime beginningDate)
        {
            if (WSHelper.IsOnLineMode)
            {
                string accountRegisterValues;
                F1220AccountRegisterData accountRegisterData = new F1220AccountRegisterData();
                accountRegisterValues = terraScanService.F1220_ListAccountRegister(registerId, beginningDate);
                accountRegisterData.ReadXml(Utilities.SharedFunctions.XmlParser(accountRegisterValues));
                return accountRegisterData.ListAccountRegister;
            }
            else
            {
                F1220AccountRegisterData.ListAccountRegisterDataTable accountRegisterData = new F1220AccountRegisterData.ListAccountRegisterDataTable();
                accountRegisterData = Helper.F1220_ListAccountRegister(registerId, beginningDate);
                return accountRegisterData;
            }
        }

        #endregion

        #region GetAccountRegisterDetails

        /// <summary>
        /// F1220_s the get account register details.
        /// </summary>
        /// <param name="registerId">The register id.</param>
        /// <param name="beginningDate">The beginning date.</param>
        /// <returns>accountRegister DataSet</returns>
        public static F1220AccountRegisterData F1220_GetAccountRegisterDetails(int registerId, DateTime beginningDate)
        {
            if (WSHelper.IsOnLineMode)
            {
                string accountRegisterValues;
                F1220AccountRegisterData accountRegisterData = new F1220AccountRegisterData();
                accountRegisterValues = terraScanService.F1220_GetAccountRegisterDetails(registerId, beginningDate);
                accountRegisterData.ReadXml(Utilities.SharedFunctions.XmlParser(accountRegisterValues));
                return accountRegisterData;
            }
            else
            {
                return Helper.F1220_GetAccountRegisterDetails(registerId, beginningDate);
            }
        }

        #endregion

        #endregion

        #region F8902 EventGrid

        #region Get

        /// <summary>
        /// F8902_s Gets the Grid Details
        /// </summary>
        /// <param name="workId">workId</param>
        /// <returns>String</returns>
        public static F8904EventGridData F8904_GetGridDetails(int workId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string eventGridValue;
                F8904EventGridData eventGridData = new F8904EventGridData();
                eventGridValue = terraScanService.F8904_GetEventGridDetails(workId);
                eventGridData.ReadXml(Utilities.SharedFunctions.XmlParser(eventGridValue));
                return eventGridData;
            }
            else
            {
                return Helper.F8904_GetEventGridDetails(workId);
            }
        }

        #endregion

        #endregion

        #region 9002 GetUserDetails

        /// <summary>
        /// F9001_s the get user details.
        /// </summary>
        /// <param name="applicationId">The application id.</param>
        /// <returns>User Details</returns>
        public static UserManagementData F9002_GetUserDetails(int applicationId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string userDetialsValue;
                UserManagementData userManagementData = new UserManagementData();
                userDetialsValue = terraScanService.F9002_GetUserDetails(applicationId);
                userManagementData.ReadXml(Utilities.SharedFunctions.XmlParser(userDetialsValue));
                return userManagementData;
            }
            else
            {
                return Helper.F9002_GetUserDetails(applicationId);
            }
        }

        #endregion

        #region F1224 Check print Queue

        #region List AccontNames

        /// <summary>
        /// F1224 the account names.
        /// </summary>
        /// <returns>the datatable contains the Account Names</returns>
        public static F1224CheckPrintQueueData.ListAccountNamesDataTable F1224_AccountNames()
        {
            if (WSHelper.IsOnLineMode)
            {
                string checkPrintQueueAccontNameValue;
                F1224CheckPrintQueueData checkPrintQueueData = new F1224CheckPrintQueueData();
                checkPrintQueueAccontNameValue = terraScanService.F1224_AccountNames();
                checkPrintQueueData.ReadXml(Utilities.SharedFunctions.XmlParser(checkPrintQueueAccontNameValue));
                return checkPrintQueueData.ListAccountNames;
            }
            else
            {
                F1224CheckPrintQueueData.ListAccountNamesDataTable checkPrintQueueData = new F1224CheckPrintQueueData.ListAccountNamesDataTable();
                checkPrintQueueData = Helper.F1224_AccountNames();
                return checkPrintQueueData;
            }
        }

        #endregion

        #region List Get Check Number

        /// <summary>
        /// F1224_s the get check number.
        /// </summary>
        /// <param name="registerId">The register id.</param>
        /// <returns>Check Numbers</returns>
        public static F1224CheckPrintQueueData.CheckNumberTableDataTable F1224_GetCheckNumber(int registerId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string checkNoValue;
                F1224CheckPrintQueueData checkPrintQueueData = new F1224CheckPrintQueueData();
                checkPrintQueueData.CheckNumberTable.Clear();
                checkNoValue = terraScanService.F1224_GetCheckNumber(registerId);
                checkPrintQueueData.ReadXml(Utilities.SharedFunctions.XmlParser(checkNoValue));
                return checkPrintQueueData.CheckNumberTable;
            }
            else
            {
                F1224CheckPrintQueueData checkPrintQueueData = new F1224CheckPrintQueueData();
                checkPrintQueueData.CheckNumberTable.Clear();
                checkPrintQueueData = Helper.F1224_GetCheckNumber(registerId);
                return checkPrintQueueData.CheckNumberTable;
            }
        }
        #endregion

        #region List UnPrinted Checks

        /// <summary>
        /// F1224_s the list un printed checks.
        /// </summary>
        /// <param name="registerId">The register id.</param>
        /// <returns>UnPrinted checks</returns>
        public static F1224CheckPrintQueueData.ListUnPrintedChecksTableDataTable F1224_ListUnPrintedChecks(int registerId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string checkedprintValue;
                F1224CheckPrintQueueData checkPrintQueueData = new F1224CheckPrintQueueData();
                checkedprintValue = terraScanService.F1224_ListUnPrintedChecks(registerId);
                checkPrintQueueData.ReadXml(Utilities.SharedFunctions.XmlParser(checkedprintValue));
                return checkPrintQueueData.ListUnPrintedChecksTable;
            }
            else
            {
                F1224CheckPrintQueueData checkPrintQueueData = new F1224CheckPrintQueueData();
                checkPrintQueueData = Helper.F1224_ListUnPrintedChecks(registerId);
                return checkPrintQueueData.ListUnPrintedChecksTable;
            }
        }

        #endregion

        #region Print Checks

        /// <summary>
        /// F1224_s the create checks.
        /// </summary>
        /// <param name="registerId">The register id.</param>
        /// <param name="userId">The user id.</param>
        /// <param name="startingCheckNumber">The starting check number.</param>
        /// <param name="checkItems">The check items.</param>
        /// <returns>printed Check Numbers</returns>
        public static F1224CheckPrintQueueData.ListCreateChecksTableDataTable F1224_CreateChecks(int registerId, int userId, long startingCheckNumber, string checkItems)
        {
            if (WSHelper.IsOnLineMode)
            {
                string checkedprintValue;
                F1224CheckPrintQueueData checkPrintQueueData = new F1224CheckPrintQueueData();
                checkPrintQueueData.ListCreateChecksTable.Clear();
                checkedprintValue = terraScanService.F1224_CreateChecks(registerId, userId, startingCheckNumber, checkItems);
                checkPrintQueueData.ReadXml(Utilities.SharedFunctions.XmlParser(checkedprintValue));
                return checkPrintQueueData.ListCreateChecksTable;
            }
            else
            {
                F1224CheckPrintQueueData checkPrintQueueData = new F1224CheckPrintQueueData();
                checkPrintQueueData.ListCreateChecksTable.Clear();
                checkPrintQueueData = Helper.F1224_CreateChecks(registerId, userId, startingCheckNumber, checkItems);
                return checkPrintQueueData.ListCreateChecksTable;
            }
        }

        #endregion

        #endregion

        #region F1502 Account Element Management

        #region GetAccountElementMgmt

        /// <summary>
        /// To get Account Element Management details
        /// </summary>
        /// <param name="function">The Function Id</param>
        /// <param name="description">The Description</param>
        /// <param name="type">The Type - SemiAnnualCode </param>
        /// <returns>Typed Dataset containing the Account Element Management details</returns>
        public static F1502AccountManagementData F1502_GetAccountElementMgmt(string function, string description, int type)
        {
            if (WSHelper.IsOnLineMode)
            {
                string accountElementValue;
                F1502AccountManagementData accountElementManagementData = new F1502AccountManagementData();
                accountElementValue = terraScanService.F1502_GetAccountElementMgmt(function, description, type);
                accountElementManagementData.ReadXml(Utilities.SharedFunctions.XmlParser(accountElementValue));
                return accountElementManagementData;
            }
            else
            {
                return Helper.F1502_GetAccountElementMgmt(function, description, type);
            }
        }

        #endregion GetAccountElementMgmt

        #region SaveAccountElementMgmt

        /// <summary>
        /// To Save Account Element Management details
        /// </summary>
        /// <param name="functionElemnts">The xml string which contains the Account elements mgmt Grid values</param>
        /// <param name="userId">UserID</param>
        /// <returns>Integer value containing whether save is compleded or not</returns>
        public static int F1502_SaveAccountElementMgmt(string functionElemnts, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F1502_SaveAccountElementMgmt(functionElemnts, userId);
            }
            else
            {
                return Helper.F1502_SaveAccountElementMgmt(functionElemnts, userId);
            }
        }

        #endregion SaveAccountElementMgmt

        #region DeleteAccountElementMgmt

        /// <summary>
        /// To Delete Account Element Management details
        /// </summary>
        /// <param name="functionId">The Functional Id</param>
        /// <param name="userId">UserID</param>
        public static void F1502_DeleteAccountElementMgmt(string functionId, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                terraScanService.F1502_DeleteAccountElementMgmt(functionId, userId);
            }
            else
            {
                Helper.F1502_DeleteAccountElementMgmt(functionId, userId);
            }
        }

        #endregion DeleteAccountElementMgmt

        #endregion F1502 Account Element Management

        #region F9600 SearchEngine

        /// <summary>
        /// F9600_s the list search result.
        /// </summary>
        /// <param name="searchValue">The search value.</param>
        /// <param name="appId">The app id.</param>
        /// <returns>Dataset Containing Search Value and Application Id</returns>
        public static F9600SearchData F9600_ListSearchResult(string searchValue, int appId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string searchResultValue;
                F9600SearchData searchResultData = new F9600SearchData();
                searchResultValue = terraScanService.F9600_ListSearchresult(searchValue, appId);
                searchResultData.ReadXml(Utilities.SharedFunctions.XmlParser(searchResultValue));
                return searchResultData;
            }
            else
            {
                return Helper.F9600ListSearchResult(searchValue, appId);
            }
        }

        /// <summary>
        /// F9600_s the list sort result.
        /// </summary>
        /// <param name="searchValue">The search value.</param>
        /// <param name="appId">The app id.</param>
        /// <param name="searchOrder">if set to <c>true</c> [search order].</param>
        /// <param name="groupOrder">if set to <c>true</c> [group order].</param>
        /// <returns>F9600Search Dataset</returns>
        public static F9600SearchData F9600_ListSortResult(string searchValue, int appId, bool searchOrder, bool groupOrder)
        {
            if (WSHelper.IsOnLineMode)
            {
                string searchResultValue;
                F9600SearchData searchResultData = new F9600SearchData();
                searchResultValue = terraScanService.F9600_ListSortResult(searchValue, appId, searchOrder, groupOrder);
                searchResultData.ReadXml(Utilities.SharedFunctions.XmlParser(searchResultValue));
                return searchResultData;
            }
            else
            {
                return Helper.F9600ListSortResult(searchValue, appId, searchOrder, groupOrder);
            }
        }

        #endregion

        #region 1530 Cash Account Management

        #region Get and List Institution

        /// <summary>
        /// Gets the institution list, institution detail, cash account list and institution contact list
        /// </summary>
        /// <param name="institutionId">The institution id.</param>
        /// <returns>F1530CashAccountManagementData with institution Detail</returns>
        public static F1530CashAccountManagementData F1530_GetInstitutionDetail(int institutionId)
        {
            if (WSHelper.IsOnLineMode)
            {
                F1530CashAccountManagementData cashAccountManagementData = new F1530CashAccountManagementData();
                string cashAccountManagement = terraScanService.F1530_GetInstitutionDetail(institutionId);
                cashAccountManagementData.ReadXml(Utilities.SharedFunctions.XmlParser(cashAccountManagement));
                return cashAccountManagementData;
            }
            else
            {
                return Helper.F1530_GetInstitutionDetail(institutionId);
            }
        }

        #endregion

        #region Save Institution

        /// <summary>
        /// saves the institution
        /// </summary>
        /// <param name="institutionId">The institution id.</param>
        /// <param name="institutionElements">The institution elements.</param>
        /// <param name="userId">UserID</param>
        /// <returns>saved institution id</returns>
        public static int F1530_SaveInstitution(int institutionId, string institutionElements, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F1530_SaveInstitution(institutionId, institutionElements, userId);
            }
            else
            {
                return Helper.F1530_SaveInstitution(institutionId, institutionElements, userId);
            }
        }

        #endregion

        #endregion

        #region 1531 Cash Account

        #region Get Cash Account

        /// <summary>
        /// Gets the cash account detail
        /// </summary>
        /// <param name="registerId">The register id.</param>
        /// <returns>
        /// F1530CashAccountManagementData with cash account Detail
        /// </returns>
        public static F1530CashAccountManagementData F1531_GetCashAccountDetail(int registerId)
        {
            if (WSHelper.IsOnLineMode)
            {
                F1530CashAccountManagementData cashAccountManagementData = new F1530CashAccountManagementData();
                string cashAccount = terraScanService.F1531_GetCashAccountDetail(registerId);
                cashAccountManagementData.ReadXml(Utilities.SharedFunctions.XmlParser(cashAccount));
                return cashAccountManagementData;
            }
            else
            {
                return Helper.F1531_GetCashAccountDetail(registerId);
            }
        }

        #endregion

        #region Save Cash Account

        /// <summary>
        /// saves cash account.
        /// </summary>
        /// <param name="registerId">The register id.</param>
        /// <param name="registerItems">The register items.</param>
        /// <param name="userId">UserID</param>
        /// <returns>subfund validated result,-1- validation failed else registerId</returns>
        public static int F1531_SaveCashAccount(int registerId, string registerItems, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F1531_SaveCashAccount(registerId, registerItems, userId);
            }
            else
            {
                return Helper.F1531_SaveCashAccount(registerId, registerItems, userId);
            }
        }

        #endregion

        #endregion

        #region 1532 Institution Contact

        #region Get Institution Contact

        /// <summary>
        /// Gets the institution contact detail
        /// </summary>
        /// <param name="contactId">The contact id.</param>
        /// <returns>
        /// F1530CashAccountManagementData with institution contact Detail
        /// </returns>
        public static F1530CashAccountManagementData F1532_GetInstitutionContactDetail(int contactId)
        {
            if (WSHelper.IsOnLineMode)
            {
                F1530CashAccountManagementData cashAccountManagementData = new F1530CashAccountManagementData();
                string institutionContact = terraScanService.F1532_GetInstitutionContactDetail(contactId);
                cashAccountManagementData.ReadXml(Utilities.SharedFunctions.XmlParser(institutionContact));
                return cashAccountManagementData;
            }
            else
            {
                return Helper.F1532_GetInstitutionContactDetail(contactId);
            }
        }

        #endregion

        #region Save Institution Contact

        /// <summary>
        /// saves the Institution Contact.
        /// </summary>
        /// <param name="contactId">The contact id.</param>
        /// <param name="acctEmelemts">The acct emelemts.</param>
        /// <param name="userId">UserID</param>
        /// <returns>saved contact id</returns>
        public static int F1532_SaveInstitutionContact(int contactId, string acctEmelemts, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F1532_SaveInstitutionContact(contactId, acctEmelemts, userId);
            }
            else
            {
                return Helper.F1532_SaveInstitutionContact(contactId, acctEmelemts, userId);
            }
        }

        #endregion

        #endregion

        #region D1030Special District

        #region F1030Special District Definition

        #region ListMethods

        /// <summary>
        /// F1030_s the type of the list district definition.
        /// </summary>
        /// <returns>F1030SpecialDistrictDefinitionData</returns>
        public static F1030SpecialDistrictDefinitionData F1030_ListDistrictDefinitionType()
        {
            if (WSHelper.IsOnLineMode)
            {
                string listDistrictDefinitionValue;
                F1030SpecialDistrictDefinitionData listDistrictDefinitioData = new F1030SpecialDistrictDefinitionData();
                listDistrictDefinitionValue = terraScanService.F1030_ListDistrictDefinitionType();
                listDistrictDefinitioData.ReadXml(Utilities.SharedFunctions.XmlParser(listDistrictDefinitionValue));
                return listDistrictDefinitioData;
            }
            else
            {
                return Helper.F1030_ListDistrictDefinitionType();
            }
        }

        #endregion ListMethods

        #region GetMethods

        /// <summary>
        /// F1030_s the get district definition details.
        /// </summary>
        /// <param name="districtNo">The district no.</param>
        /// <returns>F1030SpecialDistrictDefinitionData</returns>
        public static F1030SpecialDistrictDefinitionData F1030_GetDistrictDefinitionDetails(int districtNo)
        {
            if (WSHelper.IsOnLineMode)
            {
                string listDistrictDefinitionValue;
                F1030SpecialDistrictDefinitionData listDistrictDefinitioData = new F1030SpecialDistrictDefinitionData();
                listDistrictDefinitionValue = terraScanService.F1030_GetDistrictDefinitionDetails(districtNo);
                listDistrictDefinitioData.ReadXml(Utilities.SharedFunctions.XmlParser(listDistrictDefinitionValue));
                return listDistrictDefinitioData;
            }
            else
            {
                return Helper.F1030_GetDistrictDefinitionDetails(districtNo);
            }
        }

        #endregion GetMethods

        #region DeleteMethods

        /// <summary>
        /// F1030_s the delete district definition.
        /// </summary>
        /// <param name="specialDistrictId">The special district id.</param>
        /// <param name="userId">UserID</param>
        /// <returns>specialDistrictID</returns>
        public static int F1030_DeleteDistrictDefinition(int specialDistrictId, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F1030_DeleteDistrictDefinition(specialDistrictId, userId);
            }
            else
            {
                return Helper.F1030_DeleteDistrictDefinition(specialDistrictId, userId);
            }
        }

        /// <summary>
        /// F1030_s the delete district definition rate.
        /// </summary>
        /// <param name="speialDistrictRateItemId">The speial district rate item id.</param>
        /// <param name="userId">UserID</param>
        public static void F1030_DeleteDistrictDefinitionRate(int speialDistrictRateItemId, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                terraScanService.F1030_DeleteDistrictDefinitionRate(speialDistrictRateItemId, userId);
            }
            else
            {
                Helper.F1030_DeleteDistrictDefinitionRate(speialDistrictRateItemId, userId);
            }
        }

        #endregion DeleteMethods

        #region SaveMethods

        /// <summary>
        /// F1030_s the save district definition.
        /// </summary>
        /// <param name="districtNo">The district no.</param>
        /// <param name="districtItem">The district item.</param>
        /// <param name="rateItem">The rate item.</param>
        /// <param name="distributionItem">The distribution item.</param>
        /// <param name="flagOverride">if set to <c>true</c> [flag override].</param>
        /// <param name="userId">UserID</param>
        /// <returns>KeyID</returns>
        public static string F1030_SaveDistrictDefinition(int districtNo, string districtItem, string rateItem, string distributionItem, bool flagOverride, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F1030_SaveDistrictDefinition(districtNo, districtItem, rateItem, distributionItem, flagOverride, userId);
            }
            else
            {
                return Helper.F1030_SaveDistrictDefinition(districtNo, districtItem, rateItem, distributionItem, flagOverride, userId);
            }
        }

        #endregion SaveMethods

        #endregion F1030Special District Definition

        #region F16030Special District Definition

        #region ListMethods

        /// <summary>
        /// F16030_s the type of the list district definition.
        /// </summary>
        /// <returns>F1030SpecialDistrictDefinitionData</returns>
        public static F1030SpecialDistrictDefinitionData F16030_ListDistrictDefinitionType()
        {
            if (WSHelper.IsOnLineMode)
            {
                string listDistrictDefinitionValue;
                F1030SpecialDistrictDefinitionData listDistrictDefinitioData = new F1030SpecialDistrictDefinitionData();
                listDistrictDefinitionValue = terraScanService.F16030_ListDistrictDefinitionType();
                listDistrictDefinitioData.ReadXml(Utilities.SharedFunctions.XmlParser(listDistrictDefinitionValue));
                return listDistrictDefinitioData;
            }
            else
            {
                return Helper.F16030_ListDistrictDefinitionType();
            }
        }

        #endregion ListMethods

        #region GetMethods

        /// <summary>
        /// F16030_s the get district definition details.
        /// </summary>
        /// <param name="districtNo">The district no.</param>
        /// <returns>F1030SpecialDistrictDefinitionData</returns>
        public static F1030SpecialDistrictDefinitionData F16030_GetDistrictDefinitionDetails(int districtNo)
        {
            if (WSHelper.IsOnLineMode)
            {
                string listDistrictDefinitionValue;
                F1030SpecialDistrictDefinitionData listDistrictDefinitioData = new F1030SpecialDistrictDefinitionData();
                listDistrictDefinitionValue = terraScanService.F16030_GetDistrictDefinitionDetails(districtNo);
                listDistrictDefinitioData.ReadXml(Utilities.SharedFunctions.XmlParser(listDistrictDefinitionValue));
                return listDistrictDefinitioData;
            }
            else
            {
                return Helper.F16030_GetDistrictDefinitionDetails(districtNo);
            }
        }

        #endregion GetMethods

        #region DeleteMethods

        /// <summary>
        /// F16030_s the delete district definition.
        /// </summary>
        /// <param name="specialDistrictId">The special district id.</param>
        /// <param name="userId">UserID</param>
        /// <returns>specialDistrictID</returns>
        public static int F16030_DeleteDistrictDefinition(int specialDistrictId, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F16030_DeleteDistrictDefinition(specialDistrictId, userId);
            }
            else
            {
                return Helper.F16030_DeleteDistrictDefinition(specialDistrictId, userId);
            }
        }

        /// <summary>
        /// F16030_s the delete district definition rate.
        /// </summary>
        /// <param name="speialDistrictRateItemId">The speial district rate item id.</param>
        /// <param name="userId">UserID</param>
        public static void F16030_DeleteDistrictDefinitionRate(int speialDistrictRateItemId, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                terraScanService.F16030_DeleteDistrictDefinitionRate(speialDistrictRateItemId, userId);
            }
            else
            {
                Helper.F16030_DeleteDistrictDefinitionRate(speialDistrictRateItemId, userId);
            }
        }

        #endregion DeleteMethods

        #region SaveMethods

        /// <summary>
        /// F16030_s the save district definition.
        /// </summary>
        /// <param name="districtNo">The district no.</param>
        /// <param name="districtItem">The district item.</param>
        /// <param name="rateItem">The rate item.</param>
        /// <param name="distributionItem">The distribution item.</param>
        /// <param name="flagOverride">if set to <c>true</c> [flag override].</param>
        /// <param name="flagValidation">if set to <c>true</c> [flag validation].</param>
        /// <param name="userId">UserID</param>
        /// <returns>KeyId</returns>
        public static string F16030_SaveDistrictDefinition(int districtNo, string districtItem, string rateItem, string distributionItem, bool flagOverride, bool flagValidation, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F16030_SaveDistrictDefinition(districtNo, districtItem, rateItem, distributionItem, flagOverride, flagValidation, userId);
            }
            else
            {
                return Helper.F16030_SaveDistrictDefinition(districtNo, districtItem, rateItem, distributionItem, flagOverride, flagValidation, userId);
            }
        }

        #endregion SaveMethods

        #endregion F16030Special District Definition

        #region F1033 Special District Selection
        #region ListPostTypes
        /// <summary>
        /// List the Post Types
        /// </summary>
        /// <param name="form">form</param>
        /// <returns>Retuen F1033SpecialDistrictSelectionData ListPostType Table</returns>
        public static F1033SpecialDistrictSelectionData.ListPostTypeDataTable F1033_ListPostTypes(int? form)
        {
            if (WSHelper.IsOnLineMode)
            {
                string postTypes;
                F1033SpecialDistrictSelectionData postTypeData = new F1033SpecialDistrictSelectionData();
                postTypes = terraScanService.F1033_ListPostTypes(form);
                postTypeData.ReadXml(Utilities.SharedFunctions.XmlParser(postTypes));
                return postTypeData.ListPostType;
            }
            else
            {
                F1033SpecialDistrictSelectionData postTypeData = new F1033SpecialDistrictSelectionData();
                postTypeData = Helper.F1033_ListPostTypes(form);
                return postTypeData.ListPostType;
            }
        }
        #endregion ListPostTypes

        #region ListSpecialDistricts
        /// <summary>
        /// List the Special Districts
        /// </summary>
        /// <param name="district">district</param>
        /// <param name="rollYear">rollYear</param>
        /// <param name="description">description</param>
        /// <param name="postTypeId">The post type id.</param>
        /// <returns>
        /// Retuen F1033SpecialDistrictSelectionData ListSpecialDistrict Table
        /// </returns>
        public static F1033SpecialDistrictSelectionData.ListSpecialDistrictDataTable F1033_ListSpecialDistricts(int? district, int? rollYear, string description, int? postTypeId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string specialDistricts;
                F1033SpecialDistrictSelectionData specialDistrictData = new F1033SpecialDistrictSelectionData();
                specialDistricts = terraScanService.F1033_ListSpecialDistricts(district, rollYear, description, postTypeId);
                specialDistrictData.ReadXml(Utilities.SharedFunctions.XmlParser(specialDistricts));
                return specialDistrictData.ListSpecialDistrict;
            }
            else
            {
                F1033SpecialDistrictSelectionData specialDistrictData = new F1033SpecialDistrictSelectionData();
                specialDistrictData = Helper.F1033_ListSpecialDistricts(district, rollYear, description, postTypeId);
                return specialDistrictData.ListSpecialDistrict;
            }
        }

        #endregion ListSpecialDistricts

        #endregion F1033 Special District Selection

        #endregion D1030Special Sisrtict

        #region F1500AccountManagement

        #region Getdescription

        /// <summary>
        /// F1500_s the get description.
        /// </summary>
        /// <param name="keyId">The key id.</param>
        /// <param name="elementName">Name of the element.</param>
        /// <returns>description</returns>
        public static AccountManagementData F1500_GetDescription(string keyId, string elementName)
        {
            if (WSHelper.IsOnLineMode)
            {
                AccountManagementData accountManagementData = new AccountManagementData();
                string accountManagement = terraScanService.F1500_GetDescription(keyId, elementName);
                accountManagementData.ReadXml(Utilities.SharedFunctions.XmlParser(accountManagement));
                return accountManagementData;
            }
            else
            {
                return Helper.F1500_GetDescription(keyId, elementName);
            }
        }

        #endregion.

        #region Get SubFund Items

        /// <summary>
        /// F1500_s the get sub fund items.
        /// </summary>
        /// <param name="subFund">The sub fund.</param>
        /// <param name="rollYear">The roll year.</param>
        /// <returns>SubFundItems</returns>
        public static AccountManagementData F1500_GetSubFundItems(string subFund, short rollYear)
        {
            if (WSHelper.IsOnLineMode)
            {
                AccountManagementData accountManagementData = new AccountManagementData();
                string accountManagement = terraScanService.F1500_GetSubFundItems(subFund, rollYear);
                accountManagementData.ReadXml(Utilities.SharedFunctions.XmlParser(accountManagement));
                return accountManagementData;
            }
            else
            {
                return Helper.F1500_GetSubFundItems(subFund, rollYear);
            }
        }

        #endregion

        #region Get Function Items

        /// <summary>
        /// F1500_s the get function items.
        /// </summary>
        /// <param name="function">The function.</param>
        /// <returns>function items</returns>
        public static AccountManagementData F1500_GetFunctionItems(string function)
        {
            if (WSHelper.IsOnLineMode)
            {
                AccountManagementData accountManagementData = new AccountManagementData();
                string accountManagement = terraScanService.F1500_GetFunctionItems(function);
                accountManagementData.ReadXml(Utilities.SharedFunctions.XmlParser(accountManagement));
                return accountManagementData;
            }
            else
            {
                return Helper.F1500_GetFunctionItems(function);
            }
        }

        #endregion

        #region Get AccountIDs and Details

        /// <summary>
        /// F1500_s the list account details.
        /// </summary>
        /// <param name="accountId">The account id.</param>
        /// <returns>AccountIDs and Details</returns>
        public static AccountManagementData F1500_ListAccountDetails(int accountId)
        {
            if (WSHelper.IsOnLineMode)
            {
                AccountManagementData accountManagementData = new AccountManagementData();
                string accountManagement = terraScanService.F1500_ListAccountDetails(accountId);
                accountManagementData.ReadXml(Utilities.SharedFunctions.XmlParser(accountManagement));
                return accountManagementData;
            }
            else
            {
                return Helper.F1500_ListAccountDetails(accountId);
            }
        }

        #endregion

        #region Save and Edit the Account Details

        /// <summary>
        /// F1500_s the create or edit account.
        /// </summary>
        /// <param name="accountId">The account id.</param>
        /// <param name="acctEmelemts">The acct emelemts.</param>
        /// <param name="userId">The user id.</param>
        /// <returns>Integer</returns>
        public static int F1500_CreateOrEditAccount(int accountId, string acctEmelemts, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F1500_CreateOrEditAccount(accountId, acctEmelemts, userId);
            }
            else
            {
                return Helper.F1500_CreateOrEditAccount(accountId, acctEmelemts, userId);
            }
        }

        #endregion

        #region List Register type

        /// <summary>
        /// List the register types.
        /// </summary>
        /// <returns>AccountManagementData with register type</returns>
        public static AccountManagementData F1500_ListRegisterType()
        {
            if (WSHelper.IsOnLineMode)
            {
                AccountManagementData accountManagementData = new AccountManagementData();
                accountManagementData.ReadXml(Utilities.SharedFunctions.XmlParser(terraScanService.F1500_ListRegisterType()));
                return accountManagementData;
            }
            else
            {
                return Helper.F1500_ListRegisterType();
            }
        }

        #endregion

        #region Get Configuration Value

        /// <summary>
        /// F1500_s the get configuration value.
        /// </summary>
        /// <param name="cfgName">Name of the CFG.</param>
        /// <returns>AccountManagement</returns>
        public static AccountManagementData F1500_GetConfigurationValue(string cfgName)
        {
            if (WSHelper.IsOnLineMode)
            {
                AccountManagementData accountManagementData = new AccountManagementData();
                string accountManagement = terraScanService.F1500_GetConfigurationValue(cfgName);
                accountManagementData.ReadXml(Utilities.SharedFunctions.XmlParser(accountManagement));
                return accountManagementData;
            }
            else
            {
                return Helper.F1500_GetConfigurationValue(cfgName);
            }
        }

        #endregion

        #endregion F1500AccountManagement

        #region F1503 Generic Management Comp

        #region GetGenericElementMgmt

        /// <summary>
        /// To Get the Generic Element Management details
        /// </summary>
        /// <param name="keyValue">The key value(Element ID)</param>
        /// <param name="description">The Description</param>
        /// <param name="formName">The Form Name</param>
        /// <returns>Typed Dataset containing the Element ID and Description Value</returns>
        public static F1503GenericManagementData F1503_GetGenericElementMgmt(string keyValue, string description, string formName)
        {
            if (WSHelper.IsOnLineMode)
            {
                string genericElementValue;
                F1503GenericManagementData genericElementManagementData = new F1503GenericManagementData();
                genericElementValue = terraScanService.F1503_GetGenericElementMgmt(keyValue, description, formName);
                genericElementManagementData.ReadXml(Utilities.SharedFunctions.XmlParser(genericElementValue));
                return genericElementManagementData;
            }
            else
            {
                return Helper.F1503_GetGenericElementMgmt(keyValue, description, formName);
            }
        }

        #endregion GetGenericElementMgmt

        #region SaveGenericElementMgmt

        /// <summary>
        /// To Save the Generic Element Management details
        /// </summary>
        /// <param name="functionElemnts">The Xml string containing Element ID and Description Value</param>
        /// <param name="formName">The Form name</param>
        /// <param name="userId">UserID</param>
        /// <returns>Integer value containing whether save is compleded or not</returns>
        public static int F1503_SaveGenericElementMgmt(string functionElemnts, string formName, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F1503_SaveGenericElementMgmt(functionElemnts, formName, userId);
            }
            else
            {
                return Helper.F1503_SaveGenericElementMgmt(functionElemnts, formName, userId);
            }
        }

        #endregion SaveGenericElementMgmt

        #region DeleteGenericElementMgmt

        /// <summary>
        /// To Delete the Generic Element Management details
        /// </summary>
        /// <param name="elementId">The Particular Element ID</param>
        /// <param name="formName">The Form name</param>
        /// <param name="userId">UserID</param>
        public static void F1503_DeleteGenericElementMgmt(string elementId, string formName, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                terraScanService.F1503_DeleteGenericElementMgmt(elementId, formName, userId);
            }
            else
            {
                Helper.F1503_DeleteGenericElementMgmt(elementId, formName, userId);
            }
        }

        #endregion DeleteGenericElementMgmt

        #endregion F1503 Generic Management Comp

        #region F1515 Sub Fund Selection

        #region F1515_GetSubFundSelection

        /// <summary>
        /// To Get the Sub Fund Selection Details
        /// </summary>
        /// <param name="subFund">The Sub fund</param>
        /// <param name="description">The Description</param>
        /// <param name="rollYear">The Roll year</param>
        /// <param name="iscash">The iscash.</param>
        /// <returns>
        /// Typed Dataset containing the Sub Fund Selection Details
        /// </returns>
        public static F1515SubFundSelectionData F1515_GetSubFundSelection(string subFund, string description, int rollYear, int iscash)
        {
            if (WSHelper.IsOnLineMode)
            {
                string subFundSelectionValue;
                F1515SubFundSelectionData subFundSelectionData = new F1515SubFundSelectionData();
                subFundSelectionValue = terraScanService.F1515_GetSubFundSelection(subFund, description, rollYear, iscash);
                subFundSelectionData.ReadXml(Utilities.SharedFunctions.XmlParser(subFundSelectionValue));
                return subFundSelectionData;
            }
            else
            {
                return Helper.F1515_GetSubFundSelection(subFund, description, rollYear, iscash);
            }
        }

        #endregion F1515_GetSubFundSelection

        #endregion F1515 Sub Fund Selection

        #region F1513 Fund Selection

        #region F1513_GetFundSelection

        /// <summary>
        /// To Get the Fund Selection details
        /// </summary>
        /// <param name="fund">The Fund</param>
        /// <param name="description">The Description</param>
        /// <returns>Typed Dataset Containing the Fund Selection details</returns>
        public static F1513FundSelectionData F1513_GetFundSelection(string fund, string description)
        {
            if (WSHelper.IsOnLineMode)
            {
                string fundSelectionValue;
                F1513FundSelectionData fundSelectionData = new F1513FundSelectionData();
                fundSelectionValue = terraScanService.F1513_GetFundSelection(fund, description);
                fundSelectionData.ReadXml(Utilities.SharedFunctions.XmlParser(fundSelectionValue));
                return fundSelectionData;
            }
            else
            {
                return Helper.F1513_GetFundSelection(fund, description);
            }
        }

        /// <summary>
        /// F1513_CentralFundItemValidation
        /// </summary>
        /// <param name="fundId"></param>
        /// <param name="rollYear"></param>
        /// <returns></returns>
        public static int F1513_CentralFundItemValidation(int fundId, int rollYear)
        {
            if (WSHelper.IsOnLineMode)
            {                
                return terraScanService.F1513_CentralFundItemValidation(fundId, rollYear);                
            }
            else
            {
                return Helper.F1513_CentralFundItemValidation(fundId, rollYear);
            }
        }

        #endregion F1513_GetFundSelection

        #endregion F1513 Fund Selection

        #region F16031 Special District Assessment WorkingFileId

        #region List Special District Assessment Details

        /// <summary>
        /// Lists the Special District Assessment details
        /// </summary>
        /// <param name="statementId">The statement id.</param>
        /// <returns>returns dataset containing specialDistrict Assessment Details</returns>
        public static F1031SpecialDistrictAssessmentData F16031_ListDistrictAssessmentDetails(int workingFileId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string listDistrictAssessmentDetailsValue;
                F1031SpecialDistrictAssessmentData specialDistrictAssessmentData = new F1031SpecialDistrictAssessmentData();
                listDistrictAssessmentDetailsValue = terraScanService.F16031_ListDistrictAssessmentDetails(workingFileId);
                specialDistrictAssessmentData.ReadXml(Utilities.SharedFunctions.XmlParser(listDistrictAssessmentDetailsValue));
                return specialDistrictAssessmentData;
            }
            else
            {
                return Helper.F16031_ListDistrictAssessmentDetails(workingFileId);
            }
        }

        #endregion

        #region List Special District

        /// <summary>
        /// Lists the Special District details
        /// </summary>
        /// <param name="districtId">The sa district id.</param>
        /// <returns>returns dataset containing specialDistrict Details</returns>
        public static F1031SpecialDistrictAssessmentData F16031_ListDistrictAssessment(int sadistrictId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string listDistrictAssessmentValue;
                F1031SpecialDistrictAssessmentData specialDistrictAssessmentData = new F1031SpecialDistrictAssessmentData();
                listDistrictAssessmentValue = terraScanService.F16031_ListDistrictAssessment(sadistrictId);
                specialDistrictAssessmentData.ReadXml(Utilities.SharedFunctions.XmlParser(listDistrictAssessmentValue));
                return specialDistrictAssessmentData;
            }
            else
            {
                return Helper.F16031_ListDistrictAssessment(sadistrictId);
            }
        }

        #endregion

        #region List Special District Assessment ParcelID

        /// <summary>
        /// F1031_s the get district assessment parcel ID.
        /// </summary>
        /// <param name="parcelNumber">The parcel number.</param>
        /// <param name="parcelId">The parcel id.</param>
        /// <returns>
        /// returns dataset containing District Assessment ParcelID
        /// </returns>
        public static F1031SpecialDistrictAssessmentData F16031_GetSpecialAssessmentParcel(string parcelNumber, int? parcelId, int? rollYear)
        {
            if (WSHelper.IsOnLineMode)
            {
                string getSpecialDistrictAssessmentValue;
                F1031SpecialDistrictAssessmentData specialDistrictAssessmentData = new F1031SpecialDistrictAssessmentData();
                getSpecialDistrictAssessmentValue = terraScanService.F16031_GetSpecialAssessmentParcel(parcelNumber, parcelId, rollYear);
                specialDistrictAssessmentData.ReadXml(Utilities.SharedFunctions.XmlParser(getSpecialDistrictAssessmentValue));
                return specialDistrictAssessmentData;
            }
            else
            {
                return Helper.F16031_GetSpecialAssessmentParcel(parcelNumber, parcelId, rollYear);
            }
        }

        #endregion

        #region Delete District Assessment

        /// <summary>
        /// Deletes the District Assessment
        /// </summary>
        /// <param name="statementId">The statement id.</param>
        /// <param name="userId">UserID</param>
        /// <returns>The return value specifying status of the delete action.</returns>
        public static F1031SpecialDistrictAssessmentData F16031_DeleteDistrictAssessment(int workingFileId, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string outputValue;
                F1031SpecialDistrictAssessmentData ListDeleteOutputValue = new F1031SpecialDistrictAssessmentData();
                outputValue = terraScanService.F16031_DeleteDistrictAssessment(workingFileId, userId);
                ListDeleteOutputValue.ReadXml(Utilities.SharedFunctions.XmlParser(outputValue));
                return ListDeleteOutputValue;

            }
            else
            {
                return Helper.F16031_DeleteDistrictAssessment(workingFileId, userId);
            }
        }
        #endregion

        #region Save District Assessment Details

        /// <summary>
        /// F1031_s the save district assessment details.
        /// </summary>
        /// <param name="districtProperty">The district property.</param>
        /// <param name="districtRates">The district rates.</param>
        /// <param name="overrideStatus">if set to <c>true</c> [override status].</param>
        /// <param name="ownerRide">if set to <c>true</c> [owner ride].</param>
        /// <param name="userId">UserID</param>
        /// <returns>Key ID</returns>
        public static int F16031_SaveDistrictAssessmentDetails(string districtProperty, string districtRates, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {

                return terraScanService.F16031_SaveDistrictAssessmentDetails(districtProperty, districtRates, userId);
            }
            else
            {
                return Helper.F16031_SaveDistrictAssessmentDetails(districtProperty, districtRates, userId);
            }
        }

        #endregion

        #region Check Duplicate Statement/Owner

        /// <summary>
        /// F1031_s the check special district statement or owner.
        /// </summary>
        /// <param name="districtProperty">The district property.</param>
        /// <param name="statementFlag">if set to <c>true</c> [statement flag].</param>
        /// <returns>error Id</returns>
        public static F1031SpecialDistrictAssessmentData F16031_CheckSpecialAssessment(string districtProperty)
        {
            if (WSHelper.IsOnLineMode)
            {
                string outputValue;
                F1031SpecialDistrictAssessmentData ListOutputValue = new F1031SpecialDistrictAssessmentData();
                outputValue = terraScanService.F16031_CheckSpecialAssessment(districtProperty);
                ListOutputValue.ReadXml(Utilities.SharedFunctions.XmlParser(outputValue));
                return ListOutputValue;

            }
            else
            {
                return Helper.F16031_CheckSpecialAssessment(districtProperty);
            }
        }

        #endregion

        #region Exec Writer/Cancel Statement
        /// <summary>
        /// F16031_s the Exec Writer/Cancel Statement
        /// </summary>
        /// <param name="districtProperty">The district property.</param>
        /// <param name="statementFlag">if set to <c>true</c> [statement flag].</param>
        /// <returns>error Id</returns>
        public static void F16031_ExeWriteTaxStatement(int workingFileId, int userId, bool isCancel)
        {
            if (WSHelper.IsOnLineMode)
            {
                terraScanService.F16031_ExeWriteTaxStatement(workingFileId, userId, isCancel);
            }
            else
            {
                Helper.F16031_ExeWriteTaxStatement(workingFileId, userId, isCancel);
            }
        }




        #endregion


        #endregion F16031 Special District Assessment WorkingFileId

        #region 1031 Special District Assessment

        #region List Special District Assessment Details

        /// <summary>
        /// Lists the Special District Assessment details
        /// </summary>
        /// <param name="statementId">The statement id.</param>
        /// <returns>returns dataset containing specialDistrict Assessment Details</returns>
        public static F1031SpecialDistrictAssessmentData F1031_ListDistrictAssessmentDetails(int statementId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string listDistrictAssessmentDetailsValue;
                F1031SpecialDistrictAssessmentData specialDistrictAssessmentData = new F1031SpecialDistrictAssessmentData();
                listDistrictAssessmentDetailsValue = terraScanService.F1031_ListDistrictAssessmentDetails(statementId);
                specialDistrictAssessmentData.ReadXml(Utilities.SharedFunctions.XmlParser(listDistrictAssessmentDetailsValue));
                return specialDistrictAssessmentData;
            }
            else
            {
                return Helper.F1031_ListDistrictAssessmentDetails(statementId);
            }
        }

        #endregion

        #region List Special District Assessment IDs

        /// <summary>
        /// Lists the Special District Assessment IDs
        /// </summary>
        /// <returns>returns dataset containing District Assessment IDs</returns>
        public static F1031SpecialDistrictAssessmentData F1031_ListDistrictAssessmentIDs()
        {
            if (WSHelper.IsOnLineMode)
            {
                string listDistrictAssessmentIDsValue;
                F1031SpecialDistrictAssessmentData specialDistrictAssessmentData = new F1031SpecialDistrictAssessmentData();
                listDistrictAssessmentIDsValue = terraScanService.F1031_ListDistrictAssessmentIDs();
                specialDistrictAssessmentData.ReadXml(Utilities.SharedFunctions.XmlParser(listDistrictAssessmentIDsValue));
                return specialDistrictAssessmentData;
            }
            else
            {
                return Helper.F1031_ListDistrictAssessmentIDs();
            }
        }

        #endregion

        #region List Special District Assessment ParcelID

        /// <summary>
        /// F1031_s the get district assessment parcel ID.
        /// </summary>
        /// <param name="parcelNumber">The parcel number.</param>
        /// <param name="parcelId">The parcel id.</param>
        /// <returns>
        /// returns dataset containing District Assessment ParcelID
        /// </returns>
        public static F1031SpecialDistrictAssessmentData F1031_GetDistrictAssessmentParcelID(string parcelNumber, int? parcelId, int? rollYear)
        {
            if (WSHelper.IsOnLineMode)
            {
                string getSpecialDistrictAssessmentValue;
                F1031SpecialDistrictAssessmentData specialDistrictAssessmentData = new F1031SpecialDistrictAssessmentData();
                getSpecialDistrictAssessmentValue = terraScanService.F1031_GetDistrictAssessmentParcelID(parcelNumber, parcelId, rollYear);
                specialDistrictAssessmentData.ReadXml(Utilities.SharedFunctions.XmlParser(getSpecialDistrictAssessmentValue));
                return specialDistrictAssessmentData;
            }
            else
            {
                return Helper.F1031_GetDistrictAssessmentParcelID(parcelNumber, parcelId, rollYear);
            }
        }

        #endregion

        #region List District Assessment ParcelID

        /// <summary>
        /// F1031_s the get district assessment parcel ID.
        /// </summary>
        /// <param name="parcelNumber">The parcel number.</param>
        /// <param name="parcelId">The parcel id.</param>
        /// <returns>
        /// returns dataset containing District Assessment ParcelID
        /// </returns>
        public static F2200EditScheduleData f25050GetDistrictAssessmentParcelID(string parcelNumber, int parcelId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string getSpecialDistrictAssessmentValue;
                F2200EditScheduleData specialDistrictAssessmentData = new F2200EditScheduleData();
                getSpecialDistrictAssessmentValue = terraScanService.f25050GetDistrictAssessmentParcelID(parcelNumber, parcelId);
                specialDistrictAssessmentData.ReadXml(Utilities.SharedFunctions.XmlParser(getSpecialDistrictAssessmentValue));
                return specialDistrictAssessmentData;
            }
            else
            {
                return Helper.f25050GetDistrictAssessmentParcelID(parcelNumber, parcelId);
            }
        }

        #endregion

        #region List Special District

        /// <summary>
        /// Lists the Special District details
        /// </summary>
        /// <param name="districtId">The sa district id.</param>
        /// <returns>returns dataset containing specialDistrict Details</returns>
        public static F1031SpecialDistrictAssessmentData F1031_ListDistrictAssessment(int districtId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string listDistrictAssessmentValue;
                F1031SpecialDistrictAssessmentData specialDistrictAssessmentData = new F1031SpecialDistrictAssessmentData();
                listDistrictAssessmentValue = terraScanService.F1031_ListDistrictAssessment(districtId);
                specialDistrictAssessmentData.ReadXml(Utilities.SharedFunctions.XmlParser(listDistrictAssessmentValue));
                return specialDistrictAssessmentData;
            }
            else
            {
                return Helper.F1031_ListDistrictAssessment(districtId);
            }
        }

        #endregion

        #region Save District Assessment Details

        /// <summary>
        /// F1031_s the save district assessment details.
        /// </summary>
        /// <param name="districtProperty">The district property.</param>
        /// <param name="districtRates">The district rates.</param>
        /// <param name="overrideStatus">if set to <c>true</c> [override status].</param>
        /// <param name="ownerRide">if set to <c>true</c> [owner ride].</param>
        /// <param name="userId">UserID</param>
        /// <returns>Key ID</returns>
        public static int F1031_SaveDistrictAssessmentDetails(string districtProperty, string districtRates, bool overrideStatus, bool ownerRide, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F1031_SaveDistrictAssessmentDetails(districtProperty, districtRates, overrideStatus, ownerRide, userId);
            }
            else
            {
                return Helper.F1031_SaveDistrictAssessmentDetails(districtProperty, districtRates, overrideStatus, ownerRide, userId);
            }
        }

        #endregion

        #region Delete District Assessment

        /// <summary>
        /// Deletes the District Assessment
        /// </summary>
        /// <param name="statementId">The statement id.</param>
        /// <param name="userId">UserID</param>
        /// <returns>The return value specifying status of the delete action.</returns>
        public static int F1031_DeleteDistrictAssessment(int statementId, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F1031_DeleteDistrictAssessment(statementId, userId);
            }
            else
            {
                return Helper.F1031_DeleteDistrictAssessment(statementId, userId);
            }
        }
        #endregion

        #region Check Duplicate Statement/Owner

        /// <summary>
        /// F1031_s the check special district statement or owner.
        /// </summary>
        /// <param name="districtProperty">The district property.</param>
        /// <param name="statementFlag">if set to <c>true</c> [statement flag].</param>
        /// <returns>error Id</returns>
        public static int F1031_CheckSpecialDistrictStatementOrOwner(string districtProperty, bool statementFlag)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F1031_CheckSpecialDistrictStatementOrOwner(districtProperty, statementFlag);
            }
            else
            {
                return Helper.F1031_CheckSpecialDistrictStatementOrOwner(districtProperty, statementFlag);
            }
        }

        #endregion

        #endregion

        #region 9503 SubFund Management

        #region List SubFund Details

        /// <summary>
        /// F9503_s the get sub fund management details.
        /// </summary>
        /// <param name="subFundId">The sub fund id.</param>
        /// <returns>DataSet F9503SubFungMgmtData </returns>
        public static F9503SubFundManagementData F9503_GetSubFundManagementDetails(int? subFundId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string subFundValues;
                F9503SubFundManagementData subFundMgmtData = new F9503SubFundManagementData();
                subFundValues = terraScanService.F9503_GetSubFundManagementDetails(subFundId);
                subFundMgmtData.ReadXml(Utilities.SharedFunctions.XmlParser(subFundValues));
                return subFundMgmtData;
            }
            else
            {
                return Helper.F9503_GetSubFundManagementDetails(subFundId);
            }
        }

        #endregion

        #region Get SubFund Items

        /// <summary>
        /// F9503_s the get sub fund items.
        /// </summary>
        /// <param name="subFund">The sub fund.</param>
        /// <param name="rollYear">The roll year.</param>
        /// <returns>SubFundItems</returns>
        public static F9503SubFundManagementData F9503_GetSubFundItems(string subFund, short rollYear)
        {
            if (WSHelper.IsOnLineMode)
            {
                F9503SubFundManagementData subFundMgmtData = new F9503SubFundManagementData();
                string subFundValues = terraScanService.F9503_GetSubFundItems(subFund, rollYear);
                subFundMgmtData.ReadXml(Utilities.SharedFunctions.XmlParser(subFundValues));
                return subFundMgmtData;
            }
            else
            {
                return Helper.F9503_GetSubFundItems(subFund, rollYear);
            }
        }

        #endregion

        #region Save and Edit SubFund Management Data

        /// <summary>
        /// F15005_s the check sub fund.
        /// </summary>
        /// <param name="subFundId">The sub fund id.</param>
        /// <param name="subFund">The sub fund.</param>
        /// <param name="rollYear">The roll year.</param>
        /// <returns>error id </returns>
        public static int F15005_CheckSubFund(int? subFundId, string subFund, int rollYear)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F15005_CheckSubFund(subFundId, subFund, rollYear);
            }
            else
            {
                return Helper.F15005_CheckSubFund(subFundId, subFund, rollYear);
            }
        }

        /// <summary>
        /// F9503_s the create or edit sub fund.
        /// </summary>
        /// <param name="subFundId">The sub fund id.</param>
        /// <param name="subFundElments">The sub fund elments.</param>
        /// <param name="userId">UserID</param>
        /// <returns>returns primaryId</returns>
        public static int F9503_CreateOrEditSubFund(int? subFundId, string subFundElments, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F9503_CreateOrEditSubFund(subFundId, subFundElments, userId);
            }
            else
            {
                return Helper.F9503_CreateOrEditSubFund(subFundId, subFundElments, userId);
            }
        }

        #endregion

        #endregion

        #region F1501 General Ledger Configuration

        #region List RollYear

        /// <summary>
        /// F1501_s the list roll year.
        /// </summary>
        /// <returns>Roll Years</returns>
        public static F1501GLConfigurationData F1501_ListRollYear()
        {
            if (WSHelper.IsOnLineMode)
            {
                string configValues;
                F1501GLConfigurationData configData = new F1501GLConfigurationData();
                configValues = terraScanService.F1501_ListRollYear();
                configData.ReadXml(Utilities.SharedFunctions.XmlParser(configValues));
                return configData;
            }
            else
            {
                return Helper.F1501_ListRollYear();
            }
        }

        #endregion

        #region List GL Config Details

        /// <summary>
        /// F1501_s the list GL config details.
        /// </summary>
        /// <param name="rollYear">The roll year.</param>
        /// <returns>GL Config Details</returns>
        public static F1501GLConfigurationData F1501_ListGLConfigDetails(int rollYear)
        {
            if (WSHelper.IsOnLineMode)
            {
                string configValues;
                F1501GLConfigurationData configData = new F1501GLConfigurationData();
                configValues = terraScanService.F1501_ListGLConfigDetails(rollYear);
                configData.ReadXml(Utilities.SharedFunctions.XmlParser(configValues));
                return configData;
            }
            else
            {
                return Helper.F1501_ListGLConfigDetails(rollYear);
            }
        }

        #endregion

        #region Get GL config Details

        /// <summary>
        /// F1501_s the get GL config details.
        /// </summary>
        /// <param name="configId">The config id.</param>
        /// <returns>GL config Details</returns>
        public static F1501GLConfigurationData F1501_GetGLConfigDetails(int configId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string configValues;
                F1501GLConfigurationData configData = new F1501GLConfigurationData();
                configValues = terraScanService.F1501_GetGLConfigDetails(configId);
                configData.ReadXml(Utilities.SharedFunctions.XmlParser(configValues));
                return configData;
            }
            else
            {
                return Helper.F1501_GetGLConfigDetails(configId);
            }
        }

        #endregion

        #region Save and Edit the GL Config Details

        /// <summary>
        /// F1501_s the create or edit GL config details.
        /// </summary>
        /// <param name="configId">The config id.</param>
        /// <param name="configElements">The g L config elements.</param>
        /// <param name="userId">UserID</param>
        /// <returns>Error Status</returns>
        public static int F1501_CreateOrEditGLConfigDetails(int configId, string configElements, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F1501_CreateOrEditGLConfigDetails(configId, configElements, userId);
            }
            else
            {
                return Helper.F1501_CreateOrEditGLConfigDetails(configId, configElements, userId);
            }
        }

        #endregion

        #endregion

        #region F9080 Roll Year Management

        /// <summary>
        /// F9080_s the get Roll Year Managment.
        /// </summary>
        /// <param name="rollYear">The roll year .</param>
        /// <param name="userId">The User id.</param>
        /// <returns>Returns step DataSet</returns>
        public static F9080RollYearManagementData F9080_GetRollYearManagement(short rollYear, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string rollYearValue;
                F9080RollYearManagementData rollYearDataSet = new F9080RollYearManagementData();
                rollYearValue = terraScanService.F9080_GetRollYearManagement(rollYear, userId);
                rollYearDataSet.ReadXml(Utilities.SharedFunctions.XmlParser(rollYearValue));
                return rollYearDataSet;
            }
            else
            {
                return Helper.F9080_GetRollYearManagement(rollYear, userId);
            }
        }


        /// <summary>
        /// F9080_s the list roll Year Dataset.
        /// </summary>
        /// <param name="userId">The User Id.</param>
        /// <returns>Step dataset</returns>
        public static F9080RollYearManagementData F9080_ListRollYearManagement(int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string stepsValue;
                F9080RollYearManagementData stepsDataSet = new F9080RollYearManagementData();
                stepsValue = terraScanService.F9080_ListRollYearManagement(userId);
                stepsDataSet.ReadXml(Utilities.SharedFunctions.XmlParser(stepsValue));
                return stepsDataSet;
            }
            else
            {
                return Helper.F9080_ListRollYearManagement(userId);
            }
        }

        /// <summary>
        /// F9080_s the Execute Roll Year Management.
        /// </summary>
        /// <param name="RollOverId">The RollOver id.</param>
        /// <param name="userId">UserID</param>
        public static string F9080_ExecRollYearStep(short rollOverId, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F9080_ExecRollYearStep(rollOverId, userId);
            }
            else
            {
                return Helper.F9080_ExecRollYearStep(rollOverId, userId);
            }
        }



        #endregion F9080 Roll Year Management

        #region F1410 Owner Receipting

        /// <summary>
        /// F1410_s the get owner receipting.
        /// </summary>
        /// <param name="interestDate">The interest date.</param>
        /// <param name="ownerId">The owner id.</param>
        /// <returns>Returns Owner Reeipting DataSet</returns>
        public static F1410OwnerReceiptingData F1410_GetOwnerReceipting(string interestDate, string ownerId, string parcelIDs)
        {
            if (WSHelper.IsOnLineMode)
            {
                string ownerReceiptingValue;
                F1410OwnerReceiptingData ownerReceiptingDataSet = new F1410OwnerReceiptingData();
                ownerReceiptingValue = terraScanService.F1410_GetOwnerReceipting(interestDate, ownerId, parcelIDs);
                ownerReceiptingDataSet.ReadXml(Utilities.SharedFunctions.XmlParser(ownerReceiptingValue));
                return ownerReceiptingDataSet;
            }
            else
            {
                return Helper.F1410_GetOwnerReceipting(interestDate, ownerId, parcelIDs);
            }
        }

        /// <summary>
        /// F1410_s the list owner receipting.
        /// </summary>
        /// <param name="interestDate">The interest date.</param>
        /// <param name="statementXml">The statement XML.</param>
        /// <param name="formBackColor">Form Backcolor</param>
        /// <returns>OwnerReceipting dataset</returns>
        public static F1410OwnerReceiptingData F1410_ListOwnerReceipting(string interestDate, string statementXml, string formBackColor)
        {
            if (WSHelper.IsOnLineMode)
            {
                string ownerReceiptingValue;
                F1410OwnerReceiptingData ownerReceiptingDataSet = new F1410OwnerReceiptingData();
                ownerReceiptingValue = terraScanService.F1410_ListOwnerReceipting(interestDate, statementXml, formBackColor);
                ownerReceiptingDataSet.ReadXml(Utilities.SharedFunctions.XmlParser(ownerReceiptingValue));
                return ownerReceiptingDataSet;
            }
            else
            {
                return Helper.F1410_ListOwnerReceipting(interestDate, statementXml, formBackColor);
            }
        }

        /// <summary>
        /// F1410_s the delete owner receipting.
        /// </summary>
        /// <param name="ownerId">The owner id.</param>
        /// <param name="ownerXml">The owner XML.</param>
        /// <param name="statementXml">The statement XML.</param>
        /// <param name="userId">UserID</param>
        /// <param name="formBackColor">Form Backcolor</param>
        /// <returns>Returns OwnerReceipting Dataset</returns>
        public static F1410OwnerReceiptingData F1410_DeleteOwnerReceipting(int ownerId, string ownerXml, string statementXml, int userId, string formBackColor)
        {
            if (WSHelper.IsOnLineMode)
            {
                string ownerReceiptingValue;
                F1410OwnerReceiptingData ownerReceiptingDataSet = new F1410OwnerReceiptingData();
                ownerReceiptingValue = terraScanService.F1410_DeleteOwnerReceipting(ownerId, ownerXml, statementXml, userId, formBackColor);
                ownerReceiptingDataSet.ReadXml(Utilities.SharedFunctions.XmlParser(ownerReceiptingValue));
                return ownerReceiptingDataSet;
            }
            else
            {
                return Helper.F1410_DeleteOwnerReceipting(ownerId, ownerXml, statementXml, userId, formBackColor);
            }
        }

        /// <summary>
        /// F1410_s the save owner receipting.
        /// </summary>
        /// <param name="userId">The user id.</param>
        /// <param name="receiptDate">The receipt date.</param>
        /// <param name="interestDate">The interest date.</param>
        /// <param name="ppaymentId">The ppayment id.</param>
        /// <param name="paymentOption">The payment option.</param>
        /// <param name="statementXml">The statement XML.</param>
        /// <returns>Returns OwnerReceipting Dataset</returns>
        public static string F1410_SaveOwnerReceipting(int userId, string receiptDate, string interestDate, int ppaymentId, int paymentOption, string statementXml)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F1410_SaveOwnerReceipting(userId, receiptDate, interestDate, ppaymentId, paymentOption, statementXml);
                ////string ownerReceiptingValue;
                ////F1410OwnerReceiptingData ownerReceiptingDataSet = new F1410OwnerReceiptingData();
                ////ownerReceiptingValue = terraScanService.F1410_SaveOwnerReceipting(userId, receiptDate, interestDate, ppaymentId, paymentOption, statementXml);
                ////ownerReceiptingDataSet.ReadXml(Utilities.SharedFunctions.XmlParser(ownerReceiptingValue));
                ////return ownerReceiptingDataSet;
            }
            else
            {
                return Helper.F1410_SaveOwnerReceipting(userId, receiptDate, interestDate, ppaymentId, paymentOption, statementXml);
            }
        }

        public static int F1410_SaveOwnerReceiptPreview(int userId, string statementDetails)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F1410_SaveOwnerReceiptPreview(userId, statementDetails);
            }
            else
            {
                return Helper.F1410_SaveOwnerReceiptPreview(userId, statementDetails);
            }
        }

        #region List Attachment Details

        /// <summary>
        /// List attachment details.
        /// </summary>
        /// <param name="formId">The form id.</param>
        /// <param name="keyIds">The key ids.</param>
        /// <param name="userId">The user id.</param>
        /// <param name="moduleId">The module id.</param>
        /// <returns>Typed DataSet</returns>
        public static F1410OwnerReceiptingData F1410_ListAttachmentDetails(int formId, string keyIds, int userId, int moduleId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string receiptDetailsValue;
                F1410OwnerReceiptingData receiptDetailsData = new F1410OwnerReceiptingData();
                receiptDetailsValue = terraScanService.F1410_ListAttachmentDetails(formId, keyIds, userId, moduleId);
                receiptDetailsData.ReadXml(Utilities.SharedFunctions.XmlParser(receiptDetailsValue));
                return receiptDetailsData;
            }
            else
            {
                return Helper.F1410_ListAttachmentDetails(formId, keyIds, userId, moduleId);
            }
        }

        #endregion List Attachment Details

        #endregion

        #region F8000 GDoc Commons

        #region Get GDocBusiness

        /// <summary>
        /// To Load GDoc Business ComboBoxs.
        /// </summary>
        /// <returns>Typed DataSet Containg the details about GDoc User, Diameter, Business, Street and PropertyReference</returns>
        public static GDocCommonData F8000_GetGDocBusiness()
        {
            if (WSHelper.IsOnLineMode)
            {
                string getGDocBusinessValue;
                GDocCommonData gdocCommonData = new GDocCommonData();
                getGDocBusinessValue = terraScanService.F8000_GetGDocBusiness();
                gdocCommonData.ReadXml(Utilities.SharedFunctions.XmlParser(getGDocBusinessValue));
                return gdocCommonData;
            }
            else
            {
                return Helper.F8000_GetGDocBusiness();
            }
        }

        #endregion Get GDocBusiness

        #region Get GDocDiameter

        /// <summary>
        /// To Load GDoc Diameter ComboBoxs.
        /// </summary>
        /// <param name="featureClassId">The FeatureClassId </param>
        /// <returns>Typed DataSet Containg the details about GDoc User, Diameter, Business, Street and PropertyReference</returns>
        public static GDocCommonData F8000_GetGDocDiameter(int featureClassId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string getGDocDiameterValue;
                GDocCommonData gdocCommonData = new GDocCommonData();
                getGDocDiameterValue = terraScanService.F8000_GetGDocDiameter(featureClassId);
                gdocCommonData.ReadXml(Utilities.SharedFunctions.XmlParser(getGDocDiameterValue));
                return gdocCommonData;
            }
            else
            {
                return Helper.F8000_GetGDocDiameter(featureClassId);
            }
        }

        #endregion Get GDocDiameter

        #region Get GDocPropertyReference

        /// <summary>
        /// To Load GDoc PropertyReference ComboBoxs.
        /// </summary>
        /// <param name="featureClassId">The FeatureClassId </param>
        /// <param name="refField">The Ref Field</param>
        /// <returns>Typed DataSet Containg the details about GDoc User, Diameter, Business, Street and PropertyReference</returns>
        public static GDocCommonData F8000_GetGDocPropertyReference(int featureClassId, string refField)
        {
            if (WSHelper.IsOnLineMode)
            {
                string getGDocPropertyReferenceValue;
                GDocCommonData gdocCommonData = new GDocCommonData();
                getGDocPropertyReferenceValue = terraScanService.F8000_GetGDocPropertyReference(featureClassId, refField);
                gdocCommonData.ReadXml(Utilities.SharedFunctions.XmlParser(getGDocPropertyReferenceValue));
                return gdocCommonData;
            }
            else
            {
                return Helper.F8000_GetGDocPropertyReference(featureClassId, refField);
            }
        }

        #endregion Get GDocPropertyReference

        #region Get GDocStreet

        /// <summary>
        /// To Load GDoc Street ComboBoxs.
        /// </summary>
        /// <returns>Typed DataSet Containg the details about GDoc User, Diameter, Business, Street and PropertyReference</returns>
        public static GDocCommonData wListStreets()
        {
            if (WSHelper.IsOnLineMode)
            {
                string getGDocStreetValue;
                GDocCommonData gdocCommonData = new GDocCommonData();
                getGDocStreetValue = terraScanService.wListStreets();
                gdocCommonData.ReadXml(Utilities.SharedFunctions.XmlParser(getGDocStreetValue));
                return gdocCommonData;
            }
            else
            {
                return Helper.wListStreets();
            }
        }

        #endregion Get GDocStreet

        #region Get GDocUser

        /// <summary>
        /// To Load GDoc User ComboBoxs.
        /// </summary>
        /// <returns>Typed DataSet Containg the details about GDoc User, Diameter, Business, Street and PropertyReference</returns>
        public static GDocCommonData F8000_GetGDocUser()
        {
            if (WSHelper.IsOnLineMode)
            {
                string getGDocUserValue;
                GDocCommonData gdocCommonData = new GDocCommonData();
                getGDocUserValue = terraScanService.F8000_GetGDocUser();
                gdocCommonData.ReadXml(Utilities.SharedFunctions.XmlParser(getGDocUserValue));
                return gdocCommonData;
            }
            else
            {
                return Helper.F8000_GetGDocUser();
            }
        }

        #endregion Get GDocUser

        #endregion F8000 GDoc Commons

        #region F84121 Sanitary Manhole Properties

        #region Get Sanitary Manhole Properties

        /// <summary>
        ///  To Load F84121 Sanitary Manhole properties.
        /// </summary>
        /// <param name="manholeId">The Manhole ID.</param>
        /// <returns>Typed DataSet Containing All the Sanitary Manhole properties Details</returns>
        public static F84121SanitaryManholePropertiesData F84121_GetSanitaryManholeProperties(int manholeId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string sanitaryManholePropertiesValue;
                F84121SanitaryManholePropertiesData sanitaryManholePropertiesData = new F84121SanitaryManholePropertiesData();
                sanitaryManholePropertiesValue = terraScanService.F84121_GetSanitaryManholeProperties(manholeId);
                sanitaryManholePropertiesData.ReadXml(Utilities.SharedFunctions.XmlParser(sanitaryManholePropertiesValue));
                return sanitaryManholePropertiesData;
            }
            else
            {
                return Helper.F84121_GetSanitaryManholeProperties(manholeId);
            }
        }

        #endregion

        #region Save Sanitary Manhole Properties

        /// <summary>
        /// To Save F84121 Sanitary Manhole properties.
        /// </summary>
        /// <param name="manholeId">The Manhole ID.</param>
        /// <param name="sanitaryManholeProperties">The XML string Containing All values in Sanitary Manhole properties.</param>
        /// <param name="userId">UserID</param>
        /// <returns>The integer value containing Manhole id</returns>
        public static int F84121_SaveSanitaryManholeProperties(int manholeId, string sanitaryManholeProperties, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F84121_SaveSanitaryManholeProperties(manholeId, sanitaryManholeProperties, userId);
            }
            else
            {
                return Helper.F84121_SaveSanitaryManholeProperties(manholeId, sanitaryManholeProperties, userId);
            }
        }

        #endregion

        #region Delete Sanitary Manhole Properties

        /// <summary>
        /// To Delete F84121 Sanitary Manhole properties
        /// </summary>
        /// <param name="manholeId">The Manhole Id</param>
        /// <param name="userId">UserID</param>
        public static void F84121_DeleteSanitaryManholeProperties(int manholeId, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                terraScanService.F84121_DeleteSanitaryManholeProperties(manholeId, userId);
            }
            else
            {
                Helper.F84121_DeleteSanitaryManholeProperties(manholeId, userId);
            }
        }

        #endregion

        #endregion

        #region F84122 Sanitary Manhole Location

        #region Get Sanitary Manhole Location

        /// <summary>
        /// To Load F84122 Sanitary Manhole Location.
        /// </summary>
        /// <param name="keyId">The key id.</param>
        /// <returns>
        /// Typed DataSet Containing All the Sanitary Manhole Loaction Details
        /// </returns>
        public static F84122SanitaryManholeLocationData F84122_GetSanitaryManholeLocation(int keyId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string sanitaryManholeLocationValue;
                F84122SanitaryManholeLocationData sanitaryManholeLocationData = new F84122SanitaryManholeLocationData();
                sanitaryManholeLocationValue = terraScanService.F84122_GetSanitaryManholeLocation(keyId);
                sanitaryManholeLocationData.ReadXml(Utilities.SharedFunctions.XmlParser(sanitaryManholeLocationValue));
                return sanitaryManholeLocationData;
            }
            else
            {
                return Helper.F84122_GetSanitaryManholeLocation(keyId);
            }
        }

        #endregion

        #region Save Sanitary Manhole Location

        /// <summary>
        /// To Save F84122 Sanitary Manhole Location.
        /// </summary>
        /// <param name="keyId">The key id.</param>
        /// <param name="sanitaryManholeLocation">The Sanitary Manhole location.</param>
        /// <param name="userId">UserID</param>
        /// <returns>The integer value containing key id</returns>
        public static int F84122_SaveSanitaryManholeLocation(int keyId, string sanitaryManholeLocation, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F84122_SaveSanitaryManholeLocation(keyId, sanitaryManholeLocation, userId);
            }
            else
            {
                return Helper.F84122_SaveSanitaryManholeLocation(keyId, sanitaryManholeLocation, userId);
            }
        }

        #endregion

        #endregion

        #region F84721 Water Valve Properties

        #region Get Water Valve Properties

        /// <summary>
        ///  To Load F84721 Water valve properties.
        /// </summary>
        /// <param name="valveId">The valve ID.</param>
        /// <returns>Typed DataSet Containing All the Water valve properties Details</returns>
        public static F84721WaterValvePropertiesData F84721_GetWaterValveProperties(int valveId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string waterValvePropertiesValue;
                F84721WaterValvePropertiesData waterValvePropertiesData = new F84721WaterValvePropertiesData();
                waterValvePropertiesValue = terraScanService.F84721_GetWaterValveProperties(valveId);
                waterValvePropertiesData.ReadXml(Utilities.SharedFunctions.XmlParser(waterValvePropertiesValue));
                return waterValvePropertiesData;
            }
            else
            {
                return Helper.F84721_GetWaterValveProperties(valveId);
            }
        }

        #endregion Get Water Valve Properties

        #region Save Water Valve Properties

        /// <summary>
        /// To Save F84721 Water valve properties.
        /// </summary>
        /// <param name="valveId">The valve ID.</param>
        /// <param name="waterValveProperties">The XML string Containing All values in Water valve properties.</param>
        /// <param name="userId">UserID</param>
        /// <returns>The integer value containing valve id</returns>
        public static int F84721_SaveWaterValveProperties(int valveId, string waterValveProperties, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F84721_SaveWaterValveProperties(valveId, waterValveProperties, userId);
            }
            else
            {
                return Helper.F84721_SaveWaterValveProperties(valveId, waterValveProperties, userId);
            }
        }

        #endregion Save Water Valve Properties

        #region Delete Water Valve Properties

        /// <summary>
        /// To Delete F84721 Water valve properties
        /// </summary>
        /// <param name="valveId">The ValveId</param>
        /// <param name="userId">UserID</param>
        public static void F84721_DeleteWaterValveProperties(int valveId, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                terraScanService.F84721_DeleteWaterValveProperties(valveId, userId);
            }
            else
            {
                Helper.F84721_DeleteWaterValveProperties(valveId, userId);
            }
        }

        #endregion Delete Water Valve Properties

        #endregion F84721 Water Valve Properties

        #region F9033 Query Engine

        #region ListQueryEngine

        /// <summary>
        /// F9033_s the list query engine.
        /// </summary>
        /// <param name="queryViewId">The query view id.</param>
        /// <returns>QueryEngine DataSet</returns>
        public static DataSet F9033_ListQueryEngine(int queryViewId)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F9033_QueryEngine(queryViewId);
            }
            else
            {
                return Helper.F9033ListQueryEngine(queryViewId);
            }
        }

        #endregion

        #region ListQueryView

        /// <summary>
        /// F9033_s the list query view.
        /// </summary>
        /// <param name="formId">The form id.</param>
        /// <returns>QueryEngine</returns>
        public static F9033QueryEngineData F9033_ListQueryView(int formId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string queryViewString;
                F9033QueryEngineData queryEngine = new F9033QueryEngineData();
                queryViewString = terraScanService.F9033_ListQueryView(formId);
                queryEngine.ReadXml(Utilities.SharedFunctions.XmlParser(queryViewString));
                return queryEngine;
            }
            else
            {
                return Helper.F9033ListQueryView(formId);
            }
        }

        #endregion

        #region GetDefaultLayout

        /// <summary>
        /// F9033_s the get default layout.
        /// </summary>
        /// <param name="queryViewId">The query view id.</param>
        /// <returns>F9033QueryEngineData Dataset</returns>
        public static F9033QueryEngineData F9033_GetDefaultLayout(int queryViewId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string getDefaultLayoutString;
                F9033QueryEngineData getDefaultLayoutData = new F9033QueryEngineData();
                getDefaultLayoutString = terraScanService.F9033_GetDefaultLayout(queryViewId);
                getDefaultLayoutData.ReadXml(Utilities.SharedFunctions.XmlParser(getDefaultLayoutString));
                return getDefaultLayoutData;
            }
            else
            {
                return Helper.F9033GetDefaultLayout(queryViewId);
            }
        }

        #endregion

        #region ListQuerySnapShot

        /// <summary>
        /// F9033_s the list query snap shot.
        /// </summary>
        /// <param name="formId">form Id</param>
        /// <returns>DataSet</returns>
        public static F9033QueryEngineData F9033_ListQuerySnapShot(int formId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string querySnapShotString;
                F9033QueryEngineData querySnapShotData = new F9033QueryEngineData();
                querySnapShotString = terraScanService.F9033_ListQuerySnapShot(formId);
                querySnapShotData.ReadXml(Utilities.SharedFunctions.XmlParser(querySnapShotString));
                return querySnapShotData;
            }
            else
            {
                return Helper.F9033_ListQuerySnapShot(formId);
            }
        }

        #endregion ListQuerySnapShot

        #region ListQueryLayout

        /// <summary>
        /// F9033_s the list query layout.
        /// </summary>
        /// <param name="queryViewId">The query view id.</param>
        /// <param name="userId">The user id.</param>
        /// <returns>DataSet</returns>
        public static F9033QueryEngineData F9033_ListQueryLayout(int queryViewId, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string queryLayoutString;
                F9033QueryEngineData queryLayoutData = new F9033QueryEngineData();
                queryLayoutString = terraScanService.F9033_ListQueryLayout(queryViewId, userId);
                queryLayoutData.ReadXml(Utilities.SharedFunctions.XmlParser(queryLayoutString));
                return queryLayoutData;
            }
            else
            {
                return Helper.F9033_ListQueryLayout(queryViewId, userId);
            }
        }

        #endregion ListQueryLayout

        #region GetSnapShotRecordSet

        /// <summary>
        /// F9033_s the get snap shot record set.
        /// </summary>
        /// <param name="snapShotId">The snap shot id.</param>
        /// <param name="queryViewId">The query view id.</param>
        /// <returns>DataSet</returns>
        public static DataSet F9033_GetSnapShotRecordSet(int snapShotId, int queryViewId)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F9033_GetSnapShotRecordSet(snapShotId, queryViewId);
            }
            else
            {
                return Helper.F9033_GetSnapShotRecordSet(snapShotId, queryViewId);
            }
        }

        #endregion GetSnapShotRecordSet

        #region InsertSnapShotItems

        /// <summary>
        /// F9033_s the insert snap shot items.
        /// </summary>
        /// <param name="userId">The user id.</param>
        /// <param name="systemSnapShotxml">The system snap shotxml.</param>
        /// <returns>Integer</returns>
        public static int F9033_InsertSnapShotItems(int? userId, string systemSnapShotxml)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F9033_InsertSnapShotItems(userId, systemSnapShotxml);
            }
            else
            {
                return Helper.F9033_InsertSnapShotItems(userId, systemSnapShotxml);
            }
        }

        #endregion InsertSnapShotItems

        #region GetSystemSnapShotCount

        /// <summary>
        /// F9033_s the Get System SnapShot Count.
        /// </summary>
        /// <param name="systemSnapShotId">systemSnapShotId</param>
        /// <returns>Dataset</returns>
        public static F9033QueryEngineData F9033_GetSystemSnapShotCount(int systemSnapShotId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string systemSnapShotCountstring;
                F9033QueryEngineData systemSnapShotData = new F9033QueryEngineData();
                systemSnapShotCountstring = terraScanService.F9033_GetSystemSnapshotCount(systemSnapShotId);
                systemSnapShotData.ReadXml(Utilities.SharedFunctions.XmlParser(systemSnapShotCountstring));
                return systemSnapShotData;
            }
            else
            {
                return Helper.F9033_GetSystemSnapshotCount(systemSnapShotId);
            }
        }

        #endregion GetSystemSnapShotCount

        #region GetSystemSnapShotRecordSet

        /// <summary>
        /// F9033_s the get system snap shot record set.
        /// </summary>
        /// <param name="systemSnapShotId">The system snap shot id.</param>
        /// <param name="masterFormNO">The master form NO.</param>
        /// <param name="filterValue">The filter value.</param>
        /// <param name="sortOrder">The sort order.</param>
        /// <param name="summaryValue">The summary value.</param>
        /// <param name="columnValue">The column value.</param>
        /// <param name="keyIdCollection">The key id collection.</param>
        /// <param name="isFilter">The is filter.</param>
        /// <returns>DataSet</returns>
        public static DataSet F9033_GetSystemSnapShotRecordSet(int systemSnapShotId, int masterFormNO, string filterValue, string sortOrder, string summaryValue, string columnValue, string keyIdCollection, int isFilter)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F9033_GetSystemSnapShotRecordSet(systemSnapShotId, masterFormNO, filterValue, sortOrder, summaryValue, columnValue, keyIdCollection, isFilter);
            }
            else
            {
                return Helper.F9033_GetSystemSnapShotRecordSet(systemSnapShotId, masterFormNO, filterValue, sortOrder, summaryValue, columnValue, keyIdCollection, isFilter);
            }
        }

        #endregion GetSystemSnapShotRecordSet

        ////Added by Latha

        #region CustomGridFunctionality

        /// <summary>
        /// Lists the query engine grid function.
        /// </summary>
        /// <param name="queryViewId">The query view id.</param>
        /// <param name="filterValue">The filter value.</param>
        /// <param name="sortOrder">The sort order.</param>
        /// <param name="summaryValue">The summary value.</param>
        /// <param name="columnValue">The column value.</param>
        /// <param name="keyIdCollection">Newly added KeyIds</param>
        /// <param name="isFilter">Flag for load all records</param>
        /// <param name="maxRecord">Max Record Count</para000.m>
        /// <returns>DataSet</returns>
        public static DataSet ListQueryEngineGridFunction(int queryViewId, string filterValue, string sortOrder, string summaryValue, string columnValue, string keyIdCollection, string isFilter, string maxRecord)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.ListQueryEngineGridFunction(queryViewId, filterValue, sortOrder, summaryValue, columnValue, keyIdCollection, isFilter, maxRecord);
            }
            else
            {
                return Helper.ListQueryEngineGridFunction(queryViewId, filterValue, sortOrder, summaryValue, columnValue, keyIdCollection, isFilter, maxRecord);
            }
        }

        /// <summary>
        /// Lists the query engine grid snapshot.
        /// </summary>
        /// <param name="snapShotId">The snap shot id.</param>
        /// <param name="queryViewId">The query view id.</param>
        /// <param name="filterValue">The filter value.</param>
        /// <param name="sortOrder">The sort order.</param>
        /// <param name="summaryValue">The summary value.</param>
        /// <param name="columnValue">The column value.</param>
        /// <param name="keyIdCollection">Newly added KeyIds</param>
        /// <param name="isFilter">Flag for load all records</param>
        /// <param name="maxRecord">Max Record Count</param>
        /// <returns>DataSet</returns>
        public static DataSet ListQueryEngineGridSnapshot(int snapShotId, int queryViewId, string filterValue, string sortOrder, string summaryValue, string columnValue, string keyIdCollection, int isFilter, string maxRecord)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.ListQueryEngineGridSnapshot(snapShotId, queryViewId, filterValue, sortOrder, summaryValue, columnValue, keyIdCollection, isFilter, maxRecord);
            }
            else
            {
                return Helper.ListQueryEngineGridSnapshot(snapShotId, queryViewId, filterValue, sortOrder, summaryValue, columnValue, keyIdCollection, isFilter, maxRecord);
            }
        }

        /// <summary>
        /// Lists the columns.
        /// </summary>
        /// <param name="queryViewId">The query view id.</param>
        /// <returns>DataSet</returns>
        public static DataSet ListColumns(int queryViewId)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.ListColumns(queryViewId);
            }
            else
            {
                return Helper.ListColumns(queryViewId);
            }
        }

        #endregion CustomGridFunctionality

        #endregion

        #region F9039QueryUpdate

        #region ListQueryViewColumn

        /// <summary>
        /// F9039s the list query view column.
        /// </summary>
        /// <param name="queryViewId">The query view id.</param>
        /// <returns>DataSet</returns>
        public static F9039QueryUpdate F9039ListQueryViewColumn(int queryViewId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string listQueryViewColumnString;
                F9039QueryUpdate queryUpdateData = new F9039QueryUpdate();
                listQueryViewColumnString = terraScanService.F9039ListQueryViewColumn(queryViewId);
                queryUpdateData.ReadXml(Utilities.SharedFunctions.XmlParser(listQueryViewColumnString));
                return queryUpdateData;
            }
            else
            {
                return Helper.F9039ListQueryViewColumn(queryViewId);
            }
        }

        #endregion ListQueryViewColumn

        #region GetCommandResult

        /// <summary>
        /// F9039s the get command result.
        /// </summary>
        /// <param name="replaceId">The replace id.</param>
        /// <param name="commandResult">The command result.</param>
        /// <returns>DataSet</returns>
        public static DataSet F9039GetCommandResult(int replaceId, string commandResult)
        {
            if (WSHelper.IsOnLineMode)
            {
                string getCommandResultString;
                DataSet queryUpdateData = new DataSet();
                getCommandResultString = terraScanService.F9039GetCommandResult(replaceId, commandResult);
                queryUpdateData.ReadXml(Utilities.SharedFunctions.XmlParser(getCommandResultString));
                return queryUpdateData;
            }
            else
            {
                return Helper.F9039GetCommandResult(replaceId, commandResult);
            }
        }

        #endregion GetCommandResult

        #region UpdateQueryData

        /// <summary>
        /// F9039s the update query data.
        /// </summary>
        /// <param name="queryViewId">The query view id.</param>
        /// <param name="keyField">The key field.</param>
        /// <param name="keyId">The key id.</param>
        /// <param name="updateField">The update field.</param>
        /// <param name="doprocessValue">DoProcess</param>
        /// <param name="userId">UserID</param>
        /// <returns>String</returns>
        public static string F9039UpdateQueryData(int queryViewId, string keyField, string keyId, string updateField, int doprocessValue, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F9039UpdateQueryData(queryViewId, keyField, keyId, updateField, doprocessValue, userId);
            }
            else
            {
                return Helper.F9039UpdateQueryData(queryViewId, keyField, keyId, updateField, doprocessValue, userId);
            }
        }

        #endregion UpdateQueryData

        #endregion F9039QueryUpdate

        #region F84722 Water Valve Properties

        #region Get Water Valve Location

        /// <summary>
        /// To Load F84722 Water valve Location.
        /// </summary>
        /// <param name="keyId">The key id.</param>
        /// <param name="formId">The form id.</param>
        /// <returns>
        /// Typed DataSet Containing All the Water Valve Loaction Details
        /// </returns>
        public static F84722WaterValveLocationData F84722_GetWaterValveLocation(int keyId, int formId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string waterValveLocationValue;
                F84722WaterValveLocationData waterValveLocationData = new F84722WaterValveLocationData();
                waterValveLocationValue = terraScanService.F84722_GetWaterValveLocation(keyId, formId);
                waterValveLocationData.ReadXml(Utilities.SharedFunctions.XmlParser(waterValveLocationValue));
                return waterValveLocationData;
            }
            else
            {
                return Helper.F84722_GetWaterValveLocation(keyId, formId);
            }
        }

        #endregion Get Water Valve Location

        #region Save Water Valve Location

        /// <summary>
        /// To Save F84722 Water valve Location.
        /// </summary>
        /// <param name="keyId">The key id.</param>
        /// <param name="waterValveLocation">The water valve location.</param>
        /// <param name="formId">The form id.</param>
        /// <param name="userId">UserID</param>
        /// <returns>The integer value containing key id</returns>
        public static int F84722_SaveWaterValveLocation(int keyId, string waterValveLocation, int formId, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F84722_SaveWaterValveLocation(keyId, waterValveLocation, formId, userId);
            }
            else
            {
                return Helper.F84722_SaveWaterValveLocation(keyId, waterValveLocation, formId, userId);
            }
        }

        #endregion Save Water Valve Location

        #endregion F84722 Water Valve Properties

        #region F84723 Water Hydrant Properties

        #region Get Water Hydrant Properties

        /// <summary>
        /// To Load Water Hydrant Properties
        /// </summary>
        /// <param name="hydrantId">The hydrantId.</param>
        /// <returns>Typed DataSet Containing the Water Hydrant Properties Details.</returns>
        public static F84723WaterHydrantPropertiesData F84723_GetWaterHydrantProperties(int hydrantId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string waterHydrantPropertiesValue;
                F84723WaterHydrantPropertiesData waterHydrantPropertiesData = new F84723WaterHydrantPropertiesData();
                waterHydrantPropertiesValue = terraScanService.F84723_GetWaterHydrantProperties(hydrantId);
                waterHydrantPropertiesData.ReadXml(Utilities.SharedFunctions.XmlParser(waterHydrantPropertiesValue));
                return waterHydrantPropertiesData;
            }
            else
            {
                return Helper.F84723_GetWaterHydrantProperties(hydrantId);
            }
        }

        #endregion Get Water Hydrant Properties

        #region Save Water Hydrant Properties

        /// <summary>
        /// To Save Water Hydrant Properties.
        /// </summary>
        /// <param name="hydrantId">The hydrant id.</param>
        /// <param name="waterHydrantPropties">The XML String containing the Water Hydrant Properties Details.</param>
        /// <param name="userId">UserID</param>
        /// <returns>The integer valu containing the hydrantId</returns>
        public static int F84723_SaveWaterHydrantProperties(int hydrantId, string waterHydrantPropties, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F84723_SaveWaterHydrantProperties(hydrantId, waterHydrantPropties, userId);
            }
            else
            {
                return Helper.F84723_SaveWaterHydrantProperties(hydrantId, waterHydrantPropties, userId);
            }
        }

        #endregion Save Water Hydrant Properties

        #region Delete Water Hydrant Properties

        /// <summary>
        /// To Delete Water Hydrant Properties.
        /// </summary>
        /// <param name="hydrantId">hydrantId</param>
        /// <param name="userId">UserID</param>
        public static void F84723_DeleteWaterHydrantProperties(int hydrantId, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                terraScanService.F84723_DeleteWaterHydrantProperties(hydrantId, userId);
            }
            else
            {
                Helper.F84723_DeleteWaterHydrantProperties(hydrantId, userId);
            }
        }

        #endregion Delete Water Hydrant Properties

        #endregion F84723 Water Hydrant Properties

        #region F84725 Water Pipe Properties

        #region Get Water Pipe Properties

        /// <summary>
        /// To Load Water Pipe Properties
        /// </summary>
        /// <param name="pipeId">The Pipe Id</param>
        /// <returns>Typed DataSet Containing the Water Pipe Properties details</returns>
        public static F84725WaterPipePropertiesData F84725_GetWaterPipeProperties(int pipeId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string waterPipePropertiesValue;
                F84725WaterPipePropertiesData waterPipePropertiesData = new F84725WaterPipePropertiesData();
                waterPipePropertiesValue = terraScanService.F84725_GetWaterPipeProperties(pipeId);
                waterPipePropertiesData.ReadXml(Utilities.SharedFunctions.XmlParser(waterPipePropertiesValue));
                return waterPipePropertiesData;
            }
            else
            {
                return Helper.F84725_GetWaterPipeProperties(pipeId);
            }
        }

        #endregion Get Water Pipe Properties

        #region Save Water Pipe Properties

        /// <summary>
        /// To Save water pipe properties.
        /// </summary>
        /// <param name="pipeId">The pipe id.</param>
        /// <param name="waterPipeProperties">The XML String Containing the Water Pipe Properties details.</param>
        /// <param name="userId">UserID</param>
        /// <returns>the integer value containing the pipeid</returns>
        public static int F84725_SaveWaterPipeProperties(int pipeId, string waterPipeProperties, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F84725_SaveWaterPipeProperties(pipeId, waterPipeProperties, userId);
            }
            else
            {
                return Helper.F84725_SaveWaterPipeProperties(pipeId, waterPipeProperties, userId);
            }
        }

        #endregion Save Water Pipe Properties

        #region Delete Water Pipe Properties

        /// <summary>
        /// To Delete water pipe properties.
        /// </summary>
        /// <param name="pipeId">the pipe Id</param>
        /// <param name="userId">UserID</param>
        public static void F84725_DeleteWaterPipeProperties(int pipeId, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                terraScanService.F84725_DeleteWaterPipeProperties(pipeId, userId);
            }
            else
            {
                Helper.F84725_DeleteWaterPipeProperties(pipeId, userId);
            }
        }

        #endregion Delete Water Pipe Properties

        #endregion F84725 Water Pipe Properties

        #region F84726 Water Pipe Location

        #region Get Water Pipe Location

        /// <summary>
        /// To Load Water Pipe Location.
        /// </summary>
        /// <param name="pipeId">The Pipe Id.</param>
        /// <returns>Typed Dataset Containg the Water Pipe Location Details.</returns>
        public static F84726WaterPipeLocationData F84726_GetWaterPipeLocation(int pipeId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string waterPipeLocationValue;
                F84726WaterPipeLocationData waterPipeLocationData = new F84726WaterPipeLocationData();
                waterPipeLocationValue = terraScanService.F84726_GetWaterPipeLocation(pipeId);
                waterPipeLocationData.ReadXml(Utilities.SharedFunctions.XmlParser(waterPipeLocationValue));
                return waterPipeLocationData;
            }
            else
            {
                return Helper.F84726_GetWaterPipeLocation(pipeId);
            }
        }

        #endregion Get Water Pipe Location

        #region Save Water Pipe Location

        /// <summary>
        /// To Save Water Pipe Location.
        /// </summary>
        /// <param name="pipeId">The Pipe Id.</param>
        /// <param name="waterPipeLocation">The Xml String containing the Water Pipe Location details</param>
        /// <param name="userId">UserID</param>
        /// <returns>The Integer value containing pipe Id value</returns>
        public static int F84726_SaveWaterPipeLocation(int pipeId, string waterPipeLocation, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F84726_SaveWaterPipeLocation(pipeId, waterPipeLocation, userId);
            }
            else
            {
                return Helper.F84726_SaveWaterPipeLocation(pipeId, waterPipeLocation, userId);
            }
        }

        #endregion Save Water Pipe Location

        #endregion F84726 Water Pipe Location


        #region F1505 District Copy Form

        /// <summary>
        /// F1505_s the District Copy Form
        /// </summary>
        /// <param name="districtId">The district id.</param>
        /// <param name="district">The district.</param>
        /// <param name="description">The description.</param>
        /// <param name="rollYear">The roll year.</param>
        /// <param name="activeStatus">The is active.</param>
        /// <param name="districtFundItems">The district fund items.</param>
        /// <param name="userId">UserID</param>
        /// <returns>Error Statement or PrimaryKey Id</returns>
        public static string F1505ExecuteCopyDistrict(int districtId, string districtText,int rollyear,string description,bool isactive,int districtTypeId, int ExciseId, int  userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F1505ExecuteCopyDistrict(districtId, districtText, rollyear, description, isactive, districtTypeId, ExciseId, userId);
                
            }
            else
            {
                return Helper.F1505ExecuteCopyDistrict(districtId, districtText, rollyear, description, isactive, districtTypeId, ExciseId, userId); 
            }
        }


        #endregion F1505 District Copy Form


        #region F15002 District Fund Management

        #region Get Distict Fund Details

        /// <summary>
        /// F15002_s the get distirct fund details.
        /// </summary>
        /// <param name="districtId">The district id.</param>
        /// <returns>DataSet Contains the District Fund Deatails</returns>
        public static F15002DistMgmtData F15002_GetDistirctFundDetails(int? districtId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string districtFundValues;
                F15002DistMgmtData districtMgmtData = new F15002DistMgmtData();
                districtFundValues = terraScanService.F15002_GetDistirctFundDetails(districtId);
                districtMgmtData.ReadXml(Utilities.SharedFunctions.XmlParser(districtFundValues));
                return districtMgmtData;
            }
            else
            {
                return Helper.F15002_GetDistirctFundDetails(districtId);
            }
        }

        /// <summary>
        /// F15002_s the list all funds.
        /// </summary>
        /// <param name="fundId">The fund id.</param>
        /// <param name="fund">The fund.</param>
        /// <param name="rollYear">The roll year.</param>
        /// <returns>DataSet Contains the All Funds Deatails</returns>
        public static F15002DistMgmtData F15002_ListAllFunds(int? fundId, string fund, int? rollYear)
        {
            if (WSHelper.IsOnLineMode)
            {
                string districtFundValues;
                F15002DistMgmtData districtMgmtData = new F15002DistMgmtData();
                districtFundValues = terraScanService.F15002_ListAllFunds(fundId, fund, rollYear);
                districtMgmtData.ReadXml(Utilities.SharedFunctions.XmlParser(districtFundValues));
                return districtMgmtData;
            }
            else
            {
                return Helper.F15002_ListAllFunds(fundId, fund, rollYear);
            }
        }

        #endregion

        #region Save and Edit District and Fund

        /// <summary>
        /// F15002_s the check district.
        /// </summary>
        /// <param name="districtId">The district id.</param>
        /// <param name="district">The district.</param>
        /// <param name="rollYear">The roll year.</param>
        /// <returns>the error id or primaryKeyId </returns>
        public static int F15002_CheckDistrict(int? districtId, string district, int rollYear)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F15002_CheckDistrict(districtId, district, rollYear);
            }
            else
            {
                return Helper.F15002_CheckDistrict(districtId, district, rollYear);
            }
        }

        /// <summary>
        /// F15002_s the create or edit district MGMT.
        /// </summary>
        /// <param name="districtId">The district id.</param>
        /// <param name="district">The district.</param>
        /// <param name="description">The description.</param>
        /// <param name="rollYear">The roll year.</param>
        /// <param name="activeStatus">The is active.</param>
        /// <param name="districtFundItems">The district fund items.</param>
        /// <param name="userId">UserID</param>
        /// <returns>Error Statement or PrimaryKey Id</returns>
        public static int F15002_CreateOrEditDistrictMgmt(int? districtId, string districtDetails, string districtFundItems, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F15002_CreateOrEditDistrictMgmt(districtId, districtDetails, districtFundItems, userId);
            }
            else
            {
                return Helper.F15002_CreateOrEditDistrictMgmt(districtId, districtDetails, districtFundItems, userId);
            }
        }

        #endregion

        #region Get District Type

        /// <summary>
        /// F15002_s the type of the get district.
        /// </summary>
        /// <param name="userId">The user id.</param>
        /// <returns></returns>
        public static F15002DistMgmtData F15002_GetDistrictType(int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string districtType;
                F15002DistMgmtData districtTypeData = new F15002DistMgmtData();
                districtType = terraScanService.F15002_GetDistrictType(userId);
                districtTypeData.ReadXml(Utilities.SharedFunctions.XmlParser(districtType));
                return districtTypeData;
            }
            else
            {
                return Helper.F15002_GetDistrictType(userId);
            }
        }

        #endregion

        #endregion

        #region F84123 Sanitary Pipe Properties

        #region Get Sanitary Pipe Properties

        /// <summary>
        ///  To Load F84123 Sanitary Pipe Properties.
        /// </summary>
        /// <param name="pipeId">The Pipe ID.</param>
        /// <returns>Typed DataSet Containing All the Sanitary Pipe Properties Details</returns>
        public static F84123SanitaryPipePropertiesData F84123_GetSanitaryPipeProperties(int pipeId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string sanitaryPipePropertiesValue;
                F84123SanitaryPipePropertiesData sanitaryPipePropertiesData = new F84123SanitaryPipePropertiesData();
                sanitaryPipePropertiesValue = terraScanService.F84123_GetSanitaryPipeProperties(pipeId);
                sanitaryPipePropertiesData.ReadXml(Utilities.SharedFunctions.XmlParser(sanitaryPipePropertiesValue));
                return sanitaryPipePropertiesData;
            }
            else
            {
                return Helper.F84123_GetSanitaryPipeProperties(pipeId);
            }
        }

        #endregion Get Sanitary Pipe Properties

        #region Check Main Valve ID

        /// <summary>
        /// To Check the Main Valve ID
        /// </summary>
        /// <param name="mainValveId">The main valve id.</param>
        /// <returns>
        /// The Integer Value containing whether Main Valve Id exists are not
        /// </returns>
        public static int F84723_CheckMainValveId(int mainValveId)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F84723_CheckMainValveId(mainValveId);
            }
            else
            {
                return Helper.F84723_CheckMainValveId(mainValveId);
            }
        }

        #endregion Check Main Valve ID

        #region Save Sanitary Pipe Properties

        /// <summary>
        /// To Save F84123 Sanitary Pipe Properties.
        /// </summary>
        /// <param name="pipeId">The Pipe ID.</param>
        /// <param name="sanitaryPipeProperties">The XML string Containing All values in Sanitary pipe properties.</param>
        /// <param name="userId">UserID</param>
        /// <returns>The integer value containing pipe id</returns>
        public static int F84123_SaveSanitaryPipeProperties(int pipeId, string sanitaryPipeProperties, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F84123_SaveSanitaryPipeProperties(pipeId, sanitaryPipeProperties, userId);
            }
            else
            {
                return Helper.F84123_SaveSanitaryPipeProperties(pipeId, sanitaryPipeProperties, userId);
            }
        }

        #endregion Save Sanitary Pipe Properties

        #region Delete Sanitary Pipe Properties

        /// <summary>
        /// To Delete F84123 Sanitary Pipe properties
        /// </summary>
        /// <param name="pipeId">The Pipe Id</param>
        /// <param name="userId">UserID</param>
        public static void F84123_DeleteSanitaryPipeProperties(int pipeId, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                terraScanService.F84123_DeleteSanitaryPipeProperties(pipeId, userId);
            }
            else
            {
                Helper.F84123_DeleteSanitaryPipeProperties(pipeId, userId);
            }
        }

        #endregion Delete Sanitary Pipe Properties

        #endregion F84123 Sanitary Pipe Properties

        #region F84124 Sanitary Pipe Location

        #region Get Sanitary Pipe Location

        /// <summary>
        /// To Load F84124 Sanitary Pipe Location.
        /// </summary>
        /// <param name="keyId">The key id.</param>
        /// <param name="formId">The form id.</param>
        /// <returns>
        /// Typed DataSet Containing All the Water Valve Loaction Details
        /// </returns>
        public static F84124SanitaryPipeLocationData F84124_GetSanitaryPipeLocation(int keyId, int formId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string sanitaryPipeLocationValue;
                F84124SanitaryPipeLocationData sanitaryPipeLocationData = new F84124SanitaryPipeLocationData();
                sanitaryPipeLocationValue = terraScanService.F84124_GetSanitaryPipeLocation(keyId, formId);
                sanitaryPipeLocationData.ReadXml(Utilities.SharedFunctions.XmlParser(sanitaryPipeLocationValue));
                return sanitaryPipeLocationData;
            }
            else
            {
                return Helper.F84124_GetSanitaryPipeLocation(keyId, formId);
            }
        }

        #endregion Get Sanitary Pipe Location

        #region Save Sanitary Pipe Location

        /// <summary>
        /// To Save F84124 Sanitary Pipe Location.
        /// </summary>
        /// <param name="keyId">The key id.</param>
        /// <param name="sanitaryPipeLocation">The Sanitary Pipe location.</param>
        /// <param name="userId">UserID</param>
        /// <returns>The integer value containing key id</returns>
        public static int F84124_SaveSanitaryPipeLocation(int keyId, string sanitaryPipeLocation, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F84124_SaveSanitaryPipeLocation(keyId, sanitaryPipeLocation, userId);
            }
            else
            {
                return Helper.F84124_SaveSanitaryPipeLocation(keyId, sanitaryPipeLocation, userId);
            }
        }

        #endregion Save Sanitary Pipe Location

        #endregion F84124 Sanitary Pipe Location

        #region 11020 Real Property

        #region Get Real Property Statement

        /// <summary>
        /// Gets the real Property statement based on the statement id
        /// </summary>
        /// <param name="statementId">The statement id of the statement to be fetched.</param>
        /// <returns>
        /// The typed dataset containing the statement information of the statementid.
        /// </returns>
        public static F11020RealPropertyData F11020_GetRealPropertyStatement(int statementId)
        {
            if (WSHelper.IsOnLineMode)
            {
                F11020RealPropertyData realPropertyData = new F11020RealPropertyData();
                string realProperty = terraScanService.F11020_GetRealPropertyStatement(statementId);
                realPropertyData.ReadXml(Utilities.SharedFunctions.XmlParser(realProperty));
                return realPropertyData;
            }
            else
            {
                return Helper.F11020_GetRealPropertyStatement(statementId);
            }
        }

        #endregion Get Real Property Statement

        #region update Real Property Statement

        /// <summary>
        /// update the real Property statement based on the statement id
        /// </summary>
        /// <param name="statementId">The statement id.</param>
        /// <param name="statementItems">The statement items.</param>
        /// <param name="userId">UserID</param>
        public static void F1423_UpdateRealPropertyStatement(int statementId, string statementItems, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                terraScanService.F1423_UpdateRealPropertyStatement(statementId, statementItems, userId);
            }
            else
            {
                Helper.F1423_UpdateRealPropertyStatement(statementId, statementItems, userId);
            }
        }

        #endregion update Real Property Statement

        #region List Mortgage Name

        /// <summary>
        /// list the mortgage name.
        /// </summary>
        /// <returns>F11020RealPropertyData with morgage name list</returns>
        public static F11020RealPropertyData F1423_ListMortgageName()
        {
            if (WSHelper.IsOnLineMode)
            {
                F11020RealPropertyData realPropertyData = new F11020RealPropertyData();
                string realProperty = terraScanService.F1423_ListMortgageName();
                realPropertyData.ReadXml(Utilities.SharedFunctions.XmlParser(realProperty));
                return realPropertyData;
            }
            else
            {
                return Helper.F1423_ListMortgageName();
            }
        }

        #endregion List Mortgage Name

        /// <summary>
        /// F15030_s the get real property statements.
        /// </summary>
        /// <param name="statementId">The statement id.</param>
        /// <returns>realPropertyData</returns>
        public static F11020RealPropertyData F15030_GetRealPropertyStatements(int statementId)
        {
            if (WSHelper.IsOnLineMode)
            {
                F11020RealPropertyData realPropertyData = new F11020RealPropertyData();
                string realProperty = terraScanService.F15030_GetRealPropertyStatements(statementId);
                realPropertyData.ReadXml(Utilities.SharedFunctions.XmlParser(realProperty));
                return realPropertyData;
            }
            else
            {
                return Helper.F15030_GetRealPropertyStatements(statementId);
            }
        }

        #endregion 11020 Real Property

        #region 15020 receipt engine

        #region ListHistoryGrid

        /// <summary>
        /// list history grid.
        /// </summary>
        /// <param name="statementId">The statement id.</param>
        /// <returns>F15020ReceiptEngineData with receipt history and Detail</returns>
        public static F15020ReceiptEngineData F15020_ListHistoryGrid(int statementId)
        {
            if (WSHelper.IsOnLineMode)
            {
                F15020ReceiptEngineData receiptEngineData = new F15020ReceiptEngineData();
                string receiptEngine = terraScanService.F15020_ListHistoryGrid(statementId);
                receiptEngineData.ReadXml(Utilities.SharedFunctions.XmlParser(receiptEngine));
                return receiptEngineData;
            }
            else
            {
                return Helper.F15020_ListHistoryGrid(statementId);
            }
        }

        #endregion ListHistoryGrid

        #region GetReceiptDetails

        /// <summary>
        /// get receipt details and payment items.
        /// </summary>
        /// <param name="receiptId">The receipt id.</param>
        /// <returns>F15020ReceiptEngineData with receipt detail</returns>
        public static F15020ReceiptEngineData F15020_GetReceiptDetails(int receiptId)
        {
            if (WSHelper.IsOnLineMode)
            {
                F15020ReceiptEngineData receiptEngineData = new F15020ReceiptEngineData();
                string receiptEngine = terraScanService.F15020_GetReceiptDetails(receiptId);
                receiptEngineData.ReadXml(Utilities.SharedFunctions.XmlParser(receiptEngine));
                return receiptEngineData;
            }
            else
            {
                return Helper.F15020_GetReceiptDetails(receiptId);
            }
        }

        #endregion GetReceiptDetails

        #region Tax CalCulation for Receipt Engine

        #region GetMinTaxDue

        /// <summary>
        /// Gets the minimum tax due amount
        /// </summary>
        /// <param name="statmentId">The statment id.</param>
        /// <param name="interestDate">The interest date of the reciept.</param>
        /// <returns>
        /// The decimal containing minimum tax amount due.
        /// </returns>
        public static decimal F1003_GetMinTaxDue(int statmentId, string interestDate)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F1003_GetMinTaxDue(statmentId, interestDate);
            }
            else
            {
                return Helper.F1003_GetMinTaxDue(statmentId, interestDate);
            }
        }

        #endregion GetMinTaxDue

        #region GetInterestAmount

        /// <summary>
        /// Get the interest amoount.
        /// </summary>
        /// <param name="statmentId">The statment id.</param>
        /// <param name="interestDate">The interest date of the reciept.</param>
        /// <param name="taxDueAmount">The tax due amount.</param>
        /// <returns>
        /// The decimal containing the interest information.
        /// </returns>
        public static decimal F1004_GetInterestAmount(int statmentId, string interestDate, decimal taxDueAmount)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F1004_GetInterestAmount(statmentId, interestDate, taxDueAmount);
            }
            else
            {
                return Helper.F1004_GetInterestAmount(statmentId, interestDate, taxDueAmount);
            }
        }

        #endregion GetInterestAmount

        #endregion Tax CalCulation for Receipt Engine

        #region GetValidReceiptTest

        /// <summary>
        /// Test for reciept validity
        /// </summary>
        /// <param name="statementId">The statement id.</param>
        /// <param name="receiptDate">The transaction date of the reciept.</param>
        /// <returns>The string containing the recipiet's validity information.</returns>
        public static string F1009_GetValidReceiptTest(int statementId, DateTime receiptDate)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F1009_GetValidReceiptTest(statementId, receiptDate);
            }
            else
            {
                return Helper.F1009_GetValidReceiptTest(statementId, receiptDate);
            }
        }

        #endregion GetValidReceiptTest

        #endregion 15020 receipt engine

        #region 1405 Master Receipting

        #region SaveReceipt

        /// <summary>
        /// saves the master receipt.
        /// </summary>
        /// <param name="statementId">The statement id.</param>
        /// <param name="receiptSourceId">The receipt source id.</param>
        /// <param name="otherParameterInfo">The other parameter info.</param>
        /// <returns>the integer - receipt id</returns>
        public static int F1405_SaveMasterReceipt(int statementId, int receiptSourceId, string otherParameterInfo, int? sharedPaymentId)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F1405_SaveMasterReceipt(statementId, receiptSourceId, otherParameterInfo, sharedPaymentId);
            }
            else
            {
                return Helper.F1405_SaveMasterReceipt(statementId, receiptSourceId, otherParameterInfo, sharedPaymentId);
            }
        }

        #endregion SaveReceipt

        #endregion

        #region F15104 ReceiptPayment

        /// <summary>
        /// F15104_s the get receipt payment.
        /// </summary>
        /// <param name="receiptId">The receipt id.</param>
        /// <returns>ReceiptPayamentDataSet</returns>
        public static F15104ReceiptPayamentData F15104_GetReceiptPayment(int receiptId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string receiptPayamentValue;
                F15104ReceiptPayamentData receiptPayamentDataSet = new F15104ReceiptPayamentData();
                receiptPayamentValue = terraScanService.F15104_GetReceiptPayment(receiptId);
                receiptPayamentDataSet.ReadXml(Utilities.SharedFunctions.XmlParser(receiptPayamentValue));
                return receiptPayamentDataSet;
            }
            else
            {
                return Helper.F15104_GetReceiptPayment(receiptId);
            }
        }

        /// <summary>
        /// F15104_s the update receipt payment.
        /// </summary>
        /// <param name="receiptPayment">The receipt payment.</param>
        /// <param name="userId">UserID</param>
        public static void F15104_UpdateReceiptPayment(string receiptPayment, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                terraScanService.F15104_UpdateReceiptPayment(receiptPayment, userId);
            }
            else
            {
                Helper.F15104_UpdateReceiptPayment(receiptPayment, userId);
            }
        }

        #endregion

        #region 15004 AgencyManagement

        #region Get AgencyDetails

        /// <summary>
        /// F15004_s the get agency details.
        /// </summary>
        /// <param name="agencyId">The agency id.</param>
        /// <returns>agencyManagementData</returns>
        public static F15004AgencyManagementData F15004_GetAgencyDetails(int agencyId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string agencyDetails;
                F15004AgencyManagementData agencyManagementData = new F15004AgencyManagementData();
                agencyDetails = terraScanService.F15004_GetAgencyDetails(agencyId);
                agencyManagementData.ReadXml(Utilities.SharedFunctions.XmlParser(agencyDetails));
                return agencyManagementData;
            }
            else
            {
                return Helper.F15004_GetAgencyDetails(agencyId);
            }
        }

        #endregion

        #region Check for Agency Dupilcate Record

        /// <summary>
        /// F15004_s the check duplicate agency.
        /// </summary>
        /// <param name="agencyId">The agency id.</param>
        /// <param name="agencyName">Name of the agency.</param>
        /// <returns>errorId</returns>
        public static int F15004_CheckDuplicateAgency(int agencyId, string agencyName)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F15004_CheckDuplicateAgency(agencyId, agencyName);
            }
            else
            {
                return Helper.F15004_CheckDuplicateAgency(agencyId, agencyName);
            }
        }

        #endregion

        #region Create and  Edit the Agency Details

        /// <summary>
        /// F15004_s the create or edit agency details.
        /// </summary>
        /// <param name="agencyId">The agency id.</param>
        /// <param name="acctEmelemts">The acct emelemts.</param>
        /// <param name="userId">UserID</param>
        /// <returns>PrimaryKeyID</returns>
        public static int F15004_CreateOrEditAgencyDetails(int agencyId, string acctEmelemts, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F15004_CreateOrEditAgencyDetails(agencyId, acctEmelemts, userId);
            }
            else
            {
                return Helper.F15004_CreateOrEditAgencyDetails(agencyId, acctEmelemts, userId);
            }
        }

        #endregion

        #endregion

        #region 15007 Account Management Slice

        /// <summary>
        /// F15007_s the check duplicate account.
        /// </summary>
        /// <param name="accountId">The account id.</param>
        /// <param name="acctEmelemts">The acct emelemts.</param>
        /// <returns>errorId</returns>
        public static int F15007_CheckDuplicateAccount(int accountId, string acctEmelemts)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F15007_CheckDuplicateAccount(accountId, acctEmelemts);
            }
            else
            {
                return Helper.F15007_CheckDuplicateAccount(accountId, acctEmelemts);
            }
        }

        #endregion

        #region F9038 Layout Management

        /// <summary>
        /// F15104_s the get receipt payment.
        /// </summary>
        /// <param name="queryViewId">The query view id.</param>
        /// <param name="userId">The user id.</param>
        /// <returns>ReceiptPayamentDataSet</returns>
        public static F9038LayoutManagementData F9038_LoadLayoutInformation(int queryViewId, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string layoutManagementValue;
                F9038LayoutManagementData layoutManagementDataSet = new F9038LayoutManagementData();
                layoutManagementValue = terraScanService.F9038_LoadLayoutInformation(queryViewId, userId);
                layoutManagementDataSet.ReadXml(Utilities.SharedFunctions.XmlParser(layoutManagementValue));
                return layoutManagementDataSet;
            }
            else
            {
                return Helper.F9038_LoadLayoutInformation(queryViewId, userId);
            }
        }

        #region Save LoadLayoutManagement

        /// <summary>
        /// F9038_s the save layout information.
        /// </summary>
        /// <param name="queryLayoutId">The query layout id.</param>
        /// <param name="layoutManagement">The layout management.</param>
        /// <param name="layoutxml">The layoutxml.</param>
        /// <param name="userId">UserID</param>
        /// <returns>THE LAYOUTID SAVED</returns>
        public static int F9038_SaveLayoutInformation(int queryLayoutId, string layoutManagement, string layoutxml, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F9038_SaveLayoutInformation(queryLayoutId, layoutManagement, layoutxml, userId);
            }
            else
            {
                return Helper.F9038_SaveLayoutInformation(queryLayoutId, layoutManagement, layoutxml, userId);
            }
        }

        #endregion Save LoadLayoutManagement

        #region Delete LoadLayoutManagement

        /// <summary>
        /// F9038_s the delete layout information.
        /// </summary>
        /// <param name="queryLayoutId">The query layout id.</param>
        /// <param name="userId">UserID</param>
        public static void F9038_DeleteLayoutInformation(int queryLayoutId, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                terraScanService.F9038_DeleteLayoutInformation(queryLayoutId, userId);
            }
            else
            {
                Helper.F9038_DeleteLayoutInformation(queryLayoutId, userId);
            }
        }

        #endregion Delete LoadLayoutManagement

        #endregion

        #region F9001 Get Working Day

        /// <summary>
        /// get next working day - depends on clode time.
        /// </summary>
        /// <returns>return today or next working day</returns>
        public static DateTime F9001_GetNextWorkingDay()
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F9001_GetNextWorkingDay();
            }
            else
            {
                return Helper.F9001_GetNextWorkingDay();
            }
        }

        #endregion

        #region F15003 Fund Management

        #region Get Fund and SubFund Details

        /// <summary>
        /// F15003_s the get fund sub fund details.
        /// </summary>
        /// <param name="fundId">The fund id.</param>
        /// <returns>dataset which contains Fund Details</returns>
        public static F15003FundMgmtData F15003_GetFundSubFundDetails(int? fundId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string fundSubFundValues;
                F15003FundMgmtData fundMgmtData = new F15003FundMgmtData();
                fundSubFundValues = terraScanService.F15003_GetFundSubFundDetails(fundId);
                fundMgmtData.ReadXml(Utilities.SharedFunctions.XmlParser(fundSubFundValues));
                return fundMgmtData;
            }
            else
            {
                return Helper.F15003_GetFundSubFundDetails(fundId);
            }
        }

        /// <summary>
        /// F15003_s the list available sub funds.
        /// </summary>
        /// <param name="subFund">The sub fund.</param>
        /// <param name="description">The description.</param>
        /// <param name="rollYear">The roll year.</param>
        /// <param name="fundId">The fund id.</param>
        /// <returns>DataSet Contains the Available Funds Details</returns>
        public static F15003FundMgmtData F15003_ListAvailableSubFunds(string subFund, string description, int? rollYear, int? fundId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string availableFundValues;
                F15003FundMgmtData fundMgmtData = new F15003FundMgmtData();
                availableFundValues = terraScanService.F15003_ListAvailableSubFunds(subFund, description, rollYear, fundId);
                fundMgmtData.ReadXml(Utilities.SharedFunctions.XmlParser(availableFundValues));
                return fundMgmtData;
            }
            else
            {
                return Helper.F15003_ListAvailableSubFunds(subFund, description, rollYear, fundId);
            }
        }

        /// <summary>
        /// F15003_s the type of the list fund.
        /// </summary>
        /// <returns>dataTable Contains the FundTypes</returns>
        public static F15003FundMgmtData.ListFundTypeDataTable F15003_ListFundType()
        {
            if (WSHelper.IsOnLineMode)
            {
                string fundTypeValue;
                F15003FundMgmtData fundMgmtData = new F15003FundMgmtData();
                fundTypeValue = terraScanService.F15003_ListFundType();
                fundMgmtData.ReadXml(Utilities.SharedFunctions.XmlParser(fundTypeValue));
                return fundMgmtData.ListFundType;
            }
            else
            {
                F15003FundMgmtData.ListFundTypeDataTable fundMgmtData = new F15003FundMgmtData.ListFundTypeDataTable();
                fundMgmtData = Helper.F15003_ListFundType();
                return fundMgmtData;
            }
        }

        #endregion

        #region Save and Edit Fund Details

        /// <summary>
        /// F15003_s the check fund.
        /// </summary>
        /// <param name="fundId">The fund id.</param>
        /// <param name="fund">The fund.</param>
        /// <param name="rollYear">The roll year.</param>
        /// <returns>returns the fund valid status</returns>
        public static int F15003_CheckFund(int? fundId, string fund, int rollYear)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F15003_CheckFund(fundId, fund, rollYear);
            }
            else
            {
                return Helper.F15003_CheckFund(fundId, fund, rollYear);
            }
        }

        /// <summary>
        /// F15003_s the create or edit fund MGMT.
        /// </summary>
        /// <param name="fundId">The fund id.</param>
        /// <param name="fund">The fund.</param>
        /// <param name="rollYear">The roll year.</param>
        /// <param name="description">The description.</param>
        /// <param name="fundGroupId">The fund group id.</param>
        /// <param name="fundItems">The fund items.</param>
        /// <param name="userId">UserID</param>
        /// <returns>returns the save process status</returns>
        public static int F15003_CreateOrEditFundMgmt(int? fundId, string fund, int rollYear, string description, int? fundGroupId, string fundItems, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F15003_CreateOrEditFundMgmt(fundId, fund, rollYear, description, fundGroupId, fundItems, userId);
            }
            else
            {
                return Helper.F15003_CreateOrEditFundMgmt(fundId, fund, rollYear, description, fundGroupId, fundItems, userId);
            }
        }

        #endregion

        #endregion

        #region F11011 Excise Statement

        #region Get Excise Receipt

        /// <summary>
        /// Gets the Excise Receipt details 
        /// </summary>
        /// <param name="statementId">The statement id.</param>
        /// <returns>Excise Tax Receipt Details</returns>
        public static F11011ExciseStatementData F15012_GetExciseReceipt(int statementId)
        {
            if (WSHelper.IsOnLineMode)
            {
                F11011ExciseStatementData exciseStatement = new F11011ExciseStatementData();
                string exciseStatementString = terraScanService.F15012_GetExciseReceipt(statementId);
                exciseStatement.ReadXml(Utilities.SharedFunctions.XmlParser(exciseStatementString));
                return exciseStatement;
            }
            else
            {
                return Helper.F15012_GetExciseReceipt(statementId);
            }
        }

        #endregion

        #region Excise Statement Summary

        /// <summary>
        /// Gets the Excise Statement Summary
        /// </summary>
        /// <param name="statementId">The statement id.</param>
        /// <returns>Excise Statement Summary Details</returns>
        public static F11011ExciseStatementData F15011_GetExciseStatement(int statementId)
        {
            if (WSHelper.IsOnLineMode)
            {
                F11011ExciseStatementData exciseStatement = new F11011ExciseStatementData();
                string exciseStatementString = terraScanService.F15011_GetExciseStatement(statementId);
                exciseStatement.ReadXml(Utilities.SharedFunctions.XmlParser(exciseStatementString));
                return exciseStatement;
            }
            else
            {
                return Helper.F15011_GetExciseStatement(statementId);
            }
        }

        /// <summary>
        /// update the Excise Statement - receipt and interest date
        /// </summary>
        /// <param name="statementId">The statement id.</param>
        /// <param name="interestDate">The interest date.</param>
        /// <param name="receiptDate">The receipt date.</param>  
        /// <param name="userId">userId</param>
        public static void F15011_SaveExciseStatement(int statementId, DateTime interestDate, DateTime receiptDate, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                terraScanService.F15011_SaveExciseStatement(statementId, interestDate, receiptDate, userId);
            }
            else
            {
                Helper.F15011_SaveExciseStatement(statementId, interestDate, receiptDate, userId);
            }
        }

        #endregion

        #endregion

        #region F15010 Excise Affidavit

        /// <summary>
        /// Gets the type of the excise individual.
        /// </summary>
        /// <returns>returns ExciseIndividualType </returns>
        public static F15010ExciseAffidavitData F15010_GetExciseIndividualType()
        {
            if (WSHelper.IsOnLineMode)
            {
                string exciseTaxAffidavitValue;
                F15010ExciseAffidavitData exciseIndividualType = new F15010ExciseAffidavitData();
                exciseTaxAffidavitValue = terraScanService.F15010_GetExciseIndividualType();
                exciseIndividualType.ReadXml(Utilities.SharedFunctions.XmlParser(exciseTaxAffidavitValue));
                return exciseIndividualType;
            }
            else
            {
                return Helper.F15010_GetExciseIndividualType();
            }
        }

        /// <summary>
        /// Gets the excise tax affidavit details.
        /// </summary>
        /// <param name="statmentId">The statment id.</param>
        /// <returns>Return ExciseTaxAffidavitData Dataset</returns>
        public static F15010ExciseAffidavitData F15010_GetExciseTaxAffidavitDetails(int statmentId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string exciseTaxAffidavitDataValue;
                F15010ExciseAffidavitData exciseTaxAffidavitData = new F15010ExciseAffidavitData();
                exciseTaxAffidavitDataValue = terraScanService.F15010_GetExciseTaxAffidavitDetails(statmentId);
                exciseTaxAffidavitData.ReadXml(Utilities.SharedFunctions.XmlParser(exciseTaxAffidavitDataValue));
                return exciseTaxAffidavitData;
            }
            else
            {
                return Helper.F15010_GetExciseTaxAffidavitDetails(statmentId);
            }
        }

        /// <summary>
        /// Excises the tax affidavit calulate amount due.
        /// </summary>
        /// <param name="saleDate">The sale date.</param>
        /// <param name="paymentDate">The payment date.</param>
        /// <param name="exciseRateId">The excise rate id.</param>
        /// <param name="taxCode">The tax code.</param>
        /// <param name="taxableSaleAmount">The taxable sale amount.</param>
        /// <returns>returns dataset</returns>
        public static F15010ExciseAffidavitData F15010_GetExciseTaxAffidavitCalulateAmountDue(DateTime saleDate, DateTime paymentDate, int exciseRateId, int taxCode, double taxableSaleAmount)
        {
            if (WSHelper.IsOnLineMode)
            {
                string exciseAffidavitAmountDueDataValue;
                F15010ExciseAffidavitData exciseTaxAffidavitAmountDueData = new F15010ExciseAffidavitData();
                exciseAffidavitAmountDueDataValue = terraScanService.F15010_GetExciseTaxAffidavitCalulateAmountDue(saleDate, paymentDate, exciseRateId, taxCode, taxableSaleAmount);
                exciseTaxAffidavitAmountDueData.ReadXml(Utilities.SharedFunctions.XmlParser(exciseAffidavitAmountDueDataValue));
                return exciseTaxAffidavitAmountDueData;
            }
            else
            {
                return Helper.F15010_GetExciseTaxAffidavitCalulateAmountDue(saleDate, paymentDate, exciseRateId, taxCode, taxableSaleAmount);
            }
        }

        /// <summary>
        /// Gets the affidavit statement id.
        /// </summary>
        /// <param name="formId">The form id.</param>
        /// <param name="orderField">The order field.</param>
        /// <param name="orderBy">The order by.</param>
        /// <returns>Returns dataset for list of statementID</returns>
        public static F15010ExciseAffidavitData F15010_GetAffidavitStatementId(int formId, string orderField, string orderBy)
        {
            if (WSHelper.IsOnLineMode)
            {
                string affidavitStatementIdDataValue;
                F15010ExciseAffidavitData affidavitStatementIdData = new F15010ExciseAffidavitData();
                affidavitStatementIdDataValue = terraScanService.F15010_GetAffidavitStatementId(formId, orderField, orderBy);
                affidavitStatementIdData.ReadXml(Utilities.SharedFunctions.XmlParser(affidavitStatementIdDataValue));
                return affidavitStatementIdData;
            }
            else
            {
                return Helper.F15010_GetAffidavitStatementId(formId, orderField, orderBy);
            }
        }

        /// <summary>
        /// Gets the affidavit statement id.
        /// </summary>
        /// <param name="statementId">The statement id.</param>
        /// <param name="partiesAddress">The parties address.</param>
        /// <param name="parcelDetails">The parcel details.</param>
        /// <param name="exciseAffidavitDetails">The excise affidavit details.</param>
        /// <param name="mobileHomeDetails">The mobile home details.</param>
        /// <param name="userId">The user id.</param>
        /// <returns>
        /// returns dataset containing AffiDavit Details
        /// </returns>
        public static int F15010_SaveAffiDavitDetails(int statementId, string partiesAddress, string parcelDetails, string exciseAffidavitDetails, string mobileHomeDetails, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F15010_SaveAffiDavitDetails(statementId, partiesAddress, parcelDetails, exciseAffidavitDetails, mobileHomeDetails, userId);
            }
            else
            {
                return Helper.F15010_SaveAffiDavitDetails(statementId, partiesAddress, parcelDetails, exciseAffidavitDetails, mobileHomeDetails, userId);
            }
        }

        /// <summary>
        /// Gets the owner details.
        /// </summary>
        /// <param name="ownerId">The owner id.</param>
        /// <returns>Returns PartiesOwnerDetails Dataset</returns>
        public static F15010ExciseAffidavitData F15010_GetOwnerDetails(int ownerId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string ownerDetailDataValue;
                F15010ExciseAffidavitData ownerDetailData = new F15010ExciseAffidavitData();
                ownerDetailDataValue = terraScanService.F15010_GetOwnerDetails(ownerId);
                ownerDetailData.ReadXml(Utilities.SharedFunctions.XmlParser(ownerDetailDataValue));
                return ownerDetailData;
            }
            else
            {
                return Helper.F15010_GetOwnerDetails(ownerId);
            }
        }

        /// <summary>
        /// Get the owner status.
        /// </summary>
        /// <param name="ownerId"></param>
        /// <returns></returns>
        public static F15010ExciseAffidavitData F15010_GetOwnerStatus(int ownerId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string ownerStatusValue;
                F15010ExciseAffidavitData ownerStatusData = new F15010ExciseAffidavitData();
                ownerStatusValue = terraScanService.F15010_GetOwnerStatus(ownerId);
                ownerStatusData.ReadXml(Utilities.SharedFunctions.XmlParser(ownerStatusValue));
                return ownerStatusData;
            }
            else
            {
                return Helper.F15010_GetOwnerStatus(ownerId);
            }
        }

        /// <summary>
        /// Gets the district selection.
        /// </summary>
        /// <param name="exciseRateId">The excise rate id.</param>
        /// <returns>Returns Dataset foe District Selection</returns>
        public static F15010ExciseAffidavitData F15010_GetDistrictSelection(int exciseRateId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string districtSelectionValue;
                F15010ExciseAffidavitData districtSelectionDataSet = new F15010ExciseAffidavitData();
                districtSelectionValue = terraScanService.F15010_GetDistrictSelection(exciseRateId);
                districtSelectionDataSet.ReadXml(Utilities.SharedFunctions.XmlParser(districtSelectionValue));
                return districtSelectionDataSet;
            }
            else
            {
                return Helper.F15010_GetDistrictSelection(exciseRateId);
            }
        }

        /// <summary>
        /// Deletes the affidavit details for the particular statement id.
        /// </summary>
        /// <param name="statementId">The statement id.</param>
        /// <param name="userId">The user id.</param>
        public static void F15010_DeleteAffidavitDetails(int statementId, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                terraScanService.F15010_DeleteAffidavitDetails(statementId, userId);
            }
            else
            {
                Helper.F15010_DeleteAffidavitDetails(statementId, userId);
            }
        }

        /// <summary>
        /// F15010_s the get parcel detail.
        /// </summary>
        /// <param name="parcelId">The parcel id.</param>
        /// <param name="parcelNumber">The parcel number.</param>
        /// <returns>F15010ExciseAffidavitData</returns>
        public static F15010ExciseAffidavitData F15010_GetParcelDetail(int? parcelId, string parcelNumber)
        {
            if (WSHelper.IsOnLineMode)
            {
                string districtSelectionValue;
                F15010ExciseAffidavitData districtSelectionDataSet = new F15010ExciseAffidavitData();
                districtSelectionValue = terraScanService.F15010_GetParcelDetail(parcelId, parcelNumber);
                districtSelectionDataSet.ReadXml(Utilities.SharedFunctions.XmlParser(districtSelectionValue));
                return districtSelectionDataSet;
            }
            else
            {
                return Helper.F15010_GetParcelDetail(parcelId, parcelNumber);
            }
        }

        /// <summary>
        /// F15010_s the list excise WAC.
        /// </summary>
        /// <returns>The excise affidavit dataset.</returns>
        public static F15010ExciseAffidavitData F15010_ListExciseWAC()
        {
            if (WSHelper.IsOnLineMode)
            {
                string exciseWac;
                F15010ExciseAffidavitData exciseWacData = new F15010ExciseAffidavitData();
                exciseWac = terraScanService.F15010_ListExciseWAC();
                exciseWacData.ReadXml(Utilities.SharedFunctions.XmlParser(exciseWac));
                return exciseWacData;
            }
            else
            {
                return Helper.F15010_ListExciseWAC();
            }
        }

        /// <summary>
        /// F15010_s the list excise individual.
        /// </summary>
        /// <param name="exciseIndividualElementsXml">The excise individual elements XML.</param>
        /// <returns>The excise affidavit dataset.</returns>
        public static F15010ExciseAffidavitData F15010_ListExciseIndividual(string exciseIndividualElementsXml)
        {
            if (WSHelper.IsOnLineMode)
            {
                string exciseIndividualElements;
                F15010ExciseAffidavitData exciseIndividualElementsData = new F15010ExciseAffidavitData();
                exciseIndividualElements = terraScanService.F15010_ListExciseIndividual(exciseIndividualElementsXml);
                exciseIndividualElementsData.ReadXml(Utilities.SharedFunctions.XmlParser(exciseIndividualElements));
                return exciseIndividualElementsData;
            }
            else
            {
                return Helper.F15010_ListExciseIndividual(exciseIndividualElementsXml);
            }
        }

        /// <summary>
        /// F15010_s the list open space field.
        /// </summary>
        /// <param name="parcelIds">The parcel ids.</param>
        /// <returns></returns>
        public static F15010ExciseAffidavitData F15010_ListOpenSpaceField(string parcelIds)
        {
            if (WSHelper.isOnLine)
            {
                string openFieldValue;
                F15010ExciseAffidavitData openSpaceData = new F15010ExciseAffidavitData();
                openFieldValue = terraScanService.F15010_ListOpenSpaceField(parcelIds);
                openSpaceData.ReadXml(Utilities.SharedFunctions.XmlParser(openFieldValue));
                return openSpaceData;
            }
            else
            {
                return Helper.F15010_ListOpenSpaceField(parcelIds);
            }
        }

        #endregion F15010 Excise Affidavit

        #region F15013 Excise Tax Rate

        #region Get Excise Tax Rate

        /// <summary>
        /// Gets the excise tax rate.
        /// </summary>
        /// <param name="exciseRateId">The excise rate id.</param>
        /// <returns>returns dataset contains Excise Tax Rate Details</returns>
        public static F15013ExciseTaxRateData F15013_GetExciseTaxRate(int exciseRateId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string getExciseTaxRateValue;
                F15013ExciseTaxRateData exciseTaxRateData = new F15013ExciseTaxRateData();
                getExciseTaxRateValue = terraScanService.F15013_GetExciseTaxRate(exciseRateId);
                exciseTaxRateData.ReadXml(Utilities.SharedFunctions.XmlParser(getExciseTaxRateValue));
                return exciseTaxRateData;
            }
            else
            {
                return Helper.F15013_GetExciseTaxRate(exciseRateId);
            }
        }

        #endregion

        #region List Excise Tax Rate

        /// <summary>
        /// Lists the excise tax rate.
        /// </summary>
        /// <returns>returns dataset contains Excise Tax Rate Details</returns>
        public static F15013ExciseTaxRateData F15013_ListExciseTaxRate()
        {
            if (WSHelper.IsOnLineMode)
            {
                string listExciseTaxRateValue;
                F15013ExciseTaxRateData exciseTaxRateData = new F15013ExciseTaxRateData();
                listExciseTaxRateValue = terraScanService.F15013_ListExciseTaxRate();
                exciseTaxRateData.ReadXml(Utilities.SharedFunctions.XmlParser(listExciseTaxRateValue));
                return exciseTaxRateData;
            }
            else
            {
                return Helper.F15013_ListExciseTaxRate();
            }
        }

        #endregion

        #region Save Excise Tax Rate

        /// <summary>
        /// F15013_s the save excise tax rate.
        /// </summary>
        /// <param name="exciseRateId">The excise rate id.</param>
        /// <param name="exciseTaxDetails">The excise tax details.</param>
        /// <param name="userId">userId</param>
        /// <returns>errorId/PrimaryKey Id</returns>
        public static int F15013_SaveExciseTaxRate(int exciseRateId, string exciseTaxDetails, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F15013_SaveExciseTaxRate(exciseRateId, exciseTaxDetails, userId);
            }
            else
            {
                return Helper.F15013_SaveExciseTaxRate(exciseRateId, exciseTaxDetails, userId);
            }
        }

        #endregion

        #region Delete Excise Tax Rate

        /// <summary>
        /// Deletes the Excise Tax Rate
        /// </summary>
        /// <param name="exciseRateId">The excise rate Id.</param>
        /// <param name="userId">UserID</param>
        /// <returns>The return value specifying status of the delete action.</returns>
        public static int F15013_DeleteExciseTaxRate(int exciseRateId, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F15013_DeleteExciseTaxRate(exciseRateId, userId);
            }
            else
            {
                return Helper.F15013_DeleteExciseTaxRate(exciseRateId, userId);
            }
        }

        #endregion

        #region Get District Name

        /// <summary>
        /// Gets the Excise Tax Statement
        /// </summary>
        /// <param name="districtId">The district id.</param>
        /// <returns>returns dataset contains District Name</returns>
        public static F15013ExciseTaxRateData F15013_GetDistrictName(int districtId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string getDistrictNameValue;
                F15013ExciseTaxRateData exciseTaxRateData = new F15013ExciseTaxRateData();
                getDistrictNameValue = terraScanService.F15013_GetDistrictName(districtId);
                exciseTaxRateData.ReadXml(Utilities.SharedFunctions.XmlParser(getDistrictNameValue));
                return exciseTaxRateData;
            }
            else
            {
                return Helper.F15013_GetDistrictName(districtId);
            }
        }
        #endregion

        #region Get Account Name

        /// <summary>
        /// Gets the Account Name
        /// </summary>
        /// <param name="accountId">The account id.</param>
        /// <returns>returns dataset contains Account Name</returns>
        public static F15013ExciseTaxRateData F15013_GetAccountName(int accountId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string getAccountNameValue;
                F15013ExciseTaxRateData exciseTaxRateData = new F15013ExciseTaxRateData();
                getAccountNameValue = terraScanService.F15013_GetAccountName(accountId);
                exciseTaxRateData.ReadXml(Utilities.SharedFunctions.XmlParser(getAccountNameValue));
                return exciseTaxRateData;
            }
            else
            {
                return Helper.F15013_GetAccountName(accountId);
            }
        }

        #endregion

        #endregion

        #region F15019 Journal Entry

        #region GetJournal Entry

        /// <summary>
        /// F15019s the get journal entry details.
        /// </summary>
        /// <param name="receiptId">The receipt id.</param>
        /// <returns>F15019JournalEntryData Typed Dataset</returns>
        public static F15019JournalEntryData F15019GetJournalEntryDetails(int receiptId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string getJournalEntryDetails;
                F15019JournalEntryData form15019JournalEntryData = new F15019JournalEntryData();
                getJournalEntryDetails = terraScanService.GetJournalEntryDetails(receiptId);
                form15019JournalEntryData.ReadXml(Utilities.SharedFunctions.XmlParser(getJournalEntryDetails));
                return form15019JournalEntryData;
            }
            else
            {
                return Helper.F15019_GetJournalEntryDetails(receiptId);
            }
        }

        #endregion GetJournal Entry

        #region SaveJournal Entry

        /// <summary>
        /// F15019s the update journal entry details.
        /// </summary>
        /// <param name="statementId">The statement id.</param>
        /// <param name="receiptSourceId">The receipt source id.</param>
        /// <param name="journalItems">The journal items.</param>
        /// <returns>integer Value</returns>
        public static int F15019UpdateJournalEntryDetails(int statementId, int receiptSourceId, string journalItems)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.UpdateJournalEntryDetails(statementId, receiptSourceId, journalItems);
            }
            else
            {
                return Helper.F15019_InsertJournalEntryDetails(statementId, receiptSourceId, journalItems);
            }
        }

        /// <summary>
        /// F15019_s the check roll year.
        /// </summary>
        /// <param name="statementId">The statement id.</param>
        /// <param name="receiptSourceId">The receipt source id.</param>
        /// <param name="journalItems">The journal items.</param>
        /// <returns>integer value</returns>
        public static int F15019_CheckRollYear(int statementId, int receiptSourceId, string journalItems)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F15019_CheckRollYear(statementId, receiptSourceId, journalItems);
            }
            else
            {
                return Helper.F15019_CheckRollYear(statementId, receiptSourceId, journalItems);
            }
        }
        #endregion SaveJournal Entry

        #endregion F15019 Journal Entry

        #region F9013 Next Number Configuration

        #region List NextNumber Configuration

        /// <summary>
        /// List the NextNumber Configuration details
        /// </summary>
        /// <param name="rollYear">The roll year.</param>
        /// <param name="userId">The user id.</param>
        /// <returns>NextNumber Configuration list</returns>
        public static F9013NextNumberData F9013_ListNextNumberConfiguration(int rollYear, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string listNextNumberConfigurationValue;
                F9013NextNumberData nextNumberData = new F9013NextNumberData();
                listNextNumberConfigurationValue = terraScanService.F9013_ListNextNumberConfiguration(rollYear, userId);
                nextNumberData.ReadXml(Utilities.SharedFunctions.XmlParser(listNextNumberConfigurationValue));
                return nextNumberData;
            }
            else
            {
                return Helper.F9013_ListNextNumberConfiguration(rollYear, userId);
            }
        }

        #endregion List NextNumber Configuration

        #region Check Next Number

        /// <summary>
        /// Check for valid Next Number
        /// </summary>
        /// <param name="rollYear">The roll year.</param>
        /// <param name="nextNum">The next num.</param>
        /// <param name="formula">The formula.</param>
        /// <returns>The dataset containing the valid Next Number details.</returns>
        public static DataSet F9013_CheckNextNumber(int rollYear, int nextNum, string formula)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F9013_CheckNextNumber(rollYear, nextNum, formula);
            }
            else
            {
                return Helper.F9013_CheckNextNumber(rollYear, nextNum, formula);
            }
        }

        #endregion Check Next Number

        #region Update NextNumber ConfigDetails

        /// <summary>
        /// Saves Next Number configuration details
        /// </summary>
        /// <param name="nextNumId">The next num id.</param>
        /// <param name="nextNum">The next num.</param>
        /// <param name="formula">The formula.</param>
        /// <param name="userId">UserID</param>
        public static void F9013_UpdateNextNumberConfigDetails(int nextNumId, int nextNum, string formula, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                terraScanService.F9013_UpdateNextNumberConfigDetails(nextNumId, nextNum, formula, userId);
            }
            else
            {
                Helper.F9013_UpdateNextNumberConfigDetails(nextNumId, nextNum, formula, userId);
            }
        }

        #endregion Update NextNumber ConfigDetails

        #region List Roll Year

        /// <summary>
        /// List the NextNumber RollYear details
        /// </summary>
        /// <param name="userId">The user id.</param>
        /// <returns>NextNumber RollYear list</returns>
        public static F9013NextNumberData F9013_ListNextNumberRollYear(int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string listNextNumberConfigurationValue;
                F9013NextNumberData nextNumberData = new F9013NextNumberData();
                listNextNumberConfigurationValue = terraScanService.F9013_ListNextNumberRollYear(userId);
                nextNumberData.ReadXml(Utilities.SharedFunctions.XmlParser(listNextNumberConfigurationValue));
                return nextNumberData;
            }
            else
            {
                return Helper.F9013_ListNextNumberRollYear(userId);
            }
        }

        #endregion List Roll Year

        #endregion F9013 Next Number Configuration

        #region F11018 Misc Receipt

        /// <summary>
        /// Gets the Misc Receipt details based on the receiptId
        /// </summary>
        /// <param name="receiptId">The receipt id.</param>
        /// <returns>
        /// The typed dataset containing the receipt information of the receiptId.
        /// </returns>
        public static F11018MiscReceiptData F15018_GetMiscReceipt(int receiptId)
        {
            if (WSHelper.IsOnLineMode)
            {
                F11018MiscReceiptData miscReceipt = new F11018MiscReceiptData();
                string miscReceiptString = terraScanService.F15018_GetMiscReceipt(receiptId);
                miscReceipt.ReadXml(Utilities.SharedFunctions.XmlParser(miscReceiptString));
                return miscReceipt;
            }
            else
            {
                return Helper.F15018_GetMiscReceipt(receiptId);
            }
        }

        /// <summary>
        /// gets the Misc Receipt template
        /// </summary>
        /// <param name="miscTemplateId">The misc template id.</param>
        /// <returns>
        /// The typed dataset containing the receipt Template information of the miscTemplateID.
        /// </returns>
        public static F11018MiscReceiptData F1021_GetMiscReceiptTemplate(int miscTemplateId)
        {
            if (WSHelper.IsOnLineMode)
            {
                F11018MiscReceiptData miscReceipt = new F11018MiscReceiptData();
                string miscReceiptString = terraScanService.F1021_GetMiscReceiptTemplate(miscTemplateId);
                miscReceipt.ReadXml(Utilities.SharedFunctions.XmlParser(miscReceiptString));
                return miscReceipt;
            }
            else
            {
                return Helper.F1021_GetMiscReceiptTemplate(miscTemplateId);
            }
        }

        /// <summary>
        /// saves the Misc Receipt template
        /// </summary>
        /// <param name="miscTemplateDetails">The misc template details.</param>
        /// <param name="templateItems">The template items.</param>
        /// <param name="userId">UserID</param>
        /// <returns>
        /// new created templated id - return templatedid if succeed else return negative value
        /// </returns>
        public static int F1021_SaveMiscReceiptTemplate(string miscTemplateDetails, string templateItems, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F1021_SaveMiscReceiptTemplate(miscTemplateDetails, templateItems, userId);
            }
            else
            {
                return Helper.F1021_SaveMiscReceiptTemplate(miscTemplateDetails, templateItems, userId);
            }
        }

        /// <summary>
        /// List the Misc Receipt template
        /// </summary>
        /// <returns>
        /// The typed dataset containing the Misc Receipt Template
        /// </returns>
        public static F11018MiscReceiptData F1022_ListMiscReceiptTemplate()
        {
            if (WSHelper.IsOnLineMode)
            {
                F11018MiscReceiptData miscReceipt = new F11018MiscReceiptData();
                string miscReceiptString = terraScanService.F1022_ListMiscReceiptTemplate();
                miscReceipt.ReadXml(Utilities.SharedFunctions.XmlParser(miscReceiptString));
                return miscReceipt;
            }
            else
            {
                return Helper.F1022_ListMiscReceiptTemplate();
            }
        }

        /// <summary>
        /// Deletes the Misc Receipt Template based on the miscTemplateID
        /// </summary>
        /// <param name="miscTemplateId">The misc template id.</param>
        /// <param name="userId">UserID</param>
        public static void F1022_DeleteMiscReceiptTemplate(int miscTemplateId, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                terraScanService.F1022_DeleteMiscReceiptTemplate(miscTemplateId, userId);
            }
            else
            {
                Helper.F1022_DeleteMiscReceiptTemplate(miscTemplateId, userId);
            }
        }

        /// <summary>
        /// Save district details
        /// </summary>
        /// <param name="levyOption">Levy OptionID</param>
        /// <param name="districtId">District ID</param>
        /// <param name="amountValue">Amount</param>
        /// <param name="userId">UserID</param>
        /// <returns>F11018MiscReceipt dataset</returns>
        public static F11018MiscReceiptData F1024_SaveDistrictDetails(int levyOption, int districtId, decimal amountValue, int userId, bool IsReplace, string SubFundXML)
        {
            if (WSHelper.IsOnLineMode)
            {
                F11018MiscReceiptData miscReceipt = new F11018MiscReceiptData();
                string miscReceiptString = terraScanService.F1024_SaveDistrictDetails(levyOption, districtId, amountValue, userId, IsReplace, SubFundXML);
                miscReceipt.ReadXml(Utilities.SharedFunctions.XmlParser(miscReceiptString));
                return miscReceipt;
            }
            else
            {
                return Helper.F1024_SaveDistrictDetails(levyOption, districtId, amountValue, userId, IsReplace, SubFundXML);
            }
        }

        /// <summary>
        /// Save district details
        /// </summary>
        /// <param name="levyOption">Levy OptionID</param>
        /// <param name="districtId">District ID</param>
        /// <param name="amountValue">Amount</param>
        /// <param name="userId">UserID</param>
        /// <returns>F11018MiscReceipt dataset</returns>
        public static DistrictSelectionData GetDistrictDistributionData(int levyOption, int districtId, decimal amountValue, int userId, bool IsReplace, string SubFundsXML)
        {
            if (WSHelper.IsOnLineMode)
            {
                DistrictSelectionData miscReceipt = new DistrictSelectionData();
                string miscReceiptString = terraScanService.GetDistrictDistributionData(levyOption, districtId, amountValue, userId, SubFundsXML, IsReplace);
                miscReceipt.ReadXml(Utilities.SharedFunctions.XmlParser(miscReceiptString));
                return miscReceipt;
            }
            else
            {
                return Helper.GetDistrictDistributionData(levyOption, districtId, amountValue, userId, SubFundsXML, IsReplace);
            }
        }

        /// <summary>
        /// List account details
        /// </summary>
        /// <param name="filterValue">Filter Value</param>
        /// <returns>Account details</returns>
        public static F11018MiscReceiptData F15018_ListAccountDetails(string filterValue, int? rollYear,int? formNo)
        {
            if (WSHelper.IsOnLineMode)
            {
                F11018MiscReceiptData miscReceipt = new F11018MiscReceiptData();
                string miscReceiptString = terraScanService.F15018_ListAccountDetails(filterValue, rollYear,formNo);
                miscReceipt.ReadXml(Utilities.SharedFunctions.XmlParser(miscReceiptString));
                return miscReceipt;
            }
            else
            {
                return Helper.F15018_ListAccountDetails(filterValue, rollYear,formNo);
            }
        }

        #endregion

        #region F1025 AutoFund Transfer

        #region List RollYear

        /// <summary>
        /// F1025_s the list roll year.
        /// </summary>
        /// <returns>Typed DataSet</returns>
        public static F1025AutoFundTransferData F1025_ListRollYear()
        {
            if (WSHelper.IsOnLineMode)
            {
                string rollYearValues;
                F1025AutoFundTransferData rollYearData = new F1025AutoFundTransferData();
                rollYearValues = terraScanService.F1025_ListRollYear();
                rollYearData.ReadXml(Utilities.SharedFunctions.XmlParser(rollYearValues));
                return rollYearData;
            }
            else
            {
                return Helper.F1025_ListRollYear();
            }
        }

        #endregion

        #region ListAutoFundTransferDetails

        /// <summary>
        /// F1025_s the list auto fund transfer details.
        /// </summary>
        /// <param name="rollYear">The roll year.</param>
        /// <returns>Typed DataSet</returns>
        public static F1025AutoFundTransferData F1025_ListAutoFundTransferDetails(int rollYear)
        {
            if (WSHelper.IsOnLineMode)
            {
                string autoFundDetails;
                F1025AutoFundTransferData autoFundTransferData = new F1025AutoFundTransferData();
                autoFundDetails = terraScanService.F1025_ListAutoFundTransferDetails(rollYear);
                autoFundTransferData.ReadXml(Utilities.SharedFunctions.XmlParser(autoFundDetails));
                return autoFundTransferData;
            }
            else
            {
                return Helper.F1025_ListAutoFundTransferDetails(rollYear);
            }
        }

        #endregion

        #region Delete AutoFund Transfer

        /// <summary>
        /// F1025_s the delete auto fund transfer details.
        /// </summary>
        /// <param name="autoTransferId">The auto transfer id.</param>
        /// <param name="userId">UserID</param>
        /// <returns>Integer Value</returns>
        public static int F1025_DeleteAutoFundTransferDetails(int autoTransferId, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F1025_DeleteAutoFundTransferDetails(autoTransferId, userId);
            }
            else
            {
                return Helper.F1025_DeleteAutoFundTransferDetails(autoTransferId, userId);
            }
        }

        #endregion Delete AutoFund Transfer

        #region Update AutoFund Transfer

        /// <summary>
        /// F1025_s the update auto fund transfer details.
        /// </summary>
        /// <param name="autoFundItems">The auto fund items.</param>
        /// <param name="userId">UserID</param>
        /// <returns>Integer value</returns>
        public static int F1025_UpdateAutoFundTransferDetails(string autoFundItems, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F1025_UpdateAutoFundTransferDetails(autoFundItems, userId);
            }
            else
            {
                return Helper.F1025_UpdateAutoFundTransferDetails(autoFundItems, userId);
            }
        }

        #endregion Update AutoFund Transfer

        #region Check RollYear

        /// <summary>
        /// F1025_s the check roll year.
        /// </summary>
        /// <param name="autoFundItems">The auto fund items.</param>
        /// <returns>Integer Value</returns>
        public static int F1025_CheckRollYear(string autoFundItems)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F1025_CheckRollYear(autoFundItems);
            }
            else
            {
                return Helper.F1025_CheckRollYear(autoFundItems);
            }
        }

        #endregion Check RollYear

        #endregion F1025 AutoFund Transfer

        #region RDL to Code

        #region Get

        /// <summary>
        /// RDLs to code_ get.
        /// </summary>
        /// <param name="getxmlString">The getxml string.</param>
        /// <param name="formId">The form id.</param>
        /// <returns>dataset.</returns>
        public static DataSet RdlToCode_Get(string getxmlString, string formId)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.RdlToCode_Get(getxmlString, formId);
            }
            else
            {
                return Helper.RdlToCode_Get(getxmlString, formId);
            }
        }

        #endregion Get

        #region Fill Combo

        /// <summary>
        /// RDLs to code_ fill combo.
        /// </summary>
        /// <param name="storedProcedureName">Name of the stored procedure.</param>
        /// <returns>dataset</returns>
        public static DataSet RdlToCode_FillCombo(string storedProcedureName)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.RdlToCode_FillCombo(storedProcedureName);
            }
            else
            {
                return Helper.RdlToCode_FillCombo(storedProcedureName);
            }
        }

        #endregion Fill Combo

        #region Save

        /// <summary>
        /// RDLs to code_ save.
        /// </summary>
        /// <param name="savexmlString">The savexml string.</param>
        /// <param name="formId">The form id.</param>
        /// <returns>primary Key id.</returns>
        public static int RdlToCode_Save(string savexmlString, string formId)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.RdlToCode_Save(savexmlString, formId);
            }
            else
            {
                return Helper.RdlToCode_Save(savexmlString, formId);
            }
        }

        #endregion Save

        #region Delete

        /// <summary>
        /// RDLs to code_ delete.
        /// </summary>
        /// <param name="deleteXMLString">The delete XML string.</param>
        /// <param name="formId">The form id.</param>
        public static void RdlToCode_Delete(string deleteXMLString, string formId)
        {
            if (WSHelper.IsOnLineMode)
            {
                terraScanService.RdlToCode_Delete(deleteXMLString, formId);
            }
            else
            {
                Helper.RdlToCode_Delete(deleteXMLString, formId);
            }
        }

        #endregion Delete

        #endregion RDL to Code

        #region F27006 Parcel Ownership

        #region List Parcel Ownership

        /// <summary>
        /// To List the Parcel Ownership Details.
        /// </summary>
        /// <param name="parcelId">The parcel id.</param>
        /// <returns>Typed Dataset Containing the Parcel Ownership Details</returns>
        public static F27006ParcelOwnershipData F27006_ListParcelOwnership(int parcelId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string parcelOwnershipValue;
                F27006ParcelOwnershipData parcelOwnershipData = new F27006ParcelOwnershipData();
                parcelOwnershipValue = terraScanService.F27006_ListParcelOwnership(parcelId);
                parcelOwnershipData.ReadXml(Utilities.SharedFunctions.XmlParser(parcelOwnershipValue));
                return parcelOwnershipData;
            }
            else
            {
                return Helper.F27006_ListParcelOwnership(parcelId);
            }
        }

        #endregion List Parcel Ownership

        #region List All Owner Details

        /// <summary>
        /// To List All Owners Details
        /// </summary>
        /// <param name="firstName">The First Name.</param>
        /// <param name="lastName">The Last Name.</param>
        /// <param name="address1">The address1.</param>
        /// <param name="address2">The address2.</param>
        /// <param name="city">The city.</param>
        /// <returns>Typed Dataset Containg the All Owners Details</returns>
        public static F27006ParcelOwnershipData F27006_ListALLOwnerDetails(string firstName, string lastName, string address1, string address2, string city)
        {
            if (WSHelper.IsOnLineMode)
            {
                string allOwnerDetailsValue;
                F27006ParcelOwnershipData parcelOwnershipData = new F27006ParcelOwnershipData();
                allOwnerDetailsValue = terraScanService.F27006_ListALLOwnerDetails(firstName, lastName, address1, address2, city);
                parcelOwnershipData.ReadXml(Utilities.SharedFunctions.XmlParser(allOwnerDetailsValue));
                return parcelOwnershipData;
            }
            else
            {
                return Helper.F27006_ListALLOwnerDetails(firstName, lastName, address1, address2, city);
            }
        }

        #endregion List All Owner Details

        #region Save Parcel Ownership

        /// <summary>
        /// To Save Parcel Ownership Details.
        /// </summary>
        /// <param name="parcelOwnership">The parcel ownership.</param>
        /// <param name="parcelId">The parcel id.</param>
        /// <param name="userId">UserID</param>
        public static void F27006_SaveParcelOwnership(string parcelOwnership, int parcelId, int userId, bool isfuturePush)
        {
            if (WSHelper.IsOnLineMode)
            {
                terraScanService.F27006_SaveParcelOwnership(parcelOwnership, parcelId, userId, isfuturePush);
            }
            else
            {
                Helper.F27006_SaveParcelOwnership(parcelOwnership, parcelId, userId, isfuturePush);
            }
        }

        #endregion Save Parcel Ownership

        #region Check Ownership Details

        /// <summary>
        /// To Check Given Ownership Details is valid.
        /// </summary>
        /// <param name="ownershipDetails">The ownership details.</param>
        /// <returns>returns an integer Value whather given details are correct or not</returns>
        public static int F27006_CheckOwnershipDetails(string ownershipDetails)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F27006_CheckOwnershipDetails(ownershipDetails);
            }
            else
            {
                return Helper.F27006_CheckOwnershipDetails(ownershipDetails);
            }
        }

        #endregion Check Ownership Details

        #region F27006 list MOwnerType Selection


        /// <summary>
        /// F9075_s the list template.
        /// </summary>
        /// <returns>listtemplateData</returns>
        public static F27006ParcelOwnershipData ListMOwnerType()
        {
            if (WSHelper.IsOnLineMode)
            {
                string getMOwnerType;
                F27006ParcelOwnershipData getMOwnerTypeData = new F27006ParcelOwnershipData();
                getMOwnerType = terraScanService.ListMOwnerType();
                getMOwnerTypeData.ReadXml(Utilities.SharedFunctions.XmlParser(getMOwnerType));
                return getMOwnerTypeData;
            }
            else
            {
                return Helper.ListMOwnerType();
            }
        }

        #endregion

        #endregion F27006 Parcel Ownership

        #region F27008 TRParcel Ownership

        #region List TRParcelOwnership
        /// <summary>
        /// To List the Parcel Ownership Details.
        /// </summary>
        /// <param name="parcelId">The parcel id.</param>
        /// <returns>Typed Dataset Containing the Parcel Ownership Details</returns>
        public static F27008TRParcelOwnershipData F27008_ListParcelOwnership(int ParcelId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string parcelOwnershipValue;
                F27008TRParcelOwnershipData parcelOwnershipData = new F27008TRParcelOwnershipData();
                parcelOwnershipValue = terraScanService.F27008_ListParcelOwnership(ParcelId);
                parcelOwnershipData.ReadXml(Utilities.SharedFunctions.XmlParser(parcelOwnershipValue));
                return parcelOwnershipData;
            }
            else
            {
                return Helper.F27008_ListParcelOwnership(ParcelId);
            }
        }
        #endregion List TRParcelOwnership


        #region Save Parcel Ownership

        /// <summary>
        /// To Save Parcel Ownership Details.
        /// </summary>
        /// <param name="parcelOwnership">The parcel ownership.</param>
        /// <param name="parcelId">The parcel id.</param>
        /// <param name="userId">UserID</param>
        public static void F27008_SaveParcelOwnership(string parcelOwnership, int parcelId, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                terraScanService.F27008_SaveParcelOwnership(parcelOwnership, parcelId, userId);
            }
            else
            {
                Helper.F27008_SaveParcelOwnership(parcelOwnership, parcelId, userId);
            }
        }

        #endregion Save Parcel Ownership

        #region Get Owner Details
        /// <summary>
        /// Gets the owner details.
        /// </summary>
        /// <param name="ownerId">The owner id.</param>
        /// <returns>Returns PartiesOwnerDetails Dataset</returns>
        public static F27008TRParcelOwnershipData F27008_GetOwnerDetails(int extraownerId, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string ownerDetailDataValue;
                F27008TRParcelOwnershipData listOwnersDatatable = new F27008TRParcelOwnershipData();
                ownerDetailDataValue = terraScanService.F27008_GetOwnerDetails(extraownerId, userId);
                listOwnersDatatable.ReadXml(Utilities.SharedFunctions.XmlParser(ownerDetailDataValue));
                return listOwnersDatatable;
            }
            else
            {
                return Helper.F27008_GetOwnerDetails(extraownerId, userId);
            }
        }

        #endregion Get Owner Details

        #endregion F27008 TRParcel Ownership

        #region F25051 ParcelHeader

        /// <summary>
        /// Gets the ParcelHeader Data
        /// </summary>
        /// <param name="eventId">The event id.</param>
        /// <returns>F25051ParcelHeaderData Typed Dataset</returns>
        public static F25051ParcelHeaderData F25051_GetParcelDetails(int eventId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string getparcelDetails;
                F25051ParcelHeaderData parcelHeaderData = new F25051ParcelHeaderData();
                getparcelDetails = terraScanService.F25051_GetParcelDetails(eventId);
                parcelHeaderData.ReadXml(Utilities.SharedFunctions.XmlParser(getparcelDetails));
                return parcelHeaderData;
            }
            else
            {
                return Helper.F25051_GetParcelDetails(eventId);
            }
        }

        /// <summary>
        /// Update Parcel Header Details for F25051
        /// </summary>
        /// <param name="parcelId">The parcel id.</param>
        /// <param name="parcelDetails">Parcel Details</param>
        /// <param name="userId">UserID</param>
        /// <returns>Integer</returns>
        public static int F25051ParcelHeaderDetails(int parcelId, string parcelDetails, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.f25051ParcelHeaderDetails(parcelId, parcelDetails, userId);
            }
            else
            {
                return Helper.f25051ParcelHeaderDetails(parcelId, parcelDetails, userId);
            }
        }

        /// <summary>
        /// Lists the parcel Class Type.
        /// </summary>
        /// <returns>F25051ParcelHeaderData Typed Dataset</returns>
        public static F25051ParcelHeaderData F25051ParcelClassTypes()
        {
            if (WSHelper.IsOnLineMode)
            {
                string getParcelClass;
                F25051ParcelHeaderData getParcelClassData = new F25051ParcelHeaderData();
                getParcelClass = terraScanService.F25051ParcelClassTypes();
                getParcelClassData.ReadXml(Utilities.SharedFunctions.XmlParser(getParcelClass));
                return getParcelClassData;
            }
            else
            {
                return Helper.F25051ParcelClassTypes();
            }
        }

        /// <summary>
        /// Lists the Owner Occupied.
        /// </summary>
        /// <returns>F25051ParcelHeaderData Typed Dataset</returns>
        public static F25051ParcelHeaderData F25051OwnerOccupied()
        {
            if (WSHelper.IsOnLineMode)
            {
                string getOwnerOccupied;
                F25051ParcelHeaderData getOwnerOccupiedData = new F25051ParcelHeaderData();
                getOwnerOccupied = terraScanService.F25051OwnerOccupied();
                getOwnerOccupiedData.ReadXml(Utilities.SharedFunctions.XmlParser(getOwnerOccupied));
                return getOwnerOccupiedData;
            }
            else
            {
                return Helper.F25051OwnerOccupied();
            }
        }

        #endregion F25051 ParcelHeader

        #region 25000 ParcelHeader

        /// <summary>
        /// Gets the ParcelHeader Data
        /// </summary>
        /// <param name="eventId">The event id.</param>
        /// <returns>F25000ParcelHeaderData Typed Dataset</returns>
        public static F25000ParcelHeaderData F25000_GetParcelDetails(int eventId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string getparcelDetails;
                F25000ParcelHeaderData parcelHeaderData = new F25000ParcelHeaderData();
                getparcelDetails = terraScanService.F25000_GetParcelDetails(eventId);
                parcelHeaderData.ReadXml(Utilities.SharedFunctions.XmlParser(getparcelDetails));
                return parcelHeaderData;
            }
            else
            {
                return Helper.F25000_GetParcelDetails(eventId);
            }
        }



        /// <summary>
        /// Lists the primary improvement.
        /// </summary>
        /// <returns>F25000ParcelHeaderData Typed Dataset</returns>
        public static F25000ParcelHeaderData ListPrimaryImprovement()
        {
            if (WSHelper.IsOnLineMode)
            {
                string getPrimaryImprovement;
                F25000ParcelHeaderData getPrimaryImprovementData = new F25000ParcelHeaderData();
                getPrimaryImprovement = terraScanService.ListPrimaryImprovement();
                getPrimaryImprovementData.ReadXml(Utilities.SharedFunctions.XmlParser(getPrimaryImprovement));
                return getPrimaryImprovementData;
            }
            else
            {
                return Helper.ListPrimaryImprovement();
            }
        }

        /// <summary>
        /// Lists the type of the primary land.
        /// </summary>
        /// <returns></returns>
        public static F25000ParcelHeaderData ListPrimaryLandType()
        {
            if (WSHelper.IsOnLineMode)
            {
                string getPrimaryLandType;
                F25000ParcelHeaderData getPrimaryLandTypeData = new F25000ParcelHeaderData();
                getPrimaryLandType = terraScanService.ListPrimaryLandType();
                getPrimaryLandTypeData.ReadXml(Utilities.SharedFunctions.XmlParser(getPrimaryLandType));
                return getPrimaryLandTypeData;
            }
            else
            {
                return Helper.ListPrimaryLandType();
            }
        }

        /// <summary>
        /// Update Parcel Header Details
        /// </summary>
        /// <param name="parcelId">The parcel id.</param>
        /// <param name="parcelDetails">Parcel Details</param>
        /// <param name="userId">UserID</param>
        /// <param name="rollYear">The roll year.</param>
        /// <returns>Integer</returns>
        public static int UpdateParcelHeaderDetails(int parcelId, string parcelDetails,bool isCopyHeader, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.UpdateParcelHeaderDetails(parcelId, parcelDetails,isCopyHeader,userId);
            }
            else
            {
                return Helper.UpdateParcelHeaderDetails(parcelId, parcelDetails, isCopyHeader,userId);
            }
        }

        #endregion 25000 ParcelHeader

        #region F26000ParcelheaderForm

        /// <summary>
        /// Gets the ParcelHeader Data
        /// </summary>
        /// <param name="eventId">The event id.</param>
        /// <returns>F26000ParcelHeaderFormData Typed Dataset</returns>
        public static F26000ParcelHeaderFormData F26000_GetParcelFormDetails(int eventId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string getparcelDetails;
                F26000ParcelHeaderFormData parcelHeaderFormData = new F26000ParcelHeaderFormData();
                getparcelDetails = terraScanService.F26000_GetParcelFormDetails(eventId);
                parcelHeaderFormData.ReadXml(Utilities.SharedFunctions.XmlParser(getparcelDetails));
                return parcelHeaderFormData;
            }
            else
            {
                return Helper.F26000_GetParcelFormDetails(eventId);
            }
        }

        /// <summary>
        /// F26000_s the exemption details.
        /// </summary>
        /// <param name="parcelId">The parcel id.</param>
        /// <param name="exemptionCode">The exemption code.</param>
        /// <param name="exemptionFromAmount">The exemption from amount.</param>
        /// <returns></returns>
        public static F26000ParcelHeaderFormData F26000_ExemptionDetails(int parcelId, string exemptionCode, decimal? exemptionFromAmount)
        {
            if (WSHelper.IsOnLineMode)
            {
                string exemptionDetails;
                F26000ParcelHeaderFormData parcelHeaderObj = new F26000ParcelHeaderFormData();
                exemptionDetails = terraScanService.F26000_ExemptionDetails(parcelId, exemptionCode, exemptionFromAmount);
                parcelHeaderObj.ReadXml(Utilities.SharedFunctions.XmlParser(exemptionDetails));
                return parcelHeaderObj;
            }
            else
            {
                return Helper.F26000_ExemptionDetails(parcelId, exemptionCode, exemptionFromAmount);
            }
        }


        /// <summary>
        /// F26000_s the exempt field details.
        /// </summary>
        /// <param name="parcelId">The parcel id.</param>
        /// <param name="exmptionId">The exmption id.</param>
        /// <param name="exemptionCode">The exemption code.</param>
        /// <returns></returns>
        public static F26000ParcelHeaderFormData F26000_ExemptFieldDetails(int parcelId, int exmptionId, string exemptionCode)
        {
            if (WSHelper.IsOnLineMode)
            {
                string exemptionDetails;
                F26000ParcelHeaderFormData parcelHeaderObj = new F26000ParcelHeaderFormData();
                exemptionDetails = terraScanService.F26000_ExemptFieldDetails(parcelId, exmptionId,exemptionCode);
                parcelHeaderObj.ReadXml(Utilities.SharedFunctions.XmlParser(exemptionDetails));
                return parcelHeaderObj;
            }
            else
            {
                return Helper.F26000_ExemptFieldDetails(parcelId, exmptionId, exemptionCode);
            }
        }

        /// <summary>
        /// F26000_s the class code details.
        /// </summary>
        /// <param name="parcelId">The parcel id.</param>
        /// <returns></returns>
        public static F26000ParcelHeaderFormData F26000_ClassCodeDetails(string filterValue)
        {
            if (WSHelper.IsOnLineMode)
            {
                string classCode;
                F26000ParcelHeaderFormData parcelHeaderObject = new F26000ParcelHeaderFormData();
                classCode = terraScanService.F26000_ClassCodeDetails(filterValue);
                parcelHeaderObject.ReadXml(Utilities.SharedFunctions.XmlParser(classCode));
                return parcelHeaderObject;
            }
            else
            {
                return Helper.F26000_ClassCodeDetails(filterValue);
            }
        }
        /// <summary>
        /// Lists the primary improvement.
        /// </summary>
        /// <returns>F25000ParcelHeaderData Typed Dataset</returns>
        public static F26000ParcelHeaderFormData PrimaryImprovementList()
        {
            if (WSHelper.IsOnLineMode)
            {
                string getPrimaryImprovement;
                F26000ParcelHeaderFormData getPrimaryImprovementData = new F26000ParcelHeaderFormData();
                getPrimaryImprovement = terraScanService.PrimaryImprovementList();
                getPrimaryImprovementData.ReadXml(Utilities.SharedFunctions.XmlParser(getPrimaryImprovement));
                return getPrimaryImprovementData;
            }
            else
            {
                return Helper.PrimaryImprovementList();
            }
        }

        /// <summary>
        /// Lists the type of the primary land.
        /// </summary>
        /// <returns></returns>
        public static F26000ParcelHeaderFormData PrimaryLandTypeList()
        {
            if (WSHelper.IsOnLineMode)
            {
                string getPrimaryLandType;
                F26000ParcelHeaderFormData getPrimaryLandTypeData = new F26000ParcelHeaderFormData();
                getPrimaryLandType = terraScanService.PrimaryLandTypeList();
                getPrimaryLandTypeData.ReadXml(Utilities.SharedFunctions.XmlParser(getPrimaryLandType));
                return getPrimaryLandTypeData;
            }
            else
            {
                return Helper.PrimaryLandTypeList();
            }
        }


        /// <summary>
        /// F26000_s the type of the get apprisal.
        /// </summary>
        /// <returns></returns>
        public static F26000ParcelHeaderFormData F26000_GetApprisalType()
        {
            if (WSHelper.IsOnLineMode)
            {
                string GetApprisalType;
                F26000ParcelHeaderFormData getPrimaryLandTypeData = new F26000ParcelHeaderFormData();
                GetApprisalType = terraScanService.F26000_GetApprisalType();
                getPrimaryLandTypeData.ReadXml(Utilities.SharedFunctions.XmlParser(GetApprisalType));
                return getPrimaryLandTypeData;
            }
            else
            {
                return Helper.F26000_GetApprisalType();
            }
        }

        /// <summary>
        /// Update Parcel Header Details
        /// </summary>
        /// <param name="parcelId">The parcel id.</param>
        /// <param name="parcelDetails">Parcel Details</param>
        /// <param name="userId">UserID</param>
        /// <param name="rollYear">The roll year.</param>
        /// <returns>Integer</returns>
        public static int UpdateParcelHeaderFormDetails(int parcelId, string parcelDetails, int userId, int rollYear)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.UpdateParcelHeaderFormDetails(parcelId, parcelDetails, userId, rollYear);
            }
            else
            {
                return Helper.UpdateParcelHeaderFormDetails(parcelId, parcelDetails, userId, rollYear);
            }
        }


        public static F2101LocationSelectionData f2101_GetLocationSelection(string locationCode, string description)
        {
            if (WSHelper.IsOnLineMode)
            {
                string locationSelection;
                F2101LocationSelectionData LocationSelectionData = new F2101LocationSelectionData();
                locationSelection = terraScanService.f2101_GetLocationSelection(locationCode, description);
                LocationSelectionData.ReadXml(Utilities.SharedFunctions.XmlParser(locationSelection));
                return LocationSelectionData;
            }
            else
            {
                return Helper.f2101_GetLocationSelection(locationCode, description);
            }
        }

        /// <summary>
        /// F2102_s the get grouping selection.
        /// </summary>
        /// <param name="groupCode">The group code.</param>
        /// <param name="description">The description.</param>
        /// <returns></returns>
        public static F2102GroupingSelectionData f2102_GetGroupingSelection(string groupCode, string description)
        {
            if (WSHelper.IsOnLineMode)
            {
                string groupSelection;
                F2102GroupingSelectionData GroupSelectionData = new F2102GroupingSelectionData();
                groupSelection = terraScanService.f2102_GetGroupingSelection(groupCode, description);
                GroupSelectionData.ReadXml(Utilities.SharedFunctions.XmlParser(groupSelection));
                return GroupSelectionData;
            }
            else
            {
                return Helper.f2102_GetGroupingSelection(groupCode, description);
            }
        }

        /// <summary>
        /// F2103_s the get exemption selection.
        /// </summary>
        /// <param name="exemptionCode">The exemption code.</param>
        /// <param name="description">The description.</param>
        /// <param name="percent">The percent.</param>
        /// <param name="maximum">The maximum.</param>
        /// <param name="rollYear">The roll year.</param>
        /// <returns></returns>
        public static F2103ExemptionSelectionData f2103_GetExemptionSelection(string exemptionCode, string description, decimal? percent, decimal? maximum, int? rollYear)
        {
            if (WSHelper.IsOnLineMode)
            {
                string exemptionSelection;
                F2103ExemptionSelectionData ExemptionSelectionData = new F2103ExemptionSelectionData();
                exemptionSelection = terraScanService.f2103_GetExemptionSelection(exemptionCode, description, percent, maximum, rollYear);
                ExemptionSelectionData.ReadXml(Utilities.SharedFunctions.XmlParser(exemptionSelection));
                return ExemptionSelectionData;
            }
            else
            {
                return Helper.f2103_GetExemptionSelection(exemptionCode, description, percent, maximum, rollYear);
            }
        }
        #endregion

        #region ParcelType

        /// <summary>
        /// Gets the ParcelHeader Data
        /// </summary>
        /// <param name="eventId">The event id.</param>
        /// <returns>F25000ParcelHeaderData Typed Dataset</returns>
        public static F2004ParcelCopyData GetParcelTypeDetails(int eventId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string getparcelDetails;
                F2004ParcelCopyData parcelTypeData = new F2004ParcelCopyData();
                getparcelDetails = terraScanService.GetParcelTypeDetails(eventId);
                parcelTypeData.ReadXml(Utilities.SharedFunctions.XmlParser(getparcelDetails));
                return parcelTypeData;
            }
            else
            {
                return Helper.GetParcelTypeDetails(eventId);
            }
        }

        #endregion ParcelType

        #region ParcelType

        /// <summary>
        /// Gets the parcel attachment details.
        /// </summary>
        /// <param name="oldParcelID">The old parcel ID.</param>
        /// <param name="newParcelID">The new parcel ID.</param>
        /// <param name="userID">The user ID.</param>
        /// <param name="moduleID">The module ID.</param>
        /// <returns>F25000ParcelHeaderData dataset.</returns>
        public static F2004ParcelCopyData GetParcelAttachmentDetails(int oldParcelID, int newParcelID, int userID, int moduleID)
        {
            if (WSHelper.IsOnLineMode)
            {
                string getparcelDetails;
                F2004ParcelCopyData parcelTypeData = new F2004ParcelCopyData();
                getparcelDetails = terraScanService.GetParcelAttachmentDetails(oldParcelID, newParcelID, userID, moduleID);
                parcelTypeData.ReadXml(Utilities.SharedFunctions.XmlParser(getparcelDetails));
                return parcelTypeData;
            }
            else
            {
                return Helper.GetParcelAttachmentDetails(oldParcelID, newParcelID, userID, moduleID);
            }
        }

        #endregion ParcelType

        /// <summary>
        /// Create New Parcel Copy
        /// </summary>
        /// <param name="parcelId">The parcel id.</param>
        /// <param name="parcelTypeId">The parcel type id.</param>
        /// <param name="copyAllObjects">Copy of objects</param>
        /// <param name="copyAllSlices">Copy of slices</param>
        /// <param name="copyAttachments">Copy of Attachments</param>
        /// <param name="copyComments">CopyComments</param>
        /// <param name="parcelElements">Parcel Elements</param>
        /// <param name="userId">UserID</param>
        /// <returns>Integer</returns>
        public static int CreateNewParcelCopy(int parcelId, int parcelTypeId, int copyAllObjects, int copyAllSlices, int copyAttachments, int copyComments, string parcelElements, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.CreateNewParcelCopy(parcelId, parcelTypeId, copyAllObjects, copyAllSlices, copyAttachments, copyComments, parcelElements, userId);
            }
            else
            {
                return Helper.CreateNewParcelCopy(parcelId, parcelTypeId, copyAllObjects, copyAllSlices, copyAttachments, copyComments, parcelElements, userId);
            }
        }

        #region 2001 Parcellock
        /// <summary>
        /// Gets the ParcelHeader Data
        /// </summary>
        /// <param name="keyId">The key id.</param>
        /// <returns>F25000ParcelHeaderData Typed Dataset</returns>
        public static F2001ParcelLockingData F2001_getParcelLockingDetails(int keyId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string getparcellockDetails;
                F2001ParcelLockingData parcelLockingData = new F2001ParcelLockingData();
                getparcellockDetails = terraScanService.F2001_getParcelLockingDetails(keyId);
                parcelLockingData.ReadXml(Utilities.SharedFunctions.XmlParser(getparcellockDetails));
                return parcelLockingData;
            }
            else
            {
                return Helper.F2001_getParcelLockingDetails(keyId);
            }
        }

        /// <summary>
        /// F2001_getParcelLockingUsername
        /// </summary>
        /// <param name="userId">userId</param>
        /// <returns>DataSet</returns>
        public static F2001ParcelLockingData F2001_getParcelLockingUsername(int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string getparcellockusernameDetails;
                F2001ParcelLockingData parcelLockingData = new F2001ParcelLockingData();
                getparcellockusernameDetails = terraScanService.F2001_getParcelLockingUsername(userId);
                parcelLockingData.ReadXml(Utilities.SharedFunctions.XmlParser(getparcellockusernameDetails));
                return parcelLockingData;
            }
            else
            {
                return Helper.F2001_getParcelLockingUsername(userId);
            }
        }

        /// <summary>
        /// Gets the ParcelHeader Data
        /// </summary>
        /// <param name="keyId">The key id.</param>
        /// <param name="lockvalue">lockvalue</param>
        /// <param name="adminlock">Adminlock</param>
        /// <param name="appraisallock">Appraisallock</param>
        /// <param name="userId">UserID</param>
        /// <returns>F25000ParcelHeaderData Typed Dataset</returns>
        public static int F2001_UpdateParcelLockingDetails(int keyId, int lockvalue, int adminlock, int appraisallock, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F2001_UpdateParcelLockingDetails(keyId, lockvalue, adminlock, appraisallock, userId);
            }
            else
            {
                return Helper.F2001_UpdateParcelLockingDetails(keyId, lockvalue, adminlock, appraisallock, userId);
            }
        }

        /// <summary>
        /// F2001_GetValidUserName
        /// </summary>
        /// <param name="keyId">keyId</param>
        /// <param name="userId">userId</param>
        /// <param name="formNo">formNo</param>
        /// <returns>Integer</returns>
        public static int F2001_GetValidUserName(int keyId, int userId, string formNo)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F2001_GetValidUserName(keyId, userId, formNo);
            }
            else
            {
                return Helper.F2001_GetValidUserName(keyId, userId, formNo);
            }
        }

        #endregion 2001 Parcellock

        #region ParcelType

        /// <summary>
        /// Gets the ParcelHeader Data
        /// </summary>
        /// <returns>F25000ParcelHeaderData Typed Dataset</returns>
        public static F2000ParcelStatusData.f2000ListParcelTypeDataTable GetParcelType()
        {
            if (WSHelper.IsOnLineMode)
            {
                string getparcelDetails;
                F2000ParcelStatusData parcelTypeData = new F2000ParcelStatusData();
                getparcelDetails = terraScanService.GetParcelType();
                parcelTypeData.ReadXml(Utilities.SharedFunctions.XmlParser(getparcelDetails));
                return parcelTypeData.f2000ListParcelType;
            }
            else
            {
                F2000ParcelStatusData parcelTypeData = new F2000ParcelStatusData();
                parcelTypeData = Helper.GetParcelType();
                return parcelTypeData.f2000ListParcelType;
            }
        }

        #endregion ParcelType

        #region F12050FeeManagement

        /// <summary>
        /// Gets the Data
        /// </summary>
        /// <returns>DataSet</returns>
        public static F15050FeeManagementData F15050_ComboData()
        {
            if (WSHelper.IsOnLineMode)
            {
                string comboDataValue;
                F15050FeeManagementData form15050FeeManagement = new F15050FeeManagementData();
                comboDataValue = terraScanService.F15050_ComboData();
                form15050FeeManagement.ReadXml(Utilities.SharedFunctions.XmlParser(comboDataValue));
                return form15050FeeManagement;
            }
            else
            {
                return Helper.F15050_ComboData();
            }
        }

        /// <summary>
        /// Get the Data
        /// </summary>
        /// <param name="feeId">FeeID</param>
        /// <returns>DataSet</returns>
        public static F15050FeeManagementData F15050_getDatas(int feeId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string form15050getdataValue;
                form15050getdataValue = string.Empty;
                F15050FeeManagementData form15050FeeManagement = new F15050FeeManagementData();
                form15050getdataValue = terraScanService.F15050_getDatas(feeId);
                form15050FeeManagement.ReadXml(Utilities.SharedFunctions.XmlParser(form15050getdataValue));
                return form15050FeeManagement;
            }
            else
            {
                return Helper.F15050_getDatas(feeId);
            }
        }

        /// <summary>
        /// Save Fee Details
        /// </summary>
        /// <param name="feeId">Fee ID</param>
        /// <param name="description">Description</param>
        /// <param name="amount">Amount</param>
        /// <param name="accountId">Account ID</param>
        /// <param name="userId">User ID</param>
        /// <returns>Integer</returns>
        public static int F15050_SaveFeeManagement(int feeId, string description, decimal amount, int accountId, int userId, byte feeTypeId)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F15050_SaveFeeManagement(feeId, description, amount, accountId, userId, feeTypeId);
            }
            else
            {
                return Helper.F15050_SaveFeeManagement(feeId, description, amount, accountId, userId, feeTypeId);
            }
        }

        /// <summary>
        /// F15050_AppyFees
        /// </summary>
        /// <param name="feeXML">feeXML.</param>
        /// <param name="amount">amount</param>
        /// <param name="description">description</param>
        /// <param name="accountId">accountId</param>
        /// <param name="userId">UserID</param>
        /// <returns>integer</returns>
        public static int F15050_AppyFees(string feeXML, decimal amount, string description, int accountId, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F15050_ApplyFees(feeXML, amount, description, accountId, userId);
            }
            else
            {
                return Helper.F15050_ApplyFees(feeXML, amount, description, accountId, userId);
            }
        }

        /// <summary>
        /// F15050_s the list fee types.
        /// </summary>
        /// <param name="userId">The user id.</param>
        /// <returns>The fee mgmt dataset</returns>
        public static F15050FeeManagementData F15050_ListFeeTypes(int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string comboDataValue;
                F15050FeeManagementData form15050FeeManagement = new F15050FeeManagementData();
                comboDataValue = terraScanService.F15050_ListFeeTypes(userId);
                form15050FeeManagement.ReadXml(Utilities.SharedFunctions.XmlParser(comboDataValue));
                return form15050FeeManagement;
            }
            else
            {
                return Helper.F15050_ListFeeTypes(userId);
            }
        }

        /// <summary>
        /// F15050_s the remove template.
        /// </summary>
        /// <param name="feeId">The fee id.</param>
        /// <param name="userId">The user id.</param>
        public static void F15050_RemoveTemplate(int feeId, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                terraScanService.F15050_RemoveTemplate(feeId, userId);
            }
            else
            {
                Helper.F15050_RemoveTemplate(feeId, userId);
            }
        }

        #endregion

        #region F15016 Statementheader
        /// <summary>
        /// Gets the Statementheader Data
        /// </summary>
        /// <param name="statementId">statementId</param>
        /// <returns>Statementheader Typed Dataset</returns>
        public static F15016StatementHeaderData F15016_GetstatementHeaderSlimDetails(int statementId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string getstatementHeaderDetails;
                F15016StatementHeaderData statementHeaderData = new F15016StatementHeaderData();
                getstatementHeaderDetails = terraScanService.F15016_GetStatementHeaderSlimDetails(statementId);
                statementHeaderData.ReadXml(Utilities.SharedFunctions.XmlParser(getstatementHeaderDetails));
                return statementHeaderData;
            }
            else
            {
                return Helper.F15016_GetstatementHeaderSlimDetails(statementId);
            }
        }

        #endregion F15016 Statementheader

        #region F35001 Value Slice Header/Adjustment

        #region Get Value Slice Header

        /// <summary>
        /// F35001_s the get value slice header.
        /// </summary>
        /// <param name="valueSliceId">The value slice id.</param>
        /// <returns>
        /// the DataSet with the Header and Adjustment Values.
        /// </returns>
        public static F35001ValueSliceHeaderData F35001_GetValueSliceHeader(int valueSliceId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string valueSliceHeaderDetails;
                F35001ValueSliceHeaderData valueSliceHeaderData = new F35001ValueSliceHeaderData();
                valueSliceHeaderDetails = terraScanService.F35001_GetValueSliceHeader(valueSliceId);
                valueSliceHeaderData.ReadXml(Utilities.SharedFunctions.XmlParser(valueSliceHeaderDetails));
                return valueSliceHeaderData;
            }
            else
            {
                return Helper.F35001_GetValueSliceHeader(valueSliceId);
            }
        }

        #endregion

        #region Get Adjustment Slice Value

        /// <summary>
        /// F35001_s the get adjustment slice value.
        /// </summary>
        /// <param name="valueSliceId">The value slice id.</param>
        /// <param name="type">The type.</param>
        /// <param name="isvalue">The is value.</param>
        /// <param name="adjustmentValue">The adjustment value.</param>
        /// <returns>Object Contains the Adjustment Value.</returns>
        public static string F35001_GetAdjustmentSliceValue(int valueSliceId, byte type, bool isvalue, decimal adjustmentValue)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F35001_GetAdjustmentSliceValue(valueSliceId, type, isvalue, adjustmentValue);
            }
            else
            {
                return Helper.F35001_GetAdjustmentSliceValue(valueSliceId, type, isvalue, adjustmentValue);
            }
        }

        #endregion

        #region List Adjustment Types

        /// <summary>
        /// F35002_s the type of the list adjustment.
        /// </summary>
        /// <param name="masterFromNo">The master from no.</param>
        /// <returns>Adjustment Types dataTable</returns>
        public static F35001ValueSliceHeaderData.ListAdjustmentTypeDataTable F35002_ListAdjustmentType(int? masterFromNo)
        {
            if (WSHelper.IsOnLineMode)
            {
                string getAdjustmentTypeDetails;
                F35001ValueSliceHeaderData valueSliceHeaderData = new F35001ValueSliceHeaderData();
                getAdjustmentTypeDetails = terraScanService.F35002_ListAdjustmentType(masterFromNo);
                valueSliceHeaderData.ReadXml(Utilities.SharedFunctions.XmlParser(getAdjustmentTypeDetails));
                return valueSliceHeaderData.ListAdjustmentType;
            }
            else
            {
                F35001ValueSliceHeaderData.ListAdjustmentTypeDataTable valueSliceHeaderData = new F35001ValueSliceHeaderData.ListAdjustmentTypeDataTable();
                valueSliceHeaderData = Helper.F35002_ListAdjustmentType(masterFromNo);
                return valueSliceHeaderData;
            }
        }
        #endregion

        #region Delete Value Slice

        /// <summary>
        /// F35001_s the delete value slice.
        /// </summary>
        /// <param name="valueSliceId">The value slice id.</param>
        /// <param name="userId">UserID</param>
        public static void F35001_DeleteValueSlice(int valueSliceId, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                terraScanService.F35001_DeleteValueSlice(valueSliceId, userId);
            }
            else
            {
                Helper.F35001_DeleteValueSlice(valueSliceId, userId);
            }
        }

        #endregion

        #endregion

        #region F35000 Appraisal Value Summary

        #region Insert/Update Value Slice

        /// <summary>
        /// F35000_s the update value slice.
        /// </summary>
        /// <param name="valueSliceId">The value slice id.</param>
        /// <param name="valueSliceHeaderItems">The value slice header items.</param>
        /// <param name="userId">UserID</param>
        /// <returns>Primary Key Id or Error Id.</returns>
        public static int F35000_InsertOrUpdateValueSlice(int? valueSliceId, string valueSliceHeaderItems, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F35000_InsertOrUpdateValueSlice(valueSliceId, valueSliceHeaderItems, userId);
            }
            else
            {
                return Helper.F35000_InsertOrUpdateValueSlice(valueSliceId, valueSliceHeaderItems, userId);
            }
        }

        #endregion

        #region Get AppraisalSummary Objects

        /// <summary>
        /// F35000_s the get appraisal summary objects.
        /// </summary>
        /// <param name="parcelId">The parcel id.</param>
        /// <returns>F35000AppraisalSummary DataSet</returns>
        public static F35000AppraisalSummaryData F35000_GetAppraisalSummaryObjects(int parcelId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string appraisalSummaryObjectDetails;
                F35000AppraisalSummaryData appraisalSummaryObjectData = new F35000AppraisalSummaryData();
                appraisalSummaryObjectDetails = terraScanService.F35000_GetAppraisalSummaryObjects(parcelId);
                appraisalSummaryObjectData.ReadXml(Utilities.SharedFunctions.XmlParser(appraisalSummaryObjectDetails));
                return appraisalSummaryObjectData;
            }
            else
            {
                return Helper.F35000_GetApparaisalSummaryObjecy(parcelId);
            }
        }

        #endregion Get AppraisalSummary Objects

        #region CheckAppraisalSummaryUser

        /// <summary>
        /// F35000_s the check appraisal summary user.
        /// </summary>
        /// <param name="valueSliceId">The value slice id.</param>
        /// <param name="objectId">The object id.</param>
        /// <param name="userId">The user id.</param>
        /// <returns>F35000AppraisalSummary DataSet</returns>
        public static F35000AppraisalSummaryData F35000_CheckAppraisalSummaryUser(int valueSliceId, int objectId, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string appraisalSummaryObjectDetails;
                F35000AppraisalSummaryData appraisalSummaryObjectData = new F35000AppraisalSummaryData();
                appraisalSummaryObjectDetails = terraScanService.F35000_CheckAppraisalSummaryUser(valueSliceId, objectId, userId);
                appraisalSummaryObjectData.ReadXml(Utilities.SharedFunctions.XmlParser(appraisalSummaryObjectDetails));
                return appraisalSummaryObjectData;
            }
            else
            {
                return Helper.F35000_CheckAppraisalSummaryUser(valueSliceId, objectId, userId);
            }
        }
        #endregion CheckAppraisalSummaryUser

        #region Insert Object
        /// <summary>
        /// F35000_s the insert object.
        /// </summary>
        /// <param name="parcelId">The parcel id.</param>
        /// <param name="objectTypeId">The object type id.</param>
        /// <param name="description">The description.</param>
        /// <param name="userId">UserID</param>
        /// <returns>Primary Key Id if Success else Error Id</returns>
        public static int F35000_InsertObject(int parcelId, short objectTypeId, string description, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F35000_InsertObject(parcelId, objectTypeId, description, userId);
            }
            else
            {
                return Helper.F35000_InsertObject(parcelId, objectTypeId, description, userId);
            }
        }

        #endregion

        #region SaveAppraisal

        /// <summary>
        /// F35000_s the SaveAppraisal
        /// </summary>
        /// <param name="parcelId">The parcel id.</param>
        /// <param name="properitiesXML">The properities XML.</param>
        /// <param name="userId">UserID</param>
        public static void F35000_SaveAppraisal(int parcelId, string propertiesXML, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                terraScanService.F35000_SaveAppraisal(parcelId, propertiesXML, userId);
            }
            else
            {
                Helper.F35000_SaveAppraisal(parcelId, propertiesXML, userId);
            }
        }
        #endregion SaveAppraisal

        #region List Object Slice Types

        /// <summary>
        /// F35000_s the list  slice types.
        /// </summary>
        /// <param name="ObjectId">The objectID id.</param>
        /// <returns>DataSet Contains the List Slice Types</returns>
        public static F35000AppraisalSummaryData F35000_ListObjectSliceTypes(int? parcelId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string appraisalSummaryObjectDetails;
                F35000AppraisalSummaryData appraisalSummaryObjectData = new F35000AppraisalSummaryData();
                appraisalSummaryObjectDetails = terraScanService.F35000_ListObjectSliceTypes(parcelId);
                appraisalSummaryObjectData.ReadXml(Utilities.SharedFunctions.XmlParser(appraisalSummaryObjectDetails));
                return appraisalSummaryObjectData;
            }
            else
            {
                return Helper.F35000_ListObjectSliceTypes(parcelId);
            }
        }

        #endregion

        #region List Slice Types

        /// <summary>
        /// F35000_s the list  slice types.
        /// </summary>
        /// <returns>DataSet Contains the List  Slice Types</returns>
        public static F35000AppraisalSummaryData F35000_ListSliceTypes(int objectId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string appraisalSummaryObjectDetails;
                F35000AppraisalSummaryData appraisalSummaryObjectData = new F35000AppraisalSummaryData();
                appraisalSummaryObjectDetails = terraScanService.F35000_ListSliceTypes(objectId);
                appraisalSummaryObjectData.ReadXml(Utilities.SharedFunctions.XmlParser(appraisalSummaryObjectDetails));
                return appraisalSummaryObjectData;
            }
            else
            {
                return Helper.F35000_ListSliceTypes(objectId);
            }
        }

        #endregion

        #endregion


        public static F35000AppraisalSummaryData F35000_ObjectTotal(int parcelId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string appraisalSummaryObjectValue;
                F35000AppraisalSummaryData appraisalValue = new F35000AppraisalSummaryData();
                appraisalSummaryObjectValue = terraScanService.F35000_ObjectTotal(parcelId);
                appraisalValue.ReadXml(Utilities.SharedFunctions.XmlParser(appraisalSummaryObjectValue));
                return appraisalValue;
            }
            else
            {
                return Helper.F35000_ObjectTotal(parcelId);
            }
        }

        #region Improvement District Definition.
        /// <summary>
        /// Lists the type of the Interest Method.
        /// </summary>
        /// <returns></returns>
        public static F16040ImprovementDistrictDefinition ListInterestMethod()
        {
            if (WSHelper.IsOnLineMode)
            {
                string getInterestDistrictMethod;
                F16040ImprovementDistrictDefinition getInterestMethoddata = new F16040ImprovementDistrictDefinition();
                getInterestDistrictMethod = terraScanService.ListInterestMethod();
                getInterestMethoddata.ReadXml(Utilities.SharedFunctions.XmlParser(getInterestDistrictMethod));
                return getInterestMethoddata;
            }
            else
            {
                return Helper.ListInterestMethod();
            }
        }

        /// <summary>
        /// list the Delq interest details.
        /// </summary>
        /// <returns></returns>
        public static F16040ImprovementDistrictDefinition ListInterestDelqDetails()
        {
            if (WSHelper.IsOnLineMode)
            {
                string getInterestDelqDetails;
                F16040ImprovementDistrictDefinition getInterestDelqDetailsdata = new F16040ImprovementDistrictDefinition();
                getInterestDelqDetails = terraScanService.ListInterestDelqDetails();
                getInterestDelqDetailsdata.ReadXml(Utilities.SharedFunctions.XmlParser(getInterestDelqDetails));
                return getInterestDelqDetailsdata;
            }
            else
            {
                return Helper.ListInterestDelqDetails();
            }
        }

        /// <summary>
        /// Lists the type of the Interest Method.
        /// </summary>
        /// <returns></returns>
        public static F16040ImprovementDistrictDefinition GetDistrictDetails(int districtId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string getDistrictDetails;
                F16040ImprovementDistrictDefinition getDistrictDetailsdata = new F16040ImprovementDistrictDefinition();
                getDistrictDetails = terraScanService.GetDistrictDetails(districtId);
                getDistrictDetailsdata.ReadXml(Utilities.SharedFunctions.XmlParser(getDistrictDetails));
                return getDistrictDetailsdata;
            }
            else
            {
                return Helper.GetDistrictDetails(districtId);
            }
        }

        /// <summary>
        /// Improvement District Type list.
        /// </summary>
        /// <returns></returns>
        public static F16040ImprovementDistrictDefinition ImprovementDistrictTypelist(string districtType)
        {
            if (WSHelper.IsOnLineMode)
            {
                string getDistrictTypelist;
                F16040ImprovementDistrictDefinition getDistrictType = new F16040ImprovementDistrictDefinition();
                getDistrictTypelist = terraScanService.ImprovementDistrictTypelist(districtType);
                getDistrictType.ReadXml(Utilities.SharedFunctions.XmlParser(getDistrictTypelist));
                return getDistrictType;
            }
            else
            {
                return Helper.ImprovementDistrictTypelist(districtType);
            }
        }

        /// <summary>
        /// Get Distribution Details.
        /// </summary>
        /// <returns></returns>
        public static F16040ImprovementDistrictDefinition GetDistributionDetails()
        {
            if (WSHelper.IsOnLineMode)
            {
                string getDistributionDetails;
                F16040ImprovementDistrictDefinition getDistributionDetailsdata = new F16040ImprovementDistrictDefinition();
                getDistributionDetails = terraScanService.GetDistributionDetails();
                getDistributionDetailsdata.ReadXml(Utilities.SharedFunctions.XmlParser(getDistributionDetails));
                return getDistributionDetailsdata;
            }
            else
            {
                return Helper.GetDistributionDetails();
            }
        }

        /// <summary>
        /// Get District Definition Details.
        /// </summary>
        /// <returns></returns>
        public static F16040ImprovementDistrictDefinition GetDistrictDefinitionDetails(int districtID)
        {
            if (WSHelper.IsOnLineMode)
            {
                string getDistrictDefinitonDetails;
                F16040ImprovementDistrictDefinition getDistrictDefinitionDetailsdata = new F16040ImprovementDistrictDefinition();
                getDistrictDefinitonDetails = terraScanService.GetDistrictDefinitionDetails(districtID);
                getDistrictDefinitionDetailsdata.ReadXml(Utilities.SharedFunctions.XmlParser(getDistrictDefinitonDetails));
                return getDistrictDefinitionDetailsdata;
            }
            else
            {
                return Helper.GetDistrictDefinitionDetails(districtID);
            }
        }

        /// <summary>
        /// Rollover Improvement District.
        /// </summary>
        /// <param name="districtId"></param>
        /// <param name="userId"></param>
        /// <returns></returns>
        public static F16040ImprovementDistrictDefinition RollOver_ImprovementDistrict(int districtId,int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string miscImprovementObjectValue;
                F16040ImprovementDistrictDefinition miscImprovementData = new F16040ImprovementDistrictDefinition();
                miscImprovementObjectValue = terraScanService.RollOver_ImprovementDistrict(districtId, userId);
                miscImprovementData.ReadXml(Utilities.SharedFunctions.XmlParser(miscImprovementObjectValue));
                return miscImprovementData;
            }
            else
            {
                return Helper.RollOver_ImprovementDistrict(districtId, userId);
            }
        }

        /// <summary>
        /// Save Improvement District Definition.
        /// </summary>
        public static string F16040_SaveImproveDistrictDefinition(string districtItem,string distributionItem, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F16040_SaveImproveDistrictDefinition(districtItem,distributionItem, userId);
            }
            else
            {
                return Helper.F16040_SaveImproveDistrictDefinition(districtItem,distributionItem,userId);
            }
        }

        /// <summary>
        /// Update Improvement District Details.
        /// </summary>
        /// <param name="districtNo"></param>
        /// <param name="districtItem"></param>
        /// <param name="distributionItem"></param>
        /// <param name="userId"></param>
        /// <returns></returns>
        public static string F16040_UpdateImproveDistrictDefinition(int districtNo, string districtItem, string distributionItem, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F16040_UpdateImproveDistrictDefinition(districtNo, districtItem, distributionItem, userId);
            }
            else
            {
                return Helper.F16040_UpdateImproveDistrictDefinition(districtNo, districtItem, distributionItem, userId);
            }

        }

        #endregion Improvement District Definition.

        #region Improvement District Parcels.

        /// <summary>
        /// Get District Definition Details.
        /// </summary>
        /// <returns></returns>
        public static F16041ImprovementDistrictParcels GetDistrictParcels(int districtID)
        {
            if (WSHelper.IsOnLineMode)
            {
                string getDistrictDefinitonDetails;
                F16041ImprovementDistrictParcels getDistrictdata = new F16041ImprovementDistrictParcels();
                getDistrictDefinitonDetails = terraScanService.GetDistrictParcels(districtID);
                getDistrictdata.ReadXml(Utilities.SharedFunctions.XmlParser(getDistrictDefinitonDetails));
                return getDistrictdata;
            }
            else
            {
                return Helper.GetDistrictParcels(districtID);
            }
        }

        /// <summary>
        /// List selected parcel details.
        /// </summary>
        /// <returns></returns>
        public static F16041ImprovementDistrictParcels ListDistrictParcelsDetails(string parcelNum, int? parcelId, int? rollYear)
        {
            if (WSHelper.IsOnLineMode)
            {
                string getDistrictDefinitonDetails;
                F16041ImprovementDistrictParcels getDistrictdata = new F16041ImprovementDistrictParcels();
                getDistrictDefinitonDetails = terraScanService.ListDistrictParcelsDetails(parcelNum, parcelId, rollYear);
                getDistrictdata.ReadXml(Utilities.SharedFunctions.XmlParser(getDistrictDefinitonDetails));
                return getDistrictdata;
            }
            else
            {
                return Helper.ListDistrictParcelsDetails(parcelNum, parcelId, rollYear);
            }
        }

        /// <summary>
        /// Save Improvement District Parcels.
        /// </summary>
        public static string F16041_SaveDistrictParcels(string districtProperty, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F16041_SaveDistrictParcels(districtProperty, userId);
            }
            else
            {
                return Helper.F16041_SaveDistrictParcels(districtProperty, userId);
            }
        }

        /// <summary>
        /// F16030_s the delete district definition rate.
        /// </summary>
        /// <param name="speialDistrictRateItemId">The speial district rate item id.</param>
        /// <param name="userId">UserID</param>
        public static string F16041_DeleteDistrictParcels(int workingFileItemId, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F16041_DeleteDistrictParcels(workingFileItemId, userId);
            }
            else
            {
                return Helper.F16041_DeleteDistrictParcels(workingFileItemId, userId);
            }
        }

        /// <summary>
        /// Check Parcel Details.
        /// </summary>
        public static string CheckParcelDetails(string districtProperty)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.CheckParcelDetails(districtProperty);
            }
            else
            {
                return Helper.CheckParcelDetails(districtProperty);
            }
        }

        #endregion Improvement District Parcels.

        #region NeighborhoodHeader

        ///// <summary>
        ///// F35100_GetNeighborhoodHeaderDetails
        ///// </summary>
        ///// <param name="neighborId">neighborId</param>
        ///// <returns>f35100NeighborhoodHeaderData</returns>
        ////public static F35100NeighborhoodHeaderData F35100_GetNeighborhoodHeaderDetails(int neighborId)
        ////{
        ////    string NeighborhoodHeaderDetails;
        ////    F35100NeighborhoodHeaderData f35100NeighborhoodHeaderData = new F35100NeighborhoodHeaderData();
        ////    //NeighborhoodHeaderDetails = terraScanService.F35100_GetNeighborhoodHeaderDetails(neighborId);
        ////    f35100NeighborhoodHeaderData.ReadXml(Utilities.SharedFunctions.XmlParser(NeighborhoodHeaderDetails));
        ////    return f35100NeighborhoodHeaderData;
        ////}

        /// <summary>
        /// F35100_GetNeighborhoodHeaderUserDetails
        /// </summary>
        /// <param name="applicationId">applicationId</param>
        /// <returns>f35100NeighborhoodHeaderData</returns>
        public static F35100NeighborhoodHeaderData F35100_GetNeighborhoodHeaderUserDetails(int applicationId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string neighborhoodHeaderUserDetails;
                F35100NeighborhoodHeaderData form35100NeighborhoodHeaderData = new F35100NeighborhoodHeaderData();
                neighborhoodHeaderUserDetails = terraScanService.F35100_GetNeighborhoodHeaderUserDetails(applicationId);
                form35100NeighborhoodHeaderData.ReadXml(Utilities.SharedFunctions.XmlParser(neighborhoodHeaderUserDetails));
                return form35100NeighborhoodHeaderData;
            }
            else
            {
                return Helper.F35100_GetNeighborhoodHeaderUserDetails(applicationId);
            }
        }
        ///// <summary>
        ///// 
        ///// </summary>
        ///// <param name="applicationId">applicationId</param>
        ///// <returns></returns>
        ////public static F35100NeighborhoodHeaderData F35100_GetNeighborhoodGroupDetails(int rollYear)
        ////{
        ////    string NeighborhoodGroupDetails;
        ////    F35100NeighborhoodHeaderData f35100NeighborhoodHeaderData = new F35100NeighborhoodHeaderData();
        ////    NeighborhoodGroupDetails = terraScanService.F35100_GetNeighborhoodGroupDetails(rollYear);
        ////    f35100NeighborhoodHeaderData.ReadXml(Utilities.SharedFunctions.XmlParser(NeighborhoodGroupDetails));
        ////    return f35100NeighborhoodHeaderData;
        ////}

        /// <summary>
        /// Save NeighborHood Header Details
        /// </summary>
        /// <param name="nbhId">NeighborHood ID</param>
        /// <param name="nbhDetails">NeighborHood Details</param>
        /// <param name="userId">UserID</param>
        /// <returns>Integer</returns>
        public static int F35100_SaveNeighborhoodHeaderDetails(int nbhId, string nbhDetails, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F35100_SaveNeighborhoodHeaderDetails(nbhId, nbhDetails, userId);
            }
            else
            {
                return Helper.F35100_SaveNeighborhoodHeaderDetails(nbhId, nbhDetails, userId);
            }
        }

        /// <summary>
        /// DuplicateNeighborhoodHeaderCheck
        /// </summary>
        /// <param name="nbhId">nbhId</param>
        /// <param name="nbhDetails">nbhDetails</param>
        /// <returns>Integer</returns>
        public static int DuplicateNeighborhoodHeaderCheck(int nbhId, string nbhDetails)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.DuplicateNeighborhoodHeaderCheck(nbhId, nbhDetails);
            }
            else
            {
                return Helper.DuplicateNeighborhoodHeaderCheck(nbhId, nbhDetails);
            }
        }

        #region Delete Neighborhood Group Header

        /// <summary>
        ///  To Delete F35101 Neighborhood Group Header.
        /// </summary>
        /// <param name="nbhdId">The Neighborhood Group ID.</param>
        /// <param name="userId">UserID</param>
        public static void F35100_DeleteNeighborhoodHeader(int nbhdId, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                terraScanService.F35100_DeleteNeighborhoodHeader(nbhdId, userId);
            }
            else
            {
                Helper.F35100_DeleteNeighborhoodHeader(nbhdId, userId);
            }
        }

        /// <summary>
        /// F35100_GetNeighborhoodHeaderDetails
        /// </summary>
        /// <param name="neighborId">neighborId</param>
        /// <returns>f35100NeighborhoodHeaderData</returns>
        public static F35100NeighborhoodHeaderData GetNeighborhoodHeaderDetails(int neighborId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string neighborhoodHeaderDetails;
                F35100NeighborhoodHeaderData form35100NeighborhoodHeaderData = new F35100NeighborhoodHeaderData();
                neighborhoodHeaderDetails = terraScanService.GetNeighborhoodHeaderDetails(neighborId);
                form35100NeighborhoodHeaderData.ReadXml(Utilities.SharedFunctions.XmlParser(neighborhoodHeaderDetails));
                return form35100NeighborhoodHeaderData;
            }
            else
            {
                return Helper.GetNeighborhoodHeaderDetails(neighborId);
            }
        }

        /// <summary>
        /// F35100_GetNeighborhoodHeaderDetails
        /// </summary>
        /// <param name="rollyear">Roll Year</param>
        /// <param name="type">Type</param>
        /// <param name="parentNeighborhood">Neighborhood</param>
        /// <returns>f35100NeighborhoodHeaderData</returns>
        public static F35100NeighborhoodHeaderData GetParentNeighborhoodHeaderDetails(int rollyear, int type, int parentNeighborhood)
        {
            if (WSHelper.IsOnLineMode)
            {
                string neighborhoodHeaderDetails;
                F35100NeighborhoodHeaderData form35100NeighborhoodHeaderData = new F35100NeighborhoodHeaderData();
                neighborhoodHeaderDetails = terraScanService.GetParentNeighborhoodHeaderDetails(rollyear, type, parentNeighborhood);
                form35100NeighborhoodHeaderData.ReadXml(Utilities.SharedFunctions.XmlParser(neighborhoodHeaderDetails));
                return form35100NeighborhoodHeaderData;
            }
            else
            {
                return Helper.GetParentNeighborhoodHeaderDetails(rollyear, type, parentNeighborhood);
            }
        }

        /// <summary>
        /// Save Neighbourhood Header Details
        /// </summary>
        /// <param name="nbhId">ID</param>
        /// <param name="nbhDetails">Details</param>
        /// <param name="userId">UserID</param>
        /// <returns>Integer</returns>
        public static int SaveNeighborhoodHeaderDetails(int nbhId, string nbhDetails, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.SaveNeighborhoodHeaderDetails(nbhId, nbhDetails, userId);
            }
            else
            {
                return Helper.SaveNeighborhoodHeaderDetails(nbhId, nbhDetails, userId);
            }
        }

        /// <summary>
        ///  To Delete F35101 Neighborhood Group Header.
        /// </summary>
        /// <param name="nbhdId">Neighborhood ID</param>
        /// <param name="userId">UserID</param>
        /// <returns>Integer</returns>
        public static int DeleteNeighborhoodHeader(int nbhdId, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.DeleteNeighborhoodHeader(nbhdId, userId);
            }
            else
            {
                return Helper.DeleteNeighborhoodHeader(nbhdId, userId);
            }
        }

        #endregion

        #region F35102 Neighborhood Configuration

        #region Get Neighborhood Cfg Details

        /// <summary>
        /// Gets the neighborhood CFG details.
        /// </summary>
        /// <param name="nbhdId">The NBHD id.</param>
        /// <returns>Typed DataSet</returns>
        public static F35102NeighborhoodCfgData GetNeighborhoodCfgDetails(int nbhdId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string neighborhoodHeaderCfgDetails;
                F35102NeighborhoodCfgData neighborhoodCfgData = new F35102NeighborhoodCfgData();
                neighborhoodHeaderCfgDetails = terraScanService.GetNeighborhoodCfgDetails(nbhdId);
                neighborhoodCfgData.ReadXml(Utilities.SharedFunctions.XmlParser(neighborhoodHeaderCfgDetails));
                return neighborhoodCfgData;
            }
            else
            {
                return Helper.GetNeighborhoodCfgDetails(nbhdId);
            }
        }

        #endregion Get Neighborhood Cfg Details

        #region Get Neighborhood Cfg Choice

        /// <summary>
        /// Gets the neighborhood CFG Choice.
        /// </summary>
        /// <param name="nbhdId">The NBHD id.</param>
        /// <param name="nbhdCfgId">The NBHD CFG id.</param>
        /// <returns>
        /// Typed Dataset containing the  neighborhood CFG Choice details
        /// </returns>
        public static F35102NeighborhoodCfgData GetNeighborhoodCfgChoice(int nbhdId, int nbhdCfgId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string neighborhoodHeaderCfgChoice;
                F35102NeighborhoodCfgData neighborhoodCfgChoice = new F35102NeighborhoodCfgData();
                neighborhoodHeaderCfgChoice = terraScanService.GetNeighborhoodCfgChoice(nbhdId, nbhdCfgId);
                neighborhoodCfgChoice.ReadXml(Utilities.SharedFunctions.XmlParser(neighborhoodHeaderCfgChoice));
                return neighborhoodCfgChoice;
            }
            else
            {
                return Helper.GetNeighborhoodCfgChoice(nbhdId, nbhdCfgId);
            }
        }

        #endregion Get Neighborhood Cfg Choice

        #region Save Neighborhood Cfg Details

        /// <summary>
        /// To Save Neighborhood CFG details.
        /// </summary>
        /// <param name="neighborhoodConfigId">The neighborhood config id.</param>
        /// <param name="neighborhoodConfigDetails">The neighborhood config details.</param>
        /// <param name="userId">UserID</param>
        public static void F35102_SaveNeighborhoodCfgDetails(int neighborhoodConfigId, string neighborhoodConfigDetails, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                terraScanService.F35102_SaveNeighborhoodCfgDetails(neighborhoodConfigId, neighborhoodConfigDetails, userId);
            }
            else
            {
                Helper.F35102_SaveNeighborhoodCfgDetails(neighborhoodConfigId, neighborhoodConfigDetails, userId);
            }
        }

        #endregion Save Neighborhood Cfg Details

        #endregion F35102 Neighborhood Configuration

        #region NeighborhoodParcelLocks

        /// <summary>
        /// List Neighborhood Parcel Locks
        /// </summary>
        /// <param name="nbhdID">ID</param>
        /// <returns>DataSet</returns>
        public static F3501NeighborhoodParcelLocksData ListNeighborhoodParcelLocks(int nbhdID)
        {
            if (WSHelper.IsOnLineMode)
            {
                string neighborhoodHeaderLockDetails;
                F3501NeighborhoodParcelLocksData neighborhoodParcelLocksData = new F3501NeighborhoodParcelLocksData();
                neighborhoodHeaderLockDetails = terraScanService.ListNeighborhoodParcelLocks(nbhdID);
                neighborhoodParcelLocksData.ReadXml(Utilities.SharedFunctions.XmlParser(neighborhoodHeaderLockDetails));
                return neighborhoodParcelLocksData;
            }
            else
            {
                return Helper.ListNeighborhoodParcelLocks(nbhdID);
            }
        }

        /// <summary>
        /// Gets the ParcelHeader Data
        /// </summary>
        /// <param name="keyId">The key id.</param>
        /// <param name="lockvalue">lockvalue</param>
        /// <param name="adminlock">adminlock</param>
        /// <param name="appraisallock">appraisallock</param>
        /// <param name="primaryId">The primary id.</param>
        /// <param name="userId">UserID</param>
        /// <returns>F25000ParcelHeaderData Typed Dataset</returns>
        public static F3501NeighborhoodParcelLocksData UpdateParcelLockingDetails(int keyId, int lockvalue, int adminlock, int appraisallock, int primaryId, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string neighborhoodHeaderLockDetails;
                F3501NeighborhoodParcelLocksData neighborhoodParcelLocksData = new F3501NeighborhoodParcelLocksData();
                neighborhoodHeaderLockDetails = terraScanService.UpdateParcelLockingDetails(keyId, lockvalue, adminlock, appraisallock, primaryId, userId);
                neighborhoodParcelLocksData.ReadXml(Utilities.SharedFunctions.XmlParser(neighborhoodHeaderLockDetails));
                return neighborhoodParcelLocksData;
            }
            else
            {
                return Helper.UpdateParcelLockingDetails(keyId, lockvalue, adminlock, appraisallock, primaryId, userId);
            }
        }

        #endregion NeighborhoodParcelLocks

        #endregion NeighborhoodHeader

        #region F27000 Misc Assessment

        #region Get Misc Assessment Details

        /// <summary>
        /// Gets the Misc Assessment details based on the Misc Assessment DistrictId
        /// </summary>
        /// <param name="madistrictId">The Misc Assessment District Id.</param>
        /// <returns>
        /// The typed dataset containing the Misc Assessment information of the madistrictId.
        /// </returns>
        public static F22000MiscAssessmentData F27000_GetMiscAssessment(int madistrictId)
        {
            //isAccountRequired = true;
            if (WSHelper.IsOnLineMode)
            {
                string miscAssessmentValue;
                F22000MiscAssessmentData miscAssessmentData = new F22000MiscAssessmentData();
                miscAssessmentValue = terraScanService.F27000_GetMiscAssessment(madistrictId);
                miscAssessmentData.ReadXml(Utilities.SharedFunctions.XmlParser(miscAssessmentValue));
                return miscAssessmentData;
            }
            else
            {
                return Helper.F27000_GetMiscAssessment(madistrictId);
            }            
        }

        #endregion Get Misc Assessment Details

        #region List Misc Assessment District Type

        /// <summary>
        /// To List all the Misc Assessment District Types.
        /// </summary>
        /// <returns>Typed Dataset Containing the Misc Assessment District Types</returns>
        public static CommonData F27000_ListMADistrictType()
        {
            if (WSHelper.IsOnLineMode)
            {
                string commonDataValue;
                CommonData commonData = new CommonData();
                commonDataValue = terraScanService.F27000_ListMADistrictType();
                commonData.ReadXml(Utilities.SharedFunctions.XmlParser(commonDataValue));
                return commonData;
            }
            else
            {
                return Helper.F27000_ListMADistrictType();
            }
        }

        #endregion List Misc Assessment District Type

        #region List Misc Assessment District Item Type

        /// <summary>
        /// To List All Misc Assessment District Item Type
        /// </summary>
        /// <param name="madistrictTypeId">The Misc Assessment District type Id.</param>
        /// <returns>Typed Dataset Containg the All Misc Assessment Misc Assessment Item Types</returns>
        public static CommonData F27000_ListMADistrictItemType(int madistrictTypeId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string commonDataValue;
                CommonData commonData = new CommonData();
                commonDataValue = terraScanService.F27000_ListMADistrictItemType(madistrictTypeId);
                commonData.ReadXml(Utilities.SharedFunctions.XmlParser(commonDataValue));
                return commonData;
            }
            else
            {
                return Helper.F27000_ListMADistrictItemType(madistrictTypeId);
            }
        }

        #endregion List Misc Assessment District Item Type

        #region Save Misc Assessment Details

        /// <summary>
        /// To Save Misc Assessment Details
        /// </summary>
        /// <param name="distributionItems">distributionItems</param>
        /// <param name="subHeaderItems">subHeaderItems</param>
        /// <param name="userId">UserID</param>
        /// <returns>integer</returns>
        public static int F27000_SaveMADetails(string distributionItems, string subHeaderItems, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F27000_SaveMADetails(distributionItems, subHeaderItems, userId);
            }
            else
            {
                return Helper.F27000_SaveMADetails(distributionItems, subHeaderItems, userId);
            }
        }

        #endregion Save Misc Assessment Details

        #endregion F27000 Misc Assessment

        #region F15015 Statement Ownership

        #region List Statement Ownership

        /// <summary>
        /// To List Statement Ownership Details.
        /// </summary>
        /// <param name="statementId">The statement id.</param>
        /// <returns>Typed Dataset Containing the Statement Ownership Details</returns>
        public static F15015StatementOwnershipData F15015_ListStatementOwnership(int statementId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string statementOwnershipValue;
                F15015StatementOwnershipData statementOwnershipData = new F15015StatementOwnershipData();
                statementOwnershipValue = terraScanService.F15015_ListStatementOwnership(statementId);
                statementOwnershipData.ReadXml(Utilities.SharedFunctions.XmlParser(statementOwnershipValue));
                return statementOwnershipData;
            }
            else
            {
                return Helper.F15015_ListStatementOwnership(statementId);
            }
        }

        #endregion List Statement Ownership

        #region F15015 list MOwnerType Selection

        /// <summary>
        /// Lists the type of the M owner.
        /// </summary>
        /// <returns>Mowner Type List.</returns>
        public static F15015StatementOwnershipData F15015_ListMOwnerType()
        {
            if (WSHelper.IsOnLineMode)
            {
                string getMOwnerType;
                F15015StatementOwnershipData getMOwnerTypeData = new F15015StatementOwnershipData();
                getMOwnerType = terraScanService.F15015_ListMOwnerType();
                getMOwnerTypeData.ReadXml(Utilities.SharedFunctions.XmlParser(getMOwnerType));
                return getMOwnerTypeData;
            }
            else
            {
                return Helper.F15015_ListMOwnerType();
            }
        }

        #endregion

        #region Save Statement Ownership

        /// <summary>
        /// To Save Statement Ownership Details.
        /// </summary>
        /// <param name="statementId">The statement id.</param>
        /// <param name="statementOwner">The statement owner.</param>
        /// <param name="userId">UserID</param>
        public static void F15015_SaveStatementOwnership(int statementId, string statementOwner, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                terraScanService.F15015_SaveStatementOwnership(statementId, statementOwner, userId);
            }
            else
            {
                Helper.F15015_SaveStatementOwnership(statementId, statementOwner, userId);
            }
        }

        #endregion Save Statement Ownership


        #region List All Owner Details

        /// <summary>
        /// To List All Owners Details
        /// </summary>
        /// <param name="firstName">The First Name.</param>
        /// <param name="lastName">The Last Name.</param>
        /// <param name="address1">The address1.</param>
        /// <param name="address2">The address2.</param>
        /// <param name="city">The city.</param>
        /// <returns>Typed Dataset Containg the All Owners Details</returns>
        public static F15015StatementOwnershipData F15015_ListALLOwnerDetails(string firstName, string lastName, string address1, string address2, string city)
        {
            if (WSHelper.IsOnLineMode)
            {
                string allOwnerDetailsValue;
                F15015StatementOwnershipData parcelOwnershipData = new F15015StatementOwnershipData();
                allOwnerDetailsValue = terraScanService.F15015_ListALLOwnerDetails(firstName, lastName, address1, address2, city);
                parcelOwnershipData.ReadXml(Utilities.SharedFunctions.XmlParser(allOwnerDetailsValue));
                return parcelOwnershipData;
            }
            else
            {
                return Helper.F15015_ListALLOwnerDetails(firstName, lastName, address1, address2, city);
            }
        }

        #endregion List All Owner Details



        #endregion F15015 Statement Ownership

        #region F95101 Audit Trail

        /// <summary>
        /// To List Audit Trail records
        /// </summary>
        /// <param name="form">Form No</param>
        /// <param name="keyId">Key ID</param>
        /// <returns>Typed DataSet Containing the Audit Trail Details</returns>
        public static F95101AuditTrailData F95101_ListAuditTrail(int form, int keyId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string auditTrailTable;
                F95101AuditTrailData auditTrailTableData = new F95101AuditTrailData();
                auditTrailTable = terraScanService.F95101_ListAuditTrail(form, keyId);
                auditTrailTableData.ReadXml(Utilities.SharedFunctions.XmlParser(auditTrailTable));
                return auditTrailTableData;
            }
            else
            {
                return Helper.F95101_ListAuditTrail(form, keyId);
            }
        }

        #endregion F95101 Audit Trail

        #region F9060 Auditing Configuration

        #region List Auditing Tables

        /// <summary>
        /// To List Audit Table Configuration
        /// </summary>
        /// <param name="tableType">Table Type</param>
        /// <returns>The DataSet contains Audit Table List</returns>
        public static F9060AuditingConfigurationData F9060_ListAuditingTables(string tableType)
        {
            if (WSHelper.IsOnLineMode)
            {
                string auditConfigurationTable;
                F9060AuditingConfigurationData auditConfigurationTableData = new F9060AuditingConfigurationData();
                auditConfigurationTable = terraScanService.F9060_ListAuditingTables(tableType);
                auditConfigurationTableData.ReadXml(Utilities.SharedFunctions.XmlParser(auditConfigurationTable));
                return auditConfigurationTableData;
            }
            else
            {
                return Helper.F9060_ListAuditingTables(tableType);
            }
        }

        #endregion List Auditing Tables

        #region List Auditing Columns

        /// <summary>
        /// To List Audit Column Configuration
        /// </summary>
        /// <param name="tableName">Table Name</param>
        /// <returns>The DataSet contains Audit Column List</returns>
        public static F9060AuditingConfigurationData F9060_ListAuditingColumns(string tableName)
        {
            if (WSHelper.IsOnLineMode)
            {
                string auditConfigurationColumns;
                F9060AuditingConfigurationData auditConfigurationColumnData = new F9060AuditingConfigurationData();
                auditConfigurationColumns = terraScanService.F9060_ListAuditingColumns(tableName);
                auditConfigurationColumnData.ReadXml(Utilities.SharedFunctions.XmlParser(auditConfigurationColumns));
                return auditConfigurationColumnData;
            }
            else
            {
                return Helper.F9060_ListAuditingColumns(tableName);
            }
        }

        #endregion List Auditing Columns

        #region Save Audit Column Configuration

        /// <summary>
        /// To Save 9060 Audit Column Configuration
        /// </summary>
        /// <param name="tableName">Table Name</param>
        /// <param name="auditColumns">Audit Columns</param>
        /// <param name="userId">UserID</param>
        public static void F9060_SaveAuditConfiguration(string tableName, string auditColumns, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                terraScanService.F9060_SaveAuditConfiguration(tableName, auditColumns, userId);
            }
            else
            {
                Helper.F9060_SaveAuditConfiguration(tableName, auditColumns, userId);
            }
        }

        #endregion Save Audit Column Configuration

        #region Delete Audit Column Configuration

        /// <summary>
        /// To Delete Audit Column Configuration
        /// </summary>
        /// <param name="auditTableId">The audit table id.</param>
        /// <param name="userId">UserID</param>
        public static void F9060_DeleteAuditConfiguration(int auditTableId, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                terraScanService.F9060_DeleteAuditConfiguration(auditTableId, userId);
            }
            else
            {
                Helper.F9060_DeleteAuditConfiguration(auditTableId, userId);
            }
        }

        #endregion Delete Audit Column Configuration

        #endregion F9060 Auditing Configuration

        #region F36000 Marshal & Swift

        #region Get House Type Collection

        /// <summary>
        /// To Get Marshal and swift House Type collection.
        /// </summary>
        /// <param name="valueSliceId">The value slice id.</param>
        /// <returns>Typed DataSet containing Marshal and swift House Type collection details.</returns>
        public static F36000MarshalAndSwiftData F36000_GetHouseTypeCollection(int valueSliceId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string marshalAndSwiftValue;
                F36000MarshalAndSwiftData marshalAndSwiftData = new F36000MarshalAndSwiftData();
                marshalAndSwiftValue = terraScanService.F36000_GetHouseTypeCollection(valueSliceId);
                marshalAndSwiftData.ReadXml(Utilities.SharedFunctions.XmlParser(marshalAndSwiftValue));
                return marshalAndSwiftData;
            }
            else
            {
                return Helper.F36000_GetHouseTypeCollection(valueSliceId);
            }
        }

        #endregion Get House Type Collection

        #region Depreciation Percentage

        /// <summary>
        /// F36000_s the get depr percentage.
        /// </summary>
        /// <param name="age">The age.</param>
        /// <param name="objectCondition">The object condition.</param>
        /// <param name="deprTableId">The depr table id.</param>
        /// <returns>string</returns>
        public static string F36000_GetDeprPercentage(int age, decimal objectCondition, int deprTableId)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F36000_GetDeprPercentage(age, objectCondition, deprTableId);
            }
            else
            {
                return Helper.F36000_GetDeprPercentage(age, objectCondition, deprTableId);
            }
        }

        #endregion Depreciation Percentage

        #region Depr Save

        /// <summary>
        /// F36000_s the save depreciation details.
        /// </summary>
        /// <param name="depreciationXml">The depreciation XML.</param>
        /// <param name="valueSliceId">The value slice id.</param>
        /// <param name="userId">The user id.</param>
        /// <returns>int</returns>
        public static int F36000_SaveDepreciationDetails(string depreciationXml, int valueSliceId, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F36000_SaveDepreciationDetails(depreciationXml, valueSliceId, userId);
            }
            else
            {
                return Helper.F36000_SaveDepreciationDetails(depreciationXml, valueSliceId, userId);
            }
        }

        #endregion Depr Save

        #region Depr Table Name

        /// <summary>
        /// F36000_s the get depr table name id.
        /// </summary>
        /// <param name="valueSliceId">The value slice id.</param>
        /// <param name="propertyQuality">The property quality.</param>
        /// <returns>int</returns>
        public static int F36000_GetDeprTableNameId(int valueSliceId, int propertyQuality)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F36000_GetDeprTableNameId(valueSliceId, propertyQuality);
            }
            else
            {
                return Helper.F36000_GetDeprTableNameId(valueSliceId, propertyQuality);
            }
        }

        #endregion Depr Table Name

        #endregion F36000 Marshal & Swift

        #region F25011 Street List Management

        #region Get the Master Street Data

        /// <summary>
        /// Get the Master Street data.
        /// </summary>
        /// <param name="streetId">The street id.</param>
        /// <returns>
        /// Typed DataSet Containing the Master Street data
        /// </returns>
        public static F25011StreetListManagementData F25011_GetMasterStreetList(int streetId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string streetManagementValue;
                F25011StreetListManagementData streetManagementData = new F25011StreetListManagementData();
                streetManagementValue = terraScanService.F25011_GetMasterStreetList(streetId);
                streetManagementData.ReadXml(Utilities.SharedFunctions.XmlParser(streetManagementValue));
                return streetManagementData;
            }
            else
            {
                return Helper.F25011_GetMasterStreetList(streetId);
            }
        }

        #endregion Get the Master Street Data

        #region List Master Street List

        /// <summary>
        /// F25011_s the list master street list.
        /// </summary>
        /// <param name="streetID">The street ID.</param>
        /// <param name="streetName">Name of the street.</param>
        /// <param name="city">The city.</param>
        /// <returns></returns>
        public static F25011StreetListManagementData F25011_ListMasterStreetList(int streetID, string streetName, string city)
        {
            if (WSHelper.IsOnLineMode)
            {
                string streetListManagementValue;
                F25011StreetListManagementData streetListManagementData = new F25011StreetListManagementData();
                streetListManagementValue = terraScanService.F25011_ListMasterStreetList(streetID, streetName, city);
                streetListManagementData.ReadXml(Utilities.SharedFunctions.XmlParser(streetListManagementValue));
                return streetListManagementData;
            }
            else
            {
                return Helper.F25011_ListMasterStreetList(streetID, streetName, city);
            }
        }

        #endregion List Master Street List

        #region List Street City Directional Suffix

        /// <summary>
        /// To List Street City Directional Suffix Details.
        /// </summary>
        /// <returns>Typed Dataset conitaining the Street's City, Directional and Suffixs details</returns>
        public static F25011StreetListManagementData F25011_ListStreetCityDirectionalSuffixDetails()
        {
            if (WSHelper.IsOnLineMode)
            {
                string streetListManagementValue;
                F25011StreetListManagementData streetListManagementData = new F25011StreetListManagementData();
                streetListManagementValue = terraScanService.F25011_ListStreetCityDirectionalSuffixDetails();
                streetListManagementData.ReadXml(Utilities.SharedFunctions.XmlParser(streetListManagementValue));
                return streetListManagementData;
            }
            else
            {
                return Helper.F25011_ListStreetCityDirectionalSuffixDetails();
            }
        }

        #endregion List Street City Directional Suffix

        #region Save Street List Management

        /// <summary>
        /// To Save Street List Management Details.
        /// </summary>
        /// <param name="streetId">The street id.</param>
        /// <param name="streetListMgmt">The street list MGMT.</param>
        /// <param name="userId">UserID</param>
        /// <returns>The current Saved streetId</returns>
        public static int F25011_SaveStreetListManagement(int streetId, string streetListMgmt, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F25011_SaveStreetListManagement(streetId, streetListMgmt, userId);
            }
            else
            {
                return Helper.F25011_SaveStreetListManagement(streetId, streetListMgmt, userId);
            }
        }

        #endregion Save Street List Management

        #region DeleteInstrumentHeaderDetails

        /// <summary>
        /// F25011_s the delete street list.
        /// </summary>
        /// <param name="streetId">The street id.</param>
        /// <param name="userId">The user id.</param>
        /// <returns>Deleted Flag</returns>
        public static int F25011_DeleteStreetList(int streetId, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F25011_DeleteStreetList(streetId, userId);
            }
            else
            {
                return Helper.F25011_DeleteStreetList(streetId, userId);
            }
        }

        #endregion DeleteInstrumentHeaderDetails
        #endregion F25011 Street List Management

        #region F2000 Parcel Status

        #region F2000 List ParcelStatus

        /// <summary>
        /// To get parcel status
        /// </summary>
        /// <param name="parcelId">parcelId</param>
        /// <returns>Type DataSet Contains Parcel Status Details.</returns>
        public static F2000ParcelStatusData.ListParcelStatusDataTableDataTable F2000_ListParcelStatus(int parcelId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string parcelStatusValue;
                F2000ParcelStatusData parcelStatusData = new F2000ParcelStatusData();
                parcelStatusValue = terraScanService.F2000_ListParcelStatus(parcelId);
                parcelStatusData.ReadXml(Utilities.SharedFunctions.XmlParser(parcelStatusValue));
                return parcelStatusData.ListParcelStatusDataTable;
            }
            else
            {
                F2000ParcelStatusData parcelStatusData = new F2000ParcelStatusData();
                parcelStatusData = Helper.F2000_ListParcelStatus(parcelId);
                return parcelStatusData.ListParcelStatusDataTable;
            }
        }

        #endregion

        
        #region F2000 Update Parcel Status

        /// <summary>
        /// To Update Parcel status
        /// </summary>
        /// <param name="parcelId">parcelId</param>
        /// <param name="description">description</param>
        /// <param name="parcelType">Parcel Type</param>
        /// <param name="isexempt">isExempt</param>
        /// <param name="isownerPrimary">isOwnerPrimary</param>
        /// <param name="userId">UserID</param>
        /// <returns>Returns Primary Key ID</returns>
        public static int F2000_UpdateParcelStatus(int parcelId, string description, string parcelType, int isexempt, int isownerPrimary, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F2000_UpdateParcelStatus(parcelId, description, parcelType, isexempt, isownerPrimary, userId);
            }
            else
            {
                return Helper.F2000_UpdateParcelStatus(parcelId, description, parcelType, isexempt, isownerPrimary, userId);
            }
        }

        #endregion

        #region F2000 Delete Parce Status

        /// <summary>
        /// To Delete Parcel status
        /// </summary>
        /// <param name="parcelId">parcelId</param>
        /// <param name="userId">UserID</param>
        public static void F2000_DeleteParcelStatus(int parcelId, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                terraScanService.F2000_DeleteParcelStatus(parcelId, userId);
            }
            else
            {
                Helper.F2000_DeleteParcelStatus(parcelId, userId);
            }
        }

        #endregion

        #region ListRecordLockStatus

        public static string ListRecordLockStatus(int formNo, int keyId)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.ListRecordLockStatus(formNo, keyId);
            }
            else
            {
                return Helper.ListRecordLockStatus(formNo, keyId);
            }
        }

        #endregion

        #endregion

        public static F25090FieldSummaryData F25090_FieldSummary(int keyId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string FieldSummaryValue;
                F25090FieldSummaryData FieldSummaryData = new F25090FieldSummaryData();
                FieldSummaryValue = terraScanService.F25090_FieldSummary(keyId);
                FieldSummaryData.ReadXml(Utilities.SharedFunctions.XmlParser(FieldSummaryValue));
                return FieldSummaryData;
            }
            else
            {
                F25090FieldSummaryData FieldSummaryData = new F25090FieldSummaryData();
                FieldSummaryData = Helper.F25090_FieldSummary(keyId);
                return FieldSummaryData;
            }
        }

        public static F25090FieldSummaryData F25090_GetAncestryData(int keyId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string GetAncestryValue;
                F25090FieldSummaryData GetAncestryData = new F25090FieldSummaryData();
                GetAncestryValue = terraScanService.F25090_GetAncestryData(keyId);
                GetAncestryData.ReadXml(Utilities.SharedFunctions.XmlParser(GetAncestryValue));
                return GetAncestryData;
            }
            else
            {
                F25090FieldSummaryData GetAncestryData = new F25090FieldSummaryData();
                GetAncestryData = Helper.F25090_GetAncestryData(keyId);
                return GetAncestryData;
            }
        }

        public static F25090FieldSummaryData F25090_GetCorrection(int keyId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string GetCorrectionValue;
                F25090FieldSummaryData GetCorrectionData = new F25090FieldSummaryData();
                GetCorrectionValue = terraScanService.F25090_GetCorrection(keyId);
                GetCorrectionData.ReadXml(Utilities.SharedFunctions.XmlParser(GetCorrectionValue));
                return GetCorrectionData;
            }
            else
            {
                F25090FieldSummaryData GetCorrectionData = new F25090FieldSummaryData();
                GetCorrectionData = Helper.F25090_GetCorrection(keyId);
                return GetCorrectionData;
            }
        }

        public static F25090FieldSummaryData F25090_GetHistoryData(int keyId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string GetHistoryValue;
                F25090FieldSummaryData GetHistoryData = new F25090FieldSummaryData();
                GetHistoryValue = terraScanService.F25090_GetHistoryData(keyId);
                GetHistoryData.ReadXml(Utilities.SharedFunctions.XmlParser(GetHistoryValue));
                return GetHistoryData;
            }
            else
            {
                F25090FieldSummaryData GetHistoryData = new F25090FieldSummaryData();
                GetHistoryData = Helper.F25090_GetHistoryData(keyId);
                return GetHistoryData;
            }
        }

        public static F25090FieldSummaryData F25090_GetParcelOwnerShip(int keyId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string GetParcelOwnerShipValue;
                F25090FieldSummaryData GetParcelOwnerShipData = new F25090FieldSummaryData();
                GetParcelOwnerShipValue = terraScanService.F25090_GetParcelOwnerShip(keyId);
                GetParcelOwnerShipData.ReadXml(Utilities.SharedFunctions.XmlParser(GetParcelOwnerShipValue));
                return GetParcelOwnerShipData;
            }
            else
            {
                F25090FieldSummaryData GetParcelOwnerShipData = new F25090FieldSummaryData();
                GetParcelOwnerShipData = Helper.F25090_GetParcelOwnerShip(keyId);
                return GetParcelOwnerShipData;
            }
        }

        public static F25090FieldSummaryData F25090_ParcelSale(int keyId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string ParcelSaleValue;
                F25090FieldSummaryData GParcelSaleData = new F25090FieldSummaryData();
                ParcelSaleValue = terraScanService.F25090_ParcelSale(keyId);
                GParcelSaleData.ReadXml(Utilities.SharedFunctions.XmlParser(ParcelSaleValue));
                return GParcelSaleData;
            }
            else
            {
                F25090FieldSummaryData GParcelSaleData = new F25090FieldSummaryData();
                GParcelSaleData = Helper.F25090_ParcelSale(keyId);
                return GParcelSaleData;
            }
        }

        public static F25090FieldSummaryData F25090_BuildingPermits(int keyId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string BuildingPermitsValue;
                F25090FieldSummaryData BuildingPermitsData = new F25090FieldSummaryData();
                BuildingPermitsValue = terraScanService.F25090_BuildingPermits(keyId);
                BuildingPermitsData.ReadXml(Utilities.SharedFunctions.XmlParser(BuildingPermitsValue));
                return BuildingPermitsData;
            }
            else
            {
                F25090FieldSummaryData BuildingPermitsData = new F25090FieldSummaryData();
                BuildingPermitsData = Helper.F25090_BuildingPermits(keyId);
                return BuildingPermitsData;
            }
        }

        public static F25090FieldSummaryData F25090_GetPhotos(int keyId, int form)
        {
            if (WSHelper.IsOnLineMode)
            {
                string GetPhotosValue;
                F25090FieldSummaryData GetPhotosData = new F25090FieldSummaryData();
                GetPhotosValue = terraScanService.F25090_GetPhotos(keyId, form);
                GetPhotosData.ReadXml(Utilities.SharedFunctions.XmlParser(GetPhotosValue));
                return GetPhotosData;
            }
            else
            {
                F25090FieldSummaryData GetPhotosData = new F25090FieldSummaryData();
                GetPhotosData = Helper.F25090_GetPhotos(keyId, form);
                return GetPhotosData;
            }
        }

        #region F25009 Legal Management


        #region Get Legal Management

        /// <summary>
        ///  To Load F25009 Legal Management.
        /// </summary>
        /// <param name="parcelId">The Parcel ID.</param>
        /// <param name="userId">UserID</param>
        /// <returns>Typed DataSet Containing All the Legal Management Details</returns>
        public static F25009LegalManagementData F25009_GetLegalManagement(int parcelId, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string legalManagementValue;
                F25009LegalManagementData legalManagementData = new F25009LegalManagementData();
                legalManagementValue = terraScanService.F25009_GetLegalManagement(parcelId, userId);
                legalManagementData.ReadXml(Utilities.SharedFunctions.XmlParser(legalManagementValue));
                return legalManagementData;
            }
            else
            {
                F25009LegalManagementData legalManagementData = new F25009LegalManagementData();
                legalManagementData = Helper.F25009_GetLegalManagement(parcelId, userId);
                return legalManagementData;
            }
        }

        #endregion

        #region Save Legal Management

        /// <summary>
        /// To Save F25009 Legal Management.
        /// </summary>
        /// <param name="legalId">The Legal ID.</param>
        /// <param name="legalItems">The XML string Containing All values in Legal Management.</param>
        /// <param name="userId">UserID</param>
        /// <returns>The integer value containing Parcel id</returns>
        public static int F25009_SaveLegalManagement(int legalId, string legalItems, bool isFuturePush, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F25009_SaveLegalManagement(legalId, legalItems, isFuturePush, userId);
            }
            else
            {
                return Helper.F25009_SaveLegalManagement(legalId, legalItems, isFuturePush, userId);
            }
        }
        #endregion

        #region List Subdivision

        /// <summary>
        ///  To Load F25009 Subdivision.
        /// </summary>        
        /// <returns>Typed DataSet Containing All the Subdivision Details</returns>
        public static F25009LegalManagementData F25009_ListSubdivision()
        {
            if (WSHelper.IsOnLineMode)
            {
                string subdivisionValue;
                F25009LegalManagementData legalManagementData = new F25009LegalManagementData();
                subdivisionValue = terraScanService.F25009_ListSubdivision();
                legalManagementData.ReadXml(Utilities.SharedFunctions.XmlParser(subdivisionValue));
                return legalManagementData;
            }
            else
            {
                F25009LegalManagementData legalManagementData = new F25009LegalManagementData();
                legalManagementData = Helper.F25009_ListSubdivision();
                return legalManagementData;
            }
        }

        #endregion

        #endregion

        #region F15110 Receipt Actions

        #region Get Receipt Actions Details

        /// <summary>
        /// To Get Receipt Actions.
        /// </summary>
        /// <param name="receiptId">The receipt id.</param>
        /// <returns>Typed Dataset containing the Receipt Actions details</returns>
        public static F15110ReceiptActionsData F15110_GetReceiptActions(int receiptId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string receiptActionsDataValue;
                F15110ReceiptActionsData receiptActionsData = new F15110ReceiptActionsData();
                receiptActionsDataValue = terraScanService.F15110_GetReceiptActions(receiptId);
                receiptActionsData.ReadXml(Utilities.SharedFunctions.XmlParser(receiptActionsDataValue));
                return receiptActionsData;
            }
            else
            {
                return Helper.F15110_GetReceiptActions(receiptId);
            }
        }
        /// <summary>
        /// F1557_s the insert refund interest.
        /// </summary>
        /// <param name="receiptID">The receipt ID.</param>
        /// <param name="userID">The user ID.</param>
        public static void F1557_InsertRefundInterest(int receiptID, int userID)
        {
            if (WSHelper.IsOnLineMode)
            {
                terraScanService.F1557_InsertRefundInterest(receiptID, userID);
            }
            else
            {
                Helper.F1557_InsertRefundInterest(receiptID, userID);
            }

        }
        #endregion Get Receipt Actions Details

        #endregion F15110 Receipt Actions

        #region F25003 Situs Management

        #region List Situs Management Details

        /// <summary>
        /// To List Situs Mangement Details.
        /// </summary>
        /// <param name="parcelId">The parcel id.</param>
        /// <param name="situsId">The situs id.</param>
        /// <returns>Typed Dataset containing the Situs Mangement Details</returns>
        public static F25003SitusManagementData F25003_ListSitusMangement(int parcelId, int situsId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string situsManagementDataValue;
                F25003SitusManagementData situsManagementData = new F25003SitusManagementData();
                situsManagementDataValue = terraScanService.F25003_ListSitusMangement(parcelId, situsId);
                situsManagementData.ReadXml(Utilities.SharedFunctions.XmlParser(situsManagementDataValue));
                return situsManagementData;
            }
            else
            {
                return Helper.F25003_ListSitusMangement(parcelId, situsId);
            }
        }

        #endregion List Situs Management Details

        #region List Street Details

        /// <summary>
        /// To List Street Details.
        /// </summary>
        /// <returns>Typed Dataset containing the Street Details</returns>
        public static F25003SitusManagementData F25003_ListStreet()
        {
            if (WSHelper.IsOnLineMode)
            {
                string situsManagementDataValue;
                F25003SitusManagementData situsManagementData = new F25003SitusManagementData();
                situsManagementDataValue = terraScanService.F25003_ListStreet();
                situsManagementData.ReadXml(Utilities.SharedFunctions.XmlParser(situsManagementDataValue));
                return situsManagementData;
            }
            else
            {
                return Helper.F25003_ListStreet();
            }
        }

        #endregion List Street Details

        #region List Unit Type Details

        /// <summary>
        /// To list Unit Type Details.
        /// </summary>
        /// <returns>Typed DataSet containing the Unit Type Details</returns>
        public static F25003SitusManagementData F25003_ListUnitType()
        {
            if (WSHelper.IsOnLineMode)
            {
                string situsManagementDataValue;
                F25003SitusManagementData situsManagementData = new F25003SitusManagementData();
                situsManagementDataValue = terraScanService.F25003_ListUnitType();
                situsManagementData.ReadXml(Utilities.SharedFunctions.XmlParser(situsManagementDataValue));
                return situsManagementData;
            }
            else
            {
                return Helper.F25003_ListUnitType();
            }
        }

        #endregion List Unit Type Details

        #region Save Situs Management

        /// <summary>
        /// To Save List Mangement Details.
        /// </summary>
        /// <param name="situsId">The situs id.</param>
        /// <param name="situsItems">The situs items.</param>
        /// <param name="userId">UserID</param>
        /// <returns>Intger value containing the new SitusID</returns>
        public static int F25003_SaveListMangement(int situsId, string situsItems, bool isFuturePush, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F25003_SaveListMangement(situsId, situsItems, isFuturePush, userId);
            }
            else
            {
                return Helper.F25003_SaveListMangement(situsId, situsItems, isFuturePush, userId);
            }
        }

        #endregion Save Situs Management

        #region Delete Situs Management

        /// <summary>
        /// To Delete the Situs management
        /// </summary>
        /// <param name="situsId">situsId</param>
        /// <param name="userId">UserID</param>
        public static void F25003_DeleteSitusManagement(int situsId, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                terraScanService.F25003_DeleteSitusManagement(situsId, userId);
            }
            else
            {
                Helper.F25003_DeleteSitusManagement(situsId, userId);
            }
        }

        #endregion Delete Situs Management

        #endregion F25003 Situs Management

        #region F1555 Receipt Details

        #region Get Receipt Details

        /// <summary>
        /// F1555_s the get receipt details.
        /// </summary>
        /// <param name="receiptId">The receipt id.</param>
        /// <returns>Typed Dataset containing the Receipt details</returns>
        public static F1555_ReceiptDetailsData F1555_GetReceiptDetails(int receiptId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string receiptDetailsDataValue;
                F1555_ReceiptDetailsData receiptDetailsData = new F1555_ReceiptDetailsData();
                receiptDetailsDataValue = terraScanService.F1555_GetReceiptDetails(receiptId);
                receiptDetailsData.ReadXml(Utilities.SharedFunctions.XmlParser(receiptDetailsDataValue));
                return receiptDetailsData;
            }
            else
            {
                return Helper.F1555_GetReceiptDetails(receiptId);
            }
        }

        #endregion Get Receipt Actions Details

        #region Reverse Receipt Details

        /// <summary>
        /// Reverse receipt details
        /// </summary>
        /// <param name="receiptId">Receipt ID</param>
        /// <param name="sharedPaymentId">Shared Payment Id</param>
        /// <param name="userId">User ID</param>
        /// <returns>Reverse Payment Details</returns>
        public static F1555_ReceiptDetailsData F1556_ReverseReceiptDetails(int receiptId, int sharedPaymentId, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string receiptDetailsDataValue;
                F1555_ReceiptDetailsData receiptDetailsData = new F1555_ReceiptDetailsData();
                receiptDetailsDataValue = terraScanService.F1556_ReverseReceiptDetails(receiptId, sharedPaymentId, userId);
                receiptDetailsData.ReadXml(Utilities.SharedFunctions.XmlParser(receiptDetailsDataValue));
                return receiptDetailsData;
            }
            else
            {
                return Helper.F1556_ReverseReceiptDetails(receiptId, sharedPaymentId, userId);
            }
        }

        #endregion Reverse Receipt Details

        #endregion F1555 Receipt Actions

        #region F1060 Suspended Payment Selection

        #region F1060 List Suspended Payment

        /// <summary>
        /// To List Suspended Payment.
        /// </summary>
        /// <param name="SEARCH XML">Search Detail.</param>
        /// <returns>Typed DataSet containing the Suspended Payment Details.</returns>
        public static F1060SudpendedPaymentSelectionData F1060_ListSuspendedPayment(string searchDetail)
        {
            if (WSHelper.IsOnLineMode)
            {
                string suspendedPaymentSelectionValue;
                F1060SudpendedPaymentSelectionData suspendedPaymentSelectionData = new F1060SudpendedPaymentSelectionData();
                suspendedPaymentSelectionValue = terraScanService.F1060_ListSuspendedPayment(searchDetail);
                suspendedPaymentSelectionData.ReadXml(Utilities.SharedFunctions.XmlParser(suspendedPaymentSelectionValue));
                return suspendedPaymentSelectionData;
            }
            else
            {
                return Helper.F1060_ListSuspendedPayment(searchDetail);
            }
        }

        #endregion F1060 List Suspended Payment

        #endregion F1060 Suspended Payment Selection

        #region SnapShotUtility

        #region F9040_ListBatchButtonSnapShots

        /// <summary>
        /// To List the F1440 Batch Button SnapShots for Current form slice.
        /// </summary>
        /// <param name="formsSliceNo">The forms slice no.</param>
        /// <returns>Typed DataSet containg the list of F1440 Batch Button SnapShots for Current form slice</returns>
        public static F9040SnapShotUtilityData F9040_ListBatchButtonSnapShots(int formsSliceNo)
        {
            if (WSHelper.IsOnLineMode)
            {
                string snapShotUtilityValue;
                F9040SnapShotUtilityData snapShotUtilityData = new F9040SnapShotUtilityData();
                snapShotUtilityValue = terraScanService.F9040_ListBatchButtonSnapShots(formsSliceNo);
                snapShotUtilityData.ReadXml(Utilities.SharedFunctions.XmlParser(snapShotUtilityValue));
                return snapShotUtilityData;
            }
            else
            {
                return Helper.F9040_ListBatchButtonSnapShots(formsSliceNo);
            }
        }

        #endregion F9040_ListBatchButtonSnapShots

        #region F9040_SaveBatchButtonSnapShots

        /// <summary>
        /// To save the F1440 Batch Button SnapShots for Current form slice.
        /// </summary>
        /// <param name="snapShotId">The snap shot id.</param>
        /// <param name="snapShotDetails">The snap shot details.</param>
        /// <param name="userId">The user id.</param>
        /// <returns>returns the snapshot id</returns>
        public static int F9040_SaveBatchButtonSnapShots(int snapShotId, string snapShotDetails, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F9040_SaveBatchButtonSnapShots(snapShotId, snapShotDetails, userId);
            }
            else
            {
                return Helper.F9040_SaveBatchButtonSnapShots(snapShotId, snapShotDetails, userId);
            }
        }

        #endregion F9040_SaveBatchButtonSnapShots

        #region ListSnapShots

        /// <summary>
        /// Lists the SnapShots for the form.
        /// </summary>
        /// <param name="formId">The form id.</param>
        /// <returns>F9040SnapShotUtilityData Dataset</returns>
        public static F9040SnapShotUtilityData F9040_ListSnapShots(int formId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string snapShotUtilityValue;
                F9040SnapShotUtilityData snapShotUtilityData = new F9040SnapShotUtilityData();
                snapShotUtilityValue = terraScanService.F9040_ListSnapShots(formId);
                snapShotUtilityData.ReadXml(Utilities.SharedFunctions.XmlParser(snapShotUtilityValue));
                return snapShotUtilityData;
            }
            else
            {
                return Helper.F9040_ListSnapShots(formId);
            }
        }

        #endregion ListSnapShot

        #region SaveSnapShot

        /// <summary>
        /// F9040_s the save snap shot.
        /// </summary>
        /// <param name="snapShotId">The snap shot id.</param>
        /// <param name="snapShotxml">The snap shotxml.</param>
        /// <param name="snapshotItemsxml">The snapshot itemsxml.</param>
        /// <param name="filterXML">The Filter XML</param>
        /// <param name="pinType">Pinning Type</param>
        /// <param name="userId">UserID</param>
        /// <param name="parentSnapShotID">Parent SnapShotID</param>
        /// <returns>the saved snapshotid</returns>
        public static int F9040_SaveSnapShot(int snapShotId, string snapShotxml, string snapshotItemsxml, string filterXML, string pinType, int userId, int parentSnapShotID)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F9040_SaveSnapShot(snapShotId, snapShotxml, snapshotItemsxml, filterXML, pinType, userId, parentSnapShotID);
            }
            else
            {
                return Helper.F9040_SaveSnapShot(snapShotId, snapShotxml, snapshotItemsxml, filterXML, pinType, userId, parentSnapShotID);
            }
        }

        #endregion SaveSnapShot

        #region DeleteSnapShot

        /// <summary>
        /// To Delete F040 Snapshot
        /// </summary>
        /// <param name="snapshotId">The snapshotId</param>
        /// <param name="userId">UserID</param>
        public static void F9040_DeleteSnapShot(int snapshotId, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                terraScanService.F9040_DeleteSnapShot(snapshotId, userId);
            }
            else
            {
                Helper.F9040_DeleteSnapShot(snapshotId, userId);
            }
        }

        #endregion DeleteSnapShot

        #endregion SnapShotUtility

        #region F9070Report Listing

        /// <summary>
        /// F9070s the get report listing details.
        /// </summary>
        /// <param name="userId">The user id.</param>
        /// <returns>form9070ReportListingData</returns>
        public static F9070ReportListingData F9070GetReportListingDetails(int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string form9070GetReportListingDetails;
                F9070ReportListingData form9070ReportListingData = new F9070ReportListingData();
                form9070GetReportListingDetails = terraScanService.F9070_GetReportListingDetails(userId);
                form9070ReportListingData.ReadXml(Utilities.SharedFunctions.XmlParser(form9070GetReportListingDetails));
                return form9070ReportListingData;
            }
            else
            {
                return Helper.F9070GetReportListingDetails(userId);
            }
        }

        #endregion #region F9070Report Listing

        #region F25008 Parcel Miscellaneous

        #region Get Parcel Miscellaneous

        /// <summary>
        /// Get ParcelMiscellaneous Data
        /// </summary>
        /// <param name="parcelId">parcelId</param>
        /// <returns>ParcelMiscellaneous Data</returns>
        public static F25008ParcelMiscellaneousData F25008_ParcelMiscellaneousData(int parcelId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string parcelMiscellaneousValue;
                F25008ParcelMiscellaneousData parcelMiscellaneousData = new F25008ParcelMiscellaneousData();
                parcelMiscellaneousValue = terraScanService.F25008_ParcelMiscellaneousData(parcelId);
                parcelMiscellaneousData.ReadXml(Utilities.SharedFunctions.XmlParser(parcelMiscellaneousValue));
                return parcelMiscellaneousData;
            }
            else
            {
                return Helper.F25008_ParcelMiscellaneousData(parcelId);
            }
        }

        #endregion Get Parcel Miscellaneous

        #region Get Parcel Miscellaneous Configuration

        /// <summary>
        /// ParcelMiscellaneous Configuration Data
        /// </summary>
        /// <returns>ParcelMiscellaneous Configuration</returns>
        public static F25008ParcelMiscellaneousData F25008_ParcelMiscellaneousConfigData()
        {
            if (WSHelper.IsOnLineMode)
            {
                string parcelMiscellaneousConfigValue;
                F25008ParcelMiscellaneousData parcelMiscellaneousConfigData = new F25008ParcelMiscellaneousData();
                parcelMiscellaneousConfigValue = terraScanService.F25008_ParcelMiscellaneousConfigData();
                parcelMiscellaneousConfigData.ReadXml(Utilities.SharedFunctions.XmlParser(parcelMiscellaneousConfigValue));
                return parcelMiscellaneousConfigData;
            }
            else
            {
                return Helper.F25008_ParcelMiscellaneousConfigData();
            }
        }

        #endregion Get Parcel Miscellaneous Configuration

        #region Save Parcel Miscellaneous

        /// <summary>
        /// Save ParcelMiscellaneous Data
        /// </summary>
        /// <param name="parcelId">The parcel id.</param>
        /// <param name="miscellaneous">miscellaneous</param>
        /// <param name="userId">UserID</param>
        public static void F25008_SaveParcelMiscellaneous(int parcelId, string miscellaneous, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                terraScanService.F25008_SaveParcelMiscellaneous(parcelId, miscellaneous, userId);
            }
            else
            {
                Helper.F25008_SaveParcelMiscellaneous(parcelId, miscellaneous, userId);
            }
        }

        #endregion Save Parcel Miscellaneous

        #endregion F25008 Parcel Miscellaneous

        #region F35101 Neighborhood Group Header

        #region Get Neighborhood Group Header

        /// <summary>
        ///  To Load F35101 Neighborhood Group Header.
        /// </summary>
        /// <param name="nbhdGroupId">The Neighborhood Group Header ID.</param>
        /// <returns>Typed DataSet Containing All the Neighborhood Group Header Details</returns>
        public static F35101NeighborhoodGroupHeaderData F35101_GetNeighborhoodGroupHeader(int nbhdGroupId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string neighborhoodGroupHeaderValue;
                F35101NeighborhoodGroupHeaderData neighborhoodGroupHeaderData = new F35101NeighborhoodGroupHeaderData();
                neighborhoodGroupHeaderValue = terraScanService.F35101_GetNeighborhoodGroupHeader(nbhdGroupId);
                neighborhoodGroupHeaderData.ReadXml(Utilities.SharedFunctions.XmlParser(neighborhoodGroupHeaderValue));
                return neighborhoodGroupHeaderData;
            }
            else
            {
                return Helper.F35101_GetNeighborhoodGroupHeader(nbhdGroupId);
            }
        }

        #endregion

        #region Save Neighborhood Group Header

        /// <summary>
        /// To Save F35101 Neighborhood Group Header.
        /// </summary>
        /// <param name="nbhdGroupId">The Neighborhood Group Header ID.</param>
        /// <param name="neighborhoodGroupHeader">The XML string Containing All values in Neighborhood Group Header.</param>
        /// <param name="userId">UserID</param>
        /// <returns>The integer value containing Neighborhood Group Header id</returns>
        public static int F35101_SaveNeighborhoodGroupHeader(int nbhdGroupId, string neighborhoodGroupHeader, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F35101_SaveNeighborhoodGroupHeader(nbhdGroupId, neighborhoodGroupHeader, userId);
            }
            else
            {
                return Helper.F35101_SaveNeighborhoodGroupHeader(nbhdGroupId, neighborhoodGroupHeader, userId);
            }
        }

        #endregion

        #region Delete Neighborhood Group Header

        /// <summary>
        ///  To Delete F35101 Neighborhood Group Header.
        /// </summary>
        /// <param name="nbhdGroupId">The Neighborhood Group ID.</param>
        /// <param name="userId">UserID</param>
        public static void F35101_DeleteNeighborhoodGroupHeader(int nbhdGroupId, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                terraScanService.F35101_DeleteNeighborhoodGroupHeader(nbhdGroupId, userId);
            }
            else
            {
                Helper.F35101_DeleteNeighborhoodGroupHeader(nbhdGroupId, userId);
            }
        }

        #endregion

        #region Copy Neighborhood Details
        /// <summary>
        /// To Copy F35101 Neighborhood Group Header.
        /// </summary>
        /// <param name="nbhdGroupId">The Neighborhood Group Header ID.</param>
        /// <param name="neighborhoodGroupHeader">The XML string Containing All values in Neighborhood Group Header.</param>
        /// <param name="userId">UserID</param>
        /// <returns>The integer value containing Neighborhood Group Header id</returns>
        public static int F3511_ExeNeighborhoodDetails(int nbhdGroupId, string neighborhoodName, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F3511_ExeNeighborhoodDetails(nbhdGroupId, neighborhoodName, userId);
            }
            else
            {
                return Helper.F3511_ExeNeighborhoodDetails(nbhdGroupId, neighborhoodName, userId);
            }
        }

        #endregion
        #endregion F35101 Neighborhood Group Header


        #region F3040 Zoning

        #region F3040 Get Zoning

        /// <summary>
        /// Used to Get the Zoning Details
        /// </summary>
        /// <returns>Gets Typed DataSet containing the Zoning Details.</returns>
        public static F3040ZoningData F3040_GetZoningDetails()
        {
            if (WSHelper.IsOnLineMode)
            {
                string zoningDetailsValues;
                F3040ZoningData zoningDetailsData = new F3040ZoningData();
                zoningDetailsValues = terraScanService.F3040_GetZoningDetails();
                zoningDetailsData.ReadXml(Utilities.SharedFunctions.XmlParser(zoningDetailsValues));
                return zoningDetailsData;
            }
            else
            {
                return Helper.F3040_GetZoningDetails();
            }
        }

        #endregion F3040 Get Zoning

        #region F3040 Save Zoning

        /// <summary>
        /// Used to Save the Zoning Details
        /// </summary>
        /// <param name="zoningDetails">The zoning details.</param>
        /// <param name="userId">UserID</param>
        /// <returns>Typed DataSet containing the Zoning Details to Save.</returns>
        public static int F3040_SaveZoningDetails(string zoningDetails, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F3040_SaveZoningDetails(zoningDetails, userId);
            }
            else
            {
                return Helper.F3040_SaveZoningDetails(zoningDetails, userId);
            }
        }

        #endregion F3040 Save Zoning

        #endregion F3040 Zoning

        #region F15035 Suspended Payments

        /// <summary>
        /// F15035s the suspended payments.
        /// </summary>
        /// <param name="receiptId">The receipt id.</param>
        /// <returns>typed dataset containing the suspended payment details</returns>
        public static F15035SuspendedPaymentsData F15035SuspendedPayments(int receiptId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string suspendedPaymentsValue;
                F15035SuspendedPaymentsData suspendedPaymentsData = new F15035SuspendedPaymentsData();
                suspendedPaymentsValue = terraScanService.F15035SuspendedPayments(receiptId);
                suspendedPaymentsData.ReadXml(Utilities.SharedFunctions.XmlParser(suspendedPaymentsValue));
                return suspendedPaymentsData;
            }
            else
            {
                return Helper.F15035SuspendedPayments(receiptId);
            }
        }

        /// <summary>
        /// F15035_s the delete suspended payment.
        /// </summary>
        /// <param name="receiptId">The receipt id.</param>
        /// <param name="userId">UserID</param>
        public static void F15035_DeleteSuspendedPayment(int receiptId, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                terraScanService.F15035_DeleteSuspendedPayment(receiptId, userId);
            }
            else
            {
                Helper.F15035_DeleteSuspendedPayment(receiptId, userId);
            }
        }

        /// <summary>
        /// F15035_s the check suspended accounts.
        /// </summary>
        /// <returns>status id</returns>
        public static int F15035_CheckSuspendedAccounts()
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F15035_CheckSuspendedAccounts();
            }
            else
            {
                return Helper.F15035_CheckSuspendedAccounts();
            }
        }

        #endregion F15035 Suspended Payments

        #region F8062 Components Configuration

        #region List Components Configuration

        /// <summary>
        /// F8062_s the list components configuration.
        /// </summary>
        /// <param name="applicationId">The application id.</param>
        /// <returns>typed dataset containing the component configuration details</returns>
        public static F8062ComponentsConfigData F8062_ListComponentsConfiguration(int applicationId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string componentsConfigValue;
                F8062ComponentsConfigData componentsConfigData = new F8062ComponentsConfigData();
                componentsConfigValue = terraScanService.F8062_ListComponentsConfiguration(applicationId);
                componentsConfigData.ReadXml(Utilities.SharedFunctions.XmlParser(componentsConfigValue));
                return componentsConfigData;
            }
            else
            {
                return Helper.F8062_ListComponentsConfiguration(applicationId);
            }
        }

        #endregion List Components Configuration

        #region List Feature Class

        /// <summary>
        /// F8062_s the list feature class.
        /// </summary>
        /// <param name="application">ApplicationID</param>
        /// <returns>typed dataset containing the feature class details</returns>
        public static F8062ComponentsConfigData F8062_ListFeatureClass(int application)
        {
            if (WSHelper.IsOnLineMode)
            {
                string componentsConfigValue;
                F8062ComponentsConfigData componentsConfigData = new F8062ComponentsConfigData();
                componentsConfigValue = terraScanService.F8062_ListFeatureClass(application);
                componentsConfigData.ReadXml(Utilities.SharedFunctions.XmlParser(componentsConfigValue));
                return componentsConfigData;
            }
            else
            {
                return Helper.F8062_ListFeatureClass(application);
            }
        }

        #endregion List Feature Class

        #region Save Components Configuration

        /// <summary>
        /// F8062_s the save components configuration.
        /// </summary>
        /// <param name="componentsConfig">The components config.</param>
        /// <param name="userId">UserID</param>
        public static void F8062_SaveComponentsConfiguration(string componentsConfig, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                terraScanService.F8062_SaveComponentsConfiguration(componentsConfig, userId);
            }
            else
            {
                Helper.F8062_SaveComponentsConfiguration(componentsConfig, userId);
            }
        }

        #endregion Save Components Configuration

        #region Delete Components Configuration

        /// <summary>
        /// Deletes the Components Configuration.
        /// </summary>
        /// <param name="componentId">The component id.</param>
        /// <param name="userId">UserID</param>
        /// <returns>Integer</returns>
        public static int F8062_DeleteComponentsConfiguration(int componentId, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F8062_DeleteComponentsConfiguration(componentId, userId);
            }
            else
            {
                return Helper.F8062_DeleteComponentsConfiguration(componentId, userId);
            }
        }

        #endregion

        #endregion F8062 Components Configuration

        #region F8058 Resources Configuration

        #region List Resources Configuration

        /// <summary>
        /// F8058_s the list resources config details.
        /// </summary>
        /// <returns>resourcesConfigData</returns>
        public static F8058ResourcesConfigData F8058_ListResourcesConfigDetails()
        {
            if (WSHelper.IsOnLineMode)
            {
                string resourcesConfigDetails;
                F8058ResourcesConfigData resourcesConfigData = new F8058ResourcesConfigData();
                resourcesConfigDetails = terraScanService.F8058_ListResourcesConfigDetails();
                resourcesConfigData.ReadXml(Utilities.SharedFunctions.XmlParser(resourcesConfigDetails));
                return resourcesConfigData;
            }
            else
            {
                return Helper.F8058_ListResourcesConfigDetails();
            }
        }

        #endregion List Resources Configuration

        #region Delete Resources Configuration

        /// <summary>
        /// F8058_s the delete resources config details.
        /// </summary>
        /// <param name="equipmentId">The equipment id.</param>
        /// <param name="userId">UserID</param>
        /// <returns>Integer</returns>
        public static int F8058_DeleteResourcesConfigDetails(int equipmentId, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F8058_DeleteResourcesConfigDetails(equipmentId, userId);
            }
            else
            {
                return Helper.F8058_DeleteResourcesConfigDetails(equipmentId, userId);
            }
        }

        #endregion Delete Resources Configuration

        #region Insert Resources Configuration

        /// <summary>
        /// F8058_s the insert resources config details.
        /// </summary>
        /// <param name="equipmentId">The equipment id.</param>
        /// <param name="equiptResource">The equipt resource.</param>
        /// <param name="applicationId">The application id.</param>
        /// <param name="userId">UserID</param>
        /// <returns>Integer</returns>
        public static int F8058_InsertResourcesConfigDetails(int equipmentId, string equiptResource, int applicationId, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F8058_InsertResourcesConfigDetails(equipmentId, equiptResource, applicationId, userId);
            }
            else
            {
                return Helper.F8058_InsertResourcesConfigDetails(equipmentId, equiptResource, applicationId, userId);
            }
        }

        #endregion Insert Resources Configuration

        #endregion F8058 Resources Configuration

        #region F1013 Unpaid Reciepts.

        /// <summary>
        /// F1013_s the list unpaid receipts.
        /// </summary>
        /// <param name="userId">userId.</param>
        /// <returns>the batch payments dataset.</returns>
        public static F1013BatchPaymentMgmtData F1013_ListUnpaidReceipts(int? userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string batchPaymentDataXml;
                F1013BatchPaymentMgmtData batchPaymentDataSet = new F1013BatchPaymentMgmtData();
                batchPaymentDataXml = terraScanService.F1013_ListUnpaidReceipts(userId);
                batchPaymentDataSet.ReadXml(Utilities.SharedFunctions.XmlParser(batchPaymentDataXml));
                return batchPaymentDataSet;
            }
            else
            {
                return Helper.F1013_ListUnpaidReceipts(userId);
            }
        }

        /// <summary>
        /// F1013_s the save batch payment.
        /// </summary>
        /// <param name="ppaymentId">The ppayment id.</param>
        /// <param name="userId">The user id.</param>
        /// <param name="paymentItemsXml">The payment items XML.</param>
        /// <param name="receiptItemsXml">The receipt items XML.</param>
        /// <returns>returns the error id.</returns>
        public static int F1013_SaveBatchPayment(int ppaymentId, int userId, string paymentItemsXml, string receiptItemsXml, string receiptDate)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F1013_SaveBatchPayment(ppaymentId, userId, paymentItemsXml, receiptItemsXml, receiptDate);
            }
            else
            {
                return Helper.F1013_SaveBatchPayment(ppaymentId, userId, paymentItemsXml, receiptItemsXml, receiptDate);
            }
        }

        #region F1013_ListSnapShotItems

        /// <summary>
        /// To list snap shot items collection.
        /// </summary>
        /// <param name="snapShotId">The snap shot id.</param>
        /// <returns>Typed dataset containing the snap shot items collection</returns>
        public static F1013BatchPaymentMgmtData F1013_ListSnapShotItems(int snapShotId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string form1013BatchPaymentMgmtvalue;
                F1013BatchPaymentMgmtData form1013BatchPaymentMgmtData = new F1013BatchPaymentMgmtData();
                form1013BatchPaymentMgmtvalue = terraScanService.F1013_ListSnapShotItems(snapShotId);
                form1013BatchPaymentMgmtData.ReadXml(Utilities.SharedFunctions.XmlParser(form1013BatchPaymentMgmtvalue));
                return form1013BatchPaymentMgmtData;
            }
            else
            {
                return Helper.F1013_ListSnapShotItems(snapShotId);
            }
        }

        #endregion F1013_ListSnapShotItems

        #region F1013_DeleteReceiptItems

        /// <summary>
        /// F1013_s the delete receipt items.
        /// </summary>
        /// <param name="paymentId">The payment id.</param>
        /// <param name="receiptItems">The receipt items.</param>
        /// <param name="userId">The user id.</param>
        /// <returns>Integer</returns>
        public static int F1013_DeleteReceiptItems(int paymentId, string receiptItems, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F1013_DeleteReceiptItems(paymentId, receiptItems, userId);
            }
            else
            {
                return Helper.F1013_DeleteReceiptItems(paymentId, receiptItems, userId);
            }
        }

        #endregion F1013_DeleteReceiptItems

        #endregion

        #region F8060 Parts Configuration

        #region List Parts Configuration

        /// <summary>
        /// Lists the Parts Configuration details
        /// </summary>
        /// <param name="componentId">The component id.</param>
        /// <returns>returns dataset contains Parts Configuration details</returns>
        public static F8060PartsConfigData F8060_ListPartsConfig(int componentId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string partsConfigValue;
                F8060PartsConfigData partsConfigData = new F8060PartsConfigData();
                partsConfigValue = terraScanService.F8060_ListPartsConfig(componentId);
                partsConfigData.ReadXml(Utilities.SharedFunctions.XmlParser(partsConfigValue));
                return partsConfigData;
            }
            else
            {
                return Helper.F8060_ListPartsConfig(componentId);
            }
        }

        #endregion

        #region List Components

        /// <summary>
        /// Lists the Components detail
        /// </summary>
        /// <returns>returns dataset contains Components details</returns>
        public static F8060PartsConfigData F8060_ListComponents()
        {
            if (WSHelper.IsOnLineMode)
            {
                string partsConfigValue;
                F8060PartsConfigData partsConfigData = new F8060PartsConfigData();
                partsConfigValue = terraScanService.F8060_ListComponents();
                partsConfigData.ReadXml(Utilities.SharedFunctions.XmlParser(partsConfigValue));
                return partsConfigData;
            }
            else
            {
                return Helper.F8060_ListComponents();
            }
        }

        #endregion

        #region Save Parts Configuration

        /// <summary>
        /// F8062_s the save Parts configuration.
        /// </summary>
        /// <param name="partId">The part id.</param>
        /// <param name="partsConfig">The parts config.</param>
        /// <param name="userId">UserID</param>
        public static void F8060_SavePartsConfiguration(int partId, string partsConfig, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                terraScanService.F8060_SavePartsConfiguration(partId, partsConfig, userId);
            }
            else
            {
                Helper.F8060_SavePartsConfiguration(partId, partsConfig, userId);
            }
        }

        #endregion Save Parts Configuration

        #region Delete Parts Configuration

        /// <summary>
        /// Deletes the Parts Configuration.
        /// </summary>
        /// <param name="partId">The part id.</param>
        /// <param name="userId">UserID</param>
        /// <returns>Integer</returns>
        public static int F8060_DeletePartsConfiguration(int partId, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F8060_DeletePartsConfiguration(partId, userId);
            }
            else
            {
                return Helper.F8060_DeletePartsConfiguration(partId, userId);
            }
        }

        #endregion

        #endregion F8060 Parts Configuration

        #region OwnerStatus

        /// <summary>
        /// To List OwnerStatus Details.
        /// </summary>
        /// <param name="typeId">The type id.</param>
        /// <param name="keyId">The key id.</param>
        /// <returns>
        /// Typed Dataset containing the OwnerStatus Details
        /// </returns>
        public static F9102OwnerStatusData F9102_GetOwnerStatusDetails(int typeId, int keyId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string ownerStatusDataValue;
                F9102OwnerStatusData ownerStatusData = new F9102OwnerStatusData();
                ownerStatusDataValue = terraScanService.F9102_GetOwnerStatusDetails(typeId, keyId);
                ownerStatusData.ReadXml(Utilities.SharedFunctions.XmlParser(ownerStatusDataValue));
                return ownerStatusData;
            }
            else
            {
                return Helper.F9102_GetOwnerStatusDetails(typeId, keyId);
            }
        }

        #endregion OwnerStatus

        #region F95005 Reference Data

        #region List Refereence Data

        /// <summary>
        /// To List the Reference Data Details
        /// </summary>
        /// <param name="masterFormNo">masterFormNo</param>
        /// <returns>Typed DataSet containg the Reference Data Details</returns>
        public static DataSet F95005_ListReferenceData(int masterFormNo)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F95005_ListReferenceData(masterFormNo);
            }
            else
            {
                return Helper.F95005_ListReferenceData(masterFormNo);
            }
        }

        #endregion List Refereence Data

        #region Save Reference Data

        /// <summary>
        /// To Save the Reference Data Details
        /// </summary>
        /// <param name="referenceData">Xml String containing the Reference Data Details</param>
        /// <param name="deletedData">Xml string containing the deleted data in Reference Data Details.</param>
        /// <param name="tableName">Tabel Name of the Reference Data</param>
        /// <param name="keyColumn">Key Column Name of the Reference Data Table</param>
        /// <param name="userId">UserID</param>
        /// <returns>
        /// Integer Value containing Whther save is performed or Not
        /// if Saved return = 0
        /// else Unsaved return = -1
        /// </returns>
        public static int F95005_SaveReferenceData(string referenceData, string deletedData, string tableName, string keyColumn, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F95005_SaveReferenceData(referenceData, deletedData, tableName, keyColumn, userId);
            }
            else
            {
                return Helper.F95005_SaveReferenceData(referenceData, deletedData, tableName, keyColumn, userId);
            }
        }

        #endregion Save Reference Data

        #endregion F95005 Reference Data

        #region F96000 OwnerManagement

        #region GetOwnerManagementDetails

        /// <summary>
        /// Gets the F96000_GetOwnerDetails
        /// It Returns two table[OwnerDetails,OwnerList]
        /// </summary>
        /// <param name="ownerId">The owner id.</param>
        /// <returns>
        /// Type Dataset Returns two table[OwnerDetails,OwnerList]
        /// </returns>
        public static F96000OwnerManagementData F96000_GetOwnerManagementDetails(int ownerId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string ownerDetails;
                F96000OwnerManagementData ownerManagementData = new F96000OwnerManagementData();
                ownerDetails = terraScanService.F96000_GetOwnerManagementDetails(ownerId);
                ownerManagementData.ReadXml(Utilities.SharedFunctions.XmlParser(ownerDetails));
                return ownerManagementData;
            }
            else
            {
                return Helper.F96000_GetOwnerManagementDetails(ownerId);
            }
        }

        #endregion GetOwnerManagementDetails

        #region ListOwnerStatusType

        /// <summary>
        /// Lists the OwnerStatusType
        /// </summary>
        /// <returns>Typed DataSet</returns>
        public static F96000OwnerManagementData.F96000ListOwnerStatusTypeDataTable F96000_ListOwnerStatusType()
        {
            if (WSHelper.IsOnLineMode)
            {
                string ownerStatusTypes;
                F96000OwnerManagementData ownerManagementData = new F96000OwnerManagementData();
                ownerStatusTypes = terraScanService.F96000_ListOwnerStatusType();
                ownerManagementData.ReadXml(Utilities.SharedFunctions.XmlParser(ownerStatusTypes));
                return ownerManagementData.F96000ListOwnerStatusType;
            }
            else
            {
                F96000OwnerManagementData ownerManagementData = new F96000OwnerManagementData();
                ownerManagementData = Helper.F96000_ListOwnerStatusType();
                return ownerManagementData.F96000ListOwnerStatusType;
            }
        }

        /// <summary>
        /// F96000_s the country combo details.
        /// </summary>
        /// <returns></returns>
        public static F96000OwnerManagementData F96000_CountryComboDetails()
        {
            if (WSHelper.IsOnLineMode)
            {
                string countryDetails;
                F96000OwnerManagementData ownerManagementData = new F96000OwnerManagementData();
                countryDetails = terraScanService.F96000_CountryComboDetails();
                ownerManagementData.ReadXml(Utilities.SharedFunctions.XmlParser(countryDetails));
                return ownerManagementData;
            }
            else
            {
                return Helper.F96000_CountryComboDetails();
            }
        }

        #endregion ListOwnerStatusType

        #region Insert OwnerManagementDetails

        /// <summary>
        /// Inserts the F96000_OwnerManagementDetails
        /// </summary>
        /// <param name="ownerId">The owner id.</param>
        /// <param name="ownerDetails">Owner Details</param>
        /// <param name="ownerStatus">ownerStatus</param>
        /// <param name="userId">UserID</param>
        /// <returns>Integer</returns>
        public static int F96000_InsertOwnerManagementDetails(int ownerId, string ownerDetails, string ownerStatus, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F96000_InsertOwnerManagementDetails(ownerId, ownerDetails, ownerStatus, userId);
            }
            else
            {
                return Helper.F96000_InsertOwnerManagementDetails(ownerId, ownerDetails, ownerStatus, userId);
            }
        }

        #region DeleteData
        public static void F96000_DeleteData(int statusId)
        {
            if (WSHelper.IsOnLineMode)
            {
                terraScanService.F96000_DeleteData(statusId);
            }
            else
            {
                Helper.F96000_DeleteData(statusId);
            }
        }

        #endregion


        #endregion Insert OwnerManagementDetails

        #endregion F96000 OwnerManagement

        #region F36011 Misc Improvement Overview

        #region List Depr Table

        /// <summary>
        /// To List the Depr Table details
        /// </summary>
        /// <returns>Typed dataset containing the Depr Table details</returns>
        public static F36011MiscImprovementOverviewData F36011_ListDeprTable(int valueSliceId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string miscImprovementOverviewValue;
                F36011MiscImprovementOverviewData miscImprovementOverviewData = new F36011MiscImprovementOverviewData();
                miscImprovementOverviewValue = terraScanService.F36011_ListDeprTable(valueSliceId);
                miscImprovementOverviewData.ReadXml(Utilities.SharedFunctions.XmlParser(miscImprovementOverviewValue));
                return miscImprovementOverviewData;
            }
            else
            {
                return Helper.F36011_ListDeprTable(valueSliceId);
            }
        }

        #endregion List Depr Table

        #region List Misc Code

        /// <summary>
        /// To List Misc Code Details.
        /// </summary>
        /// <param name="valueSliceId">The value slice id.</param>
        /// <returns>Typed dataset containing the Misc Code Details</returns>
        public static F36011MiscImprovementOverviewData F36011_ListMiscCode(int valueSliceId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string miscImprovementOverviewValue;
                F36011MiscImprovementOverviewData miscImprovementOverviewData = new F36011MiscImprovementOverviewData();
                miscImprovementOverviewValue = terraScanService.F36011_ListMiscCode(valueSliceId);
                miscImprovementOverviewData.ReadXml(Utilities.SharedFunctions.XmlParser(miscImprovementOverviewValue));
                return miscImprovementOverviewData;
            }
            else
            {
                return Helper.F36011_ListMiscCode(valueSliceId);
            }
        }

        #endregion List Misc Code

        #region List Misc Improvements

        /// <summary>
        /// To List Misc Improvements details.
        /// </summary>
        /// <param name="miscId">The misc id.</param>
        /// <returns>Typed dataset containing the Misc Improvements details</returns>
        public static F36011MiscImprovementOverviewData F36011_ListMiscImprovements(int miscId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string miscImprovementOverviewValue;
                F36011MiscImprovementOverviewData miscImprovementOverviewData = new F36011MiscImprovementOverviewData();
                miscImprovementOverviewValue = terraScanService.F36011_ListMiscImprovements(miscId);
                miscImprovementOverviewData.ReadXml(Utilities.SharedFunctions.XmlParser(miscImprovementOverviewValue));
                return miscImprovementOverviewData;
            }
            else
            {
                return Helper.F36011_ListMiscImprovements(miscId);
            }
        }

        #endregion List Misc Improvements

        #region List MICatalog Code

        /// <summary>
        /// To List Catalog Code Details.
        /// </summary>
        /// <param name="valueSliceId">The value slice id.</param>
        /// <returns>Typed Dataset containg the MICatalog Code Details</returns>
        public static F36011MiscImprovementOverviewData F36011_ListCatalogCode(int valueSliceId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string miscImprovementOverviewValue;
                F36011MiscImprovementOverviewData miscImprovementOverviewData = new F36011MiscImprovementOverviewData();
                miscImprovementOverviewValue = terraScanService.F36011_ListCatalogCode(valueSliceId);
                miscImprovementOverviewData.ReadXml(Utilities.SharedFunctions.XmlParser(miscImprovementOverviewValue));
                return miscImprovementOverviewData;
            }
            else
            {
                return Helper.F36011_ListCatalogCode(valueSliceId);
            }
        }

        #endregion List MICatalog Code

        #region Delete MICode

        /// <summary>
        /// To Delete MID in Misc Improvements OverView.
        /// </summary>
        /// <param name="miscId">The misc id.</param>
        /// <param name="userId">userId</param>
        public static void F36011_DeleteMICode(int miscId, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                terraScanService.F36011_DeleteMICode(miscId, userId);
            }
            else
            {
                Helper.F36011_DeleteMICode(miscId, userId);
            }
        }

        #endregion Delete MICode

        #region Save Misc Improvements

        /// <summary>
        /// To Save the Misc Improvements Overview
        /// </summary>
        /// <param name="miscmId">mid</param>
        /// <param name="miscItems">xml string containing the Misc Improvents Overview Details</param>
        /// <param name="userId">userId</param>
        /// <returns>Integer value containing the key id</returns>
        public static int F36011_SaveMiscImprovement(int miscmId, string miscItems, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F36011_SaveMiscImprovement(miscmId, miscItems, userId);
            }
            else
            {
                return Helper.F36011_SaveMiscImprovement(miscmId, miscItems, userId);
            }
        }

        #endregion Save Misc Improvements

        #region List Qualit Comm

        /// <summary>
        /// F36011_s the list quality comm.
        /// </summary>
        /// <returns>Typed dataset containing the Quality Comm list table</returns>
        public static F36011MiscImprovementOverviewData F36011_ListQualityComm()
        {
            if (WSHelper.IsOnLineMode)
            {
                string miscImprovementOverviewValue;
                F36011MiscImprovementOverviewData miscImprovementOverviewData = new F36011MiscImprovementOverviewData();
                miscImprovementOverviewValue = terraScanService.F36011_ListQualityComm();
                miscImprovementOverviewData.ReadXml(Utilities.SharedFunctions.XmlParser(miscImprovementOverviewValue));
                return miscImprovementOverviewData;
            }
            else
            {
                return Helper.F36011_ListQualityComm();
            }
        }

        #endregion List Qualit Comm

        #region recalcMiscImprovement

        /// <summary>
        /// To List the recalc funcDepr and physDepr
        /// </summary>
        /// <returns>Typed dataset containing the funcDepr and physcDepr Table details</returns>
        public static F36011MiscImprovementOverviewData F36011_RecalcMiscImprovement(bool withprimary, int? yearIn, string condition, int? economicLife, int? effectiveAge, decimal? physDeprPerc, decimal? funcDeprPerc, decimal? BaseCost, decimal? physDepr, decimal? funcDepr, int valueSliceId, int miscCodeId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string miscImprovementOverviewValue;
                F36011MiscImprovementOverviewData miscImprovementOverviewData = new F36011MiscImprovementOverviewData();
                miscImprovementOverviewValue = terraScanService.F36011_RecalcMiscImprovement(withprimary, yearIn, condition, economicLife, effectiveAge, physDeprPerc, funcDeprPerc, BaseCost, physDepr, funcDepr, valueSliceId, miscCodeId);
                miscImprovementOverviewData.ReadXml(Utilities.SharedFunctions.XmlParser(miscImprovementOverviewValue));
                return miscImprovementOverviewData;
            }
            else
            {
                return Helper.F36011_RecalcMiscImprovement(withprimary, yearIn, condition, economicLife, effectiveAge, physDeprPerc, funcDeprPerc, BaseCost, physDepr, funcDepr, valueSliceId, miscCodeId);
            }
        }


        #endregion

        #region List Qualit Res

        /// <summary>
        /// F36011_s the list quality res.
        /// </summary>
        /// <returns>Typed dataset containing the Quality Res table</returns>
        public static F36011MiscImprovementOverviewData F36011_ListQualityRes()
        {
            if (WSHelper.IsOnLineMode)
            {
                string miscImprovementOverviewValue;
                F36011MiscImprovementOverviewData miscImprovementOverviewData = new F36011MiscImprovementOverviewData();
                miscImprovementOverviewValue = terraScanService.F36011_ListQualityRes();
                miscImprovementOverviewData.ReadXml(Utilities.SharedFunctions.XmlParser(miscImprovementOverviewValue));
                return miscImprovementOverviewData;
            }
            else
            {
                return Helper.F36011_ListQualityRes();
            }
        }

        #endregion List Qualit Comm

        #region List Condition

        /// <summary>
        /// F36011_s the list Condition
        /// </summary>
        /// <returns>Typed dataset containing the Condition table</returns>
        public static F36011MiscImprovementOverviewData F36011_ListCondition()
        {
            if (WSHelper.IsOnLineMode)
            {
                string miscImprovementOverviewValue;
                F36011MiscImprovementOverviewData miscImprovementOverviewData = new F36011MiscImprovementOverviewData();
                miscImprovementOverviewValue = terraScanService.F36011_ListCondition();
                miscImprovementOverviewData.ReadXml(Utilities.SharedFunctions.XmlParser(miscImprovementOverviewValue));
                return miscImprovementOverviewData;
            }
            else
            {
                return Helper.F36011_ListCondition();
            }
        }

        #endregion List Condition

        #region List DeprFuncCategory

        /// <summary>
        /// F36011_s the list Depr FuncCategory
        /// </summary>
        /// <returns>Typed dataset containing the Depr FuncCategory table</returns>
        public static F36011MiscImprovementOverviewData F36011_ListDeprFuncCategory()
        {
            if (WSHelper.IsOnLineMode)
            {
                string miscImprovementOverviewValue;
                F36011MiscImprovementOverviewData miscImprovementOverviewData = new F36011MiscImprovementOverviewData();
                miscImprovementOverviewValue = terraScanService.F36011_ListDeprFuncCategory();
                miscImprovementOverviewData.ReadXml(Utilities.SharedFunctions.XmlParser(miscImprovementOverviewValue));
                return miscImprovementOverviewData;
            }
            else
            {
                return Helper.F36011_ListDeprFuncCategory();
            }
        }

        #endregion List DeprFuncCategory

        #region List MiscCatalogChoice

        /// <summary>
        /// F36012_s the list misc catalog choice.
        /// </summary>
        /// <param name="miscCodeId">The misc code id.</param>
        /// <param name="fieldNum">The field num.</param>
        /// <returns>Typed dataset containing the MiscCatalogChoice table</returns>
        public static F36011MiscImprovementOverviewData F36012_ListMiscCatalogChoice(int miscCodeId, int fieldNum)
        {
            if (WSHelper.IsOnLineMode)
            {
                string miscImprovementOverviewValue;
                F36011MiscImprovementOverviewData miscImprovementOverviewData = new F36011MiscImprovementOverviewData();
                miscImprovementOverviewValue = terraScanService.F36012_ListMiscCatalogChoice(miscCodeId, fieldNum);
                miscImprovementOverviewData.ReadXml(Utilities.SharedFunctions.XmlParser(miscImprovementOverviewValue));
                return miscImprovementOverviewData;
            }
            else
            {
                return Helper.F36012_ListMiscCatalogChoice(miscCodeId, fieldNum);
            }
        }

        #endregion List MiscCatalogChoice

        #endregion F36011 Misc Improvement Overview

        # region F3602 Copy or Move Misc Improvements
        /// <summary>
        /// To Get Object Details.
        /// </summary>
        /// <returns>Typed dataset containing the Depr Table details</returns>
        public static F3602CopyMoveMiscImprovement GetObjectDetails(int parcelId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string miscImprovementObjectValue;
                F3602CopyMoveMiscImprovement miscImprovementData = new F3602CopyMoveMiscImprovement();
                miscImprovementObjectValue = terraScanService.GetObjectDetails(parcelId);
                miscImprovementData.ReadXml(Utilities.SharedFunctions.XmlParser(miscImprovementObjectValue));
                return miscImprovementData;
            }
            else
            {
                return Helper.GetObjectDetails(parcelId);
            }
        }

        /// <summary>
        /// To get the list of objects Types.
        /// </summary>
        /// <param name="parcelId"></param>
        /// <returns></returns>
        public static F3602CopyMoveMiscImprovement GetObjectTypesList()
        {
            if (WSHelper.IsOnLineMode)
            {
                string miscImprovementObjectValue;
                F3602CopyMoveMiscImprovement miscImprovementData = new F3602CopyMoveMiscImprovement();
                miscImprovementObjectValue = terraScanService.GetObjectTypesList();
                miscImprovementData.ReadXml(Utilities.SharedFunctions.XmlParser(miscImprovementObjectValue));
                return miscImprovementData;
            }
            else
            {
                return Helper.GetObjectTypesList();
            }
        }

        /// <summary>
        /// To get the Valuse slices list.
        /// </summary>
        /// <param name="parcelId"></param>
        /// <returns></returns>
        public static F3602CopyMoveMiscImprovement GetValueSlicesList(int parcelId, int objectId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string miscImprovementObjectValue;
                F3602CopyMoveMiscImprovement miscImprovementData = new F3602CopyMoveMiscImprovement();
                miscImprovementObjectValue = terraScanService.GetValueSlicesList(parcelId,objectId);
                miscImprovementData.ReadXml(Utilities.SharedFunctions.XmlParser(miscImprovementObjectValue));
                return miscImprovementData;
            }
            else
            {
                return Helper.GetValueSlicesList(parcelId, objectId);
            }
        }

        /// <summary>
        /// To get the Misc Improvements list.
        /// </summary>
        /// <param name="parcelId"></param>
        /// <returns></returns>
        public static F3602CopyMoveMiscImprovement GetMiscImprovementsList(int valueSliceID)
        {
            if (WSHelper.IsOnLineMode)
            {
                string miscImprovementObjectValue;
                F3602CopyMoveMiscImprovement miscImprovementData = new F3602CopyMoveMiscImprovement();
                miscImprovementObjectValue = terraScanService.GetMiscImprovementsList(valueSliceID);
                miscImprovementData.ReadXml(Utilities.SharedFunctions.XmlParser(miscImprovementObjectValue));
                return miscImprovementData;
            }
            else
            {
                return Helper.GetMiscImprovementsList(valueSliceID);
            }
        }


        /// <summary>
        /// To get the Process Misc Improvements.
        /// </summary>
        /// <param name="parcelId"></param>
        /// <returns></returns>
        public static F3602CopyMoveMiscImprovement F3602_ProcessMiscImprovements(string copyMove, int parcelId, bool isNewObject, int existingObjectId, int newObjectTypeId, bool isNewValueslice, int existingValueslice, string miscImprovements, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string miscImprovementObjectValue;
                F3602CopyMoveMiscImprovement miscImprovementData = new F3602CopyMoveMiscImprovement();
                miscImprovementObjectValue = terraScanService.F3602_ProcessMiscImprovements(copyMove, parcelId, isNewObject, existingObjectId, newObjectTypeId, isNewValueslice, existingValueslice, miscImprovements, userId);
                miscImprovementData.ReadXml(Utilities.SharedFunctions.XmlParser(miscImprovementObjectValue));
                return miscImprovementData;
            }
            else
            {
                return Helper.F3602_ProcessMiscImprovements(copyMove, parcelId, isNewObject, existingObjectId, newObjectTypeId, isNewValueslice, existingValueslice, miscImprovements, userId);
            }
        }

        #endregion Copy or Move Misc Improvements

        #region F36010 Misc Improvement Catalog

        /// <summary>
        /// Get the Misc Improvement data
        /// </summary>
        /// <param name="miscCodeId">The misc code id.</param>
        /// <returns>
        /// Typed Dataset containing the Misc Improvement Catalog Details
        /// </returns>
        public static F36010MiscImprovementCatalog F36010_GetMiscImprovementCatalog(int miscCodeId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string miscImprovementCatalogValue;
                F36010MiscImprovementCatalog getMiscImprovementData = new F36010MiscImprovementCatalog();
                miscImprovementCatalogValue = terraScanService.F36010_GetMiscImprovementCatalog(miscCodeId);
                getMiscImprovementData.ReadXml(Utilities.SharedFunctions.XmlParser(miscImprovementCatalogValue));
                return getMiscImprovementData;
            }
            else
            {
                return Helper.F36010_GetMiscImprovementCatalog(miscCodeId);
            }
        }

        /// <summary>
        /// F36010_s the save misc improvement catalog.
        /// </summary>
        /// <param name="miscCodeId">The misc code id.</param>
        /// <param name="miscCatalogItems">The misc catalog items.</param>
        /// <param name="userId">The user id.</param>
        /// <param name="miscCatalogChoiceItems">The misc catalog choice items.</param>
        /// <returns>The key id (misccodeID)</returns>
        public static int F36010_SaveMiscImprovementCatalog(int miscCodeId, string miscCatalogItems, int userId, string miscCatalogChoiceItems)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F36010_SaveMiscImprovementCatalog(miscCodeId, miscCatalogItems, userId, miscCatalogChoiceItems);
            }
            else
            {
                return Helper.F36010_SaveMiscImprovementCatalog(miscCodeId, miscCatalogItems, userId, miscCatalogChoiceItems);
            }
        }

        /// <summary>
        /// Delete the Misc Improvement data
        /// </summary>
        /// <param name="miscCodeId">The misc code id.</param>
        /// <param name="userId">userId</param>
        public static void F36010_DeleteMiscImprovementCatalog(int miscCodeId, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                terraScanService.F36010_DeleteMiscImprovementCatalog(miscCodeId, userId);
            }
            else
            {
                Helper.F36010_DeleteMiscImprovementCatalog(miscCodeId, userId);
            }
        }

        /// <summary>
        /// Check the Misc Improvement Catalog
        /// </summary>
        /// <param name="miscCodeId">The misc code id.</param>
        /// <param name="miscCode">miscCode</param>
        /// <param name="rollYear">rollYear</param>
        /// <returns>integer value</returns>
        public static int F36010_CheckMiscImprovementCatalog(int miscCodeId, string miscCode, int rollYear)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F36010_CheckMiscImprovementCatalog(miscCodeId, miscCode, rollYear);
            }
            else
            {
                return Helper.F36010_CheckMiscImprovementCatalog(miscCodeId, miscCode, rollYear);
            }
        }

        /// <summary>
        /// F36010_s the list depr table.
        /// </summary>
        /// <param name="rollYear">The roll year.</param>
        /// <returns>miscImprovementData</returns>
        public static F36010MiscImprovementCatalog F36010_ListDeprTable(int rollYear)
        {
            if (WSHelper.IsOnLineMode)
            {
                string miscImprovementCatalogValue;
                F36010MiscImprovementCatalog getMiscImprovementData = new F36010MiscImprovementCatalog();
                miscImprovementCatalogValue = terraScanService.F36010_ListDeprTable(rollYear);
                getMiscImprovementData.ReadXml(Utilities.SharedFunctions.XmlParser(miscImprovementCatalogValue));
                return getMiscImprovementData;
            }
            else
            {
                return Helper.F36010_ListDeprTable(rollYear);
            }
        }

        #endregion F36010 Misc Improvement Catalog

        #region F36001 Marshal And Swift Commercial

        #region Get Marshal And Swift Commercial

        /// <summary>
        /// To get marshal and swift commercial details.
        /// </summary>
        /// <param name="valueSliceId">The value slice id.</param>
        /// <returns>Typed Dataset containing the Marshal And Swift Commercial details</returns>
        public static F36001MarshalAndSwiftCommercialData F36001_GetMarshalAndSwiftCommercial(int valueSliceId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string marshalAndSwiftCommercialDataValue;
                F36001MarshalAndSwiftCommercialData marshalAndSwiftCommercialData = new F36001MarshalAndSwiftCommercialData();
                marshalAndSwiftCommercialDataValue = terraScanService.F36001_GetMarshalAndSwiftCommercial(valueSliceId);
                marshalAndSwiftCommercialData.ReadXml(Utilities.SharedFunctions.XmlParser(marshalAndSwiftCommercialDataValue));
                return marshalAndSwiftCommercialData;
            }
            else
            {
                return Helper.F36001_GetMarshalAndSwiftCommercial(valueSliceId);
            }
        }

        #endregion Get Marshal And Swift Commercial

        #region Save Marshal And Swift Commercial

        /// <summary>
        /// To save marshal and swift commercial.
        /// </summary>
        /// <param name="valueSliceId">The value slice id.</param>
        /// <param name="estimateDetails">The estimate details.</param>
        /// <param name="occupancyDetails">The occupancy details.</param>
        /// <param name="componentDetails">The component details.</param>
        /// <param name="depreciationXml">The depreciation XML.</param>
        /// <param name="userId">userId</param>
        /// <returns>integer Value</returns>
        public static int F36001_SaveMarshalAndSwiftCommercial(int valueSliceId, string estimateDetails, string occupancyDetails, string componentDetails, string depreciationXml, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F36001_SaveMarshalAndSwiftCommercial(valueSliceId, estimateDetails, occupancyDetails, componentDetails, depreciationXml, userId);
            }
            else
            {
                return Helper.F36001_SaveMarshalAndSwiftCommercial(valueSliceId, estimateDetails, occupancyDetails, componentDetails, depreciationXml, userId);
            }
        }

        #endregion Save Marshal And Swift Commercial

        #endregion F36001 Marshal And Swift Commercial

        #region F2550 TaxRollCorrection

        #region F2550_ListParcelDetails

        /// <summary>
        /// F2550_s the list parcel details.
        /// </summary>
        /// <param name="parcelId">The parcel id.</param>
        /// <param name="scheduleId">The schedule id.</param>
        /// <returns>The TaxRollCorrection dataset.</returns>
        public static F2550TaxRollCorrectionData F2550_ListParcelDetails(string parcelId, string scheduleId, string stateId, string centralXmlIds)
        {
            if (WSHelper.IsOnLineMode)
            {
                string parcelDetailsValue;
                F2550TaxRollCorrectionData parcelDetailsData = new F2550TaxRollCorrectionData();
                parcelDetailsValue = terraScanService.F2550_ListParcelDetails(parcelId, scheduleId, stateId,centralXmlIds);
                parcelDetailsData.ReadXml(Utilities.SharedFunctions.XmlParser(parcelDetailsValue));
                return parcelDetailsData;
            }
            else
            {
                return Helper.F2550_ListParcelDetails(parcelId, scheduleId, stateId,centralXmlIds);
            }
        }

        #endregion F2550_ListParcelDetails

        #region F2550_ExecTaxRollCorrections

        /// <summary>
        /// F2550_s the exec tax roll corrections.
        /// </summary>
        /// <param name="parcelItems">The parcel items.</param>
        /// <param name="userId">UserID</param>
        /// <returns>Integer</returns>
        public static int F2550_ExecTaxRollCorrections(string parcelItems, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F2550_ExecTaxRollCorrections(parcelItems, userId);
            }
            else
            {
                return Helper.F2550_ExecTaxRollCorrections(parcelItems, userId);
            }
        }

        #endregion F2550_ExecTaxRollCorrections

        #region List Attachment Details

        /// <summary>
        /// List attachment details.
        /// </summary>
        /// <param name="formId">The form id.</param>
        /// <param name="keyIds">The key ids.</param>
        /// <param name="userId">The user id.</param>
        /// <param name="moduleId">The module id.</param>
        /// <returns>Typed DataSet</returns>
        public static F2550TaxRollCorrectionData F2550_ListAttachmentDetails(int formId, string keyIds, int userId, int moduleId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string parcelDetailsValue;
                F2550TaxRollCorrectionData parcelDetailsData = new F2550TaxRollCorrectionData();
                parcelDetailsValue = terraScanService.F2550_ListAttachmentDetails(formId, keyIds, userId, moduleId);
                parcelDetailsData.ReadXml(Utilities.SharedFunctions.XmlParser(parcelDetailsValue));
                return parcelDetailsData;
            }
            else
            {
                return Helper.F2550_ListAttachmentDetails(formId, keyIds, userId, moduleId);
            }
        }

        #endregion List Attachment Details

        #region Delete Attachment Details

        /// <summary>
        /// Delete attachment details.
        /// </summary>
        /// <param name="formId">The form id.</param>
        public static void F2550_DeleteAttachmentDetails(int formId)
        {
            if (WSHelper.IsOnLineMode)
            {
                terraScanService.F2550_DeleteAttachmentDetails(formId);
            }
            else
            {
                Helper.F2550_DeleteAttachmentDetails(formId);
            }
        }

        #endregion Delete Attachment Details

        #region Insert Correction Parcels Temp Table
        /// <summary>
        /// F2550_s the save correction parcels temp.
        /// </summary>
        /// <param name="correctionId">The correction id.</param>
        /// <param name="correctionTempItems">The correction temp items.</param>
        /// <param name="corrParcelIds">The corr parcel ids.</param>
        /// <param name="statementsIds">The statements ids.</param>
        /// <param name="userId">The user id.</param>
        /// <returns></returns>
        public static int F2550_SaveCorrectionParcelsTemp(int? correctionId, string correctionTempItems, string corrParcelIds, string statementsIds, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F2550_SaveCorrectionParcelsTemp(correctionId, correctionTempItems, corrParcelIds, statementsIds, userId);
            }
            else
            {
                return Helper.F2550_SaveCorrectionParcelsTemp(correctionId, correctionTempItems, corrParcelIds, statementsIds, userId);
            }
        }
        #endregion

        #region List Correction Code

        /// <summary>
        /// F2550_s the list correction code.
        /// </summary>
        /// <returns>The tax roll correction dataset.</returns>
        public static F2550TaxRollCorrectionData F2550_ListCorrectionCode()
        {
            if (WSHelper.IsOnLineMode)
            {
                string correctionCode;
                F2550TaxRollCorrectionData correctionCodeData = new F2550TaxRollCorrectionData();
                correctionCode = terraScanService.F2550_ListCorrectionCode();
                correctionCodeData.ReadXml(Utilities.SharedFunctions.XmlParser(correctionCode));
                return correctionCodeData;
            }
            else
            {
                return Helper.F2550_ListCorrectionCode();
            }
        }

        #endregion

        #endregion F2550 TaxRollCorrection


        #region EditStatementDetails

        #region ListEditStatementDetails

        /// <summary>
        /// F2551_s the list EditStatement details.
        /// </summary>
        /// <param name="parcelId">The parcel id.</param>
        /// <param name="StatementId">The Statement id.</param>
        /// <param name="OwnerId">The Owner id.</param>
        /// <param name="TypeId">TheType id.</param>
        /// <returns>The Edit Statement dataset.</returns>
        public static F2551EditStmtData F2551_ListEditStatementDetails(int parcelId, short typeId, int statementId, int ownerId, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {

                string ListEditStatementValue;
                F2551EditStmtData EditStatementData = new F2551EditStmtData();
                ListEditStatementValue = terraScanService.F2551_ListEditStatementDetails(parcelId, typeId, statementId, ownerId, userId);
                EditStatementData.ReadXml(Utilities.SharedFunctions.XmlParser(ListEditStatementValue));
                return EditStatementData;
            }
            else
            {
                return Helper.F2551_ListEditStatementDetails(parcelId, typeId, statementId, ownerId, userId);
            }
        }

        #endregion ListEditStatementDetails

        #region ExecuteLoadGrid

        /// <summary>
        /// F2551_s the list ExecuteLoadGrid details.
        /// </summary>
        /// <param name="parcelId">The parcel id.</param>
        /// <param name="StatementId">The Statement id.</param>
        /// <param name="OwnerId">The Owner id.</param>
        /// <param name="TypeId">The Type id.</param>
        /// <param name="ChangeXML">The Change XML.</param>
        /// <param name="ItemsXML">The ItemsXML.</param>
        /// <param name="UserId">The User id.</param>
        /// <returns>The Edit Statement dataset.</returns>
        public static F2551EditStmtData F2551_LoadStatementGridDetails(int parcelId, short typeId, int statementId, int ownerId, string itemXML, string changeXML, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string EditStatementGridValue;
                F2551EditStmtData EditStatementData = new F2551EditStmtData();
                EditStatementGridValue = terraScanService.F2551_LoadStatementGridDetails(parcelId, typeId, statementId, ownerId, itemXML, changeXML, userId);
                EditStatementData.ReadXml(Utilities.SharedFunctions.XmlParser(EditStatementGridValue));
                return EditStatementData;
            }
            else
            {
                return Helper.F2551_LoadStatementGridDetails(parcelId, typeId, statementId, ownerId, itemXML, changeXML, userId);
            }
        }
        #endregion ExecuteLoadGrid

        #region SaveOperationProcess
        /// <summary>
        /// F2551_s the list ExecuteLoadGrid details.
        /// </summary>
        /// <param name="parcelId">The parcel id.</param>
        /// <param name="StatementId">The Statement id.</param>
        /// <param name="OwnerId">The Owner id.</param>
        /// <param name="TypeId">The Type id.</param>
        /// <param name="itemXML">The item XML.</param>
        /// <param name="headerXML">The headerXML.</param>
        /// <param name="UserId">The User id.</param>
        /// <returns>The Edit Statement dataset.</returns>
        public static int SaveEditStatementtDetails(int parcelId, short typeId, int statementId, int ownerId, string itemXML, string headerXML, int userId)
        {

            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.SaveEditStatementtDetails(parcelId, typeId, statementId, ownerId, itemXML, headerXML, userId);
            }
            else
            {
                return Helper.SaveEditStatementtDetails(parcelId, typeId, statementId, ownerId, itemXML, headerXML, userId);
            }


        }


        #endregion SaveOperationProcess

        #endregion EditStatementDetails



        #region ListStatementSelectionDetails

        /// <summary>
        /// F2551_s the list EditStatement details.
        /// </summary>
        /// <param name="parcelId">The parcel id.</param>
        /// <param name="StatementId">The Statement id.</param>
        /// <param name="OwnerId">The Owner id.</param>
        /// <param name="TypeId">The type id.</param>
        /// <returns>The Edit Statement dataset.</returns>
        public static F2552StatementSelectionData F2552_ListStatementSelectionDetails(int parcelId, int typeId, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {

                string ListStatementValue;
                F2552StatementSelectionData StatementSelectionData = new F2552StatementSelectionData();
                ListStatementValue = terraScanService.F2552_ListStatementSelectionDetails(parcelId, typeId, userId);
                StatementSelectionData.ReadXml(Utilities.SharedFunctions.XmlParser(ListStatementValue));
                return StatementSelectionData;
            }
            else
            {
                return Helper.F2552_ListStatementSelectionDetails(parcelId, typeId, userId);
            }
        }

        #endregion ListStatementSelectionDetails


        #region F1401 ParcelSelection

        /// <summary>
        /// F1401_s the type of the get parcel.
        /// </summary>
        /// <param name="parcelId">The parcel id.</param>
        /// <returns>F1401ParcelSearch</returns>
        public static F1401ParcelSearch F1401_GetParcelType(int? parcelId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string parcelSearchData;
                F1401ParcelSearch parcelSearchDataSet = new F1401ParcelSearch();
                parcelSearchData = terraScanService.F1401_GetParcelType(parcelId);
                parcelSearchDataSet.ReadXml(Utilities.SharedFunctions.XmlParser(parcelSearchData));
                return parcelSearchDataSet;
            }
            else
            {
                return Helper.F1401_GetParcelType(parcelId);
            }
        }

        /// <summary>
        /// F1401_s the type of the get parcel.
        /// </summary>
        /// <param name="parcelSearchXml">The parcel search XML.</param>
        /// <returns>F1401ParcelSearch</returns>
        public static F1401ParcelSearch F1401_GetSearchResult(string parcelSearchXml)
        {
            if (WSHelper.IsOnLineMode)
            {
                string parcelSearchData;
                F1401ParcelSearch parcelSearchDataSet = new F1401ParcelSearch();
                parcelSearchData = terraScanService.F1401_GetSearchResult(parcelSearchXml);
                parcelSearchDataSet.ReadXml(Utilities.SharedFunctions.XmlParser(parcelSearchData));
                return parcelSearchDataSet;
            }
            else
            {
                return Helper.F1401_GetSearchResult(parcelSearchXml);
            }
        }

        #endregion

        #region F3001 Object Management

        /// <summary>
        /// F3001_s the get object detail.
        /// </summary>
        /// <param name="objectId">The object id.</param>
        /// <returns>F3001ObjectManagementData</returns>
        public static F3001ObjectManagementData F3001_GetObjectDetail(int objectId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string objectManagementData;
                F3001ObjectManagementData objectManagementDataSet = new F3001ObjectManagementData();
                objectManagementData = terraScanService.F3001_GetObjectDetail(objectId);
                objectManagementDataSet.ReadXml(Utilities.SharedFunctions.XmlParser(objectManagementData));
                return objectManagementDataSet;
            }
            else
            {
                return Helper.F3001_GetObjectDetail(objectId);
            }
        }

        /// <summary>
        /// F3001_s the save object management.
        /// </summary>
        /// <param name="objectId">The object id.</param>
        /// <param name="objectItems">The objectItems.</param>
        /// <param name="userId">userId</param>
        /// <returns>Integer</returns>
        public static int F3001_SaveObjectManagement(int objectId, string objectItems, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F3001_SaveObjectManagement(objectId, objectItems, userId);
            }
            else
            {
                return Helper.F3001_SaveObjectManagement(objectId, objectItems, userId);
            }
        }

        /// <summary>
        /// F3001_s the delete object management.
        /// </summary>
        /// <param name="objectId">The object id.</param>
        /// <param name="userId">UserID</param>
        public static void F3001_DeleteObjectManagement(int objectId, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                terraScanService.F3001_DeleteObjectManagement(objectId, userId);
            }
            else
            {
                Helper.F3001_DeleteObjectManagement(objectId, userId);
            }
        }

        /// <summary>
        /// F3001_s the get parcel description.
        /// </summary>
        /// <param name="parcelId">The parcel id.</param>
        /// <returns>string</returns>
        public static string F3001_GetParcelDescription(int parcelId)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F3001_GetParcelDescription(parcelId);
            }
            else
            {
                return Helper.F3001_GetParcelDescription(parcelId);
            }
        }

        /// <summary>
        /// F3001_s the copy object.
        /// </summary>
        /// <param name="objectId">The object id.</param>
        /// <param name="objectXml">The object XML.</param>
        /// <param name="userId">UserID</param>
        /// <returns>int</returns>
        public static int F3001_CopyObject(int objectId, string objectXml, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F3001_CopyObject(objectId, objectXml, userId);
            }
            else
            {
                return Helper.F3001_CopyObject(objectId, objectXml, userId);
            }
        }

        #endregion

        #region F27080ExemptionDefinition

        /// <summary>
        /// F27080_s the list exemption type combo.
        /// </summary>
        /// <param name="applicationId">The application id.</param>
        /// <returns>DataSet</returns>
        public static F27080ExemptionDefinitionData F27080_ListExemptionTypeCombo(int applicationId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string excemptionTypeData;
                F27080ExemptionDefinitionData exemptionDefinitionData = new F27080ExemptionDefinitionData();
                excemptionTypeData = terraScanService.F27080_ListExemptionTypeCombo(applicationId);
                exemptionDefinitionData.ReadXml(Utilities.SharedFunctions.XmlParser(excemptionTypeData));
                return exemptionDefinitionData;
            }
            else
            {
                return Helper.F27080_ListExemptionTypeCombo(applicationId);
            }
        }

        /// <summary>
        /// F27080_FillExemptionTypeGrid
        /// </summary>
        /// <param name="exemptionId">exemptionId</param>
        /// <returns>dataset</returns>
        public static F27080ExemptionDefinitionData F27080_FillExemptionTypeGrid(int exemptionId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string excemptionTypeDataGrid;
                F27080ExemptionDefinitionData exemptionDefinitionData = new F27080ExemptionDefinitionData();
                excemptionTypeDataGrid = terraScanService.F27080_FillExemptionTypeGrid(exemptionId);
                exemptionDefinitionData.ReadXml(Utilities.SharedFunctions.XmlParser(excemptionTypeDataGrid));
                return exemptionDefinitionData;
            }
            else
            {
                return Helper.F27080_FillExemptionTypeGrid(exemptionId);
            }
        }

        /// <summary>
        /// F27080_SaveExemptionType
        /// </summary>
        /// <param name="exemptionId">The exemption id.</param>
        /// <param name="seniorExemption">Senior Excemption</param>
        /// <param name="exemptionType">Excemption Type</param>
        /// <param name="checkError">Check Error</param>
        /// <param name="userId">UserID</param>
        /// <returns>Integer</returns>
        public static int F27080_SaveExemptionType(int exemptionId, string seniorExemption, string exemptionType, int checkError, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F27080_SaveExemptionType(exemptionId, seniorExemption, exemptionType, checkError, userId);
            }
            else
            {
                return Helper.F27080_SaveExemptionType(exemptionId, seniorExemption, exemptionType, checkError, userId);
            }
        }

        #endregion

        #region F29530

        /// <summary>
        /// Get Associate Event Grid values
        /// </summary>
        /// <param name="eventId">Event Id</param>
        /// <returns>DataSet</returns>
        public static F29530EventAssociationData F29530_FillAssociationEventGrid(int eventId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string associationEvents;
                F29530EventAssociationData associationData = new F29530EventAssociationData();
                associationEvents = terraScanService.F29530_FillAssociationEventGrid(eventId);
                associationData.ReadXml(Utilities.SharedFunctions.XmlParser(associationEvents));
                return associationData;
            }
            else
            {
                return Helper.F29530_FillAssociationEventGrid(eventId);
            }
        }

        #endregion

        #region F29500ParcelSplit

        /// <summary>
        /// F29500_s the get base parcel value.
        /// </summary>
        /// <param name="parcelId">The parcel id.</param>
        /// <returns>F29500ParcelSplitData</returns>
        public static F29500ParcelSplitData F29500_GetBaseParcelValue(int parcelId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string parcelSplit;
                F29500ParcelSplitData parcelSplitDataSet = new F29500ParcelSplitData();
                parcelSplit = terraScanService.F29500_GetBaseParcelValue(parcelId);
                parcelSplitDataSet.ReadXml(Utilities.SharedFunctions.XmlParser(parcelSplit));
                return parcelSplitDataSet;
            }
            else
            {
                return Helper.F29500_GetBaseParcelValue(parcelId);
            }
        }

        /// <summary>
        /// F29500_s the parcel split load.
        /// </summary>
        /// <param name="eventId">The event id.</param>
        /// <returns>F29500ParcelSplitData</returns>
        public static F29500ParcelSplitData F29500_ParcelSplitLoad(int eventId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string parcelSplit;
                F29500ParcelSplitData parcelSplitDataSet = new F29500ParcelSplitData();
                parcelSplit = terraScanService.F29500_ParcelSplitLoad(eventId);
                parcelSplitDataSet.ReadXml(Utilities.SharedFunctions.XmlParser(parcelSplit));
                return parcelSplitDataSet;
            }
            else
            {
                return Helper.F29500_ParcelSplitLoad(eventId);
            }
        }

        /// <summary>
        /// F29500_s the save parcel split.
        /// </summary>
        /// <param name="splitDefinitionXml">The split definition XML.</param>
        /// <param name="splitHeaderXml">The split header XML.</param>
        /// <param name="parcelSplitXml">The parcel split XML.</param>
        /// <param name="parcelObjectXml">the parcel object XML.</param>
        /// <param name="cropXml">The Crop XML</param>
        /// <param name="userId">UserID</param>
        /// <returns>int</returns>
        public static int F29500_SaveParcelSplit(string splitDefinitionXml, string splitHeaderXml, string parcelSplitXml, string parcelObjectXml, string cropXml, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F29500_SaveParcelSplit(splitDefinitionXml, splitHeaderXml, parcelSplitXml, parcelObjectXml, cropXml, userId);
            }
            else
            {
                return Helper.F29500_SaveParcelSplit(splitDefinitionXml, splitHeaderXml, parcelSplitXml, parcelObjectXml, cropXml, userId);
            }
        }

        /// <summary>
        /// F29500_s the create parcel.
        /// </summary>
        /// <param name="splitId">The split id.</param>
        /// <param name="userId">UserID</param>
        /// <returns>Return message</returns>
        public static string F29500_CreateParcel(int splitId, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F29500_CreateParcel(splitId, userId);
            }
            else
            {
                return Helper.F29500_CreateParcel(splitId, userId);
            }
        }

        #endregion F29500ParcelSplit

        #region F36032 Land Codes

        #region F36032_ListLandItems

        /// <summary>
        /// F36032_s the list land items.
        /// </summary>
        /// <param name="rollYear">The roll year.</param>
        /// <returns>The landCodeDataSet.</returns> 
        public static F36032LandCodesData F36032_ListLandItems(int? rollYear)
        {
            if (WSHelper.IsOnLineMode)
            {
                string landCodesDataValue;
                F36032LandCodesData landCodesData = new F36032LandCodesData();
                landCodesDataValue = terraScanService.F36032_ListLandItems(rollYear);
                landCodesData.ReadXml(Utilities.SharedFunctions.XmlParser(landCodesDataValue));
                return landCodesData;
            }
            else
            {
                return Helper.F36032_ListLandItems(rollYear);
            }
        }

        #endregion F36032_ListLandItems

        #region F36032_ListLandCodeDetails

        /// <summary>
        /// F36032_s the list land code details.
        /// </summary>
        /// <returns>the landCodesDataSet</returns>
        public static F36032LandCodesData F36032_ListLandCodeDetails()
        {
            if (WSHelper.IsOnLineMode)
            {
                string landCodesDataValue;
                F36032LandCodesData landCodesData = new F36032LandCodesData();
                landCodesDataValue = terraScanService.F36032_ListLandCodeDetails();
                landCodesData.ReadXml(Utilities.SharedFunctions.XmlParser(landCodesDataValue));
                return landCodesData;
            }
            else
            {
                return Helper.F36032_ListLandCodeDetails();
            }
        }

        #endregion F36032_ListLandCodeDetails

        #region F36032_DeleteLandCode

        /// <summary>
        /// F36032_s the delete land code.
        /// </summary>
        /// <param name="landCodeId">The land code id.</param>
        /// <param name="userId">UserID</param>
        /// <returns>Integer Value</returns>
        public static int F36032_DeleteLandCode(int landCodeId, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F36032_DeleteLandCode(landCodeId, userId);
            }
            else
            {
                return Helper.F36032_DeleteLandCode(landCodeId, userId);
            }
        }

        #endregion F36032_DeleteLandCode

        #region F36032_SaveLandCodeDetails

        /// <summary>
        /// To save the land code deatils
        /// </summary>
        /// <param name="landCodeId">Land Code ID</param>
        /// <param name="landItems">Land Items</param>
        /// <param name="userId">UserID</param>
        /// <returns>integer value containing the save land Code Id</returns>
        public static int F36032_SaveLandCodeDetails(int? landCodeId, string landItems, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F36032_SaveLandCodeDetails(landCodeId, landItems, userId);
            }
            else
            {
                return Helper.F36032_SaveLandCodeDetails(landCodeId, landItems, userId);
            }
        }

        #endregion F36032_SaveLandCodeDetails

        #endregion F36032 Land Codes

        #region ParcelSaleTracking
        /// <summary>
        /// F29600_GetSeniorExemptionDetails
        /// </summary>
        /// <param name="eventId">eventId</param>
        /// <returns>f29600SeniorExemptData</returns>
        public static F29550ParcelSaleTracking F29550_GetParcelSaleTrackingDetails(int eventId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string parcelSaleTrackingDetails;
                DataSet tempDataSet = new DataSet();
                F29550ParcelSaleTracking parcelSaleTracking = new F29550ParcelSaleTracking();
                parcelSaleTrackingDetails = terraScanService.F29550_GetParcelSaleTrackingDetails(eventId);
                tempDataSet.ReadXml(Utilities.SharedFunctions.XmlParser(parcelSaleTrackingDetails));
                parcelSaleTracking.Tables.Add(tempDataSet.Tables[1].Clone());
                parcelSaleTracking.ReadXml(Utilities.SharedFunctions.XmlParser(parcelSaleTrackingDetails));
                return parcelSaleTracking;
            }
            else
            {
                DataSet tempDataSet = new DataSet();
                F29550ParcelSaleTracking parcelSaleTracking = new F29550ParcelSaleTracking();
                tempDataSet = Helper.F29550_GetParcelSaleTrackingDetails(eventId);
                parcelSaleTracking.Tables.Add(tempDataSet.Tables[1].Clone());
                return parcelSaleTracking;
            }
        }

        /// <summary>
        /// F29550_s the get parcel details.
        /// </summary>
        /// <param name="parcelIdDetails">The parcel id details.</param>
        /// <param name="newParcelId">The new parcel id.</param>
        /// <param name="saleId">The sale id.</param>
        /// <returns>ParcelSaleTracking dataset.</returns>
        public static F29550ParcelSaleTracking F29550_GetParcelDetails(string parcelIdDetails, int newParcelId, int saleId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string parcelSaleTrackingDetails;
                DataSet tempDataSet = new DataSet();
                F29550ParcelSaleTracking parcelSaleTracking = new F29550ParcelSaleTracking();
                parcelSaleTrackingDetails = terraScanService.F29550_GetParcelDetails(parcelIdDetails, newParcelId, saleId);
                tempDataSet.ReadXml(Utilities.SharedFunctions.XmlParser(parcelSaleTrackingDetails));
                parcelSaleTracking.Tables.Add(tempDataSet.Tables[0].Clone());
                parcelSaleTracking.Tables.Add(tempDataSet.Tables[1].Clone());
                parcelSaleTracking.ReadXml(Utilities.SharedFunctions.XmlParser(parcelSaleTrackingDetails));
                return parcelSaleTracking;
            }
            else
            {
                DataSet tempDataSet = new DataSet();
                F29550ParcelSaleTracking parcelSaleTracking = new F29550ParcelSaleTracking();
                tempDataSet = Helper.F29550_GetParcelDetails(parcelIdDetails, newParcelId, saleId);
                parcelSaleTracking.Tables.Add(tempDataSet.Tables[0].Clone());
                parcelSaleTracking.Tables.Add(tempDataSet.Tables[1].Clone());
                return parcelSaleTracking;
            }
        }

        /// <summary>
        /// F29600_GetSeniorExemptionDetails
        /// </summary>
        /// <returns>f29600SeniorExemptData</returns>
        public static F29550ParcelSaleTracking F29550_GetParcelSaleTrackingComboDetails()
        {
            if (WSHelper.IsOnLineMode)
            {
                string parcelSaleTrackingDetails;
                DataSet tempDataSet = new DataSet();
                F29550ParcelSaleTracking parcelSaleTracking = new F29550ParcelSaleTracking();
                parcelSaleTrackingDetails = terraScanService.F29550_GetParcelSaleTrackingComboDetails();
                tempDataSet.ReadXml(Utilities.SharedFunctions.XmlParser(parcelSaleTrackingDetails));
                parcelSaleTracking.Tables.Add(tempDataSet.Tables[0].Clone());
                parcelSaleTracking.Tables.Add(tempDataSet.Tables[1].Clone());
                parcelSaleTracking.Tables.Add(tempDataSet.Tables[2].Clone());
                parcelSaleTracking.Tables.Add(tempDataSet.Tables[3].Clone());
                parcelSaleTracking.ReadXml(Utilities.SharedFunctions.XmlParser(parcelSaleTrackingDetails));
                return parcelSaleTracking;
            }
            else
            {
                DataSet tempDataSet = new DataSet();
                F29550ParcelSaleTracking parcelSaleTracking = new F29550ParcelSaleTracking();
                tempDataSet = Helper.F29550_GetParcelSaleTrackingComboDetails();
                parcelSaleTracking.Tables.Add(tempDataSet.Tables[0].Clone());
                parcelSaleTracking.Tables.Add(tempDataSet.Tables[1].Clone());
                parcelSaleTracking.Tables.Add(tempDataSet.Tables[2].Clone());
                parcelSaleTracking.Tables.Add(tempDataSet.Tables[3].Clone());
                return parcelSaleTracking;
            }
        }

        /// <summary>
        /// F29600_GetSeniorExemptionDetails
        /// </summary>
        /// <param name="parcelDetails">parcelDetails</param>
        /// <returns>f29600SeniorExemptData</returns>
        public static F29550ParcelSaleTracking F29550_GetParcelsOwnerDetails(string parcelDetails)
        {
            if (WSHelper.IsOnLineMode)
            {
                string parcelSaleTrackingDetails;
                F29550ParcelSaleTracking parcelSaleTracking = new F29550ParcelSaleTracking();
                parcelSaleTrackingDetails = terraScanService.F29550_GetParcelsOwnerDetails(parcelDetails);
                parcelSaleTracking.ReadXml(Utilities.SharedFunctions.XmlParser(parcelSaleTrackingDetails));
                return parcelSaleTracking;
            }
            else
            {
                return Helper.F29550_GetParcelsOwnerDetails(parcelDetails);
            }
        }

        /// <summary>
        /// F29600_GetSeniorExemptionDetails
        /// </summary>
        /// <param name="saleId">Sale ID</param>
        /// <returns>f29600SeniorExemptData</returns>
        public static F29550ParcelSaleTracking F29550_GetPushOwner(int saleId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string parcelSaleTrackingDetails;
                F29550ParcelSaleTracking parcelSaleTracking = new F29550ParcelSaleTracking();
                parcelSaleTrackingDetails = terraScanService.F29550_GetPushOwner(saleId);
                parcelSaleTracking.ReadXml(Utilities.SharedFunctions.XmlParser(parcelSaleTrackingDetails));
                return parcelSaleTracking;
            }
            else
            {
                return Helper.F29550_GetPushOwner(saleId);
            }
        }

        /// <summary>
        /// F29600_saveSeniorExemptionDetails
        /// </summary>
        /// <param name="eventId">eventId</param>
        /// <param name="saleItems">Sale Items</param>
        /// <param name="parcelItems">Parcel Items</param>
        /// <param name="ownerItems">Owner Items</param>
        /// <param name="userId">UserID</param>
        /// <returns>Integer</returns>
        public static int F29550_saveParcelSaleDetails(int eventId, string saleItems, string parcelItems, string ownerItems, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F29550_saveParcelSaleDetails(eventId, saleItems, parcelItems, ownerItems, userId);
            }
            else
            {
                return Helper.F29550_saveParcelSaleDetails(eventId, saleItems, parcelItems, ownerItems, userId);
            }
        }

        #endregion ParcelSaleTracking

        #region SeniorExempt

        /// <summary>
        /// F29600_s the get senior exemption details.
        /// </summary>
        /// <param name="eventId">The event id.</param>
        /// <param name="userId">The user id.</param>
        /// <returns>The senior exemption dataset.</returns>
        public static F29600SeniorExemptData F29600_GetSeniorExemptionDetails(int eventId, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string seniorExemptDataDetails;
                F29600SeniorExemptData form29600SeniorExemptData = new F29600SeniorExemptData();
                seniorExemptDataDetails = terraScanService.F29600_GetSeniorExemptionDetails(eventId, userId);
                form29600SeniorExemptData.ReadXml(Utilities.SharedFunctions.XmlParser(seniorExemptDataDetails));
                return form29600SeniorExemptData;
            }
            else
            {
                return Helper.F29600_GetSeniorExemptionDetails(eventId, userId);
            }
        }

        /// <summary>
        /// F29600_GetSeniorExemptionCode
        /// </summary>
        /// <param name="effectiveDate">effectiveDate</param>
        /// <returns>f29600SeniorExemptData</returns>
        public static F29600SeniorExemptData F29600_GetSeniorExemptionCode(string effectiveDate)
        {
            if (WSHelper.IsOnLineMode)
            {
                string seniorExemptDataDetails;
                F29600SeniorExemptData form29600SeniorExemptData = new F29600SeniorExemptData();
                seniorExemptDataDetails = terraScanService.F29600_GetSeniorExemptionCode(effectiveDate);
                form29600SeniorExemptData.ReadXml(Utilities.SharedFunctions.XmlParser(seniorExemptDataDetails));
                return form29600SeniorExemptData;
            }
            else
            {
                return Helper.F29600_GetSeniorExemptionCode(effectiveDate);
            }
        }

        /// <summary>
        /// F29600_saveSeniorExemptionDetails
        /// </summary>
        /// <param name="eventId">eventId</param>
        /// <param name="seniorExemptDetails">seniorExemptDetails</param>
        /// <param name="userId">UserID</param>
        /// <returns>int</returns>
        public static int F29600_saveSeniorExemptionDetails(int eventId, string seniorExemptDetails, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F29600_saveSeniorExemptionDetails(eventId, seniorExemptDetails, userId);
            }
            else
            {
                return Helper.F29600_saveSeniorExemptionDetails(eventId, seniorExemptDetails, userId);
            }
        }

        #endregion SeniorExempt

        #region F27081 TIFDistrict

        /// <summary>
        /// F27081_s the get TIFDistrict details.
        /// </summary>
        /// <param name="TIFId">The TIF id.</param>
        /// <param name="userId">The user id.</param>
        /// <returns>The TIFDistrict dataset.</returns>
        public static F27081TIFDistrictData F27081_GetTIFDistrictDetails(int TIFIdDistId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string TIFDistrictDetails;
                F27081TIFDistrictData form27081TIFDistrictData = new F27081TIFDistrictData();
                TIFDistrictDetails = terraScanService.F27081_GetTIFDistrictDetails(TIFIdDistId);
                form27081TIFDistrictData.ReadXml(Utilities.SharedFunctions.XmlParser(TIFDistrictDetails));
                return form27081TIFDistrictData;
            }
            else
            {
                return Helper.F27081_GetTIFDistrictDetails(TIFIdDistId);
            }
        }


        /// <summary>
        /// F27081_saveTIFDistrictDetails
        /// </summary>
        /// <param name="TIFId">TIFId</param>
        /// <param name="TIFDetails">TIFDetails</param>
        /// <param name="userId">UserID</param>
        /// <returns>Integer</returns>
        public static int F27081_saveDistrictDetails(int? TIFIdDistId, string TIFDetails, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F27081_SaveTIFDistrictDetails(TIFIdDistId, TIFDetails, userId);
            }
            else
            {
                return Helper.F27081_SaveTIFDistrictDetails(TIFIdDistId, TIFDetails, userId);
            }
        }
        /// <summary>
        /// F27081_s the delete TIF district details.
        /// </summary>
        /// <param name="TIFIdDistId">The TIF id dist id.</param>
        /// <param name="userId">The user id.</param>
        public static string F27081_DeleteTIFDistrictDetails(int TIFIdDistId, int userId, bool IsReadyToDelete)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F27081_DeleteTIFDistrictDetails(TIFIdDistId, userId,IsReadyToDelete);
            }
            else
            {
                return Helper.F27081_DeleteTIFDistrictDetails(TIFIdDistId, userId,IsReadyToDelete);
            }
        }
        
        /// <summary>
        /// F27081_s the get TIF combo box details.
        /// </summary>
        /// <returns></returns>
        public static F27081TIFDistrictData F27081_GetTIFComboBoxDetails(int RollYear)
        {
            if (WSHelper.IsOnLineMode)
            {
                string TIFDistrictDetails;
                F27081TIFDistrictData form27081TIFDistrictData = new F27081TIFDistrictData();
                TIFDistrictDetails = terraScanService.F27081_GetTIFComboBoxDetails(RollYear);
                form27081TIFDistrictData.ReadXml(Utilities.SharedFunctions.XmlParser(TIFDistrictDetails));
                return form27081TIFDistrictData;
            }
            else
            {
                return Helper.F27081_GetTIFComboBoxDetails(RollYear);
            }
        }

        #endregion

        #region F34110TopDollarDetails

        /// <summary>
        /// F34110_s the get TopDollar details.
        /// </summary>
        /// <param name="TopDollarId">The TopDollar id.</param>
        /// <returns>The TopDollarDetails dataset.</returns>
        public static F34110TopDollarData F34110_GetTopDollarDetails(int TopDollarId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string TopDollarDetails;
                F34110TopDollarData form34110TopDollarData = new F34110TopDollarData();
                TopDollarDetails = terraScanService.F34110_GetTopDollarDetails(TopDollarId);
                form34110TopDollarData.ReadXml(Utilities.SharedFunctions.XmlParser(TopDollarDetails));
                return form34110TopDollarData;
            }
            else
            {
                return Helper.F34110_GetTopDollarDetails(TopDollarId);
            }
        }

        /// <summary>
        /// F34110_saveTopDollarDetails
        /// </summary>
        /// <param name="TopDollarId">TopDollarId</param>
        /// <param name="TopDollarDetails">TopDollarDetails</param>
        /// <param name="userId">UserID</param>
        /// <returns>Integer</returns>
        public static int F34110_saveTopDollarDetails(int? TopDollarId, string TopDollarDetails, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F34110_SaveTopDollarDetails(TopDollarId, TopDollarDetails, userId);
            }
            else
            {
                return Helper.F34110_SaveTopDollarDetails(TopDollarId, TopDollarDetails, userId);
            }
        }

        /// <summary>
        /// F39110s the delete TopDollar details.
        /// </summary>
        /// <param name="TopDollarId">The TopDollar id.</param>
        /// <param name="userId">The user id.</param>
        public static void F34110_DeleteTopDollarDetails(int TopDollarId, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                terraScanService.F34110_DeleteTopDollarDetails(TopDollarId, userId);
            }
            else
            {
                Helper.F34110_DeleteTopdDollarDetails(TopDollarId, userId);
            }
        }

        /// <summary>
        /// F34110_sCalculate non Crop top Dollar
        /// </summary>
        /// <param name="CropDollar">CropDollar.</param>
        /// <param name="CountyFactor">CountyFactor.</param>
        /// <returns>TopDollarDetails.</returns>
        public static F34110TopDollarData F34110_CropTopDollar(decimal CropDollar, decimal CountyFactor)
        {
            if (WSHelper.IsOnLineMode)
            {
                string TopDollarDetails;
                F34110TopDollarData form34110TopDollarData = new F34110TopDollarData();
                TopDollarDetails = terraScanService.F34110_CropTopDollar(CropDollar, CountyFactor);
                form34110TopDollarData.ReadXml(Utilities.SharedFunctions.XmlParser(TopDollarDetails));
                return form34110TopDollarData;
            }
            else
            {
                return Helper.F34110_CropTopDollar(CropDollar, CountyFactor);
            }
        }

        #endregion

        #region F34100AglandDetails

        /// <summary>
        /// F34100_s the get AglandUse details.
        /// </summary>
        /// <param name="AglandId">The Agland id.</param>
        /// <returns>The AglandDetails dataset.</returns>
        public static F34100AglandUseData F34100_GetAglandDetails(int AglandId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string AglandUseDetails;
                F34100AglandUseData form34100AglandUseData = new F34100AglandUseData();
                AglandUseDetails = terraScanService.F34100_GetAglandDetails(AglandId);
                form34100AglandUseData.ReadXml(Utilities.SharedFunctions.XmlParser(AglandUseDetails));
                return form34100AglandUseData;
            }
            else
            {
                return Helper.F34100_GetAglandDetails(AglandId);
            }
        }




        /// <summary>
        /// F34100_saveAglandUseDetails
        /// </summary>
        /// <param name="AglandId">AglandId</param>
        /// <param name="AglandDetails">AglandDetails</param>
        /// <param name="userId">UserID</param>
        /// <returns>Integer</returns>
        public static int F34100_saveAglandDetails(int? AglandId, string AglandDetails, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F34100_SaveAglandDetails(AglandId, AglandDetails, userId);
            }
            else
            {
                return Helper.F34100_SaveAglandDetails(AglandId, AglandDetails, userId);
            }
        }

        /// <summary>
        /// F391000s the delete Agland details.
        /// </summary>
        /// <param name="AglandId">The Agland id.</param>
        /// <param name="userId">The user id.</param>
        public static void F34100_DeleteAglandDetails(int Agland, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                terraScanService.F34100_DeleteAglandDetails(Agland, userId);
            }
            else
            {
                Helper.F34100_DeleteAglandDetails(Agland, userId);
            }
        }
        #endregion

        #region F29660 TIFEvents

        /// <summary>
        /// F29660_s the get TIFEvent details.
        /// </summary>
        /// <param name="EventId">The Event id.</param>
        /// <param name="userId">The user id.</param>
        /// <returns>The TIFEvent dataset.</returns>
        public static F29660TIFEventData F29660_GetTIFEventDetails(int EventId, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string TIFEventDetails;
                F29660TIFEventData form29660TIFEventData = new F29660TIFEventData();
                TIFEventDetails = terraScanService.F29660_GetTIFEventDetails(EventId, userId);
                form29660TIFEventData.ReadXml(Utilities.SharedFunctions.XmlParser(TIFEventDetails));
                return form29660TIFEventData;
            }
            else
            {
                return Helper.F29660_GetTIFEventDetails(EventId, userId);
            }
        }


        /// <summary>
        /// F29660_saveTIFEventDetails
        /// </summary>
        ///<param name="EventId">EventId</param>
        /// <param name="TIFId">TIFId</param>
        /// <param name="BaseValue">BaseValue</param>
        /// <param name="userId">UserID</param>
        /// <returns>Integer</returns>
        public static int F29660_saveEventDetails(int? EventId, int TIFId, decimal BaseValue, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F29660_SaveTIFEventDetails(EventId, TIFId, BaseValue, userId);
            }
            else
            {
                return Helper.F29660_SaveTIFEventDetails(EventId, TIFId, BaseValue, userId);
            }
        }

        #endregion

        #region F29510ParcelCombine

        /// <summary>
        /// Get Base Parcel Value
        /// </summary>
        /// <param name="eventId">EventID</param>
        /// <returns>DataSet</returns>
        public static F29510ParcelCombineData F29510_GetBaseParcelValue(int eventId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string baseParcelValue;
                F29510ParcelCombineData getbaseParcelData = new F29510ParcelCombineData();
                baseParcelValue = terraScanService.F29510_GetBaseParcelValue(eventId);
                getbaseParcelData.ReadXml(Utilities.SharedFunctions.XmlParser(baseParcelValue));
                return getbaseParcelData;
                ////return terraScanService.F29510_GetBaseParcelValue(eventId);
            }
            else
            {
                return Helper.F29510_GetBaseParcelValue(eventId);
            }
        }

        /// <summary>
        /// Get Combine Parcel Details
        /// </summary>
        /// <param name="parcelId">ParcelID</param>
        /// <returns>String</returns>
        public static DataSet F29510_GetCombineParcelDetails(int parcelId)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F29510_GetCombineParcelDetails(parcelId);
            }
            else
            {
                return Helper.F29510_GetCombineParcelDetails(parcelId);
            }
        }

        /// <summary>
        /// Save Combine Parcel Details
        /// </summary>
        /// <param name="combineId">CombineID</param>
        /// <param name="parcelNumber">ParcelNumber</param>
        /// <param name="combineItems">CombineItems</param>
        /// <param name="userId">UserID</param>
        /// <returns>int</returns>
        public static int F29510_SaveCombineParcelDetails(int? combineId, string parcelNumber, string combineItems, int userId,bool IsAttachment,bool IsComment,bool IsPermit,bool IsAssociation,bool IsNewConstruction)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F29510_SaveCombineParcelDetails(combineId, parcelNumber, combineItems, userId, IsAttachment, IsComment, IsPermit, IsAssociation, IsNewConstruction);
            }
            else
            {
                return Helper.F29510_SaveCombineParcelDetails(combineId, parcelNumber, combineItems, userId, IsAttachment, IsComment, IsPermit, IsAssociation, IsNewConstruction);
            }
        }

        /// <summary>
        /// Create Combine Parcel Value
        /// </summary>
        /// <param name="combineId">CombineID</param>
        /// <param name="eventId">EventID</param>
        /// <param name="parcelNumber">ParcelNumber</param>
        /// <param name="userId">UserID</param>
        /// <returns>F29510ParcelCombineData</returns>
        public static F29510ParcelCombineData F29510_CreateCombinedParcel(int combineId, string eventId, string parcelNumber, int userId, bool IsAttachment, bool IsComment, bool IsPermit, bool IsAssociation, bool IsNewConstruction)
        {
            if (WSHelper.IsOnLineMode)
            {
                string returnValue;
                F29510ParcelCombineData returnData = new F29510ParcelCombineData();
                returnValue = terraScanService.F29510_CreateCombinedParcel(combineId, eventId, parcelNumber, userId, IsAttachment, IsComment, IsPermit, IsAssociation, IsNewConstruction);
                returnData.ReadXml(Utilities.SharedFunctions.XmlParser(returnValue));
                return returnData;
                //return terraScanService.F29510_CreateCombinedParcel(combineId, eventId, parcelNumber, userId);
            }
            else
            {
                return Helper.F29510_CreateCombinedParcel(combineId, eventId, parcelNumber, userId, IsAttachment, IsComment, IsPermit, IsAssociation, IsNewConstruction);
            }
        }

        #endregion

        #region F36033 Land Code Values

        #region F36033_ListLandCodeValues

        /// <summary>
        /// To List Land Code Values details.
        /// </summary>
        /// <returns>Returns typed dataset containing the entire land code values deatils </returns>
        public static F36033LandCodesValuesData F36033_ListLandCodeValues()
        {
            if (WSHelper.IsOnLineMode)
            {
                string landCodesValuesDataValue;
                F36033LandCodesValuesData landCodesValuesData = new F36033LandCodesValuesData();
                landCodesValuesDataValue = terraScanService.F36033_ListLandCodeValues();
                landCodesValuesData.ReadXml(Utilities.SharedFunctions.XmlParser(landCodesValuesDataValue));
                return landCodesValuesData;
            }
            else
            {
                return Helper.F36033_ListLandCodeValues();
            }
        }

        #endregion F36033_ListLandCodeValues

        public static F36035LandData F36035_ListShapeDetails()
        {
            if (WSHelper.IsOnLineMode)
            {
                string landShapeValues;
                F36035LandData depreciationData = new F36035LandData();
                landShapeValues = terraScanService.F36035_ListShapeDetails();
                depreciationData.ReadXml(Utilities.SharedFunctions.XmlParser(landShapeValues));
                return depreciationData;
            }
            else
            {
                return Helper.F36035_ListShapeDetails();
            }
        }

        #region F36033_ListIndividualLandCodeValuesItems

        /// <summary>
        /// To List Individual Land Code Values Items.
        /// </summary>
        /// <returns>Returns Typed Dataset containing following datatable:
        /// GetAppRollYear -- containing the application roll year
        /// ListNeighborhoodType -- containing the Neighborhood Type
        /// ListLandCode -- containing the LandCode
        /// ListUnitType -- containing the Unit type
        /// </returns>
        public static F36033LandCodesValuesData F36033_ListIndividualLandCodeValuesItems()
        {
            if (WSHelper.IsOnLineMode)
            {
                string landCodesValuesDataValue;
                F36033LandCodesValuesData landCodesValuesData = new F36033LandCodesValuesData();
                landCodesValuesDataValue = terraScanService.F36033_ListIndividualLandCodeValuesItems();
                landCodesValuesData.ReadXml(Utilities.SharedFunctions.XmlParser(landCodesValuesDataValue));
                return landCodesValuesData;
            }
            else
            {
                return Helper.F36033_ListIndividualLandCodeValuesItems();
            }
        }

        #endregion F36033_ListIndividualLandCodeValuesItems

        #region F36033_ListNeighborhood
        /// <summary>
        /// F36033_s the type of the list neighborhood.
        /// </summary>
        /// <param name="rollYear">The roll year.</param>
        /// <returns>ListNeighborhoodType -- containing the Neighborhood Type</returns>
        public static F36033LandCodesValuesData F36033_ListNeighborhoodType(int rollYear)
        {
            if (WSHelper.IsOnLineMode)
            {
                string landCodesValuesDataValue;
                F36033LandCodesValuesData landCodesValuesData = new F36033LandCodesValuesData();
                landCodesValuesDataValue = terraScanService.F36033_ListNeighborhoodType(rollYear);
                landCodesValuesData.ReadXml(Utilities.SharedFunctions.XmlParser(landCodesValuesDataValue));
                return landCodesValuesData;
            }
            else
            {
                return Helper.F36033_ListNeighborhoodType(rollYear);
            }
        }
        #endregion F36033_ListNeighborhood

        #region F36033_DeleteLandCodeValue

        /// <summary>
        /// To Delete land code value.
        /// </summary>
        /// <param name="luvId">The luv id.</param>
        /// <param name="userId">UserID</param>
        /// <returns>Integer Value</returns>
        public static int F36033_DeleteLandCodevalue(int luvId, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F36033_DeleteLandCodevalue(luvId, userId);
            }
            else
            {
                return Helper.F36033_DeleteLandCodevalue(luvId, userId);
            }
        }

        #endregion F36033_DeleteLandCodeValue

        #region F36033_SaveLandCodeValue

        /// <summary>
        /// To save land code value.
        /// </summary>
        /// <param name="landUnqiueId">The land unqiue id.</param>
        /// <param name="landValueItems">The land value items.</param>
        /// <param name="userId">UserID</param>
        /// <returns>saved key id</returns>
        public static int F36033_SaveLandCodeValue(int? landUnqiueId, string landValueItems, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F36033_SaveLandCodeValue(landUnqiueId, landValueItems, userId);
            }
            else
            {
                return Helper.F36033_SaveLandCodeValue(landUnqiueId, landValueItems, userId);
            }
        }

        #endregion F36033_SaveLandCodeValue

        #endregion F36033 Land Code Values

        #region F39133 Land Code Values

        #region F39133_ListLandCodeValues

        /// <summary>
        /// To List Land Code Values details.
        /// </summary>
        /// <returns>Returns typed dataset containing the entire land code values deatils </returns>
        public static F39133LandCodeValueData F39133_ListLandCodeValues()
        {
            if (WSHelper.IsOnLineMode)
            {
                string landCodesValuesDataValue;
                F39133LandCodeValueData landCodesValuesData = new F39133LandCodeValueData();
                landCodesValuesDataValue = terraScanService.F39133_ListLandCodeValues();
                landCodesValuesData.ReadXml(Utilities.SharedFunctions.XmlParser(landCodesValuesDataValue));
                return landCodesValuesData;
            }
            else
            {
                return Helper.F39133_ListLandCodeValues();
            }
        }

        #endregion F39133_ListLandCodeValues

        #region F39133_ListIndividualLandCodeValuesItems

        /// <summary>
        /// To List Individual Land Code Values Items.
        /// </summary>
        /// <returns>Returns Typed Dataset containing following datatable:
        /// GetAppRollYear -- containing the application roll year
        /// ListNeighborhoodType -- containing the Neighborhood Type
        /// ListLandCode -- containing the LandCode
        /// ListUnitType -- containing the Unit type
        /// </returns>
        public static F39133LandCodeValueData F39133_ListIndividualLandCodeValuesItems()
        {
            if (WSHelper.IsOnLineMode)
            {
                string landCodesValuesDataValue;
                F39133LandCodeValueData landCodesValuesData = new F39133LandCodeValueData();
                landCodesValuesDataValue = terraScanService.F39133_ListIndividualLandCodeValuesItems();
                landCodesValuesData.ReadXml(Utilities.SharedFunctions.XmlParser(landCodesValuesDataValue));
                return landCodesValuesData;
            }
            else
            {
                return Helper.F39133_ListIndividualLandCodeValuesItems();
            }
        }

        #endregion F39133_ListIndividualLandCodeValuesItems

        #region F39133_ListNeighborhood
        /// <summary>
        /// F36033_s the type of the list neighborhood.
        /// </summary>
        /// <param name="rollYear">The roll year.</param>
        /// <returns>ListNeighborhoodType -- containing the Neighborhood Type</returns>
        public static F39133LandCodeValueData F39133_ListNeighborhoodType(int rollYear)
        {
            if (WSHelper.IsOnLineMode)
            {
                string landCodesValuesDataValue;
                F39133LandCodeValueData landCodesValuesData = new F39133LandCodeValueData();
                landCodesValuesDataValue = terraScanService.F39133_ListNeighborhoodType(rollYear);
                landCodesValuesData.ReadXml(Utilities.SharedFunctions.XmlParser(landCodesValuesDataValue));
                return landCodesValuesData;
            }
            else
            {
                return Helper.F39133_ListNeighborhoodType(rollYear);
            }
        }
        #endregion F39133_ListNeighborhood

        #region F39133_DeleteLandCodeValue

        /// <summary>
        /// To Delete land code value.
        /// </summary>
        /// <param name="luvId">The luv id.</param>
        /// <param name="userId">UserID</param>
        /// <returns>Integer Value</returns>
        public static int F39133_DeleteLandCodevalue(int luvId, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F39133_DeleteLandCodevalue(luvId, userId);
            }
            else
            {
                return Helper.F39133_DeleteLandCodevalue(luvId, userId);
            }
        }

        #endregion F39133_DeleteLandCodeValue

        #region F39133_SaveLandCodeValue

        /// <summary>
        /// To save land code value.
        /// </summary>
        /// <param name="landUnqiueId">The land unqiue id.</param>
        /// <param name="landValueItems">The land value items.</param>
        /// <param name="userId">UserID</param>
        /// <returns>saved key id</returns>
        public static int F39133_SaveLandCodeValue(int? landUnqiueId, string landValueItems, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F39133_SaveLandCodeValue(landUnqiueId, landValueItems, userId);
            }
            else
            {
                return Helper.F39133_SaveLandCodeValue(landUnqiueId, landValueItems, userId);
            }
        }

        #endregion F39133_SaveLandCodeValue

        #region CalculateNonCropValues
        /// <summary>
        /// To Calculate Non Crop Values.
        /// </summary>
        /// <param name="rollYear">rollYear</param>
        /// <param name="CropRate">CropRate</param>
        /// <param name="NonCropRate">NonCropRate</param>
        /// <returns>Returns typed dataset containing the entire land code values deatils </returns>
        public static F39133LandCodeValueData F39133_CalculateNonCropValue(int rollYear, decimal? CropRate, decimal? NonCropRate)
        {
            if (WSHelper.IsOnLineMode)
            {
                string landCodesValuesDataValue;
                F39133LandCodeValueData landCodesValuesData = new F39133LandCodeValueData();
                landCodesValuesDataValue = terraScanService.F39133_CalculateNonCropValue(rollYear, CropRate, NonCropRate);
                landCodesValuesData.ReadXml(Utilities.SharedFunctions.XmlParser(landCodesValuesDataValue));
                return landCodesValuesData;
            }
            else
            {
                return Helper.F39133_CalculateNonCropValue(rollYear, CropRate, NonCropRate);
            }
        }

        #endregion CalculateNonCropValues

        #endregion F39133 Land Code Values

        #region F36035 Land Details

        #region F36035 GetLand Details

        /// <summary>
        /// ListLandDetails
        /// </summary>
        /// <param name="valueSliceId">The value slice id.</param>
        /// <returns>LandDetails</returns>
        public static F36035LandData F36035_ListLandDetails(int valueSliceId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string landDetailsValue;
                F36035LandData landDetails = new F36035LandData();
                landDetailsValue = terraScanService.F36035_ListLandDetails(valueSliceId);
                landDetails.ReadXml(Utilities.SharedFunctions.XmlParser(landDetailsValue));
                return landDetails;
            }
            else
            {
                return Helper.F36035_ListLandDetails(valueSliceId);
            }
        }

        #endregion F36035 GetLand Details

        #region F36035 GetLandType Details

        /// <summary>
        /// List LandTypeDetails
        /// </summary>
        /// <param name="valueSliceId">The value slice id.</param>
        /// <returns>LandDetails</returns>
        public static F36035LandData F36035_ListLandTypeDetails(int valueSliceId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string landTypeDetailsValue;
                F36035LandData landTypeDetails = new F36035LandData();
                landTypeDetailsValue = terraScanService.F36035_ListLandTypeDetails(valueSliceId);
                landTypeDetails.ReadXml(Utilities.SharedFunctions.XmlParser(landTypeDetailsValue));
                return landTypeDetails;
            }
            else
            {
                return Helper.F36035_ListLandTypeDetails(valueSliceId);
            }
        }

        #endregion F36035 GetLand Details

        #region Insert LandDetails

        /// <summary>
        /// F36035_s the insert land details.
        /// </summary>
        /// <param name="luid">The luid.</param>
        /// <param name="landUnitItems">The land unit items.</param>
        /// <param name="influenceItems">The influence items.</param>
        /// <param name="userId">The user id.</param>
        /// <returns>LandDetails</returns>
        public static int F36035_InsertLandDetails(int luid, string landUnitItems, string influenceItems, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F36035_InsertLandDetails(luid, landUnitItems, influenceItems, userId);
            }
            else
            {
                return Helper.F36035_InsertLandDetails(luid, landUnitItems, influenceItems, userId);
            }
        }

        #endregion Insert LandDetails

        #region F36035 DeleteLandDetails

        /// <summary>
        /// To Delete LandDetails.
        /// </summary>
        /// <param name="luid">The lUID.</param>    
        /// <param name="userId">UserID</param>
        public static void F36035_DeleteLandDetails(int luid, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                terraScanService.F36035_DeleteLandDetails(luid, userId);
            }
            else
            {
                Helper.F36035_DeleteLandDetails(luid, userId);
            }
        }

        #endregion F36035 DeleteLandDetails

        #region GetLandCode

        /// <summary>
        /// F36035_s the get land code.
        /// </summary>
        /// <param name="rollYear">The roll year.</param>
        /// <param name="landType1">The land type1.</param>
        /// <param name="landType2">The land type2.</param>
        /// <param name="landType3">The land type3.</param>
        /// <param name="valuesliceId">The valueslice id.</param>
        /// <returns>The land dataset.</returns>
        public static F36035LandData F36035_GetLandCode(int rollYear, int landType1, int landType2, int landType3, int valuesliceId, int? AglandID)
        {
            if (WSHelper.IsOnLineMode)
            {
                string landDetailsValue;
                F36035LandData landDetails = new F36035LandData();
                landDetailsValue = terraScanService.F36035_GetLandCode(rollYear, landType1, landType2, landType3, valuesliceId, AglandID);
                landDetails.ReadXml(Utilities.SharedFunctions.XmlParser(landDetailsValue));
                return landDetails;
            }
            else
            {
                return Helper.F36035_GetLandCode(rollYear, landType1, landType2, landType3, valuesliceId, AglandID);
            }
        }

        #endregion GetLandCode

        #region GetLandCode BaseValue

        /// <summary>
        /// GetLandCode BaseValue
        /// </summary>
        /// <param name="landCode">landCode</param>    
        /// <param name="valueSliceId">Value Slice ID</param>
        /// <returns>LandDetails</returns>
        public static F36035LandData F36035_GetLandCodeBaseValue(string landCode, int valueSliceId, int? AglandID)
        {
            if (WSHelper.IsOnLineMode)
            {
                string landDetailsValue;
                F36035LandData landDetails = new F36035LandData();
                landDetailsValue = terraScanService.F36035_GetLandCodeBaseValue(landCode, valueSliceId, AglandID);
                landDetails.ReadXml(Utilities.SharedFunctions.XmlParser(landDetailsValue));
                return landDetails;
            }
            else
            {
                return Helper.F36035_GetLandCodeBaseValue(landCode, valueSliceId, AglandID);
            }
        }

        #endregion GetLandCode BaseValue

        #region List Influence Types

        /// <summary>
        /// F36035_s the list influence type.
        /// </summary>
        /// <param name="valueSliceId">The value slice id.</param>
        /// <returns>The influence type dataset</returns>
        public static F36035LandData F36035_ListInfluenceType(int valueSliceId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string landDetailsValue;
                F36035LandData landDetails = new F36035LandData();
                landDetailsValue = terraScanService.F36035_ListInfluenceType(valueSliceId);
                landDetails.ReadXml(Utilities.SharedFunctions.XmlParser(landDetailsValue));
                return landDetails;
            }
            else
            {
                return Helper.F36035_ListInfluenceType(valueSliceId);
            }
        }

        #endregion List Influence Types

        #region List Land Program

        /// <summary>
        /// F36035_s the list land program.
        /// </summary>
        /// <returns>The land program dataset.</returns>
        public static F36035LandData F36035_ListLandProgram()
        {
            if (WSHelper.IsOnLineMode)
            {
                string landDetailsValue;
                F36035LandData landDetails = new F36035LandData();
                landDetailsValue = terraScanService.F36035_ListLandProgram();
                landDetails.ReadXml(Utilities.SharedFunctions.XmlParser(landDetailsValue));
                return landDetails;
            }
            else
            {
                return Helper.F36035_ListLandProgram();
            }
        }

        #endregion List Land Program

        #region Get UseBaseDollarPerUnit Value

        /// <summary>
        /// F36035_s the get use base dollar per unit.
        /// </summary>
        /// <param name="programId">The program id.</param>
        /// <param name="useAdjustmentType">Type of the use adjustment.</param>
        /// <param name="useAdjustment">The use adjustment.</param>
        /// <param name="useBaseValue">The use base value.</param>
        /// <param name="rollYear">The roll year.</param>
        /// <param name="useMultiplier">The use multiplier.</param>
        /// <returns>The use base dollar per unit value.</returns>
        public static F36035LandData F36035_GetUseBaseDollarPerUnit(byte programId, byte useAdjustmentType, string useAdjustment, decimal useBaseValue, int rollYear, decimal useMultiplier, decimal units)
        {
            if (WSHelper.IsOnLineMode)
            {
                string landDetailsValue;
                F36035LandData landDetails = new F36035LandData();
                landDetailsValue = terraScanService.F36035_GetUseBaseDollarPerUnit(programId, useAdjustmentType, useAdjustment, useBaseValue, rollYear, useMultiplier, units);
                landDetails.ReadXml(Utilities.SharedFunctions.XmlParser(landDetailsValue));
                return landDetails;
            }
            else
            {
                return Helper.F36035_GetUseBaseDollarPerUnit(programId, useAdjustmentType, useAdjustment, useBaseValue, rollYear, useMultiplier, units);
            }
        }

        #endregion Get UseBaseDollarPerUnit Value

        #region Execute VFormula

        /// <summary>
        /// F36035_s the execute V formula.
        /// </summary>
        /// <param name="vformula">The vformula.</param>
        /// <param name="units">The units.</param>
        /// <returns></returns>
        public static DataSet F36035_ExecuteVFormula(string vformula, decimal units)
        {
            if (WSHelper.IsOnLineMode)
            {
                string landDetailsValue;
                DataSet landDetails = new DataSet();
                landDetailsValue = terraScanService.F36035_ExecuteVFormula(vformula, units);
                landDetails.ReadXml(Utilities.SharedFunctions.XmlParser(landDetailsValue));
                return landDetails;
            }
            else
            {
                return Helper.F36035_ExecuteVFormula(vformula, units);
            }
        }

        #endregion Execute VFormula

        #endregion F36035 Land Details

        #region F39135 Land Details

        #region Land Details
        /// <summary>
        /// ListLandDetails
        /// </summary>
        /// <param name="valueSliceId">The value slice id.</param>
        /// <returns>LandDetails</returns>
        public static F39135LandData F39135_LandDetails(int valueSliceId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string landDetailsValue;
                F39135LandData landDetails = new F39135LandData();
                landDetailsValue = terraScanService.F39135_LandDetails(valueSliceId);
                landDetails.ReadXml(Utilities.SharedFunctions.XmlParser(landDetailsValue));
                return landDetails;
            }
            else
            {
                return Helper.F39135_LandDetails(valueSliceId);
            }
        }

        #endregion

        #region F39135 LandType Details

        /// <summary>
        /// List LandTypeDetails
        /// </summary>
        /// <param name="valueSliceId">The value slice id.</param>
        /// <returns>LandDetails</returns>
        public static F39135LandData F39135_Landtypes(int valueSliceId, int rollYear)
        {
            if (WSHelper.IsOnLineMode)
            {
                string landTypeDetailsValue;
                F39135LandData landTypeDetails = new F39135LandData();
                landTypeDetailsValue = terraScanService.F39135_Landtypes(valueSliceId, rollYear);
                landTypeDetails.ReadXml(Utilities.SharedFunctions.XmlParser(landTypeDetailsValue));
                return landTypeDetails;
            }
            else
            {
                return Helper.F39135_Landtypes(valueSliceId, rollYear);
            }
        }



        #endregion F39135 LandType Details

        #region LandUse
        /// <summary>
        /// Gets the F39135_LandUseDetails        
        /// </summary>
        public static F39135LandData F39135_LandUseTypes(int valueSliceId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string landUseValue;
                F39135LandData landTypeDetails = new F39135LandData();
                landUseValue = terraScanService.F39135_LandUseTypes(valueSliceId);
                landTypeDetails.ReadXml(Utilities.SharedFunctions.XmlParser(landUseValue));
                return landTypeDetails;
            }
            else
            {
                return Helper.F39135_LandUseTypes(valueSliceId);
            }
        }
        #endregion LandUse

        #region F39135_GetLandTotals
        /// <summary>
        /// Gets the F39135_LandUseDetails        
        /// </summary>
        public static F39135LandData F39135_GetLandTotals(int valueSliceId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string landUseValue;
                F39135LandData landTypeDetails = new F39135LandData();
                landUseValue = terraScanService.F39135_GetLandTotals(valueSliceId);
                landTypeDetails.ReadXml(Utilities.SharedFunctions.XmlParser(landUseValue));
                return landTypeDetails;
            }
            else
            {
                return Helper.F39135_GetLandTotals(valueSliceId);
            }
        }
        #endregion F39135_GetLandTotals

        #region  GetWeightedRating
        /// <summary>
        /// F39135_s the get WeightedRating.
        /// </summary>
        public static F39135LandData F39135_WeightedRating(string landCode, decimal units, int? landUse, int valueSliceId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string weightedRatingValue;
                F39135LandData landTypeDetails = new F39135LandData();
                weightedRatingValue = terraScanService.F39135_WeightedRating(landCode, units, landUse, valueSliceId);
                landTypeDetails.ReadXml(Utilities.SharedFunctions.XmlParser(weightedRatingValue));
                return landTypeDetails;
            }
            else
            {
                return Helper.F39135_WeightedRating(landCode, units, landUse, valueSliceId);
            }
        }

        #endregion GetWeightedRating

        #region CalculatedBaseValue
        /// <summary>
        /// F39135_s the get CalculatedBaseValue.
        /// </summary>

        public static F39135LandData F39135_CalculatedBaseValue(string LandCode, int adjustmentTypeID, decimal units, decimal baseCostUnit, decimal adjustment, int? AglandID, int valueSliceId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string calculatedBaseValue;
                F39135LandData landTypeDetails = new F39135LandData();
                calculatedBaseValue = terraScanService.F39135_CalculatedBaseValue(LandCode, adjustmentTypeID, units, baseCostUnit, adjustment, AglandID, valueSliceId);
                landTypeDetails.ReadXml(Utilities.SharedFunctions.XmlParser(calculatedBaseValue));
                return landTypeDetails;
            }
            else
            {
                return Helper.F39135_CalculatedBaseValue(LandCode, adjustmentTypeID, units, baseCostUnit, adjustment, AglandID, valueSliceId);
            }
        }



        #endregion CalculatedBaseValue

        #region Insert LandDetails

        /// <summary>
        /// F39135_s the insert land details.
        /// </summary>
        /// <param name="luid">The luid.</param>
        /// <param name="landUnitItems">The land unit items.</param>
        /// <param name="influenceItems">The influence items.</param>
        /// <param name="userId">The user id.</param>
        /// <returns>LandDetails</returns>
        public static int F39135_InsertLandDetails(int luid, string landUnitItems, string influenceItems, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F39135_InsertLandDetails(luid, landUnitItems, influenceItems, userId);
            }
            else
            {
                return Helper.F39135_InsertLandDetails(luid, landUnitItems, influenceItems, userId);
            }
        }

        #endregion Insert LandDetails

        #region List Adjustment Type
        /// <summary>
        /// F39135_s the List Adjustment Type
        /// </summary>
        public static F39135LandData F39135_adjustmentTypes()
        {
            if (WSHelper.IsOnLineMode)
            {
                string adjustmentType;
                F39135LandData landTypeDetails = new F39135LandData();
                adjustmentType = terraScanService.F39135_AdjustmentType();
                landTypeDetails.ReadXml(Utilities.SharedFunctions.XmlParser(adjustmentType));
                return landTypeDetails;
            }
            else
            {
                return Helper.F39135_AdjustmentType();
            }
        }

        #endregion

        #endregion F39135 Land Details

        #region F81001 Event Fee Catalog

        #region F81001_GetEventData

        /// <summary>
        /// Get Event Fee Catalog
        /// </summary>
        /// <param name="feeCatId">feeCatId</param>
        /// <returns>DataSet</returns>
        public static F81001FeeCatalogData F81001_GetEventFeeCatalog(int feeCatId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string eventFeeCatalogValue;
                F81001FeeCatalogData getEventFeeCatalogData = new F81001FeeCatalogData();
                eventFeeCatalogValue = terraScanService.F81001_GetEventFeeCatalog(feeCatId);
                getEventFeeCatalogData.ReadXml(Utilities.SharedFunctions.XmlParser(eventFeeCatalogValue));
                return getEventFeeCatalogData;
            }
            else
            {
                return Helper.F81001_GetEventFeeCatalog(feeCatId);
            }
        }

        #endregion F81001_GetEventData

        #region F81001_SaveEventFee

        /// <summary>
        /// Save Event Fee Catalog
        /// </summary>
        /// <param name="feeCatId">feeCatId</param>
        /// <param name="feeCatalogItems">feeCatalogItems</param>
        /// <param name="userId">UserID</param>
        /// <returns>integer</returns>
        public static int F81001_SaveEventFeeCatalog(int feeCatId, string feeCatalogItems, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F81001_SaveEventFeeCatalog(feeCatId, feeCatalogItems, userId);
            }
            else
            {
                return Helper.F81001_SaveEventFeeCatalog(feeCatId, feeCatalogItems, userId);
            }
        }

        #endregion F81001_SaveEventFee

        #region F81001_DeleteEventFee

        /// <summary>
        /// Delete Event Fee Catalog
        /// </summary>
        /// <param name="feeCatId">feeCatId</param>
        /// <param name="userId">UserID</param>
        public static void F81001_DeleteEventFeeCatalog(int feeCatId, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                terraScanService.F81001_DeleteEventFeeCatalog(feeCatId, userId);
            }
            else
            {
                Helper.F81001_DeleteEventFeeCatalog(feeCatId, userId);
            }
        }

        #endregion F81001_DeleteEventFee

        #region F81001_CheckEventFee

        /// <summary>
        /// Check Event Fee Catalog
        /// </summary>
        /// <param name="feeCatId">feeCatId</param>
        /// <param name="formNumber">formNumber</param>
        /// <param name="effectiveDate">effectiveDate</param>
        /// <returns>Integer</returns>
        public static int F81001_CheckEventFeeCatalog(int feeCatId, string formNumber, DateTime effectiveDate)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F81001_CheckEventFeeCatalog(feeCatId, formNumber, effectiveDate);
            }
            else
            {
                return Helper.F81001_CheckEventFeeCatalog(feeCatId, formNumber, effectiveDate);
            }
        }

        #endregion F81001_CheckEventFee

        #endregion F81001 Event Fee Catalog

        #region F36040 Crop Catalog

        /// <summary>
        /// F36040_s the type of the list neighborhood.
        /// </summary>
        /// <returns>permanentCropDataSet</returns>
        public static F36040PermanentCropData F36040_ListNeighborhoodType()
        {
            if (WSHelper.IsOnLineMode)
            {
                string permanentCropDataValue;
                F36040PermanentCropData permanentCropData = new F36040PermanentCropData();
                permanentCropDataValue = terraScanService.F36040_ListNeighborhoodType();
                permanentCropData.ReadXml(Utilities.SharedFunctions.XmlParser(permanentCropDataValue));
                return permanentCropData;
            }
            else
            {
                return Helper.F36040_ListNeighborhoodType();
            }
        }

        /// <summary>
        /// F36040_s the type of the list neighborhood.
        /// </summary>
        /// <returns>permanentCropDataSet</returns>
        public static F36040PermanentCropData F36040_ListCropCatalog()
        {
            if (WSHelper.IsOnLineMode)
            {
                string permanentCropDataValue;
                F36040PermanentCropData permanentCropData = new F36040PermanentCropData();
                permanentCropDataValue = terraScanService.F36040_ListCropCatalog();
                permanentCropData.ReadXml(Utilities.SharedFunctions.XmlParser(permanentCropDataValue));
                return permanentCropData;
            }
            else
            {
                return Helper.F36040_ListCropCatalog();
            }
        }

        /// <summary>
        /// F36040_s the delete crop catalog.
        /// </summary>
        /// <param name="cropVId">The crop V id.</param>
        /// <param name="userId">The user id.</param>
        /// <returns>status of the transaction.</returns>
        public static int F36040_DeleteCropCatalog(int cropVId, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F36040_DeleteCropCatalog(cropVId, userId);
            }
            else
            {
                return Helper.F36040_DeleteCropCatalog(cropVId, userId);
            }
        }

        /// <summary>
        /// F36040_s the save crop catalog.
        /// </summary>
        /// <param name="cropUnqiueId">The crop unqiue id.</param>
        /// <param name="cropCatalogItems">The crop catalog items.</param>
        /// <param name="userId">The user id.</param>
        /// <returns>status of the transaction.</returns>
        public static int F36040_SaveCropCatalog(int? cropUnqiueId, string cropCatalogItems, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F36040_SaveCropCatalog(cropUnqiueId, cropCatalogItems, userId);
            }
            else
            {
                return Helper.F36040_SaveCropCatalog(cropUnqiueId, cropCatalogItems, userId);
            }
        }

        /// <summary>
        /// F36040_s the type of the list crop neighborhood.
        /// </summary>
        /// <param name="rollYear">The roll year.</param>
        /// <returns></returns>
        public static F36040PermanentCropData F36040_ListCropNeighborhoodType(int rollYear)
        {
            if (WSHelper.IsOnLineMode)
            {
                string cropNeighborhoodTypeValue;
                F36040PermanentCropData cropNeighborhoodTypeValueData = new F36040PermanentCropData();
                cropNeighborhoodTypeValue = terraScanService.F36040_ListCropNeighborhoodType(rollYear);
                cropNeighborhoodTypeValueData.ReadXml(Utilities.SharedFunctions.XmlParser(cropNeighborhoodTypeValue));
                return cropNeighborhoodTypeValueData;
            }
            else
            {
                return Helper.F36040_ListCropNeighborhoodType(rollYear);
            }
        }


        #endregion

        #region F36041

        #region F36041 GetCrop Details

        /// <summary>
        /// List CropDetails
        /// </summary>
        /// <param name="valueSliceId">The value slice id.</param>
        /// <returns>CropDetails</returns>
        public static F36041CropData F36041_CropDetails(int valueSliceId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string cropDetails;
                F36041CropData getCropDetails = new F36041CropData();
                cropDetails = terraScanService.F36041_GetCrop(valueSliceId);
                getCropDetails.ReadXml(Utilities.SharedFunctions.XmlParser(cropDetails));
                return getCropDetails;
            }
            else
            {
                return Helper.F36041_GetCrop(valueSliceId);
            }
        }

        #endregion F36041 GetCrop Details

        #region F36041 GetCropCode Details

        /// <summary>
        /// List CropCodeDetails
        /// </summary>
        /// <param name="valueSliceId">The value slice id.</param>
        /// <returns>CropCodeDetails</returns>
        public static F36041CropData F36041_CropCodeDetails(int valueSliceId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string cropDetails;
                F36041CropData getCropDetails = new F36041CropData();
                cropDetails = terraScanService.F36041_GetCropCode(valueSliceId);
                getCropDetails.ReadXml(Utilities.SharedFunctions.XmlParser(cropDetails));
                return getCropDetails;
            }
            else
            {
                return Helper.F36041_GetCropCode(valueSliceId);
            }
        }

        #endregion F36041 GetCropCode Details

        #region F36041 Save CropCode Details
        /// <summary>
        /// To Save the CropDetails
        /// </summary>
        /// <param name="valueSliceId">ValueSliceId</param>
        /// <param name="cropItems">xml string containing the Crop Details</param>
        /// <param name="userId">UserID</param>
        /// <returns>Integer value containing the key id</returns>
        public static int F36041_SaveCropCodeDetails(int valueSliceId, string cropItems, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F36041_SaveCropCodeDetails(valueSliceId, cropItems, userId);
            }
            else
            {
                return Helper.F36041_SaveCropCodeDetails(valueSliceId, cropItems, userId);
            }
        }

        #endregion F36041 Save CropCode Details

        #region F36041_DeleteCrop

        /// <summary>
        /// F36041_s the delete crop.
        /// </summary>
        /// <param name="cropId">The crop id.</param>
        /// <param name="userId">The user id.</param>
        public static void F36041_DeleteCrop(int cropId, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                terraScanService.F36041_DeleteCrop(cropId, userId);
            }
            else
            {
                Helper.F36041_DeleteCrop(cropId, userId);
            }
        }

        #endregion F36041_DeleteCrop

        #region F36041_DeleteCropIds

        /// <summary>
        /// F36041_s the delete crop ids.
        /// </summary>
        /// <param name="cropIds">The crop ids.</param>
        /// <param name="userId">The user id.</param>
        public static void F36041_DeleteCropIds(string cropIds, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                terraScanService.F36041_DeleteCropIds(cropIds, userId);
            }
            else
            {
                Helper.F36041_DeleteCropIds(cropIds, userId);
            }
        }

        #endregion F36041_DeleteCropIds


        #endregion F36041

        #region F81002 Event Fee
        /// <summary>
        /// Get the Event Fee data
        /// </summary>
        /// <param name="eventId">EventId</param>
        /// <param name="form">Form</param>
        /// <returns>DataSet</returns>
        public static F81002EventFeeData F81002_GetEventFee(int eventId, int form)
        {
            if (WSHelper.IsOnLineMode)
            {
                string eventFeeValues;
                F81002EventFeeData getEventFeeData = new F81002EventFeeData();
                eventFeeValues = terraScanService.F81002_GetEventFee(eventId, form);
                getEventFeeData.ReadXml(Utilities.SharedFunctions.XmlParser(eventFeeValues));
                return getEventFeeData;
            }
            else
            {
                return Helper.F81002_GetEventFee(eventId, form);
            }
        }

        /// <summary>
        /// To Save the Event Fee
        /// </summary>
        /// <param name="eventId">EventID</param>
        /// <param name="feeItems">xml string containing the Event Fee Details</param>
        /// <param name="userId">UserID</param>
        /// <returns>Integer value containing the key id</returns>
        public static int F81002_SaveEventFee(int eventId, string feeItems, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F81002_SaveEventFee(eventId, feeItems, userId);
            }
            else
            {
                return Helper.F81002_SaveEventFee(eventId, feeItems, userId);
            }
        }

        /// <summary>
        /// Delete the Event Fee data
        /// </summary>
        /// <param name="eventId">The event id.</param>
        /// <param name="userId">UserID</param>
        public static void F81002_DeleteEventFee(int eventId, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                terraScanService.F81002_DeleteEventFee(eventId, userId);
            }
            else
            {
                Helper.F81002_DeleteEventFee(eventId, userId);
            }
        }

        #endregion F81002 Event Fee

        #region F3230 Check in

        #region  InsertChkInXML
        /// <summary>
        /// InsertChkInXML
        /// </summary>
        /// <param name="xmlInsterContent">The xml Instert Content.</param>
        /// <param name="tableXml">The xml table.</param>
        /// <param name="userId">The user Id..</param>
        /// <returns>InsertChkInXML</returns>
        public static int F3230_InsertChkInXML(string xmlInsterContent, string tableXml, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F3230_InsertChkInXML(xmlInsterContent, tableXml, userId);
            }
            else
            {
                return Helper.F3230_InsertChkInXML(xmlInsterContent, tableXml, userId);
            }
        }
        #endregion InsertChkInXML

        /// <summary>
        /// F3230_InsertAddedRecordXML
        /// </summary>
        /// <param name="xmlInsterContent"></param>
        /// <param name="tableXml"></param>
        /// <param name="userId"></param>
        /// <returns></returns>
        public static int F3230_InsertAddedRecordXML(string xmlInsterContent, string tableXml, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F3230_InsertAddedRecordXML(xmlInsterContent, tableXml, userId);
            }
            else
            {
                return Helper.F3230_InsertAddedRecordXML(xmlInsterContent, tableXml, userId);
            }
        }

        #region ChkInTypesXML
        /// <summary>
        /// ChkInTypesXML
        /// </summary>
        public static F3230CheckInData F3230_ChkInTypesXML()
        {
            if (WSHelper.IsOnLineMode)
            {
                F3230CheckInData getChkoutXml = new F3230CheckInData();
                return terraScanService.F3230_ChkInTypesXML();
            }
            else
            {
                return Helper.F3230_ChkInTypesXML();
            }
        }
        #endregion ChkInTypesXML


        /// <summary>
        /// F3230_ChkInInsertXML
        /// </summary>
        /// <returns></returns>
        public static string F3230_ChkInInsertXML(out string ChkInInsertXML)
        {
            if (WSHelper.IsOnLineMode)
            {
                F3230CheckInData getChkoutXml = new F3230CheckInData();
                return terraScanService.F3230_ChkInInsertXML(out ChkInInsertXML);
            }
            else
            {
                return Helper.F3230_ChkInInsertXML(out ChkInInsertXML);
            }
        }

        /// <summary>
        /// F3230_ChkInTerraGonInsertXML
        /// </summary>
        /// <returns></returns>
        public static string F3230_ChkInTerraGonInsertXML(out string ChkInInsertXML)
        {
            if (WSHelper.IsOnLineMode)
            {
                F3230CheckInData getChkoutXml = new F3230CheckInData();
                return terraScanService.F3230_ChkInTerraGonInsertXML(out  ChkInInsertXML);
            }
            else
            {
                return Helper.F3230_ChkInTerraGonInsertXML(out  ChkInInsertXML);
            }
        }

        /// <summary>
        /// F3230_ChkInInsertedFileXML
        /// </summary>
        /// <returns></returns>
        public static F3230CheckInData F3230_ChkInInsertedFileXML()
        {
            if (WSHelper.IsOnLineMode)
            {
                F3230CheckInData getChkoutXml = new F3230CheckInData();
                return terraScanService.F3230_ChkInInsertedFileXML();
            }
            else
            {
                return Helper.F3230_ChkInInsertedFileXML();
            }
        }

        /// <summary>
        /// F3230_InsertFile
        /// </summary>
        /// <param name="insertxmlContent"></param>
        /// <returns></returns>
        public static F3230CheckInData F3230_InsertFile(string insertxmlContent)
        {
            if (WSHelper.IsOnLineMode)
            {
                F3230CheckInData getChkoutXml = new F3230CheckInData();
                return terraScanService.F3230_InsertFile(insertxmlContent);
            }
            else
            {
                return Helper.F3230_InsertFile(insertxmlContent);
            }
        }

        /// <summary>
        /// F3230_UpdateFile
        /// </summary>
        /// <param name="updatexmlContent"></param>
        /// <returns></returns>
        public static F3230CheckInData F3230_UpdateFile(string updatexmlContent)
        {
            if (WSHelper.IsOnLineMode)
            {
                F3230CheckInData getChkoutXml = new F3230CheckInData();
                return terraScanService.F3230_UpdateFile(updatexmlContent);
            }
            else
            {
                return Helper.F3230_UpdateFile(updatexmlContent);
            }
        }


        /// <summary>
        /// F3230_ChkInLandCodeXML
        /// </summary>
        /// <returns></returns>
        public static F3230CheckInData F3230_ChkInLandCodeXML()
        {
            if (WSHelper.IsOnLineMode)
            {
                F3230CheckInData getChkoutXml = new F3230CheckInData();
                return terraScanService.F3230_ChkInLandCodeXML();
            }
            else
            {
                return Helper.F3230_ChkInLandCodeXML();
            }
        }

        /// <summary>
        /// F3230_ParcelID
        /// </summary>
        /// <returns></returns>
        public static F3230CheckInData F3230_ParcelID()
        {
            if (WSHelper.IsOnLineMode)
            {
                F3230CheckInData getChkoutXml = new F3230CheckInData();
                return terraScanService.F3230_ParcelID();
            }
            else
            {
                return Helper.F3230_ParcelID();
            }
        }

        /// <summary>
        /// F3230_ChkInDeprXML
        /// </summary>
        /// <returns></returns>
        public static F3230CheckInData F3230_ChkInDeprXML()
        {
            if (WSHelper.IsOnLineMode)
            {
                F3230CheckInData getChkoutXml = new F3230CheckInData();
                return terraScanService.F3230_ChkInDeprXML();
            }
            else
            {
                return Helper.F3230_ChkInDeprXML();
            }
        }


        #region ChkInEstimateComponentGroupXML
        /// <summary>
        /// ChkInEstimateComponentGroupXML
        /// </summary>
        public static F3230CheckInData F3230_ChkInEstimateComponentGroupXML()
        {
            if (WSHelper.IsOnLineMode)
            {
                F3230CheckInData getChkoutXml = new F3230CheckInData();
                return terraScanService.F3230_ChkInEstimateComponentGroupXML();
            }
            else
            {
                return Helper.F3230_ChkInEstimateComponentGroupXML();
            }
        }
        #endregion ChkInEstimateComponentGroupXML

        #region ChkInNBHDXML
        /// <summary>
        /// ChkInNBHDXML
        /// </summary>
        public static F3230CheckInData F3230_ChkInNBHDXML()
        {
            if (WSHelper.IsOnLineMode)
            {
                F3230CheckInData getChkoutXml = new F3230CheckInData();
                return terraScanService.F3230_ChkInNBHDXML();
            }
            else
            {
                return Helper.F3230_ChkInNBHDXML();
            }
        }
        #endregion ChkInNBHDXML

        #region ChkInCommentXML
        /// <summary>
        /// ChkInCommentXML
        /// </summary>
        /// <param name="TableName">The TableName.</param>
        /// <param name="StartRow">StartRow.</param>
        /// <param name="RowendValue">RowendValue.</param>
        /// <returns>int</returns>
        public static F3230CheckInData F3230_ChkInCommentXML(string TableName, int StartRow, out int RowendValue)
        {
            RowendValue = 0;
            if (WSHelper.IsOnLineMode)
            {
                F3230CheckInData getChkoutXml = new F3230CheckInData();
                return terraScanService.F3230_ChkInCommentXML(out RowendValue, TableName, StartRow);
            }
            else
            {
                return Helper.F3230_ChkInCommentXML(TableName, StartRow, out RowendValue);
            }
        }
        #endregion ChkInCommentXML

        #region ChkInEstimateXML
        /// <summary>
        /// ChkInEstimateXML
        /// </summary>
        /// <param name="TableName">The TableName.</param>
        /// <param name="StartRow">StartRow.</param>
        /// <param name="RowendValue">RowendValue.</param>
        /// <returns>int</returns>
        public static F3230CheckInData F3230_ChkInEstimateXML(string TableName, int StartRow, out int RowendValue)
        {
            RowendValue = 0;
            if (WSHelper.IsOnLineMode)
            {
                F3230CheckInData getChkoutXml = new F3230CheckInData();
                return terraScanService.F3230_ChkInEstimateXML(out RowendValue, TableName, StartRow);
            }
            else
            {
                return Helper.F3230_ChkInEstimateXML(TableName, StartRow, out RowendValue);
            }
        }
        #endregion ChkInEstimateXML

        #region ChkInFileXML
        /// <summary>
        /// ChkInFileXML
        /// </summary>
        /// <param name="TableName">The TableName.</param>
        /// <param name="StartRow">StartRow.</param>
        /// <param name="RowendValue">RowendValue.</param>
        /// <returns>int</returns>
        public static F3230CheckInData F3230_ChkInFileXML(string TableName, int StartRow, out int RowendValue)
        {
            RowendValue = 0;
            if (WSHelper.IsOnLineMode)
            {
                F3230CheckInData getChkoutXml = new F3230CheckInData();
                return terraScanService.F3230_ChkInFileXML(out RowendValue, TableName, StartRow);
            }
            else
            {
                return Helper.F3230_ChkInFileXML(TableName, StartRow, out RowendValue);
            }
        }
        #endregion ChkInFileXML

        #region ChkInLandValuesXML
        /// <summary>
        /// ChkInLandValuesXML
        /// </summary>
        /// <param name="TableName">The TableName.</param>
        /// <param name="StartRow">StartRow.</param>
        /// <param name="RowendValue">RowendValue.</param>
        /// <returns>int</returns>
        public static F3230CheckInData F3230_ChkInLandValuesXML(string TableName, int StartRow, out int RowendValue)
        {
            RowendValue = 0;
            if (WSHelper.IsOnLineMode)
            {
                F3230CheckInData getChkoutXml = new F3230CheckInData();
                return terraScanService.F3230_ChkInLandValuesXML(out RowendValue, TableName, StartRow);
            }
            else
            {
                return Helper.F3230_ChkInLandValuesXML(TableName, StartRow, out RowendValue);
            }
        }
        #endregion ChkInLandValuesXML

        #region ChkInLandXML
        /// <summary>
        /// ChkInLandXML
        /// </summary>
        /// <param name="TableName">The TableName.</param>
        /// <param name="StartRow">StartRow.</param>
        /// <param name="RowendValue">RowendValue.</param>
        /// <returns>int</returns>
        public static F3230CheckInData F3230_ChkInLandXML(string TableName, int StartRow, out int RowendValue)
        {
            RowendValue = 0;
            if (WSHelper.IsOnLineMode)
            {
                F3230CheckInData getChkoutXml = new F3230CheckInData();
                return terraScanService.F3230_ChkInLandXML(out RowendValue, TableName, StartRow);
            }
            else
            {
                return Helper.F3230_ChkInLandXML(TableName, StartRow, out RowendValue);
            }
        }
        #endregion ChkInLandXML

        #region ChkInMiscXML
        /// <summary>
        /// ChkInMiscXML
        /// </summary>
        /// <param name="TableName">The TableName.</param>
        /// <param name="StartRow">StartRow.</param>
        /// <param name="RowendValue">RowendValue.</param>
        /// <returns>int</returns>
        public static F3230CheckInData F3230_ChkInMiscXML(string TableName, int StartRow, out int RowendValue)
        {
            RowendValue = 0;
            if (WSHelper.IsOnLineMode)
            {
                F3230CheckInData getChkoutXml = new F3230CheckInData();
                return terraScanService.F3230_ChkInMiscXML(out RowendValue, TableName, StartRow);
            }
            else
            {
                return Helper.F3230_ChkInMiscXML(TableName, StartRow, out RowendValue);
            }
        }
        #endregion ChkInMiscXML

        #region ChkInMSC_EstimateXML
        /// <summary>
        /// ChkInMSC_EstimateXML
        /// </summary>
        /// <param name="TableName">The TableName.</param>
        /// <param name="StartRow">StartRow.</param>
        /// <param name="RowendValue">RowendValue.</param>
        /// <returns>int</returns>
        public static F3230CheckInData F3230_ChkInMSC_EstimateXML(string TableName, int StartRow, out int RowendValue)
        {
            RowendValue = 0;
            if (WSHelper.IsOnLineMode)
            {
                F3230CheckInData getChkoutXml = new F3230CheckInData();
                return terraScanService.F3230_ChkInMSC_EstimateXML(out RowendValue, TableName, StartRow);
            }
            else
            {
                return Helper.F3230_ChkInMSC_EstimateXML(TableName, StartRow, out RowendValue);
            }
        }
        #endregion ChkInMSC_EstimateXML

        #region ChkInMSC_EstimateXML
        /// <summary>
        /// ChkInMSC_EstimateXML
        /// </summary>
        /// <param name="TableName">The TableName.</param>
        /// <param name="StartRow">StartRow.</param>
        /// <param name="RowendValue">RowendValue.</param>
        /// <returns>int</returns>
        public static F3230CheckInData F3230_ChkInObjectXML(string TableName, int StartRow, out int RowendValue)
        {
            RowendValue = 0;
            if (WSHelper.IsOnLineMode)
            {
                F3230CheckInData getChkoutXml = new F3230CheckInData();
                return terraScanService.F3230_ChkInObjectXML(out RowendValue, TableName, StartRow);
            }
            else
            {
                return Helper.F3230_ChkInObjectXML(TableName, StartRow, out RowendValue);
            }
        }
        #endregion ChkInMSC_EstimateXML

        #region ChkInParcelValueXML
        /// <summary>
        /// ChkInParcelValueXML
        /// </summary>
        /// <param name="TableName">The TableName.</param>
        /// <param name="StartRow">StartRow.</param>
        /// <param name="RowendValue">RowendValue.</param>
        /// <returns>int</returns>
        public static F3230CheckInData F3230_ChkInParcelValueXML(string TableName, int StartRow, out int RowendValue)
        {
            RowendValue = 0;
            if (WSHelper.IsOnLineMode)
            {
                F3230CheckInData getChkoutXml = new F3230CheckInData();
                return terraScanService.F3230_ChkInParcelValueXML(out RowendValue, TableName, StartRow);
            }
            else
            {
                return Helper.F3230_ChkInParcelValueXML(TableName, StartRow, out RowendValue);
            }
        }
        #endregion ChkInParcelValueXML

        #region ChkInParcelXML
        /// <summary>
        /// ChkInParcelXML
        /// </summary>
        /// <param name="TableName">The TableName.</param>
        /// <param name="StartRow">StartRow.</param>
        /// <param name="RowendValue">RowendValue.</param>
        /// <returns>int</returns>
        public static F3230CheckInData F3230_ChkInParcelXML(string TableName, int StartRow, out int RowendValue)
        {
            RowendValue = 0;
            if (WSHelper.IsOnLineMode)
            {
                F3230CheckInData getChkoutXml = new F3230CheckInData();
                return terraScanService.F3230_ChkInParcelXML(out RowendValue, TableName, StartRow);
            }
            else
            {
                return Helper.F3230_ChkInParcelXML(TableName, StartRow, out RowendValue);
            }
        }
        #endregion ChkInParcelXML

        #region ChkInTerraGonXML
        /// <summary>
        /// ChkInTerraGonXML
        /// </summary>
        /// <param name="TableName">The TableName.</param>
        /// <param name="StartRow">StartRow.</param>
        /// <param name="RowendValue">RowendValue.</param>
        /// <returns>int</returns>
        public static F3230CheckInData F3230_ChkInTerraGonXML(string TableName, int StartRow, out int RowendValue)
        {
            RowendValue = 0;
            if (WSHelper.IsOnLineMode)
            {
                F3230CheckInData getChkoutXml = new F3230CheckInData();
                return terraScanService.F3230_ChkInTerraGonXML(out RowendValue, TableName, StartRow);
            }
            else
            {
                return Helper.F3230_ChkInTerraGonXML(TableName, StartRow, out RowendValue);
            }
        }
        #endregion ChkInTerraGonXML

        #region ChkInType2XML
        /// <summary>
        /// ChkInType2XML
        /// </summary>
        /// <param name="TableName">The TableName.</param>
        /// <param name="StartRow">StartRow.</param>
        /// <param name="RowendValue">RowendValue.</param>
        /// <returns>int</returns>
        public static F3230CheckInData F3230_ChkInType2XML(string TableName, int StartRow, out int RowendValue)
        {
            RowendValue = 0;
            if (WSHelper.IsOnLineMode)
            {
                F3230CheckInData getChkoutXml = new F3230CheckInData();
                return terraScanService.F3230_ChkInType2XML(out RowendValue, TableName, StartRow);
            }
            else
            {
                return Helper.F3230_ChkInType2XML(TableName, StartRow, out RowendValue);
            }
        }
        #endregion ChkInType2XML

        #region ChkInType6XML
        /// <summary>
        /// ChkInType6XML
        /// </summary>
        /// <param name="TableName">The TableName.</param>
        /// <param name="StartRow">StartRow.</param>
        /// <param name="RowendValue">RowendValue.</param>
        /// <returns>int</returns>
        public static F3230CheckInData F3230_ChkInType6XML(string TableName, int StartRow, out int RowendValue)
        {
            RowendValue = 0;
            if (WSHelper.IsOnLineMode)
            {
                F3230CheckInData getChkoutXml = new F3230CheckInData();
                return terraScanService.F3230_ChkInType6XML(out RowendValue, TableName, StartRow);
            }
            else
            {
                return Helper.F3230_ChkInType6XML(TableName, StartRow, out RowendValue);
            }
        }
        #endregion ChkInType6XML

        #region ChkInValueSliceXML
        /// <summary>
        /// ChkInValueSliceXML
        /// </summary>
        /// <param name="TableName">The TableName.</param>
        /// <param name="StartRow">StartRow.</param>
        /// <param name="RowendValue">RowendValue.</param>
        /// <returns>int</returns>
        public static F3230CheckInData F3230_ChkInValueSliceXML(string TableName, int StartRow, out int RowendValue)
        {
            RowendValue = 0;
            if (WSHelper.IsOnLineMode)
            {
                F3230CheckInData getChkoutXml = new F3230CheckInData();
                return terraScanService.F3230_ChkInValueSliceXML(out RowendValue, TableName, StartRow);
            }
            else
            {
                return Helper.F3230_ChkInValueSliceXML(TableName, StartRow, out RowendValue);
            }
        }

        #endregion ChkInValueSliceXML

        #endregion

        #region F3230 FieldUse CheckOut



        #region F9065GetAuditCount
        /// <summary>
        /// F9065_s the get audit count.
        /// </summary>
        /// <returns>int</returns>
        public static int F9065_GetAuditCount()
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F9065_GetAuditCount();
            }
            else
            {
                return Helper.F9065_GetAuditCount();
            }
        }
        #endregion F9065GetAuditCount

        #region F9065DeleteCheckOutTable
        /// <summary>
        /// F9065_s the delete check out table.
        /// </summary>
        /// <returns>int</returns>
        public static int F9065_DeleteCheckOutTable()
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F9065_DeleteCheckOutTable();
            }
            else
            {
                return Helper.F9065_DeleteCheckOutTable();
            }
        }
        #endregion F9065DeleteCheckOutTable

        #region F9065InsertFieldElement
        /// <summary>
        /// F9065_s the insert field element.
        /// </summary>
        /// <param name="fieldElement">The field element.</param>
        /// <param name="userId">The user id.</param>
        /// <returns>int</returns>
        public static int F9065_InsertFieldElement(string fieldElement, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F9065_InsertFieldElement(fieldElement, userId);
            }
            else
            {
                return Helper.F9065_InsertFieldElement(fieldElement, userId);
            }
        }
        #endregion F9065InsertFieldElement

        #region F9065GetPreviewDetail
        /// <summary>
        /// F9065_s the get preview detail.
        /// </summary>
        /// <param name="snapShotId">The snap shot id.</param>
        /// <param name="snapShotDetail">The snap shot detail.</param>
        /// <returns>F9065FieldUseData</returns>
        public static F9065FieldUseData F9065_GetPreviewDetail(int snapShotId, string snapShotDetail)
        {
            if (WSHelper.IsOnLineMode)
            {
                string previewValue;
                F9065FieldUseData fieldUseData = new F9065FieldUseData();
                previewValue = terraScanService.F9065_GetPreviewDetail(snapShotId, snapShotDetail);
                fieldUseData.ReadXml(Utilities.SharedFunctions.XmlParser(previewValue));
                return fieldUseData;
            }
            else
            {
                F9065FieldUseData fieldUseData = new F9065FieldUseData();
                fieldUseData = Helper.F9065_GetPreviewDetail(snapShotId, snapShotDetail);
                return fieldUseData;
            }
        }
        #endregion F9065GetPreviewDetail

        #region F9065InsertApplicationConfiguration
        /// <summary>
        /// F9065_s the insert application configuration.
        /// </summary>
        /// <param name="configXml">The config XML.</param>
        /// <param name="userId">The user id.</param>
        /// <returns>int</returns>
        public static int F9065_InsertApplicationConfiguration(string configXml, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F9065_InsertApplicationConfiguration(configXml, userId);
            }
            else
            {
                return Helper.F9065_InsertApplicationConfiguration(configXml, userId);
            }
        }
        #endregion F9065InsertApplicationConfiguration

        #region F9065_GetcfgConfiguration

        /// <summary>
        /// To get Configruation Value
        /// </summary>
        /// <param name="cfgname">The cfgname.</param>
        /// <returns>
        /// Typed dataset containing the Configruation Value.
        /// </returns>
        public static F9065FieldUseData F9065_GetcfgConfiguration(string cfgname)
        {
            if (WSHelper.IsOnLineMode)
            {
                string cfgnameValue;
                F9065FieldUseData fieldUseData = new F9065FieldUseData();
                cfgnameValue = terraScanService.F9065_GetcfgConfiguration(cfgname);
                fieldUseData.ReadXml(Utilities.SharedFunctions.XmlParser(cfgnameValue));
                return fieldUseData;
            }
            else
            {
                F9065FieldUseData fieldUseData = new F9065FieldUseData();
                fieldUseData = Helper.F9065_GetcfgConfiguration(cfgname);
                return fieldUseData;
            }
        }

        #endregion F9065_GetcfgConfiguration

        #region F9065GetSnapshotDetail
        /// <summary>
        /// F9065_s the get snapshot detail.
        /// </summary>
        /// <returns>F9065FieldUseData</returns>
        public static F9065FieldUseData F9065_GetSnapshotDetail()
        {
            if (WSHelper.IsOnLineMode)
            {
                string fieldUseValues;
                F9065FieldUseData fieldUseData = new F9065FieldUseData();
                fieldUseValues = terraScanService.F9065_GetSnapshotDetail();
                fieldUseData.ReadXml(Utilities.SharedFunctions.XmlParser(fieldUseValues));
                return fieldUseData;
            }
            else
            {
                F9065FieldUseData fieldUseData = new F9065FieldUseData();
                fieldUseData = Helper.F9065_GetSnapshotDetail();
                return fieldUseData;
            }
        }
        #endregion F9065GetSnapshotDetail

        #region F9065UpdateApplicationStatus
        /// <summary>
        /// F9065_s the update application status.
        /// </summary>
        /// <param name="isCheckedOut">if set to <c>true</c> [is checked out].</param>
        /// <param name="isOnline">if set to <c>true</c> [is online].</param>
        /// <param name="userId">The user id.</param>
        /// <returns>Integer</returns>
        public static int F9065_UpdateApplicationStatus(bool isCheckedOut, bool isOnline, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F9065_UpdateApplicationStatus(isCheckedOut, isOnline, userId);
            }
            else
            {
                return Helper.F9065_UpdateApplicationStatus(isCheckedOut, isOnline, userId);
            }
        }
        #endregion F9065UpdateApplicationStatus

        #region F3230GetAuditCount
        ///// <summary>
        ///// F3230_s the get audit count.
        ///// </summary>
        ///// <returns>int</returns>
        //public static int F3230_GetAuditCount()
        //{
        //    if (WSHelper.IsOnLineMode)
        //    {
        //        return terraScanService.F3230_GetAuditCount();
        //    }
        //    else
        //    {
        //        return Helper.F3230_GetAuditCount();
        //    }
        //}
        #endregion F3230GetAuditCount

        #region F3230GetSnapshotDetail

        /// <summary>
        /// F9065_s the get snapshot detail.
        /// </summary>
        /// <returns>F9065FieldUseData</returns>
        public static F3230FieldUseData F3230_GetSnapshotDetail()
        {
            if (WSHelper.IsOnLineMode)
            {
                string fieldUseValues;
                F3230FieldUseData fieldUseData = new F3230FieldUseData();
                fieldUseValues = terraScanService.F3230_GetSnapshotDetail();
                fieldUseData.ReadXml(Utilities.SharedFunctions.XmlParser(fieldUseValues));
                return fieldUseData;
            }
            else
            {
                F3230FieldUseData fieldUseData = new F3230FieldUseData();
                fieldUseData = Helper.F3230_GetSnapshotDetail();
                return fieldUseData;
            }
        }
        #endregion F3230GetSnapshotDetail

        #region F3230DeleteCheckOutTable
        /// <summary>
        /// F3230_s the delete check out table.
        /// </summary>
        /// <returns>int</returns>
        public static int F3230_DeleteCheckOutTable()
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F3230_DeleteCheckOutTable();
            }
            else
            {
                return Helper.F3230_DeleteCheckOutTable();
            }
        }
        #endregion F3230DeleteCheckOutTable

        #region F3230InsertFieldElement
        /// <summary>
        /// F3230_s the insert field element.
        /// </summary>
        /// <param name="fieldElement">The field element.</param>
        /// <param name="userId">The user id.</param>
        /// <returns>int</returns>
        public static int F3230_InsertFieldElement(string fieldElement, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F3230_InsertFieldElement(fieldElement, userId);
            }
            else
            {
                return Helper.F3230_InsertFieldElement(fieldElement, userId);
            }
        }
        #endregion F3230InsertFieldElement

        #region F3230GetPreviewDetail
        /// <summary>
        /// F3230_s the get preview detail.
        /// </summary>
        /// <param name="snapShotId">The snap shot id.</param>
        /// <param name="snapShotDetail">The snap shot detail.</param>
        /// <returns>F3230FieldUseData</returns>
        public static F3230FieldUseData F3230_GetPreviewDetail(int snapShotId, string snapShotDetail)
        {
            if (WSHelper.IsOnLineMode)
            {
                string previewValue;
                F3230FieldUseData fieldUseData = new F3230FieldUseData();
                previewValue = terraScanService.F3230_GetPreviewDetail(snapShotId, snapShotDetail);
                fieldUseData.ReadXml(Utilities.SharedFunctions.XmlParser(previewValue));
                return fieldUseData;
            }
            else
            {
                F3230FieldUseData fieldUseData = new F3230FieldUseData();
                fieldUseData = Helper.F3230_GetPreviewDetail(snapShotId, snapShotDetail);
                return fieldUseData;
            }
        }
        #endregion F3230GetPreviewDetail

        #region F3230InsertApplicationConfiguration
        /// <summary>
        /// F3230_s the insert application configuration.
        /// </summary>
        /// <param name="configXml">The config XML.</param>
        /// <param name="userId">The user id.</param>
        /// <returns>int</returns>
        public static int F3230_InsertApplicationConfiguration(string configXml, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F3230_InsertApplicationConfiguration(configXml, userId);
            }
            else
            {
                return Helper.F3230_InsertApplicationConfiguration(configXml, userId);
            }
        }
        #endregion F3230InsertApplicationConfiguration

        #region F3230_GetcfgConfiguration

        /// <summary>
        /// To get Configruation Value
        /// </summary>
        /// <param name="cfgname">The cfgname.</param>
        /// <returns>
        /// Typed dataset containing the Configruation Value.
        /// </returns>
        public static F3230FieldUseData F3230_GetcfgConfiguration(string cfgname)
        {
            if (WSHelper.IsOnLineMode)
            {
                string cfgnameValue;
                F3230FieldUseData fieldUseData = new F3230FieldUseData();
                cfgnameValue = terraScanService.F3230_GetcfgConfiguration(cfgname);
                fieldUseData.ReadXml(Utilities.SharedFunctions.XmlParser(cfgnameValue));
                return fieldUseData;
            }
            else
            {
                F3230FieldUseData fieldUseData = new F3230FieldUseData();
                fieldUseData = Helper.F3230_GetcfgConfiguration(cfgname);
                return fieldUseData;
            }
        }

        #endregion F3230_GetcfgConfiguration

        #region F3230UpdateApplicationStatus
        /// <summary>
        /// F3230_s the update application status.
        /// </summary>
        /// <param name="isCheckedOut">if set to <c>true</c> [is checked out].</param>
        /// <param name="isOnline">if set to <c>true</c> [is online].</param>
        /// <param name="userId">The user id.</param>
        /// <returns>Integer</returns>
        public static int F3230_UpdateApplicationStatus(bool isCheckedOut, bool isOnline, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F3230_UpdateApplicationStatus(isCheckedOut, isOnline, userId);
            }
            else
            {
                return Helper.F3230_UpdateApplicationStatus(isCheckedOut, isOnline, userId);
            }
        }
        #endregion F3230UpdateApplicationStatus

        #region InsertChkOutXML
        /// <summary>
        /// F3230_InsertChkOutXML
        /// </summary>
        /// <param name="xmlInsterContent">Content of the XML inster.</param>
        /// <param name="tableXml">The table XML.</param>
        /// <param name="userId">The user id.</param>
        /// <returns>int</returns>
        public static int F3230_InsertChkOutXML(string xmlInsterContent, string tableXml, int userId, bool IsDelete)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F3230_InsertChkOutXML(xmlInsterContent, tableXml, userId, IsDelete);
            }
            else
            {
                return Helper.F3230_InsertChkOutXML(xmlInsterContent, tableXml, userId, IsDelete);
            }
        }
        #endregion InsertChkOutXML

        #region ChkOutConfigXML
        /// <summary>
        /// F3230_ChkOutConfigXML
        /// </summary>
        /// <param name="snapShotId">The snap shot id.</param>
        /// <param name="snapShotValue">The snap shot value.</param>
        /// <returns>DataSet</returns>
        public static F3230FieldUseData F3230_ChkOutConfigXML(int snapShotId, string snapShotValue)
        {
            if (WSHelper.IsOnLineMode)
            {
                F3230FieldUseData getChkoutXml = new F3230FieldUseData();
                return terraScanService.F3230_ChkOutConfigXML(snapShotId, snapShotValue);
            }
            else
            {
                return Helper.F3230_ChkOutConfigXML(snapShotId, snapShotValue);
            }
        }
        #endregion ChkOutConfigXML

        #region ChkOutDeprMiscXML

        /// <summary>
        /// ChkOutDeprMiscXML
        /// </summary>
        /// <param name="snapShotId"></param>
        /// <param name="snapShotValue"></param>
        /// <returns></returns>
        public static F3230FieldUseData F3230ChkOutDeprMiscXML(int snapShotId, string snapShotValue)
        {
            if (WSHelper.IsOnLineMode)
            {
                F3230FieldUseData getChkoutXml = new F3230FieldUseData();
                return terraScanService.F3230ChkOutDeprMiscXML(snapShotId, snapShotValue);
            }
            else
            {
                return Helper.F3230ChkOutDeprMiscXML(snapShotId, snapShotValue);
            }
        }


        /// <summary>
        /// F3230ChkOutDeprXML
        /// </summary>
        /// <param name="snapShotId"></param>
        /// <param name="snapShotValue"></param>
        /// <returns></returns>
        public static F3230FieldUseData F3230ChkOutDeprXML(int snapShotId, string snapShotValue)
        {
            if (WSHelper.IsOnLineMode)
            {
                F3230FieldUseData getChkoutXml = new F3230FieldUseData();
                return terraScanService.F3230ChkOutDeprXML(snapShotId, snapShotValue);
            }
            else
            {
                return Helper.F3230ChkOutDeprXML(snapShotId, snapShotValue);
            }
        }

        #endregion ChkOutDeprMiscXML

        #region ChkOutEstimateCompXML
        /// <summary>
        /// F3230_ChkOutEstimateCompXML
        /// </summary>
        /// <param name="snapShotId"></param>
        /// <param name="snapShotValue"></param>
        /// <returns></returns>
        public static F3230FieldUseData F3230_ChkOutEstimateCompXML(int snapShotId, string snapShotValue)
        {
            if (WSHelper.IsOnLineMode)
            {
                F3230FieldUseData getChkoutXml = new F3230FieldUseData();
                return terraScanService.F3230_ChkOutEstimateCompXML(snapShotId, snapShotValue);
            }
            else
            {
                return Helper.F3230_ChkOutEstimateCompXML(snapShotId, snapShotValue);
            }
        }
        #endregion ChkOutEstimateCompXML

        #region ChkOutVSTGCitemXML
        /// <summary>
        /// F3230_ChkOutVSTGCitemXML
        /// </summary>
        /// <param name="snapShotId"></param>
        /// <param name="snapShotValue"></param>
        /// <returns></returns>
        public static F3230FieldUseData F3230_ChkOutVSTGCitemXML(int snapShotId, string snapShotValue)
        {
            if (WSHelper.IsOnLineMode)
            {
                F3230FieldUseData getChkoutXml = new F3230FieldUseData();
                return terraScanService.F3230_ChkOutVSTGCitemXML(snapShotId, snapShotValue);
            }
            else
            {
                return Helper.F3230_ChkOutVSTGCitemXML(snapShotId, snapShotValue);
            }
        }
        #endregion ChkOutVSTGCitemXML

        #region ChkOutMSCEstimateXML
        /// <summary>
        /// F3230_ChkOutEstimateResultXML
        /// </summary>
        /// <param name="snapShotId"></param>
        /// <param name="snapShotValue"></param>
        /// <returns></returns>
        public static F3230FieldUseData F3230_ChkOutMSCEstimateXML(int snapShotId, string snapShotValue)
        {
            if (WSHelper.IsOnLineMode)
            {
                F3230FieldUseData getChkoutXml = new F3230FieldUseData();
                return terraScanService.F3230_ChkOutMSCEstimateXML(snapShotId, snapShotValue);
            }
            else
            {
                return Helper.F3230_ChkOutMSCEstimateXML(snapShotId, snapShotValue);
            }
        }
        #endregion ChkOutMSCEstimateXML

        #region ChkOutEstimateResultXML
        /// <summary>
        /// F3230_ChkOutEstimateResultXML
        /// </summary>
        /// <param name="snapShotId"></param>
        /// <param name="snapShotValue"></param>
        /// <returns></returns>
        public static F3230FieldUseData F3230_ChkOutEstimateResultXML(int snapShotId, string snapShotValue)
        {
            if (WSHelper.IsOnLineMode)
            {
                F3230FieldUseData getChkoutXml = new F3230FieldUseData();
                return terraScanService.F3230_ChkOutEstimateResultXML(snapShotId, snapShotValue);
            }
            else
            {
                return Helper.F3230_ChkOutEstimateResultXML(snapShotId, snapShotValue);
            }
        }
        #endregion ChkOutEstimateResultXML

        #region ChkOutMSCEstimateOccupancyXML
        /// <summary>
        /// F3230_ChkOutMSCEstimateOccupancyXML
        /// </summary>
        /// <param name="snapShotId"></param>
        /// <param name="snapShotValue"></param>
        /// <returns></returns>
        public static F3230FieldUseData F3230_ChkOutMSCEstimateOccupancyXML(int snapShotId, string snapShotValue)
        {
            if (WSHelper.IsOnLineMode)
            {
                F3230FieldUseData getChkoutXml = new F3230FieldUseData();
                return terraScanService.F3230_ChkOutMSCEstimateOccupancyXML(snapShotId, snapShotValue);
            }
            else
            {
                return Helper.F3230_ChkOutMSCEstimateOccupancyXML(snapShotId, snapShotValue);
            }
        }
        #endregion ChkOutMSCEstimateOccupancyXML

        #region ChkOutEstimateBuildingXML
        /// <summary>
        /// F3230_ChkOutEstimateBuildingXML
        /// </summary>
        /// <param name="snapShotId"></param>
        /// <param name="snapShotValue"></param>
        /// <returns></returns>
        public static F3230FieldUseData F3230_ChkOutEstimateBuildingXML(int snapShotId, string snapShotValue)
        {
            if (WSHelper.IsOnLineMode)
            {
                F3230FieldUseData getChkoutXml = new F3230FieldUseData();
                return terraScanService.F3230_ChkOutEstimateBuildingXML(snapShotId, snapShotValue);
            }
            else
            {
                return Helper.F3230_ChkOutEstimateBuildingXML(snapShotId, snapShotValue);
            }
        }
        #endregion ChkOutEstimateBuildingXML

        /// <summary>
        /// F3230_ChkOutCommonXML
        /// </summary>
        /// <param name="snapShotId"></param>
        /// <param name="snapShotValue"></param>
        /// <returns></returns>
        public static F3230FieldUseData F3230_ChkOutCommonXML(int snapShotId, string snapShotValue)
        {
            if (WSHelper.IsOnLineMode)
            {
                F3230FieldUseData getChkoutXml = new F3230FieldUseData();
                return terraScanService.F3230_ChkOutCommonXML(snapShotId, snapShotValue);
            }
            else
            {
                return Helper.F3230_ChkOutCommonXML(snapShotId, snapShotValue);
            }
        }

        /// <summary>
        /// f3230_ChkOutCorrectionXML
        /// </summary>
        /// <param name="snapShotId"></param>
        /// <returns></returns>
        public static F3230FieldUseData f3230_ChkOutCorrectionXML(int snapShotId)
        {
            if (WSHelper.IsOnLineMode)
            {
                F3230FieldUseData getChkoutXml = new F3230FieldUseData();
                return terraScanService.f3230_ChkOutCorrectionXML(snapShotId);
            }
            else
            {
                return Helper.f3230_ChkOutCorrectionXML(snapShotId);
            }
        }

        /// <summary>
        /// f3230_ChkOutSaleXML
        /// </summary>
        /// <param name="snapShotId"></param>
        /// <returns></returns>
        public static F3230FieldUseData f3230_ChkOutSaleXML(int snapShotId)
        {
            if (WSHelper.IsOnLineMode)
            {
                F3230FieldUseData getChkoutXml = new F3230FieldUseData();
                return terraScanService.f3230_ChkOutSaleXML(snapShotId);
            }
            else
            {
                return Helper.f3230_ChkOutSaleXML(snapShotId);
            }
        }

        /// <summary>
        /// f3230_ChkOutReceiptXML
        /// </summary>
        /// <param name="snapShotId"></param>
        /// <returns></returns>
        public static F3230FieldUseData f3230_ChkOutReceiptXML(int snapShotId)
        {
            if (WSHelper.IsOnLineMode)
            {
                F3230FieldUseData getChkoutXml = new F3230FieldUseData();
                return terraScanService.f3230_ChkOutReceiptXML(snapShotId);
            }
            else
            {
                return Helper.f3230_ChkOutReceiptXML(snapShotId);
            }
        }

        /// <summary>
        /// f3230_ChkOutStatementXML
        /// </summary>
        /// <param name="snapShotId"></param>
        /// <returns></returns>
        public static F3230FieldUseData f3230_ChkOutStatementXML(int snapShotId)
        {
            if (WSHelper.IsOnLineMode)
            {
                F3230FieldUseData getChkoutXml = new F3230FieldUseData();
                return terraScanService.f3230_ChkOutStatementXML(snapShotId);
            }
            else
            {
                return Helper.f3230_ChkOutStatementXML(snapShotId);
            }
        }

        #region ChkOutLandValuesXML
        /// <summary>
        /// ChkOutLandValuesXML
        /// </summary>
        /// <param name="snapShotId"></param>
        /// <param name="snapShotValue"></param>
        /// <returns></returns>
        public static F3230FieldUseData F3230_ChkOutLandValuesXML(int snapShotId, string snapShotValue, string TableName, int StartRow, out int RowendValue)
        {
            RowendValue = 0;
            if (WSHelper.IsOnLineMode)
            {
                F3230FieldUseData getChkoutXml = new F3230FieldUseData();
                return terraScanService.F3230_ChkOutLandValuesXML(out RowendValue, snapShotId, snapShotValue, TableName, StartRow);
            }
            else
            {
                return Helper.F3230_ChkOutLandValuesXML(snapShotId, snapShotValue, TableName, StartRow, out RowendValue);
            }
        }
        #endregion ChkOutLandValuesXML

        #region ChkOutVSTerraGonXML
        /// <summary>
        /// ChkOutVSTerraGonXML
        /// </summary>
        /// <param name="snapShotId"></param>
        /// <param name="snapShotValue"></param>
        /// <param name="TableName"></param>
        /// <param name="StartRow"></param>
        /// <param name="RowendValue"></param>
        /// <returns></returns>
        public static F3230FieldUseData F3230_ChkOutTerraGonXML(int snapShotId)
        {
            if (WSHelper.IsOnLineMode)
            {
                F3230FieldUseData getChkoutXml = new F3230FieldUseData();
                return terraScanService.F3230_ChkOutTerraGonXML(snapShotId);
            }
            else
            {
                return Helper.F3230_ChkOutTerraGonXML(snapShotId);
            }
        }
        #endregion ChkOutVSTerraGonXML

        #region ChkOutEstimateComponentXML
        /// <summary>
        /// ChkOutEstimateComponentXML
        /// </summary>
        /// <param name="snapShotId"></param>
        /// <param name="snapShotValue"></param>
        /// <param name="TableName"></param>
        /// <param name="StartRow"></param>
        /// <param name="RowendValue"></param>
        /// <returns></returns>
        public static F3230FieldUseData F3230_ChkOutEstimateComponentXML(int snapShotId, string snapShotValue, string TableName, int StartRow, out int RowendValue)
        {
            RowendValue = 0;
            if (WSHelper.IsOnLineMode)
            {
                F3230FieldUseData getChkoutXml = new F3230FieldUseData();
                return terraScanService.F3230_ChkOutEstimateComponentXML(out RowendValue, snapShotId, snapShotValue, TableName, StartRow);
            }
            else
            {
                return Helper.F3230_ChkOutEstimateComponentXML(snapShotId, snapShotValue, TableName, StartRow, out RowendValue);
            }
        }
        #endregion ChkOutEstimateComponentXML

        #region ChkOutCommentXML
        /// <summary>
        /// ChkOutCommentXML
        /// </summary>
        /// <param name="snapShotId"></param>
        /// <param name="snapShotValue"></param>
        /// <param name="TableName"></param>
        /// <param name="StartRow"></param>
        /// <param name="RowendValue"></param>
        /// <returns></returns>
        public static F3230FieldUseData F3230_ChkOutCommentXML(int snapShotId, string snapShotValue, string TableName, int StartRow, out int RowendValue)
        {
            RowendValue = 0;
            if (WSHelper.IsOnLineMode)
            {
                F3230FieldUseData getChkoutXml = new F3230FieldUseData();
                return terraScanService.F3230_ChkOutCommentXML(out RowendValue, snapShotId, snapShotValue, TableName, StartRow);
            }
            else
            {
                return Helper.F3230_ChkOutCommentXML(snapShotId, snapShotValue, TableName, StartRow, out RowendValue);
            }
        }
        #endregion ChkOutCommentXML

        #region ChkOutVSTGComponentXML
        /// <summary>
        /// ChkOutVSTGComponentXML
        /// </summary>
        /// <param name="snapShotId"></param>
        /// <param name="snapShotValue"></param>
        /// <param name="TableName"></param>
        /// <param name="StartRow"></param>
        /// <param name="RowendValue"></param>
        /// <returns></returns>
        public static F3230FieldUseData F3230_ChkOutVSTGComponentXML(int snapShotId, string snapShotValue, string TableName, int StartRow, out int RowendValue)
        {
            RowendValue = 0;
            if (WSHelper.IsOnLineMode)
            {
                F3230FieldUseData getChkoutXml = new F3230FieldUseData();
                return terraScanService.F3230_ChkOutVSTGComponentXML(out RowendValue, snapShotId, snapShotValue, TableName, StartRow);
            }
            else
            {
                return Helper.F3230_ChkOutVSTGComponentXML(snapShotId, snapShotValue, TableName, StartRow, out RowendValue);
            }
        }

        #endregion ChkOutVSTGComponentXML

        #region ChkOutFileXML
        /// <summary>
        /// ChkOutFileXML
        /// </summary>
        /// <param name="snapShotId"></param>
        /// <param name="snapShotValue"></param>
        /// <param name="TableName"></param>
        /// <param name="StartRow"></param>
        /// <param name="RowendValue"></param>
        /// <returns></returns>
        public static F3230FieldUseData F3230_ChkOutFileXML(int snapShotId, string snapShotValue, string TableName, int StartRow, out int RowendValue)
        {
            RowendValue = 0;
            if (WSHelper.IsOnLineMode)
            {
                F3230FieldUseData getChkoutXml = new F3230FieldUseData();
                return terraScanService.F3230_ChkOutFileXML(out RowendValue, snapShotId, snapShotValue, TableName, StartRow);
            }
            else
            {
                return Helper.F3230_ChkOutFileXML(snapShotId, snapShotValue, TableName, StartRow, out RowendValue);
            }
        }
        #endregion ChkOutFileXML

        #region ChkOutVSTGGonBldgXML
        /// <summary>
        /// ChkOutVSTGGonBldgXML
        /// </summary>
        /// <param name="snapShotId"></param>
        /// <param name="snapShotValue"></param>
        /// <param name="TableName"></param>
        /// <param name="StartRow"></param>
        /// <param name="RowendValue"></param>
        /// <returns></returns>
        public static F3230FieldUseData F3230_ChkOutVSTGGonBldgXML(int snapShotId, string snapShotValue, string TableName, int StartRow, out int RowendValue)
        {
            RowendValue = 0;
            if (WSHelper.IsOnLineMode)
            {
                F3230FieldUseData getChkoutXml = new F3230FieldUseData();
                return terraScanService.F3230_ChkOutVSTGGonBldgXML(out RowendValue, snapShotId, snapShotValue, TableName, StartRow);
            }
            else
            {
                return Helper.F3230_ChkOutVSTGGonBldgXML(snapShotId, snapShotValue, TableName, StartRow, out RowendValue);
            }
        }

        #endregion  ChkOutVSTGGonBldgXML


        #region ParcelHeaderChkOutXML
        /// <summary>
        /// ParcelHeaderChkOutXML
        /// </summary>
        /// <param name="snapShotId"></param>
        /// <param name="snapShotValue"></param>
        /// <returns></returns>
        public static F25000FieldUseData F25000_ParcelHeaderChkOutXML(int snapShotId, string snapShotValue)
        {
            if (WSHelper.IsOnLineMode)
            {
                F25000FieldUseData getChkoutXml = new F25000FieldUseData();
                return terraScanService.F25000_GetCheckOutDetails(snapShotId, snapShotValue);
            }
            else
            {
                return Helper.F25000_ParcelHeaderChkOutXML(snapShotId, snapShotValue);
            }
        }
        #endregion ParcelHeaderChkOutXML

        #region ChkOutFormXML
        /// <summary>
        /// ChkOutFormXML
        /// </summary>
        /// <param name="snapShotId"></param>
        /// <param name="snapShotValue"></param>
        /// <returns></returns>
        public static F3230FieldUseData F3230_ChkOutFormXML(int snapShotId, string snapShotValue, int rowStart)
        {

            if (WSHelper.IsOnLineMode)
            {
                F3230FieldUseData getChkoutXml = new F3230FieldUseData();
                return terraScanService.F3230_ChkOutFormXML(snapShotId, snapShotValue);
            }
            else
            {
                return Helper.F3230_ChkOutFormXML(snapShotId, snapShotValue);
            }
        }
        #endregion ChkOutFormXML

        /// <summary>
        /// F3230_LockParcelID
        /// </summary>
        /// <param name="SnapShotID"></param>
        /// <param name="LockAdminBy"></param>
        /// <param name="UserID"></param>
        /// <param name="UnlockParcelXML"></param>
        /// <returns></returns>
        public static int F3230_LockParcelID(int? SnapShotID, int? LockAdminBy, int? UserID, string UnlockParcelXML)
        {

            if (WSHelper.IsOnLineMode)
            {
                F3230FieldUseData getChkoutXml = new F3230FieldUseData();
                return terraScanService.F3230_LockParcelID(SnapShotID, LockAdminBy, UserID, UnlockParcelXML);
            }
            else
            {
                return Helper.F3230_LockParcelID(SnapShotID, LockAdminBy, UserID, UnlockParcelXML);
            }
        }

        /// <summary>
        /// F3230_ListLockedParcelID
        /// </summary>
        /// <param name="SnapShotID"></param>
        /// <param name="ParcelXML"></param>
        /// <returns></returns>
        public static F3230FieldUseData F3230_ListLockedParcelID(int? SnapShotID, out int RowendValue)
        {
            RowendValue = 0;
            if (WSHelper.IsOnLineMode)
            {
                F3230FieldUseData getChkoutXml = new F3230FieldUseData();
                return terraScanService.F3230_ListLockedParcelID(out RowendValue, SnapShotID);
            }
            else
            {
                return Helper.F3230_ListLockedParcelID(SnapShotID, out RowendValue);
            }
        }

        #region ChkOutMiscXML
        /// <summary>
        /// ChkOutMiscXML
        /// </summary>
        /// <param name="snapShotId"></param>
        /// <param name="snapShotValue"></param>
        /// <returns></returns>
        public static F3230FieldUseData F3230_ChkOutMiscXML(int snapShotId, string snapShotValue)
        {
            if (WSHelper.IsOnLineMode)
            {
                F3230FieldUseData getChkoutXml = new F3230FieldUseData();
                return terraScanService.F3230_ChkOutMiscXML(snapShotId, snapShotValue);
            }
            else
            {
                return Helper.F3230_ChkOutMiscXML(snapShotId, snapShotValue);
            }
        }
        #endregion ChkOutMiscXML

        #region ChkOutNBHDXML
        /// <summary>
        /// ChkOutNBHDXML
        /// </summary>
        /// <param name="snapShotId"></param>
        /// <param name="snapShotValue"></param>
        /// <param name="TableName"></param>
        /// <param name="StartRow"></param>
        /// <param name="RowendValue"></param>
        /// <returns></returns>
        public static F3230FieldUseData F3230_ChkOutNBHDXML(int snapShotId, string snapShotValue, string TableName, int StartRow, out int RowendValue)
        {
            RowendValue = 0;
            if (WSHelper.IsOnLineMode)
            {
                F3230FieldUseData getChkoutXml = new F3230FieldUseData();
                return terraScanService.F3230_ChkOutNBHDXML(out RowendValue, snapShotId, snapShotValue, TableName, StartRow);
            }
            else
            {
                return Helper.F3230_ChkOutNBHDXML(snapShotId, snapShotValue, TableName, StartRow, out RowendValue);
            }
        }
        #endregion ChkOutNBHDXML

        #region ChkOutUserXML
        /// <summary>
        /// ChkOutUserXML
        /// </summary>
        /// <param name="snapShotId"></param>
        /// <param name="snapShotValue"></param>
        /// <returns></returns>
        public static F3230FieldUseData F3230_ChkOutUserXML(int snapShotId, string snapShotValue)
        {
            if (WSHelper.IsOnLineMode)
            {
                F3230FieldUseData getChkoutXml = new F3230FieldUseData();
                return terraScanService.F3230_ChkOutUserXML(snapShotId, snapShotValue);
            }
            else
            {
                return Helper.F3230_ChkOutUserXML(snapShotId, snapShotValue);
            }
        }
        #endregion ChkOutUserXML

        #region ChkOutEventXML
        /// <summary>
        /// ChkOutEventXML
        /// </summary>
        /// <param name="snapShotId"></param>
        /// <param name="snapShotValue"></param>
        /// <returns></returns>
        public static F3230FieldUseData F3230_ChkOutEventXML(int snapShotId, string snapShotValue, string TableName, int StartRow, out int RowendValue)
        {
            RowendValue = 0;
            if (WSHelper.IsOnLineMode)
            {
                F3230FieldUseData getChkoutXml = new F3230FieldUseData();
                return terraScanService.F3230_ChkOutEventXML(out RowendValue, snapShotId, snapShotValue, TableName, StartRow);
            }
            else
            {
                return Helper.F3230_ChkOutEventXML(snapShotId, snapShotValue, TableName, StartRow, out RowendValue);
            }
        }
        #endregion ChkOutEventXML

        /// <summary>
        /// F3230_ChkOutParcelXML
        /// </summary>
        /// <param name="snapShotId"></param>
        /// <param name="snapShotValue"></param>
        /// <param name="TableName"></param>
        /// <param name="StartRow"></param>
        /// <param name="RowendValue"></param>
        /// <returns></returns>
        public static F3230FieldUseData F3230_ChkOutParcelXML(int snapShotId, string snapShotValue, string TableName, int StartRow, out int RowendValue)
        {
            RowendValue = 0;
            if (WSHelper.IsOnLineMode)
            {
                F3230FieldUseData getChkoutXml = new F3230FieldUseData();
                return terraScanService.F3230_ChkOutParcelXML(out RowendValue, snapShotId, snapShotValue, TableName, StartRow);
            }
            else
            {
                return Helper.F3230_ChkOutParcelXML(snapShotId, snapShotValue, TableName, StartRow, out RowendValue);
            }
        }

        #region ChkOutEventXML
        /// <summary>
        /// ChkOutEventXML
        /// </summary>
        /// <param name="snapShotId"></param>
        /// <param name="snapShotValue"></param>
        /// <returns></returns>
        public static F3230FieldUseData F3230_ChkOutOwnerXML(int snapShotId, string snapShotValue, string TableName, int StartRow, out int RowendValue)
        {
            RowendValue = 0;
            if (WSHelper.IsOnLineMode)
            {
                F3230FieldUseData getChkoutXml = new F3230FieldUseData();
                return terraScanService.F3230_ChkOutOwnerXML(out RowendValue, snapShotId, snapShotValue, TableName, StartRow);
            }
            else
            {
                return Helper.F3230_ChkOutEventXML(snapShotId, snapShotValue, TableName, StartRow, out RowendValue);
            }
        }
        #endregion ChkOutEventXML

        #region ChkOutDistrictXML
        /// <summary>
        /// ChkOutDistrictXML
        /// </summary>
        /// <param name="snapShotId"></param>
        /// <param name="snapShotValue"></param>
        /// <param name="TableName"></param>
        /// <param name="StartRow"></param>
        /// <param name="RowendValue"></param>
        /// <returns></returns>
        public static F3230FieldUseData F3230_ChkOutDistrictXML(int snapShotId, string snapShotValue, string TableName, int StartRow, out int RowendValue)
        {
            RowendValue = 0;
            if (WSHelper.IsOnLineMode)
            {
                F3230FieldUseData getChkoutXml = new F3230FieldUseData();
                return terraScanService.F3230_ChkOutDistrictXML(out RowendValue, snapShotId, snapShotValue, TableName, StartRow);
            }
            else
            {
                return Helper.F3230_ChkOutDistrictXML(snapShotId, snapShotValue, TableName, StartRow, out RowendValue);
            }
        }
        #endregion ChkOutDistrictXML

        #region ChkOutLegalXML
        /// <summary>
        /// ChkOutLegalXML
        /// </summary>
        /// <param name="snapShotId"></param>
        /// <param name="snapShotValue"></param>
        /// <param name="TableName"></param>
        /// <param name="StartRow"></param>
        /// <param name="RowendValue"></param>
        /// <returns></returns>
        public static F3230FieldUseData F3230_ChkOutLegalXML(int snapShotId, string snapShotValue, string TableName, int StartRow, out int RowendValue)
        {
            RowendValue = 0;
            if (WSHelper.IsOnLineMode)
            {
                F3230FieldUseData getChkoutXml = new F3230FieldUseData();
                return terraScanService.F3230_ChkOutLegalXML(out RowendValue, snapShotId, snapShotValue, TableName, StartRow);
            }
            else
            {
                return Helper.F3230_ChkOutLegalXML(snapShotId, snapShotValue, TableName, StartRow, out RowendValue);
            }
        }
        #endregion ChkOutLegalXML

        #region ChkOutMisc_CatalogXML
        /// <summary>
        /// ChkOutMisc_CatalogXML
        /// </summary>
        /// <param name="snapShotId"></param>
        /// <param name="snapShotValue"></param>
        /// <param name="TableName"></param>
        /// <param name="StartRow"></param>
        /// <param name="RowendValue"></param>
        /// <returns></returns>
        public static F3230FieldUseData F3230_ChkOutMisc_CatalogXML(int snapShotId, string snapShotValue, string TableName, int StartRow, out int RowendValue)
        {
            RowendValue = 0;
            if (WSHelper.IsOnLineMode)
            {
                F3230FieldUseData getChkoutXml = new F3230FieldUseData();
                return terraScanService.F3230_ChkOutMisc_CatalogXML(out RowendValue, snapShotId, snapShotValue, TableName, StartRow);
            }
            else
            {
                return Helper.F3230_ChkOutMisc_CatalogXML(snapShotId, snapShotValue, TableName, StartRow, out RowendValue);
            }
        }
        #endregion ChkOutMisc_CatalogXML

        #region ChkOutMiscTableXML
        /// <summary>
        /// ChkOutMiscTableXML
        /// </summary>
        /// <param name="snapShotId"></param>
        /// <param name="snapShotValue"></param>
        /// <param name="TableName"></param>
        /// <param name="StartRow"></param>
        /// <param name="RowendValue"></param>
        /// <returns></returns>
        public static F3230FieldUseData F3230_ChkOutMiscTableXML(int snapShotId, string snapShotValue, string TableName, int StartRow, out int RowendValue)
        {
            RowendValue = 0;
            if (WSHelper.IsOnLineMode)
            {
                F3230FieldUseData getChkoutXml = new F3230FieldUseData();
                return terraScanService.F3230_ChkOutMiscTableXML(out RowendValue, snapShotId, snapShotValue, TableName, StartRow);
            }
            else
            {
                return Helper.F3230_ChkOutMiscTableXML(snapShotId, snapShotValue, TableName, StartRow, out RowendValue);
            }
        }
        #endregion ChkOutMiscTableXML

        #region ChkOutMOwnerXML
        /// <summary>
        /// ChkOutMOwnerXML
        /// </summary>
        /// <param name="snapShotId"></param>
        /// <param name="snapShotValue"></param>
        /// <param name="TableName"></param>
        /// <param name="StartRow"></param>
        /// <param name="RowendValue"></param>
        /// <returns></returns>
        public static F3230FieldUseData F3230_ChkOutMOwnerXML(int snapShotId, string snapShotValue, string TableName, int StartRow, out int RowendValue)
        {
            RowendValue = 0;
            if (WSHelper.IsOnLineMode)
            {
                F3230FieldUseData getChkoutXml = new F3230FieldUseData();
                return terraScanService.F3230_ChkOutMOwnerXML(out RowendValue, snapShotId, snapShotValue, TableName, StartRow);
            }
            else
            {
                return Helper.F3230_ChkOutMOwnerXML(snapShotId, snapShotValue, TableName, StartRow, out RowendValue);
            }
        }
        #endregion ChkOutMOwnerXML

        #region ChkOutObjectXML
        /// <summary>
        /// ChkOutObjectXML
        /// </summary>
        /// <param name="snapShotId"></param>
        /// <param name="snapShotValue"></param>
        /// <param name="TableName"></param>
        /// <param name="StartRow"></param>
        /// <param name="RowendValue"></param>
        /// <returns></returns>
        public static F3230FieldUseData F3230_ChkOutObjectXML(int snapShotId, string snapShotValue, string TableName, int StartRow, out int RowendValue)
        {
            RowendValue = 0;
            if (WSHelper.IsOnLineMode)
            {
                F3230FieldUseData getChkoutXml = new F3230FieldUseData();
                return terraScanService.F3230_ChkOutObjectXML(out RowendValue, snapShotId, snapShotValue, TableName, StartRow);
            }
            else
            {
                return Helper.F3230_ChkOutObjectXML(snapShotId, snapShotValue, TableName, StartRow, out RowendValue);
            }
        }
        #endregion ChkOutObjectXML

        #region ChkOutValueSliceXML
        /// <summary>
        /// ChkOutValueSliceXML
        /// </summary>
        /// <param name="snapShotId"></param>
        /// <param name="snapShotValue"></param>
        /// <param name="TableName"></param>
        /// <param name="StartRow"></param>
        /// <param name="RowendValue"></param>
        /// <returns></returns>
        public static F3230FieldUseData F3230_ChkOutValueSliceXML(int snapShotId, string snapShotValue, string TableName, int StartRow, out int RowendValue)
        {
            RowendValue = 0;
            if (WSHelper.IsOnLineMode)
            {
                F3230FieldUseData getChkoutXml = new F3230FieldUseData();
                return terraScanService.F3230_ChkOutValueSliceXML(out RowendValue, snapShotId, snapShotValue, TableName, StartRow);
            }
            else
            {
                return Helper.F3230_ChkOutValueSliceXML(snapShotId, snapShotValue, TableName, StartRow, out RowendValue);
            }
        }
        #endregion ChkOutValueSliceXML

        #region ChkOutLandXML
        /// <summary>
        /// ChkOutLandXML
        /// </summary>
        /// <param name="snapShotId"></param>
        /// <param name="snapShotValue"></param>
        /// <param name="TableName"></param>
        /// <param name="StartRow"></param>
        /// <param name="RowendValue"></param>
        /// <returns></returns>
        public static F25000FieldUseData F25000_ChkOutLandXML(int snapShotId, string snapShotValue, string TableName, int StartRow, out int RowendValue)
        {
            RowendValue = 0;
            if (WSHelper.IsOnLineMode)
            {
                F3230FieldUseData getChkoutXml = new F3230FieldUseData();
                return terraScanService.F25000_ChkOutLandXML(out RowendValue, snapShotId, snapShotValue, TableName, StartRow);
            }
            else
            {
                return Helper.F25000_ChkOutLandXML(snapShotId, snapShotValue, TableName, StartRow, out RowendValue);
            }
        }
        #endregion ChkOutLandXML

        #region ChkOutVersionXML
        /// <summary>
        /// ChkOutVersionXML
        /// </summary>
        /// <param name="snapShotId"></param>
        /// <param name="snapShotValue"></param>
        /// <param name="TableName"></param>
        /// <param name="StartRow"></param>
        /// <param name="RowendValue"></param>
        /// <returns></returns>
        public static F25000FieldUseData F25000_ChkOutVersionXML(int snapShotId, string snapShotValue, string TableName, int StartRow, out int RowendValue)
        {
            RowendValue = 0;
            if (WSHelper.IsOnLineMode)
            {
                F3230FieldUseData getChkoutXml = new F3230FieldUseData();
                return terraScanService.F25000_ChkOutVersionXML(out RowendValue, snapShotId, snapShotValue, TableName, StartRow);
            }
            else
            {
                return Helper.F25000_ChkOutVersionXML(snapShotId, snapShotValue, TableName, StartRow, out RowendValue);
            }
        }
        #endregion ChkOutVersionXML

        #region ChkOutSitusXML
        /// <summary>
        /// ChkOutSitusXML
        /// </summary>
        /// <param name="snapShotId"></param>
        /// <param name="snapShotValue"></param>
        /// <param name="TableName"></param>
        /// <param name="StartRow"></param>
        /// <param name="RowendValue"></param>
        /// <returns></returns>
        public static F3230FieldUseData F3230_ChkOutSitusXML(int snapShotId, string snapShotValue)
        {
            if (WSHelper.IsOnLineMode)
            {
                F3230FieldUseData getChkoutXml = new F3230FieldUseData();
                return terraScanService.F3230_ChkOutSitusXML(snapShotId, snapShotValue);
            }
            else
            {
                return Helper.F3230_ChkOutSitusXML(snapShotId, snapShotValue);
            }
        }
        #endregion ChkOutSitusXML

        #region F3230_GetApexFilePathDetail
        /// <summary>
        /// F3230_GetApexFilePathDetail
        /// </summary>
        /// <param name="snapShotId">The snap shot id.</param>
        /// 
        /// <returns>DataSet</returns>
        public static F3230FieldUseData F3230_GetApexFilePathDetail(int snapShotId)
        {
            if (WSHelper.IsOnLineMode)
            {
                F3230FieldUseData getChkoutXml = new F3230FieldUseData();
                return terraScanService.F3230GetApexFilePath(snapShotId);
            }
            else
            {
                return Helper.F3230GetApexFilePath(snapShotId);
            }
        }
        #endregion F3230_GetApexFilePathDetail

        #region ChkOutSeniorExemptionXML
        /// <summary>
        /// ChkOutSeniorExemptionXML
        /// </summary>
        /// <param name="snapShotId"></param>
        /// <param name="snapShotValue"></param>
        /// <param name="TableName"></param>
        /// <param name="StartRow"></param>
        /// <param name="RowendValue"></param>
        /// <returns></returns>
        public static F25000FieldUseData F25000_ChkOutSeniorExemptionXML(int snapShotId, string snapShotValue)
        {
            if (WSHelper.IsOnLineMode)
            {
                F3230FieldUseData getChkoutXml = new F3230FieldUseData();
                return terraScanService.F25000_ChkOutSeniorExemptionXML(snapShotId, snapShotValue);
            }
            else
            {
                return Helper.F25000_ChkOutSeniorExemptionXML(snapShotId, snapShotValue);
            }
        }
        #endregion ChkOutSeniorExemptionXML

        #region ChkOutAssessmentTypeXML
        /// <summary>
        /// ChkOutAssessmentTypeXML
        /// </summary>
        /// <param name="snapShotId"></param>
        /// <param name="snapShotValue"></param>
        /// <param name="TableName"></param>
        /// <param name="StartRow"></param>
        /// <param name="RowendValue"></param>
        /// <returns></returns>
        public static F25000FieldUseData F25000_ChkOutAssessmentTypeXML(int snapShotId, string snapShotValue)
        {
            if (WSHelper.IsOnLineMode)
            {
                F3230FieldUseData getChkoutXml = new F3230FieldUseData();
                return terraScanService.F25000_ChkOutAssessmentTypeXML(snapShotId, snapShotValue);
            }
            else
            {
                return Helper.F25000_ChkOutAssessmentTypeXML(snapShotId, snapShotValue);
            }
        }
        #endregion ChkOutAssessmentTypeXML

        #region ChkOutParcelValueXML
        /// <summary>
        /// ChkOutParcelValueXML
        /// </summary>
        /// <param name="snapShotId"></param>
        /// <param name="snapShotValue"></param>
        /// <param name="TableName"></param>
        /// <param name="StartRow"></param>
        /// <param name="RowendValue"></param>
        /// <returns></returns>
        public static F25000FieldUseData F25000_ChkOutParcelValueXML(int snapShotId, string snapShotValue)
        {
            if (WSHelper.IsOnLineMode)
            {
                F3230FieldUseData getChkoutXml = new F3230FieldUseData();
                return terraScanService.F25000_ChkOutParcelValueXML(snapShotId, snapShotValue);
            }
            else
            {
                return Helper.F25000_ChkOutParcelValueXML(snapShotId, snapShotValue);
            }
        }
        #endregion ChkOutParcelValueXML

        #region ChkOutType2XML
        /// <summary>
        /// ChkOutType2XML
        /// </summary>
        /// <param name="snapShotId"></param>
        /// <param name="snapShotValue"></param>
        /// <param name="TableName"></param>
        /// <param name="StartRow"></param>
        /// <param name="RowendValue"></param>
        /// <returns></returns>
        public static F25000FieldUseData F25000_ChkOutType2XML(int snapShotId, string snapShotValue)
        {
            if (WSHelper.IsOnLineMode)
            {
                F3230FieldUseData getChkoutXml = new F3230FieldUseData();
                return terraScanService.F25000_ChkOutType2XML(snapShotId, snapShotValue);
            }
            else
            {
                return Helper.F25000_ChkOutType2XML(snapShotId, snapShotValue);
            }
        }
        #endregion ChkOutType2XML


        #endregion

        #region F3200CamaSketch

        #region F3200_GetSketchData
        /// <summary>
        /// Get the Sketch Data
        /// </summary>
        /// <param name="objectId">ObjectID</param>
        /// <returns>DataSet</returns>
        public static F3200CamaSketchData F3200_GetSketchData(int objectId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string sketchValue;
                F3200CamaSketchData getSketchData = new F3200CamaSketchData();
                sketchValue = terraScanService.F3200_GetSketchData(objectId);
                getSketchData.ReadXml(Utilities.SharedFunctions.XmlParser(sketchValue));
                return getSketchData;
            }
            else
            {
                return Helper.F3200_GetSketchData(objectId);
            }
        }

        #endregion F3200_GetSketchData

        #region F3200_GetStyleList
        /// <summary>
        /// Get the Style List Data
        /// </summary>
        /// <param name="objectId">ObjectID</param>
        /// <returns>String</returns>
        public static string F3200_GetStyleList(int objectId)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F3200_GetStyleList(objectId);
            }
            else
            {
                return Helper.F3200_GetStyleList(objectId);
            }
        }

        #endregion F3200_GetStyleList

        #region F3200_SaveSketch
        /// <summary>
        /// Save the Sketch data
        /// </summary>
        /// <param name="objectId">objectId</param>
        /// <param name="sketchData">sketchData</param>
        /// <param name="userId">UserID</param>
        /// <returns>DataSet</returns>
        public static DataSet F3200_SaveSketchData(int objectId, string sketchData, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F3200_SaveSketchData(objectId, sketchData, userId);
            }
            else
            {
                return Helper.F3200_SaveSketchData(objectId, sketchData, userId);
            }
        }

        #endregion F3200_SaveSketch

        #region F3200_CheckSmartPart

        /// <summary>
        /// Check the smartPart
        /// </summary>
        /// <param name="formId">FormNumber</param>
        /// <returns>integer</returns>
        public static int F3200_CheckSmartPart(int formId)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F3200_CheckSmartPart(formId);
            }
            else
            {
                return Helper.F3200_CheckSmartPart(formId);
            }
        }

        #endregion F3200_CheckSmartPart

        #endregion F3200CamaSketch

        #region F95010WebFormXML

        #region F95010GetWebFormXML

        /// <summary>
        /// Gets the web form XML.
        /// </summary>
        /// <param name="keyID">The key ID.</param>
        /// <param name="form">The form.</param>
        /// <param name="userId">The user id.</param>
        /// <returns>DataSet</returns>
        public static F95010GetWebFormXMLData GetWebFormXML(int? keyID, int form, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string webFormXMLDetails;
                F95010GetWebFormXMLData form95010GetWebFormXMLData = new F95010GetWebFormXMLData();
                webFormXMLDetails = terraScanService.GetWebFormXML(keyID, form, userId);
                form95010GetWebFormXMLData.ReadXml(Utilities.SharedFunctions.XmlParser(webFormXMLDetails));
                return form95010GetWebFormXMLData;
            }
            else
            {
                return Helper.GetWebFormXML(keyID, form, userId);
            }
        }

        #endregion F95010GetWebFormXML

        #endregion F95010WebFormXML

        #region 3510 Neighborhood Selection

        #region Get Neighborhood Type
        /// <summary>
        /// F3510_s the type of the list neighborhood.
        /// </summary>
        /// <returns>neighborhoodtypeDataSet</returns>
        public static F3510NeighborhoodSelectionData F3510_ListNeighborhoodType()
        {
            if (WSHelper.IsOnLineMode)
            {
                string neighborhoodType;
                F3510NeighborhoodSelectionData neighborhoodTypeData = new F3510NeighborhoodSelectionData();
                neighborhoodType = terraScanService.F3510_ListNeighborhoodType();
                neighborhoodTypeData.ReadXml(Utilities.SharedFunctions.XmlParser(neighborhoodType));
                return neighborhoodTypeData;
            }
            else
            {
                return Helper.F3510_ListNeighborhoodType();
            }
        }

        #endregion

        #region F3510 Neighborhood Selection Grid Details

        /// <summary>
        /// List Neighborhood Selection Grid Details
        /// </summary>
        /// <param name="neighborhood">Neighborhood.</param>
        /// <param name="childof">childOf.</param>
        /// <param name="rollyear">rollYear.</param>
        /// <param name="type">Type.</param>
        /// <param name="description">Description.</param>
        /// <returns>neighborhood SelectionDetails</returns>
        public static F3510NeighborhoodSelectionData F3510_ListNeighborhoodSelectionDetails(string neighborhood, string childof, string rollyear, string type, string description)
        {
            if (WSHelper.IsOnLineMode)
            {
                string neighborhoodSelectionDetails;
                F3510NeighborhoodSelectionData neighborhoodSelectionData = new F3510NeighborhoodSelectionData();
                neighborhoodSelectionDetails = terraScanService.F3510_ListNeighborhoodSelection(neighborhood, childof, rollyear, type, description);
                neighborhoodSelectionData.ReadXml(Utilities.SharedFunctions.XmlParser(neighborhoodSelectionDetails));
                return neighborhoodSelectionData;
            }
            else
            {
                return Helper.F3510_ListNeighborhoodSelection(neighborhood, childof, rollyear, type, description);
            }
        }

        #endregion F36041 GetCrop Details

        #endregion

        #region F2010_StateCodeSelection

        #region List StateCodeSelection

        /// <summary>
        /// F2010_s the list state code selection.
        /// </summary>
        /// <returns>DataSet</returns>
        public static F2010StateCodeSelectionData F2010_ListStateCodeSelection()
        {
            if (WSHelper.IsOnLineMode)
            {
                string listStateCode;
                F2010StateCodeSelectionData stateCodeSelectionData = new F2010StateCodeSelectionData();
                listStateCode = terraScanService.F2010_ListStateCodeSelection();
                stateCodeSelectionData.ReadXml(Utilities.SharedFunctions.XmlParser(listStateCode));
                return stateCodeSelectionData;
            }
            else
            {
                return Helper.F2010_ListStateCodeSelection();
            }
        }

        #endregion List StateCodeSelection

        #endregion F2010_StateCodeSelection

        #region 9066CheckIn
        #region GetAuditCount
        ///// <summary>
        ///// Get Audit Count
        ///// </summary>
        ///// <returns>Integer</returns>
        //public static int F9066_GetAuditCount()
        //{
        //    if (WSHelper.IsOnLineMode)
        //    {
        //        return terraScanService.F9066_GetAuditCount();
        //    }
        //    else
        //    {
        //        return Helper.F9066_GetAuditCount();
        //    }
        //}
        #endregion GetAuditCount

        #region GetCheckInXML
        ///// <summary>
        ///// Get Check In Details
        ///// </summary>
        ///// <returns>DataSet</returns>
        //public static F9066CheckInData F9066_GetCheckInData()
        //{
        //    if (WSHelper.IsOnLineMode)
        //    {
        //        string getCheckInValue;
        //        F9066CheckInData getCheckInData = new F9066CheckInData();
        //        getCheckInValue = terraScanService.F9066_GetCheckInData();
        //        ////string s = getCheckInValue.Replace("&lt;", "<").Replace("&gt;", ">").Replace("\r\n", "");
        //        ////string str = s.Replace("&gt;", ">");
        //        ////string test = str.Replace("\r\n    ", "");
        //        getCheckInData.ReadXml(Utilities.SharedFunctions.XmlParser(getCheckInValue));
        //        ////getCheckInData.ReadXml(Utilities.SharedFunctions.XmlParser(test, "InsertXML"));

        //        ////getCheckInData.ReadXml(str);
        //        return getCheckInData;
        //    }
        //    else
        //    {
        //        F9066CheckInData getCheckInData = new F9066CheckInData();
        //        getCheckInData = Helper.F9066_GetCheckInData();
        //        return getCheckInData;
        //    }
        //}
        #endregion GetCheckInXML

        #region SaveXML
        /// <summary>
        /// Save the values
        /// </summary>
        /// <param name="insertValue">insertValue</param>
        /// <param name="updateValue">updateValue</param>
        public static void F9066_SaveData(string insertValue, string updateValue)
        {
            if (WSHelper.IsOnLineMode)
            {
                terraScanService.F9066_SaveData(insertValue, updateValue);
            }
            else
            {
                Helper.F9066_SaveData(insertValue, updateValue);
            }
        }

        #endregion SaveXML

        #region DeleteData
        ///// <summary>
        ///// Delete the values
        ///// </summary>
        ///// <returns>Integer</returns>
        //public static int F9066_DeleteData()
        //{
        //    if (WSHelper.IsOnLineMode)
        //    {
        //        return terraScanService.F9066_DeleteData();
        //    }
        //    else
        //    {
        //        return Helper.F9066_DeleteData();
        //    }
        //}
        #endregion DeleteData

        #endregion 9066CheckIn

        #region F1430 Interest Calculator

        /// <summary>
        /// F1430_GetCalculatorDetails gets the calculator details on load.
        /// </summary>
        /// <param name="statementId">The statement id.</param>
        /// <returns>DataSet</returns>
        public static F1430InterestCalculatorData F1430_GetCalculatorDetails(int statementId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string calculatorValues;
                F1430InterestCalculatorData getCalculatorDetails = new F1430InterestCalculatorData();
                calculatorValues = terraScanService.F1430_GetCalculatorDetails(statementId);
                getCalculatorDetails.ReadXml(Utilities.SharedFunctions.XmlParser(calculatorValues));
                return getCalculatorDetails;
            }
            else
            {
                return Helper.F1430_GetCalculatorDetails(statementId);
            }
        }

        /// <summary>
        /// F1430_GetInterestDetails get the interest and deliquency details.
        /// </summary>
        /// <param name="statementId">The statement id.</param>
        /// <param name="interestDate">The interest date.</param>
        /// <param name="taxAmount">The tax amount.</param>
        /// <returns>DataSet</returns>
        public static F1430InterestCalculatorData F1430_GetInterestDetails(int statementId, DateTime interestDate, decimal taxAmount)
        {
            if (WSHelper.IsOnLineMode)
            {
                string interestValues;
                F1430InterestCalculatorData getCalculatorDetails = new F1430InterestCalculatorData();
                interestValues = terraScanService.F1430_GetInterestDetails(statementId, interestDate, taxAmount);
                getCalculatorDetails.ReadXml(Utilities.SharedFunctions.XmlParser(interestValues));
                return getCalculatorDetails;
            }
            else
            {
                return Helper.F1430_GetInterestDetails(statementId, interestDate, taxAmount);
            }
        }

        #endregion F1430 Interest Calculator

        #region F1440 Batch Button SmartPart

        #region F1440_SaveRecieptinSnapShotBatchButtonControl

        /// <summary>
        /// F1440_SaveRecieptinSnapShotBatchButtonControl        
        /// To Insert or Update the newly created Receipt id  to the particular snapshot id.
        /// </summary>
        /// <param name="snapshotId">the snapshotId</param>
        /// <param name="receiptId">the receiptId</param>
        /// <param name="userId">the userId</param>
        /// <returns>returns the no of items count in snapshot</returns>
        public static int F1440_SaveRecieptinSnapShotBatchButtonControl(int snapshotId, int? receiptId, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F1440_SaveRecieptinSnapShotBatchButtonControl(snapshotId, receiptId, userId);
            }
            else
            {
                return Helper.F1440_SaveRecieptinSnapShotBatchButtonControl(snapshotId, receiptId, userId);
            }
        }

        #endregion F1440_SaveRecieptinSnapShotBatchButtonControl

        #endregion F1440 Batch Button SmartPart

        #region F82001 BuildingPermit

        #region GetBuildingPermitDetails

        /// <summary>
        /// F82001_s the get building permit details.
        /// </summary>
        /// <param name="eventID">The event ID.</param>
        /// <returns>DataSet</returns>
        public static F82001BuildingPermitData F82001_GetBuildingPermitDetails(int eventID)
        {
            if (WSHelper.IsOnLineMode)
            {
                string buildingPermitDetails;
                F82001BuildingPermitData buildingPermitData = new F82001BuildingPermitData();
                buildingPermitDetails = terraScanService.F82001_GetBuildingPermitDetails(eventID);
                buildingPermitData.ReadXml(Utilities.SharedFunctions.XmlParser(buildingPermitDetails));
                return buildingPermitData;
            }
            else
            {
                return Helper.F82001_GetBuildingPermitDetails(eventID);
            }
        }

        #endregion GetBuildingPermitDetails

        #region InsertBuildingPermitDetails

        /// <summary>
        /// F82001_s the insert building permit details.
        /// </summary>
        /// <param name="permitId">The permit id.</param>
        /// <param name="buildingPermitItems">The building permit items.</param>
        /// <param name="userId">The user id.</param>
        /// <returns>Integer</returns>
        public static int F82001_InsertBuildingPermitDetails(int permitId, string buildingPermitItems, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F82001_InsertBuildingPermitDetails(permitId, buildingPermitItems, userId);
            }
            else
            {
                return Helper.F82001_InsertBuildingPermitDetails(permitId, buildingPermitItems, userId);
            }
        }

        #endregion InsertBuildingPermitDetails

        #endregion F82001 BuildingPermit

        #region F82002 Contractor Management

        /// <summary>
        /// F82002_s the list contractor management data.
        /// </summary>
        /// <param name="icontractorID">The icontractor ID.</param>
        /// <param name="contractorXML">The contractor XML.</param>
        /// <returns>DataSet</returns>
        public static F82002ContractorManagementData F82002_ListContractorManagementData(int? icontractorID, string contractorXML)
        {
            if (WSHelper.IsOnLineMode)
            {
                string contractData;
                F82002ContractorManagementData contractorManagementData = new F82002ContractorManagementData();
                contractData = terraScanService.F82002_ListContractorManagementData(icontractorID, contractorXML);
                contractorManagementData.ReadXml(Utilities.SharedFunctions.XmlParser(contractData));
                return contractorManagementData;
            }
            else
            {
                return Helper.F82002_ListContractorManagementData(icontractorID, contractorXML);
            }
        }

        /// <summary>
        /// F82002_s the delete contractor management.
        /// </summary>
        /// <param name="contractorId">The contractor id.</param>
        /// <param name="userID">The user ID.</param>
        public static void F82002_DeleteContractorManagement(int contractorId, int userID)
        {
            if (WSHelper.IsOnLineMode)
            {
                terraScanService.F82002_DeleteContractorManagement(contractorId, userID);
            }
            else
            {
                Helper.F82002_DeleteContractorManagement(contractorId, userID);
            }
        }

        /// <summary>
        /// F82002_s the insert building permit details.
        /// </summary>
        /// <param name="contractorID">The contractor ID.</param>
        /// <param name="contractorItems">The contractor items.</param>
        /// <param name="userID">The user ID.</param>
        /// <returns>Integer</returns>
        public static int F82002_InsertBuildingPermitDetails(int? contractorID, string contractorItems, int userID)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F82002_InsertBuildingPermitDetails(contractorID, contractorItems, userID);
            }
            else
            {
                return Helper.F82002_InsertBuildingPermitDetails(contractorID, contractorItems, userID);
            }
        }

        #endregion

        #region F36060DepreciationComp

        #region F36060_GetDepreciationTables

        /// <summary>
        /// To get the Depreciation  tables
        /// </summary>
        /// <param name="deprTableId">Deprtable id</param>
        /// <returns>Typed dataset containing the Deprecition and Deprecition items datatable</returns>
        public static F36060DepreciationData F36060_GetDepreciationTables(int deprTableId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string form36060DepreciationDatastring;
                F36060DepreciationData form36060DepreciationData = new F36060DepreciationData();
                form36060DepreciationDatastring = terraScanService.F36060_GetDepreciationTables(deprTableId);
                form36060DepreciationData.ReadXml(Utilities.SharedFunctions.XmlParser(form36060DepreciationDatastring));
                return form36060DepreciationData;
            }
            else
            {
                return Helper.F36060_GetDepreciationTables(deprTableId);
            }
        }

        #endregion F36060_GetDepreciationTables

        #region F36060_SaveDepreciationTables

        /// <summary>
        /// To save depreciation tables.
        /// </summary>
        /// <param name="deprTableId">The depr table id.</param>
        /// <param name="deprecationItem">The deprecation item.</param>
        /// <param name="otherDeprItem">The other depr item.</param>
        /// <param name="userId">The user id.</param>
        /// <returns>Inserted or update key id is returned</returns>
        public static int F36060_SaveDepreciationTables(int deprTableId, string deprecationItem, string otherDeprItem, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F36060_SaveDepreciationTables(deprTableId, deprecationItem, otherDeprItem, userId);
            }
            else
            {
                return Helper.F36060_SaveDepreciationTables(deprTableId, deprecationItem, otherDeprItem, userId);
            }
        }

        #endregion F36060_SaveDepreciationTables

        #region F36060_DeleteDepreciationTables

        /// <summary>
        /// To delete Depreciation Tables.
        /// </summary>
        /// <param name="deprTableId">The depr table id.</param>
        /// <param name="userId">The user id.</param>
        public static void F36060_DeleteDepreciationTables(int deprTableId, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                terraScanService.F36060_DeleteDepreciationTables(deprTableId, userId);
            }
            else
            {
                Helper.F36060_DeleteDepreciationTables(deprTableId, userId);
            }
        }

        #endregion F36060_DeleteDepreciationTables

        #endregion F36060DepreciationComp

        #region F49910InstrumentheaderDetails

        #region GetInstrumentHeaderDetails

        /// <summary>
        /// F49910_GetInstrumentHeaderDetails
        /// </summary>
        /// <param name="instId">instId</param>
        /// <returns>DataSet</returns>
        public static F49910InstrumentHeaderDataSet F49910_GetInstrumentHeaderDetails(int instId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string instrumentDatastring;
                F49910InstrumentHeaderDataSet instrumentHeaderDataSet = new F49910InstrumentHeaderDataSet();
                instrumentDatastring = terraScanService.F49910_GetInstrumentHeaderDetails(instId);
                instrumentHeaderDataSet.ReadXml(Utilities.SharedFunctions.XmlParser(instrumentDatastring));
                return instrumentHeaderDataSet;
            }
            else
            {
                return Helper.F49910_GetInstrumentHeaderDetails(instId);
            }
        }
        #endregion GetInstrumentHeaderDetails

        #region ListInstrumentType

        /// <summary>
        /// F49910_GetInstrumentTypeDetails
        /// </summary>
        /// <returns>DataSet</returns>
        public static F49910InstrumentHeaderDataSet F49910_GetInstrumentTypeDetails()
        {
            ////return null;
            if (WSHelper.IsOnLineMode)
            {
                string instrumentDatastring;
                F49910InstrumentHeaderDataSet instrumentHeaderDataSet = new F49910InstrumentHeaderDataSet();
                instrumentDatastring = terraScanService.F49910_GetInstrumentTypeDetails();
                instrumentHeaderDataSet.ReadXml(Utilities.SharedFunctions.XmlParser(instrumentDatastring));
                return instrumentHeaderDataSet;
            }
            else
            {
                return Helper.F49910_GetInstrumentTypeDetails();
            }
        }

        #endregion ListInstrumentType

        #region SaveInstrumentHeaderDetails

        /// <summary>
        /// F49910_SaveInstrumentHeaderDetails
        /// </summary>
        /// <param name="instId">instId</param>
        /// <param name="instrumentItems">instrumentItems</param>
        /// <param name="paymentItems">paymentItems</param>
        /// <param name="userId">userId</param>
        /// <returns>int</returns>
        public static int F49910_SaveInstrumentHeaderDetails(int instId, string instrumentItems, string paymentItems, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F49910_SaveInstrumentHeaderDetails(instId, instrumentItems, paymentItems, userId);
            }
            else
            {
                return Helper.F49910_SaveInstrumentHeaderDetails(instId, instrumentItems, paymentItems, userId);
            }
        }

        #endregion SaveInstrumentHeaderDetails

        #region F49910CheckInstrumentHeader Deatils

        /// <summary>
        /// F49910CheckInstrumentHeaderDetails
        /// Used to validate whether the records can be saved
        /// </summary>        
        /// <param name="instId"></param>
        /// <param name="instrumentItems"></param>
        /// <param name="paymentItems"></param>
        /// <param name="userId"></param>
        /// <returns>
        /// 0 - When the records can be saved
        /// -1 - when Instrument Number already exists in the Database
        /// </returns>
        public static int F49910CheckInstrumentHeaderDetails(int instId, string instrumentItems, string paymentItems, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F49910CheckInstrumentHeaderDetails(instId, instrumentItems, paymentItems, userId);
            }
            else
            {
                return Helper.F49910CheckInstrumentHeaderDetails(instId, instrumentItems, paymentItems, userId);
            }
        }

        #endregion F49910CheckInstrumentHeader Deatils

        #region DeleteInstrumentHeaderDetails

        /// <summary>
        /// F49910_DeleteInstrumentHeader
        /// </summary>
        /// <param name="instId">instId</param>
        /// <param name="userId">userId</param>
        /// <returns>int</returns>
        public static int F49910_DeleteInstrumentHeader(int instId, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F49910_DeleteInstrumentHeader(instId, userId);
            }
            else
            {
                return Helper.F49910_DeleteInstrumentHeader(instId, userId);
            }
        }

        #endregion DeleteInstrumentHeaderDetails

        #region CopyInstrumentDetails

        /// <summary>
        /// F49910_CopyInstrumentHeaderDetails
        /// </summary>
        /// <param name="instrumentId">instrumentId</param>
        /// <param name="instrumentValue">instrumentValue</param>
        /// <param name="grantorValue">grantorValue</param>
        /// <param name="granteeValue">granteeValue</param>
        /// <param name="legalValue">legalValue</param>
        /// <returns>dataSet</returns>
        public static F49910InstrumentHeaderDataSet F49910_CopyInstrumentHeaderDetails(int instrumentId, int instrumentValue, int grantorValue, int granteeValue, int legalValue)
        {
            ////return null;
            if (WSHelper.IsOnLineMode)
            {
                string instrumentDatastring;
                F49910InstrumentHeaderDataSet instrumentHeaderDataSet = new F49910InstrumentHeaderDataSet();
                instrumentDatastring = terraScanService.F49910_CopyInstrumentHeaderDetails(instrumentId, instrumentValue, grantorValue, granteeValue, legalValue);
                instrumentHeaderDataSet.ReadXml(Utilities.SharedFunctions.XmlParser(instrumentDatastring));
                return instrumentHeaderDataSet;
            }
            else
            {
                return Helper.F49910_CopyInstrumentHeaderDetails(instrumentId, instrumentValue, grantorValue, granteeValue, legalValue);
            }
        }

        #endregion CopyInstrumentDetails

        #region F49910_GetGranterAddressDetails

        /// <summary>
        /// F49910_s the get granter address details.
        /// </summary>
        /// <param name="grantId">The grant id.</param>
        /// <returns>The instrument header dataset.</returns>
        public static F49910InstrumentHeaderDataSet F49910_GetGranterAddressDetails(int grantId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string instrumentDatastring;
                F49910InstrumentHeaderDataSet instrumentHeaderDataSet = new F49910InstrumentHeaderDataSet();
                instrumentDatastring = terraScanService.F49910_GetGranterAddressDetails(grantId);
                instrumentHeaderDataSet.ReadXml(Utilities.SharedFunctions.XmlParser(instrumentDatastring));
                return instrumentHeaderDataSet;
            }
            else
            {
                return Helper.F49910_GetGranterAddressDetails(grantId);
            }
        }

        #endregion F49910_GetGranterAddressDetails

        #region GetFeeDetails

        /// <summary>
        /// F49910_GetFeeDetails
        /// </summary>
        /// <param name="insTypeId">insTypeId</param>
        /// <returns>dataSet</returns>
        public static F49910InstrumentHeaderDataSet F49910_GetFeeDetails(int insTypeId)
        {
            ////return null;
            if (WSHelper.IsOnLineMode)
            {
                string instrumentDatastring;
                F49910InstrumentHeaderDataSet instrumentHeaderDataSet = new F49910InstrumentHeaderDataSet();
                instrumentDatastring = terraScanService.F49910_GetFeeDetails(insTypeId);
                instrumentHeaderDataSet.ReadXml(Utilities.SharedFunctions.XmlParser(instrumentDatastring));
                return instrumentHeaderDataSet;
            }
            else
            {
                return Helper.F49910_GetInstrumentTypeDetails();
            }
        }

        #endregion GetFeeDetails

        #endregion F49910InstrumentheaderDetails

        #region F20050EdidSchedule

        #region F2200_ListEditScheduleDetails

        /// <summary>
        /// F2200_s the list edit schedule details.
        /// </summary>
        /// <param name="sheduleId">The shedule id.</param>
        /// <returns>The edit schedule dataset.</returns>
        public static F2200EditScheduleData F2200_ListEditScheduleDetails(int sheduleId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string editSchedulestring;
                F2200EditScheduleData editSchedule = new F2200EditScheduleData();
                editSchedulestring = terraScanService.F2200_ListEditScheduleDetails(sheduleId);
                editSchedule.ReadXml(Utilities.SharedFunctions.XmlParser(editSchedulestring));
                return editSchedule;
            }
            else
            {
                return Helper.F2200_ListEditScheduleDetails(sheduleId);
            }
        }

        /// <summary>
        /// F2200 get schedule details.
        /// </summary>
        /// <param name="sheduleId">The shedule id.</param>
        /// <returns>The edit schedule dataset.</returns>
        public static F2200EditScheduleData F25050_GetScheduleDetails(int scheduleId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string getSchedulestring;
                F2200EditScheduleData getSchedule = new F2200EditScheduleData();
                getSchedulestring = terraScanService.F25050_GetScheduleDetails(scheduleId);
                getSchedule.ReadXml(Utilities.SharedFunctions.XmlParser(getSchedulestring));
                return getSchedule;
            }
            else
            {
                return Helper.F25050_GetScheduleDetails(scheduleId);
            }
        }

        /// <summary>
        /// F2005_GetScheduleLockUserName
        /// </summary>
        /// <param name="userId">userId</param>
        /// <returns>DataSet</returns>
        public static F2200EditScheduleData F2005_GetScheduleUserName(int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string getparcellockusernameDetails;
                F2200EditScheduleData parcelLockingData = new F2200EditScheduleData();
                getparcellockusernameDetails = terraScanService.F2005_GetScheduleUserName(userId);
                parcelLockingData.ReadXml(Utilities.SharedFunctions.XmlParser(getparcellockusernameDetails));
                return parcelLockingData;
            }
            else
            {
                return Helper.F2005_GetScheduleUserName(userId);
            }
        }

        /// <summary>
        /// F2005_GetValidUser
        /// </summary>
        /// <param name="scheduleId">scheduleId</param>
        /// <param name="userId">userId</param>
        /// <param name="formNo">formNo</param>
        /// <returns>Integer</returns>
        public static int F2005_GetValidUser(int scheduleId, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F2005_GetValidUser(scheduleId, userId);
            }
            else
            {
                return Helper.F2005_GetValidUser(scheduleId, userId);
            }
        }

        /// <summary>
        /// F2005_GetValidUser
        /// </summary>
        /// <param name="scheduleId">scheduleId</param>
        /// <param name="userId">userId</param>
        /// <param name="formNo">formNo</param>
        /// <returns>Integer</returns>
        public static int F2005_UpdateParcelLockDetails(int scheduleId,int lockValue, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F2005_UpdateParcelLockDetails(scheduleId, lockValue, userId);
            }
            else
            {
                return Helper.F2005_UpdateParcelLockDetails(scheduleId, lockValue, userId);
            }
        }

        /// <summary>
        /// F2200s the get farm exempt amount.
        /// </summary>
        /// <param name="scheduleId">The schedule id.</param>
        /// <param name="isFarmExempt">if set to <c>true</c> [is farm exempt].</param>
        /// <param name="ExemptRollYear">The exempt roll year.</param>
        /// <returns></returns>
        public static F2200EditScheduleData f2200GetFarmExemptAmount(int scheduleId, bool isFarmExempt,int ExemptRollYear)
        {
            if (WSHelper.IsOnLineMode)
            {
                string exemptAmount;
                F2200EditScheduleData scheduleDataObj = new F2200EditScheduleData();
                exemptAmount = terraScanService.f2200GetFarmExemptAmount(scheduleId, isFarmExempt, ExemptRollYear);
                scheduleDataObj.ReadXml(Utilities.SharedFunctions.XmlParser(exemptAmount));
                return scheduleDataObj;
            }
            else
            {
                return Helper.f2200GetFarmExemptAmount(scheduleId, isFarmExempt, ExemptRollYear);
            }
        }
        #endregion

        #region F2200_InsertEditSchedule

        /// <summary>
        /// F2200_s the insert edit schedule.
        /// </summary>
        /// <param name="scheduleId">The schedule id.</param>
        /// <param name="scheduleItems">The schedule items.</param>
        /// <param name="userId">The user id.</param>
        /// <returns>The insert record status.</returns>
        public static F2200EditScheduleData F2200_InsertEditSchedule(int? scheduleId, string scheduleItems, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string outputValue;
                F2200EditScheduleData ListOutputValue = new F2200EditScheduleData();
                outputValue = terraScanService.F2200_InsertEditSchedule(scheduleId, scheduleItems, userId);
                ListOutputValue.ReadXml(Utilities.SharedFunctions.XmlParser(outputValue));
                return ListOutputValue;
            }
            else
            {
                return Helper.F2200_InsertEditSchedule(scheduleId, scheduleItems, userId);
            }
        }
        #endregion

        #region F2200_UpdateEditSchedule

        /// <summary>
        /// F2200_s the update edit schedule.
        /// </summary>
        /// <param name="scheduleId">The schedule id.</param>
        /// <param name="scheduleItems">The schedule items.</param>
        /// <param name="userId">The user id.</param>
        /// <returns>The update record status.</returns>
        public static int F2200_UpdateEditSchedule(int scheduleId, string scheduleItems, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F2200_UpdateEditSchedule(scheduleId, scheduleItems, userId);
            }
            else
            {
                return Helper.F2200_UpdateEditSchedule(scheduleId, scheduleItems, userId);
            }

        }
        #endregion

        #region F2200_DeleteEditSchedule

        /// <summary>
        /// F2200_s the delete edit schedule.
        /// </summary>
        /// <param name="scheduleId">The schedule id.</param>
        /// <param name="userId">The user id.</param>
        /// <returns>The record delete status.</returns>
        public static int F2200_DeleteEditSchedule(int scheduleId, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F2200_DeleteEditSchedule(scheduleId, userId);
            }
            else
            {
                return Helper.F2200_DeleteEditSchedule(scheduleId, userId);
            }
        }
        #endregion

        #region List Assessment Type Details
        /// <summary>
        /// F2200_s the get assessment type details.
        /// </summary>
        /// <param name="assessmentType">Type of the assessment.</param>
        /// <returns></returns>
        public static F2200EditScheduleData F2200_GetAssessmentTypeDetails(string assessmentType)
        {
            if (WSHelper.IsOnLineMode)
            {
                string assessmentTypeDetails;
                F2200EditScheduleData getassessmentTypeDetailsDetails = new F2200EditScheduleData();
                assessmentTypeDetails = terraScanService.F2200_GetAssessmentTypeDetails(assessmentType);
                getassessmentTypeDetailsDetails.ReadXml(Utilities.SharedFunctions.XmlParser(assessmentTypeDetails));
                return getassessmentTypeDetailsDetails;
            }
            else
            {
                return Helper.F2200_GetAssessmentTypeDetails(assessmentType);
            }
        }
        #endregion

        #region Get Penalty Percent

        /// <summary>
        /// Gets the penalty percent.
        /// </summary>
        /// <param name="filingDate">The filing date.</param>
        /// <returns>Penalty Percent</returns>
        public static decimal GetPenaltyPercent(string filingDate)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.GetPenaltyPercent(filingDate);
            }
            else
            {
                return Helper.GetPenaltyPercent(filingDate);
            }
        }

        /// <summary>
        /// F2200_s the get farm exempt amount.
        /// </summary>
        /// <param name="scheduleId">The schedule id.</param>
        /// <param name="isFarmExempt">if set to <c>true</c> [is farm exempt].</param>
        /// <param name="ExemptRollYear">The exempt roll year.</param>
        /// <returns></returns>
        public static decimal F2200_GetFarmExemptAmount(int scheduleId, bool isFarmExempt, int ExemptRollYear, bool isEx259, decimal ex259Amount)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F2200_GetFarmExemptAmount(scheduleId, isFarmExempt, ExemptRollYear, isEx259, ex259Amount);
            }
            else
            {
                return Helper.f2200_GetFarmExemptAmount(scheduleId, isFarmExempt, ExemptRollYear,isEx259,ex259Amount);
            }
        }

        /// <summary>
        /// F2200_s the get farm exempt amount.
        /// </summary>
        /// <param name="scheduleId">The schedule id.</param>
        /// <param name="isFarmExempt">if set to <c>true</c> [is farm exempt].</param>
        /// <param name="ExemptRollYear">The exempt roll year.</param>
        /// <returns></returns>
        public static F2200EditScheduleData F2200_Get259ExemptionAmount(int scheduleId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string getSchedulestring;
                F2200EditScheduleData getSchedule = new F2200EditScheduleData();
                getSchedulestring = terraScanService.F2200_Get259ExemptionAmount(scheduleId);
                getSchedule.ReadXml(Utilities.SharedFunctions.XmlParser(getSchedulestring));
                return getSchedule;
            }
            else
            {
                return Helper.F2200_Get259ExemptionAmount(scheduleId);
            }
        }

        #endregion Get Penalty Percent

        #endregion

        #region F49920 Instrument Search Engine

        #region Instrument Search Engine Load


        /// <summary>
        /// F49920_s the list instrument load.
        /// </summary>
        /// <returns></returns>
        public static F49920InstrumentSearchEngineData F49920_ListInstrumentLoad()
        {
            if (WSHelper.IsOnLineMode)
            {
                string instrumentload;
                F49920InstrumentSearchEngineData instrumentloadData = new F49920InstrumentSearchEngineData();
                instrumentload = terraScanService.F49920_ListInstrumentLoad();
                instrumentloadData.ReadXml(Utilities.SharedFunctions.XmlParser(instrumentload));
                return instrumentloadData;
            }
            else
            {
                return Helper.F49920_ListInstrumentLoad();
            }
        }



        #endregion


        #region Instrument Search Engine Search

        /// <summary>
        /// F49920_s the list instrument search.
        /// </summary>
        /// <param name="instrumentcondition">The instrumentcondition.</param>
        /// <returns></returns>
        public static F49920InstrumentSearchEngineData F49920_ListInstrumentSearch(string instrumentcondition)
        {
            if (WSHelper.IsOnLineMode)
            {
                string instrumentsearch;
                F49920InstrumentSearchEngineData instrumentsearchData = new F49920InstrumentSearchEngineData();
                instrumentsearch = terraScanService.F49920_ListInstrumentSearch(instrumentcondition);
                instrumentsearchData.ReadXml(Utilities.SharedFunctions.XmlParser(instrumentsearch));
                return instrumentsearchData;
            }
            else
            {
                return Helper.F49920_ListInstrumentSearch(instrumentcondition);
            }
        }


        #endregion


        #endregion

        #region F49911 PartiesField Listing

        #region  List PartiesField

        /// <summary>
        /// F49911_s the list parties field.
        /// </summary>
        /// <returns>The instrument header dataset.</returns>
        public static F49910InstrumentHeaderDataSet F49911_ListPartiesField()
        {
            if (WSHelper.IsOnLineMode)
            {
                string partiesFieldList;
                F49910InstrumentHeaderDataSet partiesFieldListingData = new F49910InstrumentHeaderDataSet();
                partiesFieldList = terraScanService.F49911_ListPartiesField();
                partiesFieldListingData.ReadXml(Utilities.SharedFunctions.XmlParser(partiesFieldList));
                return partiesFieldListingData;
            }
            else
            {
                return Helper.F49911_ListPartiesField();
            }
        }

        #endregion  List PartiesField

        #region Insert

        /// <summary>
        /// F49911_s the insert parties field details.
        /// </summary>
        /// <param name="instid">The instid.</param>
        /// <param name="grantorItems">The grantor items.</param>
        /// <param name="granteeItems">The grantee items.</param>
        /// <param name="userId">The user id.</param>
        /// <param name="isCopy">The is copy.</param>
        /// <returns>The status of the insert.</returns>
        public static int F49911_InsertPartiesFieldDetails(int instid, string grantorItems, string granteeItems, int userId, int isCopy)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F49911_InsertPartiesFieldDetails(instid, grantorItems, granteeItems, userId, isCopy);
            }
            else
            {
                return Helper.F49911_InsertPartiesFieldDetails(instid, grantorItems, granteeItems, userId, isCopy);
            }
        }
        #endregion Insert

        #endregion F49911 PartiesField Listing

        #region F49912 LegalField Listing

        #region  List LegalField

        /// <summary>
        /// F49912_s the list legal field.
        /// </summary>
        /// <param name="instId">The inst Id.</param>
        /// <returns>The legal field data set.</returns>
        public static F49912LegalData F49912_ListLegalField(int instId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string legalFieldList;
                F49912LegalData legalFieldData = new F49912LegalData();
                legalFieldList = terraScanService.F49912_ListLegalField(instId);
                legalFieldData.ReadXml(Utilities.SharedFunctions.XmlParser(legalFieldList));
                return legalFieldData;
            }
            else
            {
                return Helper.F49912_ListLegalField(instId);
            }
        }


        #endregion  List LegalField

        #region  Insert LegalField

        /// <summary>
        /// F49912_s the insert legal field details.
        /// </summary>
        /// <param name="instid">The instid.</param>
        /// <param name="legalItems">The legal items.</param>
        /// <param name="userId">The user id.</param>
        /// <param name="isCopy">The is copy.</param>
        /// <returns>The status of the insert.</returns>
        public static int F49912_InsertLegalFieldDetails(int instid, string legalItems, int userId, int isCopy)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F49912_InsertLegalFieldDetails(instid, legalItems, userId, isCopy);
            }
            else
            {
                return Helper.F49912_InsertLegalFieldDetails(instid, legalItems, userId, isCopy);
            }
        }

        #endregion  Insert LegalField

        /// <summary>
        /// F49912_s the list sub division combo.
        /// </summary>
        /// <returns></returns>
        public static F49912LegalData F49912_ListSubDivisionCombo()
        {
            if (WSHelper.IsOnLineMode)
            {
                string subDivisionComboDetails;
                F49912LegalData legalData = new F49912LegalData();
                subDivisionComboDetails = terraScanService.F49912_ListSubDivisionCombo();
                legalData.ReadXml(Utilities.SharedFunctions.XmlParser(subDivisionComboDetails));
                return legalData;
            }
            else
            {
                return Helper.F49912_ListSubDivisionCombo();
            }
        }

        #endregion F49911 LegalField Listing

        #region F36061 Depreciation Control

        #region F36061_ListDepr

        /// <summary>
        /// Used to List the Depr Details
        /// </summary>
        /// <param name="nbhdId">The NBHD id.</param>
        /// <returns>
        /// Typed Dataset containing the Depr Details
        /// </returns>
        public static F36061DepreciationControlData F36061_ListDepr(int nbhdId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string depreciationControlDatavalue;
                F36061DepreciationControlData depreciationControlData = new F36061DepreciationControlData();
                depreciationControlDatavalue = terraScanService.F36061_ListDepr(nbhdId);
                depreciationControlData.ReadXml(Utilities.SharedFunctions.XmlParser(depreciationControlDatavalue));
                return depreciationControlData;
            }
            else
            {
                return Helper.F36061_ListDepr(nbhdId);
            }
        }

        #endregion F36061_ListDepr

        #region F36061_ListDeprControlItems

        /// <summary>
        /// Used to Get the Depreciation Control Items Details.
        /// </summary>
        /// <param name="nbhdId">The NBHD id.</param>
        /// <returns>
        /// Typed Dataset containing the Depreciation Control Items Details
        /// </returns>
        public static F36061DepreciationControlData F36061_ListDeprControlItems(int nbhdId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string depreciationControlDatavalue;
                F36061DepreciationControlData depreciationControlData = new F36061DepreciationControlData();
                depreciationControlDatavalue = terraScanService.F36061_ListDeprControlItems(nbhdId);
                depreciationControlData.ReadXml(Utilities.SharedFunctions.XmlParser(depreciationControlDatavalue));
                return depreciationControlData;
            }
            else
            {
                return Helper.F36061_ListDeprControlItems(nbhdId);
            }
        }

        #endregion F36061_ListDeprControlItems

        #region F36061_SaveDeprControlItems

        /// <summary>
        /// Used to save the Depreciation Control Items Details .
        /// </summary>
        /// <param name="nbhdId">The NBHD id.</param>
        /// <param name="deprControlItems">The depr control items.</param>
        /// <param name="userId">The user id.</param>
        /// <returns>saved key id</returns>
        public static int F36061_SaveDeprControlItems(int? nbhdId, string deprControlItems, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F36061_SaveDeprControlItems(nbhdId, deprControlItems, userId);
            }
            else
            {
                return Helper.F36061_SaveDeprControlItems(nbhdId, deprControlItems, userId);
            }
        }

        #endregion F36061_SaveDeprControlItems

        #endregion F36061 Depreciation Control

        #region F36062 LandInfluence Control

        #region F36062_LandInfluence
        /// <summary>
        /// Used to Get the Depreciation Control Items Details.
        /// </summary>
        /// <param name="nbhdId">The NBHD id.</param>
        /// <returns>
        /// Typed Dataset containing the Depreciation Control Items Details
        /// </returns>
        public static F36062LandInfluenceData F36062_LandInfluenceItems(int nbhdId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string LandInfluenceControlDatavalue;
                F36062LandInfluenceData LandInfluenceControlData = new F36062LandInfluenceData();
                LandInfluenceControlDatavalue = terraScanService.F36062_LandInfluenceItems(nbhdId);
                LandInfluenceControlData.ReadXml(Utilities.SharedFunctions.XmlParser(LandInfluenceControlDatavalue));
                return LandInfluenceControlData;
            }
            else
            {
                return Helper.F36062_LandInfluenceItems(nbhdId);
            }
        }

        #region F36062_SaveLandInfluenceControlItems

        /// <summary>
        /// Used to save the Depreciation Control Items Details .
        /// </summary>
        /// <param name="nbhdId">The NBHD id.</param>
        /// <param name="deprControlItems">The depr control items.</param>
        /// <param name="userId">The user id.</param>
        /// <returns>saved key id</returns>
        public static int F36062_SaveInfluenceControl(int? nbhdId, string InfluenceItems, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F36062_SaveInfluenceControl(nbhdId, InfluenceItems, userId);
            }
            else
            {
                return Helper.F36062_SaveInfluenceControl(nbhdId, InfluenceItems, userId);
            }
        }

        #endregion F36062_SaveLandInfluenceControlItems

        #endregion






        #endregion

        #region F35050ScheduleLineItem

        #region F35050_GetScheduleLineItemDetails

        /// <summary>
        /// F35050_GetScheduleLineItemDetails
        /// </summary>
        /// <param name="scheduleId">scheduleId</param>
        /// <returns>string</returns>
        public static F35050ScheduleLineItemDataSet F35050_GetScheduleLineItemDetails(int scheduleId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string instrumentDatastring;
                F35050ScheduleLineItemDataSet scheduleLineItem = new F35050ScheduleLineItemDataSet();
                instrumentDatastring = terraScanService.F35050_GetScheduleLineItemDetails(scheduleId);
                scheduleLineItem.ReadXml(Utilities.SharedFunctions.XmlParser(instrumentDatastring));
                return scheduleLineItem;
            }
            else
            {
                return Helper.F35050_GetScheduleLineItemDetails(scheduleId);
            }
        }

        /// <summary>
        /// F35050_s the get depr percentage.
        /// </summary>
        /// <param name="rollyear">The rollyear.</param>
        /// <param name="deprtableId">The deprtable ID.</param>
        /// <param name="year">The year.</param>
        /// <returns>The scheduleLineItem dataset.</returns>
        public static F35050ScheduleLineItemDataSet F35050_GetDeprPercentage(int rollyear, int deprtableId, int year)
        {
            if (WSHelper.IsOnLineMode)
            {
                string scheduleLineItem;
                F35050ScheduleLineItemDataSet scheduleLineItemData = new F35050ScheduleLineItemDataSet();
                scheduleLineItem = terraScanService.F35050_GetDeprPercentage(rollyear, deprtableId, year);
                scheduleLineItemData.ReadXml(Utilities.SharedFunctions.XmlParser(scheduleLineItem));
                return scheduleLineItemData;
            }
            else
            {
                return Helper.F35050_GetDeprPercentage(rollyear, deprtableId, year);
            }
        }

        #endregion F35050_GetScheduleLineItemDetails

        #region F35050_GetScheduleItem

        /// <summary>
        /// F35050_GetScheduleItem
        /// </summary>
        /// <returns>string</returns>
        public static F35050ScheduleLineItemDataSet F35050_GetScheduleItem()
        {
            if (WSHelper.IsOnLineMode)
            {
                string instrumentDatastring;
                F35050ScheduleLineItemDataSet scheduleLineItem = new F35050ScheduleLineItemDataSet();
                instrumentDatastring = terraScanService.F35050_GetScheduleItem();
                scheduleLineItem.ReadXml(Utilities.SharedFunctions.XmlParser(instrumentDatastring));
                return scheduleLineItem;
            }
            else
            {
                return Helper.F35050_GetScheduleItem();
            }
        }
        #endregion F35050_GetScheduleItem

        #region F35050ListTableDetails

        public static F35050ScheduleLineItemDataSet F35050_GetListTableDetails(int itemcategoryID)
        {
            if (WSHelper.IsOnLineMode)
            {
                string instrumentDatastring;
                F35050ScheduleLineItemDataSet scheduleLineItem = new F35050ScheduleLineItemDataSet();
                instrumentDatastring = terraScanService.F35050_GetListTableDetails(itemcategoryID);
                scheduleLineItem.ReadXml(Utilities.SharedFunctions.XmlParser(instrumentDatastring));
                return scheduleLineItem;
            }
            else
            {
                return Helper.F35050_GetListTableDetails(itemcategoryID);
            }

        }


        #endregion

        #region F35050ListOutTableDetails

        /// <summary>
        /// F35050_s the get list out table details.
        /// </summary>
        /// <param name="scheduleId">The schedule id.</param>
        /// <returns>The schedule line item dataset.</returns>
        public static F35050ScheduleLineItemDataSet F35050_GetListOutTableDetails(int scheduleId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string instrumentDatastring;
                F35050ScheduleLineItemDataSet scheduleLineItem = new F35050ScheduleLineItemDataSet();
                instrumentDatastring = terraScanService.F35050_GetListOutTableDetails(scheduleId);
                scheduleLineItem.ReadXml(Utilities.SharedFunctions.XmlParser(instrumentDatastring));
                return scheduleLineItem;
            }
            else
            {
                return Helper.F35050_GetListOutTableDetails(scheduleId);
            }
        }

        #endregion

        #region F35050_GetScheduleCategory

        /// <summary>
        /// F35050_GetScheduleCategory
        /// </summary>
        /// <returns>string</returns>
        public static F35050ScheduleLineItemDataSet F35050_GetScheduleCategory()
        {
            if (WSHelper.IsOnLineMode)
            {
                string instrumentDatastring;
                F35050ScheduleLineItemDataSet scheduleLineItem = new F35050ScheduleLineItemDataSet();
                instrumentDatastring = terraScanService.F35050_GetScheduleCategory();
                scheduleLineItem.ReadXml(Utilities.SharedFunctions.XmlParser(instrumentDatastring));
                return scheduleLineItem;
            }
            else
            {
                return Helper.F35050_GetScheduleCategory();
            }
        }

        #endregion F35050_GetScheduleCategory

        #region F35050_SaveScheduleLineItem

        /// <summary>
        /// F35050_s the save schedule line item.
        /// </summary>
        /// <param name="scheduleId">The schedule id.</param>
        /// <param name="scheduleItem">The schedule item.</param>
        /// <param name="userId">The user id.</param>
        /// <returns>The status of the insert.</returns>
        public static int F35050_SaveScheduleLineItem(int scheduleId, string scheduleItem, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F35050_SaveScheduleLineItem(scheduleId, scheduleItem, userId);
            }
            else
            {
                return Helper.F35050_SaveScheduleLineItem(scheduleId, scheduleItem, userId);
            }
        }

        #endregion F35050_SaveScheduleLineItem

        #region F35050_CalculateAmount

        /// <summary>
        /// F35050_s the calculate amount.
        /// </summary>
        /// <param name="scheduleItemId">The schedule item ID.</param>
        /// <param name="rollYear">The rollyear.</param>
        /// <param name="year">The year.</param>
        /// <param name="deprDescription">The depr description.</param>
        /// <returns>The schedule line items dataset.</returns>
        public static F35050ScheduleLineItemDataSet F35050_CalculateAmount(int scheduleItemId, int rollYear, int year, int deprDescription)
        {
            if (WSHelper.IsOnLineMode)
            {
                string calculateAmount;
                F35050ScheduleLineItemDataSet scheduleLineItems = new F35050ScheduleLineItemDataSet();
                calculateAmount = terraScanService.F35050_CalculateAmount(scheduleItemId, rollYear, year, deprDescription);
                scheduleLineItems.ReadXml(Utilities.SharedFunctions.XmlParser(calculateAmount));
                return scheduleLineItems;

            }
            else
            {
                return Helper.F35050_CalculateAmount(scheduleItemId, rollYear, year, deprDescription);
            }
        }

        #endregion

        #region GetDepreciationValue

        /// <summary>
        /// F35050_GetDepreciationValue
        /// </summary>
        /// <param name="scheduleId">scheduleId</param>
        /// <param name="recv">recv</param>
        /// <param name="rollYear">rollYear</param>
        /// <returns>DataSet</returns>
        public static F35050ScheduleLineItemDataSet F35050_GetDepreciationValue(int scheduleId, int recv, int rollYear)
        {
            if (WSHelper.IsOnLineMode)
            {
                string instrumentDatastring;
                F35050ScheduleLineItemDataSet scheduleLineItem = new F35050ScheduleLineItemDataSet();
                instrumentDatastring = terraScanService.F35050_GetDepreciationValue(scheduleId, recv, rollYear);
                scheduleLineItem.ReadXml(Utilities.SharedFunctions.XmlParser(instrumentDatastring));
                return scheduleLineItem;
            }
            else
            {
                return Helper.F35050_GetDepreciationValue(scheduleId, recv, rollYear);
            }
        }
        #endregion GetDepreciationValue

        #region DeleteScheduleLineItem

        /// <summary>
        /// DeleteScheduleLineItem
        /// </summary>
        /// <param name="scheduleLineId">scheduleLineId</param>
        /// <param name="userId">userId</param>
        /// <returns>int</returns>
        public static int F35050_DeleteScheduleLineItem(int scheduleLineId, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F35050_DeleteScheduleLineItem(scheduleLineId, userId);
            }
            else
            {
                return Helper.F35050_DeleteScheduleLineItem(scheduleLineId, userId);
            }
        }

        #endregion DeleteScheduleLineItem

        #endregion F35050ScheduleLineItem

        #region F1402 Schedule Search

        /// <summary>
        /// F1402_s the list schedule search.
        /// </summary>
        /// <param name="scheduleConditionXml">The schedule condition XML.</param>
        /// <returns></returns>
        public static F1402ScheduleSelectionData F1402_ListScheduleSearch(string scheduleConditionXml)
        {
            if (WSHelper.IsOnLineMode)
            {
                string schedulesearch;
                F1402ScheduleSelectionData schedulesearchData = new F1402ScheduleSelectionData();
                schedulesearch = terraScanService.F1402_ListScheduleSearch(scheduleConditionXml);
                schedulesearchData.ReadXml(Utilities.SharedFunctions.XmlParser(schedulesearch));
                return schedulesearchData;
            }
            else
            {
                return Helper.F1402_ListScheduleSearch(scheduleConditionXml);
            }
        }

        #endregion

        #region F27010 MiscAssessment

        #region GetRollYear
        /// <summary>
        /// F27010s the get roll year.
        /// </summary>
        /// <param name="parcelId">The parcel id.</param>
        /// <returns>Integer</returns>
        public static int F27010GetRollYear(int parcelId)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F27010GetRollYear(parcelId);
            }
            else
            {
                return Helper.F27010GetRollYear(parcelId);
            }
        }
        #endregion GetRollYear

        #region Get Assessment Type
        /// <summary>
        /// F27010s the type of the get assessment.
        /// </summary>
        /// <param name="rollYear">The roll year.</param>
        /// <returns>DataSet</returns>
        public static F27010MiscAssessmentData F27010GetAssessmentType(int rollYear)
        {
            if (WSHelper.IsOnLineMode)
            {
                string assessmentValue;
                F27010MiscAssessmentData assessmentData = new F27010MiscAssessmentData();
                assessmentValue = terraScanService.F27010GetAssessmentType(rollYear);
                assessmentData.ReadXml(Utilities.SharedFunctions.XmlParser(assessmentValue));
                return assessmentData;
            }
            else
            {
                return Helper.F27010GetAssessmentType(rollYear);
            }
        }
        #endregion Get Assessment Type

        #region GetDistrict
        /// <summary>
        /// F27010s the get district.
        /// </summary>
        /// <param name="parcelId">The parcel id.</param>
        /// <param name="madTypeId">The mad type id.</param>
        /// <param name="rollYear">The roll year.</param>
        /// <returns>DataSet</returns>
        public static F27010MiscAssessmentData F27010GetDistrict(int parcelId, int madTypeId, int rollYear)
        {
            if (WSHelper.IsOnLineMode)
            {
                string districtValue;
                F27010MiscAssessmentData districtData = new F27010MiscAssessmentData();
                districtValue = terraScanService.F27010GetDistrict(parcelId, madTypeId, rollYear);
                districtData.ReadXml(Utilities.SharedFunctions.XmlParser(districtValue));
                return districtData;
            }
            else
            {
                return Helper.F27010GetDistrict(parcelId, madTypeId, rollYear);
            }
        }
        #endregion GetDistrict

        #region Check Default District
        /// <summary>
        /// F27010s the check default district.
        /// </summary>
        /// <param name="parcelId">The parcel id.</param>
        /// <param name="madTypeId">The mad type id.</param>
        /// <param name="rollYear">The roll year.</param>
        /// <returns>Integer</returns>
        public static int F27010CheckDefaultDistrict(int parcelId, int madTypeId, int rollYear)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F27010CheckDefaultDistrict(parcelId, madTypeId, rollYear);
            }
            else
            {
                return Helper.F27010CheckDefaultDistrict(parcelId, madTypeId, rollYear);
            }
        }
        #endregion Check Default District

        #region Get ToolTip Message
        /// <summary>
        /// F27010s the get message.
        /// </summary>
        /// <param name="parcelId">The parcel id.</param>
        /// <param name="madTypeId">The mad type id.</param>
        /// <param name="madDistrictId">The mad district id.</param>
        /// <returns>DataSet</returns>
        public static F27010MiscAssessmentData F27010GetMessage(int parcelId, int madTypeId, int madDistrictId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string messageValue;
                F27010MiscAssessmentData messageData = new F27010MiscAssessmentData();
                messageValue = terraScanService.F27010GetMessage(parcelId, madTypeId, madDistrictId);
                messageData.ReadXml(Utilities.SharedFunctions.XmlParser(messageValue));
                return messageData;
            }
            else
            {
                return Helper.F27010GetMessage(parcelId, madTypeId, madDistrictId);
            }
        }
        #endregion Get ToolTip Message

        #region GetMiscAssessment (MADType1)
        /// <summary>
        /// F27010s the get misc data.
        /// </summary>
        /// <param name="madDistrictId">The mad district id.</param>
        /// <param name="parcelId">The parcel id.</param>
        /// <returns>DataSet</returns>
        public static F27010MiscAssessmentData F27010GetMiscData(int madDistrictId, int parcelId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string miscValue;
                F27010MiscAssessmentData miscData = new F27010MiscAssessmentData();
                DataSet tempDataSet = new DataSet();
                miscValue = terraScanService.F27010GetMiscData(madDistrictId, parcelId);
                tempDataSet.ReadXml(Utilities.SharedFunctions.XmlParser(miscValue));
                miscData.ReadXml(Utilities.SharedFunctions.XmlParser(miscValue));
                return miscData;
            }
            else
            {
                return Helper.F27010GetMiscData(madDistrictId, parcelId);
            }
        }
        #endregion GetMiscAssessment (MADType1)

        #region GetMiscAssessment (Other MADType)

        /// <summary>
        /// F27010s the get others misc data.
        /// </summary>
        /// <param name="madDistrictId">The mad district id.</param>
        /// <param name="parcelId">The parcel id.</param>
        /// <param name="procedureName">Name of the procedure.</param>
        /// <returns></returns>
        public static F27010MiscAssessmentData F27010GetOthersMiscData(int madDistrictId, int parcelId, string procedureName)
        {
            if (WSHelper.IsOnLineMode)
            {
                string miscValue;
                F27010MiscAssessmentData miscData = new F27010MiscAssessmentData();
                miscValue = terraScanService.F27010GetOthersMiscData(madDistrictId, parcelId, procedureName);
                miscData.ListMiscAssessmentTable.ReadXml(Utilities.SharedFunctions.XmlParser(miscValue));
                return miscData;
            }
            else
            {
                return Helper.F27010GetOthersMiscData(madDistrictId, parcelId, procedureName);
            }
        }

        #endregion GetMiscAssessment (Other MADType)

        #region GetDefaultMiscData

        /// <summary>
        /// F27010s the get default misc data.
        /// </summary>
        /// <param name="parcelId">The parcel id.</param>
        /// <param name="madTypeId">The mad type id.</param>
        /// <returns>DataSet</returns>
        public static F27010MiscAssessmentData F27010GetDefaultMiscData(int parcelId, int madTypeId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string miscValue;
                F27010MiscAssessmentData miscData = new F27010MiscAssessmentData();
                DataSet tempDataSet = new DataSet();
                miscValue = terraScanService.F27010GetDefaultMiscData(parcelId, madTypeId);
                tempDataSet.ReadXml(Utilities.SharedFunctions.XmlParser(miscValue));
                miscData.ReadXml(Utilities.SharedFunctions.XmlParser(miscValue));

                if (tempDataSet.Tables.Count > 0)
                {
                    if (miscData.Tables[miscData.AssessmentTypeTable.TableName].Rows.Count > 0)
                    {
                        miscData.Tables[miscData.AssessmentTypeTable.TableName].Rows[0].Delete();
                    }
                    if (miscData.Tables[miscData.DistrictTable.TableName].Rows.Count > 0)
                    {
                        miscData.Tables[miscData.DistrictTable.TableName].Rows[0].Delete();
                    }

                    if (tempDataSet.Tables.Contains(miscData.DistrictTable.TableName))
                    {
                        tempDataSet.Tables[miscData.DistrictTable.TableName].Columns[0].SetOrdinal(2);
                        miscData.Tables[miscData.DistrictTable.TableName].LoadDataRow(tempDataSet.Tables[miscData.DistrictTable.TableName].Rows[0].ItemArray, true);
                    }

                    miscData.Tables[miscData.AssessmentTypeTable.TableName].LoadDataRow(tempDataSet.Tables[miscData.AssessmentTypeTable.TableName].Rows[0].ItemArray, true);


                    if (miscData.Tables[miscData.GetMessageTable.TableName].Rows.Count == 0 && tempDataSet.Tables.Count > 0)
                    {
                        miscData.Tables[miscData.GetMessageTable.TableName].LoadDataRow(tempDataSet.Tables[miscData.ListMiscAssessmentTable.TableName].Rows[0].ItemArray, true);
                    }
                }

                return miscData;
            }
            else
            {
                return Helper.F27010GetDefaultMiscData(parcelId, madTypeId);
            }
        }
        #endregion GetDefaultMiscData

        #region SaveMiscAssessment
        /// <summary>
        /// F27010_s the save misc assessment.
        /// </summary>
        /// <param name="parcelId">The parcel id.</param>
        /// <param name="miscType">Type of the misc.</param>
        /// <param name="madItem">The mad item.</param>
        /// <param name="miscItems">The misc items.</param>
        /// <param name="userId">The user id.</param>
        /// <returns>Integer</returns>
        public static int F27010_SaveMiscAssessment(int parcelId, string miscType, string madItem, string miscItems, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F27010_SaveMiscAssessment(parcelId, miscType, madItem, miscItems, userId);
            }
            else
            {
                return Helper.F27010_SaveMiscAssessment(parcelId, miscType, madItem, miscItems, userId);
            }
        }
        #endregion SaveMiscAssessment

        #endregion F27010 MiscAssessment

        #region F84401 Signs Properties

        #region Get Signs Properties

        /// <summary>
        /// F84401_s the get signs properties.
        /// </summary>
        /// <param name="featureId">The feature id.</param>
        /// <returns>DataSet contains Sign property</returns>
        public static F84401SignsPropertyData F84401_GetSignsProperties(int featureId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string signsPropertiesValue;
                F84401SignsPropertyData signsPropertiesData = new F84401SignsPropertyData();
                signsPropertiesValue = terraScanService.F84401_GetSignsProperties(featureId);
                signsPropertiesData.ReadXml(Utilities.SharedFunctions.XmlParser(signsPropertiesValue));
                return signsPropertiesData;
            }
            else
            {
                return Helper.F84401_GetSignsProperties(featureId);
            }
        }

        #endregion Get Signs Properties

        #region Save Signs Properties

        /// <summary>
        /// F84401_s the save signs properties.
        /// </summary>
        /// <param name="featureId">The feature id.</param>
        /// <param name="signsProperties">The signs properties.</param>
        /// <param name="userId">The user id.</param>
        /// <returns>Integer</returns>
        public static int F84401_SaveSignsProperties(int featureId, string signsProperties, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F84401_SaveSignsProperties(featureId, signsProperties, userId);
            }
            else
            {
                return Helper.F84401_SaveSignsProperties(featureId, signsProperties, userId);
            }
        }

        #endregion Save Signs Properties

        #region Delete Signs Properties

        /// <summary>
        /// F84401_s the delete signs properties.
        /// </summary>
        /// <param name="featureId">The feature id.</param>
        /// <param name="userId">The user id.</param>
        public static void F84401_DeleteSignsProperties(int featureId, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                terraScanService.F84401_DeleteSignsProperties(featureId, userId);
            }
            else
            {
                Helper.F84401_DeleteSignsProperties(featureId, userId);
            }
        }

        #endregion Delete Signs Properties

        #endregion F84401 Signs Properties

        #region F29531 AssociationLink-LinkType

        /// <summary>
        /// F29531s the type of the association link.
        /// </summary>
        /// <returns></returns>
        public static F29531AssciationLinkData F29531AssociationLinkType(int userid)
        {
            if (WSHelper.IsOnLineMode)
            {
                string associationLinkType;
                F29531AssciationLinkData associationLinkTypeData = new F29531AssciationLinkData();
                associationLinkType = terraScanService.F29531AssociationLinkType(userid);
                associationLinkTypeData.ReadXml(Utilities.SharedFunctions.XmlParser(associationLinkType));
                return associationLinkTypeData;
            }
            else
            {
                return Helper.F29531AssociationLinkType(userid);
            }
        }

        /// <summary>
        /// F29531_s the fill association link grid.
        /// </summary>
        /// <param name="keyid">The keyid.</param>
        /// <param name="formId">The form id.</param>
        /// <returns>The association link dataset.</returns>
        public static F29531AssciationLinkData F29531_FillAssociationLinkGrid(int keyid, int formId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string associationLinks;
                F29531AssciationLinkData associationData = new F29531AssciationLinkData();
                associationLinks = terraScanService.F29531_FillAssociationLinkGrid(keyid, formId);
                associationData.ReadXml(Utilities.SharedFunctions.XmlParser(associationLinks));
                return associationData;
            }
            else
            {
                return Helper.F29531_FillAssociationLinkGrid(keyid, formId);
            }
        }

        /// <summary>
        /// F29531_s the save association link.
        /// </summary>
        /// <param name="associationid">The associationid.</param>
        /// <param name="associationLinkItems">The association link items.</param>
        /// <param name="userId">The user id.</param>
        /// <returns></returns>
        public static int F29531_SaveAssociationLink(int associationid, string associationLinkItems, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F29531_SaveAssociationLink(associationid, associationLinkItems, userId);
            }
            else
            {
                return Helper.F29531_SaveAssociationLink(associationid, associationLinkItems, userId);
            }
        }

        /// <summary>
        /// Updates the association link details.
        /// </summary>
        /// <param name="associationDetails">The association details.</param>
        /// <param name="userId">The user id.</param>
        /// <returns></returns>
        public static void UpdateAssociationLinkDetails(string associationDetails, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                 terraScanService.UpdateAssociationLinkDetails(associationDetails, userId);
            }
            else
            {
                Helper.UpdateAssociationLinkDetails(associationDetails, userId);
            }
        }
        /// <summary>
        /// F29531_s the get link text.
        /// </summary>
        /// <param name="cfgid">The cfgid.</param>
        /// <param name="keyid">The keyid.</param>
        /// <returns></returns>
        public static string F29531_GetLinkText(int cfgid, int keyid)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F29531_GetLinkText(cfgid, keyid);
            }
            else
            {
                return Helper.F29531_GetLinkText(cfgid, keyid);
            }
        }

        /// <summary>
        /// F29531_s the delete association link.
        /// </summary>
        /// <param name="associationId">The association id.</param>
        /// <param name="userId">The user id.</param>
        public static void F29531_DeleteAssociationLink(int associationId, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                terraScanService.F29531_DeleteAssociationLink(associationId, userId);
            }
            else
            {
                Helper.F29531_DeleteAssociationLink(associationId, userId);
            }
        }

        #endregion

        #region HoH Exemption Details

        /// <summary>
        /// F29610_s the get ho H exemption details.
        /// </summary>
        /// <param name="eventid">The eventid.</param>
        /// <returns></returns>
        public static F29610HoHExemptionData F29610_GetHoHExemptionDetails(int eventid)
        {
            if (WSHelper.IsOnLineMode)
            {
                string exemptionDetails;
                F29610HoHExemptionData getexemptionDetails = new F29610HoHExemptionData();
                exemptionDetails = terraScanService.F29610_GetHoHExemptionDetails(eventid);
                getexemptionDetails.ReadXml(Utilities.SharedFunctions.XmlParser(exemptionDetails));
                return getexemptionDetails;
            }
            else
            {
                return Helper.F29610_GetHoHExemptionDetails(eventid);
            }
        }

        /// <summary>
        /// F29610_s the get calculation of ho H.
        /// </summary>
        /// <param name="scheduleid">The scheduleid.</param>
        /// <param name="exemptionid">The exemptionid.</param>
        /// <returns></returns>
        public static F29610HoHExemptionData F29610_GetCalculationOfHoH(int scheduleid, int exemptionid)
        {
            if (WSHelper.IsOnLineMode)
            {
                string exemptionDetails;
                F29610HoHExemptionData getexemptionDetails = new F29610HoHExemptionData();
                exemptionDetails = terraScanService.F29610_GetCalculationOfHoH(scheduleid, exemptionid);
                getexemptionDetails.ReadXml(Utilities.SharedFunctions.XmlParser(exemptionDetails));
                return getexemptionDetails;
            }
            else
            {
                return Helper.F29610_GetCalculationOfHoH(scheduleid, exemptionid);
            }
        }

        /// <summary>
        /// F29610_s the get owner percent.
        /// </summary>
        /// <param name="ownerId">The owner id.</param>
        /// <param name="scheduleid">The scheduleid.</param>
        /// <returns></returns>
        public static F29610HoHExemptionData F29610_GetOwnerPercent(int ownerId, int scheduleid)
        {
            if (WSHelper.IsOnLineMode)
            {
                string exemptionDetails;
                F29610HoHExemptionData getexemptionDetails = new F29610HoHExemptionData();
                exemptionDetails = terraScanService.F29610_GetOwnerPercent(ownerId, scheduleid);
                getexemptionDetails.ReadXml(Utilities.SharedFunctions.XmlParser(exemptionDetails));
                return getexemptionDetails;
            }
            else
            {
                return Helper.F29610_GetOwnerPercent(ownerId, scheduleid);
            }
        }

        /// <summary>
        /// F29610_s the save ho H exemption details.
        /// </summary>
        /// <param name="eventId">The event id.</param>
        /// <param name="hohItems">The hoh items.</param>
        /// <param name="userId">The user id.</param>
        /// <returns>The save status.</returns>
        public static int F29610_SaveHoHExemptionDetails(int eventId, string hohItems, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F29610_SaveHoHExemptionDetails(eventId, hohItems, userId);
            }
            else
            {
                return Helper.F29610_SaveHoHExemptionDetails(eventId, hohItems, userId);
            }
        }


        #endregion

        #region F9610 QuickFind

        /// <summary>
        /// F9610s the quick find.
        /// </summary>
        /// <param name="form">The form.</param>
        /// <param name="keyword">The keyword.</param>
        /// <returns></returns>
        public static F9610QuickFind F9610QuickFind(int form, string keyword)
        {
            if (WSHelper.IsOnLineMode)
            {
                string quickfinditem;
                F9610QuickFind quickfinditemData = new F9610QuickFind();
                quickfinditem = terraScanService.F9610QuickFind(form, keyword);
                quickfinditemData.ReadXml(Utilities.SharedFunctions.XmlParser(quickfinditem));
                return quickfinditemData;
            }
            else
            {
                return Helper.F9610QuickFind(form, keyword);
            }
        }

        #endregion

        #region MasterNameSearch

        /// <summary>
        /// Gets the master name search.
        /// </summary>
        /// <param name="lastName">Name of the last.</param>
        /// <param name="firstName">Name of the first.</param>
        /// <param name="address">The address.</param>
        /// <returns>Returns MasterNameSearchData dataset</returns>
        public static F9110MasterNameSearchData F9110MasterNameSearch(string lastName, string firstName, string address)
        {
            if (WSHelper.IsOnLineMode)
            {
                string masterName;
                F9110MasterNameSearchData masterNameSearch = new F9110MasterNameSearchData();
                masterName = terraScanService.F9110GetMasterNameSearch(lastName, firstName, address);
                masterNameSearch.ReadXml(Utilities.SharedFunctions.XmlParser(masterName));
                return masterNameSearch;
            }
            else
            {
                return Helper.F9110GetMasterNameSearch(lastName, firstName, address);
            }
        }

        #endregion

        #region F1411ParcelStmtSearch

        /// <summary>
        /// Gets the ParcelStatement search.
        /// </summary>
        /// <param name="searchNumber">searchNumber.</param>
        /// <returns>Returns ParcelStmtSearchData dataset</returns>
        public static F1411ParcelStatementSearchData f1411ParcelStmtSearch(string searchNumber)
        {
            if (WSHelper.IsOnLineMode)
            {
                string searchList;
                F1411ParcelStatementSearchData parcelStmtSearch = new F1411ParcelStatementSearchData();
                searchList = terraScanService.F1411ParcelStatementSearch(searchNumber);
                parcelStmtSearch.ReadXml(Utilities.SharedFunctions.XmlParser(searchList));
                return parcelStmtSearch;
            }
            else
            {
                return Helper.F1411ParcelStmtSearch(searchNumber);
            }
        }


        #endregion F1411ParcelStmtSearch

        #region F29620Agland Application Details
        public static F29620AglandApplicationData F29620_GetAglandApplicationDetails(int eventid)
        {
            if (WSHelper.IsOnLineMode)
            {
                string aglandApplicationDetails;
                F29620AglandApplicationData getaglandApplicationDetails = new F29620AglandApplicationData();
                aglandApplicationDetails = terraScanService.F29620_GetAglandApplicationDetails(eventid);
                getaglandApplicationDetails.ReadXml(Utilities.SharedFunctions.XmlParser(aglandApplicationDetails));
                return getaglandApplicationDetails;
            }
            else
            {
                return Helper.F29620_GetAglandApplicationDetails(eventid);
            }
        }


        public static int F29620_SaveAglandApplicationDetails(int eventId, int ownerId, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F29620_SaveAglandApplicationDetails(eventId, ownerId, userId);
            }
            else
            {
                return Helper.F29620_SaveAglandApplicationDetails(eventId, ownerId, userId);
            }
        }
        #endregion

        #region StateAssessedOwner
        /// <summary>
        /// F35075_s the get state assessed owner details.
        /// </summary>
        /// <param name="stateId">The state id.</param>
        /// <returns></returns>
        public static F35075StateAssessedData F35075_GetStateAssessedOwnerDetails(int stateId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string stateAssessedOwnerDetails;
                F35075StateAssessedData getstateAssessedOwnerDetails = new F35075StateAssessedData();
                stateAssessedOwnerDetails = terraScanService.F35075_GetStateAssessedOwnerDetails(stateId);
                getstateAssessedOwnerDetails.ReadXml(Utilities.SharedFunctions.XmlParser(stateAssessedOwnerDetails));
                return getstateAssessedOwnerDetails;
            }
            else
            {
                return Helper.F35075_GetStateAssessedOwnerDetails(stateId);
            }
        }


        /// <summary>
        /// F35075_s the save state assessed owner.
        /// </summary>
        /// <param name="stateId">The state id.</param>
        /// <param name="assessedItems">The assessed items.</param>
        /// <param name="userId">The user id.</param>
        /// <returns></returns>
        public static int F35075_SaveStateAssessedOwner(int? stateId, string assessedItems, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F35075_SaveStateAssessedOwner(stateId, assessedItems, userId);
            }
            else
            {
                return Helper.F35075_SaveStateAssessed(stateId, assessedItems, userId);
            }
        }

        /// <summary>
        /// F35076_s the save state assessed grid.
        /// </summary>
        /// <param name="stateId">The state id.</param>
        /// <param name="codeItems">The code items.</param>
        /// <param name="userId">The user id.</param>
        /// <returns></returns>
        public static int F35076_SaveStateAssessedGrid(int? stateId, string codeItems, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F35076_SaveStateAssessedGrid(stateId, codeItems, userId);
            }
            else
            {
                return Helper.F35076_SaveStateAssessedGrid(stateId, codeItems, userId);
            }
        }


        /// <summary>
        /// F35075_s the delete state assessed.
        /// </summary>
        /// <param name="stateId">The state id.</param>
        /// <param name="userId">The user id.</param>
        /// <returns></returns>
        public static int F35075_DeleteStateAssessed(int stateId, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F35075_DeleteStateAssessed(stateId, userId);
            }
            else
            {
                return Helper.F35075_DeleteStateAssessed(stateId, userId);
            }
        }

        /// <summary>
        /// F35076_s the delete state assessed details.
        /// </summary>
        /// <param name="stateIemId">The state iem id.</param>
        /// <param name="userId">The user id.</param>
        /// <returns></returns>
        public static int F35076_DeleteStateAssessedDetails(int stateIemId, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F35076_DeleteStateAssessedDetails(stateIemId, userId);
            }
            else
            {
                return Helper.F35076_DeleteStateAssessedDetails(stateIemId, userId);
            }
        }


        #endregion

        #region F2204 CopySchedule

        /// <summary>
        /// F25050s the get parcel type details.
        /// </summary>
        /// <returns>DataSet</returns>
        public static F2204CopyScheduleData.f25050_AssessmentTypeDataTable F25050GetParcelTypeDetails()
        {
            if (WSHelper.IsOnLineMode)
            {
                string assessmentType;
                F2204CopyScheduleData assessmentTypeData = new F2204CopyScheduleData();
                assessmentType = terraScanService.F25050GetParcelTypeDetails();
                assessmentTypeData.ReadXml(Utilities.SharedFunctions.XmlParser(assessmentType));
                return assessmentTypeData.f25050_AssessmentType;
            }
            else
            {
                F2204CopyScheduleData assessmentTypeData = new F2204CopyScheduleData();
                assessmentTypeData = Helper.F25050GetParcelTypeDetails();
                return assessmentTypeData.f25050_AssessmentType;
            }
        }

        /// <summary>
        /// F25050s the get schedule type details.
        /// </summary>
        /// <returns>DataSet</returns>
        public static F2204CopyScheduleData.f25050_ScheduleTypeDataTable F25050GetScheduleTypeDetails()
        {
            if (WSHelper.IsOnLineMode)
            {
                string scheduleType;
                F2204CopyScheduleData scheduleTypeData = new F2204CopyScheduleData();
                scheduleType = terraScanService.F25050GetScheduleTypeDetails();
                scheduleTypeData.ReadXml(Utilities.SharedFunctions.XmlParser(scheduleType));
                return scheduleTypeData.f25050_ScheduleType;
            }
            else
            {
                F2204CopyScheduleData assessmentTypeData = new F2204CopyScheduleData();
                assessmentTypeData = Helper.F25050GetScheduleTypeDetails();
                return assessmentTypeData.f25050_ScheduleType;
            }
        }

        /// <summary>
        /// F2204s the create new schedule copy.
        /// </summary>
        /// <param name="scheduleId">The schedule id.</param>
        /// <param name="scheduleItems">The schedule items.</param>
        /// <param name="userId">The user id.</param>
        /// <returns>Integer</returns>
        public static int F2204CreateNewScheduleCopy(int scheduleId, string scheduleItems, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F2204CreateNewScheduleCopy(scheduleId, scheduleItems, userId);
            }
            else
            {
                return Helper.F2204CreateNewScheduleCopy(scheduleId, scheduleItems, userId);
            }
        }

        #endregion F2204 CopySchedule

        #region F24630 BoardOfEqualization

        /// <summary>
        /// F29630s the get board of equalization details.
        /// </summary>
        /// <param name="boeId">The boe id.</param>
        /// <returns>DataSet</returns>
        public static F29630BoardOfEqualizationData F29630GetBoardOfEqualizationDetails(int boeId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string boardOfEqualizationData;
                F29630BoardOfEqualizationData getBoardOfEqualizationData = new F29630BoardOfEqualizationData();
                boardOfEqualizationData = terraScanService.F29630GetBoardOfEqualizationDetails(boeId);
                getBoardOfEqualizationData.ReadXml(Utilities.SharedFunctions.XmlParser(boardOfEqualizationData));
                return getBoardOfEqualizationData;
            }
            else
            {
                return Helper.F29630GetBoardOfEqualizationDetails(boeId);
            }
        }

        /// <summary>
        /// F29630s the save board of equalization details.
        /// </summary>
        /// <param name="boeElements">The boe elements.</param>
        /// <param name="boeValues">The boe values.</param>
        /// <param name="userId">The user id.</param>
        public static void F29630SaveBoardOfEqualizationDetails(string boeElements, string boeValues, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                terraScanService.F29630SaveBoardOfEqualizationDetails(boeElements, boeValues, userId);
            }
            else
            {
                Helper.F29630SaveBoardOfEqualizationDetails(boeElements, boeValues, userId);
            }
        }

        /// <summary>
        /// F29630s the delete board of equalization details.
        /// </summary>
        /// <param name="boeId">The boe id.</param>
        /// <param name="userId">The user id.</param>
        public static void F29630DeleteBoardOfEqualizationDetails(int boeId, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                terraScanService.F29630DeleteBoardOfEqualizationDetails(boeId, userId);
            }
            else
            {
                Helper.F29630DeleteBoardOfEqualizationDetails(boeId, userId);
            }
        }

        /// <summary>
        /// F29630s the push board of equalization details.
        /// </summary>
        /// <param name="boeId">The boe id.</param>
        /// <param name="userId">The user id.</param>
        public static void F29630PushBoardOfEqualizationDetails(int boeId, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                terraScanService.F29630PushBoardOfEqualizationDetails(boeId, userId);
            }
            else
            {
                Helper.F29630PushBoardOfEqualizationDetails(boeId, userId);
            }
        }
        #endregion F24630 BoardOfEqualization

        #region F9041 Query View Description

        #region Get QueryDescription

        /// <summary>
        /// F9041s the get query description.
        /// </summary>
        /// <param name="queryViewId">The query view id.</param>
        /// <returns>DataSet</returns>
        public static F9041QueryViewDescriptionData F9041GetQueryDescription(int queryViewId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string queryViewItems;
                F9041QueryViewDescriptionData getQueryViewItems = new F9041QueryViewDescriptionData();
                queryViewItems = terraScanService.F9041GetQueryDescription(queryViewId);
                getQueryViewItems.ReadXml(Utilities.SharedFunctions.XmlParser(queryViewItems));
                return getQueryViewItems;
            }
            else
            {
                return Helper.F9041GetQueryDescription(queryViewId);
            }
        }

        #endregion Get QueryDescription

        #endregion F9041 Query View Description

        #region F82006 Contractor Management

        #region Get Contractor and Employee List

        /// <summary>
        /// F82006_s the get contractor list.
        /// </summary>
        /// <param name="contractorId">The contractor id.</param>
        /// <returns>contractManagementData</returns>
        public static F82006ContractManagementData F82006_GetContractorList(int contractorId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string contractManagementData;
                F82006ContractManagementData getContractManagementData = new F82006ContractManagementData();
                contractManagementData = terraScanService.F82006_GetContractorList(contractorId);
                getContractManagementData.ReadXml(Utilities.SharedFunctions.XmlParser(contractManagementData));
                return getContractManagementData;
            }
            else
            {
                return Helper.F82006_GetContractorList(contractorId);
            }
        }

        #endregion Get Contractor and Employee List

        #region Save Contractor and Employee List

        /// <summary>
        /// F82006_s the save contractor list.
        /// </summary>
        /// <param name="contractorId">The contractor id.</param>
        /// <param name="contractorXml">The contractor XML.</param>
        /// <param name="contractorEmployeeXml">The contractor employee XML.</param>
        /// <param name="userId">The user id.</param>
        /// <returns>errorId</returns>
        public static int F82006_SaveContractorList(int? contractorId, string contractorXml, string contractorEmployeeXml, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F82006_SaveContractorList(contractorId, contractorXml, contractorEmployeeXml, userId);
            }
            else
            {
                return Helper.F82006_SaveContractorList(contractorId, contractorXml, contractorEmployeeXml, userId);
            }
        }

        #endregion Save Contractor and Employee List

        #region Delete Contractor and Employee List

        /// <summary>
        /// F82006_s the delete contractor list.
        /// </summary>
        /// <param name="contractorId">The contractor id.</param>
        /// <param name="userId">The user id.</param>
        public static void F82006_DeleteContractorList(int contractorId, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                terraScanService.F82006_DeleteContractorList(contractorId, userId);
            }
            else
            {
                Helper.F82006_DeleteContractorList(contractorId, userId);
            }
        }

        /// <summary>
        /// F82006_s the delete contractor employee.
        /// </summary>
        /// <param name="contractorId">The contractor id.</param>
        /// <param name="employeeId">The employee id.</param>
        /// <param name="userId">The user id.</param>
        public static void F82006_DeleteContractorEmployee(int contractorId, int employeeId, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                terraScanService.F82006_DeleteContractorEmployee(contractorId, employeeId, userId);
            }
            else
            {
                Helper.F82006_DeleteContractorEmployee(contractorId, employeeId, userId);
            }
        }

        #endregion Delete Contractor and Employee List

        #endregion F82006 Contractor Management

        #region F9042 Analytics Template Selection

        /// <summary>
        /// F9042_s the get template.
        /// </summary>
        /// <param name="templateId">The template id.</param>
        /// <returns>F9042ExcelAnalyticsData</returns>
        public static F9042ExcelAnalyticsData F9042_GetTemplate(int templateId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string excelAnalyticsData;
                F9042ExcelAnalyticsData getexcelAnalyticsData = new F9042ExcelAnalyticsData();
                excelAnalyticsData = terraScanService.F9042_GetTemplate(templateId);
                getexcelAnalyticsData.ReadXml(Utilities.SharedFunctions.XmlParser(excelAnalyticsData));
                return getexcelAnalyticsData;
            }
            else
            {
                return Helper.F9042_GetTemplate(templateId);
            }
        }

        /// <summary>
        /// F9042_s the list template.
        /// </summary>
        /// <param name="queryView">The query view.</param>
        /// <returns>F9042ExcelAnalyticsData</returns>
        public static F9042ExcelAnalyticsData F9042_ListTemplate(string queryView)
        {
            if (WSHelper.IsOnLineMode)
            {
                string excelAnalyticsData;
                F9042ExcelAnalyticsData getexcelAnalyticsData = new F9042ExcelAnalyticsData();
                excelAnalyticsData = terraScanService.F9042_ListTemplate(queryView);
                getexcelAnalyticsData.ReadXml(Utilities.SharedFunctions.XmlParser(excelAnalyticsData));
                return getexcelAnalyticsData;
            }
            else
            {
                return Helper.F9042_ListTemplate(queryView);
            }
        }

        #endregion F9042 Analytics Template Selection

        /// <summary>
        /// Gets the snapshot details.
        /// </summary>
        /// <param name="FormNum">The form num.</param>
        /// <param name="UserId">The user id.</param>
        /// <returns></returns>
        public static F9044SnapshotOperations GetSnapshotDetails(int FormNum, int UserId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string strDetails;
                F9044SnapshotOperations snapshotDetails = new F9044SnapshotOperations();
                strDetails = terraScanService.GetSnapshotDetails(FormNum, UserId);
                snapshotDetails.ReadXml(Utilities.SharedFunctions.XmlParser(strDetails));
                return snapshotDetails;

            }
            else
            {
                return Helper.GetSnapshotDetails(FormNum, UserId);
            }
        }

        /// <summary>
        /// Gets the snapshot operation count.
        /// </summary>
        /// <param name="OperationId">The operation id.</param>
        /// <param name="LOSnapshotId">The LO snapshot id.</param>
        /// <param name="ROSnapshotId">The RO snapshot id.</param>
        /// <param name="UserId">The user id.</param>
        /// <returns></returns>
        public static F9044SnapshotOperations GetSnapshotOperationCount(int OperationId, int LOSnapshotId, int ROSnapshotId, int UserId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string strCount;
                F9044SnapshotOperations snapshotOperationCount = new F9044SnapshotOperations();
                strCount = terraScanService.GetSnapshotOperationCount(OperationId, LOSnapshotId, ROSnapshotId, UserId);
                snapshotOperationCount.ReadXml(Utilities.SharedFunctions.XmlParser(strCount));
                return snapshotOperationCount;
            }
            else
            {
                return Helper.GetSnapshotOperationCount(OperationId, LOSnapshotId, ROSnapshotId, UserId);
            }
        }

        /// <summary>
        /// Inserts the snapshot details.
        /// </summary>
        /// <param name="OperationId">The operation id.</param>
        /// <param name="LOSnapshotId">The LO snapshot id.</param>
        /// <param name="ROSnapshotId">The RO snapshot id.</param>
        /// <param name="RecordCount">The record count.</param>
        /// <param name="NewSnapshotName">New name of the snapshot.</param>
        /// <param name="UserId">The user id.</param>
        public static void insertSnapshotDetails(int OperationId, int LOSnapshotId, int ROSnapshotId, int RecordCount, string NewSnapshotName, int UserId)
        {
            if (WSHelper.IsOnLineMode)
            {
                terraScanService.insertSnapshotDetails(OperationId, LOSnapshotId, ROSnapshotId, RecordCount, NewSnapshotName, UserId);
            }
            else
            {
                Helper.insertSnapshotDetails(OperationId, LOSnapshotId, ROSnapshotId, RecordCount, NewSnapshotName, UserId);
            }
        }

        #region F81003 Selection Catalog

        /// <summary>
        /// F81003_s the get selection catalog details.
        /// </summary>
        /// <param name="catalogId">The catalog id.</param>
        /// <returns>selection catalog dataset</returns>
        public static F81003SelectionCatalogData F81003_GetSelectionCatalogDetails(int catalogId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string selectionCatalogDetails;
                F81003SelectionCatalogData selectionCatalogData = new F81003SelectionCatalogData();
                selectionCatalogDetails = terraScanService.F81003_GetSelectionCatalogDetails(catalogId);
                selectionCatalogData.ReadXml(Utilities.SharedFunctions.XmlParser(selectionCatalogDetails));
                return selectionCatalogData;
            }
            else
            {
                return Helper.F81003_GetSelectionCatalogDetails(catalogId);
            }
        }

        /// <summary>
        /// F81003_s the list selection category.
        /// </summary>
        /// <param name="userId">The user id.</param>
        /// <returns>selection catalog dataset</returns>
        public static F81003SelectionCatalogData F81003_ListSelectionCategory(int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string selectionCatalogDetails;
                F81003SelectionCatalogData selectionCatalogData = new F81003SelectionCatalogData();
                selectionCatalogDetails = terraScanService.F81003_ListSelectionCategory(userId);
                selectionCatalogData.ReadXml(Utilities.SharedFunctions.XmlParser(selectionCatalogDetails));
                return selectionCatalogData;
            }
            else
            {
                return Helper.F81003_ListSelectionCategory(userId);
            }
        }

        /// <summary>
        /// F81003_s the save selection catalog.
        /// </summary>
        /// <param name="catalogId">The catalog id.</param>
        /// <param name="selectionItemsXml">The selection items XML.</param>
        /// <returns>key id.</returns>
        public static int F81003_SaveSelectionCatalog(int? catalogId, string selectionItemsXml)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F81003_SaveSelectionCatalog(catalogId, selectionItemsXml);
            }
            else
            {
                return Helper.F81003_SaveSelectionCatalog(catalogId, selectionItemsXml);
            }
        }

        /// <summary>
        /// F81003_s the delete selection catalog.
        /// </summary>
        /// <param name="catalogId">The catalog id.</param>
        public static void F81003_DeleteSelectionCatalog(int catalogId)
        {
            if (WSHelper.IsOnLineMode)
            {
                terraScanService.F81003_DeleteSelectionCatalog(catalogId);
            }
            else
            {
                Helper.F81003_DeleteSelectionCatalog(catalogId);
            }
        }

        #endregion F81003 Selection Catalog

        #region F9510WebFormXML

        /// <summary>
        /// Gets the web form XML.
        /// </summary>
        /// <param name="form">The form.</param>
        /// <param name="userId">The user id.</param>
        /// <returns>DataSet</returns>
        public static F95010GetWebFormXMLData F9510GetWebFormXML(int form, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string webFormXMLDetails;
                F95010GetWebFormXMLData form9510GetWebFormXMLData = new F95010GetWebFormXMLData();
                webFormXMLDetails = terraScanService.F9510GetWebFormXML(form, userId);
                form9510GetWebFormXMLData.ReadXml(Utilities.SharedFunctions.XmlParser(webFormXMLDetails));
                return form9510GetWebFormXMLData;
            }
            else
            {
                return Helper.F9510GetWebFormXML(form, userId);
            }
        }

        #endregion F9510WebFormXML

        #region F9075 List Template Selection

        /// <summary>
        /// F9075_s the list template.
        /// </summary>
        /// <param name="form"></param>
        /// <param name="userid"></param>
        /// <returns>F9075listtemplateData</returns>
        public static F9075CommentTemplate F9075_ListTemplate(int form, int userid)
        {
            if (WSHelper.IsOnLineMode)
            {
                string listTemplateData;
                F9075CommentTemplate getlisttemplateData = new F9075CommentTemplate();
                listTemplateData = terraScanService.F9075_ListTemplate(form, userid);
                getlisttemplateData.ReadXml(Utilities.SharedFunctions.XmlParser(listTemplateData));
                return getlisttemplateData;
            }
            else
            {
                return Helper.F9075_ListTemplate(form, userid);
            }
        }

        #endregion F9075 List Template Selection

        #region F36041_DeleteCropIds

        /// <summary>
        /// F9075_s the delete comment ids.
        /// </summary>
        /// <param name="cropIds">The crop ids.</param>
        /// <param name="userId">The user id.</param>
        public static void F9075_DeleteCommentIds(string commentIds, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                terraScanService.F9075_DeleteCommentIds(commentIds, userId);
            }
            else
            {
                Helper.F9075_DeleteCommentIds(commentIds, userId);
            }
        }

        #endregion F36041_DeleteCropIds

        #region F9076New Comment Template

        #region F9076 list Template Selection

        public static F9076NewCommentTemplateData F9076_getTemplate(int templateid)
        {
            if (WSHelper.IsOnLineMode)
            {
                string getTemplateData;
                F9076NewCommentTemplateData getListTempalteData = new F9076NewCommentTemplateData();
                getTemplateData = terraScanService.F9076_getTemplate(templateid);
                getListTempalteData.ReadXml(Utilities.SharedFunctions.XmlParser(getTemplateData));
                return getListTempalteData;
            }
            else
            {
                return Helper.F9076_getTemplate(templateid);
            }
        }

        #endregion F9076 list Template Selection

        #region F9076 SaveNewCommentTemplate Selection

        /// <summary>
        /// F9076s the save new comment template.
        /// </summary>
        /// <param name="templateId">The template id.</param>
        /// <param name="commentItemsXml">The comment items XML.</param>
        /// <param name="isOverwrite">The is overwrite.</param>
        /// <returns></returns>
        public static int F9076SaveNewCommentTemplate(int? templateId, string commentItemsXml, int isOverwrite)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F9076SaveNewCommentTemplate(templateId, commentItemsXml, isOverwrite);
            }
            else
            {
                return Helper.F9076SaveNewCommentTemplate(templateId, commentItemsXml, isOverwrite);
            }
        }

        #endregion F9076 SaveNewCommentTemplate Selection

        #region F9076 DeleteNewCommentTemplate Selection

        /// <summary>
        /// F9076_s the delete new comment template.
        /// </summary>
        /// <param name="templateId">The template id.</param>
        public static void F9076_DeleteNewCommentTemplate(int templateId)
        {
            if (WSHelper.IsOnLineMode)
            {
                terraScanService.F9076_DeleteNewCommentTemplate(templateId);
            }
            else
            {
                Helper.F9076_DeleteNewCommentTemplate(templateId);
            }
        }

        #endregion F9076 DeleteNewCommentTemplate Selection

        #endregion New Comment Template

        #region F29505CreateSubdivision
        /// <summary>
        /// F429505_s the list all comoboxes.
        /// </summary>
        /// <returns></returns>
        public static F29505CreateSubdivisionData F429505_ListAllComoboxes(int eventId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string createsubdivisionloadcombo;
                F29505CreateSubdivisionData createsubdivisionloadcomboData = new F29505CreateSubdivisionData();
                createsubdivisionloadcombo = terraScanService.F429505_ListAllComoboxes(eventId);
                createsubdivisionloadcomboData.ReadXml(Utilities.SharedFunctions.XmlParser(createsubdivisionloadcombo));
                return createsubdivisionloadcomboData;
            }
            else
            {
                return Helper.F429505_ListAllComoboxes(eventId);
            }
        }

        /// <summary>
        /// F429505_s the list all LadnCodes.
        /// </summary>
        /// <returns></returns>
        public static F29505CreateSubdivisionData ListLandCodes(int nbhdid, int rollyear)
        {
            if (WSHelper.IsOnLineMode)
            {
                string createsubdivisionloadcombo;
                F29505CreateSubdivisionData createsubdivisionloadcomboData = new F29505CreateSubdivisionData();
                createsubdivisionloadcombo = terraScanService.ListLandCodes(nbhdid, rollyear);
                createsubdivisionloadcomboData.ReadXml(Utilities.SharedFunctions.XmlParser(createsubdivisionloadcombo));
                return createsubdivisionloadcomboData;
            }
            else
            {
                return Helper.ListLandCodes(nbhdid, rollyear);
            }
        }

        /// <summary>
        /// F29505_s the get base parcel value.
        /// </summary>
        /// <param name="eventId">The event id.</param>
        /// <returns></returns>
        public static F29505CreateSubdivisionData F29505_GetBaseParcelValue(int eventId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string baseParcelValue;
                F29505CreateSubdivisionData getbaseParcelData = new F29505CreateSubdivisionData();
                baseParcelValue = terraScanService.F29505_GetBaseParcelValue(eventId);
                getbaseParcelData.ReadXml(Utilities.SharedFunctions.XmlParser(baseParcelValue));
                return getbaseParcelData;
                ////return terraScanService.F29510_GetBaseParcelValue(eventId);
            }
            else
            {
                return Helper.F29505_GetBaseParcelValue(eventId);
            }
        }

        /// <summary>
        /// F29505_s the create parcel.
        /// </summary>
        /// <param name="makeSubId">The make sub id.</param>
        /// <param name="userId">The user id.</param>
        /// <returns>Return message</returns>
        public static string F29505_CreateParcel(int makeSubId, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F29505_CreateParcel(makeSubId, userId);
            }
            else
            {
                return Helper.F29505_CreateParcel(makeSubId, userId);
            }
        }

        /// <summary>
        /// F29505_s the save division parcels.
        /// </summary>
        /// <param name="eventId">The event id.</param>
        /// <param name="makeSubItemsXml">The make sub items XML.</param>
        /// <param name="makeSubParcelsXml">The make sub parcels XML.</param>
        /// <param name="userId">The user id.</param>
        /// <returns></returns>
        public static int F29505_SaveDivisionParcels(int eventId, string makeSubItemsXml, string makeSubParcelsXml, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F29505_SaveDivisionParcels(eventId, makeSubItemsXml, makeSubParcelsXml, userId);
            }
            else
            {
                return Helper.F29505_SaveDivisionParcels(eventId, makeSubItemsXml, makeSubParcelsXml, userId);
            }
        }

        /// <summary>
        /// F29505_s the save sub division.
        /// </summary>
        /// <param name="makeSubID">The make sub ID.</param>
        /// <param name="userId">The user id.</param>
        /// <returns></returns>
        public static int F29505_SaveSubDivision(int makeSubID, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F29505_SaveSubDivision(makeSubID, userId);
            }
            else
            {
                return Helper.F29505_SaveSubDivision(makeSubID, userId);
            }
        }

        /// <summary>
        /// F29505_s the get land code.
        /// </summary>
        /// <param name="landType1">The land type1.</param>
        /// <param name="landType2">The land type2.</param>
        /// <param name="landType3">The land type3.</param>
        /// <param name="nbhdid">The nbhdid.</param>
        /// <param name="rollYear">The roll year.</param>
        /// <returns>The create subdivision dataset.</returns>
        public static F29505CreateSubdivisionData F29505_GetLandCode(int landType1, int landType2, int landType3, int nbhdid, int rollYear)
        {
            if (WSHelper.IsOnLineMode)
            {
                string getlandcode;
                F29505CreateSubdivisionData getlandcodeData = new F29505CreateSubdivisionData();
                getlandcode = terraScanService.F29505_GetLandCode(landType1, landType2, landType3, nbhdid, rollYear);
                getlandcodeData.ReadXml(Utilities.SharedFunctions.XmlParser(getlandcode));
                return getlandcodeData;
            }
            else
            {
                return Helper.F29505_GetLandCode(landType1, landType2, landType3, nbhdid, rollYear);
            }
        }


        #endregion

        #region F9025ValidationControl

        #region F9025 FormValidationDetails Selection

        /// <summary>
        /// F9025s the form validation details.
        /// </summary>
        /// <param name="formid">The formid.</param>
        /// <param name="userid">The userid.</param>
        /// <returns>int</returns>
        public static int F9025FormValidationDetails(int formid, int userid)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F9025FormValidationDetails(formid, userid);
            }
            else
            {
                return Helper.F9025FormValidationDetails(formid, userid);
            }
        }

        #endregion F9025 FormValidationDetails Selection

        #region F9025 SaveValidationDetails Selection

        /// <summary>
        /// F9025s the save validation details.
        /// </summary>
        /// <param name="formid">The formid.</param>
        /// <param name="userid">The userid.</param>
        /// <param name="keyid">The keyid.</param>
        /// <returns>int</returns>
        public static int F9025SaveValidationDetails(int formid, int userid, int keyid)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F9025SaveValidationDetails(formid, userid, keyid);
            }
            else
            {
                return Helper.F9025SaveValidationDetails(formid, userid, keyid);
            }
        }

        #endregion F9025 SaveValidationDetails Selection

        #endregion F9025ValidationControl

        #region Selection

        /// <summary>
        /// F81004_s the get selection details.
        /// </summary>
        /// <param name="eventId">The event id.</param>
        /// <param name="form">The form.</param>
        /// <returns>selection dataset</returns>
        public static F81004SelectionData F81004_GetSelectionDetails(int eventId, int form)
        {
            if (WSHelper.IsOnLineMode)
            {
                string selectionDetails;
                F81004SelectionData selectionData = new F81004SelectionData();
                selectionDetails = terraScanService.F81004_GetSelectionDetails(eventId, form);
                selectionData.ReadXml(Utilities.SharedFunctions.XmlParser(selectionDetails));
                return selectionData;
            }
            else
            {
                return Helper.F81004_GetSelectionDetails(eventId, form);
            }
        }

        /// <summary>
        /// F81004_s the get selection catalog details.
        /// </summary>
        /// <param name="categoryId">The category id.</param>
        /// <returns>selection catalog data table</returns>
        public static F81004SelectionData.GetSelectionCatalogDetailsDataTable F81004_GetSelectionCatalogDetails(int categoryId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string selectionCatalogDetails;
                F81004SelectionData selectionData = new F81004SelectionData();
                selectionCatalogDetails = terraScanService.F81004_GetSelectionCatalogDetails(categoryId);
                selectionData.ReadXml(Utilities.SharedFunctions.XmlParser(selectionCatalogDetails));
                return selectionData.GetSelectionCatalogDetails;
            }
            else
            {
                F81004SelectionData.GetSelectionCatalogDetailsDataTable selectionCatalogData = new F81004SelectionData.GetSelectionCatalogDetailsDataTable();
                selectionCatalogData = Helper.F81004_GetSelectionCatalogDetails(categoryId);
                return selectionCatalogData;
            }
        }

        /// <summary>
        /// F81004_s the save selection items.
        /// </summary>
        /// <param name="eventId">The event id.</param>
        /// <param name="selectionItemsXml">The selection items XML.</param>
        /// <param name="userId">The user id.</param>
        /// <returns></returns>
        public static int F81004_SaveSelectionItems(int eventId, string selectionItemsXml, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F81004_SaveSelectionItems(eventId, selectionItemsXml, userId);
            }
            else
            {
                return Helper.F81004_SaveSelectionItems(eventId, selectionItemsXml, userId);
            }
        }

        #endregion Selection

        #region F24640 Frozen Value

        #region Get Frozen Value

        /// <summary>
        /// Gets the frozen value.
        /// </summary>
        /// <param name="eventId">The event id.</param>
        /// <returns>DataSet contains Frozen value</returns>
        public static F29640FrozenValueData GetFrozenValue(int eventId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string frozenValue;
                F29640FrozenValueData FrozenValueData = new F29640FrozenValueData();
                frozenValue = terraScanService.GetFrozenValue(eventId);
                FrozenValueData.ReadXml(Utilities.SharedFunctions.XmlParser(frozenValue));
                return FrozenValueData;
            }
            else
            {
                return Helper.GetFrozenValue(eventId);
            }
        }

        #endregion Get Frozen Value

        #region Save Frozen Value

        /// <summary>
        /// Saves the frozen details.
        /// </summary>
        /// <param name="frozenElements">The frozen elements.</param>
        /// <param name="userId">The user id.</param>
        public static void SaveFrozenDetails(string frozenElements, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                terraScanService.SaveFrozenDetails(frozenElements, userId);
            }
            else
            {
                Helper.SaveFrozenDetails(frozenElements, userId);
            }
        }

        #endregion Save Frozen Value

        #region Delete Frozen Value

        /// <summary>
        /// Deletes the frozen details.
        /// </summary>
        /// <param name="eventId">The event id.</param>
        /// <param name="frozenId">The frozen id.</param>
        /// <param name="userId">The user id.</param>
        public static void DeleteFrozenDetails(int eventId, int frozenId, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                terraScanService.DeleteFrozenDetails(eventId, frozenId, userId);
            }
            else
            {
                Helper.DeleteFrozenDetails(eventId, frozenId, userId);
            }
        }

        #endregion Delete Frozen Value

        #endregion F24640 Frozen Value

        #region F24650 Exemption

        #region Get Exemption Type

        /// <summary>
        /// Get Exemption Type
        /// </summary>
        /// <param name="eventId">Event ID</param>
        /// <returns>DataSet contains Exemption Types</returns>
        public static F29650ExemptionData GetExemptionType(int eventId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string exemptionValue;
                F29650ExemptionData exemptionData = new F29650ExemptionData();
                exemptionValue = terraScanService.GetExemptionType(eventId);
                exemptionData.ReadXml(Utilities.SharedFunctions.XmlParser(exemptionValue));
                return exemptionData;
            }
            else
            {
                return Helper.GetExemptionType(eventId);
            }
        }

        #endregion Get Exemption Type

        #region Get Exemption Details

        /// <summary>
        /// Get Exemption Details
        /// </summary>
        /// <param name="eventId">Event ID</param>
        /// <returns>DataSet contains Exemption Details</returns>
        public static F29650ExemptionData GetExemptionDetails(int eventId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string exemptionValue;
                F29650ExemptionData exemptionData = new F29650ExemptionData();
                exemptionValue = terraScanService.GetExemptionDetails(eventId);
                exemptionData.ReadXml(Utilities.SharedFunctions.XmlParser(exemptionValue));
                return exemptionData;
            }
            else
            {
                return Helper.GetExemptionDetails(eventId);
            }
        }

        #endregion Get Exemption Details

        #region Get Exemption loss

        /// <summary>
        /// Get Exemption Loss
        /// </summary>
        /// <param name="lossValue">Loss</param>
        /// <param name="maxValue">Maximum</param>
        /// <returns>Decimal</returns>
        public static decimal GetExemptionLoss(decimal lossValue, decimal maxValue)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.GetExemptionLoss(lossValue, maxValue);
            }
            else
            {
                return Helper.GetExemptionLoss(lossValue, maxValue);
            }
        }

        #endregion Get Exemption Loss

        #region Save Exemption Details

        /// <summary>
        /// Save Exemption Deatils
        /// </summary>
        /// <param name="exemptionElements">Exemption Details</param>
        /// <param name="userId">User ID</param>
        public static void SaveExemptionDetails(string exemptionElements, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                terraScanService.SaveExemptionDetails(exemptionElements, userId);
            }
            else
            {
                Helper.SaveExemptionDetails(exemptionElements, userId);
            }
        }

        #endregion Save Exemption Details

        #region Delete Exemption Details

        /// <summary>
        /// Delete Exemption Details
        /// </summary>
        /// <param name="eventId">Event ID</param>
        /// <param name="exemptionEventId">Exemption Event ID</param>
        /// <param name="userId">User ID</param>
        public static void DeleteExemptionDetails(int eventId, int exemptionEventId, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                terraScanService.DeleteExemptionDetails(eventId, exemptionEventId, userId);
            }
            else
            {
                Helper.DeleteExemptionDetails(eventId, exemptionEventId, userId);
            }
        }

        #endregion Delete Exemption Details

        #endregion F24650 Exemption

        #region F35060 Schedule Code Item

        #region Get Schedule Item Code

        /// <summary>
        /// Gets the schedule item codes.
        /// </summary>
        /// <returns>DataSet contains Schedule Item Code</returns>
        public static F35060ScheduleItemCodeData GetScheduleItemCodes()
        {
            if (WSHelper.IsOnLineMode)
            {
                string scheduleItemCodeValue;
                F35060ScheduleItemCodeData scheduleItemCodeData = new F35060ScheduleItemCodeData();
                scheduleItemCodeValue = terraScanService.GetScheduleItemCodes();
                scheduleItemCodeData.ReadXml(Utilities.SharedFunctions.XmlParser(scheduleItemCodeValue));
                return scheduleItemCodeData;
            }
            else
            {
                return Helper.GetScheduleItemCodes();
            }
        }

        #endregion Get Schedule Item Code

        #region Save Schedule Item Code

        /// <summary>
        /// Saves the schedule item codes.
        /// </summary>
        /// <param name="scheduleCodeElements">The schedule code elements.</param>
        /// <param name="userId">The user id.</param>
        public static void SaveScheduleItemCodes(string scheduleCodeElements, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                terraScanService.SaveScheduleItemCodes(scheduleCodeElements, userId);
            }
            else
            {
                Helper.SaveScheduleItemCodes(scheduleCodeElements, userId);
            }
        }

        #endregion Save Schedule Item Code

        #region Delete Schedule Item Code

        /// <summary>
        /// Deletes the schedule item codes.
        /// </summary>
        /// <param name="itemCodeId">The item code id.</param>
        /// <param name="userId">The user id.</param>
        public static void DeleteScheduleItemCodes(string itemCodeId, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                terraScanService.DeleteScheduleItemCodes(itemCodeId, userId);
            }
            else
            {
                Helper.DeleteScheduleItemCodes(itemCodeId, userId);
            }
        }

        #endregion Delete Schedule Item Code

        #endregion F35060 Schedule Item Code

        #region F2409ReviewStatus
        /// <summary>
        /// F2409_s the type of the reviewstatus inspection.
        /// </summary>
        /// <returns></returns>
        public static F2409ReviewStatusData F2409_ReviewstatusInspectionType()
        {
            if (WSHelper.IsOnLineMode)
            {
                string inspectionType;
                F2409ReviewStatusData inspectionTypeData = new F2409ReviewStatusData();
                inspectionType = terraScanService.F2409_ReviewstatusInspectionType();
                inspectionTypeData.ReadXml(Utilities.SharedFunctions.XmlParser(inspectionType));
                return inspectionTypeData;
            }
            else
            {
                return Helper.F2409_ReviewstatusInspectionType();
            }
        }

        /// <summary>
        /// F2409_s the reviewstatus inspection by user.
        /// </summary>
        /// <returns></returns>
        public static F2409ReviewStatusData F2409_ReviewstatusInspectionByUser(int applicationId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string inspectionByUser;
                F2409ReviewStatusData inspectionByUserData = new F2409ReviewStatusData();
                inspectionByUser = terraScanService.F2409_ReviewstatusInspectionByUser(applicationId);
                inspectionByUserData.ReadXml(Utilities.SharedFunctions.XmlParser(inspectionByUser));
                return inspectionByUserData;
            }
            else
            {
                return Helper.F2409_ReviewstatusInspectionByUser(applicationId);
            }
        }

        public static F2409ReviewStatusData F2409_ReviewStatus()
        {
            if (WSHelper.IsOnLineMode)
            {
                string strReviewStatus;
                F2409ReviewStatusData reviewStatusData = new F2409ReviewStatusData();
                strReviewStatus = terraScanService.F2409_Reviewstatus();
                reviewStatusData.ReadXml(Utilities.SharedFunctions.XmlParser(strReviewStatus));
                return reviewStatusData;
            }
            else
            {
                return Helper.F2409_Reviewstatus();
            }
        }

        /// <summary>
        /// F2409_s the list reviewstatus.
        /// </summary>
        /// <param name="parcelId">The parcel id.</param>
        /// <returns></returns>
        public static F2409ReviewStatusData F2409_ListReviewstatus(int parcelId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string reviewStatus;
                F2409ReviewStatusData reviewStatusData = new F2409ReviewStatusData();
                reviewStatus = terraScanService.F2409_ListReviewstatus(parcelId);
                reviewStatusData.ReadXml(Utilities.SharedFunctions.XmlParser(reviewStatus));
                return reviewStatusData;
            }
            else
            {
                return Helper.F2409_ListReviewstatus(parcelId);
            }
        }

        /// <summary>
        /// F2409s the update parcel review details.
        /// </summary>
        /// <param name="reviewXML">The review XML.</param>
        /// <param name="userId">The user id.</param>
        /// <returns></returns>
        public static void F2409UpdateParcelReviewDetails(string reviewXML, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                terraScanService.F2409UpdateParcelReviewDetails(reviewXML, userId);
            }
            else
            {
                Helper.F2409UpdateParcelReviewDetails(reviewXML, userId);
            }
        }

        #endregion

        #region F2205 Move Schedule

        /// <summary>
        /// F2205s the create schedule.
        /// </summary>
        /// <param name="scheduleId">The schedule id.</param>
        /// <param name="isNewSchedule">if set to <c>true</c> [is new schedule].</param>
        /// <param name="scheduleHeaderItems">The schedule header items.</param>
        /// <param name="scheduleItems">The schedule items.</param>
        /// <param name="userId">The user id.</param>
        /// <returns>Confirmation for create schedule</returns>
        public static int F2205CreateSchedule(int? scheduleId, bool isNewSchedule, string scheduleHeaderItems, string scheduleItems, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F2205CreateSchedule(scheduleId, isNewSchedule, scheduleHeaderItems, scheduleItems, userId);
            }
            else
            {
                return Helper.F2205CreateSchedule(scheduleId, isNewSchedule, scheduleHeaderItems, scheduleItems, userId);
            }
        }

        #endregion F2205 Move Schedule

        #region F35055 PPLine Items
        /// <summary>
        /// F35055_s the get PP line items details.
        /// </summary>
        /// <param name="scheduleID">The schedule ID.</param>
        /// <returns></returns>
        public static F35055PPLineItemData F35055_GetPPLineItemsDetails(int scheduleID)
        {
            if (WSHelper.IsOnLineMode)
            {
                string ppLineItemDetails;
                F35055PPLineItemData getppLineItemDetails = new F35055PPLineItemData();
                ppLineItemDetails = terraScanService.F35055_GetPPLineItemsDetails(scheduleID);
                getppLineItemDetails.ReadXml(Utilities.SharedFunctions.XmlParser(ppLineItemDetails));
                return getppLineItemDetails;
            }
            else
            {
                return Helper.F35055_GetPPLineItemsDetails(scheduleID);
            }
        }

        /// <summary>
        /// F35055_s the get value calculation.
        /// </summary>
        /// <param name="scheduleId">The schedule id.</param>
        /// <param name="ppDeprTableId">The pp depr table id.</param>
        /// <param name="originalValue">The original value.</param>
        /// <param name="trend">The trend.</param>
        /// <param name="year">The year.</param>
        /// <param name="rollYear">The roll year.</param>
        /// <returns></returns>
        public static F35055PPLineItemData F35055_GetValueCalculation(int scheduleId, int ppDeprTableId, Int64 originalValue, int trend, Int16 year, Int16 rollYear)
        {
            if (WSHelper.IsOnLineMode)
            {
                string ppLineItemDetails;
                F35055PPLineItemData getppLineItemDetails = new F35055PPLineItemData();
                ppLineItemDetails = terraScanService.F35055_GetValueCalculation(scheduleId, ppDeprTableId, originalValue, trend, year, rollYear);
                getppLineItemDetails.ReadXml(Utilities.SharedFunctions.XmlParser(ppLineItemDetails));
                return getppLineItemDetails;
            }
            else
            {
                return Helper.F35055_GetValueCalculation(scheduleId, ppDeprTableId, originalValue, trend, year, rollYear);
            }
        }

        /// <summary>
        /// F35055_s the save schedule line item.
        /// </summary>
        /// <param name="scheduleId">The schedule id.</param>
        /// <param name="scheduleItems">The schedule items.</param>
        /// <param name="userId">The user id.</param>
        /// <returns></returns>
        public static int F35055_SaveScheduleLineItem(int scheduleId, string scheduleItems, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F35055_SaveScheduleLineItem(scheduleId, scheduleItems, userId);
            }
            else
            {
                return Helper.F35055_SaveScheduleLineItem(scheduleId, scheduleItems, userId);
            }
        }

        /// <summary>
        /// F35055_s the update schedule line item.
        /// </summary>
        /// <param name="scheduleId">The schedule id.</param>
        /// <param name="scheduleItems">The schedule items.</param>
        /// <param name="userId">The user id.</param>
        /// <param name="rollYear">The roll year.</param>
        /// <returns></returns>
        public static int F35055_UpdateScheduleLineItem(int scheduleId, string scheduleItems, int userId, Int16 rollYear)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F35055_UpdateScheduleLineItem(scheduleId, scheduleItems, userId, rollYear);
            }
            else
            {
                return Helper.F35055_UpdateScheduleLineItem(scheduleId, scheduleItems, userId, rollYear);
            }
        }

        /// <summary>
        /// F35055_s the delete schedule line item.
        /// </summary>
        /// <param name="scheduleId">The schedule id.</param>
        /// <param name="scheduleItemIds">The schedule item ids.</param>
        /// <param name="userId">The user id.</param>
        /// <returns></returns>
        public static int F35055_DeleteScheduleLineItem(int scheduleId, string scheduleItemIds, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F35055_DeleteScheduleLineItem(scheduleId, scheduleItemIds, userId);
            }
            else
            {
                return Helper.F35055_DeleteScheduleLineItem(scheduleId, scheduleItemIds, userId);
            }
        }
        #endregion

        #region F36066 Trend

        #region Check Trend

        /// <summary>
        /// Checks the trend roll year.
        /// </summary>
        /// <param name="trendYearId">The trend year id.</param>
        /// <param name="rollYear">The roll year.</param>
        /// <returns>Confirmation value</returns>
        public static int CheckTrendRollYear(int? trendYearId, int rollYear)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.CheckTrendRollYear(trendYearId, rollYear);
            }
            else
            {
                return Helper.CheckTrendRollYear(trendYearId, rollYear);
            }
        }

        #endregion Check Trend

        #region Get Trend Details

        /// <summary>
        /// Gets the trend details.
        /// </summary>
        /// <param name="trendYearId">The trend year id.</param>
        /// <returns>Trend Details</returns>
        public static F36066TrendData GetTrendDetails(int trendYearId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string trendValue;
                F36066TrendData trendData = new F36066TrendData();
                trendValue = terraScanService.GetTrendDetails(trendYearId);
                trendData.ReadXml(Utilities.SharedFunctions.XmlParser(trendValue));
                return trendData;
            }
            else
            {
                return Helper.GetTrendDetails(trendYearId);
            }
        }

        #endregion Check Trend Details

        #region Save Trend

        /// <summary>
        /// Saves the trend.
        /// </summary>
        /// <param name="trendYearId">The trend year id.</param>
        /// <param name="trendYearItems">The trend year items.</param>
        /// <param name="trendItems">The trend items.</param>
        /// <param name="userId">The user id.</param>
        /// <returns></returns>
        public static int SaveTrend(int? trendYearId, string trendYearItems, string trendItems, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.SaveTrend(trendYearId, trendYearItems, trendItems, userId);
            }
            else
            {
                return Helper.SaveTrend(trendYearId, trendYearItems, trendItems, userId);
            }
        }

        #endregion Save Trend

        #region Delete Trend

        /// <summary>
        /// Deletes the trend.
        /// </summary>
        /// <param name="trendYearId">The trend year id.</param>
        /// <param name="trendItems">The trend items.</param>
        /// <param name="userId">The user id.</param>
        public static void DeleteTrend(int? trendYearId, string trendItems, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                terraScanService.DeleteTrend(trendYearId, trendItems, userId);
            }
            else
            {
                Helper.DeleteTrend(trendYearId, trendItems, userId);
            }
        }

        #endregion Delete Trend

        #endregion F36066 Trend

        #region F35051 Schedule Line Items

        /// <summary>
        /// F35051_s the get schedule line item details.
        /// </summary>
        /// <param name="scheduleId">The schedule id.</param>
        /// <returns>The schedule line items dataset.</returns>
        public static F35051ScheduleLineItemsData F35051_GetScheduleLineItemDetails(int scheduleId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string scheduleLineItemValue;
                F35051ScheduleLineItemsData scheduleLineItemData = new F35051ScheduleLineItemsData();
                scheduleLineItemValue = terraScanService.F35051_GetScheduleLineItemDetails(scheduleId);
                scheduleLineItemData.ReadXml(Utilities.SharedFunctions.XmlParser(scheduleLineItemValue));
                return scheduleLineItemData;
            }
            else
            {
                return Helper.F35051_GetScheduleLineItemDetails(scheduleId);
            }
        }

        /// <summary>
        /// F35051_s the save schedule line item.
        /// </summary>
        /// <param name="scheduleId">The schedule id.</param>
        /// <param name="scheduleItems">The schedule items.</param>
        /// <param name="userId">The user id.</param>
        /// <returns>The result status.</returns>
        public static int F35051_SaveScheduleLineItem(int scheduleId, string scheduleItems, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F35051_SaveScheduleLineItem(scheduleId, scheduleItems, userId);
            }
            else
            {
                return Helper.F35051_SaveScheduleLineItem(scheduleId, scheduleItems, userId);
            }
        }

        /// <summary>
        /// F35051_s the delete schedule line item.
        /// </summary>
        /// <param name="scheduleId">The schedule id.</param>
        /// <param name="scheduleItemIds">The schedule item ids.</param>
        /// <param name="userId">The user id.</param>
        /// <returns>The result status.</returns>
        public static int F35051_DeleteScheduleLineItem(int scheduleId, string scheduleItemIds, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F35051_DeleteScheduleLineItem(scheduleId, scheduleItemIds, userId);
            }
            else
            {
                return Helper.F35051_DeleteScheduleLineItem(scheduleId, scheduleItemIds, userId);
            }
        }

        /// <summary>
        /// F35051_s the get depr percentage.
        /// </summary>
        /// <param name="rollYear">The roll year.</param>
        /// <param name="deprTableId">The depr table id.</param>
        /// <param name="year">The year.</param>
        /// <returns>The schedule line items dataset.</returns>
        public static F35051ScheduleLineItemsData F35051_GetDeprPercentage(Int16 rollYear, int deprTableId, Int16 year)
        {
            if (WSHelper.IsOnLineMode)
            {
                string scheduleLineItemValue;
                F35051ScheduleLineItemsData scheduleLineItemData = new F35051ScheduleLineItemsData();
                scheduleLineItemValue = terraScanService.F35051_GetDeprPercentage(rollYear, deprTableId, year);
                scheduleLineItemData.ReadXml(Utilities.SharedFunctions.XmlParser(scheduleLineItemValue));
                return scheduleLineItemData;
            }
            else
            {
                return Helper.F35051_GetDeprPercentage(rollYear, deprTableId, year);
            }
        }

        #endregion F35051 Schedule Line Items

        #region F25055 Personal Property Header

        /// <summary>
        /// Gets the property header details.
        /// </summary>
        /// <param name="scheduleId">The schedule id.</param>
        /// <returns>Personal property header details</returns>
        public static F25055PropertyHeaderData GetPropertyHeaderDetails(int scheduleId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string personalPropertyValue;
                F25055PropertyHeaderData personalPropertyData = new F25055PropertyHeaderData();
                personalPropertyValue = terraScanService.GetPropertyHeaderDetails(scheduleId);
                personalPropertyData.ReadXml(Utilities.SharedFunctions.XmlParser(personalPropertyValue));
                return personalPropertyData;
            }
            else
            {
                return Helper.GetPropertyHeaderDetails(scheduleId);
            }
        }

        #endregion F25055 Personal Property Header

        #region F36065 Personal Property Depreciation

        #region Check Depreciation RollYear

        /// <summary>
        /// F36065_s the check depr roll year.
        /// </summary>
        /// <param name="deprYearId">The depr year id.</param>
        /// <param name="rollYear">The roll year.</param>
        /// <returns>confirmation value</returns>
        public static int F36065_CheckDeprRollYear(int? deprYearId, int rollYear)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F36065_CheckDeprRollYear(deprYearId, rollYear);
            }
            else
            {
                return Helper.F36065_CheckDeprRollYear(deprYearId, rollYear);
            }
        }

        #endregion Check Depreciation RollYear

        #region Get Depreciation Details

        /// <summary>
        /// F36065_s the get depr details.
        /// </summary>
        /// <param name="deprYearId">The depr year id.</param>
        /// <returns>Daraset contains depreciation details</returns>
        public static F36065PersonalDeprData F36065_GetDeprDetails(int deprYearId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string depreciationValue;
                F36065PersonalDeprData depreciationData = new F36065PersonalDeprData();
                depreciationValue = terraScanService.F36065_GetDeprDetails(deprYearId);
                depreciationData.ReadXml(Utilities.SharedFunctions.XmlParser(depreciationValue));
                return depreciationData;
            }
            else
            {
                return Helper.F36065_GetDeprDetails(deprYearId);
            }
        }

        #endregion Get Depreciation Details

        #region Save Depreciation

        /// <summary>
        /// F36065_s the save depreciation.
        /// </summary>
        /// <param name="deprYearId">The depr year id.</param>
        /// <param name="deprYearItems">The depr year items.</param>
        /// <param name="depreciationItems">The depreciation items.</param>
        /// <param name="userId">The user id.</param>
        /// <returns>confirmation value for save</returns>
        public static int F36065_SaveDepreciation(int? deprYearId, string deprYearItems, string depreciationItems, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F36065_SaveDepreciation(deprYearId, deprYearItems, depreciationItems, userId);
            }
            else
            {
                return Helper.F36065_SaveDepreciation(deprYearId, deprYearItems, depreciationItems, userId);
            }
        }

        #endregion Save Depreciation

        #region Delete Depreciation

        /// <summary>
        /// F36065_s the delete depreciattion.
        /// </summary>
        /// <param name="deprYearId">The depr year id.</param>
        /// <param name="depreciationItems">The depreciation items.</param>
        /// <param name="userId">The user id.</param>
        public static void F36065_DeleteDepreciattion(int? deprYearId, string depreciationItems, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                terraScanService.F36065_DeleteDepreciattion(deprYearId, depreciationItems, userId);
            }
            else
            {
                Helper.F36065_DeleteDepreciattion(deprYearId, depreciationItems, userId);
            }
        }

        #endregion Delete Depreciation

        #endregion F36065 Personal Property Depreciation

        #region F15020 Receipt Type

        /// <summary>
        /// F15020_s the get receipt types.
        /// </summary>
        /// <param name="userId">The user id.</param>
        /// <param name="formId">The form id.</param>
        /// <param name="keyId">The key id.</param>
        /// <returns>Receipt Types</returns>
        public static F1070ReceiptTypeData F15020_GetReceiptTypes(int userId, short formId, int keyId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string receiptTypeValue;
                F1070ReceiptTypeData receiptTypeData = new F1070ReceiptTypeData();
                receiptTypeValue = terraScanService.F15020_GetReceiptTypes(userId, formId, keyId);
                receiptTypeData.ReadXml(Utilities.SharedFunctions.XmlParser(receiptTypeValue));
                return receiptTypeData;
            }
            else
            {
                return Helper.F15020_GetReceiptTypes(userId, formId, keyId);
            }
        }





        #endregion F15020 Receipt Type

        #region F1504 Copy Account
        /// <summary>
        /// F1504_s the get copy account sub fund.
        /// </summary>
        /// <returns></returns>
        public static F1504CopyAccountData F1504_GetCopyAccountSubFund()
        {
            if (WSHelper.IsOnLineMode)
            {
                string getCopyAccountSubFund;
                F1504CopyAccountData getCopyAccountSubFundData = new F1504CopyAccountData();
                getCopyAccountSubFund = terraScanService.F1504_GetCopyAccountSubFund();
                getCopyAccountSubFundData.ReadXml(Utilities.SharedFunctions.XmlParser(getCopyAccountSubFund));
                return getCopyAccountSubFundData;
            }
            else
            {
                return Helper.F1504_GetCopyAccountSubFund();
            }
        }

        /// <summary>
        /// F1504_s the get account detail.
        /// </summary>
        /// <param name="accountId">The account id.</param>
        /// <returns></returns>
        public static F1504CopyAccountData F1504_GetAccountDetail(int accountId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string getCopyAccountDetail;
                F1504CopyAccountData getCopyAccountDetailData = new F1504CopyAccountData();
                getCopyAccountDetail = terraScanService.F1504_GetAccountDetail(accountId);
                getCopyAccountDetailData.ReadXml(Utilities.SharedFunctions.XmlParser(getCopyAccountDetail));
                return getCopyAccountDetailData;
            }
            else
            {
                return Helper.F1504_GetAccountDetail(accountId);
            }
        }

        /// <summary>
        /// F1504_s the save copy account details.
        /// </summary>
        /// <param name="rollYear">The roll year.</param>
        /// <param name="subFund">The sub fund.</param>
        /// <param name="description">The description.</param>
        /// <param name="function">The function.</param>
        /// <param name="bars">The bars.</param>
        /// <param name="accObject">The acc object.</param>
        /// <param name="line">The line.</param>
        /// <param name="userId">The user id.</param>
        /// <returns></returns>
        public static F1504CopyAccountData F1504_SaveCopyAccountDetails(int rollYear, string subFund, string description, string function, string bars, string accObject, string line, string userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string copyAccountData;
                F1504CopyAccountData copyAccountDataSet = new F1504CopyAccountData();
                copyAccountData = terraScanService.F1504_SaveCopyAccountDetails(rollYear, subFund, description, function, bars, accObject, line, userId);
                copyAccountDataSet.ReadXml(Utilities.SharedFunctions.XmlParser(copyAccountData));
                return copyAccountDataSet;
            }
            else
            {
                return Helper.F1504_SaveCopyAccountDetails(rollYear, subFund, description, function, bars, accObject, line, userId);
            }
        }
        #endregion F1504 Copy Account

        #region F32012 Catalog

        /// <summary>
        /// F32012_s the get catalog data.
        /// </summary>
        /// <param name="valueSliceId">The value slice id.</param>
        /// <returns>Catalog Data</returns>
        public static F32012CatalogData F32012_GetCatalogData(int valueSliceId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string CatalogValue;
                F32012CatalogData getCatalogData = new F32012CatalogData();
                CatalogValue = terraScanService.F32012_GetCatalogData(valueSliceId);
                getCatalogData.ReadXml(Utilities.SharedFunctions.XmlParser(CatalogValue));
                return getCatalogData;
            }
            else
            {
                return Helper.F32012_GetCatalogData(valueSliceId);
            }
        }

        /// <summary>
        /// F32012_s the save catalog.
        /// </summary>
        /// <param name="objectId">The object id.</param>
        /// <param name="catalogData">The catalog data.</param>
        /// <param name="userId">The user id.</param>
        /// <returns>Confirmation value for save</returns>
        public static DataSet F32012_SaveCatalog(int objectId, string catalogData, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F32012_SaveCatalog(objectId, catalogData, userId);
            }
            else
            {
                return Helper.F32012_SaveCatalog(objectId, catalogData, userId);
            }
        }

        #endregion F32012 Catalog


        #region Apex Sketch

        #region Sketch File Path

        /// <summary>
        /// F3205 pcget Sketch FilePath.
        /// </summary>
        /// <param name="ParcelId">The Parcel id.</param>
        /// <param name="UserId">The User id.</param>
        /// <returns>getApexSketch Data</returns>
        public static F3205ApexSketchData F3205pcgetSketchFilePath(int parcelId, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string ApexSketchData;
                F3205ApexSketchData ApexDataSet = new F3205ApexSketchData();
                ApexSketchData = terraScanService.F3205pcgetSketchFilePath(parcelId, userId);
                ApexDataSet.ReadXml(Utilities.SharedFunctions.XmlParser(ApexSketchData));
                return ApexDataSet;

            }
            else
            {
                return Helper.F3205pcgetSketchFilePath(parcelId, userId);
            }
        }

        #endregion Sketch File Path

        #region SketchLinkList

        /// <summary>
        ///F3205 pcget SketchLinks Exist.
        /// </summary>
        public static F3205ApexSketchData F3205pcgetSketchLinksExist(int parcelId, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string ApexSketchData;
                F3205ApexSketchData ApexDataSet = new F3205ApexSketchData();
                ApexSketchData = terraScanService.F3205pcgetSketchLinksExist(parcelId, userId);
                ApexDataSet.ReadXml(Utilities.SharedFunctions.XmlParser(ApexSketchData));
                return ApexDataSet;

            }
            else
            {
                return Helper.F3205pcgetSketchLinksExist(parcelId, userId);
            }

        }

        #endregion SketchLinkList

        #region sketchImagePath

        /// <summary>
        /// Saves the sketch Image Path.
        /// </summary>
        /// <param name="statementItems">The statement items.</param>
        /// <param name="userId">The userId.</param>
        /// <returns>typed dataset</returns>
        public static F3205ApexSketchData F3205pcinsSketchImage(int parcelId, int userId, int pageCount)
        {

            if (WSHelper.IsOnLineMode)
            {
                string ApexSketchData;
                F3205ApexSketchData ApexDataSet = new F3205ApexSketchData();
                ApexSketchData = terraScanService.F3205pcinsSketchImage(parcelId, userId, pageCount);
                ApexDataSet.ReadXml(Utilities.SharedFunctions.XmlParser(ApexSketchData));
                return ApexDataSet;

            }
            else
            {
                return Helper.F3205pcinsSketchImage(parcelId, userId, pageCount);
            }
        }

        #endregion sketchImagePath

        #region insert Apex Sketch

        /// <summary>
        /// insert Apex Sketch
        /// </summary>
        /// <param name="SketchDataXML">The SketchData XML.</param>
        /// <param name="ParcelId">The Parcel Id.</param>
        /// <param name="userId">The userId.</param>
        public static void SaveApexSketch(string SketchDataXML, int parcelId, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                terraScanService.SaveApexSketch(SketchDataXML, parcelId, userId);
            }
            else
            {
                Helper.SaveApexSketch(SketchDataXML, parcelId, userId);
            }
        }

        #endregion Save Apex Sketch

        #region ReCalcValues

        /// <summary>
        ///ReCalculate RCN Values
        /// </summary>
        /// <param name="exciseRateId">The excise rate id.</param>
        /// <param name="userId">The userId.</param>
        /// <returns>The return value specifying status of the delete action.</returns>
        public static string F3205_pcexeReCalcValues(int userId, int parcelId)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F3205_pcexeReCalcValues(userId, parcelId);
            }
            else
            {
                return Helper.F3205_pcexeReCalcValues(userId, parcelId);
            }
        }


        #endregion ReCalcValues

        #endregion Apex Sketch

        #region F1403 ParcelSelection

        /// <summary>
        /// F1403_s the type of the get parcel.
        /// </summary>
        /// <param name="parcelId">The parcel id.</param>
        /// <returns>F1403ParcelSearch</returns>
        public static F1403ParcelSearch F1403_GetParcelType(int? parcelId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string parcelSearchData;
                F1403ParcelSearch parcelSearchDataSet = new F1403ParcelSearch();
                parcelSearchData = terraScanService.F1403_GetParcelType(parcelId);
                parcelSearchDataSet.ReadXml(Utilities.SharedFunctions.XmlParser(parcelSearchData));
                return parcelSearchDataSet;
            }
            else
            {
                return Helper.F1403_GetParcelType(parcelId);
            }
        }

        /// <summary>
        /// F1403_s the type of the get parcel.
        /// </summary>
        /// <param name="parcelSearchXml">The parcel search XML.</param>
        /// <returns>F1403ParcelSearch</returns>
        public static F1403ParcelSearch F1403_GetSearchResult(string parcelSearchXml)
        {
            if (WSHelper.IsOnLineMode)
            {
                string parcelSearchData;
                F1403ParcelSearch parcelSearchDataSet = new F1403ParcelSearch();
                parcelSearchData = terraScanService.F1403_GetSearchResult(parcelSearchXml);
                parcelSearchDataSet.ReadXml(Utilities.SharedFunctions.XmlParser(parcelSearchData));
                return parcelSearchDataSet;
            }
            else
            {
                return Helper.F1403_GetSearchResult(parcelSearchXml);
            }
        }

        /// <summary>
        /// F1403_s the get sale tracking roll year.
        /// </summary>
        /// <param name="eventID">The event ID.</param>
        /// <returns></returns>
        public static F1403ParcelSearch F1403_GetSaleTrackingRollYear(int eventID)
        {
            if (WSHelper.IsOnLineMode)
            {
                string parcelSearchData;
                F1403ParcelSearch parcelSearchDataSet = new F1403ParcelSearch();
                parcelSearchData = terraScanService.F1403_GetSaleTrackingRollYear(eventID);
                parcelSearchDataSet.ReadXml(Utilities.SharedFunctions.XmlParser(parcelSearchData));
                return parcelSearchDataSet;
            }
            else
            {
                return Helper.F1403_GetSaleTrackingRollYear(eventID);
            }
        }
        #endregion

        #region F1404 Schedule Search

        /// <summary>
        /// F1404_s the list schedule search.
        /// </summary>
        /// <param name="scheduleConditionXml">The schedule condition XML.</param>
        /// <returns></returns>
        public static F1404ScheduleSelectionData F1404_ListScheduleSearch(string scheduleConditionXml)
        {
            if (WSHelper.IsOnLineMode)
            {
                string schedulesearch;
                F1404ScheduleSelectionData schedulesearchData = new F1404ScheduleSelectionData();
                schedulesearch = terraScanService.F1404_ListScheduleSearch(scheduleConditionXml);
                schedulesearchData.ReadXml(Utilities.SharedFunctions.XmlParser(schedulesearch));
                return schedulesearchData;
            }
            else
            {
                return Helper.F1404_ListScheduleSearch(scheduleConditionXml);
            }
        }

        /// <summary>
        /// F1404_s the type of the get schedule.
        /// </summary>
        /// <param name="scheduleId">The schedule id.</param>
        /// <returns></returns>
        public static F1404ScheduleSelectionData F1404_GetScheduleType(int? scheduleId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string scheduleSearchData;
                F1404ScheduleSelectionData scheduleSearchDataSet = new F1404ScheduleSelectionData();
                scheduleSearchData = terraScanService.F1404_GetScheduleType(scheduleId);
                scheduleSearchDataSet.ReadXml(Utilities.SharedFunctions.XmlParser(scheduleSearchData));
                return scheduleSearchDataSet;
            }
            else
            {
                return Helper.F1404_GetScheduleType(scheduleId);
            }
        }
        /// <summary>
        /// F1403_s the get Schedule tracking roll year.
        /// </summary>
        /// <param name="eventID">The event ID.</param>
        /// <returns></returns>
        public static F1404ScheduleSelectionData F1404_GetScheduleTrackingRollYear(int eventID)
        {
            if (WSHelper.IsOnLineMode)
            {
                string parcelSearchData;
                F1404ScheduleSelectionData parcelSearchDataSet = new F1404ScheduleSelectionData();
                parcelSearchData = terraScanService.F1404_GetScheduleTrackingRollYear(eventID);
                parcelSearchDataSet.ReadXml(Utilities.SharedFunctions.XmlParser(parcelSearchData));
                return parcelSearchDataSet;
            }
            else
            {
                return Helper.F1404_GetScheduleTrackingRollYear(eventID);
            }
        }

        #endregion

        #region F1405 State Search

        /// <summary>
        /// F1405_s the type of the get state.
        /// </summary>
        /// <param name="parcelId">The state id.</param>
        /// <returns>F1405stateSearch</returns>
        //public static F1405StateSelectionData F1405_GetStateType(int? stateId)
        //{
        //    if (WSHelper.IsOnLineMode)
        //    {
        //        string stateSearchData;
        //        F1405StateSelectionData stateSearchDataSet = new F1405StateSelectionData();
        //        stateSearchData = terraScanService.F1405_GetStateType(stateId);
        //        stateSearchDataSet.ReadXml(Utilities.SharedFunctions.XmlParser(stateSearchData));
        //        return stateSearchDataSet;
        //    }
        //    else
        //    {
        //        return Helper.F1405_GetStateType(stateId);
        //    }
        //}



        /// <summary>
        /// F1405_s the list state search.
        /// </summary>
        /// <param name="stateConditionXml">The state condition XML.</param>
        /// <returns></returns>
        public static F1405StateSelectionData F1405_ListStateSearch(string stateConditionXml)
        {
            if (WSHelper.IsOnLineMode)
            {
                string statesearch;
                F1405StateSelectionData statesearchData = new F1405StateSelectionData();
                statesearch = terraScanService.F1405_ListStateSearch(stateConditionXml);
                statesearchData.ReadXml(Utilities.SharedFunctions.XmlParser(statesearch));
                return statesearchData;
            }
            else
            {
                return Helper.F1405_ListStateSearch(stateConditionXml);
            }
        }

        #endregion F1405 State Search

        #region F28000 Discretionary Details

        #region Discretionary Details

        /// <summary>
        /// Discretionary Details
        /// </summary>
        /// <param name="eventId">Event ID</param>
        /// <returns>Discretionary Details</returns>
        public static F28000DiscretionaryData F28000_GetDiscretionaryDetails(int eventId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string discretionaryValue;
                F28000DiscretionaryData discretionaryData = new F28000DiscretionaryData();
                discretionaryValue = terraScanService.F28000_GetDiscretionaryDetails(eventId);
                discretionaryData.ReadXml(Utilities.SharedFunctions.XmlParser(discretionaryValue));
                return discretionaryData;
            }
            else
            {
                return Helper.F28000_GetDiscretionaryDetails(eventId);
            }
        }

        #endregion Discretionary Details

        #region Class Details

        /// <summary>
        /// Class Details
        /// </summary>
        /// <param name="stateId">State ID</param>
        /// <param name="eventId">Event ID</param>
        /// <returns>Class Details</returns>
        public static F28000DiscretionaryData F28000_GetClass(int stateId, int eventId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string discretionaryValue;
                F28000DiscretionaryData discretionaryData = new F28000DiscretionaryData();
                discretionaryValue = terraScanService.F28000_GetClass(stateId, eventId);
                discretionaryData.ReadXml(Utilities.SharedFunctions.XmlParser(discretionaryValue));
                return discretionaryData;
            }
            else
            {
                return Helper.F28000_GetClass(stateId, eventId);
            }
        }

        #endregion Class Details

        #region Exemption amount

        /// <summary>
        /// Exemption Amount
        /// </summary>
        /// <param name="rollYear">roll Year</param>
        /// <param name="exemptionYear">Exemption Year</param>
        /// <param name="subjectAmount">Subject Amount</param>
        /// <returns>Exemption Amount</returns>
        public static F28000DiscretionaryData F28000_GetExemptionAmount(int rollYear, int exemptionYear, decimal subjectAmount)
        {
            if (WSHelper.IsOnLineMode)
            {
                string discretionaryValue;
                F28000DiscretionaryData discretionaryData = new F28000DiscretionaryData();
                discretionaryValue = terraScanService.F28000_GetExemptionAmount(rollYear, exemptionYear, subjectAmount);
                discretionaryData.ReadXml(Utilities.SharedFunctions.XmlParser(discretionaryValue));
                return discretionaryData;
            }
            else
            {
                return Helper.F28000_GetExemptionAmount(rollYear, exemptionYear, subjectAmount);
            }
        }

        #endregion Exemption amount

        #region Save Discretionary Details

        /// <summary>
        /// Save Discretionary Details
        /// </summary>
        /// <param name="eventId">Event ID</param>
        /// <param name="discretionaryId">discretionary ID</param>
        /// <param name="discretionaryItems">XML string</param>
        /// <param name="userId">User ID</param>
        /// <returns>Confirmation Value</returns>
        public static int F28000_SaveDiscretionaryDetail(int eventId, int? discretionaryId, string discretionaryItems, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F28000_SaveDiscretionaryDetail(eventId, discretionaryId, discretionaryItems, userId);
            }
            else
            {
                return Helper.F28000_SaveDiscretionaryDetail(eventId, discretionaryId, discretionaryItems, userId);
            }
        }

        #endregion Save Discretionary Details

        #region Delete Discretionary Details

        /// <summary>
        /// Delete Discretionary Details
        /// </summary>
        /// <param name="discretionaryId">discretionary ID</param>
        /// <param name="discretionaryItems">XML String</param>
        /// <param name="userId">USer ID</param>
        public static void F28000_DeletediscretionaryDetails(int? discretionaryId, string discretionaryItems, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                terraScanService.F28000_DeletediscretionaryDetails(discretionaryId, discretionaryItems, userId);
            }
            else
            {
                Helper.F28000_DeletediscretionaryDetails(discretionaryId, discretionaryItems, userId);
            }
        }

        #endregion Delete Discretionary Details
        #endregion Discretionary Details

        #region F28100 BOE

        #region BOE Details

        /// <summary>
        /// Get BOE Details
        /// </summary>
        /// <param name="eventId">Event ID</param>
        /// <returns>BOE Details</returns>
        public static F28100BOEData F28100_GetBOEDetails(int eventId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string boeValue;
                F28100BOEData boeData = new F28100BOEData();
                boeValue = terraScanService.F28100_GetBOEDetails(eventId);
                boeData.ReadXml(Utilities.SharedFunctions.XmlParser(boeValue));
                return boeData;
            }
            else
            {
                return Helper.F28100_GetBOEDetails(eventId);
            }
        }

        #endregion BOE Details

        #region Get Total Amount

        /// <summary>
        /// Get Total amounts
        /// </summary>
        /// <param name="boeId">boe ID</param>
        /// <param name="eventId">Event ID</param>
        /// <param name="assessedValues">Assessed Values</param>
        /// <returns>Total values</returns>
        public static F28100BOEData F28100_GetTotalAmount(int boeId, int eventId, string assessedValues)
        {
            if (WSHelper.IsOnLineMode)
            {
                string boeValue;
                F28100BOEData boeData = new F28100BOEData();
                boeValue = terraScanService.F28100_GetTotalAmount(boeId, eventId, assessedValues);
                boeData.ReadXml(Utilities.SharedFunctions.XmlParser(boeValue));
                return boeData;
            }
            else
            {
                return Helper.F28100_GetTotalAmount(boeId, eventId, assessedValues);
            }
        }

        #endregion Get Total Amount

        #region Save BOE Details

        /// <summary>
        /// Save BOE Details
        /// </summary>
        /// <param name="eventId">Event ID</param>
        /// <param name="boeItems">BOE Items</param>
        /// <param name="assessedValues">Assessed Values</param>
        /// <param name="userId">User ID</param>
        /// <returns>Primary Key</returns>
        public static int F28100_SaveBOEDetails(int eventId, string boeItems, string assessedValues, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F28100_SaveBOEDetails(eventId, boeItems, assessedValues, userId);
            }
            else
            {
                return Helper.F28100_SaveBOEDetails(eventId, boeItems, assessedValues, userId);
            }
        }

        #endregion Save BOE Details

        #region Delete BOE Details

        /// <summary>
        /// Delete BOE
        /// </summary>
        /// <param name="boeId">BOE ID</param>
        /// <param name="userId">The User ID</param>
        public static void F28100_DeleteBOEDetails(int? boeId, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                terraScanService.F28100_DeleteBOEDetails(boeId, userId);
            }
            else
            {
                Helper.F28100_DeleteBOEDetails(boeId, userId);
            }
        }

        #endregion Delete BOE Details

        #region Push Value
        /// <summary>
        /// F28100 the push board of equalization details.
        /// </summary>
        /// <param name="boeId">The boe id.</param>
        /// <param name="userId">The user id.</param>
        public static void F28100_PushBOEDetails(int boeId, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                terraScanService.F28100_PushBOEDetails(boeId, userId);
            }
            else
            {
                Helper.F28100_PushBOEDetails(boeId, userId);
            }
        }
        #endregion Push Value

        #region Local Values

        /// <summary>
        /// Get Local Values
        /// </summary>
        /// <param name="assessedValues">Assessed Value</param>
        /// <returns>Assesed Value</returns>
        public static F28100BOEData F28100_GetLocalValues(string assessedValues)
        {
            if (WSHelper.IsOnLineMode)
            {
                string boeValue;
                F28100BOEData boeData = new F28100BOEData();
                boeValue = terraScanService.F28100_GetLocalValues(assessedValues);
                boeData.ReadXml(Utilities.SharedFunctions.XmlParser(boeValue));
                return boeData;
            }
            else
            {
                return Helper.F28100_GetLocalValues(assessedValues);
            }
        }

        #endregion Local Values

        #region County Values

        /// <summary>
        /// Get County Values
        /// </summary>
        /// <param name="isLocal">Is Local</param>
        /// <param name="assessedValues">Assessed Values</param>
        /// <returns>Assessed Value</returns>
        public static F28100BOEData F28100_GetCountyValues(bool isLocal, string assessedValues)
        {
            if (WSHelper.IsOnLineMode)
            {
                string boeValue;
                F28100BOEData boeData = new F28100BOEData();
                boeValue = terraScanService.F28100_GetCountyValues(isLocal, assessedValues);
                boeData.ReadXml(Utilities.SharedFunctions.XmlParser(boeValue));
                return boeData;
            }
            else
            {
                return Helper.F28100_GetCountyValues(isLocal, assessedValues);
            }
        }


        #endregion County Values

        #region State Values

        /// <summary>
        /// Get State Values
        /// </summary>
        /// <param name="isLocal">Is Local</param>
        /// <param name="isCounty">Is Couny</param>
        /// <param name="assessedValues">Assessed Value</param>
        /// <returns>Assessed Value</returns>
        public static F28100BOEData F28100_GetStateValues(bool isLocal, bool isCounty, string assessedValues)
        {
            if (WSHelper.IsOnLineMode)
            {
                string boeValue;
                F28100BOEData boeData = new F28100BOEData();
                boeValue = terraScanService.F28100_GetStateValues(isLocal, isCounty, assessedValues);
                boeData.ReadXml(Utilities.SharedFunctions.XmlParser(boeValue));
                return boeData;
            }
            else
            {
                return Helper.F28100_GetStateValues(isLocal, isCounty, assessedValues);
            }
        }

        #endregion State Values
        #endregion F28100 BOE

        #region F29551 Parcel Sale Tracking

        /// <summary>
        /// DataSet to populate combo values
        /// </summary>
        /// <param name="userId">The User Id</param>
        /// <returns>DataSet to populate combos</returns>
        public static F29551ParcelSaleTrackingData F29551_GetParcelSaleComboDetails(int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string parcelSaleTrackingDetails;
                F29551ParcelSaleTrackingData parcelSaleTracking = new F29551ParcelSaleTrackingData();
                parcelSaleTrackingDetails = terraScanService.F29551_GetParcelSaleComboDetails(userId);
                parcelSaleTracking.ReadXml(Utilities.SharedFunctions.XmlParser(parcelSaleTrackingDetails));
                return parcelSaleTracking;
            }
            else
            {
                return Helper.F29551_GetParcelSaleComboDetails(userId);
            }
        }

        /// <summary>
        /// DataSet to Populate Grid and other controls
        /// </summary>
        /// <param name="eventId">The Event Id</param>
        /// <param name="userId">The User ID</param>
        /// <returns>DataSet to populate Controls</returns>
        public static F29551ParcelSaleTrackingData F29551_GetParcelSaleTrackingDetails(int eventId, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string parcelSaleTrackingDetails;
                F29551ParcelSaleTrackingData parcelSaleTracking = new F29551ParcelSaleTrackingData();
                parcelSaleTrackingDetails = terraScanService.F29551_GetParcelSaleTrackingDetails(eventId, userId);
                parcelSaleTracking.ReadXml(Utilities.SharedFunctions.XmlParser(parcelSaleTrackingDetails));
                return parcelSaleTracking;
            }
            else
            {
                return Helper.F29551_GetParcelSaleTrackingDetails(eventId, userId);
            }
        }

        /// <summary>
        /// Data to populate Owner Grid
        /// </summary>
        /// <param name="saleId">The Sale Id</param>
        /// <param name="ownerId">The Owner Id</param>
        /// <param name="parcelId">The Parcel Id</param>
        /// <param name="userId">The User Id</param>
        /// <returns>Owner Details DataSet</returns>
        public static F29551ParcelSaleTrackingData F29551_GetOwnerDetails(int? saleId, int? ownerId, int? parcelId, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string parcelSaleTrackingDetails;
                F29551ParcelSaleTrackingData parcelSaleTracking = new F29551ParcelSaleTrackingData();
                parcelSaleTrackingDetails = terraScanService.F29551_GetOwnerDetails(saleId, ownerId, parcelId, userId);
                parcelSaleTracking.ReadXml(Utilities.SharedFunctions.XmlParser(parcelSaleTrackingDetails));
                return parcelSaleTracking;
            }
            else
            {
                return Helper.F29551_GetOwnerDetails(saleId, ownerId, parcelId, userId);
            }
        }

        /// <summary>
        /// Save ParcelSale Details
        /// </summary>
        /// <param name="eventId">eventId</param>
        /// <param name="saleItems">saleItems</param>
        /// <param name="parcelItems">parcelItems</param>
        /// <param name="ownerItems">ownerItems</param>
        /// <param name="userId">userId</param>
        /// <returns>integer value</returns>
        public static int F29551_SaveParcelSaleDetails(int eventId, string saleItems, string parcelItems, string ownerItems, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F29551_SaveParcelSaleDetails(eventId, saleItems, parcelItems, ownerItems, userId);
            }
            else
            {
                return Helper.F29551_SaveParcelSaleDetails(eventId, saleItems, parcelItems, ownerItems, userId);
            }
        }

        /// <summary>
        /// Parcel and Owner details
        /// </summary>
        /// <param name="parcelId">The Parcel Id</param>
        /// <param name="parcelCollection">Parcel Collections</param>
        /// <param name="saleId">The Sale Id</param>
        /// <param name="userId">The User Id</param>
        /// <returns>Parcel and Owner details</returns>
        public static F29551ParcelSaleTrackingData F29551_GetParcelOwnerDetails(int? parcelId, string parcelCollection, int? saleId, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string parcelSaleTrackingDetails;
                F29551ParcelSaleTrackingData parcelSaleTracking = new F29551ParcelSaleTrackingData();
                parcelSaleTrackingDetails = terraScanService.F29551_GetParcelOwnerDetails(parcelId, parcelCollection, saleId, userId);
                parcelSaleTracking.ReadXml(Utilities.SharedFunctions.XmlParser(parcelSaleTrackingDetails));
                return parcelSaleTracking;
            }
            else
            {
                return Helper.F29551_GetParcelOwnerDetails(parcelId, parcelCollection, saleId, userId);
            }
        }

        /// <summary>
        /// Create Sale Versions
        /// </summary>
        /// <param name="eventId">The Event Id</param>
        /// <param name="userId">The User Id</param>
        /// <param name="checkedParcels">Checked Parcels List</param>
        /// <returns>Message returned from SP</returns>
        public static string F29551_CreateSaleVersions(int eventId, int userId, string checkedParcels)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F29551_CreateSaleVersions(eventId, userId, checkedParcels);
            }
            else
            {
                return Helper.F29551_CreateSaleVersions(eventId, userId, checkedParcels);
            }
        }

        /// <summary>
        /// Transfer Ownership Details
        /// </summary>
        /// <param name="eventId">The Event Id</param>
        /// <param name="userId">The User Id</param>
        /// <returns>Message returned from SP</returns>
        public static string F29551_TransferOwnership(int eventId, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F29551_TransferOwnership(eventId, userId);
            }
            else
            {
                return Helper.F29551_TransferOwnership(eventId, userId);
            }
        }

        /// <summary>
        /// F29551_s the update sale parcel.
        /// </summary>
        /// <param name="eventId">The event id.</param>
        /// <param name="userId">The user id.</param>
        /// <returns>Message returned from SP</returns>
        public static string F29551_UpdateSaleParcel(int eventId, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F29551_UpdateSaleParcel(eventId, userId);
            }
            else
            {
                return Helper.F29551_UpdateSaleParcel(eventId, userId);
            }
        }

        #endregion F29551 Parcel Sale Tracking

        #region F9045 Generic Search

        /// <summary>
        /// F9045s the get configuration.
        /// </summary>
        /// <param name="genericSearchId">The generic search id.</param>
        /// <returns>Configuration Details</returns>
        public static F9045GenericSearchData F9045GetConfiguration(int genericSearchId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string configurationDetails;
                F9045GenericSearchData configData = new F9045GenericSearchData();
                configurationDetails = terraScanService.F9045GetConfiguration(genericSearchId);
                configData.ReadXml(Utilities.SharedFunctions.XmlParser(configurationDetails));
                return configData;
            }
            else
            {
                return Helper.F9045GetConfiguration(genericSearchId);
            }
        }

        /// <summary>
        /// F9045s the get search results.
        /// </summary>
        /// <param name="genericSearchId">The generic search id.</param>
        /// <param name="searchString">The search string.</param>
        /// <param name="userId">The user id.</param>
        /// <returns>Search Result</returns>
        public static F9045GenericSearchData F9045GetSearchResults(int genericSearchId, string searchString, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string searchResult;
                F9045GenericSearchData searchData = new F9045GenericSearchData();
                searchResult = terraScanService.F9045GetSearchResults(genericSearchId, searchString, userId);
                searchData.ReadXml(Utilities.SharedFunctions.XmlParser(searchResult));
                return searchData;
            }
            else
            {
                return Helper.F9045GetSearchResults(genericSearchId, searchString, userId);
            }
        }

        #endregion F9045 Generic Search

        #region F3201 Sketch Link

        /// <summary>
        /// F3201_s the get sketch link data.
        /// </summary>
        /// <param name="parcelId">The parcel id.</param>
        /// <param name="userId">The user id.</param>
        /// <returns>Sketch Data</returns>
        public static F3201SketchLinkData F3201_GetSketchLinkData(int parcelId, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string stepsValue;
                F3201SketchLinkData getSketchData = new F3201SketchLinkData();
                stepsValue = terraScanService.F3201_GetSketchLinkData(parcelId, userId);
                getSketchData.ReadXml(Utilities.SharedFunctions.XmlParser(stepsValue));
                return getSketchData;
            }
            else
            {
                return Helper.F3201_GetSketchLinkData(parcelId, userId);
            }
        }

        /// <summary>
        /// F3201_s the save sketch link data.
        /// </summary>
        /// <param name="linkXML">The link XML.</param>
        /// <param name="userId">The user id.</param>
        /// <returns>Error Message</returns>
        public static string F3201_SaveSketchLinkData(string linkXML, int parcelId, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F3201_SaveSketchLinkData(linkXML, parcelId, userId);
            }
            else
            {
                return Helper.F3201_SaveSketchLinkData(linkXML, parcelId, userId);
            }
        }

        #endregion F3201 Sketch Link

        public static string AwakeWCFService(string checkMessage)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.CheckInstallation(checkMessage);
            }

            return "true";
        }

        /// <summary>
        /// F1500_s the get sample form details.
        /// </summary>
        /// <param name="FormID">The form ID.</param>
        /// <returns></returns>
        public static F1500SampleForm F1500_GetSampleFormDetails(int FormID)
        {
            if (WSHelper.IsOnLineMode)
            {
                string getSampleDetails;
                F1500SampleForm objSampleForm = new F1500SampleForm();
                getSampleDetails = terraScanService.F1500_GetSampleFormDetails(FormID);
                objSampleForm.ReadXml(Utilities.SharedFunctions.XmlParser(getSampleDetails));

                return objSampleForm;

            }
            else
            {
                return Helper.F1500_GetSampleFormDetails(FormID);
            }
        }

        /// <summary>
        /// Inserts the sample form details.
        /// </summary>
        /// <param name="FormID">The form ID.</param>
        /// <param name="SampleFormDetails">The sample form details.</param>
        /// <param name="UserID">The user ID.</param>
        /// <returns></returns>
        public static int InsertSampleFormDetails(int FormID, string SampleFormDetails, int UserID)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.InsertSampleFormDetails(FormID, SampleFormDetails, UserID);
            }
            else
            {
                return Helper.InsertSampleFormDetails(FormID, SampleFormDetails, UserID);
            }
        }

        /// <summary>
        /// Gets the application id.
        /// </summary>
        /// <returns></returns>
        public static F1500SampleForm GetApplicationId()
        {
            if (WSHelper.IsOnLineMode)
            {
                string appId;
                F1500SampleForm objSampleFormAppId = new F1500SampleForm();
                appId = terraScanService.GetApplicationId();
                objSampleFormAppId.ReadXml(Utilities.SharedFunctions.XmlParser(appId));
                return objSampleFormAppId;
            }
            else
            {
                return Helper.GetApplicationId();
            }
        }

        public static F1500SampleForm GetMenuIdDetails()
        {
            if (WSHelper.IsOnLineMode)
            {
                string menuId;
                F1500SampleForm objSampleFormMenuIddetails = new F1500SampleForm();
                menuId = terraScanService.GetMenuIdDetails();
                objSampleFormMenuIddetails.ReadXml(Utilities.SharedFunctions.XmlParser(menuId));
                return objSampleFormMenuIddetails;
            }
            else
            {
                return Helper.GetMenuIdDetails();
            }
        }

        public static void F1500_DeleteFormIDDetails(int FormID, int GroupID)
        {
            if (WSHelper.IsOnLineMode)
            {
                terraScanService.F1500_DeleteFormIDDetails(FormID, GroupID);

            }
            else
            {
                Helper.F1500_DeleteFomIDDetails(FormID, GroupID);
            }
        }

        public static int InsertFieldUseAddDetails(int KeyID, string KeyName, int Form, int? ModuleID, int InsertedBy)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F3230_AddValues(KeyID, KeyName, Form, ModuleID, InsertedBy);
            }
            else
            {
                return Helper.F3230_AddValues(KeyID, KeyName, Form, ModuleID, InsertedBy);
            }
        }

        /// <summary>
        /// F3230_GetChkOutParcelIDs
        /// </summary>
        /// <param name="SnapShotID"></param>
        /// <returns></returns>
        public static F3230CheckInData F3230_GetChkOutParcelIDs(int SnapShotID)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F3230_GetChkOutParcelIDs(SnapShotID);
            }
            else
            {
                return Helper.F3230_GetChkOutParcelIDs(SnapShotID);
            }
        }

        /// <summary>
        /// F3230_GetCheckOutDetails
        /// </summary>
        /// <param name="SnapShotID"></param>
        /// <param name="UserID"></param>
        /// <returns></returns>
        public static F3230CheckInData F3230_GetCheckOutDetails(int SnapShotID, int UserID)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F3230_GetCheckOutDetails(SnapShotID, UserID);
            }
            else
            {
                return Helper.F3230_GetCheckOutDetails(SnapShotID, UserID);
            }
        }

        /// <summary>
        /// F3230_SaveChkOutParcelIDs
        /// </summary>
        /// <param name="ParcelXML"></param>
        /// <returns></returns>
        public static int F3230_SaveChkOutParcelIDs(string ParcelXML)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F3230_SaveChkOutParcelIDs(ParcelXML);
            }
            else
            {
                return Helper.F3230_SaveChkOutParcelIDs(ParcelXML);
            }
        }

        /// <summary>
        /// F3230_SaveCheckOutDetails
        /// </summary>
        /// <param name="CheckOutXML"></param>
        /// <returns></returns>
        public static int F3230_SaveCheckOutDetails(string CheckOutXML)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F3230_SaveCheckOutDetails(CheckOutXML);
            }
            else
            {
                return Helper.F3230_SaveCheckOutDetails(CheckOutXML);
            }
        }

        public static int InsertFieldUseDetails(int KeyID, string KeyField, int UserID)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.InsertFieldUseDetails(KeyID, KeyField, UserID);
            }
            else
            {
                return Helper.InsertFieldUseDetails(KeyID, KeyField, UserID);
            }
        }

        #region F35080
        /// <summary>
        /// F35080_s the central assessed owner details.
        /// </summary>
        /// <param name="centralId">The central id.</param>
        /// <returns></returns>
        public static F35080CentralAssessedOwner F35080_CentralAssessedOwnerDetails(int centralId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string ownerDetails;
                F35080CentralAssessedOwner ownerObj = new F35080CentralAssessedOwner();
                ownerDetails = terraScanService.F35080_CentralAssessedOwnerDetails(centralId);
                ownerObj.ReadXml(Utilities.SharedFunctions.XmlParser(ownerDetails));
                return ownerObj;
            }
            else
            {
                return Helper.F35080_CentralAssessedOwnerDetails(centralId);
            }
        }
        /// <summary>
        /// F35080_s the property class combo.
        /// </summary>
        /// <returns></returns>
        public static F35080CentralAssessedOwner F35080_PropertyClassCombo()
        {
            if (WSHelper.IsOnLineMode)
            {
                string comboDetails;
                F35080CentralAssessedOwner OwnerObj = new F35080CentralAssessedOwner();
                comboDetails = terraScanService.F35080_PropertyClassCombo();
                OwnerObj.ReadXml(Utilities.SharedFunctions.XmlParser(comboDetails));
                return OwnerObj;
            }
            else
            {
                return Helper.F35080_PropertyClassCombo();
            }
        }

        /// <summary>
        /// F35080_s the delete owner details.
        /// </summary>
        /// <param name="centralId">The central id.</param>
        /// <param name="userId">The user id.</param>
        /// <returns></returns>
        public static void F35080_DeleteOwnerDetails(int centralId, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                terraScanService.F35080_DeleteOwnerDetails(centralId, userId);
            }
            else
            {
                Helper.F35080_DeleteOwnerDetails(centralId, userId);
            }
        }

        /// <summary>
        /// F35080_s the insert owner central details.
        /// </summary>
        /// <param name="centralId">The central id.</param>
        /// <param name="centralXML">The central XML.</param>
        /// <param name="userId">The user id.</param>
        /// <returns></returns>
        public static int F35080_InsertOwnerCentralDetails(int? centralId, string centralXML, int userId)
        {

            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F35080_InsertOwnerCentralDetails(centralId, centralXML, userId);
            }
            else
            {
                return Helper.F35080_InsertOwnerCentralDetails(centralId, centralXML, userId);
            }
        }

        public static F35080CentralAssessedOwner F35080_OwnerDetails(int ownerId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string ownerDetails;
                F35080CentralAssessedOwner ownerObj = new F35080CentralAssessedOwner();
                ownerDetails = terraScanService.F35080_OwnerDetails(ownerId);
                ownerObj.ReadXml(Utilities.SharedFunctions.XmlParser(ownerDetails));
                return ownerObj;
            }
            else
            {
                return Helper.F35080_OwnerDetails(ownerId);
            }
        }
        
        #endregion

        #region F35081
        /// <summary>
        /// F35081_s the central assessed grid details.
        /// </summary>
        /// <param name="CentralId">The central id.</param>
        /// <returns></returns>
        public static F35081CentralAssessedGridData F35081_CentralAssessedGridDetails(int CentralId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string ownerDetails;
                F35081CentralAssessedGridData ownerObj = new F35081CentralAssessedGridData();
                ownerDetails = terraScanService.F35081_CentralAssessedGridDetails(CentralId);
                ownerObj.ReadXml(Utilities.SharedFunctions.XmlParser(ownerDetails));
                return ownerObj;
            }
            else
            {
                return Helper.F35081_CentralAssessedGridDetails(CentralId);
            }
        }

        /// <summary>
        /// F35081_s the central assessed rate details.
        /// </summary>
        /// <param name="subFundId">The sub fund id.</param>
        /// <param name="personalProperty">The personal property.</param>
        /// <param name="realProperty">The real property.</param>
        /// <returns></returns>
        public static F35081CentralAssessedGridData F35081_CentralAssessedRateDetails(int subFundId, decimal personalProperty, decimal realProperty, string description, string centralXMLList)
        {
            if (WSHelper.IsOnLineMode)
            {
                string ownerDetails;
                F35081CentralAssessedGridData ownerObj = new F35081CentralAssessedGridData();
                ownerDetails = terraScanService.F35081_CentralAssessedRateDetails(subFundId, personalProperty, realProperty,description,centralXMLList);
                ownerObj.ReadXml(Utilities.SharedFunctions.XmlParser(ownerDetails));
                return ownerObj;
            }
            else
            {
                return Helper.F35081_CentralAssessedRateDetails(subFundId, personalProperty, realProperty,description,centralXMLList);
            }
        }

        /// <summary>
        /// F35081_s the insert owner assessed grid.
        /// </summary>
        /// <param name="centralXMLItems">The central XML items.</param>
        /// <param name="centralId">The central id.</param>
        /// <param name="userId">The user id.</param>
        /// <returns></returns>
        public static void F35081_InsertOwnerAssessedGrid(string centralXMLItems, int centralId, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                 terraScanService.F35081_InsertOwnerAssessedGrid(centralXMLItems, centralId, userId);
            }

            else
            {
                 Helper.F35081_InsertOwnerAssessedGrid(centralXMLItems, centralId, userId);

            }
        }

        /// <summary>
        /// F35081_s the delete owner grid details.
        /// </summary>
        /// <param name="removeXMLItems">The remove XML items.</param>
        /// <param name="centralId">The central id.</param>
        /// <param name="userId">The user id.</param>
        public static void F35081_DeleteOwnerGridDetails(string removeXMLItems, int centralId, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                terraScanService.F35081_DeleteOwnerGridDetails(removeXMLItems, centralId, userId);
            }
            else
            {
                Helper.F35081_DeleteOwnerGridDetails(removeXMLItems, centralId, userId);
            }
        } 
        #endregion

        #region F35085

        /// <summary>
        /// F35085_s the import type combo.
        /// </summary>
        /// <returns></returns>
        public static F35085CentrallyAssessedImportData F35085_ImportTypeCombo()
        {
            if (WSHelper.IsOnLineMode)
            {
               string ownerDetails;
                F35085CentrallyAssessedImportData ownerObj = new F35085CentrallyAssessedImportData();
                ownerDetails = terraScanService.F35085_ImportTypeCombo();
                ownerObj.ReadXml(Utilities.SharedFunctions.XmlParser(ownerDetails));
                return ownerObj;
            }
            else
            {
                return Helper.F35085_ImportTypeCombo();
            }
        }

        /// <summary>
        /// F35085_s the central assessed import details.
        /// </summary>
        /// <param name="importId">The import id.</param>
        /// <returns></returns>
        public static F35085CentrallyAssessedImportData F35085_CentralAssessedImportDetails(int importId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string ownerDetails;
                F35085CentrallyAssessedImportData ownerObj = new F35085CentrallyAssessedImportData();
                ownerDetails = terraScanService.F35085_CentralAssessedImportDetails(importId);
                ownerObj.ReadXml(Utilities.SharedFunctions.XmlParser(ownerDetails));
                return ownerObj;
            }
            else
            {
                return Helper.F35085_CentralAssessedImportDetails(importId);
            }
        }

        /// <summary>
        /// F35085_s the deletetemplate details.
        /// </summary>
        /// <param name="importId">The import id.</param>
        /// <param name="userId">The user id.</param>
        public static void F35085_DeletetemplateDetails(int importId, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                terraScanService.F35085_DeletetemplateDetails(importId, userId);
            }
            else
            {
                 Helper.F35085_DeletetemplateDetails(importId, userId);
            }
        }

        /// <summary>
        /// F35085_s the insert central template details.
        /// </summary>
        /// <param name="importId">The import id.</param>
        /// <param name="importXML">The import XML.</param>
        /// <param name="userId">The user id.</param>
        /// <returns></returns>
        public static DataSet F35085_InsertCentralTemplateDetails(int? importId, string importXML, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F35085_InsertCentralTemplateDetails(importId, importXML, userId);
            }
            else
            {
                return Helper.F35085_InsertCentralTemplateDetails(importId, importXML, userId);
            }
        }

      

        /// <summary>
        /// F35085_s the execute import.
        /// </summary>
        /// <param name="importId">The import id.</param>
        /// <param name="importXML">The import XML.</param>
        /// <param name="userId">The user id.</param>
        /// <param name="isProcess">if set to <c>true</c> [is process].</param>
        /// <returns></returns>
        public static string F35085_ExecuteImport(int importId, string importXML, int userId, bool isProcess)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F35085_ExecuteImport(importId, importXML, userId, isProcess);
            }
            else
            {
                return Helper.F35085_ExecuteImport(importId, importXML, userId, isProcess);
            }
        }
        /// <summary>
        /// F35085_s the execute check for errors.
        /// </summary>
        /// <param name="importId">The import id.</param>
        /// <param name="userId">The user id.</param>
        public static void F35085_ExecuteCheckForErrors(int importId, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                 terraScanService.F35085_ExecuteCheckForErrors(importId, userId);
            }
            else
            {
                 Helper.F35085_ExecuteCheckForErrors(importId, userId);
            }
        }
        /// <summary>
        /// F35085_s the create import records.
        /// </summary>
        /// <param name="importId">The import id.</param>
        /// <param name="userId">The user id.</param>
        /// <param name="isProcess">if set to <c>true</c> [is process].</param>
        /// <returns></returns>
        public static string F35085_CreateImportRecords(int importId, int userId, bool isProcess)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F35085_CreateImportRecords(importId, userId, isProcess);
            }
            else
            {
                return Helper.F35085_CreateImportRecords(importId, userId, isProcess);
            }
        }
        #endregion

        #region F16072

        /// <summary>
        /// F16072_s the get miscteplate details.
        /// </summary>
        /// <param name="misctemplateId">The misctemplate id.</param>
        /// <returns></returns>
        public static F16072MiscReceiptTemplate F16072_GetMiscteplateDetails(int misctemplateId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string miscTemplateDetails;
                F16072MiscReceiptTemplate MiscObj = new F16072MiscReceiptTemplate();
                miscTemplateDetails = terraScanService.F16072_GetMiscteplateDetails(misctemplateId);
                MiscObj.ReadXml(Utilities.SharedFunctions.XmlParser(miscTemplateDetails));
                return MiscObj;
                
            }
            else
            {
                return Helper.F16072_GetMiscteplateDetails(misctemplateId);
            }
        }

        /// <summary>
        /// F16072_s the save misc receipt template.
        /// </summary>
        /// <param name="misctemplateId">The misctemplate id.</param>
        /// <param name="miscHeaderDetails">The misc header details.</param>
        /// <param name="accountDetails">The account details.</param>
        /// <param name="userId">The user id.</param>
        /// <returns></returns>
        public static int F16072_SaveMiscReceiptTemplate(int? misctemplateId, string miscHeaderDetails, string accountDetails, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F16072_SaveMiscReceiptTemplate(misctemplateId, miscHeaderDetails, accountDetails, userId);
            }
            else
            {
                return Helper.F16072_SaveMiscReceiptTemplate(misctemplateId, miscHeaderDetails, accountDetails, userId);
            }

        }

        /// <summary>
        /// F16072_s the delete misctemplate details.
        /// </summary>
        /// <param name="misctemplateId">The misctemplate id.</param>
        /// <param name="userId">The user id.</param>
        public static void F16072_DeleteMisctemplateDetails(int misctemplateId, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                terraScanService.F16072_DeleteMisctemplateDetails(misctemplateId, userId);
            }
            else
            {
                Helper.F16072_DeleteMisctemplateDetails(misctemplateId, userId);
            }

        }

        /// <summary>
        /// F16072_s the delete misc gridtemplate.
        /// </summary>
        /// <param name="misctemplateId">The misctemplate id.</param>
        /// <param name="miscIds">The misc ids.</param>
        /// <param name="userId">The user id.</param>
        public static void F16072_DeleteMiscGridtemplate(int misctemplateId, string miscIds, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                terraScanService.F16072_DeleteMiscGridtemplate(misctemplateId, miscIds, userId);
            }
            else
            {
                Helper.F16072_DeleteMiscGridtemplate(misctemplateId, miscIds, userId);
            }
        }
        #endregion


        #region F16071


        /// <summary>
        /// F16071_s the get journal teplate details.
        /// </summary>
        /// <param name="templateId">The template id.</param>
        /// <returns></returns>
        public static F16071JournalEntryTemplateData F16071_GetJournalTeplateDetails(int templateId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string journalTemplateDetails;
                F16071JournalEntryTemplateData JournalObj = new F16071JournalEntryTemplateData();
                journalTemplateDetails = terraScanService.F16071_GetJournalTeplateDetails(templateId);
                JournalObj.ReadXml(Utilities.SharedFunctions.XmlParser(journalTemplateDetails));
                return JournalObj;

            }
            else
            {
                return Helper.F16071_GetJournalTeplateDetails(templateId);
            }
        }

        /// <summary>
        /// F16071_s the save header template details.
        /// </summary>
        /// <param name="templateId">The template id.</param>
        /// <param name="rollYear">The roll year.</param>
        /// <param name="description">The description.</param>
        /// <param name="userId">The user id.</param>
        /// <returns></returns>
        public static int F16071_SaveHeaderTemplateDetails(int? templateId, int rollYear, string description, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F16071_SaveHeaderTemplateDetails(templateId, rollYear, description, userId);
            }
            else
            {
                return Helper.F16071_SaveHeaderTemplateDetails(templateId,rollYear,description,userId);
            }
        }

        /// <summary>
        /// F16071_s the save grid template details.
        /// </summary>
        /// <param name="templateId">The template id.</param>
        /// <param name="gridDetails">The grid details.</param>
        /// <param name="userId">The user id.</param>
        public static void F16071_SaveGridTemplateDetails(int? templateId, string gridDetails, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                terraScanService.F16071_SaveGridTemplateDetails(templateId, gridDetails, userId);
            }
            else
            {
                Helper.F16071_SaveGridTemplateDetails(templateId, gridDetails, userId);
            }
        }

        /// <summary>
        /// F16071_s the delete journal header details.
        /// </summary>
        /// <param name="templateId">The template id.</param>
        /// <param name="userId">The user id.</param>
        public static void F16071_DeleteJournalHeaderDetails(int templateId, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                terraScanService.F16071_DeleteJournalHeaderDetails(templateId, userId);
            }
            else
            {
                Helper.F16071_DeleteJournalHeaderDetails(templateId, userId);
            }
        }


        /// <summary>
        /// F16071_s the delete journal grid details.
        /// </summary>
        /// <param name="templateId">The template id.</param>
        /// <param name="gridDetails">The grid details.</param>
        /// <param name="userId">The user id.</param>
        public static void F16071_DeleteJournalGridDetails(int templateId, string gridDetails, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                terraScanService.F16071_DeleteJournalGridDetails(templateId, gridDetails, userId);
            }
            else
            {
                Helper.F16071_DeleteJournalGridDetails(templateId, gridDetails, userId);
            }
        }
        #endregion


        #region F19062


        /// <summary>
        /// F14062_s the grid result details.
        /// </summary>
        /// <param name="ownerIds">The owner ids.</param>
        /// <param name="statementIds">The statement ids.</param>
        /// <param name="parcelIds">The parcel ids.</param>
        /// <param name="scheduleIds">The schedule ids.</param>
        /// <param name="stateIds">The state ids.</param>
        /// <param name="userId">The user id.</param>
        /// <returns></returns>
        public static F14062StatementPullListData F14062_GridResultDetails(string ownerIds,string statementIds,string parcelIds,string scheduleIds,string stateIds,int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string pullDetails;
                F14062StatementPullListData tempObject = new F14062StatementPullListData();
                pullDetails = terraScanService.F14062_GridResultDetails(ownerIds, statementIds, parcelIds, scheduleIds, stateIds, userId);
                tempObject.ReadXml(Utilities.SharedFunctions.XmlParser(pullDetails));
                return tempObject;

            }
            else
            {
                return Helper.F14062_GridResultDetails(ownerIds, statementIds, parcelIds, scheduleIds, stateIds, userId);
            }
        
		}

        /// <summary>
        /// F14062_s the get statement pull list details.
        /// </summary>
        /// <returns></returns>
        public static F14062StatementPullListData F14062_GetStatementPullListDetails()
        {
            if (WSHelper.IsOnLineMode)
            {
                string pullDetails;
                F14062StatementPullListData tempObject = new F14062StatementPullListData();
                pullDetails = terraScanService.F14062_GetStatementPullListDetails();
                tempObject.ReadXml(Utilities.SharedFunctions.XmlParser(pullDetails));
                return tempObject;

            }
            else
            {
                return Helper.F14062_GetStatementPullListDetails();
            }
        }

        /// <summary>
        /// F1407_s the get pull list status.
        /// </summary>
        /// <returns></returns>
	    public static F14062StatementPullListData F1407_GetPullListStatus()
        {
           if (WSHelper.IsOnLineMode)
           {
               string pullDetails;
               F14062StatementPullListData tempObject = new F14062StatementPullListData();
               pullDetails = terraScanService.F1407_GetPullListStatus();
               tempObject.ReadXml(Utilities.SharedFunctions.XmlParser(pullDetails));
               return tempObject;

           }
           else
           {
               return Helper.F1407_GetPullListStatus();
           }
        }

        /// <summary>
        /// F1407_s the type of the get pull list.
        /// </summary>
        /// <returns></returns>
        public static F14062StatementPullListData F1407_GetPullListType()
        {
            if (WSHelper.IsOnLineMode)
            {
                string pullDetails;
                F14062StatementPullListData tempObject = new F14062StatementPullListData();
                pullDetails = terraScanService.F1407_GetPullListType();
                tempObject.ReadXml(Utilities.SharedFunctions.XmlParser(pullDetails));
                return tempObject;

            }
            else
            {
                return Helper.F1407_GetPullListType();
            }
        }

        /// <summary>
        /// F14062_s the save grid details.
        /// </summary>
        /// <param name="pullListItems">The pull list items.</param>
        /// <param name="userId">The user id.</param>
        public static void F14062_SaveGridDetails(string pullListItems, int userId)
       {
           if (WSHelper.IsOnLineMode)
           {
               terraScanService.F14062_SaveGridDetails(pullListItems, userId);
           }
           else
           {
               Helper.F14062_SaveGridDetails(pullListItems, userId);
           }
	   }

       /// <summary>
       /// F14062_s the delete statement pull list.
       /// </summary>
       /// <param name="pullListItems">The pull list items.</param>
       /// <param name="userId">The user id.</param>
       /// <param name="isProcess">if set to <c>true</c> [is process].</param>
       /// <returns></returns>
       public static string F14062_DeleteStatementPullList(string pullListItems, int userId, bool isProcess)
       {
           if (WSHelper.IsOnLineMode)
           {
               return terraScanService.F14062_DeleteStatementPullList(pullListItems, userId, isProcess);
           }
           else
           {
             return  Helper.F14062_DeleteStatementPullList(pullListItems, userId, isProcess);
           }
       }

        #endregion

        #region F11024

       /// <summary>
       /// F11024_s the get multiple journal template details.
       /// </summary>
       /// <param name="jetTemplateID">The jet template ID.</param>
       /// <returns></returns>
        public static F11024MultiplejournalEntryData F11024_GetMultipleJournalTemplateDetails(int jetTemplateID)
        {
            if (WSHelper.IsOnLineMode)
            {
                string tempDetails;
                F11024MultiplejournalEntryData tempObject = new F11024MultiplejournalEntryData();
                tempDetails = terraScanService.F11024_GetMultipleJournalTemplateDetails(jetTemplateID);
                tempObject.ReadXml(Utilities.SharedFunctions.XmlParser(tempDetails));
                return tempObject;

            }
            else
            {
                return Helper.F11024_GetMultipleJournalTemplateDetails(jetTemplateID);
            }
        }


        /// <summary>
        /// F11024_s the save multiple journal template.
        /// </summary>
        /// <param name="transferDate">The transfer date.</param>
        /// <param name="userId">The user id.</param>
        /// <param name="description">The description.</param>
        /// <param name="journalTemplateDetails">The journal template details.</param>
        public static void F11024_SaveMultipleJournalTemplate(string transferDate, int userId, string description, string journalTemplateDetails)
        {
            if (WSHelper.IsOnLineMode)
            {
                terraScanService.F11024_SaveMultipleJournalTemplate(transferDate, userId, description, journalTemplateDetails);
            }
            else
            {
                 Helper.F11024_SaveMultipleJournalTemplate(transferDate,userId, description,journalTemplateDetails);
            }
        }

        /// <summary>
        /// F11024_s the search template details.
        /// </summary>
        /// <returns></returns>
        public static F11024MultiplejournalEntryData F11024_SearchTemplateDetails()
        {
            if (WSHelper.IsOnLineMode)
            {
                string tempDetails;
                F11024MultiplejournalEntryData tempObject = new F11024MultiplejournalEntryData();
                tempDetails = terraScanService.F11024_SearchTemplateDetails();
                tempObject.ReadXml(Utilities.SharedFunctions.XmlParser(tempDetails));
                return tempObject;
            }
            else
            {
               return Helper.F11024_SearchTemplateDetails();
            }
        }
        #endregion

        #region F29555
        /// <summary>
        /// F29555_s the deedtype combo box.
        /// </summary>
        /// <returns></returns>
        public static F29555PersonalPropertySaleData F29555_DeedtypeComboBox()
        {
            if (WSHelper.IsOnLineMode)
            {
                string tempDetails;
                F29555PersonalPropertySaleData tempObject = new F29555PersonalPropertySaleData();
                tempDetails = terraScanService.F29555_DeedtypeComboBox();
                tempObject.ReadXml(Utilities.SharedFunctions.XmlParser(tempDetails));
                return tempObject;
            }
            else
            {
                return Helper.F29555_DeedtypeComboBox();
            }
        }


        /// <summary>
        /// F29555_s the save transfer ownership.
        /// </summary>
        /// <param name="eventId">The event id.</param>
        /// <param name="userId">The user id.</param>
        /// <returns></returns>
        public static string F29555_SaveTransferOwnership(int eventId, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F29555_SaveTransferOwnership(eventId, userId);
            }
            else
            {
                return Helper.F29555_SaveTransferOwnership(eventId, userId);
            }
        }

        /// <summary>
        /// F29555_s the get personal sales owner.
        /// </summary>
        /// <param name="pSsaleId">The p ssale id.</param>
        /// <param name="ownerId">The owner id.</param>
        /// <param name="scheduleId">The schedule id.</param>
        /// <param name="userid">The userid.</param>
        /// <param name="scheduleString">The schedule string.</param>
        /// <returns></returns>
        public static F29555PersonalPropertySaleData F29555_GetPersonalSalesOwner(int? pSsaleId, int? ownerId, int? scheduleId, int userid, string scheduleString)
        {
            if (WSHelper.IsOnLineMode)
            {
                string tempDetails;
                F29555PersonalPropertySaleData tempObject = new F29555PersonalPropertySaleData();
                tempDetails = terraScanService.F29555_GetPersonalSalesOwner(pSsaleId, ownerId, scheduleId, userid, scheduleString);
                tempObject.ReadXml(Utilities.SharedFunctions.XmlParser(tempDetails));
                return tempObject;
            }
            else
            {
                return Helper.F29555_GetPersonalSalesOwner(pSsaleId, ownerId, scheduleId, userid, scheduleString);
            }
        }


        /// <summary>
        /// F29555_s the get sales scheduleand owners.
        /// </summary>
        /// <param name="scheduleId">The schedule id.</param>
        /// <param name="scheduleIds">The schedule ids.</param>
        /// <param name="pSsaleId">The p ssale id.</param>
        /// <param name="userid">The userid.</param>
        /// <returns></returns>
        public static F29555PersonalPropertySaleData F29555_GetSalesScheduleandOwners(int? scheduleId, string scheduleIds, int? pSsaleId, int userid)
        {
            if (WSHelper.IsOnLineMode)
            {
                string tempDetails;
                F29555PersonalPropertySaleData tempObject = new F29555PersonalPropertySaleData();
                tempDetails = terraScanService.F29555_GetSalesScheduleandOwners(scheduleId, scheduleIds, pSsaleId, userid);
                tempObject.ReadXml(Utilities.SharedFunctions.XmlParser(tempDetails));
                return tempObject;
            }
            else
            {
                return Helper.F29555_GetSalesScheduleandOwners(scheduleId, scheduleIds, pSsaleId, userid);
            }
        }

        /// <summary>
        /// F29555_s the schedule sale tracking.
        /// </summary>
        /// <param name="eventId">The event id.</param>
        /// <param name="userid">The userid.</param>
        /// <returns></returns>
        public static F29555PersonalPropertySaleData F29555_ScheduleSaleTracking(int eventId, int userid)
        {
            if (WSHelper.IsOnLineMode)
            {
                string tempDetails;
                F29555PersonalPropertySaleData tempObject = new F29555PersonalPropertySaleData();
                tempDetails = terraScanService.F29555_ScheduleSaleTracking(eventId,userid);
                tempObject.ReadXml(Utilities.SharedFunctions.XmlParser(tempDetails));
                return tempObject;
            }
            else
            {
                return Helper.F29555_ScheduleSaleTracking(eventId, userid);
            }
        }

        /// <summary>
        /// F29555_s the save sales owner.
        /// </summary>
        /// <param name="pSaleId">The p sale id.</param>
        /// <param name="ownerDetails">The owner details.</param>
        /// <param name="userId">The user id.</param>
        public static void F29555_SaveSalesOwner(int pSaleId, string ownerDetails, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                terraScanService.F29555_SaveSalesOwner(pSaleId,ownerDetails, userId);
            }
            else
            {
                Helper.F29555_SaveSalesOwner(pSaleId, ownerDetails, userId);
            }
        }

        /// <summary>
        /// F29555_s the save sales schedule.
        /// </summary>
        /// <param name="pSaleId">The p sale id.</param>
        /// <param name="scheduleItems">The schedule items.</param>
        /// <param name="userId">The user id.</param>
        public static void F29555_SaveSalesSchedule(int pSaleId, string scheduleItems, int userId)
        {

            if (WSHelper.IsOnLineMode)
            {
                terraScanService.F29555_SaveSalesSchedule(pSaleId, scheduleItems, userId);
            }
            else
            {
                Helper.F29555_SaveSalesSchedule(pSaleId, scheduleItems, userId);
            }
        }

        /// <summary>
        /// F29555_s the save schedule sale tracking.
        /// </summary>
        /// <param name="eventId">The event id.</param>
        /// <param name="pSaleItems">The p sale items.</param>
        /// <param name="scheduleItems">The schedule items.</param>
        /// <param name="ownerDetails">The owner details.</param>
        /// <param name="userId">The user id.</param>
        /// <returns></returns>
        public static int F29555_SaveScheduleSaleTracking(int eventId, string pSaleItems, string scheduleItems, string ownerDetails, int userId)
        {

            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F29555_SaveScheduleSaleTracking(eventId, pSaleItems,scheduleItems,ownerDetails, userId);
            }
            else
            {
                return Helper.F29555_SaveScheduleSaleTracking(eventId, pSaleItems, scheduleItems, ownerDetails, userId);
            }
        }
        #endregion

        #region F2201

        /// <summary>
        /// F2201_s the get personal property description.
        /// </summary>
        /// <param name="code">The code.</param>
        /// <returns></returns>
        public static F2201CentrallyAssessedSearchData F2201_GetPersonalPropertyDescription(string code)
        {
            if (WSHelper.IsOnLineMode)
            {
                string tempDetails;
                F2201CentrallyAssessedSearchData tempObject = new F2201CentrallyAssessedSearchData();
                tempDetails = terraScanService.F2201_GetPersonalPropertyDescription(code);
                tempObject.ReadXml(Utilities.SharedFunctions.XmlParser(tempDetails));
                return tempObject;
            }
            else
            {
                return Helper.F2201_GetPersonalPropertyDescription(code);
            }
        }

        /// <summary>
        /// F2201_s the get personal property search.
        /// </summary>
        /// <param name="code">The code.</param>
        /// <param name="description">The description.</param>
        /// <returns></returns>
        public static F2201CentrallyAssessedSearchData F2201_GetPersonalPropertySearch(string code, string description)
        {
            if (WSHelper.IsOnLineMode)
            {
                string tempDetails;
                F2201CentrallyAssessedSearchData tempObject = new F2201CentrallyAssessedSearchData();
                tempDetails = terraScanService.F2201_GetPersonalPropertySearch(code, description);
                tempObject.ReadXml(Utilities.SharedFunctions.XmlParser(tempDetails));
                return tempObject;
            }
            else
            {
                return Helper.F2201_GetPersonalPropertySearch(code,description);
            }
        }

        #endregion

        #region F1406

        /// <summary>
        /// F2550_s the state of the get configured.
        /// </summary>
        /// <returns></returns>
        public static F2550TaxRollCorrectionData F2550_GetConfiguredState()
        {
            if (WSHelper.IsOnLineMode)
            {
                string tempDetails;
                F2550TaxRollCorrectionData tempObject = new F2550TaxRollCorrectionData();
                tempDetails = terraScanService.F2550_GetConfiguredState();
                tempObject.ReadXml(Utilities.SharedFunctions.XmlParser(tempDetails));
                return tempObject;
            }
            else
            {
                return Helper.F2550_GetConfiguredState();
            }
        }

        /// <summary>
        /// F1406_s the central assessed grid details.
        /// </summary>
        /// <param name="centralSearchXML">The central search XML.</param>
        /// <returns></returns>
        public static F1406CentralAssessedSearchData F1406_CentralAssessedGridDetails(string centralSearchXML)
        {
            if (WSHelper.IsOnLineMode)
            {
                string tempDetails;
                F1406CentralAssessedSearchData tempObject = new F1406CentralAssessedSearchData();
                tempDetails = terraScanService.F1406_CentralAssessedGridDetails(centralSearchXML);
                tempObject.ReadXml(Utilities.SharedFunctions.XmlParser(tempDetails));
                return tempObject;
            }
            else
            {
                return Helper.F1406_CentralAssessedGridDetails(centralSearchXML);
            }
        }

        /// <summary>
        /// F1406_s the load propert class combo.
        /// </summary>
        /// <returns></returns>
        public static F1406CentralAssessedSearchData F1406_LoadPropertClassCombo()
        {
            if (WSHelper.IsOnLineMode)
            {
                string tempDetails;
                F1406CentralAssessedSearchData tempObject = new F1406CentralAssessedSearchData();
                tempDetails = terraScanService.F1406_LoadPropertClassCombo();
                tempObject.ReadXml(Utilities.SharedFunctions.XmlParser(tempDetails));
                return tempObject;
            }
            else
            {
                return Helper.F1406_LoadPropertClassCombo();
            }
        }
        #endregion

        #region F1203


        /// <summary>
        /// F1203s the load due date management.
        /// </summary>
        /// <returns></returns>
        public static F1203DueDateManagementData F1203LoadDueDateManagement()
        {
            if (WSHelper.IsOnLineMode)
            {
                string tempDetails;
                F1203DueDateManagementData tempObject = new F1203DueDateManagementData();
                tempDetails = terraScanService.F1203LoadDueDateManagement();
                tempObject.ReadXml(Utilities.SharedFunctions.XmlParser(tempDetails));
                return tempObject;
            }
            else
            {
                return Helper.F1203LoadDueDateManagement();
            }
        }


        /// <summary>
        /// F1203_s the save due date management.
        /// </summary>
        /// <param name="userId">The user id.</param>
        /// <param name="dueDateXML">The due date XML.</param>
        public static void F1203_SaveDueDateManagement(int userId, string dueDateXML)
        {
            if (WSHelper.IsOnLineMode)
            {
                terraScanService.F1203_SaveDueDateManagement(userId,dueDateXML);
            }
            else
            {
                Helper.F1203_SaveDueDateManagement(userId, dueDateXML);
            }
        }
        #endregion

        #region F29636

        /// <summary>
        /// F29636_s the get BOE details.
        /// </summary>
        /// <param name="eventId">The event id.</param>
        /// <returns></returns>
        public static F29636BOEData F29636_GetBOEDetails(int eventId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string tempDetails;
                F29636BOEData tempObject = new F29636BOEData();
                tempDetails = terraScanService.F29636_GetBOEDetails(eventId);
                tempObject.ReadXml(Utilities.SharedFunctions.XmlParser(tempDetails));
                return tempObject;
            }
            else
            {
                return Helper.F29636_GetBOEDetails(eventId);
            }
        }

        /// <summary>
        /// F29636_s the BOE type details.
        /// </summary>
        /// <returns></returns>
        public static F29636BOEData F29636_BOETypeDetails()
        {
            if (WSHelper.IsOnLineMode)
            {
                string tempDetails;
                F29636BOEData tempObject = new F29636BOEData();
                tempDetails = terraScanService.F29636_BOETypeDetails();
                tempObject.ReadXml(Utilities.SharedFunctions.XmlParser(tempDetails));
                return tempObject;
            }
            else
            {
                return Helper.F29636_BOETypeDetails();
            }
        }


        /// <summary>
        /// F29636_s the save BOE details.
        /// </summary>
        /// <param name="boeElemenets">The boe elemenets.</param>
        /// <param name="boeValues">The boe values.</param>
        /// <param name="userId">The user id.</param>
        public static void F29636_SaveBOEDetails(string boeElemenets, string boeValues, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                terraScanService.F29636_SaveBOEDetails(boeElemenets, boeValues, userId);
            }
            else
            {
                Helper.F29636_SaveBOEDetails(boeElemenets, boeValues, userId);
            }
        }

        /// <summary>
        /// F29636_s the push BOE details.
        /// </summary>
        /// <param name="boeId">The boe id.</param>
        /// <param name="userId">The user id.</param>
        /// <returns></returns>
        public static string F29636_PushBOEDetails(int boeId, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F29636_PushBOEDetails(boeId, userId);
            }
            else
            {
                return Helper.F29636_PushBOEDetails(boeId, userId);
            }
        }

        /// <summary>
        /// F29636_s the delete BOE details.
        /// </summary>
        /// <param name="boeId">The boe id.</param>
        /// <param name="userId">The user id.</param>
        public static void F29636_DeleteBOEDetails(int boeId, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                terraScanService.F29636_DeleteBOEDetails(boeId, userId);
            }
            else
            {
                Helper.F29636_DeleteBOEDetails(boeId, userId);
            }
        }

        #endregion


        #region F9105

        /// <summary>
        /// F9105_s the name of the execute copy.
        /// </summary>
        /// <param name="copyData">The copy data.</param>
        /// <param name="userId">The user id.</param>
        /// <returns></returns>
        public static int F9105_ExecuteCopyName(string copyData, int userId)
        {

            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F9105_ExecuteCopyName(copyData, userId);
            }
            else
            {
               return Helper.F9105_ExecuteCopyName(copyData, userId);
            }
            
        }
        #endregion

        #region PermitImportTemplate

        #region Get
        /// <summary>
        /// Gets the permit import template.
        /// </summary>
        /// <param name="templateId">The template id.</param>
        /// <returns>DataSet With permit Import Template Details</returns>
        public static F23200PermitImportTemplate GetPermitImportTemplate(int templateId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string permitImportTemplateXml;
                F23200PermitImportTemplate permitImpotTemplateData = new F23200PermitImportTemplate();
                permitImportTemplateXml = terraScanService.GetPermitImportTemplate(templateId);
                permitImpotTemplateData.ReadXml(Utilities.SharedFunctions.XmlParser(permitImportTemplateXml));
                return permitImpotTemplateData;
            }
            else
            {
                return Helper.GetPermitImportTemplate(templateId);
            }
        }
        #endregion

       

        #region List PermitImportFileType
        /// <summary>
        /// Lists the type of the permit import file.
        /// </summary>
        /// <returns>The dataset containing the Permit Import FileType</returns>
        public static F23200PermitImportTemplate ListPermitImportFileType()
        {
            if (WSHelper.IsOnLineMode)
            {
                string permitImportXml;
                F23200PermitImportTemplate permitImportFileData = new F23200PermitImportTemplate();
                permitImportXml = terraScanService.ListPermitImportFileType();
                permitImportFileData.ReadXml(Utilities.SharedFunctions.XmlParser(permitImportXml));
                return permitImportFileData;
            }
            else
            {
                return Helper.ListPermitImportFileType();
            }
        }

        #endregion

        #region Save Permit Import Template


        public static int SavePermitImportTemplate(int? templateId, string permitImportXML, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.SavePermitImportTemplate(templateId, permitImportXML, userId);
            }
            else
            {
                return Helper.SavePermitImportTemplate(templateId, permitImportXML, userId);
            }
        }

        #endregion

        #region Delete Permit Import Template

        /// <summary>
        /// Deletes the permit import template.
        /// </summary>
        /// <param name="templateId">The template id.</param>
        /// <param name="userId">UserID</param>
        /// <returns>The return value specifying status of the delete action.</returns>
        public static string DeletePermiTemplate(int templateId, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.DeletePermiTemplate(templateId, userId);
            }
            else
            {
                return Helper.DeletePermitTemplate(templateId, userId);
            }
        }
        #endregion

        #endregion

        #region IncomeSourceDetails

        #region Get
        /// <summary>
        /// Gets the income source detail.
        /// </summary>
        /// <param name="IncomeSourceID">The IncomeSourceID.</param>
        /// <returns>DataSet With income source Details</returns>
        public static F36090IncomeSourceData GetIncomeSourceDetail(int IncomeSourceID)
        {
            if (WSHelper.IsOnLineMode)
            {
                string IncomeSourceXml;
                F36090IncomeSourceData IncomeSourceData = new F36090IncomeSourceData();
                IncomeSourceXml = terraScanService.GetIncomeSourceDetail(IncomeSourceID);
                IncomeSourceData.ReadXml(Utilities.SharedFunctions.XmlParser(IncomeSourceXml));
                return IncomeSourceData;
            }
            else
            {
                return Helper.GetIncomeSourceDetail(IncomeSourceID);
            }
        }
        #endregion


        #region List UnitTerms
        /// <summary>
        /// Lists the type of the Unit Terms.
        /// </summary>
        /// <returns>The dataset containing the Unit Terms</returns>
        public static F36090IncomeSourceData ListUnitTerms()
        {
            if (WSHelper.IsOnLineMode)
            {
                string incomesourceXml;
                F36090IncomeSourceData incomesourceFileData = new F36090IncomeSourceData();
                incomesourceXml = terraScanService.ListUnitTerms();
                incomesourceFileData.ReadXml(Utilities.SharedFunctions.XmlParser(incomesourceXml));
                return incomesourceFileData;
            }
            else
            {
                return Helper.ListUnitTerms();
            }
        }

        #endregion

        #region Save Income Source Detail


        public static int SaveIncomeSourceDetails(int? IncomeSourceID, string IncomeSourceItems, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.SaveIncomeSourceDetails(IncomeSourceID, IncomeSourceItems, userId);
            }
            else
            {
                return Helper.SaveIncomeSourceDetails(IncomeSourceID, IncomeSourceItems, userId);
            }
        }

        #endregion

        #region Delete Permit Import Template

        /// <summary>
        /// Deletes the delete income source detail.
        /// </summary>
        /// <param name="templateId">The IncomeSourceID id.</param>
        /// <param name="userId">UserID</param>
        /// <returns>The return value specifying status of the delete action.</returns>
        public static string DeleteIncomeSource(int IncomeSourceID, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.DeleteIncomeSource(IncomeSourceID, userId);
            }
            else
            {
                return Helper.DeleteIncomeSource(IncomeSourceID, userId);
            }
        }
        #endregion

        #endregion

        #region MADImportTemplate

        #region Get
        /// <summary>
        /// Gets the MAD import template.
        /// </summary>
        /// <param name="templateId">The template id.</param>
        /// <returns>DataSet With MAD Import Template Details</returns>
        public static F23300MADImportTemplate GetMADImportTemplate(int templateId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string MADImportTemplateXml;
                F23300MADImportTemplate MADImpotTemplateData = new F23300MADImportTemplate();
                MADImportTemplateXml = terraScanService.GetMADImportTemplate(templateId);
                MADImpotTemplateData.ReadXml(Utilities.SharedFunctions.XmlParser(MADImportTemplateXml));
                return MADImpotTemplateData;
            }
            else
            {
                return Helper.GetMADImportTemplate(templateId);
            }
        }
        #endregion

        #region List MADImportFileType
        /// <summary>
        /// Lists the type of the MAD import file.
        /// </summary>
        /// <returns>The dataset containing the MAD Import FileType</returns>
        public static F23300MADImportTemplate ListMADImportFileType()
        {
            if (WSHelper.IsOnLineMode)
            {
                string MADImportXml;
                F23300MADImportTemplate MADImportFileData = new F23300MADImportTemplate();
                MADImportXml = terraScanService.ListMADImportFileType();
                MADImportFileData.ReadXml(Utilities.SharedFunctions.XmlParser(MADImportXml));
                return MADImportFileData;
            }
            else
            {
                return Helper.ListMADImportFileType();
            }
        }

        #endregion

        #region Save MAD Import Template


        public static int SaveMADImportTemplate(int? templateId, string madImportXML, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.SaveMADImportTemplate(templateId, madImportXML, userId);
            }
            else
            {
                return Helper.SaveMADImportTemplate(templateId, madImportXML, userId);
            }
        }

        #endregion

        #region Delete MAD Import Template

        /// <summary>
        /// Deletes the MAD import template.
        /// </summary>
        /// <param name="templateId">The template id.</param>
        /// <param name="userId">UserID</param>
        /// <returns>The return value specifying status of the delete action.</returns>
        public static string DeleteMADTemplate(int templateId, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.DeleteMADTemplate(templateId, userId);
            }
            else
            {
                return Helper.DeleteMADTemplate(templateId, userId);
            }
        }
        #endregion

        #endregion

        #region Permit Import F28210
        /// <summary>
        /// F28210_s the execute import.
        /// </summary>
        /// <param name="importId">The import id.</param>
        /// <param name="importXML">The import XML.</param>
        /// <param name="userId">The user id.</param>
        /// <param name="isProcess">if set to <c>true</c> [is process].</param>
        /// <returns></returns>
        public static string F28210_ExecuteImport(int importId, string importXML, int userId, bool isProcess)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F28210_ExecuteImport(importId, importXML, userId, isProcess);
            }
            else
            {
                return Helper.F28210_ExecuteImport(importId, importXML, userId, isProcess);
            }
        }

        /// <summary>
        /// F28210_s the Permit Import details.
        /// </summary>
        /// <param name="importId">The import id.</param>
        /// <returns></returns>
        public static F28210PermitImport F28210_PermitImportDetails(int importId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string permitDetails;
                F28210PermitImport permitObj = new F28210PermitImport();
                permitDetails = terraScanService.F28210_PermitImportDetails(importId);
                permitObj.ReadXml(Utilities.SharedFunctions.XmlParser(permitDetails));
                return permitObj;
            }
            else
            {
                return Helper.F28210_PermitImportDetails(importId);
            }
        }


        /// <summary>
        /// F28210_s the deleteimport details.
        /// </summary>
        /// <param name="importId">The import id.</param>
        /// <param name="userId">The user id.</param>
        public static void F28210_DeleteimportDetails(int importId, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                terraScanService.F28210_DeletetemplateDetails(importId, userId);
            }
            else
            {
                Helper.F28210_DeletePermitImportDetails(importId, userId);
            }
        }

        /// <summary>
        /// F28210_s the insert permit import details.
        /// </summary>
        /// <param name="importId">The import id.</param>
        /// <param name="importXML">The import XML.</param>
        /// <param name="userId">The user id.</param>
        /// <returns></returns>
        public static int F28210_InsertImportPermitDetails(int? importId, string importXML, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F28210_InsertImportPermitDetails(importId, importXML, userId);
            }
            else
            {
                return Helper.F28210_InsertImportPermitDetails(importId, importXML, userId);
            }
        }
        /// <summary>
        /// F28210_s the execute check for errors.
        /// </summary>
        /// <param name="importId">The import id.</param>
        /// <param name="userId">The user id.</param>
        public static void F28210_ExecuteCheckForErrors(int importId, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                terraScanService.F28210_ExecuteCheckForErrors(importId, userId);
            }
            else
            {
                Helper.F28210_ExecuteCheckForErrors(importId, userId);
            }
        }
        /// <summary>
        /// F28210_s the create import records.
        /// </summary>
        /// <param name="importId">The import id.</param>
        /// <param name="userId">The user id.</param>
        /// <param name="isProcess">if set to <c>true</c> [is process].</param>
        /// <returns></returns>
        public static string F28210_CreateImportRecords(int importId, int userId, bool isProcess)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F28210_CreateImportRecords(importId, userId, isProcess);
            }
            else
            {
                return Helper.F28210_CreateImportRecords(importId, userId, isProcess);
            }
        }
        #endregion

        #region Permit Import Template Selection

        /// <summary>
        /// Gets the permit Import Template Details 
        /// </summary>
        /// <returns> The dataset containing the list of permit Import Template Details.</returns>
        public static ListPermitImportTemplateData GetPermitImportTemplateDetails(string TemplateName,string Description,string FileType)
        {
            if (WSHelper.IsOnLineMode)
            {
                string permitImportTemplateSelectDataXml;
                ListPermitImportTemplateData permitImportTemplateSelectData = new ListPermitImportTemplateData();
                permitImportTemplateSelectDataXml = terraScanService.GetPermitImportTemplateDetails(TemplateName,Description,FileType);
                permitImportTemplateSelectData.ReadXml(Utilities.SharedFunctions.XmlParser(permitImportTemplateSelectDataXml));
                return permitImportTemplateSelectData;
            }
            else
            {
                return Helper.GetPermitImportTemplateDetails(TemplateName, Description, FileType);
            }
        }

        #endregion

        #region MAD Import F28310

        /// <summary>
        /// F28310_s the execute import.
        /// </summary>
        /// <param name="importId">The import id.</param>
        /// <param name="importXML">The import XML.</param>
        /// <param name="userId">The user id.</param>
        /// <param name="isProcess">if set to <c>true</c> [is process].</param>
        /// <returns></returns>
        public static string F28310_ExecuteImport(int importId, string importXML, int userId, bool isProcess)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F28310_ExecuteImport(importId, importXML, userId, isProcess);
            }
            else
            {
                return Helper.F28310_ExecuteImport(importId, importXML, userId, isProcess);
            }
        }

        /// <summary>
        /// F28310_s the MAD Import details.
        /// </summary>
        /// <param name="importId">The import id.</param>
        /// <returns></returns>
        public static F28310MADImport F28310_MADImportDetails(int importId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string MADDetails;
                F28310MADImport MADObj = new F28310MADImport();
                MADDetails = terraScanService.F28310_MADImportDetails(importId);
                MADObj.ReadXml(Utilities.SharedFunctions.XmlParser(MADDetails));
                return MADObj;
            }
            else
            {
                return Helper.F28310_MADImportDetails(importId);
            }
        }


        /// <summary>
        /// F28310_s the deleteimport details.
        /// </summary>
        /// <param name="importId">The import id.</param>
        /// <param name="userId">The user id.</param>
        public static void F28310_DeleteMADImportDetails(int importId, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                terraScanService.F28310_DeleteMADImportDetails(importId, userId);
            }
            else
            {
                Helper.F28310_DeleteMADImportDetails(importId, userId);
            }
        }

        /// <summary>
        /// F28310_s the insert MAD import details.
        /// </summary>
        /// <param name="importId">The import id.</param>
        /// <param name="importXML">The import XML.</param>
        /// <param name="userId">The user id.</param>
        /// <returns></returns>
        public static int F28310_InsertImportMADDetails(int? importId, string importXML, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F28310_InsertImportMADDetails(importId, importXML, userId);
            }
            else
            {
                return Helper.F28310_InsertImportMADDetails(importId, importXML, userId);
            }
        }
        /// <summary>
        /// F28310_s the execute check for errors.
        /// </summary>
        /// <param name="importId">The import id.</param>
        /// <param name="userId">The user id.</param>
        public static void F28310_ExecuteCheckForErrors(int importId, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                terraScanService.F28310_ExecuteCheckForErrors(importId, userId);
            }
            else
            {
                Helper.F28310_ExecuteCheckForErrors(importId, userId);
            }
        }
        /// <summary>
        /// F28310_s the create import records.
        /// </summary>
        /// <param name="importId">The import id.</param>
        /// <param name="userId">The user id.</param>
        /// <param name="isProcess">if set to <c>true</c> [is process].</param>
        /// <returns></returns>
        public static string F28310_CreateImportRecords(int importId, int userId, bool isProcess)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F28310_CreateImportRecords(importId, userId, isProcess);
            }
            else
            {
                return Helper.F28310_CreateImportRecords(importId, userId, isProcess);
            }
        }

        #region List DistrictType
        /// <summary>
        /// Lists the type of the District import file.
        /// </summary>
        /// <returns>The dataset containing the District File Type</returns>
        public static F28310MADImport ListDistrictType()
        {
            if (WSHelper.IsOnLineMode)
            {
                string DistrictImportXml;
                F28310MADImport DistrictFileData = new F28310MADImport();
                DistrictImportXml = terraScanService.ListDistrictType();
                DistrictFileData.ReadXml(Utilities.SharedFunctions.XmlParser(DistrictImportXml));
                return DistrictFileData;
            }
            else
            {
                return Helper.ListDistrictType();
            }
        }

        #endregion

        #endregion

        #region MAD Import Template Selection

        /// <summary>
        /// Gets the MAD Import Template Details 
        /// </summary>
        /// <returns> The dataset containing the list of MAD Import Template Details.</returns>
        public static ListMADimportTemplateData GetMADImportTemplateDetails(string TemplateName, string Description, string FileType)
        {
            if (WSHelper.IsOnLineMode)
            {
                string MADImportTemplateSelectDataXml;
                ListMADimportTemplateData MADImportTemplateSelectData = new ListMADimportTemplateData();
                MADImportTemplateSelectDataXml = terraScanService.GetMADImportTemplateDetails(TemplateName, Description, FileType);
                MADImportTemplateSelectData.ReadXml(Utilities.SharedFunctions.XmlParser(MADImportTemplateSelectDataXml));
                return MADImportTemplateSelectData;
            }
            else
            {
                return Helper.GetMADImportTemplateDetails(TemplateName, Description, FileType);
            }
        }

        #endregion

        #region Income Sources Approach
        /// <summary>
        /// Get Income Sources
        /// </summary>
        /// <param name="valueSliceId">value slice id</param>
        /// <returns>Income Sources</returns>
        public static F36091IncomeApproachData F36091_GetIncomeSources(int valueSliceId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string IncomeApproachDataXml;
                F36091IncomeApproachData IncomeAppraochSelectData = new F36091IncomeApproachData();
                IncomeApproachDataXml = terraScanService.F36091_GetIncomeSources(valueSliceId);
                IncomeAppraochSelectData.ReadXml(Utilities.SharedFunctions.XmlParser(IncomeApproachDataXml));
                return IncomeAppraochSelectData;
            }
            else
            {
                return Helper.F36091_GetIncomeSources(valueSliceId);
            }

        }


        /// <summary>
        /// F36091_SaveIncomeSourceDetails the insert Income Approach details.
        /// </summary>
        /// <param name="valueSliceId">The valueSliceId id.</param>
        /// <param name="SourceGridDetails">The SourceGridDetails XML.</param>
        /// <param name="IncomeApproachDetails">The IncomeApproachDetails XML.</param>
        /// <param name="userId">The user id.</param>
        /// <returns></returns>
        public static void F36091_SaveIncomeSourceDetails(int valueSliceId, string SourceGridDetails, string IncomeApproachDetails, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                 terraScanService.F36091_SaveIncomeSourceDetails(valueSliceId, SourceGridDetails,IncomeApproachDetails, userId);
            }
            else
            {
                 Helper.F36091_SaveIncomeSourceDetails(valueSliceId, SourceGridDetails,IncomeApproachDetails, userId);
            }
        }

        #region F36091 GetSourceCode Details

        /// <summary>
        /// List F36091 Source Details
        /// </summary>
        /// <param name="valueSliceId">The value slice id.</param>
        /// <returns>getSourceDetails</returns>
        public static F36091IncomeApproachData F36091_ListSourceDetails(int valueSliceId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string cropDetails;
                F36091IncomeApproachData getSourceDetails = new F36091IncomeApproachData();
                cropDetails = terraScanService.F36091_ListSourceDetails(valueSliceId);
                getSourceDetails.ReadXml(Utilities.SharedFunctions.XmlParser(cropDetails));
                return getSourceDetails;
            }
            else
            {
                return Helper.F36091_ListSourceDetails(valueSliceId);
            }
        }

        #endregion F36091 Source Details

        #region F36091 GetSourceCode Details

        /// <summary>
        /// List F36091 Income Approach Details
        /// </summary>
        /// <param name="valueSliceId">The value slice id.</param>
        /// <returns>getSourceDetails</returns>
        public static F36091IncomeApproachData F36091_ListApproachValues(int incomeSourceID, decimal Units, decimal ContractPerUnit, out decimal contract, out decimal marketperunit, out decimal market)
        {
            if (WSHelper.IsOnLineMode)
            {
                string approachDetails;
                F36091IncomeApproachData getApproachDetails = new F36091IncomeApproachData();
                approachDetails = terraScanService.F36091_ListApproachValues(out contract, out marketperunit, out market,incomeSourceID, Units, ContractPerUnit );
                getApproachDetails.ReadXml(Utilities.SharedFunctions.XmlParser(approachDetails));
                return getApproachDetails;
            }
            else
            {
                return Helper.F36091_ListApproachValues(incomeSourceID, Units, ContractPerUnit, out contract, out marketperunit, out market);
            }
        }

        #endregion F36091 Approach Details

        #region F36091 GetSourceAppraoch Code Details

        /// <summary>
        /// List F36091 Income GetSourceAppraoch Item Details
        /// </summary>
        /// <param name="IncomeApproachDetails">IncomeApproachDetails.</param>
        /// <returns>getSourceDetails</returns>
        public static F36091IncomeApproachData F36091_GetIncomeApproachItemDetails(string IncomeApproachDetails)
        {
            if (WSHelper.IsOnLineMode)
            {
                string approachitemDetails;
                F36091IncomeApproachData getApproachDetails = new F36091IncomeApproachData();
                approachitemDetails = terraScanService.F36091_GetIncomeApproachItemDetails(IncomeApproachDetails);
                getApproachDetails.ReadXml(Utilities.SharedFunctions.XmlParser(approachitemDetails));
                return getApproachDetails;
            }
            else
            {
                return Helper.F36091_GetIncomeApproachItemDetails(IncomeApproachDetails);
            }
        }

        #endregion F36091 GetSourceAppraoch Item Details

        #region F36091_DeleteIncomeSource

        /// <summary>
        /// F36091_s the delete income source.
        /// </summary>
        /// <param name="incomeIds">The income source ids.</param>
        /// <param name="userId">The user id.</param>
        public static void F36091_DeleteIncomeSource(string incomesourceIds, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                terraScanService.F36091_DeleteIncomeSource(incomesourceIds, userId);
            }
            else
            {
                Helper.F36091_DeleteIncomeSource(incomesourceIds, userId);
            }
        }

        #endregion F36091_DeleteIncomeSource

        #endregion

        #region F1557

        /// <summary>
        /// Get Manage Payment
        /// </summary>
        /// <param name="valueSliceId">value slice id</param>
        /// <returns>Income Sources</returns>
        public static F1557PayamentManagementData GetPaymentManagement(int ReceiptID)
        {
            if (WSHelper.IsOnLineMode)
            {
                string ManagePaymentDataXml;
                F1557PayamentManagementData ManagePaymentSelectData = new F1557PayamentManagementData();
                ManagePaymentDataXml = terraScanService.GetPaymentManagement(ReceiptID);
                ManagePaymentSelectData.ReadXml(Utilities.SharedFunctions.XmlParser(ManagePaymentDataXml));
                return ManagePaymentSelectData;
            }
            else
            {
                return Helper.GetPaymentManagement(ReceiptID);
            }

        }

        /// <summary>
        /// F1557_s the Insert payment.
        /// </summary>
        /// <param name="receiptPayment">The receipt payment.</param>
        /// <param name="userId">UserID</param>
        public static void F1557_InsertPayment(string receiptPayment, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                terraScanService.F1557_InsertPayment(receiptPayment, userId);
            }
            else
            {
                Helper.F1557_InsertPayment(receiptPayment, userId);
            }
        }
        /// <summary>
        /// F1557_s the Update payment.
        /// </summary>
        /// <param name="receiptPayment">The receipt payment.</param>
        /// <param name="userId">UserID</param>
        public static void F1557_UpdatePayment(string receiptPayment, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                terraScanService.F1557_UpdatePayment(receiptPayment, userId);
            }
            else
            {
                Helper.F1557_UpdatePayment(receiptPayment, userId);
            }
        }

        /// <summary>
        /// F1557_s the Delete payment.
        /// </summary>
        /// <param name="PaymentIDs">PaymentIDs.</param>
        /// <param name="userId">UserID</param>
        public static void F1557_DeletePayment(string PaymentIDs, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                terraScanService.F1557_DeletePayment(PaymentIDs, userId);
            }
            else
            {
                Helper.F1557_DeletePaymentIds(PaymentIDs, userId);
            }
        }
       

        #endregion

        #region Snapshot Template 

        #region Get
        /// <summary>
        /// Gets the Snapshot import template.
        /// </summary>
        /// <param name="templateId">The template id.</param>
        /// <returns>DataSet With Snapshot Import Template Details</returns>
        public static F23500SnapshotTemplate GetSnapshotImportTemplate(int templateId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string SnapshotImportTemplateXml;
                F23500SnapshotTemplate SnapshotImpotTemplateData = new F23500SnapshotTemplate();
                SnapshotImportTemplateXml = terraScanService.GetSnapshotImportTemplate(templateId);
                SnapshotImpotTemplateData.ReadXml(Utilities.SharedFunctions.XmlParser(SnapshotImportTemplateXml));
                return SnapshotImpotTemplateData;
            }
            else
            {
                return Helper.GetSnapshotImportTemplate(templateId);
            }
        }
        #endregion

        #region List SnapshotImportFileType
        /// <summary>
        /// Lists the type of the Snapshot import file.
        /// </summary>
        /// <returns>The dataset containing the Snapshot Import FileType</returns>
        public static F23500SnapshotTemplate ListSnapshotImportFileType()
        {
            if (WSHelper.IsOnLineMode)
            {
                string SnapshotImportXml;
                F23500SnapshotTemplate SnapshotImportFileData = new F23500SnapshotTemplate();
                SnapshotImportXml = terraScanService.ListSnapshotImportFileType();
                SnapshotImportFileData.ReadXml(Utilities.SharedFunctions.XmlParser(SnapshotImportXml));
                return SnapshotImportFileData;
            }
            else
            {
                return Helper.ListSnapshotImportFileType();
            }
        }

        #endregion

        #region Save Snapshot Import Template


        public static int SaveSnapshotImportTemplate(int? templateId, string snapshotImportXML, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.SaveSnapshotImportTemplate(templateId, snapshotImportXML, userId);
            }
            else
            {
                return Helper.SaveSnapshotImportTemplate(templateId, snapshotImportXML, userId);
            }
        }

        #endregion

        #region Delete Snapshot Import Template

        /// <summary>
        /// Deletes the Snapshot import template.
        /// </summary>
        /// <param name="templateId">The template id.</param>
        /// <param name="userId">UserID</param>
        /// <returns>The return value specifying status of the delete action.</returns>
        public static string DeleteSnapshotTemplate(int templateId, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.DeleteSnapshotTemplate(templateId, userId);
            }
            else
            {
                return Helper.DeleteSnapshotTemplate(templateId, userId);
            }
        }
        #endregion

        #endregion Snapshot

        #region Snapshot Import F28510
        /// <summary>
        /// F28510_s the execute import.
        /// </summary>
        /// <param name="importId">The import id.</param>
        /// <param name="importXML">The import XML.</param>
        /// <param name="userId">The user id.</param>
        /// <param name="isProcess">if set to <c>true</c> [is process].</param>
        /// <returns></returns>
        public static string F28510_ExecuteImport(int importId, string importXML, int userId, bool isProcess)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F28510_ExecuteImport(importId, importXML, userId, isProcess);
            }
            else
            {
                return Helper.F28510_ExecuteImport(importId, importXML, userId, isProcess);
            }
        }

        /// <summary>
        /// F28210_s the Permit Import details.
        /// </summary>
        /// <param name="importId">The import id.</param>
        /// <returns></returns>
        public static F23510SnapshotImport F28510_SnapshotImportDetails(int importId)
        {
            if (WSHelper.IsOnLineMode)
            {
                string snapshotDetails;
                F23510SnapshotImport snapshotObj = new F23510SnapshotImport();
                snapshotDetails = terraScanService.F28510_SnapshotImportDetails(importId);
                snapshotObj.ReadXml(Utilities.SharedFunctions.XmlParser(snapshotDetails));
                return snapshotObj;
            }
            else
            {
                return Helper.F28510_SnapshotImportDetails(importId);
            }
        }


        /// <summary>
        /// F28510_s the deleteimport details.
        /// </summary>
        /// <param name="importId">The import id.</param>
        /// <param name="userId">The user id.</param>
        public static void F28510_DeleteSnapshotImportDetails(int importId, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                terraScanService.F28510_DeleteSnapshotImportDetails(importId, userId);
            }
            else
            {
                Helper.F28510_DeleteSnapshotImportDetails(importId, userId);
            }
        }

        /// <summary>
        /// F28510_s the insert Snapshot import details.
        /// </summary>
        /// <param name="importId">The import id.</param>
        /// <param name="importXML">The import XML.</param>
        /// <param name="userId">The user id.</param>
        /// <returns></returns>
        public static int F28510_InsertImportSnapshotDetails(int? importId, string importXML, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F28510_InsertImportSnapshotDetails(importId, importXML, userId);
            }
            else
            {
                return Helper.F28510_InsertImportSnapshotDetails(importId, importXML, userId);
            }
        }
        /// <summary>
        /// F28510_s the execute check for errors.
        /// </summary>
        /// <param name="importId">The import id.</param>
        /// <param name="userId">The user id.</param>
        public static void F28510_ExecuteCheckForErrors(int importId, int userId)
        {
            if (WSHelper.IsOnLineMode)
            {
                terraScanService.F28510_ExecuteCheckForErrors(importId, userId);
            }
            else
            {
                Helper.F28510_ExecuteCheckForErrors(importId, userId);
            }
        }
        /// <summary>
        /// F28510_s the create import records.
        /// </summary>
        /// <param name="importId">The import id.</param>
        /// <param name="userId">The user id.</param>
        /// <param name="isProcess">if set to <c>true</c> [is process].</param>
        /// <returns></returns>
        public static string F28510_CreateImportRecords(int importId, int userId, bool isProcess)
        {
            if (WSHelper.IsOnLineMode)
            {
                return terraScanService.F28510_CreateImportRecords(importId, userId, isProcess);
            }
            else
            {
                return Helper.F28510_CreateImportRecords(importId, userId, isProcess);
            }
        }
        #endregion

        #region Snapshot Import Template Selection

        /// <summary>
        /// Gets the snapshot Import Template Details 
        /// </summary>
        /// <returns> The dataset containing the list of snapshot Import Template Details.</returns>
        public static ListSnapshotImportTemplateData GetSnapshotImportTemplateDetails(string TemplateName, string Description, string FileType)
        {
            if (WSHelper.IsOnLineMode)
            {
                string snapshotImportTemplateSelectDataXml;
                ListSnapshotImportTemplateData snapshotImportTemplateSelectData = new ListSnapshotImportTemplateData();
                snapshotImportTemplateSelectDataXml = terraScanService.GetSnapshotImportTemplateDetails(TemplateName, Description, FileType);
                snapshotImportTemplateSelectData.ReadXml(Utilities.SharedFunctions.XmlParser(snapshotImportTemplateSelectDataXml));
                return snapshotImportTemplateSelectData;
            }
            else
            {
                return Helper.GetSnapshotImportTemplateDetails(TemplateName, Description, FileType);
            }
        }

        #endregion
    }
}

