//----------------------------------------------------------------------------------------
// patterns & practices - Smart Client Software Factory - Guidance Package
//
// This file was generated by this guidance package as part of the solution template
//
// The ShellApplication class is the entry point for your application. ShellApplication 
// contains the Main method and derives from FormShellApplication base class which is
// provided by the Composite UI Application Block (CAB).
// 
// Note that the RootWorkItem is the default WorkItem provided by CAB.
// 
// It also implements basic exception handling using Enterprise Library Exception
// Handling Application Block.
//
// The shell in this Guidance Package (ShellForm) has a DeckWorkspace called LayoutWorkspace
// The default layout is defined in a separate module called Infrastructure.Layout. This module
// has a usercontorl ShellLayoutView which has a left and right workspace.
//
// For more information see: 
// ms-help://MS.VSCC.v90/MS.VSIPCC.v90/ms.practices.scsf.2008apr/SCSF/html/03-01-010-How_to_Create_Smart_Client_Solutions.htm
//
// Latest version of this Guidance Package: http://go.microsoft.com/fwlink/?LinkId=62182
//----------------------------------------------------------------------------------------

namespace TerraScan.UI
{
    #region namespace

    using System;
    using System.Windows.Forms;
    using TerraScan.Infrastructure.Library;
    using Microsoft.Practices.CompositeUI;
    using Microsoft.Practices.EnterpriseLibrary.ExceptionHandling;
    using TerraScan.Common;
    using System.Threading;
    using System.ComponentModel;

    #endregion namespace

    /// <summary>
    /// Main application entry point class.
    /// Note that the class derives from CAB supplied base class FormShellApplication, and the 
    /// main form will be ShellForm, also created by default by this solution template
    /// </summary>
    class ShellApplication : SmartClientApplication<MainWorkItem, Login>
    {
        #region instance variables

        /// <summary>
        /// ThreadStart object
        /// </summary>
        private static ThreadStart job1;

        /// <summary>
        /// Thread Object
        /// </summary>
        private static Thread thread1;
        /// <summary>
        /// Background thread
        /// </summary>
        private static BackgroundWorker backGroundWork1;

        /// <summary>
        /// Progrss Form
        /// </summary>
        public static ProgressBar prgfrm;

        #endregion instance variables

        #region constructor

        /// <summary>
        /// Application entry point.
        /// </summary>
        [STAThread]
        static void Main()
        {
#if (DEBUG)
			RunInDebugMode();
#else
            RunInReleaseMode();
#endif
        }

        #endregion constructor

        #region private methods

        /// <summary>
        /// Runs the in debug mode.
        /// </summary>
        private static void RunInDebugMode()
        {
            ShellApplication.backGroundWork1 = new BackgroundWorker();
            ShellApplication.backGroundWork1.DoWork += new DoWorkEventHandler(ShellApplication.backGroundWork1_DoWork);
            ShellApplication.backGroundWork1.ProgressChanged += new ProgressChangedEventHandler(ShellApplication.backGroundWork1_ProgressChanged);
            ShellApplication.backGroundWork1.RunWorkerCompleted += new RunWorkerCompletedEventHandler(ShellApplication.backGroundWork1_RunWorkerCompleted);
            ShellApplication.backGroundWork1.RunWorkerAsync();
            ////Events has been added to handle unhandled Exception
            Application.ThreadException += new ThreadExceptionEventHandler(ApplicationUnhandledException);
            //Application.SetUnhandledExceptionMode(UnhandledExceptionMode.CatchException);
            //AppDomain.CurrentDomain.UnhandledException += new UnhandledExceptionEventHandler(AppDomainUnhandledException);
            Application.SetCompatibleTextRenderingDefault(false);
            new ShellApplication().Run();
        }

        /// <summary>
        /// Runs the in release mode.
        /// </summary>
        private static void RunInReleaseMode()
        {
            ShellApplication.backGroundWork1 = new BackgroundWorker();
            ShellApplication.backGroundWork1.DoWork += new DoWorkEventHandler(ShellApplication.backGroundWork1_DoWork);
            ShellApplication.backGroundWork1.ProgressChanged += new ProgressChangedEventHandler(ShellApplication.backGroundWork1_ProgressChanged);
            ShellApplication.backGroundWork1.RunWorkerCompleted += new RunWorkerCompletedEventHandler(ShellApplication.backGroundWork1_RunWorkerCompleted);
            ShellApplication.backGroundWork1.RunWorkerAsync();
            ////Thread Event has been added to handle unhandled Exception
            Application.ThreadException += new ThreadExceptionEventHandler(ApplicationUnhandledException);
            Application.SetUnhandledExceptionMode(UnhandledExceptionMode.CatchException);
            AppDomain.CurrentDomain.UnhandledException += new UnhandledExceptionEventHandler(AppDomainUnhandledException);
            Application.SetCompatibleTextRenderingDefault(false);

            try
            {
                new ShellApplication().Run();
            }
            catch (Exception ex)
            {
                HandleException(ex);
            }
        }

        /// <summary>
        /// Apps the domain unhandled exception.
        /// </summary>
        /// <param name="sender">The sender.</param>
        /// <param name="e">The <see cref="System.UnhandledExceptionEventArgs"/> instance containing the event data.</param>
        private static void AppDomainUnhandledException(object sender, UnhandledExceptionEventArgs e)
        {
            HandleException(e.ExceptionObject as Exception);
        }

        /// <summary>
        /// Handles the exception.
        /// </summary>
        /// <param name="ex">The ex.</param>
        private static void HandleException(Exception ex)
        {
            if (ex == null)
                return;

            if (TerraScan.Common.ExceptionManager.ManageException(ex))
            {
                Application.Restart();
            }
            else
            {
                Application.Exit();
            }
        }

        /// <summary>
        /// Handles the RunWorkerCompleted event of the backGroundWork1 control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="T:System.ComponentModel.RunWorkerCompletedEventArgs"/> instance containing the event data.</param>
        private static void backGroundWork1_RunWorkerCompleted(object sender, RunWorkerCompletedEventArgs e)
        {
            try
            {
                ////status = true;
                ShellApplication.thread1.Abort();
                backGroundWork1.Dispose();
                //// this.AppendImage();
            }
            catch (Exception ex)
            {
                ////ExceptionManager.ManageException(ex, ExceptionManager.ActionType.CloseCurrentForm, this);
            }
        }

        /// <summary>
        /// Handles the ProgressChanged event of the backGroundWork1 control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="T:System.ComponentModel.ProgressChangedEventArgs"/> instance containing the event data.</param>
        private static void backGroundWork1_ProgressChanged(object sender, ProgressChangedEventArgs e)
        {
            //// throw new Exception("The method or operation is not implemented.");
        }

        /// <summary>
        /// Handles the DoWork event of the backGroundWork1 control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="T:System.ComponentModel.DoWorkEventArgs"/> instance containing the event data.</param>
        private static void backGroundWork1_DoWork(object sender, DoWorkEventArgs e)
        {
            ShellApplication.prgfrm = new ProgressBar();
            ////ProgressForm prgfrm = new ProgressForm();
            prgfrm.ShowDialog();
        }

        /// <summary>
        /// Applications the unhandled exception. - Thread Exception
        /// </summary>
        /// <param name="sender">The sender.</param>
        /// <param name="e">The <see cref="T:System.Threading.ThreadExceptionEventArgs"/> instance containing the event data.</param>
        private static void ApplicationUnhandledException(object sender, ThreadExceptionEventArgs e)
        {
            HandleException(e.Exception);
        }

        /// <summary>
        /// Called when [unhandled exception].
        /// </summary>
        /// <param name="sender">The sender.</param>
        /// <param name="e">The <see cref="T:System.UnhandledExceptionEventArgs"/> instance containing the event data.</param>
        public override void OnUnhandledException(object sender, UnhandledExceptionEventArgs e)
        {
            HandleException(e.ExceptionObject as Exception);
        }
        
        #endregion private methods
    }
}
