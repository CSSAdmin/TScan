//----------------------------------------------------------------------------------------
// patterns & practices - Smart Client Software Factory - Guidance Package
//
// This file was generated by this guidance package as part of the solution template
//
// The FormShell class represent the main form of your application.
// 
// For more information see: 
// ms-help://MS.VSCC.v90/MS.VSIPCC.v90/ms.practices.scsf.2008apr/SCSF/html/03-01-010-How_to_Create_Smart_Client_Solutions.htm
//
// Latest version of this Guidance Package: http://go.microsoft.com/fwlink/?LinkId=62182
//----------------------------------------------------------------------------------------

namespace TerraScan.UI
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.Data;
    using System.Drawing;
    using System.Text;
    using System.Windows.Forms;
    using TerraScan.XPPanel;
    using System.Configuration;
    using System.Security.Permissions;
    using System.Reflection;
    using System.Diagnostics;
    using TerraScan.Helper;
    using TerraScan.Utilities;
    using Microsoft.Practices.CompositeUI.EventBroker;
    using Microsoft.Practices.CompositeUI.Utility;
    using Microsoft.Practices.ObjectBuilder;
    using Microsoft.Practices.CompositeUI.WinForms;
    using Microsoft.Practices.CompositeUI.SmartParts;
    using Microsoft.Practices.CompositeUI;
    using TerraScan.Common;
    using TerraScan.UI.Controls;
    using System.Runtime.InteropServices;
    using TerraScan.BusinessEntities;
    using TerraScan.Infrastructure.Interface.Constants;
    using System.ServiceModel;
    using System.IO;
    using System.Collections;
    using TerraScan.ReceiptEngine;
    using TerraScan.PaymentEngine;
    using TerraScan.Infrastructure.Module;
    using Microsoft.Practices.CompositeUI.Services;
    using Microsoft.Practices.CompositeUI.Configuration;
  
    /// <summary>
    /// Main application shell view.
    /// </summary>
    public partial class ShellForm : Form
    {
        #region Private Variables

        /// <summary>
        /// active parent form for external compnent integration
        /// </summary>
        private static ShellForm activeParentForm;

        /// <summary>
        /// dataentered
        /// </summary>
        private string dataentered = null;
        ////private static Regex _isNumber = new Regex(@"^\d+$");

        /// <summary>
        /// Timer for clock
        /// </summary>
        private Timer clock;
        //// private int CompTime;

        /// <summary>
        /// ctrlf3
        /// </summary>
        private bool ctrlf3 = false;

        /// <summary>
        /// DataSet Which Holds the User MenuItems on Each Form
        /// </summary>
        private DataSet menuItemsDataSet = new DataSet();

        /// <summary>
        /// Flag to see whether formclosing event called from the actual Form close or 
        /// when the application is opened second time, application.exit() is called, 
        /// that time formclosing is also called. So to stop that this forclosing flag is set
        /// </summary>
        private bool formClosing = false;

        /// <summary>
        /// Link Label object for Windows Panel
        /// </summary>
        private LinkLabel windowLinkLabel;

        /// <summary>
        /// TerraScanToolStripMenuItem holds the Windows Menu
        /// </summary>
        private TerraScanToolStripMenuItem windowsToolStripMenuItem;

        /// <summary>
        /// contorller instance
        /// </summary>
        private ShellFormController mainFormControll;

        /// <summary>
        /// formName
        /// </summary>
        private string formName;

        /// <summary>
        /// dllName
        /// </summary>
        private string dllName;

        /// <summary>
        /// activeForm
        /// </summary>
        private string activeForm;

        /// <summary>
        /// workitemName
        /// </summary>
        private string workitemName;

        /// <summary>
        /// navigationPanelSmartPart
        /// </summary>
        private NavigationPanelSmartPart navigationPanelSmartPart = new NavigationPanelSmartPart();

        /// <summary>
        /// navigationPanelSmartPart
        /// </summary>
        //private UltraExplorerBar ultraExplorerBar = new UltraExplorerBar();

        /// <summary>
        /// variable holds the Form ID
        /// </summary>
        private int form;

        /// <summary>
        /// variable used to hold the ToolStripMenuItemes.
        /// </summary>
        private List<TerraScanToolStripMenuItem> terraScanToolStripMenuItemCollection = new List<TerraScanToolStripMenuItem>();

        /// <summary>
        /// Dataset maintain visited records history
        /// </summary>
        private F9612ActivityQueueData RecordHistoryDataSet = new F9612ActivityQueueData();

        public static Form activityQueueSmartPart = null;
        #endregion

        #region Constructor

        /// <summary>
        /// Default class initializer.
        /// </summary>
        public ShellForm()
        {
            InitializeComponent();

            contentAreaWorkSpace = new MdiWorkspace(this);
            this.contentAreaWorkSpace.SmartPartClosing += new EventHandler<WorkspaceCancelEventArgs>(this.ContentAreaWorkSpace_SmartPartClosing);
            this.contentAreaWorkSpace.SmartPartActivated += new EventHandler<WorkspaceEventArgs>(this.ContentAreaWorkSpace_SmartPartActivated);
            ShellForm.activeParentForm = this; ////if not necessary to be removed
        }

        #endregion Constructor

        #region Published Events

        /// <summary>
        /// event publication for form activation
        /// </summary>
        [EventPublication(EventTopics.D9001_ShellForm_FormActivate, PublicationScope.Global)]
        public event EventHandler<DataEventArgs<string>> FormActivateEvent;

        /// <summary>
        /// event publication for setting the active link color
        /// </summary>
        [EventPublication(EventTopics.D9001_ShellForm_SetActiveLinkColor, PublicationScope.Global)]
        public event EventHandler<DataEventArgs<string>> SetActiveLinkColor;

        /// <summary>
        /// event publication for getting the form status
        /// </summary>
        [EventPublication(EventTopics.D9001_ShellForm_GetFormStatus, PublicationScope.Global)]
        public event EventHandler<DataEventArgs<string>> GetFormStatus;

        /// <summary>
        /// event publication for setting the cancel button
        /// </summary>
        [EventPublication(EventTopics.D9001_ShellForm_SetFormCancelButton, PublicationScope.Global)]
        public event EventHandler<DataEventArgs<string>> SetFormCancelButton;

        /// <summary>
        /// event publication for setting the default button
        /// </summary>
        [EventPublication(EventTopics.D9001_ShellForm_SetFormDefaultButton, PublicationScope.Global)]
        public event EventHandler<DataEventArgs<Form>> SetFormDefaultButton;

        /// <summary>
        /// Optional Parameters Form event Publishing
        /// </summary>
        /// <param name="sender"> The sender UserControl</param>
        /// <param name="e">The argument associated with the event</param>
        [EventPublication(EventTopics.D9001_ShellForm_SendOptionalParameters, PublicationScope.Global)]
        public event EventHandler<DataEventArgs<object[]>> SendOptionalParameters;

        /// <summary>
        /// D9030_F9030_KeyIdAlertSlice
        /// </summary>
        [EventPublication(EventTopicNames.D9030_F9030_KeyIdAlertSlice, PublicationScope.Global)]
        public event EventHandler<TerraScan.Infrastructure.Interface.EventArgs<int>> D9030_F9030_KeyIdAlertSlice;

        /// <summary>
        /// event publication for setting the DebugMode
        /// </summary>
        [EventPublication(EventTopicNames.OnD9001_ShellForm_SetDebugMode, PublicationScope.Global)]
        public event EventHandler<TerraScan.Infrastructure.Interface.EventArgs<bool>> OnD9001_ShellForm_SetDebugMode;

        /// <summary>
        /// Occurs when [on form master_ visible forms].
        /// </summary>
        [EventPublication(EventTopicNames.FormMaster_VisibleForms, PublicationScope.Global)]
        public event EventHandler<DataEventArgs<EnablePanelEventArgs>> OnFormMaster_VisibleForms;


        [EventPublication(EventTopicNames.ApexLogOutEvent, PublicationScope.Global)]
        public event EventHandler<DataEventArgs<bool>> ApexLogOutEvent;



        [EventPublication(EventTopicNames.F9030_ApexCloseEvent, PublicationScope.Global)]
        public event EventHandler<DataEventArgs<int>> F9030_ApexCloseEvent;

        #endregion

        #region Properties


        /// <summary>
        /// Gets or sets the active parent form.
        /// </summary>
        /// <value>The active parent form.</value>
        public int SetActiveWindow
        {

            set
            {

                this.mainFormControll.WorkItem.SetActiveForms(value, 1);
                this.SetActiveWindowsMenu();
                FormInfo shellFrminfo = new FormInfo();
                shellFrminfo.formFile = value.ToString();
                try
                {
                    this.FormActivateEvent(this, new DataEventArgs<string>(shellFrminfo.formFile));
                }
                catch
                {
                }
                this.CheckActiveWindowForm(shellFrminfo.formFile.ToString());
                this.SetActiveLinkColor(this, new DataEventArgs<string>(shellFrminfo.formFile.ToString()));
            }
        }


        /// <summary>
        /// Gets or sets the active parent form.
        /// </summary>
        /// <value>The active parent form.</value>
        public int DeActiveWindow
        {

            set
            {

                this.mainFormControll.WorkItem.SetActiveForms(value, 0);
                this.SetActiveWindowsMenu();
                try
                {
                    this.FormActivateEvent(this, new DataEventArgs<string>("0"));
                }
                catch
                {
                }
            }
        }

        /// <summary>
        /// Gets or sets the active parent form.
        /// </summary>
        /// <value>The active parent form.</value>
        public static ShellForm ActiveParentForm
        {
            get { return activeParentForm; }
            set { activeParentForm = value; }
        }

        /// <summary>
        /// Property to Get and Set the MenuItemsDataSet
        /// </summary>
        public DataSet MenuItemsDataSet
        {
            get { return this.menuItemsDataSet; }
            set { this.menuItemsDataSet = value; }
        }

        /// <summary>
        /// Property to access controller
        /// </summary>
        [CreateNew]
        public ShellFormController MainFormControll
        {
            get { return this.mainFormControll as ShellFormController; }
            set { this.mainFormControll = value; }
        }

        #endregion

        #region Subscibed Events

        /// <summary>
        /// panellinklabel click event subscription
        /// </summary>
        /// <param name="sender"> The sender control</param>
        /// <param name="e">The argument associated with the event</param>
        [EventSubscription(EventTopics.D9001_ShellForm_NavigationPanelSmartPart_ShowForm, Thread = ThreadOption.UserInterface)]
        public void ShowForm(object sender, DataEventArgs<FormInfo> e)
        {
            this.DisplayConetentArea(e.Data);
        }

        /// <summary>
        /// method for setting the cancel button
        /// </summary>
        /// <param name="sender">The sender object of the event</param>
        /// <param name="e">The eventargument associated with the event</param>
        [EventSubscription(EventTopics.D9001_ShellForm_SetCancelButton, Thread = ThreadOption.UserInterface)]
        public void SetCancelButton(object sender, DataEventArgs<Button> e)
        {
            // ISSUE #774 : FIXED - STARTS HERE
            // DESCRIPTION : IF A FORM DOES NOT HAVE A QUERY VIEW AND IF YOU OPEN THE 
            //               FORM ERROR10 HAS TO BE SHOWN, BUT ERROR 6 IS ALSO SHOWN.

            if (this.contentAreaWorkSpace.ParentMdiForm.ActiveMdiChild != null)
            {
                this.contentAreaWorkSpace.ParentMdiForm.ActiveMdiChild.CancelButton = e.Data;
            }

            // ENDS HERE
        }

        /// <summary>
        /// event subscription for logout event
        /// </summary>
        /// <param name="sender">The user control from whihc the event fired</param>
        /// <param name="e"> The eventargument being passed</param>
        [EventSubscription(EventTopics.D9001_ShellForm_NavigationPanelSmartPart_LogoutEvent, Thread = ThreadOption.UserInterface)]
        public void LogoutEvent(object sender, DataEventArgs<string> e)
        {
            if (MessageBox.Show(TerraScan.Utilities.SharedFunctions.GetResourceString("Logout"), ConfigurationWrapper.ApplicationName, MessageBoxButtons.YesNo, MessageBoxIcon.Question) != DialogResult.No)
            {
                if (MyServiceHost.myServiceHost.State == CommunicationState.Opened)
                {
                    MyServiceHost.StopService();
                }
                Application.ExitThread();
                Application.Exit();
                Application.Restart();
            }
        }

        /// <summary>
        /// Event Handle the formClose
        /// </summary>
        /// <param name="sender">object as sender</param>
        /// <param name="e">string as DataEventArgs</param>
        [EventSubscription(EventTopics.D9001_BaseSmartPart_formClose, Thread = ThreadOption.UserInterface)]
        public void FormClose(object sender, DataEventArgs<string> e)
        {
            if (e.Data == "ApplicationExitCall")
            {
                TerraScanCommon.FormName = string.Empty;
            }
            else if (e.Data == "UserClosing")
            {
                if (!this.activeForm.Equals("D2550.F2551"))
                {
                    WorkItem currentWorkItem = (WorkItem)this.mainFormControll.WorkItem.Items.Get(this.form.ToString());
                    currentWorkItem.State["FormStatus"] = true;
                    if (this.formName == "F9030")
                    {
                        this.GetFormStatus(this, new DataEventArgs<string>(this.form.ToString()));
                    }
                    else
                    {
                        this.GetFormStatus(this, new DataEventArgs<string>(this.formName));
                    }

                    if ((bool)currentWorkItem.State["FormStatus"] == true)
                    {
                        UserControl smartPart = (UserControl)currentWorkItem.SmartParts.Get(this.formName);
                        TerraScanCommon.FormName = this.formName;
                        if (smartPart != null)
                        {
                            smartPart.ParentForm.Close();
                            currentWorkItem.SmartParts.Remove(smartPart);
                        }
                        //smartPart.Dispose();
                        //smartPart = null;
                        //if (currentWorkItem.Items.Count == 0)
                        //{
                        //    currentWorkItem.Deactivate();
                        //    currentWorkItem.Terminate();
                        //    currentWorkItem.Dispose();
                        //    currentWorkItem = null;
                        //}
                     /*   IntPtr ptr;
                        try
                        {
                            System.Diagnostics.Process proc = System.Diagnostics.Process.GetCurrentProcess();

                            ptr = Marshal.AllocHGlobal(IntPtr.Size); 
                                if (IntPtr.Size == 8)
                                {
                                    
                                    long max = Marshal.ReadInt64(proc.MaxWorkingSet);
                                    max = max / 2;
                                    if (proc.WorkingSet64 >= max)
                                    {
                                        GC.Collect();
                                        GC.WaitForPendingFinalizers();
                                    }
                                }
                                else if (IntPtr.Size == 4)
                                {
                                    ptr = Marshal.AllocHGlobal(IntPtr.Size);
                                    long max = Marshal.ReadInt32(proc.MaxWorkingSet);
                                    max = max / 2;
                                    if (proc.WorkingSet >= max)
                                    {
                                        // call gc
                                        GC.Collect();
                                        GC.WaitForPendingFinalizers();
                                    }
                                }
                                if (ptr != IntPtr.Zero)
                                {
                                    Marshal.FreeHGlobal(ptr);
                                }
                        }
                                                    
                        catch (Exception ex)
                        {
                            MessageBox.Show("Shell Excep");
                            
                        }*/
                        
                        GC.Collect();
                        GC.WaitForPendingFinalizers();
                    }
                }
                else
                {
                     if (((D2550.F2551)sender).canClose)
                     {
                        WorkItem currentWorkItem = (WorkItem)this.mainFormControll.WorkItem.Items.Get(this.form.ToString());
                        currentWorkItem.State["FormStatus"] = true;
                        if (this.formName == "F9030")
                        {
                            this.GetFormStatus(this, new DataEventArgs<string>(this.form.ToString()));
                        }
                        else
                        {
                            this.GetFormStatus(this, new DataEventArgs<string>(this.formName));
                        }

                        if ((bool)currentWorkItem.State["FormStatus"] == true)
                        {
                            UserControl smartPart = (UserControl)currentWorkItem.SmartParts.Get(this.formName);
                            TerraScanCommon.FormName = this.formName;
                            smartPart.ParentForm.Close();
                            //smartPart.ParentForm.Dispose();
                            currentWorkItem.SmartParts.Remove(smartPart);
                            GC.Collect();
                            GC.WaitForPendingFinalizers();
                        }
                       
                    }
                }
               
            }
        }

        /// <summary>
        /// Applications the status link label click event.
        /// </summary>
        /// <param name="sender">The sender.</param>
        /// <param name="e">The e.</param>
        [EventSubscription(EventTopics.D9001_ShellForm_NavigationPanelSmartPart_ApplicationStatusLinkLabelClickEvent, Thread = ThreadOption.UserInterface)]
        public void ApplicationStatusLinkLabelClickEvent(object sender, DataEventArgs<bool> e)
        {
            if (e.Data.Equals(true))
            {
                foreach (DataTable formItemsDataTable in this.mainFormControll.WorkItem.GetFormItems.Tables)
                {
                    foreach (DataRow formItemsDataRow in formItemsDataTable.Rows)
                    {
                        if (formItemsDataRow["Active"].Equals(1))
                        {
                            FormInfo activeFormInfo;
                            WorkItem activeWorkItem = new WorkItem();
                            UserControl activeSmartPart = new UserControl();

                            int activeFormId;
                            int.TryParse(formItemsDataRow["Form"].ToString(), out activeFormId);

                            activeFormInfo = TerraScanCommon.GetFormInfo(activeFormId);

                            string displayFormName = activeFormInfo.formFile.Substring((activeFormInfo.formFile.LastIndexOf(".") + 1), (activeFormInfo.formFile.Length - activeFormInfo.formFile.LastIndexOf(".") - 1));
                            string workItemName = displayFormName.Trim() + "WorkItem";

                            if (!string.IsNullOrEmpty(workItemName) && !string.IsNullOrEmpty(displayFormName))
                            {
                                if (this.mainFormControll.WorkItem.Items.Contains(activeFormInfo.form.ToString()))
                                {
                                    activeWorkItem = (WorkItem)this.mainFormControll.WorkItem.Items.Get(activeFormInfo.form.ToString());
                                    if (activeWorkItem.SmartParts.Contains(displayFormName))
                                    {
                                        activeSmartPart = (UserControl)activeWorkItem.SmartParts.Get(displayFormName);
                                        int.TryParse(activeSmartPart.Tag.ToString(), out this.form);
                                        TerraScanCommon.FormName = this.formName;
                                        activeSmartPart.ParentForm.Close();
                                    }
                                }
                            }
                        }
                    }
                }
            }

            //// Removing the Items form the MenuItmesCollection
            foreach (TerraScanToolStripMenuItem toolStripMenuItem in this.terraScanToolStripMenuItemCollection)
            {
                if (toolStripMenuItem.DropDownItems.Count > 0)
                {
                    toolStripMenuItem.DropDownItems.Clear();
                }
                this.menuStrip.Items.Remove(toolStripMenuItem);
            }

            //// Removing the Windows Menu Item.
            this.menuStrip.Items.Remove(this.windowsToolStripMenuItem);

            this.menuItemsDataSet = this.mainFormControll.GetMenuItems(TerraScanCommon.UserId, TerraScanCommon.ApplicationId);
            if (this.menuItemsDataSet != null)
            {
                if (this.menuItemsDataSet.Tables.Count > 0)
                {
                    TerraScanCommon.FormPermissionsDataSet = ShellFormController.GetFormPermissions(TerraScanCommon.UserId, TerraScanCommon.ApplicationId);
                    this.mainFormControll.WorkItem.State["FormItemsDataSet"] = this.menuItemsDataSet;
                    TerraScanCommon.TerraScanFormItems = this.mainFormControll.GetFormItems;
                    this.CreateTerraScanMenu(this.MenuItemsDataSet);
                    this.navigationPanelSmartPart = this.mainFormControll.WorkItem.Items.AddNew<NavigationPanelSmartPart>();
                    this.leftNavWorkSpace.Show(this.navigationPanelSmartPart);
                    this.Resize += new EventHandler(this.ShellForm_Resize);
                }
                else
                {
                    DataSet tempMenuDataSet = new DataSet();
                    this.mainFormControll.WorkItem.RootWorkItem.State["Menu"] = tempMenuDataSet;
                    this.navigationPanelSmartPart = this.mainFormControll.WorkItem.Items.AddNew<NavigationPanelSmartPart>();
                    this.leftNavWorkSpace.Show(this.navigationPanelSmartPart);
                    this.Resize += new EventHandler(this.ShellForm_Resize);
                }
            }
        }

        /// <summary>
        /// Windows link label click event.
        /// </summary>
        /// <param name="sender">The sender.</param>
        /// <param name="e">The e.</param>
        [EventSubscription(EventTopics.D9001_ShellForm_NavigationPanelSmartPart_WindowsLinkLabelClickEvent, Thread = ThreadOption.UserInterface)]
        public void WindowsLinkLabelClickEvent(object sender, DataEventArgs<UserControl> e)
        {
            this.FormMaster_FormVisibility(false);

            //foreach (Form f in this.MdiChildren)
            //{
            //    //if (f.Name == "CAMASketch")
            //    if (f.Name == "CamaSketh")
            //    {
            //        // f.Visible = false;
            //        f.SendToBack();
            //    }

            //}

            this.contentAreaWorkSpace.Activate(e.Data);

            //((Form)e.Data.ParentForm).WindowState = FormWindowState.Maximized;

            this.FormMaster_FormVisibility(true);
        }

        #endregion

        #region externalcomponent2

        /// <summary>
        /// Gets the external show form.
        /// </summary>
        /// <param name="strForm">The STR form.</param>
        /// <param name="strParam1">The STR param1.</param>
        /// <param name="strParam2">The STR param2.</param>
        /// <param name="strParam3">The STR param3.</param>
        /// <param name="strParam4">The STR param4.</param>
        public void GetExternalShowForm(string strForm, string strParam1, string strParam2, string strParam3, string strParam4)
        {
            SupportFormData.FormCallTranslateDataTable getFormCallTranslateDetails = new SupportFormData.FormCallTranslateDataTable();
            getFormCallTranslateDetails = this.mainFormControll.WorkItem.GetTranslatedFormDetails(Convert.ToInt32(strForm), strParam1);
            FormInfo externalFormo;
            if (getFormCallTranslateDetails.Rows.Count > 0)
            {
                externalFormo = TerraScanCommon.GetFormInfo(Convert.ToInt32(getFormCallTranslateDetails.Rows[0][0].ToString()));
                if (!(string.IsNullOrEmpty(getFormCallTranslateDetails.Rows[0][1].ToString()) && string.IsNullOrEmpty(getFormCallTranslateDetails.Rows[0][2].ToString()) && string.IsNullOrEmpty(getFormCallTranslateDetails.Rows[0][3].ToString()) && string.IsNullOrEmpty(getFormCallTranslateDetails.Rows[0][4].ToString())))
                {
                    externalFormo.optionalParameters = new object[4];
                    if (getFormCallTranslateDetails.Rows[0][1].ToString() != "0")
                    {
                        externalFormo.optionalParameters[0] = getFormCallTranslateDetails.Rows[0][1].ToString();
                    }
                    else
                    {
                        externalFormo.optionalParameters[0] = null;
                    }
                    externalFormo.optionalParameters[1] = getFormCallTranslateDetails.Rows[0][2].ToString();
                    externalFormo.optionalParameters[2] = getFormCallTranslateDetails.Rows[0][3].ToString();
                    externalFormo.optionalParameters[3] = getFormCallTranslateDetails.Rows[0][4].ToString();
                }
                this.DisplayConetentArea(externalFormo);
            }
        }

        #endregion externalcomponent2

        /// <summary>
        /// Method to display the content area
        /// </summary>
        /// <param name="formInfo">string array containing information about the form to be loaded</param>
        public void DisplayConetentArea(FormInfo formInfo)
        {
            Boolean CAMAForm = false;
            for (int CamaFormNo = 0; CamaFormNo < TerraScanCommon.CAMASketchFormDetails.Length; CamaFormNo++)
            {
                if (TerraScanCommon.CAMASketchFormDetails[CamaFormNo].Contains(formInfo.form.ToString()))
                {
                    CAMAForm = true;
                }
            }

            if (CAMAForm)
            {
                foreach (Form f in this.MdiChildren)
                {
                    if (f.Name == "CamaSketh")
                    {
                        f.Visible = true;
                        f.BringToFront();
                        this.CheckActiveWindowForm(formInfo.form.ToString());
                        this.SetActiveLinkColor(this, new DataEventArgs<string>(formInfo.form.ToString()));
                    }
                }
            }
            else
            {
                if (TerraScanCommon.activateDebugMode.Equals(true) && TerraScanCommon.debugConfiguration.Equals(true) && TerraScanCommon.debugSliceConfiguration.Equals(false))
                {
                    string optionalValues = "";
                    if (formInfo.optionalParameters != null)
                    {
                        if (formInfo.optionalParameters[0] != null)
                        {
                            optionalValues = optionalValues + "Key ID = " + formInfo.optionalParameters[0] + "\n";
                        }

                        for (int count = 0; count <= 3; count++)
                        {
                            if (formInfo.optionalParameters.Length > count)
                            {
                                if (formInfo.optionalParameters[count] != null)
                                {
                                    optionalValues = optionalValues + "Other Parameter " + count + " = " + formInfo.optionalParameters[count] + "\n";
                                }
                            }
                        }
                    }

                    if (MessageBox.Show("Form: " + formInfo.form + "\n" + "FormFile: " + formInfo.formFile + "\n" + "Open Permission: " + Convert.ToBoolean(formInfo.openPermission) + "\n" + "Add Permission: " + Convert.ToBoolean(formInfo.addPermission) + "\n" + "Edit Permission: " + Convert.ToBoolean(formInfo.editPermission) + "\n" + "Delete Permission: " + Convert.ToBoolean(formInfo.deletePermission) + "\n" + optionalValues, ConfigurationWrapper.ApplicationName, MessageBoxButtons.OKCancel, MessageBoxIcon.Information).Equals(DialogResult.Cancel))
                    {
                        return;
                    }
                }

                WorkItem moduleWorkItem = new WorkItem();
                UserControl childForm = new UserControl();
                bool formPresenceFlag;
                //// Added by S.Guhan
                ////bool sliceFormAlreadyExist =false;
                //// Till Here
                try
                {
                    if (!string.IsNullOrEmpty(formInfo.formFile))
                    {
                        if (!string.IsNullOrEmpty(formInfo.form.ToString()))
                        {
                            if (formInfo.openPermission == 1)
                            {
                                string displayFormName = formInfo.formFile.Substring((formInfo.formFile.LastIndexOf(".") + 1), (formInfo.formFile.Length - formInfo.formFile.LastIndexOf(".") - 1));
                                string workItemName = displayFormName.Trim() + "WorkItem";
                                string assemblyName = formInfo.formFile.Remove(formInfo.formFile.LastIndexOf("."));
                                if (!string.IsNullOrEmpty(workItemName) && !string.IsNullOrEmpty(assemblyName) && !string.IsNullOrEmpty(displayFormName))
                                {
                                    System.Reflection.Assembly assembly = this.LoadModule(assemblyName);
                                    //System.Reflection.Assembly assembly = System.Reflection.Assembly.Load(assemblyName);

                                    if (!this.mainFormControll.WorkItem.Items.Contains(formInfo.form.ToString())) ////workItemName
                                    {
                                        moduleWorkItem = (WorkItem)assembly.CreateInstance(assemblyName + "." + workItemName);
                                        childForm = (UserControl)assembly.CreateInstance(assemblyName + "." + displayFormName);
                                        childForm.Tag = formInfo.form;
                                        this.form = formInfo.form;
                                        this.mainFormControll.WorkItem.Items.Add(moduleWorkItem, formInfo.form.ToString()); ////workItemName
                                        moduleWorkItem.SmartParts.Add(childForm, displayFormName);
                                        this.mainFormControll.SetActiveForms(formInfo.form, 1);
                                        this.SetActiveWindowsMenu();
                                        try
                                        {
                                            this.FormActivateEvent(this, new DataEventArgs<string>(formInfo.formFile));
                                        }
                                        catch
                                        {
                                        }
                                        formPresenceFlag = false;
                                    }
                                    else
                                    {
                                        ////// Added By Guhan
                                        ////sliceFormAlreadyExist = true;
                                        ////// Till HERe
                                        moduleWorkItem = (WorkItem)this.mainFormControll.WorkItem.Items.Get(formInfo.form.ToString()); ////workItemName
                                        if (!moduleWorkItem.SmartParts.Contains(displayFormName))
                                        {
                                            childForm = (UserControl)assembly.CreateInstance(assemblyName + "." + displayFormName);
                                            childForm.Tag = formInfo.form;
                                            this.form = formInfo.form;
                                            moduleWorkItem.SmartParts.Add(childForm, displayFormName);
                                            this.mainFormControll.SetActiveForms(formInfo.form, 1);
                                            this.SetActiveWindowsMenu();
                                            try
                                            {
                                                this.FormActivateEvent(this, new DataEventArgs<string>(formInfo.formFile));
                                            }
                                            catch
                                            {
                                            }
                                            formPresenceFlag = false;
                                        }
                                        else
                                        {
                                            foreach (Form f in this.MdiChildren)
                                            {
                                                //if (f.Name == "CAMASketch")
                                                if (f.Name == "CamaSketh")
                                                {
                                                    // f.Visible = false;
                                                    f.SendToBack();
                                                }

                                            }

                                            this.FormMaster_FormVisibility(false);

                                            childForm = (UserControl)moduleWorkItem.SmartParts.Get(displayFormName);
                                            childForm.BringToFront();
                                            try
                                            {
                                                ((Form)childForm.ParentForm).WindowState = FormWindowState.Maximized;
                                            }
                                            catch
                                            {
                                            }
                                            formPresenceFlag = true;
                                            this.form = formInfo.form;
                                        }
                                    }

                                    if (childForm != null)
                                    {
                                        if (formInfo.optionalParameters != null && this.contentAreaWorkSpace.ActiveSmartPart != null)
                                        {
                                            (this.contentAreaWorkSpace.ActiveSmartPart as BaseSmartPart).FlagParametirized = true;
                                        }

                                        if (!formPresenceFlag)
                                        {
                                            string formTitle = string.Empty;
                                            formTitle = this.mainFormControll.WorkItem.GetFormTitle(Convert.ToInt32(childForm.Tag));
                                            WindowSmartPartInfo smartPartInfo = new WindowSmartPartInfo();
                                            if (Convert.ToBoolean(string.Compare(formTitle.Trim(), "No Sandwich")))
                                            {
                                                smartPartInfo.Title = formTitle.Trim();
                                            }
                                            else
                                            {
                                                smartPartInfo.Title = childForm.AccessibleName;
                                            }

                                            smartPartInfo.Icon = Properties.Resources.TLogo;

                                            this.contentAreaWorkSpace.Show(childForm, smartPartInfo);

                                        }
                                        else
                                        {
                                            if (!TerraScanCommon.IsApexAvail)
                                            {
                                                int tempForm = formInfo.form;
                                                this.F9030_ApexCloseEvent(this, new DataEventArgs<int>(tempForm));
                                            }
                                            this.contentAreaWorkSpace.Show(childForm);

                                        }
                                        //childForm.Visible = true;
                                        ////Testing For Optional Parameters Form
                                        if (formInfo.optionalParameters != null)
                                        {
                                            object[] tempArray = new object[formInfo.optionalParameters.Length + 1];
                                            formInfo.optionalParameters.CopyTo(tempArray, 0);
                                            tempArray[formInfo.optionalParameters.Length] = childForm.Tag;
                                            this.SendOptionalParameters(this, new DataEventArgs<object[]>(tempArray));
                                        }
                                        else
                                        {
                                            //// Added if Condition by guhan
                                            ////if (!sliceFormAlreadyExist)
                                            ////{
                                            this.OnD9030_F9030_KeyIdAlertSlice(new TerraScan.Infrastructure.Interface.EventArgs<int>(formInfo.form));
                                            ////}
                                        }

                                        if (this.contentAreaWorkSpace.SmartParts.Contains(childForm))
                                        {
                                            this.contentAreaWorkSpace.Activate(childForm);
                                        }
                                        //this.dllName
                                        this.SetFormCancelButton(this, new DataEventArgs<string>("Cancel"));

                                        foreach (Form currentForm in this.contentAreaWorkSpace.ParentMdiForm.MdiChildren)
                                        {
                                            if (contentAreaWorkSpace.ParentMdiForm.ActiveMdiChild == currentForm)
                                            {
                                                currentForm.BackColor = Color.White;
                                                ////Added by Jayanthi to refresh the logo set to the form
                                                ////currentForm.WindowState = FormWindowState.Normal;
                                                ////Till here
                                                currentForm.WindowState = FormWindowState.Maximized;
                                                this.SetFormDefaultButton(this, new DataEventArgs<Form>(currentForm));
                                            }
                                        }

                                        this.FormMaster_FormVisibility(true);
                                    }
                                    else
                                    {
                                        MessageBox.Show(SharedFunctions.GetResourceString("ErrorLoadingForm"), ConfigurationWrapper.ApplicationName, MessageBoxButtons.OK, MessageBoxIcon.Information);
                                    }
                                }
                                else
                                {
                                    ////MessageBox.Show(SharedFunctions.GetResourceString("ErrorLoadingForm"), ConfigurationWrapper.ApplicationName, MessageBoxButtons.OK, MessageBoxIcon.Information);
                                    ErrorEngine.ShowForm((int)TerraScanCommon.ErrorEngineType.Six, formInfo.form);
                                }
                            }
                            else
                            {
                                MessageBox.Show(SharedFunctions.GetResourceString("FormOpenPermission") + formInfo.visibleName + SharedFunctions.GetResourceString("AdminMessage"), ConfigurationWrapper.ApplicationName, MessageBoxButtons.OK, MessageBoxIcon.Information);
                            }
                        }
                        else
                        {   //// Changed 
                            ErrorEngine.ShowForm((int)TerraScanCommon.ErrorEngineType.Six, formInfo.form);
                        }
                    }
                    else
                    {   //// Changed 
                        ////ErrorEngine.ShowForm((int)TerraScanCommon.ErrorEngineType.Six, formInfo.form);
                        ErrorEngine.ShowForm((int)TerraScanCommon.ErrorEngineType.Seven, formInfo.form);
                    }
                }
                ///// Added Guhan to Find Dll NotFound
                catch (FileNotFoundException dllnotFoundException)
                {
                    ////
                    ////MessageBox.Show(SharedFunctions.GetResourceString("ErrorLoadingForm"), ConfigurationWrapper.ApplicationName, MessageBoxButtons.OK, MessageBoxIcon.Information);
                    ErrorEngine.ShowForm((int)TerraScanCommon.ErrorEngineType.Eight, formInfo.form);
                }
                catch (Exception ex)
                {
                    ////
                    ////MessageBox.Show(SharedFunctions.GetResourceString("ErrorLoadingForm"), ConfigurationWrapper.ApplicationName, MessageBoxButtons.OK, MessageBoxIcon.Information);
                    ErrorEngine.ShowForm((int)TerraScanCommon.ErrorEngineType.Six, formInfo.form);
                }
            }

        }

        /// <summary>
        /// Set Normal State of LinkLabel
        /// </summary>
        /// <param name="activeFormParameter">The active form parameter.</param>
        public void CheckActiveWindowForm(string activeFormParameter)
        {
            for (int itemCount = 0; itemCount < this.windowsToolStripMenuItem.DropDown.Items.Count; itemCount++)
            {
                if (this.windowsToolStripMenuItem.DropDown.Items[itemCount].Name.ToString() == activeFormParameter)
                {
                    TerraScanToolStripMenuItem toolStripMenuItem = (TerraScanToolStripMenuItem)(this.windowsToolStripMenuItem.DropDown.Items[itemCount]);
                    toolStripMenuItem.CheckState = CheckState.Checked;
                }
                else
                {
                    TerraScanToolStripMenuItem toolStripMenuItem = (TerraScanToolStripMenuItem)(this.windowsToolStripMenuItem.DropDown.Items[itemCount]);
                    toolStripMenuItem.CheckState = CheckState.Unchecked;
                }
            }
        }

        /// <summary>
        /// Called when [D9030_ F9030_ key id alert slice].
        /// </summary>
        /// <param name="eventArgs">The event args.</param>
        protected virtual void OnD9030_F9030_KeyIdAlertSlice(TerraScan.Infrastructure.Interface.EventArgs<int> eventArgs)
        {
            if (this.D9030_F9030_KeyIdAlertSlice != null)
            {
                this.D9030_F9030_KeyIdAlertSlice(this, eventArgs);
            }
        }

        /// <summary>
        /// Processes a command key.
        /// </summary>
        /// <param name="msg">A <see cref="T:System.Windows.Forms.Message"></see>, passed by reference, that represents the Win32 message to process.</param>
        /// <param name="keyData">One of the <see cref="T:System.Windows.Forms.Keys"></see> values that represents the key to process.</param>
        /// <returns>
        /// true if the keystroke was processed and consumed by the control; otherwise, false to allow further processing.
        /// </returns>
        protected override bool ProcessCmdKey(ref Message msg, Keys keyData)
        {
            const int WM_KEYDOWN = 0x100;
            const int WM_SYSKEYDOWN = 0x104;
            if ((msg.Msg == WM_KEYDOWN) || (msg.Msg == WM_SYSKEYDOWN))
            {
                switch (keyData)
                {
                    case Keys.Control | Keys.K:

                        if (!this.ctrlf3)
                        {
                            this.clock = new Timer();
                            this.clock.Interval = TerraScanCommon.barCodeSessionTimeOut;
                            this.clock.Start();
                            this.clock.Tick += new EventHandler(this.Clock_Tick);
                            this.dataentered = string.Empty;
                            this.ctrlf3 = true;
                            this.Focus();
                        }

                        break;

                    case Keys.Control | Keys.Shift | Keys.F3:
                        if (TerraScanCommon.debugConfiguration.Equals(true))
                        {
                            TerraScanCommon.activateDebugMode = !TerraScanCommon.activateDebugMode;
                            this.OnD9001_ShellForm_SetDebugMode(this, new TerraScan.Infrastructure.Interface.EventArgs<bool>(TerraScanCommon.activateDebugMode));
                        }

                        break;

                    case Keys.Control | Keys.H:
                        activityQueueSmartPart = TerraScanCommon.GetForm(9612, null, this.mainFormControll.WorkItem);
                        if (activityQueueSmartPart != null)
                        {
                            TerraScanCommon.activityForm = (Form)activityQueueSmartPart;
                            activityQueueSmartPart.ShowDialog();
                        }
                        break;

                    case Keys.F6:
                        activityQueueSmartPart = TerraScanCommon.GetForm(9612, null, this.mainFormControll.WorkItem);
                        if (activityQueueSmartPart != null)
                        {
                            TerraScanCommon.activityForm = (Form)activityQueueSmartPart;
                            activityQueueSmartPart.ShowDialog();
                            return true;
                        }
                        break;

                    case Keys.OemCloseBrackets:
                        if (this.ctrlf3 == true)
                        {
                            this.clock.Stop();
                            this.clock.Dispose();
                            string[] sites = this.dataentered.Split('+');
                            if (sites[0].Length < 4)
                            {
                                MessageBox.Show("FormID Cannot be Less than 4 characters", ConfigurationWrapper.ApplicationName, MessageBoxButtons.OK, MessageBoxIcon.Error);
                                break;
                            }
                            else if (sites[0].Length >= 4)
                            {
                                foreach (char c in sites[0])
                                {
                                    if (c < '0' || c > '9')
                                    {
                                        MessageBox.Show("FormID Cannot be AlphaNumeric !!", ConfigurationWrapper.ApplicationName, MessageBoxButtons.OK, MessageBoxIcon.Error);
                                        break;
                                    }
                                    else
                                    {
                                        string newstr = "";
                                        SupportFormData.GetFormDetailsDataTable getFormDetailsDataDetails = new SupportFormData.GetFormDetailsDataTable();
                                        SupportFormData.FormCallTranslateDataTable getFormCallTranslateDetails = new SupportFormData.FormCallTranslateDataTable();

                                        PermissionFields permissions;
                                        try
                                        {
                                            if (sites.Length.Equals(1))
                                            {
                                                getFormCallTranslateDetails = this.mainFormControll.WorkItem.GetTranslatedFormDetails(Convert.ToInt32(sites[0]), null);
                                                sites[0] = getFormCallTranslateDetails.Rows[0][0].ToString();
                                            }
                                            else
                                            {
                                                getFormCallTranslateDetails = this.mainFormControll.WorkItem.GetTranslatedFormDetails(Convert.ToInt32(sites[0]), sites[1].ToString());
                                                sites[0] = getFormCallTranslateDetails.Rows[0][0].ToString();
                                                sites[1] = getFormCallTranslateDetails.Rows[0][1].ToString();
                                            }

                                            if (getFormCallTranslateDetails.Rows.Count > 0)
                                            {
                                                //sites[0] = getFormCallTranslateDetails.Rows[0][0].ToString();
                                                //sites[1] = getFormCallTranslateDetails.Rows[0][1].ToString();
                                                int barCodeFormId;
                                                int.TryParse(sites[0].Trim(), out barCodeFormId);
                                                getFormDetailsDataDetails = this.mainFormControll.WorkItem.GetFormDetails(barCodeFormId, TerraScanCommon.UserId);
                                                if (getFormDetailsDataDetails.Rows.Count > 0)
                                                {
                                                    permissions.newPermission = Convert.ToBoolean(getFormDetailsDataDetails.Rows[0][getFormDetailsDataDetails.IsPermissionAddColumn.ColumnName].ToString());
                                                    permissions.openPermission = Convert.ToBoolean(getFormDetailsDataDetails.Rows[0][getFormDetailsDataDetails.IsPermissionOpenColumn.ColumnName].ToString());
                                                    permissions.editPermission = Convert.ToBoolean(getFormDetailsDataDetails.Rows[0][getFormDetailsDataDetails.IsPermissionEditColumn.ColumnName].ToString());
                                                    permissions.deletePermission = Convert.ToBoolean(getFormDetailsDataDetails.Rows[0][getFormDetailsDataDetails.IsPermissionDeleteColumn.ColumnName].ToString());
                                                    if (permissions.openPermission && Convert.ToBoolean(getFormDetailsDataDetails.Rows[0][getFormDetailsDataDetails.IsPermissionMenuColumn.ColumnName].ToString()))
                                                    {
                                                        ////MessageBox.Show(newstr);

                                                        FormInfo getPermissionForm = TerraScanCommon.GetFormInfo(Convert.ToInt32(sites[0]));

                                                        getPermissionForm.optionalParameters = new object[6];
                                                        int index = 0;
                                                        foreach (string s in sites)
                                                        {
                                                            if (index > 0)
                                                            {
                                                                getPermissionForm.optionalParameters[index - 1] = s;
                                                            }

                                                            index = index + 1;
                                                            ////newstr = newstr + "\n" + s;
                                                        }
                                                        ////getPermissionForm.optionalParameters[sites.Length] = sites[sites.Length];
                                                        getPermissionForm.optionalParameters[4] = permissions;
                                                        getPermissionForm.optionalParameters[5] = TerraScanCommon.UserId;
                                                        this.ShowForm(this, new DataEventArgs<FormInfo>(getPermissionForm));
                                                        break;
                                                    }
                                                    else
                                                    {
                                                        // add no form to show code here
                                                        MessageBox.Show("Access is denied. The selected user might not have Proper permission to view this form.", ConfigurationWrapper.ApplicationName, MessageBoxButtons.OK, MessageBoxIcon.Error);
                                                        break;
                                                    }
                                                }
                                                else
                                                {
                                                    // add no form to show code here
                                                    MessageBox.Show("Invalid form number", ConfigurationWrapper.ApplicationName, MessageBoxButtons.OK, MessageBoxIcon.Information);
                                                    break;
                                                }
                                            }
                                        }
                                        catch (Exception ex)
                                        {
                                        }
                                    }
                                }
                            }

                            this.ctrlf3 = false;

                            // To avoid ] displayed at the active text box
                            return true;
                        }
                        else
                        {
                            break;
                        }

                    case Keys.NumPad0:
                        this.dataentered = this.dataentered + 0;
                        break;

                    case Keys.NumPad1:
                        this.dataentered = this.dataentered + 1;
                        break;

                    case Keys.NumPad2:
                        this.dataentered = this.dataentered + 2;
                        break;

                    case Keys.NumPad3:
                        this.dataentered = this.dataentered + 3;
                        break;

                    case Keys.NumPad4:
                        this.dataentered = this.dataentered + 4;
                        break;

                    case Keys.NumPad5:
                        this.dataentered = this.dataentered + 5;
                        break;

                    case Keys.NumPad6:
                        this.dataentered = this.dataentered + 6;
                        break;

                    case Keys.NumPad7:
                        this.dataentered = this.dataentered + 7;
                        break;

                    case Keys.NumPad8:
                        this.dataentered = this.dataentered + 8;
                        break;

                    case Keys.NumPad9:
                        this.dataentered = this.dataentered + 9;
                        break;

                    case Keys.Add:
                        this.dataentered = this.dataentered + "+";
                        break;

                    case Keys.Subtract:
                        this.dataentered = this.dataentered + "-";
                        break;

                    case Keys.Control | Keys.LButton | Keys.ShiftKey:
                        break;

                    case Keys.D0:
                        this.dataentered = this.dataentered + 0;
                        break;

                    case Keys.D1:
                        this.dataentered = this.dataentered + 1;
                        break;

                    case Keys.D2:
                        this.dataentered = this.dataentered + 2;
                        break;

                    case Keys.D3:
                        this.dataentered = this.dataentered + 3;
                        break;

                    case Keys.D4:
                        this.dataentered = this.dataentered + 4;
                        break;

                    case Keys.D5:
                        this.dataentered = this.dataentered + 5;
                        break;

                    case Keys.D6:
                        this.dataentered = this.dataentered + 6;
                        break;

                    case Keys.D7:
                        this.dataentered = this.dataentered + 7;
                        break;

                    case Keys.D8:
                        this.dataentered = this.dataentered + 8;
                        break;

                    case Keys.D9:
                        this.dataentered = this.dataentered + 9;
                        break;

                    case Keys.Shift | Keys.Add:
                        this.dataentered = this.dataentered + "+";
                        break;

                    case Keys.Shift | Keys.ShiftKey:
                        break;

                    case Keys.F9:
                        this.FunctionKeyShowForm("F9");
                        break;

                    case Keys.F10:
                        this.FunctionKeyShowForm("F10");
                        break;

                    case Keys.F11:
                        this.FunctionKeyShowForm("F11");
                        break;

                    case Keys.F12:
                        this.FunctionKeyShowForm("F12");
                        break;

                    case Keys.Shift | Keys.F1:
                        this.FunctionKeyShowForm("SF1");
                        break;

                    case Keys.Shift | Keys.F2:
                        this.FunctionKeyShowForm("SF2");
                        break;

                    case Keys.Shift | Keys.F3:
                        this.FunctionKeyShowForm("SF3");
                        break;

                    case Keys.Shift | Keys.F4:
                        this.FunctionKeyShowForm("SF4");
                        break;

                    case Keys.Shift | Keys.F5:
                        this.FunctionKeyShowForm("SF5");
                        break;

                    case Keys.Shift | Keys.F6:
                        this.FunctionKeyShowForm("SF6");
                        break;

                    case Keys.Shift | Keys.F7:
                        this.FunctionKeyShowForm("SF7");
                        break;

                    case Keys.Shift | Keys.F8:
                        this.FunctionKeyShowForm("SF8");
                        break;

                    case Keys.Shift | Keys.F9:
                        this.FunctionKeyShowForm("SF9");
                        break;

                    case Keys.Shift | Keys.F10:
                        this.FunctionKeyShowForm("SF10");
                        break;

                    case Keys.Shift | Keys.F11:
                        this.FunctionKeyShowForm("SF11");
                        break;

                    case Keys.Shift | Keys.F12:
                        this.FunctionKeyShowForm("SF12");
                        break;

                    case Keys.LButton | Keys.RButton | Keys.Back | Keys.ShiftKey | Keys.Space | Keys.F17 | Keys.Shift:
                        this.dataentered = this.dataentered + "+";
                        break;

                    case Keys.Shift | Keys.Subtract:
                        this.dataentered = this.dataentered + "-";
                        break;

                    case Keys.A:
                        this.dataentered = this.dataentered + "A";
                        break;

                    case Keys.B:
                        this.dataentered = this.dataentered + "B";
                        break;

                    case Keys.C:
                        this.dataentered = this.dataentered + "C";
                        break;

                    case Keys.D:
                        this.dataentered = this.dataentered + "D";
                        break;

                    case Keys.E:
                        this.dataentered = this.dataentered + "E";
                        break;

                    case Keys.F:
                        this.dataentered = this.dataentered + "F";
                        break;

                    case Keys.G:
                        this.dataentered = this.dataentered + "G";
                        break;

                    case Keys.H:
                        this.dataentered = this.dataentered + "H";
                        break;

                    case Keys.I:
                        this.dataentered = this.dataentered + "I";
                        break;

                    case Keys.J:
                        this.dataentered = this.dataentered + "J";
                        break;

                    case Keys.K:
                        this.dataentered = this.dataentered + "K";
                        break;

                    case Keys.L:
                        this.dataentered = this.dataentered + "L";
                        break;

                    case Keys.M:
                        this.dataentered = this.dataentered + "M";
                        break;

                    case Keys.N:
                        this.dataentered = this.dataentered + "N";
                        break;

                    case Keys.O:
                        this.dataentered = this.dataentered + "O";
                        break;

                    case Keys.P:
                        this.dataentered = this.dataentered + "P";
                        break;

                    case Keys.Q:
                        this.dataentered = this.dataentered + "Q";
                        break;

                    case Keys.R:
                        this.dataentered = this.dataentered + "R";
                        break;

                    case Keys.S:
                        this.dataentered = this.dataentered + "S";
                        break;

                    case Keys.T:
                        this.dataentered = this.dataentered + "T";
                        break;

                    case Keys.U:
                        this.dataentered = this.dataentered + "U";
                        break;

                    case Keys.V:
                        this.dataentered = this.dataentered + "V";
                        break;

                    case Keys.W:
                        this.dataentered = this.dataentered + "W";
                        break;

                    case Keys.X:
                        this.dataentered = this.dataentered + "X";
                        break;

                    case Keys.Y:
                        this.dataentered = this.dataentered + "Y";
                        break;

                    case Keys.Z:
                        this.dataentered = this.dataentered + "Z";
                        break;

                    default:
                        break;
                }
            }

            if (this.ctrlf3.Equals(true))
            {
                return true;
            }

            return base.ProcessCmdKey(ref msg, keyData);
        }

        /// <summary>
        /// Called when [on D9001_ shell form_ set debug mode].
        /// </summary>
        /// <param name="eventArgs">The event args.</param>
        protected virtual void OnOnD9001_ShellForm_SetDebugMode(TerraScan.Infrastructure.Interface.EventArgs<bool> eventArgs)
        {
            if (this.OnD9001_ShellForm_SetDebugMode != null)
            {
                this.OnD9001_ShellForm_SetDebugMode(this, eventArgs);
            }
        }

        #region FormEvents

        /// <summary>
        /// Handles the Load event of the MainForm control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        private void MainForm_Load(object sender, EventArgs e)
        {
            try
            {
                this.mainFormControll.WorkItem.Items.AddNew<ExternalComponentService>();
                try
                {
                    MyServiceHost.StartService();
                }
                catch (AddressAlreadyInUseException ex)
                {
                }

                this.FindForm().Visible = false;
                this.mainFormControll.WorkItem.State["userclosing"] = false;                
                this.FindForm().Visible = true;
                this.menuItemsDataSet = this.mainFormControll.GetMenuItems(TerraScanCommon.UserId, TerraScanCommon.ApplicationId);
                TerraScanCommon.FormPermissionsDataSet = ShellFormController.GetFormPermissions(TerraScanCommon.UserId, TerraScanCommon.ApplicationId);
               
                this.mainFormControll.WorkItem.State["FormItemsDataSet"] = this.menuItemsDataSet;
                this.mainFormControll.WorkItem.State["RecordHistoryDataSet"] = this.RecordHistoryDataSet;
                TerraScanCommon.TerraScanFormItems = this.mainFormControll.GetFormItems;
                this.CreateTerraScanMenu(this.MenuItemsDataSet);

                this.navigationPanelSmartPart = this.mainFormControll.WorkItem.Items.AddNew<NavigationPanelSmartPart>();
                this.leftNavWorkSpace.Show(this.navigationPanelSmartPart);

                ////This code should be uncommented for using Infragistics Ultra leftnav bar instead of 
                //// Normal XpPanel LeftNav Bar.
                ////this.ultraExplorerBar = this.mainFormControll.WorkItem.Items.AddNew<UltraExplorerBar>();
                ////this.leftNavWorkSpace.Show(this.ultraExplorerBar);

                CommentsData getDebugModeDataSet = new CommentsData();
                getDebugModeDataSet = this.mainFormControll.WorkItem.GetConfigDetails("DebugMode");
                if (getDebugModeDataSet.GetCommentsConfigDetails.Rows.Count > 0)
                {
                    if (!string.IsNullOrEmpty(getDebugModeDataSet.GetCommentsConfigDetails.Rows[0][getDebugModeDataSet.GetCommentsConfigDetails.ConfigurationValueColumn].ToString()))
                    {
                        TerraScanCommon.debugConfiguration = Convert.ToBoolean(getDebugModeDataSet.GetCommentsConfigDetails.Rows[0][getDebugModeDataSet.GetCommentsConfigDetails.ConfigurationValueColumn].ToString());
                    }
                }

                CommentsData getBarCodeSessionTimeOutDataSet = new CommentsData();
                getBarCodeSessionTimeOutDataSet = this.mainFormControll.WorkItem.GetConfigDetails("BarCodeSessionTimeOut");
                if (getBarCodeSessionTimeOutDataSet.GetCommentsConfigDetails.Rows.Count > 0)
                {
                    TerraScanCommon.barCodeSessionTimeOut = Convert.ToInt32(getBarCodeSessionTimeOutDataSet.GetCommentsConfigDetails.Rows[0][getBarCodeSessionTimeOutDataSet.GetCommentsConfigDetails.ConfigurationValueColumn].ToString());
                }
                ////}

                ////this.leftNavWorkSpace.Size = new Size(this.leftNavWorkSpace.Width, this.Height - 24);
                ////this.navigationPanelSmartPart.Size = this.leftNavWorkSpace.Size;
                this.Resize += new EventHandler(this.ShellForm_Resize);
                this.IdleTimer.Start();
            }
            catch (Exception ex)
            {
                ExceptionManager.ManageException(ex, ExceptionManager.ActionType.CloseCurrentForm, this.ParentForm);
            }
        }

        /// <summary>
        /// ShellForm_Resize
        /// </summary>
        /// <param name="sender">sender</param>
        /// <param name="e">e</param>
        private void ShellForm_Resize(object sender, EventArgs e)
        {
            //// this.leftNavWorkSpace.Size = new Size(this.leftNavWorkSpace.Width, this.Height - 24);
            ////this.navigationPanelSmartPart.Size = this.leftNavWorkSpace.Size;
        }

        /// <summary>
        /// Handles the Click event of the CutToolStripMenuItem control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        private void CutToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (contentAreaWorkSpace.ParentMdiForm.ActiveMdiChild != null)
            {
                ArrayList controlNames = this.GetActiveControl();
                if (controlNames != null && controlNames.Count == 2)
                {
                    string controlType = controlNames[0].ToString();
                    object activeControlType = controlNames[1];

                    if (controlType == "TerraScan.UI.Controls.TerraScanTextBox")
                    {
                        if (((TerraScanTextBox)activeControlType).SelectedText != string.Empty)
                        {
                            Clipboard.SetText(((TerraScanTextBox)activeControlType).SelectedText);
                            ((TerraScanTextBox)activeControlType).Cut();
                        }
                    }
                    else if (controlType == "System.Windows.Forms.DataGridViewTextBoxEditingControl")
                    {
                        ((DataGridViewTextBoxEditingControl)activeControlType).Cut();
                    }
                    ////else if (controlType == "TerraScan.UI.Controls.TerraScanDataGridView")
                    ////{
                    ////    if (((TerraScanDataGridView)activeControlType).SelectedCells.Count == 1)
                    ////    {
                    ////        Clipboard.SetText(((TerraScanDataGridView)activeControlType).SelectedCells[0].Value.ToString());
                    ////        ((TerraScanDataGridView)activeControlType).SelectedCells[0].Value = string.Empty;
                    ////    }
                    ////}
                    ////else if (controlType == "TerraScan.UI.Controls.TerraScanLinkLabel")
                    ////{
                    ////    Clipboard.SetText(((TerraScanLinkLabel)activeControlType).Text);
                    ////    ((TerraScanLinkLabel)activeControlType).Text = string.Empty;
                    ////}
                }
            }
        }

        /// <summary>
        /// Handles the Click event of the CopyToolStripMenuItem control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        private void CopyToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (contentAreaWorkSpace.ParentMdiForm.ActiveMdiChild != null)
            {
                ArrayList controlNames = this.GetActiveControl();
                if (controlNames != null && controlNames.Count == 2)
                {
                    string controlType = controlNames[0].ToString();
                    object activeControlType = controlNames[1];

                    if (controlType == "TerraScan.UI.Controls.TerraScanTextBox")
                    {
                        ((TerraScanTextBox)activeControlType).Copy();
                    }
                    else if (controlType == "TerraScan.UI.Controls.TerraScanComboBox")
                    {
                        Clipboard.SetText(((TerraScanComboBox)activeControlType).Text);
                    }
                    else if (controlType == "System.Windows.Forms.DataGridViewTextBoxEditingControl")
                    {
                        ((DataGridViewTextBoxEditingControl)activeControlType).Copy();
                    }
                    else if (controlType == "System.Windows.Forms.DataGridViewComboBoxEditingControl")
                    {
                        Clipboard.SetText(((DataGridViewComboBoxEditingControl)activeControlType).Text);
                    }
                    else if (controlType == "Infragistics.Win.EmbeddableTextBoxWithUIPermissions")
                    {
                        ////SendKeys.Send("{CTRL C}");
                        ////((DataGridViewTextBoxEditingControl)activeControlType).Copy();
                    }
                }
            }
        }

        /// <summary>
        /// Handles the Click event of the PasteToolStripMenuItem control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        private void PasteToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (contentAreaWorkSpace.ParentMdiForm.ActiveMdiChild != null)
            {
                ArrayList controlNames = this.GetActiveControl();
                if (controlNames != null && controlNames.Count == 2)
                {
                    string controlType = controlNames[0].ToString();
                    object activeControlType = controlNames[1];

                    if (controlType == "TerraScan.UI.Controls.TerraScanTextBox")
                    {
                        ((TerraScanTextBox)activeControlType).Paste();
                    }
                    else if (controlType == "System.Windows.Forms.DataGridViewTextBoxEditingControl")
                    {
                        ((DataGridViewTextBoxEditingControl)activeControlType).Paste();
                    }
                }
            }
        }

        /// <summary>
        /// Handles the Click event of the CascadeToolStripMenuItem control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        private void CascadeToolStripMenuItem_Click(object sender, EventArgs e)
        {
            LayoutMdi(MdiLayout.Cascade);
        }

        /// <summary>
        /// Handles the Click event of the TileVerticleToolStripMenuItem control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        private void TileVerticleToolStripMenuItem_Click(object sender, EventArgs e)
        {
            LayoutMdi(MdiLayout.TileVertical);
        }

        /// <summary>
        /// Handles the Click event of the TileHorizontalToolStripMenuItem control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        private void TileHorizontalToolStripMenuItem_Click(object sender, EventArgs e)
        {
            LayoutMdi(MdiLayout.TileHorizontal);
        }

        /// <summary>
        /// Handles the Click event of the ArrangeIconsToolStripMenuItem control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        private void ArrangeIconsToolStripMenuItem_Click(object sender, EventArgs e)
        {
            LayoutMdi(MdiLayout.ArrangeIcons);
        }

        /// <summary>
        /// Handles the Click event of the CloseAllToolStripMenuItem control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        private void CloseAllToolStripMenuItem_Click(object sender, EventArgs e)
        {
            foreach (Form childForm in MdiChildren)
            {
                childForm.Close();
            }
        }

        /// <summary>
        /// Handles the Click event of the AboutToolStripMenuItem control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        private void AboutToolStripMenuItem_Click(object sender, EventArgs e)
        {
            AboutBox aboutBox = new AboutBox();
            aboutBox.ShowDialog();
        }

        /// <summary>
        /// Handles the Click Event for the loginOutToolStripMenuItem
        /// </summary>
        /// <param name="sender">sender as menustrip</param>
        /// <param name="e">EventArgs</param>
        private void LogInOutToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (MessageBox.Show(TerraScan.Utilities.SharedFunctions.GetResourceString("Logout"), ConfigurationWrapper.ApplicationName, MessageBoxButtons.YesNo, MessageBoxIcon.Question) != DialogResult.No)
            {
                if (MyServiceHost.myServiceHost.State == CommunicationState.Opened)
                {
                    MyServiceHost.StopService();
                }

                Application.ExitThread();
                Application.Exit();
                Application.Restart();
            }
        }

        /// <summary>
        /// Handles the Click Event for the exitToolStripMenuItem
        /// </summary>
        /// <param name="sender">sender as menustrip</param>
        /// <param name="e">EventArgs</param>
        private void ExitToolStripMenuItem_Click(object sender, EventArgs e)
        {
            ////this.MainForm_FormClosing(this, new FormClosingEventArgs(CloseReason.UserClosing, true));
            if (MessageBox.Show(TerraScan.Utilities.SharedFunctions.GetResourceString("Exit"), ConfigurationWrapper.ApplicationName, MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes)
            {
                if (MyServiceHost.myServiceHost.State == CommunicationState.Opened)
                {
                    MyServiceHost.StopService();
                }

                Application.ExitThread();
            }
        }

        /// <summary>
        /// To close the currently Active Window
        /// </summary>
        /// <param name="sender">Sender</param>
        /// <param name="e">e</param>
        private void CloseToolStripMenuItem_Click(object sender, EventArgs e)
        {
            foreach (Form currentForm in this.contentAreaWorkSpace.ParentMdiForm.MdiChildren)
            {
                if (contentAreaWorkSpace.ParentMdiForm.ActiveMdiChild == currentForm)
                {
                    currentForm.Close();
                    break;
                }
            }
        }

        /// <summary>
        /// Gets the name and type of the Active control
        /// </summary>
        /// <returns>ArrayList</returns>
        private ArrayList GetActiveControl()
        {
            ArrayList controlNames = new ArrayList();
            object activeControlType = null;
            object controlType = null;
            try
            {
                if (contentAreaWorkSpace.ParentMdiForm.ActiveMdiChild.ActiveControl != null)
                {
                    ////If the active controls is a form Master then an user control is placed inside the from as slice
                    if (contentAreaWorkSpace.ParentMdiForm.ActiveMdiChild.ActiveControl.ToString() == "D9030.F9030")
                    {
                        if (((UserControl)contentAreaWorkSpace.ParentMdiForm.ActiveMdiChild.ActiveControl).ActiveControl.GetType().FullName.StartsWith("Terrascan T2") || ((UserControl)contentAreaWorkSpace.ParentMdiForm.ActiveMdiChild.ActiveControl).ActiveControl.GetType().FullName.StartsWith("System"))
                        {
                            activeControlType = ((UserControl)contentAreaWorkSpace.ParentMdiForm.ActiveMdiChild.ActiveControl).ActiveControl;
                            controlType = ((UserControl)contentAreaWorkSpace.ParentMdiForm.ActiveMdiChild.ActiveControl).ActiveControl.GetType().FullName;
                        }
                        else
                        {
                            activeControlType = ((UserControl)((UserControl)contentAreaWorkSpace.ParentMdiForm.ActiveMdiChild.ActiveControl).ActiveControl).ActiveControl;
                            controlType = ((UserControl)((UserControl)contentAreaWorkSpace.ParentMdiForm.ActiveMdiChild.ActiveControl).ActiveControl).ActiveControl.GetType().FullName;
                        }
                    }
                    ////For normal left nav forms
                    else
                    {
                        if (contentAreaWorkSpace.ParentMdiForm.ActiveMdiChild.ActiveControl.GetType().FullName.StartsWith("Terrascan T2") || contentAreaWorkSpace.ParentMdiForm.ActiveMdiChild.ActiveControl.GetType().FullName.StartsWith("System"))
                        {
                            activeControlType = contentAreaWorkSpace.ParentMdiForm.ActiveMdiChild.ActiveControl;
                            controlType = contentAreaWorkSpace.ParentMdiForm.ActiveMdiChild.ActiveControl.GetType().FullName;
                        }
                        else
                        {
                            activeControlType = ((UserControl)contentAreaWorkSpace.ParentMdiForm.ActiveMdiChild.ActiveControl).ActiveControl;
                            controlType = ((UserControl)contentAreaWorkSpace.ParentMdiForm.ActiveMdiChild.ActiveControl).ActiveControl.GetType().FullName;
                            ////If the user control is Receipt engine
                            if (activeControlType.ToString() == "TerraScan.ReceiptEngine.ReceiptEngineUserControl")
                            {
                                activeControlType = ((ReceiptEngineUserControl)((UserControl)contentAreaWorkSpace.ParentMdiForm.ActiveMdiChild.ActiveControl).ActiveControl).ActiveControl;
                                controlType = ((ReceiptEngineUserControl)((UserControl)contentAreaWorkSpace.ParentMdiForm.ActiveMdiChild.ActiveControl).ActiveControl).ActiveControl.GetType().FullName;
                            }
                            ////If the user control is payment engine
                            else if (activeControlType.ToString() == "TerraScan.PaymentEngine.PaymentEngineUserControl")
                            {
                                activeControlType = ((PaymentEngineUserControl)((UserControl)contentAreaWorkSpace.ParentMdiForm.ActiveMdiChild.ActiveControl).ActiveControl).ActiveControl;
                                controlType = ((PaymentEngineUserControl)((UserControl)contentAreaWorkSpace.ParentMdiForm.ActiveMdiChild.ActiveControl).ActiveControl).ActiveControl.GetType().FullName;
                            }
                        }
                    }
                }

                if (controlType != null && activeControlType != null)
                {
                    controlNames.Add(controlType);
                    controlNames.Add(activeControlType);
                }

                return controlNames;
            }
            catch (Exception exception)
            {
                return null;
            }
        }
        #endregion

        #region Public Methods

        /// <summary>
        /// Method will Occur when SmartPart Activated then Setting the Active Link Color to LinkLables
        /// </summary>
        /// <param name="sender">sender as SmartPart</param>
        /// <param name="e">SmartPart EventArgs</param>
        private void ContentAreaWorkSpace_SmartPartActivated(object sender, WorkspaceEventArgs e)
        {
            UserControl mycntrl = (UserControl)e.SmartPart;
            string formNameInstance = e.SmartPart.GetType().Name.ToString();
            string dllNameInstance = e.SmartPart.GetType().Assembly.GetName().Name.ToString();
            ////string activeFormInstance = dllNameInstance + "." + formNameInstance;
            string activeFormInstance = mycntrl.Tag.ToString();
            this.form = Convert.ToInt32(mycntrl.Tag);
            this.CheckActiveWindowForm(activeFormInstance);
            this.SetActiveLinkColor(this, new DataEventArgs<string>(activeFormInstance));
        }

        /// <summary>
        /// Event Handles the SmartPartClose
        /// </summary>
        /// <param name="sender">sender as SmartPart</param>
        /// <param name="e">smartPart Event Args</param>
        private void ContentAreaWorkSpace_SmartPartClosing(object sender, WorkspaceCancelEventArgs e)
        {
            try
            {
                this.formName = e.SmartPart.GetType().Name.ToString();
                this.dllName = e.SmartPart.GetType().Assembly.GetName().Name.ToString();
                this.activeForm = this.dllName + "." + this.formName;
                this.workitemName = this.formName.Trim() + "WorkItem";
                if (string.IsNullOrEmpty(TerraScanCommon.FormName))
                {
                    e.Cancel = true;
                }
                else
                {
                    WorkItem currentWorkItem = (WorkItem)this.mainFormControll.WorkItem.Items.Get(this.form.ToString());
                    currentWorkItem.State["FormStatus"] = true;
                    ////this.GetFormStatus(this, new DataEventArgs<string>(this.formName));
                    if ((bool)currentWorkItem.State["FormStatus"] == true)
                    {
                        UserControl smartPart = (UserControl)currentWorkItem.SmartParts.Get(this.formName);
                        TerraScanCommon.FormName = this.formName;
                        //Added by purushotha to check the null object 1-Dec-2014
                        if (smartPart != null && smartPart.Tag != null)
                        {
                            this.form = Convert.ToInt32(smartPart.Tag);
                        }
                        
                        currentWorkItem.SmartParts.Remove(smartPart);
                        this.mainFormControll.SetActiveForms(this.form, 0);
                        this.SetActiveWindowsMenu();
                        try
                        {
                            this.FormActivateEvent(this, new DataEventArgs<string>("0"));
                        }
                        catch
                        {
                        }
                        if (this.contentAreaWorkSpace.ParentMdiForm.MdiChildren.GetLength(0) <= 1)
                        {
                            this.SetActiveLinkColor(this, new DataEventArgs<string>("0"));
                        }
                    }
                    else
                    {
                        e.Cancel = true;
                        TerraScanCommon.FormName = string.Empty;
                    }
                }
            }
            catch (Exception ex)
            {
            }
        }

        #endregion

        #region Private Methods

        /// <summary>
        /// Gets the count of the particular process running behind
        /// </summary>
        /// <param name="strProcessName">strProcessName - Name of the process running behind</param>
        /// <returns>int</returns>
        private int FindProcessByName(string strProcessName)
        {
            int count = 0;
            IntPtr handleOfToProcess = IntPtr.Zero;

            Process[] p = Process.GetProcesses();

            foreach (Process p1 in p)
            {
                Debug.WriteLine(p1.ProcessName.ToUpper());

                if (p1.ProcessName.ToUpper() == strProcessName.ToUpper())
                {
                    count++;
                    handleOfToProcess = p1.MainWindowHandle;
                    if (count > 1)
                    {
                        break;
                    }
                }
            }

            return count;
        }

        /// <summary>
        /// creates the terraScanMenu based on userId and applicationId
        /// </summary>
        /// <param name="terraScanMenuDataSet">DataSet Which Holds the terraScanMenu Items</param>
        private void CreateTerraScanMenu(DataSet terraScanMenuDataSet)
        {
            string form;
            string formFile;
            string menuName;
            string menuGroup;
            bool flagWithKeyId;
            int menuGroupId = -1;
            int itemIndex = 2;
            int permissionOpen = -1;
            this.terraScanToolStripMenuItemCollection.Clear();
            for (int tabelCount = 0; tabelCount < terraScanMenuDataSet.Tables.Count; tabelCount++)
            {
                if (terraScanMenuDataSet.Tables[tabelCount].Rows.Count > 0)
                {
                    TerraScanToolStripMenuItem toolStripMenuItem = new TerraScanToolStripMenuItem();
                    this.windowsToolStripMenuItem = new TerraScanToolStripMenuItem();
                    int locationY = 36;
                    menuGroupId = Convert.ToInt32(terraScanMenuDataSet.Tables[tabelCount].Rows[0]["MenuGroupID"]);
                    menuGroup = terraScanMenuDataSet.Tables[tabelCount].Rows[0]["MenuGroup"].ToString();
                    menuName = terraScanMenuDataSet.Tables[tabelCount].Rows[0]["MenuName"].ToString();

                    //// Calling Method for Inserting Menu
                    if (!menuGroupId.Equals(99))
                    {
                        toolStripMenuItem = this.CreateMenu(menuGroup, itemIndex);
                        this.terraScanToolStripMenuItemCollection.Add(toolStripMenuItem);
                        itemIndex += 1;
                        for (int itemCount = 0; itemCount < terraScanMenuDataSet.Tables[tabelCount].Rows.Count; itemCount++)
                        {
                            menuName = terraScanMenuDataSet.Tables[tabelCount].Rows[itemCount]["MenuName"].ToString();
                            formFile = terraScanMenuDataSet.Tables[tabelCount].Rows[itemCount]["FormFile"].ToString();
                            form = terraScanMenuDataSet.Tables[tabelCount].Rows[itemCount]["Form"].ToString();


                            if (!string.IsNullOrEmpty(terraScanMenuDataSet.Tables[tabelCount].Rows[itemCount]["IsKeyOpenDefault"].ToString()))
                            {
                                flagWithKeyId = Convert.ToBoolean(terraScanMenuDataSet.Tables[tabelCount].Rows[itemCount]["IsKeyOpenDefault"].ToString());
                            }
                            else
                            {
                                flagWithKeyId = false;
                            }
                            if (!string.IsNullOrEmpty(menuName))
                            {
                                permissionOpen = Convert.ToInt32(terraScanMenuDataSet.Tables[tabelCount].Rows[itemCount]["IsPermissionOpen"]);
                                this.AddMenuItem(menuName, form, formFile, toolStripMenuItem, permissionOpen, flagWithKeyId);
                                locationY += 16;
                            }
                        }
                    }
                }
            }
            //// if there is no  record 
            //// don't create window menu
            if (terraScanMenuDataSet.Tables.Count > 0)
            {
                this.windowsToolStripMenuItem = this.CreateMenu("Windows", itemIndex);
            }
        }

        /// <summary>
        /// Handles the Click event of the PannelLinkLabel control.
        /// </summary>
        /// <param name="mainMenuName">mainMenuName</param>
        /// <param name="itemIndex">index of The WindowsMenu</param>
        /// <returns>toolStripMenuItem</returns>
        private TerraScanToolStripMenuItem CreateMenu(string mainMenuName, int itemIndex)
        {
            TerraScanToolStripMenuItem toolStripMenuItem = new TerraScanToolStripMenuItem();
            toolStripMenuItem.Name = mainMenuName;

            if (mainMenuName.ToLower().StartsWith("e") || mainMenuName.ToLower().StartsWith("f") || mainMenuName.ToLower().StartsWith("h"))
            {
                toolStripMenuItem.Text = mainMenuName;
            }
            else
            {
                toolStripMenuItem.Text = "&" + mainMenuName;
            }

            toolStripMenuItem.Size = new System.Drawing.Size(35, 20);
            this.menuStrip.Items.Insert(itemIndex, toolStripMenuItem);
            return toolStripMenuItem;
        }

        /// <summary>
        /// Adding The Menu Item to Corresponding Menu
        /// </summary>
        /// <param name="menuName">menuName to display</param>
        /// <param name="form">form id</param>
        /// <param name="formFile">formFile</param>
        /// <param name="toolStripMenuItem">Name of the menu where menuItem can Add</param>
        /// <param name="permissionOpen">permissionOpen</param>
        /// <param name="flagWithKeyId">flagWithKeyId</param>
        private void AddMenuItem(string menuName, string form, string formFile, TerraScanToolStripMenuItem toolStripMenuItem, int permissionOpen, bool flagWithKeyId)
        {
            TerraScanToolStripMenuItem terraScanMenuItem = new TerraScanToolStripMenuItem();
            terraScanMenuItem.Text = "&" + menuName;
            terraScanMenuItem.Name = form;
            terraScanMenuItem.FormId = Convert.ToInt32(form);
            terraScanMenuItem.AccessibleName = formFile;
            terraScanMenuItem.PermissionOpen = permissionOpen;
            terraScanMenuItem.Tag = flagWithKeyId;
            terraScanMenuItem.Size = new System.Drawing.Size(141, 22);
            terraScanMenuItem.Click += new EventHandler(this.TerraScanMenuItem_Click);
            toolStripMenuItem.DropDownItems.Add(terraScanMenuItem);
        }

        /// <summary>
        /// Handles the Click event of the MenuItem.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        private void TerraScanMenuItem_Click(object sender, EventArgs e)
        {
            bool setParameter = false;
            TerraScanToolStripMenuItem srcToolStripMenuItem = (TerraScanToolStripMenuItem)sender;
            FormInfo formInfo;
            formInfo = TerraScanCommon.GetFormInfo(srcToolStripMenuItem.FormId);
            if ((srcToolStripMenuItem.Tag != null) && bool.TryParse(srcToolStripMenuItem.Tag.ToString(), out setParameter))
            {
                if (setParameter)
                {
                    formInfo.optionalParameters = new object[1];
                    formInfo.optionalParameters[0] = 999; //-1;//modified by purushotham instead of 999 passed -1
                }
            }

            WorkItem moduleWorkItem = new WorkItem();
            UserControl childForm = new UserControl();
            string displayFormName = formInfo.formFile.Substring((formInfo.formFile.LastIndexOf(".") + 1), (formInfo.formFile.Length - formInfo.formFile.LastIndexOf(".") - 1));
            moduleWorkItem = (WorkItem)this.mainFormControll.WorkItem.Items.Get(formInfo.form.ToString());
            bool isFieldUser = TerraScanCommon.IsFieldUser;
            bool isDatabaseAvailable = TerraScanCommon.IsDataBaseAvailable ;
            bool isOnLineMode = WSHelper.IsOnLineMode;
            bool isShowForm = false;          

            if (isFieldUser && isOnLineMode && formInfo.form == 3230)
            {
                isShowForm = true;
                this.ShowForm(this, new DataEventArgs<FormInfo>(formInfo));
            }
            else if ((isFieldUser && isDatabaseAvailable))
            {
                isShowForm = true;
                this.ShowForm(this, new DataEventArgs<FormInfo>(formInfo));
            }
            else if ((((isFieldUser && isOnLineMode && !isDatabaseAvailable) && formInfo.form != 3230))
                || ((!isFieldUser && isOnLineMode) && formInfo.form == 3230))
                MessageBox.Show(SharedFunctions.GetResourceString("PermissionCheck"), ConfigurationWrapper.ApplicationName, MessageBoxButtons.OK, MessageBoxIcon.Error);
            else if ((!isFieldUser && isOnLineMode) && formInfo.form != 3230)
            {
                isShowForm = true;
                this.ShowForm(this, new DataEventArgs<FormInfo>(formInfo));
            }
            if (isDatabaseAvailable && isFieldUser)
            {
                WSHelper.IsOnLineMode = false;
            }
            else
            {
                WSHelper.IsOnLineMode = true;
            }
            if (isShowForm && moduleWorkItem != null)
            {
                childForm = (UserControl)moduleWorkItem.SmartParts.Get(displayFormName);
                if (childForm != null)
                {
                    this.FormMaster_FormVisibility(false);

                    //bool camaLoaded = false;

                    //foreach (Form f in this.MdiChildren)
                    //{
                    //    if (f.Name.Equals("CamaSketh"))
                    //    {
                    //        f.SendToBack();
                    //        camaLoaded = true;
                    //    }

                    //}

                    this.contentAreaWorkSpace.Activate(childForm);

                    //if (camaLoaded)
                    //{
                    //   // ((Form)childForm.ParentForm).WindowState = FormWindowState.Maximized;
                    //}

                    this.FormMaster_FormVisibility(true);
                }
                else
                {
                    this.DisplayConetentArea(formInfo);
                }
            }
            else if (isShowForm)
            {
                this.DisplayConetentArea(formInfo);
            }

            ////if (srcToolStripMenuItem.PermissionOpen == 1)
            ////{
            ////    string menuFormName = srcToolStripMenuItem.AccessibleName.ToString();
            ////    int form = srcToolStripMenuItem.FormId;
            ////    this.ShowForm(menuFormName.Trim(), srcToolStripMenuItem.Text.Replace("&", ""));
            ////}
            ////else
            ////{
            ////    MessageBox.Show(SharedFunctions.GetResourceString("FormOpenPermission") + srcToolStripMenuItem.Text.Replace("&", "") + " Form",ConfigurationWrapper.ApplicationName , MessageBoxButtons.OK, MessageBoxIcon.Information);
            ////}
        }

        /// <summary>
        /// Shows The Form.
        /// </summary>
        /// <param name="showFormName">Name of the show form.</param>
        /// <param name="visibleFormName">display Name of the Form as String.</param>
        private void ShowForm(string showFormName, string visibleFormName)
        {
            try
            {
                FormInfo formInfo;
                formInfo.form = 0;
                formInfo.openPermission = 0;
                formInfo.addPermission = 0;
                formInfo.editPermission = 0;
                formInfo.deletePermission = 0;
                formInfo.formFile = showFormName;
                formInfo.visibleName = visibleFormName;
                formInfo.optionalParameters = null;
                this.DisplayConetentArea(formInfo);
            }
            catch (Exception ex)
            {
                ExceptionManager.ManageException(SharedFunctions.GetResourceString("ErrorLoadingForm"), ex, ExceptionManager.ActionType.Display, this);
            }
        }

        /// <summary>
        /// Handles the FormClosing event of the MainForm control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="T:System.Windows.Forms.FormClosingEventArgs"/> instance containing the event data.</param>
        private void MainForm_FormClosing(object sender, FormClosingEventArgs e)
        {
            try
            {
                if (!this.formClosing)
                {
                    if (!(bool)this.mainFormControll.WorkItem.State["userclosing"])
                    {
                        TerraScanCommon.IsApexAvail = false;
                        this.ApexLogOutEvent(this, new DataEventArgs<bool>(true));
                        if (!TerraScanCommon.IsApexAvail)
                        {
                            if (!e.CloseReason.Equals(CloseReason.ApplicationExitCall))
                            {
                                if (MessageBox.Show(TerraScan.Utilities.SharedFunctions.GetResourceString("Exit"), ConfigurationWrapper.ApplicationName, MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.No)
                                {
                                    e.Cancel = true;
                                }
                                else
                                {
                                    if (MyServiceHost.myServiceHost.State == CommunicationState.Opened)
                                    {
                                        MyServiceHost.StopService();
                                    }

                                    this.IdleTimer.Stop();
                                    Application.Exit();
                                    e.Cancel = false;
                                }
                            }
                        }

                        else
                        {
                            MessageBox.Show("Please close the Apex Application to Exit", "Terrascan T2", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                            e.Cancel = true;
                        }

                    }
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.InnerException.ToString());
            }
        }

        /// <summary>
        /// Method to Create Each LinkLabel For Active Child Window
        /// </summary>
        /// <param name="locationY">Position of LinkLabel Where to Insert</param>
        /// <param name="displayName">Display Name</param>
        /// <param name="accessName">Access Name</param>
        /// <returns>windowLinkLabel</returns>
        private LinkLabel CreateWindowLinkLabel(int locationY, string displayName, string accessName)
        {
            //// Creating a new windowLinkLabel 

            this.windowLinkLabel = new LinkLabel();

            ////set the properties of LinkLable

            this.windowLinkLabel.Text = displayName;
            this.windowLinkLabel.Name = accessName;
            this.windowLinkLabel.AccessibleName = accessName;
            this.windowLinkLabel.ActiveLinkColor = System.Drawing.Color.LightSkyBlue;
            this.windowLinkLabel.BackColor = System.Drawing.Color.Transparent;
            this.windowLinkLabel.LinkBehavior = LinkBehavior.HoverUnderline;

            ////this.windowLinkLabel.Font = new System.Drawing.Font("Arial", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));

            this.windowLinkLabel.Font = new System.Drawing.Font("Arial", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)0));
            this.windowLinkLabel.ImageAlign = System.Drawing.ContentAlignment.MiddleLeft;
            this.windowLinkLabel.LinkColor = System.Drawing.Color.Black;
            this.windowLinkLabel.Location = new System.Drawing.Point(8, locationY);
            this.windowLinkLabel.Size = new System.Drawing.Size(128, 16);
            this.windowLinkLabel.TabIndex = 8;
            this.windowLinkLabel.TabStop = true;
            this.windowLinkLabel.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;

            return this.windowLinkLabel;
        }

        /// <summary>
        /// Method Will Set the Active Windows Menu
        /// </summary>
        private void SetActiveWindowsMenu()
        {
            string displayName, accessName;
            string form;
            bool flagWithKeyId;
            int activeMenuCount = 0;
            this.windowsToolStripMenuItem.DropDownItems.Clear();
            DataSet menuDataSet = (DataSet)this.mainFormControll.WorkItem.State["FormItemsDataSet"];
            foreach (DataTable table in menuDataSet.Tables)
            {
                foreach (DataRow row in table.Rows)
                {
                    if (int.Equals((int)(row["Active"]), 1))
                    {
                        displayName = row["MenuName"].ToString();
                        ////accessName = row["FormFile"].ToString();
                        accessName = row["FormFile"].ToString();
                        ////permissionOpen = Convert.ToInt32(row["IsPermissionOpen"]);
                        form = row["Form"].ToString();
                        flagWithKeyId = Convert.ToBoolean(row["IsKeyOpenDefault"].ToString());
                        this.AddMenuItem(displayName, form, accessName, this.windowsToolStripMenuItem, 1, flagWithKeyId);
                        activeMenuCount += 1;
                    }
                }
            }

            this.mainFormControll.WorkItem.State["ActiveMenuCount"] = activeMenuCount;
        }

        /// <summary>
        /// Loads the module.
        /// </summary>
        /// <param name="ModuleIndex">Index of the module.</param>
        private Assembly LoadModule(string assemblyName)
        {
            assemblyName = string.Concat(assemblyName, ".dll");

            //// check the assemly in the loaded modules
            if (!CheckModuleLoaded(assemblyName))
            {
                IModuleInfo[] objModuleInfo = new IModuleInfo[1];
                ModuleInfo moduleInfo = new ModuleInfo(assemblyName);
                objModuleInfo[0] = moduleInfo;
                ////load the module and add it to rootWorkItem using moduleLoaderService
                this.mainFormControll.WorkItem.Services.Get<IModuleLoaderService>().Load(this.mainFormControll.WorkItem, objModuleInfo);
            }

            ////enumerate the loaded modules in the application and get the assembly
            IList<LoadedModuleInfo> listLoadedModules;
            listLoadedModules = this.mainFormControll.WorkItem.Services.Get<IModuleLoaderService>().LoadedModules;
            foreach (LoadedModuleInfo loadedModule in listLoadedModules)
            {
                if (loadedModule.Assembly.ManifestModule.Name.Equals(assemblyName))
                {
                    return loadedModule.Assembly;
                }
            }

            return null;
        }

        /// <summary>
        /// Checks the module loaded.
        /// </summary>
        /// <param name="module">The module.</param>
        /// <returns></returns>
        private bool CheckModuleLoaded(string assemblyName)
        {
            IList<LoadedModuleInfo> listLoadedModules;

            ////enumerate the loaded modules and check for the assembly exists
            listLoadedModules = this.mainFormControll.WorkItem.Services.Get<IModuleLoaderService>().LoadedModules;
            foreach (LoadedModuleInfo loadedModule in listLoadedModules)
            {
                if (loadedModule.Assembly.ManifestModule.Name.Equals(assemblyName)) return true;
            }
            return false;
        }

        /// <summary>
        /// Forms the master_ reduce flicker.
        /// </summary>
        /// <param name="isVisible">if set to <c>true</c> [is visible].</param>
        private void FormMaster_FormVisibility(bool isVisible)
        {
            EnablePanelEventArgs visibleInfo;
            visibleInfo.IsSlice = false;
            visibleInfo.IsVisible = isVisible;
            this.OnFormMaster_VisibleForms(this, new DataEventArgs<EnablePanelEventArgs>(visibleInfo));
        }

        /// <summary>
        /// On keypress Show form based on the configured form number from tTS_QuickLaunch 
        /// </summary>
        /// <param name="functionKey">The function key.</param>
        private void FunctionKeyShowForm(string functionKey)
        {
            try
            {
                this.Cursor = Cursors.WaitCursor;
                SupportFormData.GetFormDetailsDataTable getFormDetailsDataDetails = new SupportFormData.GetFormDetailsDataTable();
                SupportFormData.FormCallTranslateDataTable getFormCallTranslateDetails = new SupportFormData.FormCallTranslateDataTable();
                PermissionFields permissions;
                int formNumber = 0;

                // Get configured form master number from tTS_QuickLaunch for specific key press
                if (TerraScanCommon.formPermissionsDataSet.Tables.Count > 1 && TerraScanCommon.formPermissionsDataSet.Tables[1].Rows.Count > 0)
                {
                    int.TryParse(TerraScanCommon.formPermissionsDataSet.Tables[1].Rows[0][functionKey].ToString(), out formNumber);
                }

                // Get form details for specific form master 
                getFormCallTranslateDetails = this.mainFormControll.WorkItem.GetTranslatedFormDetails(formNumber, null);
                if (getFormCallTranslateDetails.Rows.Count > 0 && formNumber > 0)
                {
                    int.TryParse(getFormCallTranslateDetails.Rows[0][0].ToString(), out formNumber);
                    getFormDetailsDataDetails = this.mainFormControll.WorkItem.GetFormDetails(formNumber, TerraScanCommon.UserId);
                    if (getFormDetailsDataDetails.Rows.Count > 0)
                    {
                        permissions.newPermission = Convert.ToBoolean(getFormDetailsDataDetails.Rows[0][getFormDetailsDataDetails.IsPermissionAddColumn.ColumnName].ToString());
                        permissions.openPermission = Convert.ToBoolean(getFormDetailsDataDetails.Rows[0][getFormDetailsDataDetails.IsPermissionOpenColumn.ColumnName].ToString());
                        permissions.editPermission = Convert.ToBoolean(getFormDetailsDataDetails.Rows[0][getFormDetailsDataDetails.IsPermissionEditColumn.ColumnName].ToString());
                        permissions.deletePermission = Convert.ToBoolean(getFormDetailsDataDetails.Rows[0][getFormDetailsDataDetails.IsPermissionDeleteColumn.ColumnName].ToString());

                        // Show the form if the user have proper permission
                        if (permissions.openPermission && Convert.ToBoolean(getFormDetailsDataDetails.Rows[0][getFormDetailsDataDetails.IsPermissionMenuColumn.ColumnName].ToString()))
                        {
                            FormInfo getPermissionForm = TerraScanCommon.GetFormInfo(formNumber);
                            getPermissionForm.optionalParameters = new object[6];

                            // Set 999 as keyid for some forms which IsKeyOpenDefault( from tts_formsandwich table) flag is true
                            string expressionString = "Form = " + formNumber + " AND IsKeyOpenDefault = True";
                            DataRow[] filterdRow = null;
                            for (int tableCount = 0; tableCount < this.MenuItemsDataSet.Tables.Count; tableCount++)
                            {
                                filterdRow = this.MenuItemsDataSet.Tables[tableCount].Select(expressionString);
                                if (filterdRow.Length > 0)
                                {
                                    getPermissionForm.optionalParameters[0] = 999;
                                    break;
                                }
                            }

                            // Parameter for permissions
                            getPermissionForm.optionalParameters[4] = permissions;

                            // User Id parameter
                            getPermissionForm.optionalParameters[5] = TerraScanCommon.UserId;

                            // Show form 
                            this.ShowForm(this, new DataEventArgs<FormInfo>(getPermissionForm));
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                ExceptionManager.ManageException(ex, ExceptionManager.ActionType.Display, this.ParentForm);
            }
            finally
            {
                this.Cursor = Cursors.Default;
            }
        }

        #endregion

        #region Bar Code
        ////private long ApplicationHours, ApplicationMinutes, ApplicationSeconds;
        ////int val;
        ////bool test = true;

        /// <summary>
        /// Handles the Tick event of the Clock control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        private void Clock_Tick(object sender, EventArgs e)
        {
            ////throw new Exception("The method or operation is not implemented.");
            this.clock.Stop();
            this.clock.Dispose();
            MessageBox.Show("Barcode reader session timed out", ConfigurationWrapper.ApplicationName + " - Time Out", MessageBoxButtons.OK, MessageBoxIcon.Error);
            this.ctrlf3 = false;
        }
        #endregion

        /// <summary>
        /// Handles the Click event of the editMenu control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        private void editMenu_Click(object sender, EventArgs e)
        {
            try
            {
                if (contentAreaWorkSpace.ParentMdiForm.ActiveMdiChild != null)
                {
                    ArrayList controlNames = this.GetActiveControl();
                    if (controlNames != null && controlNames.Count == 2)
                    {
                        string controlType = controlNames[0].ToString();
                        object activeControlType = controlNames[1];

                        if (controlType == "TerraScan.UI.Controls.TerraScanTextBox")
                        {
                            this.copyCtrlCToolStripMenuItem.Enabled = true;
                            this.cutCtrlXToolStripMenuItem.Enabled = true;
                        }
                        else if (controlType == "TerraScan.UI.Controls.TerraScanComboBox")
                        {
                            this.copyCtrlCToolStripMenuItem.Enabled = true;
                            this.cutCtrlXToolStripMenuItem.Enabled = true;
                        }
                        else if (controlType == "System.Windows.Forms.DataGridViewTextBoxEditingControl")
                        {
                            this.copyCtrlCToolStripMenuItem.Enabled = true;
                            this.cutCtrlXToolStripMenuItem.Enabled = true;
                        }
                        else if (controlType == "System.Windows.Forms.DataGridViewComboBoxEditingControl")
                        {
                            this.copyCtrlCToolStripMenuItem.Enabled = true;
                            this.cutCtrlXToolStripMenuItem.Enabled = true;
                        }
                        else if (controlType == "Infragistics.Win.EmbeddableTextBoxWithUIPermissions")
                        {
                            this.copyCtrlCToolStripMenuItem.Enabled = true;
                            this.cutCtrlXToolStripMenuItem.Enabled = true;
                        }
                        else if (controlType == "TerraScan.ReceiptEngine.ReceiptEngineUserControl")
                        {
                            this.copyCtrlCToolStripMenuItem.Enabled = true;
                            this.cutCtrlXToolStripMenuItem.Enabled = true;
                        }
                        ////If the user control is payment engine
                        else if (controlType == "TerraScan.PaymentEngine.PaymentEngineUserControl")
                        {
                            this.copyCtrlCToolStripMenuItem.Enabled = true;
                            this.cutCtrlXToolStripMenuItem.Enabled = true;
                        }
                        else
                        {
                            this.copyCtrlCToolStripMenuItem.Enabled = false;
                            this.cutCtrlXToolStripMenuItem.Enabled = false;
                        }
                    }
                }
                else
                {
                    this.copyCtrlCToolStripMenuItem.Enabled = false;
                    this.cutCtrlXToolStripMenuItem.Enabled = false;
                }
            }
            catch (Exception ex)
            {

            }
        }

        private void IdleTimer_Tick(object sender, EventArgs e)
        {
            WSHelper.AwakeWCFService("Success");
        }

        private void privacyStatementToolStripMenuItem_Click(object sender, EventArgs e)
        {
            string privacyURL = string.Empty;
            CommentsData getPrivacyURL = new CommentsData();
            getPrivacyURL = this.mainFormControll.WorkItem.GetConfigDetails("TS_PrivacyStmtURL");
            if (getPrivacyURL.GetCommentsConfigDetails.Rows.Count > 0)
            {
                if (!string.IsNullOrEmpty(getPrivacyURL.GetCommentsConfigDetails.Rows[0][getPrivacyURL.GetCommentsConfigDetails.ConfigurationValueColumn].ToString()))
                {
                    privacyURL = Convert.ToString(getPrivacyURL.GetCommentsConfigDetails.Rows[0][getPrivacyURL.GetCommentsConfigDetails.ConfigurationValueColumn]);
                    string strUrl = privacyURL;
                    Process proc = new Process();
                    ProcessStartInfo startInfo = new ProcessStartInfo(strUrl);
                    proc.StartInfo = startInfo;
                    proc.Start();
                  
                }
            }
        }

        private void helpContextToolStripMenuItem_Click(object sender, EventArgs e)
        {

        }
    }
}
