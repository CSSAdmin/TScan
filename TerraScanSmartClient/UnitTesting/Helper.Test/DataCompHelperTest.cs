
//The following code was generated by Microsoft Visual Studio 2005.
// The test owner should check each test for validity.
// File added for the purpose of Unit Testing AttachmentComp(DataAccessLayer component)
// TODO: Test methods will be added one by one after understanding the functionality 
// The following code was generated by Microsoft Visual Studio 2005.
// The test owner should check each test for validity.
//-------------------------------------------------------------------------------------------
// <copyright file="DataCompHelperTest.cs" company="Congruent">
//     Copyright (c) Congruent Infotech.  All rights reserved.
// </copyright>
// <summary>This file contains Test  methods for all the components</summary>
// Release history
// VERSION	DESCRIPTION
//
//---------------------------------------------------------------------------------------
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.Text;
using System.Collections.Generic;
using System.Data;
using TerraScan.BusinessEntities;
using TerraScan.Helper;
using TerraScan.DalHelper;


namespace Helper.Test
{
    /// <summary>
    ///This is a test class for TerraScan.Helper.WSHelper and is intended
    ///to contain all TerraScan.Helper.WSHelper Unit Tests
    ///</summary>
    [TestClass()]
    public class WSHelperTest
    {


        private TestContext testContextInstance;

        /// <summary>
        ///Gets or sets the test context which provides
        ///information about and functionality for the current test run.
        ///</summary>
        public TestContext TestContext
        {
            get
            {
                return testContextInstance;
            }
            set
            {
                testContextInstance = value;
            }
        }

        #region Additional test attributes
        // 
        //You can use the following additional attributes as you write your tests:
        //
        //Use ClassInitialize to run code before running the first test in the class
        //
        //[ClassInitialize()]
        //public static void MyClassInitialize(TestContext testContext)
        //{
        //}
        //
        //Use ClassCleanup to run code after all tests in a class have run
        //
        //[ClassCleanup()]
        //public static void MyClassCleanup()
        //{
        //}
        //
        //Use TestInitialize to run code before running each test
        //
        //[TestInitialize()]
        //public void MyTestInitialize()
        //{
        //}in

        //
        //Use TestCleanup to run code after each test has run
        //
        //[TestCleanup()]
        //public void MyTestCleanup()
        //{
        //}
        //
        #endregion

        # region SP's Removed

        //        #region NextNumber Configuration (SP's Removed)

        //        //#region List NextNumber Configuration (SP Removed)

        //        ///// <summary>
        //        /////A test for ListNextNumberConfiguration ()
        //        /////</summary>
        //        //[TestMethod()]
        //        //public void ListNextNumberConfigurationTest()
        //        //{
        //        //    NextNumberData actual;

        //        //    actual = TerraScan.Helper.WSHelper.ListNextNumberConfiguration();

        //        //    if (actual == null)
        //        //    {
        //        //        Assert.Fail("No data");
        //        //    }

        //        //}
        //        //#endregion

        //        //#region Check Next Number(SP Removed)

        //        ///// <summary>
        //        /////A test for CheckNextNumber (int, int, string)
        //        /////</summary>
        //        ////[TestMethod()]
        //        //[TestMethod(), DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanUTC;User ID=sa;Password=100%sec", "UpdateNextNumber", DataAccessMethod.Sequential)]
        //        //public void CheckNextNumberTest()
        //        //{
        //        //    int rollYear = (int)testContextInstance.DataRow["rollyear"];

        //        //    int nextNum = (int)testContextInstance.DataRow["nextnum"];

        //        //    string formula = (string)testContextInstance.DataRow["formula"];

        //        //    DataSet actual;

        //        //    actual = TerraScan.Helper.WSHelper.CheckNextNumber(rollYear, nextNum, formula);
        //        //    if (actual == null)
        //        //    {
        //        //        Assert.Fail("No data");
        //        //    }
        //        //}
        //        //#endregion

        //        //#region Update NextNumber ConfigDetails (SP Removed)


        //        ///// <summary>
        //        /////A test for UpdateNextNumberConfigDetails (int, int, string)
        //        /////</summary>
        //        ////[TestMethod()]
        //        //[TestMethod(), DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanUTC;User ID=sa;Password=100%sec", "NextNumber", DataAccessMethod.Sequential)]
        //        //public void UpdateNextNumberConfigDetailsTest()
        //        //{
        //        //    int nextNumId = (int)testContextInstance.DataRow["NextNumID"];

        //        //    int nextNum = (int)testContextInstance.DataRow["NextNumber"];

        //        //    string formula = (string)testContextInstance.DataRow["Formula"];

        //        //    TerraScan.Helper.WSHelper.UpdateNextNumberConfigDetails(nextNumId, nextNum, formula);

        //        //}
        //        //#endregion

        //        #endregion

        //        //  # region GetExciseIndividualTypeTest

        //        //  /// <summary>
        //        //  ///A test for GetExciseIndividualType ()
        //        //  ///</summary>
        //        //  [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "ExciseIndividualType", DataAccessMethod.Sequential), TestMethod()]
        //        //  public void GetExciseIndividualTypeTest()
        //        //  {
        //        //      ExciseIndividualType actual;

        //        //      actual = TerraScan.Helper.WSHelper.GetExciseIndividualType();

        //        //      if (actual == null)
        //        //      {
        //        //          Assert.Fail("No Record found");
        //        //      }
        //        //  }

        //        //  # endregion

        //        //  # region SaveAffiDavitDetailsTest

        //        //  /// <summary>
        //        //  ///A test for SaveAffiDavitDetails (int, string, string, string)
        //        //  ///</summary>
        //        //  [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "Affidavit", DataAccessMethod.Sequential), TestMethod()]
        //        //  public void SaveAffiDavitDetailsTest()
        //        //  {
        //        //      int statementId = (int)testContextInstance.DataRow["StatementID"];

        //        //      string partiesAddress = (string)testContextInstance.DataRow["PartiesAddress"];

        //        //      string parcelDetails = (string)testContextInstance.DataRow["ParcelDetails"];

        //        //      string exciseAffidavitDetails = (string)testContextInstance.DataRow["ExciseAffidavitDetails"];

        //        //      int actual;

        //        //      actual = TerraScan.Helper.WSHelper.SaveAffiDavitDetails(statementId, partiesAddress, parcelDetails, exciseAffidavitDetails);

        //        //      if (actual == 0)
        //        //      {
        //        //          Assert.Fail("Record not saved");
        //        //      }
        //        //  }

        //        //  # endregion

        //        //  # region GetExciseTaxAffidavitDetailsTest

        //        //  /// <summary>
        //        //  ///A test for GetExciseTaxAffidavitDetails (int)
        //        //  ///</summary>
        //        //  [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "Affidavit", DataAccessMethod.Sequential), TestMethod()]
        //        //  public void GetExciseTaxAffidavitDetailsTest()
        //        //  {
        //        //      int statementId = (int)testContextInstance.DataRow["StatementID"];

        //        //      string partiesAddress = (string)testContextInstance.DataRow["PartiesAddress"];

        //        //      string parcelDetails = (string)testContextInstance.DataRow["ParcelDetails"];

        //        //      string exciseAffidavitDetails = (string)testContextInstance.DataRow["ExciseAffidavitDetails"];

        //        //      int actualsave;

        //        //      actualsave = TerraScan.Helper.WSHelper.SaveAffiDavitDetails(statementId, partiesAddress, parcelDetails, exciseAffidavitDetails);

        //        //      if (actualsave == 0)
        //        //      {
        //        //          Assert.Fail("Record not saved");
        //        //      }

        //        //      ExciseTaxAffidavitData actualaffidavit;

        //        //      actualaffidavit = TerraScan.Helper.WSHelper.GetExciseTaxAffidavitDetails(actualsave);

        //        //      if (actualaffidavit == null || actualaffidavit.General.Rows.Count < 1 || actualaffidavit.PartiesHeader.Rows.Count < 1 || actualaffidavit.ParcelHeader.Rows.Count < 1 || actualaffidavit.Affidavit.Rows.Count < 1 || actualaffidavit.AmountDue.Rows.Count < 1 || actualaffidavit.Suppliment.Rows.Count < 1)
        //        //      {
        //        //          Assert.Fail("No Record Found");
        //        //      }
        //        //  }

        //        //  # endregion

        //        //  # region GetDistrictSelectionTest (SP Removed)

        //        //  /// <summary>
        //        //  ///A test for GetDistrictSelection (int)
        //        //  ///</summary>
        //        //  [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "ExciseTaxRate", DataAccessMethod.Sequential), TestMethod()]
        //        //  public void GetDistrictSelectionTest()
        //        //  {
        //        //      int exciseRateId = (int)testContextInstance.DataRow["ExciseRateID"];

        //        //      AffidavitDistrictSelectionData actual;

        //        //      actual = TerraScan.Helper.WSHelper.GetDistrictSelection(exciseRateId);

        //        //      //if (actual == null || actual.Tables.Count < 1 || actual.ListAffidavitDistrictSelection.Rows.Count < 1)
        //        //      //{
        //        //      //    Assert.Fail("No District Found");
        //        //      //}

        //        //  }

        //        //  # endregion

        //        //  # region DeleteAffidavitDetailsTest (SP Removed)

        //        //  /// <summary>
        //        //  ///A test for DeleteAffidavitDetails (int)
        //        //  ///</summary>
        //        //  [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "Affidavit", DataAccessMethod.Sequential), TestMethod()]
        //        //  public void DeleteAffidavitDetailsTest()
        //        //  {
        //        //      int statementId = (int)testContextInstance.DataRow["StatementID"];

        //        //  //string partiesAddress = (string)testContextInstance.DataRow["PartiesAddress"];

        //        //  //string parcelDetails = (string)testContextInstance.DataRow["ParcelDetails"];

        //        //  //string exciseAffidavitDetails = (string)testContextInstance.DataRow["ExciseAffidavitDetails"];

        //        //  //int actualsave;

        //        //  //actualsave = TerraScan.Helper.WSHelper.SaveAffiDavitDetails(statementId, partiesAddress, parcelDetails, exciseAffidavitDetails);

        //        //  //if (actualsave == 0)
        //        //  //{
        //        //  //    Assert.Fail("Record not saved");
        //        //  //}

        //        //   //int statementId = (int)testContextInstance.DataRow["StatementID"];

        //        //      TerraScan.Helper.WSHelper.DeleteAffidavitDetails(statementId);

        //        //  }

        //        //  # endregion

        //        //  # region GetAffidavitStatementIdTest (SP Removed)

        //        //  /// <summary>
        //        //  ///A test for GetAffidavitStatementId (int, string, string)
        //        //  ///</summary>
        //        //  [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "Statement ID List", DataAccessMethod.Sequential), TestMethod()]
        //        //  public void GetAffidavitStatementIdTest()
        //        //  {
        //        //      int formId = (int)testContextInstance.DataRow["FormID"];

        //        //      string orderField = (string)testContextInstance.DataRow["OrderField"];

        //        //      string orderBy = (string)testContextInstance.DataRow["OrderBy"];

        //        //      ExciseTaxAffidavitData actual;

        //        //      actual = TerraScan.Helper.WSHelper.GetAffidavitStatementId(formId, orderField, orderBy);

        //        //      if (actual == null)
        //        //      {
        //        //          Assert.Fail("No Statement Ids are there");
        //        //      }

        //        //  }

        //        //  # endregion

        //        //  # region GetExciseTaxAffidavitCalulateAmountDueTest (SP Removed)

        //        //  /// <summary>
        //        //  ///A test for GetExciseTaxAffidavitCalulateAmountDue (DateTime, DateTime, int, int, double)
        //        //  ///</summary>
        //        //  [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;Persist Security Info=True;User ID=sa;Password=100%sec", "AffidavitAmountDue", DataAccessMethod.Sequential), TestMethod()]
        //        //  public void GetExciseTaxAffidavitCalulateAmountDueTest()
        //        //  {
        //        //      DateTime saleDate = (DateTime)testContextInstance.DataRow["SaleDate"];

        //        //      DateTime paymentDate = (DateTime)testContextInstance.DataRow["PaymentDate"];

        //        //      int exciseRateID = (int)testContextInstance.DataRow["ExciseRateID"];

        //        //      int taxCode = (int)testContextInstance.DataRow["TaxCode"];

        //        //      double taxableSaleAmount = Convert.ToDouble(testContextInstance.DataRow["TaxableSaleAmount"]);

        //        //      ExciseTaxAffidavitAmountDueData actual;

        //        //      actual = TerraScan.Helper.WSHelper.GetExciseTaxAffidavitCalulateAmountDue(saleDate, paymentDate, 1, 0, 10000.00);

        //        //      if (actual == null || actual.Tables.Count < 1 || actual.AmountDue.Rows.Count < 1)
        //        //      {
        //        //          Assert.Fail("No records are there");
        //        //      }
        //        //  }

        //        //  # endregion

        //        //  //#region Excise Tax StatementTest      

        //        //  #region GetExciseTaxStatementTest

        //        //  /// <summary>
        //        //  ///A test for GetExciseTaxStatement (int)
        //        //  ///</summary>
        //        //  [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "ExciseTaxStatement", DataAccessMethod.Sequential), TestMethod()]
        //        //  public void GetExciseTaxStatementTest()
        //        //  {
        //        //      int statementId = (int)testContextInstance.DataRow["StatementID"];

        //        //      ExciseTaxStatementData actual;

        //        //      actual = TerraScan.Helper.WSHelper.GetExciseTaxStatement(statementId);

        //        //      if (actual == null || actual.ListExciseTaxStatemnet.Rows.Count < 1)
        //        //      {
        //        //          Assert.Fail("No records found");
        //        //      }
        //        //  }
        //        //  #endregion

        //        //  # region ListExciseTaxStatemnetTest

        //        //  /// <summary>
        //        //  ///A test for ListExciseTaxStatemnet ()
        //        //  ///</summary>
        //        //  [TestMethod()]
        //        //  public void ListExciseTaxStatemnetTest()
        //        //  {
        //        //      ExciseTaxStatementData actual;

        //        //      actual = TerraScan.Helper.WSHelper.ListExciseTaxStatemnet();

        //        //      if (actual == null || actual.ListExciseTaxStatementID.Rows.Count < 1)
        //        //      {
        //        //          Assert.Fail("No records found");
        //        //      }
        //        //  }

        //        //  #endregion

        //        //  #region SaveExciseTaxReceiptTest (SP Removed)

        //        ////  Created By: Shireesha

        //        //  /// <summary>
        //        //  ///A test for SaveExciseTaxReceipt (string)
        //        //  ///</summary>
        //        //  [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "ExciseTaxStatement", DataAccessMethod.Sequential), TestMethod()]

        //        //  public void SaveExciseTaxReceiptTest()
        //        //  {
        //        //      string statementItems = (string)testContextInstance.DataRow["StatementItems"];
        //        //      ExciseTaxStatementData actual;
        //        //      actual = TerraScan.Helper.WSHelper.SaveExciseTaxReceipt(statementItems);
        //        //      if (actual == null || actual.ExciseTaxReceiptResultSet.Rows.Count < 1)
        //        //      {
        //        //          Assert.Fail("No Records Found");
        //        //      }
        //        //  }

        //        //  #endregion

        //        //  //#endregion

        //        //  //# region  ExciseRateTest

        //        //  #region Get excise tax rate

        //        //  /// <summary>
        //        //  ///A test for GetExciseTaxRate (int)
        //        //  ///</summary>
        //        //  [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "Exciserate", DataAccessMethod.Sequential), TestMethod()]
        //        //  public void GetExciseTaxRateTest()
        //        //  {
        //        //      //// One method of writing UTC
        //        //      //int exciseRateId = -999;

        //        //      //string exciseTaxDetails = (String)testContextInstance.DataRow["ExciseTaxDetails"];

        //        //      //TerraScan.Helper.WSHelper.SaveExciseTaxRate(exciseRateId, exciseTaxDetails);

        //        //      //ExciseTaxRateData actual;

        //        //      //actual = TerraScan.Helper.WSHelper.ListExciseTaxRate();

        //        //      //if (actual.ListExciseTaxRate.Rows.Count > 0)
        //        //      //{
        //        //      //    actual.ListExciseTaxRate.DefaultView.Sort = string.Concat(actual.ListExciseTaxRate.KeyIDColumn, " Desc");
        //        //      //    int ExciseRateID = Convert.ToInt32(actual.ListExciseTaxRate.DefaultView[0][actual.ListExciseTaxRate.KeyIDColumn.ColumnName]);
        //        //      //    ////check for get
        //        //      //    actual = TerraScan.Helper.WSHelper.GetExciseTaxRate(ExciseRateID);

        //        //      //    if (actual.GetExciseTaxRate.Rows.Count == 0)
        //        //      //    {
        //        //      //        Assert.Fail(string.Concat(" Record Not Valid ", ExciseRateID));
        //        //      //    }
        //        //      //}
        //        //      //else
        //        //      //{
        //        //      //    Assert.Fail(" Record Not Saved");
        //        //      //}

        //        //      ////Second method
        //        //      int ExciseRateID = -999;

        //        //      ExciseTaxRateData actual;

        //        //      actual = TerraScan.Helper.WSHelper.GetExciseTaxRate(ExciseRateID);

        //        //      if (actual.GetExciseTaxRate.Rows.Count < 1)
        //        //      {
        //        //          Assert.Fail("Record Not Found");
        //        //      }


        //        //  }


        //        //  #endregion

        //        //  #region Delete excise tax rate
        //        //  /// <summary>
        //        //  ///A test for DeleteExciseTaxRate (int)
        //        //  ///</summary>
        //        //  [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "DeleteExciseRate", DataAccessMethod.Sequential), TestMethod()]
        //        //  public void DeleteExciseTaxRateTest()
        //        //  {
        //        //      int ExciseRateID = (int)testContextInstance.DataRow["ExciseRateID"];

        //        //      int actual;

        //        //      actual = TerraScan.Helper.WSHelper.DeleteExciseTaxRate(ExciseRateID);

        //        //      if (actual == 0)
        //        //      {
        //        //          Assert.Fail(" NO record Available");
        //        //      }

        //        //  }

        //        //  # endregion

        //        //  #region List excise tax rate

        //        //  ///// <summary>
        //        //  //A test for ListExciseTaxRate ()
        //        //  //</summary>

        //        //  [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "Exciserate", DataAccessMethod.Sequential), TestMethod()]
        //        //  public void ListExciseTaxRateTest()
        //        //  {
        //        //      ////  First Method
        //        //      //    int exciseRateId = -999;

        //        //      //    string exciseTaxDetails = (String)testContextInstance.DataRow["ExciseTaxDetails"];

        //        //      //    TerraScan.Helper.WSHelper.SaveExciseTaxRate(exciseRateId, exciseTaxDetails);

        //        //      //    ExciseTaxRateData actual;

        //        //      //    actual = TerraScan.Helper.WSHelper.ListExciseTaxRate();

        //        //      //    if (actual.ListExciseTaxRate.Rows.Count > 0)
        //        //      //    {
        //        //      //        actual.ListExciseTaxRate.DefaultView.Sort = string.Concat(actual.ListExciseTaxRate.KeyIDColumn, " Desc");
        //        //      //        int ExciseRateID = Convert.ToInt32(actual.ListExciseTaxRate.DefaultView[0][actual.ListExciseTaxRate.KeyIDColumn.ColumnName]);
        //        //      //        ////check for get
        //        //      //        actual = TerraScan.Helper.WSHelper.GetExciseTaxRate(ExciseRateID);

        //        //      //        if (actual.GetExciseTaxRate.Rows.Count == 0)
        //        //      //        {
        //        //      //            Assert.Fail(string.Concat(" Record Not Valid ", ExciseRateID));
        //        //      //        }
        //        //      //    }
        //        //      //    else
        //        //      //    {
        //        //      //        Assert.Fail(" Record Not Saved");
        //        //      //    }

        //        //      // Second Method

        //        //      int exciseRateId = -999;

        //        //      ExciseTaxRateData actual;

        //        //      actual = TerraScan.Helper.WSHelper.ListExciseTaxRate();

        //        //      if (actual.ListExciseTaxRate.Rows.Count < 1)
        //        //      {
        //        //          Assert.Fail("No Records Found");
        //        //      }
        //        //  }
        //        //  #endregion

        //        //  # region SaveExciseTaxRateTest

        //        //  /// <summary>
        //        //  ///A test for SaveExciseTaxRate (int, string)
        //        //  ///</summary>
        //        //  ///
        //        //  [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "Exciserate", DataAccessMethod.Sequential), TestMethod()]
        //        //  public void SaveExciseTaxRateTest()
        //        //  {
        //        //      int exciseRateId = -999;

        //        //      string exciseTaxDetails = (String)testContextInstance.DataRow["ExciseTaxDetails"];

        //        //      TerraScan.Helper.WSHelper.SaveExciseTaxRate(exciseRateId, exciseTaxDetails);

        //        //      ExciseTaxRateData actual;

        //        //      actual = TerraScan.Helper.WSHelper.ListExciseTaxRate();

        //        //      if (actual.ListExciseTaxRate.Rows.Count > 0)
        //        //      {
        //        //          actual.ListExciseTaxRate.DefaultView.Sort = string.Concat(actual.ListExciseTaxRate.KeyIDColumn, " Desc");
        //        //          int ExciseRateID = Convert.ToInt32(actual.ListExciseTaxRate.DefaultView[0][actual.ListExciseTaxRate.KeyIDColumn.ColumnName]);
        //        //          ////check for get
        //        //          actual = TerraScan.Helper.WSHelper.GetExciseTaxRate(ExciseRateID);

        //        //          if (actual.GetExciseTaxRate.Rows.Count == 0)
        //        //          {
        //        //              Assert.Fail(string.Concat(" Record Not Valid ", ExciseRateID));
        //        //          }
        //        //      }
        //        //      else
        //        //      {
        //        //          Assert.Fail(" Record Not Saved");
        //        //      }
        //        //  }

        //        //  # endregion

        //        //  #region GetDistrictNameTest

        //        //  /// <summary>
        //        //  ///A test for GetDistrictName (int)
        //        //  ///</summary>
        //        //  ///
        //        //  [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "ExciseDistrictID", DataAccessMethod.Sequential), TestMethod()]
        //        //  public void GetDistrictNameTest()
        //        //  {
        //        //      int districtId = (int)testContextInstance.DataRow["districtID"];

        //        //      ExciseTaxRateData actual;

        //        //      actual = TerraScan.Helper.WSHelper.GetDistrictName(districtId);

        //        //      if (actual == null || actual.Tables.Count < 0 || actual.Tables[0].Rows.Count < 0)
        //        //      {
        //        //          Assert.Fail(" Record not saved");
        //        //      }
        //        //  }

        //        //  #endregion

        //        //  //# endregion

        //        //  // Yet to be Confirmed

        //        //  #region Snapshot UtilityTest

        //        //  #region GetSnapshotUtilityListTest

        //        //  /// <summary>
        //        //  ///A test for GetSnapshotUtilityList (int)
        //        //  ///</summary>
        //        //  [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;Persist Security Info=True;User ID=sa;Password=100%sec", "Snapshot", DataAccessMethod.Sequential), TestMethod()]
        //        //  public void GetSnapshotUtilityListTest()
        //        //  {
        //        //      int formId = (int)testContextInstance.DataRow["Form"];

        //        //      SnapshotUtilityData actual;

        //        //      actual = TerraScan.Helper.WSHelper.GetSnapshotUtilityList(formId);

        //        //      if (actual == null)
        //        //      {
        //        //          Assert.Fail("No Snapshot Found");
        //        //      }
        //        //  }

        //        //  #endregion

        //        //  #region InsertSnapshotUtilityTest

        //        //  /// <summary>
        //        //  ///A test for InsertSnapshotUtility (int, string, int, string, int, int, int, string)
        //        //  ///</summary>
        //        //  [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;Persist Security Info=True;User ID=sa;Password=100%sec", "Snapshot", DataAccessMethod.Sequential), TestMethod()]
        //        //  public void InsertSnapshotUtilityTest()
        //        //  {
        //        //      int snapshotId = (int)testContextInstance.DataRow["SnapshotID"];

        //        //      string snapshotName = (string)testContextInstance.DataRow["SnapshotName"];

        //        //      int snapshotFormId = (int)testContextInstance.DataRow["Form"];

        //        //      string description = (string)testContextInstance.DataRow["Description"];

        //        //      int recordCount = (int)testContextInstance.DataRow["RecCount"];

        //        //      int userId = (int)testContextInstance.DataRow["UserID"];

        //        //      int overrideValue = (int)testContextInstance.DataRow["Override"];

        //        //      string keyIds = (string)testContextInstance.DataRow["KeyIds"];

        //        //      int actual;

        //        //      actual = TerraScan.Helper.WSHelper.InsertSnapshotUtility(snapshotId, snapshotName, snapshotFormId, description, recordCount, userId, overrideValue, keyIds);


        //        //  }

        //        //  #endregion

        //        //  #region DeleteSnapshotUtilityTest

        //        //  /// <summary>
        //        //  ///A test for DeleteSnapshotUtility (int)
        //        //  ///</summary>
        //        //  [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;Persist Security Info=True;User ID=sa;Password=100%sec", "DeleteSnapshot", DataAccessMethod.Sequential), TestMethod()]
        //        //  public void DeleteSnapshotUtilityTest()
        //        //  {
        //        //      int snapshotID = (int)testContextInstance.DataRow["SnapshotID"];

        //        //      TerraScan.Helper.WSHelper.DeleteSnapshotUtility(snapshotID);

        //        //  }

        //        //  #endregion

        //        //  #endregion

        //        //  // Yet to be Confirmed

        //        //  #region Query UtilityTest

        //        //  #region GetQueryUtilityListTest

        //        //  /// <summary>
        //        //  ///A test for GetQueryUtilityList (int)
        //        //  ///</summary>
        //        //  [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;Persist Security Info=True;User ID=sa;Password=100%sec", "Query", DataAccessMethod.Sequential), TestMethod()]
        //        //  public void GetQueryUtilityListTest()
        //        //  {
        //        //      int formId = (int)testContextInstance.DataRow["Form"];

        //        //      DataSet actual;

        //        //      actual = TerraScan.Helper.WSHelper.GetQueryUtilityList(formId);

        //        //      if (actual == null || actual.Tables.Count < 1 || actual.Tables[0].Rows.Count < 1)
        //        //      {
        //        //          Assert.Fail("No Query Found");
        //        //      }
        //        //  }

        //        //  # endregion

        //        //  #region InsertQueryUtilityTest

        //        //  /// <summary>
        //        //  ///A test for InsertQueryUtility (int, string, int, string, int, string, string, string, string, int)
        //        //  ///</summary>
        //        //  [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;Persist Security Info=True;User ID=sa;Password=100%sec", "Query", DataAccessMethod.Sequential), TestMethod()]
        //        //  public void InsertQueryUtilityTest()
        //        //  {

        //        //      int queryId = (int)testContextInstance.DataRow["QueryID"];

        //        //      string queryName = (string)testContextInstance.DataRow["QueryName"];

        //        //      int formId = (int)testContextInstance.DataRow["Form"];

        //        //      string description = (string)testContextInstance.DataRow["Description"];

        //        //      int userId = (int)testContextInstance.DataRow["UserID"];

        //        //      string whereCondition = (string)testContextInstance.DataRow["WhereCondn"];

        //        //      string userWhereCondition = (string)testContextInstance.DataRow["WhereCondnSql"];

        //        //      int overrideValue = (int)testContextInstance.DataRow["UserID"];

        //        //      int actual;

        //        //      actual = TerraScan.Helper.WSHelper.InsertQueryUtility(queryId, queryName, formId, description, userId, whereCondition, userWhereCondition, overrideValue);

        //        //  }

        //        //  #endregion

        //        //  #region DeleteQueryUtilityTest

        //        //  /// <summary>
        //        //  ///A test for DeleteQueryUtility (int)
        //        //  ///</summary>
        //        //  [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;Persist Security Info=True;User ID=sa;Password=100%sec", "DeleteQuery", DataAccessMethod.Sequential), TestMethod()]
        //        //  public void DeleteQueryUtilityTest()
        //        //  {
        //        //      int queryId = (int)testContextInstance.DataRow["QueryID"];

        //        //      TerraScan.Helper.WSHelper.DeleteQueryUtility(queryId);

        //        //  }

        //        //  # endregion


        //        //  #endregion

        # endregion SP's Removed

        # region Previous Sprints

        //Created By: Shireesha

        # region ReceiptEngineTest

        # region SaveReceiptTest

        /// <summary>
        ///A test for SaveReceipt (string, string, int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "F1000", DataAccessMethod.Sequential), TestMethod()]
        public void SaveReceiptTest()
        {
            string receiptItems = (string)testContextInstance.DataRow["ReceiptItems"];

            string paymentItems = (string)testContextInstance.DataRow["PaymentItems"];

            int userId = (int)testContextInstance.DataRow["UserID"];

            ReceiptEngineData actual;

            actual = TerraScan.Helper.WSHelper.SaveReceipt(receiptItems, paymentItems, userId);

            if (actual == null || actual.SaveReceiptResult.Rows.Count < 1)
            {
                Assert.Fail("Record not saved");
            }

        }

        # endregion

        # endregion

        #region attachmentsTest

        #region GetAttachementFunctionNameTest

        /// <summary>
        ///A test for GetAttachementFunctionName (int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "Attachment", DataAccessMethod.Sequential), TestMethod()]
        public void GetAttachementFunctionNameTest()
        {
            //SaveAttachmentsTest();

            int formId = (int)testContextInstance.DataRow["Form"];

            AttachmentsData actual;

            actual = TerraScan.Helper.WSHelper.GetAttachementFunctionName(formId);

            if (actual == null || actual.GetAttachementFunctionName.Rows.Count < 1)
            {
                Assert.Fail("No Attachments Found");
            }
        }

        #endregion

        #region SaveAttachmentsTest

        /// <summary>
        /// Save Attachments Test
        /// </summary>       
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;Persist Security Info=True;User ID=sa;Password=100%sec", "Attachment", DataAccessMethod.Sequential), TestMethod()]
        public void SaveAttachmentsTest()
        {
            GetAttachementFunctionNameTest();

            int fileId = (int)testContextInstance.DataRow["FileId"];

            string extension = (string)testContextInstance.DataRow["Extension"];

            int formId = (int)testContextInstance.DataRow["Form"];

            int keyId = (int)testContextInstance.DataRow["KeyId"];

            int fileTypeId = (int)testContextInstance.DataRow["FileTypeId"];

            string source = (string)testContextInstance.DataRow["Source"];

            int primary = Convert.ToInt32(testContextInstance.DataRow["IsPrimary"]);

            string description = (string)testContextInstance.DataRow["Description"];

            string eventDate = Convert.ToString(testContextInstance.DataRow["EventDate"]);

            int userId = (int)testContextInstance.DataRow["UserId"];

            int publicValue = Convert.ToInt32(testContextInstance.DataRow["IsPublic"]);

            int isroll = (int)testContextInstance.DataRow["IsRoll"];

            int linktype = (int)testContextInstance.DataRow["LinkType"];

            string aurl = (string)testContextInstance.DataRow["AURL"];

            int pfileid = (int)testContextInstance.DataRow["PFileID"];
            string sourceConfig = (string)testContextInstance.DataRow[""];


            TerraScan.Helper.WSHelper.SaveAttachments(fileId, extension, formId, keyId, fileTypeId, source, primary, description, eventDate, userId, publicValue, isroll, linktype, aurl, pfileid, sourceConfig);

        }

        #endregion

        #region GetAttachmentItemsTest

        /// <summary>
        ///A test for GetAttachmentItems (int, int, int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "tTS_File", DataAccessMethod.Sequential), TestMethod()]
        public void GetAttachmentItemsTest()
        {
            SaveAttachmentsTest();

            int formId = (int)testContextInstance.DataRow["Form"];

            int keyId = (int)testContextInstance.DataRow["KeyId"];

            int userId = (int)testContextInstance.DataRow["UserId"];

            AttachmentsData actual;

            actual = TerraScan.Helper.WSHelper.GetAttachmentItems(formId, keyId, userId);

            if (actual == null || actual.GetAttachmentItems.Rows.Count < 1)
            {
                Assert.Fail("No attachments found");
            }
        }
        #endregion

        #region GetAttachmentCountTest

        /// <summary>
        ///A test for GetAttachmentCount (int, int, int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "AttachmentCount", DataAccessMethod.Sequential), TestMethod()]
        public void GetAttachmentCountTest()
        {
            // GetAttachmentItemsTest();

            int formId = (int)testContextInstance.DataRow["FormID"];

            int userId = (int)testContextInstance.DataRow["UserId"];

            int receiptId = (int)testContextInstance.DataRow["ReceiptID"];

            int actual;

            actual = TerraScan.Helper.WSHelper.GetAttachmentCount(formId, receiptId, userId);

        }

        #endregion

        #region DeleteAttachmentsTest

        /// <summary>
        ///A test for DeleteAttachments (int, int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;Persist Security Info=True;User ID=sa;Password=100%sec", "AttachmentDelete", DataAccessMethod.Sequential), TestMethod()]
        public void DeleteAttachmentsTest()
        {
            // SaveAttachmentsTest();

            int fileId = (int)testContextInstance.DataRow["FileId"];

            int userId = (int)testContextInstance.DataRow["UserID"];

            TerraScan.Helper.WSHelper.DeleteAttachments(fileId, userId);

        }

        #endregion

        #region GetProgramIdTest

        /// <summary>
        ///A test for GetProgramId (int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;Persist Security Info=True;User ID=sa;Password=100%sec", "Attachment", DataAccessMethod.Sequential), TestMethod()]
        public void GetProgramIdTest()
        {
            // SaveAttachmentsTest();

            int fileTypeId = (int)testContextInstance.DataRow["FileTypeId"];

            AttachmentsData actual;

            actual = TerraScan.Helper.WSHelper.GetProgramId(fileTypeId);

            if (actual == null || actual.GetProgramId.Rows.Count < 1)
            {
                Assert.Fail("No FileType is there");
            }
        }

        #endregion

        #region GetFilePathTest

        /////// <summary>
        ///////A test for GetFilePath (string, int, int, string)
        ///////</summary>
        ////[DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;Persist Security Info=True;User ID=sa;Password=100%sec", "Attachment", DataAccessMethod.Sequential), TestMethod()]
        ////public void GetFilePathTest()
        ////{
        ////    //SaveAttachmentsTest();

        ////    string source = (string)testContextInstance.DataRow["Source"];

        ////    int formId = (int)testContextInstance.DataRow["Form"];

        ////    int keyId = (int)testContextInstance.DataRow["KeyID"];

        ////    string extension = (string)testContextInstance.DataRow["Extension"];

        ////    AttachmentsData actual;

        ////    actual = TerraScan.Helper.WSHelper.GetFilePath(source, formId, keyId, extension);

        ////    if (actual == null || actual.GetFilePath.Rows.Count < 1)
        ////    {
        ////        Assert.Fail("No Attachments are there");
        ////    }
        ////}
        #endregion

        #endregion

        #region CommentsTest

        #region SaveCommentsTest

        /// <summary>
        ///A test for SaveComments (int, int, int, DateTime, int, string, int, int, int, int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;Persist Security Info=True;User ID=sa;Password=100%sec", "Comment", DataAccessMethod.Sequential), TestMethod()]
        public void SaveCommentsTest()
        {
            int commentId = (int)testContextInstance.DataRow["CommentID"];

            int formId = (int)testContextInstance.DataRow["Form"];

            int keyId = (int)testContextInstance.DataRow["KeyID"];

            DateTime commentDate = (DateTime)testContextInstance.DataRow["CommentDate"];

            int userId = (int)testContextInstance.DataRow["UserID"];

            string comments = (string)testContextInstance.DataRow["Comment"];

            int printOnReceipt = (int)testContextInstance.DataRow["PrintOnReceipt"];

            int publicComment = (int)testContextInstance.DataRow["PublicComment"];

            int ispriority = (int)testContextInstance.DataRow["Priority"];

            int isroll = (int)testContextInstance.DataRow["IsRoll"];
            int commentPriorityId = (int)testContextInstance.DataRow["CommentPriorityID"];

            TerraScan.Helper.WSHelper.SaveComments(commentId, formId, keyId, commentDate, userId, comments, printOnReceipt, publicComment, ispriority, isroll,commentPriorityId);

        }

        #endregion

        #region GetCommentsTest

        /// <summary>
        ///A test for GetComments (int, int, int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;Persist Security Info=True;User ID=sa;Password=100%sec", "Comment", DataAccessMethod.Sequential), TestMethod()]
        public void GetCommentsTest()
        {
            SaveCommentsTest();

            int keyId = (int)testContextInstance.DataRow["KeyID"];

            int formId = (int)testContextInstance.DataRow["Form"];

            int userId = (int)testContextInstance.DataRow["UserID"];

            CommentsData actual;

            actual = TerraScan.Helper.WSHelper.GetComments(keyId, formId, userId);

            if (actual == null || actual.GetComments.Rows.Count < 1)
            {
                Assert.Fail("No Comments are there");
            }
        }

        #endregion

        #region DeleteCommentsTest

        /// <summary>
        ///A test for DeleteComments (int, int, int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;Persist Security Info=True;User ID=sa;Password=100%sec", "CommentDelete", DataAccessMethod.Sequential), TestMethod()]
        public void DeleteCommentsTest()
        {

            int userid = (int)testContextInstance.DataRow["UserID"];

            int keyId = (int)testContextInstance.DataRow["KeyID"];

            int formId = (int)testContextInstance.DataRow["Form"];

            int commentId = (int)testContextInstance.DataRow["CommentID"];

            CommentsData actual;

            actual = TerraScan.Helper.WSHelper.GetComments(keyId, formId, userid);

            if (actual != null)
            {

                TerraScan.Helper.WSHelper.DeleteComments(keyId, formId, userid, commentId);
            }
        }

        #endregion

        #region GetCommentsCountTest

        /// <summary>
        ///A test for GetCommentsCount (int, int, int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;Persist Security Info=True;User ID=sa;Password=100%sec", "Comment", DataAccessMethod.Sequential), TestMethod()]
        public void GetCommentsCountTest()
        {
            int formId = (int)testContextInstance.DataRow["Form"];

            int keyId = (int)testContextInstance.DataRow["KeyID"];

            int userId = (int)testContextInstance.DataRow["UserID"];

            CommentsData actual;

            actual = TerraScan.Helper.WSHelper.GetCommentsCount(formId, keyId, userId);

            if (actual == null || actual.GetCommentsCount.Rows.Count < 1)
            {
                Assert.Fail("No Comments are there");
            }
        }

        #endregion

        #region GetConfigDetailsTest

        /// <summary>
        ///A test for GetConfigDetails (string)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "config", DataAccessMethod.Sequential), TestMethod()]
        public void GetConfigDetailsTest()
        {
            string configName = (string)testContextInstance.DataRow["CfgName"];

            DataSet actual;

            actual = TerraScan.Helper.WSHelper.GetConfigDetails(configName);

            if (actual == null)
            {
                Assert.Fail("No Configuration Values Found");
            }
        }

        #endregion

        #endregion

        #region Real EstateTest

        #region Get Real Estate Statement Ids

        /// <summary>
        ///A test for GetRealEstateStatementIds (string, string)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;Persist Security Info=True;User ID=sa;Password=100%sec", "Real Property", DataAccessMethod.Sequential), TestMethod()]
        public void GetRealEstateStatementIdsTest()
        {
            string sortField = (string)testContextInstance.DataRow["SortField"];

            string orderBy = (string)testContextInstance.DataRow["OrderBy"];

            RealEstateData actual;

            actual = TerraScan.Helper.WSHelper.GetRealEstateStatementIds(sortField, orderBy);

            if (actual == null || actual.ListRealPropertyStatementID.Rows.Count < 1)
            {
                Assert.Fail("No Statements found");
            }
        }

        #endregion

        #region Get Real Estate Statement

        /// <summary>
        ///A test for GetRealEstateStatement (int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;Persist Security Info=True;User ID=sa;Password=100%sec", "Real Property", DataAccessMethod.Sequential), TestMethod()]
        public void GetRealEstateStatementTest()
        {
            GetRealEstateStatementIdsTest();

            int statementId = (int)testContextInstance.DataRow["StatementID"];

            RealEstateData actual;

            actual = TerraScan.Helper.WSHelper.GetRealEstateStatement(statementId);

            if (actual == null || actual.GetRealPropertyStatementDetails.Rows.Count < 1)
            {
                Assert.Fail("No Statement are available");
            }
        }

        #endregion

        #endregion

        #region reportTest

        #region SaveAutoPrintTest

        /// <summary>
        ///A test for SaveAutoPrint (int, int, bool)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;Persist Security Info=True;User ID=sa;Password=100%sec", "Reports", DataAccessMethod.Sequential), TestMethod()]
        public void SaveAutoPrintTest()
        {
            int formId = (int)testContextInstance.DataRow["FormID"];

            int userId = (int)testContextInstance.DataRow["UserID"];

            bool autoPrint = Convert.ToBoolean(testContextInstance.DataRow["IsAutoPrint"]);

            TerraScan.Helper.WSHelper.SaveAutoPrint(formId, userId, autoPrint);

        }
        #endregion SaveAutoPrint

        #region GetReportDetailsTest

        /// <summary>
        ///A test for GetReportDetails (string, int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;Persist Security Info=True;User ID=sa;Password=100%sec", "Reports", DataAccessMethod.Sequential), TestMethod()]
        public void GetReportDetailsTest()
        {

            int reportId = (int)testContextInstance.DataRow["ReportID"];

            int userId = (int)testContextInstance.DataRow["UserID"];

            DataSet actual;

            actual = TerraScan.Helper.WSHelper.GetReportDetails(reportId, userId);

            if (actual == null || actual.Tables[0].Rows.Count < 1)
            {
                Assert.Fail("No Reports Found");
            }
        }
        #endregion

        #region GetAutoPrintStatus

        /// <summary>
        ///A test for GetAutoPrintStatus (int, int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;Persist Security Info=True;User ID=sa;Password=100%sec", "Reports", DataAccessMethod.Sequential), TestMethod()]
        public void GetAutoPrintStatusTest()
        {
            SaveAutoPrintTest();

            int formId = (int)testContextInstance.DataRow["FormID"];

            int userId = (int)testContextInstance.DataRow["UserID"];

            int actual;

            actual = TerraScan.Helper.WSHelper.GetAutoPrintStatus(formId, userId);

            if (actual == 0)
            {
                Assert.Fail("Status is undefined");
            }
        }
        #endregion GetAutoPrintStatus

        #endregion

        #region GetTheMenuItemsTest

        /// <summary>
        ///A test for GetMenuItems (int, int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;Persist Security Info=True;User ID=sa;Password=100%sec", "Menu", DataAccessMethod.Sequential), TestMethod()]
        public void GetMenuItemsTest()
        {
            int userId = (int)testContextInstance.DataRow["UserID"];

            int applicationId = (int)testContextInstance.DataRow["ApplicationID"];

            DataSet actual;

            actual = TerraScan.Helper.WSHelper.GetMenuItems(userId, applicationId);

            if (actual == null || actual.Tables.Count < 1 || actual.Tables[0].Rows.Count < 1)
            {
                Assert.Fail("No Menu Items Found");
            }
        }
        #endregion

        #region GetFormItemsTest (SP Modified)

        ///// <summary>
        /////A test for GetFormItems ()
        /////</summary>
        /////
        //[TestMethod()]
        //public void GetFormItemsTest()
        //{
        //    DataSet actual;

        //    actual = TerraScan.Helper.WSHelper.GetFormItems();

        //    if (actual == null || actual.Tables.Count < 1 || actual.Tables[0].Rows.Count < 1)
        //    {
        //        Assert.Fail("No Form Items Found");
        //    }
        //}

        #endregion

        #region GetFormPermissionsTest

        /// <summary>
        ///A test for GetFormPermissions (int, int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;Persist Security Info=True;User ID=sa;Password=100%sec", "Menu", DataAccessMethod.Sequential), TestMethod()]
        public void GetFormPermissionsTest()
        {
            int userId = (int)testContextInstance.DataRow["UserID"];

            int applicationId = (int)testContextInstance.DataRow["ApplicationID"];

            DataSet actual;

            actual = TerraScan.Helper.WSHelper.GetFormPermissions(userId, applicationId);

            if (actual == null)
            {
                Assert.Fail("No Form Permissions are there");
            }
        }
        #endregion

        # region UserManagementTest

        #region UserTab

        #region GetUserGroupDetails(Modified)

        ///// <summary>
        /////A test for GetUserGroupDetails (int)
        /////</summary>
        //[DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;Persist Security Info=True;User ID=sa;Password=100%sec", "Usertab", DataAccessMethod.Sequential), TestMethod()]
        //public void GetUserGroupDetailsTest()
        //{
        //    int applicationId = (int)testContextInstance.DataRow["ApplicationID"];

        //    UserManagementData actual;

        //    actual = TerraScan.Helper.WSHelper.GetUserGroupDetails(applicationId);

        //    if (actual == null || actual.ListUserDetail.Rows.Count < 1 || actual.ListUserGroupDetail.Rows.Count < 1)
        //    {
        //        Assert.Fail("No User Found");
        //    }
        //}
        #endregion

        #region SaveUserDetails

        /// <summary>
        ///A test for SaveUserDetails (int, string, string, string, string, int, int, int, int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;Persist Security Info=True;User ID=sa;Password=100%sec", "Usertab", DataAccessMethod.Sequential), TestMethod()]
        public void SaveUserDetailsTest()
        {
            int userId = (int)testContextInstance.DataRow["UserID"];

            string nameDisplay = (string)testContextInstance.DataRow["NameDisplay"];

            string nameFull = (string)testContextInstance.DataRow["NameFull"];

            string nameNet = (string)testContextInstance.DataRow["NameNet"];

            string email = (string)testContextInstance.DataRow["Email"];

            int active = (int)testContextInstance.DataRow["Active"];

            int administrator = (int)testContextInstance.DataRow["Administrator"];

            int applicationId = (int)testContextInstance.DataRow["ApplicationID"];

            int loginUserId = (int)testContextInstance.DataRow["LoginUserID"];

            UserManagementData actual;

            actual = TerraScan.Helper.WSHelper.SaveUserDetails(userId, nameDisplay, nameFull, nameNet, email, active, administrator, applicationId, loginUserId);

            if (actual == null || actual.GetErrorMessage.Rows.Count < 1)
            {
                Assert.Fail("Record not saved");
            }
        }

        #endregion

        #region DeleteUserDetails

        /// <summary>
        ///A test for DeleteUserDetails (int, int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;Persist Security Info=True;User ID=sa;Password=100%sec", "DeleteUser", DataAccessMethod.Sequential), TestMethod()]
        public void DeleteUserDetailsTest()
        {
            // SaveUserDetailsTest();

            int userId = (int)testContextInstance.DataRow["UserID"];

            int loginUserId = (int)testContextInstance.DataRow["LoginUserID"];

            TerraScan.Helper.WSHelper.DeleteUserDetails(userId, loginUserId);

        }

        #endregion

        #endregion User tab

        #region Group Tab

        #region GetGroupDetails(Modified)

        ///// <summary>
        /////A test for GetGroupDetails (int)
        /////</summary>
        //[DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "GroupDetails", DataAccessMethod.Sequential), TestMethod()]
        //public void GetGroupDetailsTest()
        //{
        //    int userId = (int)testContextInstance.DataRow["UserID"];

        //    UserManagementData actual;

        //    actual = TerraScan.Helper.WSHelper.GetGroupDetails(userId);

        //    if (actual == null || actual.ListGroupDetail.Rows.Count < 1)
        //    {
        //        Assert.Fail("No Groups Found");
        //    }
        //}

        #endregion

        #region InsertGroupDetails

        /// <summary>
        ///A test for InsertGroupDetails (int, string, string, string, int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "GroupDetails", DataAccessMethod.Sequential), TestMethod()]
        public void InsertGroupDetailsTest()
        {
            int groupId = 0;

            string groupName = (string)testContextInstance.DataRow["groupName"];

            string description = (string)testContextInstance.DataRow["description"];

            string userGroup = (string)testContextInstance.DataRow["userGroup"];

            int userId = (int)testContextInstance.DataRow["UserID"];

            UserManagementData actual;

            actual = TerraScan.Helper.WSHelper.InsertGroupDetails(groupId, groupName, description, userGroup, userId);

            if (actual.GetErrorMessage.Rows.Count < 1)
            {
                Assert.Fail("No records found");
            }
        }

        #endregion

        #region DeleteGroupDetails

        /// <summary>
        ///A test for DeleteGroupDetails (int, int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "DeleteGroup", DataAccessMethod.Sequential), TestMethod()]
        public void DeleteGroupDetailsTest()
        {
            int groupId = (int)testContextInstance.DataRow["groupId"];

            int userId = (int)testContextInstance.DataRow["UserID"];

            TerraScan.Helper.WSHelper.DeleteGroupDetails(groupId, userId);
        }

        #endregion

        #endregion Group Tab

        #region PermissionsTab

        #region GetGroupPermissionDetails(Modified)

        ///// <summary>
        /////A test for GetGroupPermissionDetails (int)
        /////</summary>
        //[DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "GroupPermission", DataAccessMethod.Sequential), TestMethod()]
        //public void GetGroupPermissionDetailsTest()
        //{
        //    int userId = (int)testContextInstance.DataRow["UserID"];

        //    UserManagementData actual;

        //    actual = TerraScan.Helper.WSHelper.GetGroupPermissionDetails(userId);

        //    if (actual == null || actual.ListPermissionGroupDetail.Rows.Count < 1 || actual.ListPermissionGroupDetail.Rows.Count < 1)
        //    {
        //        Assert.Fail("No Permissions found");
        //    }
        //}

        #endregion

        #region SaveGroupPermissionDetails

        /// <summary>
        ///A test for SaveGroupPermissionDetails (int, string, int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "GroupPermission", DataAccessMethod.Sequential), TestMethod()]
        public void SaveGroupPermissionDetailsTest()
        {
            int groupId = (int)testContextInstance.DataRow["GroupID"];

            string formpermissions = (string)testContextInstance.DataRow["FormPermissions"];

            int userId = (int)testContextInstance.DataRow["UserID"];

            TerraScan.Helper.WSHelper.SaveGroupPermissionDetails(groupId, formpermissions, userId);

        }

        #endregion

        #endregion

        #endregion

        #region VaildateUserTest

        /// <summary>
        ///A test for ValidateUser (string, string)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "User", DataAccessMethod.Sequential), TestMethod()]
        public void ValidateUserTest()
        {
            string userName = (string)testContextInstance.DataRow["UserName"];

            string password = (string)testContextInstance.DataRow["Password"];

            bool actual;

            actual = TerraScan.Helper.WSHelper.ValidateUser(userName, password);

            if (actual == false)
            {
                Assert.Fail("Not a valid User");
            }

        }
        #endregion

        #region Login User InformationTest

        #region GetUserInformationTest

        /// <summary>
        ///A test for GetUserInformation (string, int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "User", DataAccessMethod.Sequential), TestMethod()]
        public void GetUserInformationTest()
        {
            string userName = (string)testContextInstance.DataRow["UserName"];

            int applicationId = (int)testContextInstance.DataRow["ApplicationID"];

            DataSet actual;

            actual = TerraScan.Helper.WSHelper.GetUserInformation(userName, applicationId);

            if (actual == null)
            {
                Assert.Fail("No user Found");
            }
        }

        #endregion

        #region GetConfigInformationTest

        /// <summary>
        ///A test for GetConfigInformation ()
        ///</summary>
        [TestMethod()]
        public void GetConfigInformationTest()
        {

            DataSet actual;

            actual = TerraScan.Helper.WSHelper.GetConfigInformation();

            if (actual == null || actual.Tables.Count < 1 || actual.Tables[0].Rows.Count < 1)
            {
                Assert.Fail("No Information Found");
            }
        }

        #endregion

        #region GetAuthenticationStateTest

        /// <summary>
        ///A test for GetAuthenticationState ()
        ///</summary>
        [TestMethod()]
        public void GetAuthenticationStateTest()
        {

            DataSet actual;

            actual = TerraScan.Helper.WSHelper.GetAuthenticationState();

            if (actual == null || actual.Tables[0].Rows.Count < 1)
            {
                Assert.Fail("No records found");
            }
        }

        #endregion

        #endregion

        #region SQL SupportTest

        /// <summary>
        ///A test for GetSQLQueryResult (string)
        ///</summary>
        [TestMethod(), DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanUTC;User ID=sa;Password=100%sec", "tTR_MortgageImportTemplate", DataAccessMethod.Sequential)]
        public void GetSQLQueryResultTest()
        {
            string sqlQuery = "select * from tTR_MortgageImportTemplate";

            DataSet actual;

            actual = TerraScan.Helper.WSHelper.GetSQLQueryResult(sqlQuery);

            if (actual == null)
            {
                Assert.Fail("No Query Found");
            }

        }
        #endregion

        #region CountyConfigurationTest

        #region GetCountyConfiguration

        /// <summary>
        ///A test for GetCountyConfiguration (int, int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;Integrated Security=True", "Countyconfig", DataAccessMethod.Sequential), TestMethod()]
        public void GetCountyConfigurationTest()
        {
            int applicationId = (int)testContextInstance.DataRow["ApplicationID"];

            int userId = (int)testContextInstance.DataRow["UserID"];

            DataSet actual;

            actual = TerraScan.Helper.WSHelper.GetCountyConfiguration(applicationId, userId);

            if (actual == null || actual.Tables.Count < 1 || actual.Tables[0].Rows.Count < 1)
            {
                Assert.Fail("No record found");
            }
        }

        #endregion

        #region UpdateCountyConfigDetailsTest

        /// <summary>
        ///A test for UpdateCountyConfigDetails (int, string, int)
        ///</summary>
        [TestMethod()]

        public void UpdateCountyConfigDetailsTest()
        {
            int configId = 15;

            string configDescription = "WA";

            int userId = 1;

            TerraScan.Helper.WSHelper.UpdateCountyConfigDetails(configId, configDescription, userId);

        }
        #endregion

        #endregion

        #region MortgageImportTemplateTest

        #region GetMortgageTemplateTest

        /// <summary>
        ///A test for GetMortgageTemplate (int)
        ///</summary>
        //[TestMethod()]
        [TestMethod(), DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanUTC;user Id=sa; Password=100%sec", "MortgageImportEntry", DataAccessMethod.Sequential)]
        public void GetMortgageTemplateTest()
        {
            int templateId = (int)testContextInstance.DataRow["TemplateID"];

            DataSet actual;

            actual = TerraScan.Helper.WSHelper.GetMortgageTemplate(templateId);

            if (actual == null)
            {
                Assert.Fail("No dataset available");
            }
        }
        #endregion

        #region List Mortgage Import Template

        /// <summary>
        ///A test for ListMortgageTemplate ()
        ///</summary>
        [TestMethod()]
        public void ListMortgageTemplateTest()
        {
            DataSet actual;

            actual = TerraScan.Helper.WSHelper.ListMortgageTemplate();

            if (actual == null || actual.Tables.Count < 1)
            {
                Assert.Fail("No Template found");
            }
        }
        #endregion

        #region List MortgageImportFileType

        /// <summary>
        ///A test for ListMortgageImportFileType ()
        ///</summary>
        [TestMethod()]
        public void ListMortgageImportFileTypeTest()
        {
            DataSet actual;

            actual = TerraScan.Helper.WSHelper.ListMortgageImportFileType();

            if (actual == null || actual.Tables.Count < 1 || actual.Tables[0].Rows.Count < 1)
            {
                Assert.Fail("No File Type Found");
            }

        }


        #endregion

        #region Save Mortgage Import Template

        /// <summary>
        ///A test for SaveMortgageImportTemplate (int, string, int, int, string, string, int, int, int, int, int, int, int, int, int, int, int, int, int, int)
        ///</summary>

        [TestMethod(), DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanUTC;user Id=sa; Password=100%sec", "tTR_MortgageImportTemplate", DataAccessMethod.Sequential)]

        public void SaveMortgageImportTemplateTest()
        {
            int templateId = (int)testContextInstance.DataRow["TemplateID"];

            string templateName = (string)testContextInstance.DataRow["TemplateName"];

            int typeId = Convert.ToInt32(testContextInstance.DataRow["TypeID"].ToString());

            int userId = (int)testContextInstance.DataRow["UserID"];

            string description = (string)testContextInstance.DataRow["Description"];

            string filePath = (string)testContextInstance.DataRow["FilePath"];

            int statementIdPos = Convert.ToInt32(testContextInstance.DataRow["StatementID_Pos"].ToString());

            int statementIdWid = Convert.ToInt32(testContextInstance.DataRow["StatementID_Wid"].ToString());

            int statementNumPos = Convert.ToInt32(testContextInstance.DataRow["StatementNum_Pos"].ToString());

            int statementNumWid = Convert.ToInt32(testContextInstance.DataRow["StatementNum_Wid"].ToString());

            int amountPos = Convert.ToInt32(testContextInstance.DataRow["Amount_Pos"].ToString());

            int amountWid = Convert.ToInt32(testContextInstance.DataRow["Amount_Wid"].ToString());

            int commentPos = Convert.ToInt32(testContextInstance.DataRow["Comment_Pos"].ToString());

            int commentWid = Convert.ToInt32(testContextInstance.DataRow["Comment_Wid"].ToString());

            int bankCodePos = Convert.ToInt32(testContextInstance.DataRow["BankCode_Pos"].ToString());

            int bankCodeWid = Convert.ToInt32(testContextInstance.DataRow["BankCode_Wid"].ToString());

            int loanNumPos = Convert.ToInt32(testContextInstance.DataRow["LoanNum_Pos"].ToString());

            int loanNumWid = Convert.ToInt32(testContextInstance.DataRow["LoanNum_Wid"].ToString());

            int taxPayNamePos = Convert.ToInt32(testContextInstance.DataRow["TaxPayName_Pos"].ToString());

            int taxPayNameWid = Convert.ToInt32(testContextInstance.DataRow["TaxPayName_Wid"].ToString());

            int parcelNumberPos = Convert.ToInt32(testContextInstance.DataRow["ParcelNumber_Pos"].ToString());

            int parcelNumberWid = Convert.ToInt32(testContextInstance.DataRow["ParcelNumber_Wid"].ToString());

            int postTypePos = Convert.ToInt32(testContextInstance.DataRow["PostType_Pos"].ToString());

            int postTypeWid = Convert.ToInt32(testContextInstance.DataRow["PostType_Wid"].ToString());
            int ownerIDPos = (int)testContextInstance.DataRow["OwnerIDPos"];
            int ownerIDWid = (int)testContextInstance.DataRow["OwnerIDWid"];
            DataSet actual;

            TerraScan.Helper.WSHelper.SaveMortgageImportTemplate(templateId, templateName, typeId, userId, description, filePath, statementIdPos, statementIdWid, statementNumPos, statementNumWid, amountPos, amountWid, commentPos, commentWid, bankCodePos, bankCodeWid, loanNumPos, loanNumWid, taxPayNamePos, taxPayNameWid, parcelNumberPos, parcelNumberWid, postTypePos, postTypeWid, ownerIDPos, ownerIDWid);

        }
        #endregion

        #region Delete Mortgage Template

        /// <summary>
        ///A test for DeleteMortgageTemplate (int, bool, int)
        ///</summary>
        //[TestMethod()]
        [TestMethod(), DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanUTC;User ID=sa;Password=100%sec", "DeleteTemplate", DataAccessMethod.Sequential)]
        public void DeleteMortgageTemplateTest()
        {
            int templateId = (int)testContextInstance.DataRow["TemplateID"];

            bool overrideStatus = true;

            int userId = (int)testContextInstance.DataRow["UserID"];

            int actual;

            actual = TerraScan.Helper.WSHelper.DeleteMortgageTemplate(templateId, overrideStatus, userId);

            if (actual != 0)
            {
                Assert.Fail("Record Not deleted");
            }
        }
        #endregion

        #endregion

        #region Mortgage ImportTest

        #region MortgageImport Statement

        /// <summary>
        ///A test for GetMortgageImportStatement (int, bool)
        ///</summary>
        //[TestMethod()]
        [TestMethod(), DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanUTC;user Id=sa; Password=100%sec", "MortgageImportEntry", DataAccessMethod.Sequential)]
        public void GetMortgageImportStatementTest()
        {
            int importId = (int)testContextInstance.DataRow["ImportID"];

            bool nextAvailableRecord = false;

            DataSet actual;

            actual = TerraScan.Helper.WSHelper.GetMortgageImportStatement(importId, nextAvailableRecord);

            if (actual == null || actual.Tables.Count < 1)
            {
                Assert.Fail("No Imports available");
            }
        }
        #endregion

        #region MortgageImport Error Check

        /// <summary>
        ///A test for MortgageImportCheckErrors (int, int, string, int, string, DateTime, DateTime, int, int, int, int)
        ///</summary>
        //[TestMethod()]
        [TestMethod(), DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanUTC;user Id=sa; Password=100%sec", "MortgageImportEntry", DataAccessMethod.Sequential)]
        public void MortgageImportCheckErrorsTest()
        {
            int importId = (int)testContextInstance.DataRow["ImportID"];

            int templateId = (int)testContextInstance.DataRow["TemplateID"];

            string templateName = (string)testContextInstance.DataRow["TemplateName"];

            int typeId = (int)testContextInstance.DataRow["TypeID"];

            string filePath = (string)testContextInstance.DataRow["FilePath"];

            DateTime recieptDate = (DateTime)testContextInstance.DataRow["ReceiptDate"];

            DateTime interestDate = (DateTime)testContextInstance.DataRow["InterestDate"];

            int payCode = (int)testContextInstance.DataRow["PayCode"];

            int userId = (int)testContextInstance.DataRow["UserID"];

            int rollYear = (int)testContextInstance.DataRow["RollYear"];

            int ppaymentId = (int)testContextInstance.DataRow["PpaymentID"];

            DataSet actual;

            actual = TerraScan.Helper.WSHelper.MortgageImportCheckErrors(importId, templateId, templateName, typeId, filePath, recieptDate, interestDate, payCode, userId, rollYear, ppaymentId);

            if (actual == null || actual.Tables.Count < 0 || actual.Tables[0].Rows.Count < 0)
            {

                Assert.Fail("No errors found");
            }
        }
        #endregion

        #region Save Mortgage Import Entries

        /// <summary>
        ///A test for SaveMortgageImportEntries (int, int, string, int, string, DateTime, DateTime, int, int, int, int, string)
        ///</summary>

        [TestMethod(), DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanUTC;user Id=sa; Password=100%sec", "MortgageImportEntry", DataAccessMethod.Sequential)]
        public void SaveMortgageImportEntriesTest()
        {
            int importId = (int)testContextInstance.DataRow["ImportID"];

            int templateId = (int)testContextInstance.DataRow["TemplateID"];

            string templateName = (string)testContextInstance.DataRow["TemplateName"];

            int typeId = (int)testContextInstance.DataRow["TypeID"];

            string filePath = (string)testContextInstance.DataRow["FilePath"];

            DateTime receiptDate = (DateTime)testContextInstance.DataRow["ReceiptDate"];

            DateTime interestDate = (DateTime)testContextInstance.DataRow["InterestDate"];

            int payCode = (int)testContextInstance.DataRow["PayCode"];

            int userId = (int)testContextInstance.DataRow["UserID"];

            int rollYear = (int)testContextInstance.DataRow["RollYear"];

            int ppaymentId = (int)testContextInstance.DataRow["PpaymentID"];

            string mortgageImportEntries = (string)testContextInstance.DataRow["MortgageImportEntries"];

            DataSet actual;

            actual = TerraScan.Helper.WSHelper.SaveMortgageImportEntries(importId, templateId, templateName, typeId, filePath, receiptDate, interestDate, payCode, userId, rollYear, ppaymentId, mortgageImportEntries);

            if (actual == null)
            {
                Assert.Fail("No Entries available");
            }
        }
        #endregion

        #region Save Mortgage Import

        /// <summary>
        ///A test for SaveMortgageImport (int, int, string, int, string, DateTime, DateTime, int, int, int, int, bool)
        ///</summary>
        //[TestMethod()]

        [TestMethod(), DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanUTC;user Id=sa; Password=100%sec", "MortgageImportEntry", DataAccessMethod.Sequential)]
        public void SaveMortgageImportTest()
        {
            int importId = (int)testContextInstance.DataRow["ImportID"];

            int templateId = (int)testContextInstance.DataRow["TemplateID"];

            string templateName = (string)testContextInstance.DataRow["TemplateName"];

            int typeId = (int)testContextInstance.DataRow["TypeID"];

            string filePath = (string)testContextInstance.DataRow["FilePath"];

            DateTime receiptDate = (DateTime)testContextInstance.DataRow["ReceiptDate"];

            DateTime interestDate = (DateTime)testContextInstance.DataRow["InterestDate"];

            int payCode = (int)testContextInstance.DataRow["PayCode"];

            int userId = (int)testContextInstance.DataRow["UserID"];

            int rollYear = (int)testContextInstance.DataRow["RollYear"];

            int ppaymentId = (int)testContextInstance.DataRow["PpaymentID"];

            bool resetErrorCheck = false;

            DataSet actual;

            actual = TerraScan.Helper.WSHelper.SaveMortgageImport(importId, templateId, templateName, typeId, filePath, receiptDate, interestDate, payCode, userId, rollYear, ppaymentId, resetErrorCheck);

            if (actual == null || actual.Tables.Count < 0 || actual.Tables[0].Rows.Count < 0)
            {
                Assert.Fail("No Imports available");
            }

        }
        #endregion

        #region Create Receipt

        /// <summary>
        ///A test for CreateReceipt (int, int, string, string, int, DateTime, DateTime, int, int, int, int, bool)
        ///</summary>
        //[TestMethod()]
        [TestMethod(), DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanUTC;user Id=sa; Password=100%sec", "MortgageImportEntry", DataAccessMethod.Sequential)]
        public void CreateReceiptTest()
        {
            int importId = (int)testContextInstance.DataRow["ImportID"];

            int templateId = (int)testContextInstance.DataRow["TemplateID"];

            string templateName = (string)testContextInstance.DataRow["TemplateName"];

            int typeId = (int)testContextInstance.DataRow["TypeID"];

            string filePath = (string)testContextInstance.DataRow["FilePath"];

            DateTime receiptDate = (DateTime)testContextInstance.DataRow["ReceiptDate"];

            DateTime interestDate = (DateTime)testContextInstance.DataRow["InterestDate"];

            int payCode = (int)testContextInstance.DataRow["PayCode"];

            int userId = (int)testContextInstance.DataRow["UserID"];

            int rollYear = (int)testContextInstance.DataRow["RollYear"];

            int ppaymentId = (int)testContextInstance.DataRow["PpaymentID"];

            bool resetErrorCheck = false;

            DataSet actual;

            actual = TerraScan.Helper.WSHelper.CreateReceipt(importId, templateId, templateName, filePath, typeId, receiptDate, interestDate, payCode, userId, rollYear, ppaymentId, resetErrorCheck);

            if (actual == null || actual.Tables.Count < 0 || actual.Tables[0].Rows.Count < 0)
            {
                Assert.Fail("No Dataset Returned");
            }
        }
        #endregion

        #region Mortgage Import Check Valid ReceiptTest

        /// <summary>
        ///A test for CheckMortgageImportValidReceipt (int, DateTime)
        ///</summary>
        //[TestMethod()]
        [TestMethod(), DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanUTC;user Id=sa; Password=100%sec", "MortgageImportEntry", DataAccessMethod.Sequential)]
        public void CheckMortgageImportValidReceiptTest()
        {
            int importId = (int)testContextInstance.DataRow["ImportID"];

            DateTime receiptDate = (DateTime)testContextInstance.DataRow["ReceiptDate"];

            DataSet actual;

            actual = TerraScan.Helper.WSHelper.CheckMortgageImportValidReceipt(importId, receiptDate);

            if (actual == null || actual.Tables.Count < 0 || actual.Tables[0].Rows.Count < 0)
            {
                Assert.Fail("No Dataset available");
            }

            //Assert.AreEqual(expected, actual, "TerraScan.Helper.WSHelper.CheckMortgageImportValidReceipt did not return the expe" +
            //      "cted value.");
            //Assert.Inconclusive("Verify the correctness of this test method.");
        }
        #endregion

        #region Delete Mortgage Import

        #region DeleteMortgageImportTest

        /// <summary>
        ///A test for DeleteMortgageImport (int, int)
        ///</summary>

        [TestMethod(), DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanUTC;user Id=sa; Password=100%sec", "MortgageImportEntry", DataAccessMethod.Sequential)]

        public void DeleteMortgageImportTest()
        {
            int importId = (int)testContextInstance.DataRow["ImportID"];

            int userId = (int)testContextInstance.DataRow["UserID"];

            DataSet actual;

            actual = TerraScan.Helper.WSHelper.DeleteMortgageImport(importId, userId);

            if (actual == null || actual.Tables.Count < 0 || actual.Tables[0].Rows.Count < 0)
            {
                Assert.Fail("No dataset available");
            }
        }

        #endregion

        #region DeleteMortgageImportFileEntriesTest
        /// <summary>
        ///A test for DeleteMortgageImportFileEntries (int, int)
        ///</summary>

        [TestMethod(), DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanUTC;user Id=sa; Password=100%sec", "MortgageImportEntry", DataAccessMethod.Sequential)]

        public void DeleteMortgageImportFileEntriesTest()
        {
            int importId = (int)testContextInstance.DataRow["ImportID"];

            int userId = (int)testContextInstance.DataRow["UserID"];

            DataSet actual;

            actual = TerraScan.Helper.WSHelper.DeleteMortgageImportFileEntries(importId, userId);

            if (actual == null)
            {
                Assert.Fail("No dataset available");
            }
        }
        #endregion

        #endregion

        #endregion

        #region Mortgage Import Template SelectionTest

        /// <summary>
        ///A test for GetMortgageImportTemplateDetails ()
        ///</summary>
        [TestMethod()]
        public void GetMortgageImportTemplateDetailsTest()
        {
            DataSet actual;

            actual = TerraScan.Helper.WSHelper.GetMortgageImportTemplateDetails();

            if (actual == null)
            {
                Assert.Fail("No Data");
            }

        }
        #endregion

        #region Error EngineTest

        #region GetErrorEngineTest

        /// <summary>
        ///A test for GetErrorEngine (int)
        ///</summary>
        [TestMethod(), DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanUTC;user Id=sa; Password=100%sec", "Errorengine", DataAccessMethod.Sequential)]
        public void GetErrorEngineTest()
        {
            int errorTypeId = (int)testContextInstance.DataRow["ErrorTypeID"];

            DataSet actual;

            actual = TerraScan.Helper.WSHelper.GetErrorEngine(errorTypeId);

            if (actual == null || actual.Tables[0].Rows.Count < 1)
            {
                Assert.Fail("Invaid Error Type");
            }
        }

        #endregion

        #region InsertErrorEngineTest

        /// <summary>
        ///A test for InsertErrorEngine (string, int, string, int, string, string)
        ///</summary>
        [TestMethod(), DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanUTC;user Id=sa; Password=100%sec", "Errorengine", DataAccessMethod.Sequential)]
        public void InsertErrorEngineTest()
        {
            string errorDate = Convert.ToString(testContextInstance.DataRow["ErrorDate"]);

            int userId = (int)testContextInstance.DataRow["UserID"];

            string userIP = (string)testContextInstance.DataRow["UserIP"];

            int errorTypeId = (int)testContextInstance.DataRow["ErrorTypeID"];

            string parameter = (string)testContextInstance.DataRow["Parameter"];

            string comment = (string)testContextInstance.DataRow["Comment"];

            TerraScan.Helper.WSHelper.InsertErrorEngine(errorDate, userId, userIP, errorTypeId, parameter, comment);

        }
        #endregion

        #endregion

        # region Excise AffidavitStatusTest

        #region GetExciseTaxAffidavitStatusTest

        /// <summary>
        ///A test for GetExciseTaxAffidavitStatus (int, int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "ExciseAffidavitStatus", DataAccessMethod.Sequential), TestMethod()]
        public void GetExciseTaxAffidavitStatusTest()
        {
            int statementID = (int)testContextInstance.DataRow["StatementID"];

            int treasurerStatus = (int)testContextInstance.DataRow["TreasurerStatusID"];

            ExciseAffidavitValidationData actual;

            actual = TerraScan.Helper.WSHelper.GetExciseTaxAffidavitStatus(statementID, treasurerStatus);

            if (actual == null || actual.Tables.Count < 1)
            {
                Assert.Fail("Record not saved properly");
            }
        }

        # endregion

        #region UpdateExciseAffidavitStatusTest

        /// <summary>
        ///A test for UpdateExciseAffidavitStatus (int, int, int, int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "ExciseAffidavitStatus", DataAccessMethod.Sequential), TestMethod()]
        public void UpdateExciseAffidavitStatusTest()
        {
            int statementID = (int)testContextInstance.DataRow["StatementID"];

            int treasurerStatus = (int)testContextInstance.DataRow["TreasurerStatusID"];

            int statusID = (int)testContextInstance.DataRow["StatusID"];

            int userId = (int)testContextInstance.DataRow["UserID"];

            TerraScan.Helper.WSHelper.UpdateExciseAffidavitStatus(statementID, treasurerStatus, statusID, userId);

        }

        #endregion

        #endregion

        #region AccountSelectionTest

        #region Get Account Slection Data

        /// <summary>
        ///A test for GetAccountSelectionData (string, string, string, string, int, string, int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;Persist Security Info=True;User ID=sa;Password=100%sec", "accountselection", DataAccessMethod.Sequential), TestMethod()]
        public void GetAccountSelectionDataTest()
        {
            string subFund = (string)testContextInstance.DataRow["SubFund"];

            string bars = (string)testContextInstance.DataRow["Bars"];

            string objectname = (string)testContextInstance.DataRow["ObjectName"];

            string line = (string)testContextInstance.DataRow["Line"];

            int rollYear = (int)testContextInstance.DataRow["RollYear"];

            string description = (string)testContextInstance.DataRow["Description"];

            int iscash = (int)testContextInstance.DataRow["IsCash"];
            string functionName = (string)testContextInstance.DataRow["Function"];//FunctionID

            AccountSelectionData actual;

            actual = TerraScan.Helper.WSHelper.GetAccountSelectionData(subFund, bars,functionName, objectname, line, rollYear, description, iscash);

            if (actual == null || actual.ListAccountSelection.Rows.Count == 0)
            {
                Assert.Fail("No Records are there for searching");
            }
        }
        #endregion

        #endregion

        #region Excise Work QueueTest

        #region F1107_ExciseWorkQueue_GetWorkQueueSearchResultTest

        //
        // Added Statement Number newly in Sprint 35 (Edited by Shireesha)
        //

        /// <summary>
        ///A test for F1107_ExciseWorkQueue_GetWorkQueueSearchResult (string, string, string, string, string, string, string, string)
        ///</summary>
        [TestMethod(), DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;Persist Security Info=True;User ID=sa;Password=100%sec", "F1109", DataAccessMethod.Sequential)]
        public void F1107_ExciseWorkQueue_GetWorkQueueSearchResultTest()
        {
            string parcelNumber = (string)testContextInstance.DataRow["parcelNumber"];

            string name = (string)testContextInstance.DataRow["name"];

            string saleDate = (string)testContextInstance.DataRow["saleDate"];

            string address = (string)testContextInstance.DataRow["address"];

            string taxCode = (string)testContextInstance.DataRow["taxCode"];

            string treasurer = (string)testContextInstance.DataRow["treasurer"];

            string assessor = (string)testContextInstance.DataRow["assessor"];

            string statementNumber = (string)testContextInstance.DataRow["StatementNumber"];

            AffidavitWorkQueueData actual;

            actual = TerraScan.Helper.WSHelper.F1107_ExciseWorkQueue_GetWorkQueueSearchResult(parcelNumber, name, saleDate, address, taxCode, treasurer, assessor, statementNumber);

            if (actual == null || actual.ListExciseTaxAffidavitWorkQueue.Rows.Count < 1)
            {
                Assert.Fail("No Records Found");
            }
        }


        #endregion

        #endregion

        # region DistrictSelectionTest

        #region GetDistrictSelectionTest

        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "DistrictSelection", DataAccessMethod.Sequential), TestMethod()]
        public void F1512_GetDistrictSelectionDataTest()
        {
            int districtID = (int)testContextInstance.DataRow["districtID"];

            string district = (string)testContextInstance.DataRow["district"];

            string description = (string)testContextInstance.DataRow["description"];

            int rollYear = (int)testContextInstance.DataRow["rollYear"];

            F1512DistrictSelectionData actual;

            actual = TerraScan.Helper.WSHelper.F1512_GetDistrictSelectionData(districtID, district, description, rollYear);

            if (actual == null || actual.ListDistrictSelection.Rows.Count < 1)
            {
                Assert.Fail("No Districts Found");
            }
        }

        #endregion

        #endregion

        #region MasterNameSearchTest

        /// <summary>
        ///A test for GetMasterNameSearch (string, string, string)
        ///</summary>
        ///
        [TestMethod(), DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;Persist Security Info=True;User ID=sa;Password=100%sec", "MasterNameSearch", DataAccessMethod.Sequential)]

        public void GetMasterNameSearchTest()
        {
            string lastName = (string)testContextInstance.DataRow["lastName"];

            string firstName = (string)testContextInstance.DataRow["firstName"];

            string address = (string)testContextInstance.DataRow["address"];

            MasterNameSearchData actual;

            actual = TerraScan.Helper.WSHelper.GetMasterNameSearch(lastName, firstName, address);

            if (actual == null || actual.Tables[0].Rows.Count < 1)
            {
                Assert.Fail("No owner found");
            }
        }

        #endregion

        # region ExciseRateTest

        #region GetAccountName
        /// <summary>
        ///A test for GetAccountName (int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "AccountName", DataAccessMethod.Sequential), TestMethod()]
        public void GetAccountNameTest()
        {
            int accountId = (int)testContextInstance.DataRow["accountId"];

            ExciseTaxRateData actual;

            actual = TerraScan.Helper.WSHelper.GetAccountName(accountId);

            if (actual == null || actual.Tables.Count < 0 || actual.Tables[0].Rows.Count < 0)
            {
                Assert.Fail(" Record not saved");
            }
        }

        #endregion

        #endregion

        # region ExciseTax AffidavitTest

        # region GetOwnerDetailsTest

        /// <summary>
        ///  A test for GetOwnerDetails (int)
        /// </summary>

        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "Owner", DataAccessMethod.Sequential), TestMethod()]
        public void GetOwnerDetailsTest()
        {
            int ownerId = (int)testContextInstance.DataRow["OwnerID"];

            PartiesOwnerDetailsData actual;

            actual = TerraScan.Helper.WSHelper.GetOwnerDetails(ownerId);

            if (actual == null || actual.Tables.Count < 1 || actual.ListPartiesOwnerDetail.Rows.Count < 1)
            {
                Assert.Fail("No Owner Found");
            }
        }

        # endregion

        # endregion

        #region ListHelpDocumentFormTest

        /// <summary>
        ///A test for ListHelpDocumentForm (string)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "Help", DataAccessMethod.Sequential), TestMethod()]
        public void ListHelpDocumentFormTest()
        {
            string formFile = (string)testContextInstance.DataRow["FormFile"];

            HelpEngineData actual;

            actual = TerraScan.Helper.WSHelper.ListHelpDocumentForm(formFile);

            if (actual == null || actual.ListHelpDocumentForm.Count < 1 || actual.ListHelpDocumentForm.Rows.Count < 1)
            {
                Assert.Fail(" record not found");
            }

        }
        #endregion

        # region MakeDepositsTest

        # region GetPaymentItemsDetailsTest

        /// <summary>
        ///A test for GetPaymentItemsDetails ()
        ///</summary>
        [TestMethod()]
        public void GetPaymentItemsDetailsTest()
        {
            MakeDepositsData actual;

            actual = TerraScan.Helper.WSHelper.GetPaymentItemsDetails();

            if (actual == null || actual.ListAccountsGridTable.Rows.Count < 1 || actual.ListPaymentItemTable.Rows.Count < 1)
            {
                Assert.Fail("No Records Found");
            }
        }
        #endregion

        # region SavePaymentItemsDetailsTest

        /// <summary>
        ///A test for SavePaymentItemsDetails (int, decimal, int, string)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "MakeDeposits", DataAccessMethod.Sequential), TestMethod()]
        public void SavePaymentItemsDetailsTest()
        {
            int registerID = (int)testContextInstance.DataRow["RegisterID"];

            decimal amount = Convert.ToDecimal(testContextInstance.DataRow["Amount"]);

            int userID = (int)testContextInstance.DataRow["UserID"];

            string paymentItemsDetails = (string)testContextInstance.DataRow["PaymentItemsDetails"];

            TerraScan.Helper.WSHelper.SavePaymentItemsDetails(registerID, amount, userID, paymentItemsDetails);

        }

        #endregion

        #endregion

        # region PostingHistoryTest

        # region ListPostTypesTest

        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "ListPostTypes", DataAccessMethod.Sequential), TestMethod()]
        public void ListPostTypesTest()
        {
            int form = (int)testContextInstance.DataRow["Form"];

            PostingHistoryData.ListPostTypeDataTable actual;

            actual = TerraScan.Helper.WSHelper.ListPostTypes(form);

            if (actual == null)
            {
                Assert.Fail(" record not found");
            }
        }
        #endregion

        # region ListPostingHistoryTest
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;Persist Security Info=True;User ID=sa;Password=100%sec", "PostingHistory", DataAccessMethod.Sequential), TestMethod()]
        public void ListPostingHistoryTest()
        {
            int count = (int)testContextInstance.DataRow["count"];

            int postTypeID = (int)testContextInstance.DataRow["postTypeID"];

            PostingHistoryData.ListPostingHistoryDataTable actual;

            actual = TerraScan.Helper.WSHelper.ListPostingHistory(count, postTypeID);

            if (actual == null || actual.Count < 0 || actual.Rows.Count < 0)
            {
                Assert.Fail(" No Records Found");
            }


            //Assert.AreEqual(expected, actual, "TerraScan.Helper.WSHelper.ListPostingHistory did not return the expected value.");
            //Assert.Inconclusive("Verify the correctness of this test method.");
        }
        #endregion

        # endregion

        # region Posting ErrorTest

        # region ListPostingErrorsTest

        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;Persist Security Info=True;User ID=sa;Password=100%sec", "PostingErrorsTest", DataAccessMethod.Sequential), TestMethod()]
        public void ListPostingErrorsTest()
        {
            int userId = (int)testContextInstance.DataRow["userId"];

            PostingErrorsData actual;

            actual = TerraScan.Helper.WSHelper.ListPostingErrors(userId);

            if (actual == null || actual.ListPostingErrors.Rows.Count < 0)
            {
                Assert.Fail(" No Records Found");
            }
        }
        #endregion

        # region InsertAccountTest

        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;Persist Security Info=True;User ID=sa;Password=100%sec", "InsertAccount", DataAccessMethod.Sequential), TestMethod()]
        public void InsertAccountTest()
        {
            int userId = (int)testContextInstance.DataRow["UserId"];

            int errorTypeId = (int)testContextInstance.DataRow["ErrorTypeID"];

            TerraScan.Helper.WSHelper.InsertAccount(userId, errorTypeId);

        }
        # endregion

        # endregion

        # region Posting

        # region ListPreviewPostingTest

        /// <summary>
        ///A test for ListPreviewPosting (DateTime)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "F1000", DataAccessMethod.Sequential), TestMethod()]
        public void ListPreviewPostingTest()
        {
            SaveReceiptTest();

            DateTime postDate = (DateTime)testContextInstance.DataRow["PostDate"];

            PostingData actual;

            actual = TerraScan.Helper.WSHelper.ListPreviewPosting(postDate);

            if (actual == null || actual.ListPostingPreview.Rows.Count < 1)
            {
                Assert.Fail("No Records Found");
            }

        }

        # endregion

        # region Delete

        # region ClearTemporaryRecordsTest

        /// <summary>
        ///A test for ClearTemporaryRecords (int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;Persist Security Info=True;User ID=sa;Password=100%sec", "InsertAccount", DataAccessMethod.Sequential), TestMethod()]
        public void ClearTemporaryRecordsTest()
        {
            int userId = (int)testContextInstance.DataRow["UserID"];

            TerraScan.Helper.WSHelper.ClearTemporaryRecords(userId);

        }

        #endregion

        # endregion

        # region Save

        #region CompilePostingRecordSetTest

        /// <summary>
        ///A test for CompilePostingRecordSet (DateTime, string, int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "Posting", DataAccessMethod.Sequential), TestMethod()]
        public void CompilePostingRecordSetTest()
        {
            DateTime postDate = (DateTime)testContextInstance.DataRow["PostDate"];

            string selectedPostTypes = (string)testContextInstance.DataRow["SelectedPostTypes"];

            int userId = (int)testContextInstance.DataRow["UserID"];

            PostingData actual;

            actual = TerraScan.Helper.WSHelper.CompilePostingRecordSet(postDate, selectedPostTypes, userId);

            if (actual == null || actual.PostingErrorCount.Rows.Count < 1)
            {
                Assert.Fail("No Records Found");
            }
        }

        #endregion

        # region PerformPostingTest

        /// <summary>
        ///A test for PerformPosting (DateTime, string, int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "Posting", DataAccessMethod.Sequential), TestMethod()]
        public void PerformPostingTest()
        {
            DateTime postDate = (DateTime)testContextInstance.DataRow["PostDate"];

            string selectedPostTypes = (string)testContextInstance.DataRow["SelectedPostTypes"];

            int userId = (int)testContextInstance.DataRow["UserID"];

            PostingData actual;

            actual = TerraScan.Helper.WSHelper.PerformPosting(postDate, selectedPostTypes, userId);

            if (actual == null || actual.PostLockCount.Rows.Count < 1)
            {
                Assert.Fail("No Records Found");
            }
        }

        # endregion

        # endregion

        # endregion

        #region SQl Query

        #region Save SQLQuery
        /// <summary>
        ///A test for SaveSQLQuery (int, string, string, int, int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "SQLQuery", DataAccessMethod.Sequential), TestMethod()]
        public void SaveSQLQueryTest()
        {
            int categoryId = Convert.ToInt32(testContextInstance.DataRow["CategoryID"].ToString());

            string Description = (String)testContextInstance.DataRow["Description"];

            string Statement = (String)testContextInstance.DataRow["SQLString"];

            int ModuleID = Convert.ToInt32(testContextInstance.DataRow["ModuleID"].ToString());

            int UserID = Convert.ToInt32(testContextInstance.DataRow["InsertedBy"].ToString());

            int sqlId = Convert.ToInt32(testContextInstance.DataRow["SqlID"].ToString());

            int actual;

            actual = TerraScan.Helper.WSHelper.SaveSQLQuery(categoryId, Description, Statement, ModuleID, UserID, sqlId);

            if (actual == 0)
            {
                Assert.Fail("Record Not Saved");
            }

        }
        #endregion

        #region SQL Category
        /// <summary>
        ///A test for GetSQLCategory ()
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "SQLQuery", DataAccessMethod.Sequential), TestMethod()]
        public void GetSQLCategoryTest()
        {
            SQLSupportData actual;

            actual = TerraScan.Helper.WSHelper.GetSQLCategory();

            if (actual == null || actual.Tables.Count < 0 || actual.Tables[0].Rows.Count < 0)
            {
                Assert.Fail("Record not saved");
            }
        }
        #endregion

        #region Get SQL Description

        /// <summary>
        ///A test for GetSQLDescription (int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "SQLQuery", DataAccessMethod.Sequential), TestMethod()]
        public void GetSQLDescriptionTest()
        {
            int categoryID = (int)testContextInstance.DataRow["CategoryID"];

            SQLSupportData actual;

            actual = TerraScan.Helper.WSHelper.GetSQLDescription(categoryID);

            if (actual == null || actual.Tables.Count < 0 || actual.Tables[0].Rows.Count < 0)
            {
                Assert.Fail("Record not saved");
            }
        }

        #endregion

        #region Get SQl String
        /// <summary>
        ///A test for GetSQLString (int, int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "SQLQuery", DataAccessMethod.Sequential), TestMethod()]
        public void GetSQLStringTest()
        {
            int categoryId = Convert.ToInt16(testContextInstance.DataRow["CategoryID"]);

            int sqlId = Convert.ToInt16(testContextInstance.DataRow["SQLID"]);

            SQLSupportData actual;

            actual = TerraScan.Helper.WSHelper.GetSQLString(categoryId, sqlId);

            if (actual == null || actual.Tables.Count < 0 || actual.Tables[0].Rows.Count < 0)
            {
                Assert.Fail("Record not saved");
            }

        }
        #endregion

        #region delete

        /// <summary>
        ///A test for F9015_DeleteQuery (int, int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "SQLQuery", DataAccessMethod.Sequential), TestMethod()]
        public void F9015_DeleteQueryTest()
        {
            int sqlId = Convert.ToInt32(testContextInstance.DataRow["SqlID"].ToString()); // TODO: Initialize to an appropriate value

            int userId = (int)testContextInstance.DataRow["UserID"];

            int actual;

            actual = TerraScan.Helper.WSHelper.F9015_DeleteQuery(sqlId, userId);

            if (actual == 0)
            {
                Assert.Fail(" No record Available");
            }
        }
        #endregion

        #endregion

        #region Support formTest

        #region GetformDetails
        /// <summary>
        ///A test for GetFormDetails (int, string)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "Getform", DataAccessMethod.Sequential), TestMethod()]
        public void GetFormDetailsTest()
        {
            int Form = (int)testContextInstance.DataRow["Form"];

            int UserID = (int)testContextInstance.DataRow["userId"];

            SupportFormData actual;

            actual = TerraScan.Helper.WSHelper.GetFormDetails(Form, UserID);

            if (actual == null || actual.GetFormDetails.Count < 1 || actual.GetFormDetails.Rows.Count < 1)
            {
                Assert.Fail(" Record not saved");
            }

        }
        #endregion

        #region ListUserNames
        /// <summary>
        ///A test for ListUserNames ()
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "Getform", DataAccessMethod.Sequential), TestMethod()]
        public void ListUserNamesTest()
        {
            SupportFormData actual;

            actual = TerraScan.Helper.WSHelper.ListUserNames();

            if (actual == null || actual.ListUsers.Rows.Count < 1)
            {
                Assert.Fail(" No Record Found");
            }
        }

        #endregion

        #endregion

        # region Active Work OrderTest

        # region GetWorkOrderDetails

        /// <summary>
        ///A test for GetWorkOrderDetails (int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;Persist Security Info=True;User ID=sa;Password=100%sec", "ActiveWorkOrder", DataAccessMethod.Sequential), TestMethod()]
        public void GetWorkOrderDetailsTest()
        {
            int featureClassId = (int)testContextInstance.DataRow["FeatureClassID"];

            GDocWorkOrderData actual;

            actual = TerraScan.Helper.WSHelper.GetWorkOrderDetails(featureClassId);

            //if (actual == null || actual.Tables[0].Rows.Count<1)
            //{
            //    Assert.Fail("No Records Found");
            //}

        }
        # endregion

        # endregion

        # region Event HeaderTest

        # region SaveGDocEventHeaderTest

        /// <summary>
        ///A test for SaveGDocEventHeader (string, int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;Persist Security Info=True;User ID=sa;Password=100%sec", "EventHeader", DataAccessMethod.Sequential), TestMethod()]

        public void SaveGDocEventHeaderTest()
        {
            string eventItems = (string)testContextInstance.DataRow["EventItems"];

            int userId = (int)testContextInstance.DataRow["UserID"];

            GDocEventHeaderData actual;

            actual = TerraScan.Helper.WSHelper.SaveGDocEventHeader(eventItems, userId);
        }

        # endregion

        # region GetGDocEventHeader

        /// <summary>
        ///A test for GetGDocEventHeader (int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;Persist Security Info=True;User ID=sa;Password=100%sec", "EventHeader", DataAccessMethod.Sequential), TestMethod()]
        public void GetGDocEventHeaderTest()
        {
            int eventId = (int)testContextInstance.DataRow["eventId"];

            GDocEventHeaderData actual;

            actual = TerraScan.Helper.WSHelper.GetGDocEventHeader(eventId);

            if (actual == null || actual.GetGDocEventHeader.Rows.Count < 1)
            {
                Assert.Fail("No Records Found");
            }
        }

        # endregion

        # region ListGDocEventHeaderStatusTest

        /// <summary>
        ///A test for ListGDocEventHeaderStatus (int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;Persist Security Info=True;User ID=sa;Password=100%sec", "EventHeader", DataAccessMethod.Sequential), TestMethod()]

        public void ListGDocEventHeaderStatusTest()
        {
            int eventId = (int)testContextInstance.DataRow["EventID"];

            GDocEventHeaderData actual;

            actual = TerraScan.Helper.WSHelper.ListGDocEventHeaderStatus(eventId);

            if (actual == null || actual.ListGDocEventHeaderStatus.Rows.Count < 1)
            {
                Assert.Fail("No Header found");
            }
        }

        # endregion

        # region DeleteGDocEventHeaderTest

        /// <summary>
        ///A test for DeleteGDocEventHeader (int, int, int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;Persist Security Info=True;User ID=sa;Password=100%sec", "DeleteEventHeader", DataAccessMethod.Sequential), TestMethod()]
        public void DeleteGDocEventHeaderTest()
        {
            int eventId = (int)testContextInstance.DataRow["eventId"];

            int childFlag = (int)testContextInstance.DataRow["childFlag"];

            int userId = (int)testContextInstance.DataRow["UserID"];

            TerraScan.Helper.WSHelper.DeleteGDocEventHeader(eventId, childFlag, userId);
        }

        # endregion

        # endregion

        # region EventEngineTest

        # region ListEventTypeStatusDetailsTest

        /// <summary>
        ///A test for ListEventTypeStatusDetails (int)
        ///</summary>

        [TestMethod()]
        public void ListEventTypeStatusDetailsTest()
        {
            int featureClassID = 2001;

            GDocEventEngineTypeStatusData actual;

            actual = TerraScan.Helper.WSHelper.ListEventTypeStatusDetails(featureClassID);

            if (actual == null || actual.ListEventStatusTypeTable.Rows.Count < 1)
            {
                Assert.Fail("No record Found");
            }
        }

        # endregion

        # endregion

        #region DepositHistoryTest

        #region ListDepositHistoryDetailsTest

        /// <summary>
        ///A test for ListDepositHistoryDetails ()
        ///</summary>
        [TestMethod()]
        public void ListDepositHistoryDetailsTest()
        {
            DepositHistoryData actual;

            actual = TerraScan.Helper.WSHelper.ListDepositHistoryDetails();

            if (actual == null || actual.ListDepositHistoryTable.Rows.Count < 1)
            {
                Assert.Fail("No Records Found");
            }
        }

        #endregion

        #region GetDepositHistorySearchResultTest

        /// <summary>
        ///A test for GetDepositHistorySearchResult (int, string)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "DepositHistory", DataAccessMethod.Sequential), TestMethod()]
        public void GetDepositHistorySearchResultTest()
        {
            int form = (int)testContextInstance.DataRow["Form"];

            string whereCondnSql = (string)testContextInstance.DataRow["WhereCondnSQL"];

            DepositHistoryData actual;

            actual = TerraScan.Helper.WSHelper.GetDepositHistorySearchResult(form, whereCondnSql);

            if (actual == null || actual.Tables[0].Rows.Count < 1)
            {
                Assert.Fail("No records are there");
            }
        }

        #endregion

        #region UpdateDepositHistoryTest

        /// <summary>
        ///A test for UpdateDepositHistory (int, int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "DepositHistory", DataAccessMethod.Sequential), TestMethod()]
        public void UpdateDepositHistoryTest()
        {
            int clid = (int)testContextInstance.DataRow["CLID"];

            int userId = (int)testContextInstance.DataRow["UserID"];

            TerraScan.Helper.WSHelper.UpdateDepositHistory(clid, userId);

        }

        #endregion

        #region ListAccountNamesTest

        [TestMethod()]
        public void ListAccountNamesTest()
        {
            DepositHistoryData.ListAccountNameDataTable actual;

            actual = TerraScan.Helper.WSHelper.ListAccountNames();

            //if (actual == null)
            //{
            //    Assert.Fail("No records are there");
            //}

        }

        #endregion

        #endregion

        #region Reverse GL Post Test

        #region GetPostIdDetailsTest

        /// <summary>
        ///A test for GetPostIdDetails (int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;Persist Security Info=True;User ID=sa;Password=100%sec", "GetPostIdDetails", DataAccessMethod.Sequential), TestMethod()]
        public void GetPostIdDetailsTest()
        {
            int PostId = (int)testContextInstance.DataRow["PostId"];

            PostIdDetailsData actual;

            actual = TerraScan.Helper.WSHelper.GetPostIdDetails(PostId);

            if (actual == null)
            {
                Assert.Fail("No Records Found");
            }

        }
        #endregion

        #region InsertReverseGLPostTest

        /// <summary>
        ///A test for InsertReverseGLPost (int, int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;Persist Security Info=True;User ID=sa;Password=100%sec", "ReverseGL", DataAccessMethod.Sequential), TestMethod()]
        public void InsertReverseGLPostTest()
        {
            int postId = (int)testContextInstance.DataRow["PostId"];

            int userId = (int)testContextInstance.DataRow["UserId"];

            TerraScan.Helper.WSHelper.InsertReverseGLPost(postId, userId);

        }

        #endregion

        #endregion

        #region F8056_Inspection Test

        #region ListInspectionDetails
        /// <summary>
        ///A test for F8056_ListInspectionDetails (int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "F8056", DataAccessMethod.Sequential), TestMethod()]
        public void F8056_ListInspectionDetailsTest()
        {
            int eventId = (int)testContextInstance.DataRow["EventID"];

            InspectionEventData actual;

            actual = TerraScan.Helper.WSHelper.F8056_ListInspectionDetails(eventId);

            if (actual == null || actual.ListInspectionComponent.Rows.Count < 1 || actual.ListInspectionCondition.Rows.Count < 1 || actual.ListInspectionAction.Rows.Count < 1)
            {
                Assert.Fail("No Records Found");
            }
        }

        #endregion

        #region SaveInspectionDetails

        /// <summary>
        ///A test for F8056_SaveInspectionDetails (string, int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "F8056", DataAccessMethod.Sequential), TestMethod()]
        public void F8056_SaveInspectionDetailsTest()
        {
            string eventItems = testContextInstance.DataRow["EventItems"].ToString();

            int userId = (int)testContextInstance.DataRow["UserID"];

            TerraScan.Helper.WSHelper.F8056_SaveInspectionDetails(eventItems, userId);

        }

        #endregion

        #region UpdateInspectionDetails
        /// <summary>
        ///A test for F8056_UpdateInspectionDetails (string, int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "F8056", DataAccessMethod.Sequential), TestMethod()]
        public void F8056_UpdateInspectionDetailsTest()
        {
            string eventItems = testContextInstance.DataRow["EventItems"].ToString();

            int userId = (int)testContextInstance.DataRow["UserID"];

            TerraScan.Helper.WSHelper.F8056_UpdateInspectionDetails(eventItems, userId);

        }
        #endregion

        #region DeleteInspectionDetails

        /// <summary>
        ///A test for F8056_DeleteInspectionDetails (int, int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "F8056", DataAccessMethod.Sequential), TestMethod()]
        public void F8056_DeleteInspectionDetailsTest()
        {
            int inspectionId = (int)testContextInstance.DataRow["InspectionId"];

            int userId = (int)testContextInstance.DataRow["UserID"];

            int actual;

            actual = TerraScan.Helper.WSHelper.F8056_DeleteInspectionDetails(inspectionId, userId);

            if (actual == 0)
            {
                Assert.Fail(" NO record Available");
            }

        }
        #endregion

        #endregion

        # region F8104_Sanitary Inspection Test

        // Created by :- S.SATHIYAN.

        # region ListEventEngineDetailTypes

        /// <summary>
        ///A test for ListEventEngineDetailTypes ()
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "Listeventenginedetailtype", DataAccessMethod.Sequential), TestMethod()]
        public void ListEventEngineDetailTypesTest()
        {
            SanitaryPipeInspectionDetailsData actual;

            actual = TerraScan.Helper.WSHelper.ListEventEngineDetailTypes();

            if (actual == null || actual.ListEventEngineDetailType.Rows.Count < 1)
            {
                Assert.Fail(" No Record Found");
            }
        }

        # endregion

        # region ListEventEngineTVDetails

        /// <summary>
        ///A test for ListEventEngineTVDetails (int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "Sanitary Pipe Inspection Details", DataAccessMethod.Sequential), TestMethod()]
        public void ListEventEngineTVDetailsTest()
        {
            int eventId = (int)testContextInstance.DataRow["eventID"];

            SanitaryPipeInspectionDetailsData actual;

            actual = TerraScan.Helper.WSHelper.ListEventEngineTVDetails(eventId);

        }
        # endregion

        # region Save EventEngine TV Details

        /// <summary>
        ///A test for SaveEventEngineTVDetails (string, int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "Save EventEngine TV Details", DataAccessMethod.Sequential), TestMethod()]
        public void SaveEventEngineTVDetailsTest()
        {
            string eventItems = (string)testContextInstance.DataRow["eventItems"];

            int userId = (int)testContextInstance.DataRow["UserID"];

            TerraScan.Helper.WSHelper.SaveEventEngineTVDetails(eventItems, userId);

        }

        # endregion

        # region DeleteEventEngineTVDetails

        /// <summary>
        ///A test for DeleteEventEngineTVDetails (int, int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "Sanitary Pipe Inspection Details", DataAccessMethod.Sequential), TestMethod()]
        public void DeleteEventEngineTVDetailsTest()
        {
            int detailId = (int)testContextInstance.DataRow["DetailID"];

            int userId = (int)testContextInstance.DataRow["UserID"];

            int actual;

            actual = TerraScan.Helper.WSHelper.DeleteEventEngineTVDetails(detailId, userId);

            if (actual == 0)
            {
                Assert.Fail(" NO record Available");
            }

        }
        # endregion

        # region Update EventEngine TV Details

        /// <summary>
        ///A test for UpdateEventEngineTVDetails (string, int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "Update EventEngine TV Details", DataAccessMethod.Sequential), TestMethod()]
        public void UpdateEventEngineTVDetailsTest()
        {
            string eventItems = (string)testContextInstance.DataRow["eventItems"];

            int userId = (int)testContextInstance.DataRow["UserID"];

            TerraScan.Helper.WSHelper.UpdateEventEngineTVDetails(eventItems, userId);

        }

        # endregion

        # endregion

        # region F8102_Sanitary Pipe Inspection Test

        // Created by :- S.SATHIYAN.

        # region GetEventEngineEventPropertiesTest

        /// <summary>
        ///A test for GetEventEngineEventProperties (int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;Persist Security Info=True;User ID=sa;Password=100%sec", "SanitaryPipeInspection", DataAccessMethod.Sequential), TestMethod()]
        public void GetEventEngineEventPropertiesTest()
        {

            int eventId = (int)testContextInstance.DataRow["eventID"];

            SanitaryPipeInspectionData actual;

            actual = TerraScan.Helper.WSHelper.GetEventEngineEventProperties(eventId);

            if (actual == null || actual.GetEventEngineEventProperties.Rows.Count < 1)
            {
                Assert.Fail("No Records Found");
            }
        }
        #endregion

        # region SaveEventEngineEventProperties

        /// <summary>
        ///A test for SaveEventEngineEventProperties (string, int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "EventEngineEventProperties", DataAccessMethod.Sequential), TestMethod()]
        public void SaveEventEngineEventPropertiesTest()
        {
            string eventItems = (string)testContextInstance.DataRow["eventItems"];

            int userId = (int)testContextInstance.DataRow["UserID"];

            TerraScan.Helper.WSHelper.SaveEventEngineEventProperties(eventItems, userId);

        }

        # endregion

        #endregion

        #region F8052_Linearevent Test

        // Created by :- S.SATHIYAN.

        # region GetLinearEventType
        /// <summary>
        ///A test for GetLinearEventType (int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "8052", DataAccessMethod.Sequential), TestMethod()]
        public void GetLinearEventTypeTest()
        {
            int eventId = (int)testContextInstance.DataRow["eventId"];

            LinearEventData actual;

            actual = TerraScan.Helper.WSHelper.GetLinearEventType(eventId);

            if (actual == null || actual.GetFSLinearEventType.Rows.Count < 1)
            {
                Assert.Fail("No Records Found");
            }
        }

        #endregion

        #region SaveLinearEventType

        /// <summary>
        ///A test for SaveLinearEventType (string, int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "8052", DataAccessMethod.Sequential), TestMethod()]
        public void SaveLinearEventTypeTest()
        {
            string eventItems = (string)testContextInstance.DataRow["eventItems"];

            int userId = (int)testContextInstance.DataRow["UserID"];

            TerraScan.Helper.WSHelper.SaveLinearEventType(eventItems, userId);


        }

        #endregion

        #endregion

        #region 8912 GDoc Work order CallIn Test

        #region Get GDoc Work order CallIn

        /// <summary>
        ///A test for F8912_GetWorkOrderCallIn (int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "8912", DataAccessMethod.Sequential), TestMethod()]
        public void F8912_GetWorkOrderCallInTest()
        {
            int workorderId = (int)testContextInstance.DataRow["WorkorderID"];

            GDocWorkorderCallInData actual;

            actual = TerraScan.Helper.WSHelper.F8912_GetWorkOrderCallIn(workorderId);

            if (actual == null || actual.F8912_GetWorkOrderCallIn.Count < 1)
            {
                Assert.Fail("No Records Found");
            }
        }

        #endregion

        #region Save GDoc Work order CallIn
        /// <summary>
        ///A test for F8912_SaveWorkOrderCallIn (string, int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "8912", DataAccessMethod.Sequential), TestMethod()]
        public void F8912_SaveWorkOrderCallInTest()
        {
            string workOrderCall = testContextInstance.DataRow["WorkOrderCall"].ToString();

            int userId = (int)testContextInstance.DataRow["UserID"];

            GDocWorkorderCallInData actual;

            actual = TerraScan.Helper.WSHelper.F8912_SaveWorkOrderCallIn(workOrderCall, userId);

            if (actual == null)
            {
                Assert.Fail(" Record not saved");
            }
        }

        #endregion

        #region Get GDoc Address(Method not found in WSHelper)

        ///// <summary>
        /////A test for wListAddresses()
        /////</summary>
        //[DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "8912", DataAccessMethod.Sequential), TestMethod()]
        //public void F8912_GetWorkOrderCallInAddressTest()
        //{
        //    GDocWorkorderCallInData actual;

        //    actual = TerraScan.Helper.WSHelper.F8912_GetWorkOrderCallInAddress();

        //    if (actual == null)
        //    {
        //        Assert.Fail("No Records Found");
        //    }
        //}

        #endregion

        #endregion

        #region  8910 GDoc Work order General Test

        #region Get GDoc Work order General

        /// <summary>
        ///A test for F8910_GetWorkOrderGeneral (int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "F8910", DataAccessMethod.Sequential), TestMethod()]
        public void F8910_GetWorkOrderGeneralTest()
        {
            int workorderId = (int)testContextInstance.DataRow["WorkOrderID"];

            GDocWorkOrderGeneralData actual;

            actual = TerraScan.Helper.WSHelper.F8910_GetWorkOrderGeneral(workorderId);

            if (actual == null || actual.F8910_GetWorkOrderGeneral.Count < 1)
            {
                Assert.Fail("No Records Found");
            }
        }
        #endregion

        #region Save GDoc Work order General

        /// <summary>
        ///A test for F8910_SaveWorkOrderGeneral (string, int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "F8910", DataAccessMethod.Sequential), TestMethod()]
        public void F8910_SaveWorkOrderGeneralTest()
        {
            string workOrderGeneral = testContextInstance.DataRow["WOGeneral"].ToString();

            int userId = (int)testContextInstance.DataRow["UserID"];

            GDocWorkOrderGeneralData actual;

            actual = TerraScan.Helper.WSHelper.F8910_SaveWorkOrderGeneral(workOrderGeneral, userId);

            if (actual == null)
            {
                Assert.Fail(" Record not saved");
            }
        }
        #endregion

        #endregion

        #region Refund Management Test

        # region ListRefundPaymentsTest

        /// <summary>
        ///A test for ListRefundPayments (int, string)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "RefundPayment", DataAccessMethod.Sequential), TestMethod()]
        public void ListRefundPaymentsTest()
        {
            int form = (int)testContextInstance.DataRow["Form"];

            string whereCondnSql = (string)testContextInstance.DataRow["WhereCondnSQL"];

            RefundManagementData.ListRefundPaymentsDataTable actual;

            actual = TerraScan.Helper.WSHelper.ListRefundPayments(form, whereCondnSql);

            if (actual == null || actual.Rows.Count < 1)
            {
                Assert.Fail("No Payments Found");
            }
        }

        #endregion

        #endregion

        # region Disbursement

        # region F1210_SaveDisbursementTest

        /// <summary>
        ///A test for F1210_SaveDisbursement (int, int, DateTime, string, int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "1210_SaveDisbursement", DataAccessMethod.Sequential), TestMethod()]
        public void F1210_SaveDisbursementTest()
        {
            int registerId = (int)testContextInstance.DataRow["registerId"];

            int userId = (int)testContextInstance.DataRow["userId"];

            DateTime postDate = (DateTime)testContextInstance.DataRow["postDate"];

            string agencies = (string)testContextInstance.DataRow["agencies"];

            int overrideStatus = (int)testContextInstance.DataRow["overrideStatus"];

            int actual;

            actual = TerraScan.Helper.WSHelper.F1210_SaveDisbursement(registerId, userId, postDate, agencies, overrideStatus);

            if (actual == 0)
            {
                Assert.Fail("No records found");
            }
        }

        # endregion

        #endregion

        #region 8106 Stoppage Event Details

        #region Get stoppage Event Details

        /// <summary>
        ///A test for F8106_GetStoppageEventDetails (int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "F8106", DataAccessMethod.Sequential), TestMethod()]
        public void F8106_GetStoppageEventDetailsTest()
        {
            int eventId = (int)testContextInstance.DataRow["EventID"];

            StoppageEventData actual;

            actual = TerraScan.Helper.WSHelper.F8106_GetStoppageEventDetails(eventId);

            if (actual == null || actual.GetEventStoppage.Count < 1 || actual.GetEventStoppage.Rows.Count < 1)
            {
                Assert.Fail(" Record not saved");
            }
        }

        #endregion

        #region Save Stoppage Event Details

        /// <summary>
        ///A test for F8106_SaveStoppageEventDetails (string, int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "F8106", DataAccessMethod.Sequential), TestMethod()]
        public void F8106_SaveStoppageEventDetailsTest()
        {
            string eventItems = testContextInstance.DataRow["EventItems"].ToString();

            int userId = (int)testContextInstance.DataRow["UserID"];

            StoppageEventData actual;

            actual = TerraScan.Helper.WSHelper.F8106_SaveStoppageEventDetails(eventItems, userId);

            if (actual == null)
            {
                Assert.Fail(" Record not saved");
            }
        }
        #endregion

        #endregion

        # region F1226_Check Detail

        # region F1226_ListCashLedgerTest

        /// <summary>
        ///A test for F1226_ListCashLedger ()
        ///</summary>
        [TestMethod()]
        public void F1226_ListCashLedgerTest()
        {
            CheckDetailData actual;

            actual = TerraScan.Helper.WSHelper.F1226_ListCashLedger();

            if (actual == null)
            {
                Assert.Fail("NO Row affected");
            }
        }

        # endregion

        # region F1226_GetCashLedgerTest

        /// <summary>
        ///A test for F1226_GetCashLedger (int)
        ///</summary>
        // [TestMethod()]
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;Persist Security Info=True;User ID=sa;Password=100%sec", "getcashledger", DataAccessMethod.Sequential), TestMethod()]
        public void F1226_GetCashLedgerTest()
        {
            int clid = (int)testContextInstance.DataRow["clid"];

            CheckDetailData actual;

            actual = TerraScan.Helper.WSHelper.F1226_GetCashLedger(clid);

            if (actual == null)
            {
                Assert.Fail("No Row Affected");
            }
        }

        # endregion

        # region F1226_DeleteCashLedger

        /// <summary>
        ///A test for F1226_DeleteCashLedger (int, int)
        ///</summary>
        //[TestMethod()]
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;Persist Security Info=True;User ID=sa;Password=100%sec", "deletecashledger", DataAccessMethod.Sequential), TestMethod()]
        public void F1226_DeleteCashLedgerTest()
        {
            int clid = (int)testContextInstance.DataRow["clid"];

            int userId = (int)testContextInstance.DataRow["UserID"];

            TerraScan.Helper.WSHelper.F1226_DeleteCashLedger(clid, userId);

        }

        # endregion

        # region F1226_UpdateCashLedgerStatus

        /// <summary>
        ///A test for F1226_UpdateCashLedgerStatus (int, int, DateTime, int, int)
        ///</summary>
        //[TestMethod()]
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;Persist Security Info=True;User ID=sa;Password=100%sec", "updatestatus", DataAccessMethod.Sequential), TestMethod()]
        public void F1226_UpdateCashLedgerStatusTest()
        {
            int clid = (int)testContextInstance.DataRow["clid"];

            int userId = (int)testContextInstance.DataRow["userid"];

            DateTime functionDate = (DateTime)testContextInstance.DataRow["functionDate"];

            int functionId = (int)testContextInstance.DataRow["functionid"];

            int loginUserId = (int)testContextInstance.DataRow["LoginUserID"];

            TerraScan.Helper.WSHelper.F1226_UpdateCashLedgerStatus(clid, userId, functionDate, functionId, loginUserId);

        }

        # endregion

        #endregion

        #region F8054_PointEventType

        // Created by :- S.SATHIYAN.

        #region SavePointEventType

        /// <summary>
        ///A test for SavePointEventType (string, int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "F8054_PointEventType", DataAccessMethod.Sequential), TestMethod()]
        public void SavePointEventTypeTest()
        {
            string eventItems = (string)testContextInstance.DataRow["eventItems"];

            int userId = (int)testContextInstance.DataRow["UserID"];

            TerraScan.Helper.WSHelper.SavePointEventType(eventItems, userId);

        }

        #endregion

        #region GetPointEventType

        /// <summary>
        ///A test for GetPointEventType (int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "F8054_PointEventType", DataAccessMethod.Sequential), TestMethod()]
        public void GetPointEventTypeTest()
        {
            int eventId = (int)testContextInstance.DataRow["eventId"];

            ///PointEventData expected = null;
            PointEventData actual;

            actual = TerraScan.Helper.WSHelper.GetPointEventType(eventId);

            if (actual == null)
            {
                Assert.Fail("No Records Found");
            }
        }

        #endregion

        #endregion

        # region F8040_Time

        //Created by :- S.SATHIYAN.

        # region F8040_SaveTime

        /// <summary>
        ///A test for F8040_SaveTime (string, int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "F8040_Time", DataAccessMethod.Sequential), TestMethod()]
        public void F8040_SaveTimeTest()
        {
            string timeDetails = (string)testContextInstance.DataRow["timeDetails"];

            int userId = (int)testContextInstance.DataRow["UserID"];

            TerraScan.Helper.WSHelper.F8040_SaveTime(timeDetails, userId);

        }
        # endregion

        # region F8040_UpdateTime

        /// <summary>
        ///A test for F8040_UpdateTime (string, int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "F8040_TimeUpdate", DataAccessMethod.Sequential), TestMethod()]
        public void F8040_UpdateTimeTest()
        {
            string timeDetails = (string)testContextInstance.DataRow["timeDetails"];

            int userId = (int)testContextInstance.DataRow["UserID"];

            TerraScan.Helper.WSHelper.F8040_UpdateTime(timeDetails, userId);

        }

        #endregion

        # region F8040_ListTimeInformation
        /// <summary>
        ///A test for F8040_ListTimeInformation (int, int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "F8040_Time", DataAccessMethod.Sequential), TestMethod()]
        public void F8040_ListTimeInformationTest()
        {
            int formId = (int)testContextInstance.DataRow["formId"];

            int keyId = (int)testContextInstance.DataRow["keyId"];

            F8040TimeData actual;

            actual = TerraScan.Helper.WSHelper.F8040_ListTimeInformation(formId, keyId);

            if (actual == null || actual.ListTime.Rows.Count < 1)
            {
                Assert.Fail(" No Record Found");
            }
        }

        # endregion

        #region F8040_ListTimeResourceInformation

        /// <summary>
        ///A test for F8040_ListTimeResourceInformation (int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "F8040_Time", DataAccessMethod.Sequential), TestMethod()]
        public void F8040_ListTimeResourceInformationTest()
        {
            int isactive = (int)testContextInstance.DataRow["isactive"];

            // F8040TimeData expected = null;
            F8040TimeData actual;

            actual = TerraScan.Helper.WSHelper.F8040_ListTimeResourceInformation(isactive);

            if (actual == null || actual.ListTimeResource.Rows.Count < 1)
            {
                Assert.Fail(" No Record Found");
            }
        }

        #endregion

        # region F8040_DeleteTime

        /// <summary>
        ///A test for F8040_DeleteTime (int, int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "F8040_Time", DataAccessMethod.Sequential), TestMethod()]
        public void F8040_DeleteTimeTest()
        {
            int timeId = (int)testContextInstance.DataRow["timeId"];

            int userId = (int)testContextInstance.DataRow["UserID"];

            TerraScan.Helper.WSHelper.F8040_DeleteTime(timeId, userId);


        }

        # endregion

        # endregion

        # region F8042_TimeFooter

        //Created by :- S.SATHIYAN.

        # region F8042_GetTimeFooterDetails

        /// <summary>
        ///A test for F8042_GetTimeFooterDetails (int, int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "F8042_GetTimeFooterDetails", DataAccessMethod.Sequential), TestMethod()]
        public void F8042_GetTimeFooterDetailsTest()
        {
            int eventId = (int)testContextInstance.DataRow["eventId"];

            int formId = (int)testContextInstance.DataRow["formId"];

            // TimeFooterData expected = null;
            TimeFooterData actual;

            actual = TerraScan.Helper.WSHelper.F8042_GetTimeFooterDetails(eventId, formId);

            if (actual == null || actual.GetTimeFooter.Rows.Count < 0)
            {
                Assert.Fail(" No Record Found");
            }
        }

        # endregion

        # endregion

        # region F8044_Material

        //Created by :- S.SATHIYAN.

        # region F8044_SaveMaterialDetails

        /// <summary>
        ///A test for F8044_SaveMaterialDetails (string, int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "F8044_Material", DataAccessMethod.Sequential), TestMethod()]
        public void F8044_SaveMaterialDetailsTest()
        {
            string materialItems = (string)testContextInstance.DataRow["materialItems"];

            int userId = (int)testContextInstance.DataRow["UserID"];

            TerraScan.Helper.WSHelper.F8044_SaveMaterialDetails(materialItems, userId);

        }

        # endregion

        # region F8044_ListMaterialDetails

        /// <summary>
        ///A test for F8044_ListMaterialDetails (int, int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "F8044_Material", DataAccessMethod.Sequential), TestMethod()]
        public void F8044_ListMaterialDetailsTest()
        {
            int formId = (int)testContextInstance.DataRow["formId"];

            int keyId = (int)testContextInstance.DataRow["keyId"];

            // F8044MaterialsData expected = null;
            F8044MaterialsData actual;

            actual = TerraScan.Helper.WSHelper.F8044_ListMaterialDetails(formId, keyId);

            if (actual == null || actual.ListMaterials.Rows.Count < 0)
            {
                Assert.Fail(" No Record Found");
            }
        }

        # endregion

        # region F8044_ListMaterialsResource

        /// <summary>
        ///A test for F8044_ListMaterialsResourceType (int, int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "F8044_Material", DataAccessMethod.Sequential), TestMethod()]
        public void F8044_ListMaterialsResourceTypeTest()
        {
            int flagActiveAndAll = (int)testContextInstance.DataRow["flagActiveAndAll"];

            int eventId = (int)testContextInstance.DataRow["EventID"];

            F8044MaterialsData actual;

            actual = TerraScan.Helper.WSHelper.F8044_ListMaterialsResourceType(flagActiveAndAll, eventId);

            if (actual == null || actual.ListMaterialsResource.Rows.Count < 1)
            {
                Assert.Fail("No Records Found");
            }
        }
        # endregion

        # region F8044_UpdateMaterialDetails

        /// <summary>
        ///A test for F8044_UpdateMaterialDetails (string, int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "F8044_MaterialUpdate", DataAccessMethod.Sequential), TestMethod()]
        public void F8044_UpdateMaterialDetailsTest()
        {
            string materialItems = (string)testContextInstance.DataRow["materialItems"];

            int userId = (int)testContextInstance.DataRow["UserID"];

            TerraScan.Helper.WSHelper.F8044_UpdateMaterialDetails(materialItems, userId);

        }

        # endregion

        # region F8044_DeleteMaterialItem

        /// <summary>
        ///A test for F8044_DeleteMaterialItem (int, int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "F8044_Material", DataAccessMethod.Sequential), TestMethod()]
        public void F8044_DeleteMaterialItemTest()
        {
            int materialId = (int)testContextInstance.DataRow["materialId"];

            int userId = (int)testContextInstance.DataRow["UserID"];

            ///int expected = 0;
            int actual;

            actual = TerraScan.Helper.WSHelper.F8044_DeleteMaterialItem(materialId, userId);

            if (actual == null)
            {
                Assert.Fail(" No Record Found");
            }
        }

        # endregion

        # endregion

        # region F8046_MaterialsFooter

        //Created by :- S.SATHIYAN.

        # region F8046_GetMaterialsFooterDetails

        /// <summary>
        ///A test for F8046_GetMaterialsFooterDetails (int, int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "F8046_MaterialsFooter", DataAccessMethod.Sequential), TestMethod()]
        public void F8046_GetMaterialsFooterDetailsTest()
        {
            int eventId = (int)testContextInstance.DataRow["eventId"];

            int formId = (int)testContextInstance.DataRow["formId"];

            MaterialsFooterData actual;

            actual = TerraScan.Helper.WSHelper.F8046_GetMaterialsFooterDetails(eventId, formId);

            if (actual == null || actual.GetMaterialFooter.Rows.Count < 0)
            {
                Assert.Fail(" No Record Found");
            }
        }

        # endregion

        # endregion

        # endregion Previous Sprints

        # region Sprint 14

        #region F15007_Account Management

        // Created By: Arun Senthil

        #region F1500_GetDescriptionTest

        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;Persist Security Info=True;User ID=sa;Password=100%sec", "1500_AccountMgmt", DataAccessMethod.Sequential), TestMethod()]
        public void F1500_GetDescriptionTest()
        {
            string keyID = (string)testContextInstance.DataRow["keyID"];

            string elementName = (string)testContextInstance.DataRow["elementName"];

            //AccountManagementData expected = null;
            AccountManagementData actual;

            actual = TerraScan.Helper.WSHelper.F1500_GetDescription(keyID, elementName);

            if (actual == null || actual.GetDescription.Count < 1 || actual.GetDescription.Rows.Count < 1)
            {
                Assert.Fail("Record not available");
            }
            //Assert.AreEqual(expected, actual, "TerraScan.Helper.WSHelper.F1500_GetDescription did not return the expected value." +
            //        "");
            //Assert.Inconclusive("Verify the correctness of this test method.");
        }

        # endregion

        #region F1500_ListAccountDetailsTest

        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;Persist Security Info=True;User ID=sa;Password=100%sec", "1500_AccountMgmt", DataAccessMethod.Sequential), TestMethod()]
        public void F1500_ListAccountDetailsTest()
        {
            int accountID = (int)testContextInstance.DataRow["accountID"];
            //AccountManagementData expected = null;
            AccountManagementData actual;

            actual = TerraScan.Helper.WSHelper.F1500_ListAccountDetails(accountID);

            if (actual == null || actual.ListAccountDetails.Rows.Count < 1)
            {
                ///Assert.Fail("No Records Found");
            }
            //Assert.AreEqual(expected, actual, "TerraScan.Helper.WSHelper.F1500_ListAccountDetails did not return the expected va" +
            //        "lue.");
            //Assert.Inconclusive("Verify the correctness of this test method.");
        }

        # endregion

        #region F1500_GetFunctionItems

        /// <summary>
        ///A test for F1500_GetFunctionItems (string)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;Persist Security Info=True;User ID=sa;Password=100%sec", "1500_AccountMgmt", DataAccessMethod.Sequential), TestMethod()]
        public void F1500_GetFunctionItemsTest()
        {
            string function = (string)testContextInstance.DataRow["function"];

            //AccountManagementData expected = null;
            AccountManagementData actual;

            actual = TerraScan.Helper.WSHelper.F1500_GetFunctionItems(function);

            if (actual == null || actual.GetFunctionItems.Count < 1 || actual.GetFunctionItems.Rows.Count < 1)
            {
                Assert.Fail("Record not available");
            }

            ////Assert.AreEqual(expected, actual, "TerraScan.Helper.WSHelper.F1500_GetFunctionItems did not return the expected valu" +
            ////        "e.");
            ////Assert.Inconclusive("Verify the correctness of this test method.");
        }
        # endregion

        #region F1500_Get Configuration Value

        /// <summary>
        ///A test for F1500_GetConfigurationValue (string)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;Persist Security Info=True;User ID=sa;Password=100%sec", "1500_AccountMgmt", DataAccessMethod.Sequential), TestMethod()]
        public void F1500_GetConfigurationValueTest()
        {
            string cfgName = (string)testContextInstance.DataRow["cfgName"];
            //string cfgName = null; // TODO: Initialize to an appropriate value

            //AccountManagementData expected = null;
            AccountManagementData actual;

            actual = TerraScan.Helper.WSHelper.F1500_GetConfigurationValue(cfgName);

            if (actual == null || actual.GetConfiguration.Count < 1 || actual.GetConfiguration.Rows.Count < 1)
            {
                Assert.Fail("Record not available");
            }

            //Assert.AreEqual(expected, actual, "TerraScan.Helper.WSHelper.F1500_GetConfigurationValue did not return the expected" +
            //        " value.");
            //Assert.Inconclusive("Verify the correctness of this test method.");
        }

        # endregion

        #region F1500_ListRegisterType
        /// <summary>
        ///A test for F1500_ListRegisterType ()
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;Persist Security Info=True;User ID=sa;Password=100%sec", "1500_AccountMgmt", DataAccessMethod.Sequential), TestMethod()]
        public void F1500_ListRegisterTypeTest1()
        {
            //AccountManagementData expected = null;
            AccountManagementData actual;

            actual = TerraScan.Helper.WSHelper.F1500_ListRegisterType();

            if (actual == null || actual.ListRegisterType.Rows.Count < 1)
            {
                Assert.Fail("No Records Found");
            }

            //Assert.AreEqual(expected, actual, "TerraScan.Helper.WSHelper.F1500_ListRegisterType did not return the expected valu" +
            //        "e.");
            //Assert.Inconclusive("Verify the correctness of this test method.");
        }
        # endregion

        #endregion

        #region F1501 General Ledger Configuration

        // Created By: Arun Senthil

        #region F1501_ListRollYearTest

        /// <summary>
        ///A test for F1501_ListRollYear ()
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;Persist Security Info=True;User ID=sa;Password=100%sec", "1500_AccountMgmt", DataAccessMethod.Sequential), TestMethod()]
        public void F1501_ListRollYearTest()
        {
            //F1501GLConfigurationData expected = null;
            F1501GLConfigurationData actual;

            actual = TerraScan.Helper.WSHelper.F1501_ListRollYear();

            if (actual == null || actual.ListGLConfigRollYear.Rows.Count < 1)
            {
                Assert.Fail("No Records Found");
            }

            //Assert.AreEqual(expected, actual, "TerraScan.Helper.WSHelper.F1501_ListRollYear did not return the expected value.");
            //Assert.Inconclusive("Verify the correctness of this test method.");
        }
        #endregion

        #region F1501_ListGLConfigDetailsTest

        /// <summary>
        ///A test for F1501_ListGLConfigDetails (int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;Persist Security Info=True;User ID=sa;Password=100%sec", "1500_AccountMgmt", DataAccessMethod.Sequential), TestMethod()]
        public void F1501_ListGLConfigDetailsTest()
        {
            int rollYear = (int)testContextInstance.DataRow["rollYear"];

            //F1501GLConfigurationData expected = null;
            F1501GLConfigurationData actual;

            actual = TerraScan.Helper.WSHelper.F1501_ListGLConfigDetails(rollYear);

            if (actual == null || actual.ListGLConfigDetail.Rows.Count < 1)
            {
                Assert.Fail("No Records Found");
            }

            //Assert.AreEqual(expected, actual, "TerraScan.Helper.WSHelper.F1501_ListGLConfigDetails did not return the expected v" +
            //        "alue.");
            //Assert.Inconclusive("Verify the correctness of this test method.");
        }

        #endregion

        #region F1501_GetGLConfigDetailsTest

        /// <summary>
        ///A test for F1501_GetGLConfigDetails (int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;Persist Security Info=True;User ID=sa;Password=100%sec", "1500_AccountMgmt", DataAccessMethod.Sequential), TestMethod()]
        public void F1501_GetGLConfigDetailsTest()
        {
            int configID = (int)testContextInstance.DataRow["configID"];

            //F1501GLConfigurationData expected = null;
            F1501GLConfigurationData actual;

            actual = TerraScan.Helper.WSHelper.F1501_GetGLConfigDetails(configID);

            if (actual == null || actual.GetGLConfigDetail.Rows.Count < 1)
            {
                Assert.Fail("No Records Found");
            }
            //Assert.AreEqual(expected, actual, "TerraScan.Helper.WSHelper.F1501_GetGLConfigDetails did not return the expected va" +
            //        "lue.");
            //Assert.Inconclusive("Verify the correctness of this test method.");
        }

        #endregion

        #region F1501_CreateOrEditGLConfigDetailsTest

        /// <summary>
        ///A test for F1501_CreateOrEditGLConfigDetails (int, string, int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "1500_AccountMgmt", DataAccessMethod.Sequential), TestMethod()]
        public void F1501_CreateOrEditGLConfigDetailsTest()
        {
            int gLConfigID = (int)testContextInstance.DataRow["configID"];

            string gLConfigElements = (string)testContextInstance.DataRow["ConfigElements"];

            int userId = (int)testContextInstance.DataRow["UserID"];

            int expected = 0;
            int actual;

            actual = TerraScan.Helper.WSHelper.F1501_CreateOrEditGLConfigDetails(gLConfigID, gLConfigElements, userId);

            if (actual == null)
            {
                Assert.Fail("Record not available");
            }
        }

        #endregion

        #endregion

        #region F15004_AgencyManagement

        // Created By: Arun Senthil

        #region F15004_GetAgencyDetailsTest

        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;Persist Security Info=True;User ID=sa;Password=100%sec", "1500_AccountMgmt", DataAccessMethod.Sequential), TestMethod()]
        public void F15004_GetAgencyDetailsTest()
        {
            int agencyID = (int)testContextInstance.DataRow["agencyID"];

            //F15004AgencyManagementData expected = null;
            F15004AgencyManagementData actual;

            actual = TerraScan.Helper.WSHelper.F15004_GetAgencyDetails(agencyID);

            if (actual == null || actual.GetAgencyDetail.Rows.Count < 1)
            {
                Assert.Fail("No Records Found");
            }

            //Assert.AreEqual(expected, actual, "TerraScan.Helper.WSHelper.F15004_GetAgencyDetails did not return the expected val" +
            //        "ue.");
            //Assert.Inconclusive("Verify the correctness of this test method.");
        }


        # endregion

        #region F15004_CreateOrEditAgencyDetailsTest

        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;Persist Security Info=True;User ID=sa;Password=100%sec", "1500_AccountMgmt", DataAccessMethod.Sequential), TestMethod()]
        public void F15004_CreateOrEditAgencyDetailsTest()
        {
            int agencyID = (int)testContextInstance.DataRow["agencyID"];

            string acctEmelemts = (string)testContextInstance.DataRow["acctEmelemts"];

            int userId = (int)testContextInstance.DataRow["UserID"];

            //int expected = 0;
            int actual;

            actual = TerraScan.Helper.WSHelper.F15004_CreateOrEditAgencyDetails(agencyID, acctEmelemts, userId);

            if (actual == 0)
            {
                Assert.Fail("Record  not saved");
            }

            //Assert.AreEqual(expected, actual, "TerraScan.Helper.WSHelper.F15004_CreateOrEditAgencyDetails did not return the exp" +
            //        "ected value.");
            //Assert.Inconclusive("Verify the correctness of this test method.");
        }

        # endregion


        # endregion

        #region F9103_SubFund Selection

        // Created By: Sudhag

        # region F1515_GetSubFundSelectionTest

        /// <summary>
        ///A test for F1515_GetSubFundSelection (string, string, int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "9103_subfund", DataAccessMethod.Sequential), TestMethod()]
        public void F1515_GetSubFundSelectionTest()
        {
            string subFund = testContextInstance.DataRow["sfund"].ToString(); // TODO: Initialize to an appropriate value

            string description = testContextInstance.DataRow["desc"].ToString(); // TODO: Initialize to an appropriate value

            int rollYear = Convert.ToInt16(testContextInstance.DataRow["ryear"]); // TODO: Initialize to an appropriate value

            int iscash = Convert.ToInt16(testContextInstance.DataRow["iscash"]); // TODO: Initialize to an appropriate value

            F1515SubFundSelectionData expected = null;
            F1515SubFundSelectionData actual;

            actual = TerraScan.Helper.WSHelper.F1515_GetSubFundSelection(subFund, description, rollYear, iscash);

            if (actual == null || actual.GetSubFundSelection.Count < 1)
            {
                Assert.Fail(" Record not found");
            }
        }
        #endregion

        #endregion

        # region F9104_Fund Selection

        // Created By: Sudhag

        /// <summary>
        ///A test for F1513_GetFundSelection (string, string)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "9104_fundselection", DataAccessMethod.Sequential), TestMethod()]
        public void F1513_GetFundSelectionTest()
        {
            string fund = (string)testContextInstance.DataRow["fund"];

            string description = (string)testContextInstance.DataRow["desc"];

            F1513FundSelectionData actual;

            actual = TerraScan.Helper.WSHelper.F1513_GetFundSelection(fund, description);

            if (actual == null || actual.GetFundSelection.Count < 1)
            {
                Assert.Fail(" Record not found");
            }
        }
        # endregion

        #region F1502_Account Element Mgmt

        // Created By: Sudhag

        #region F1502_GetAccountElementMgmt
        /// <summary>
        ///A test for F1502_GetAccountElementMgmt (string, string, int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "1502_get", DataAccessMethod.Sequential), TestMethod()]
        public void F1502_GetAccountElementMgmtTest()
        {
            string function = testContextInstance.DataRow["function"].ToString();

            string description = testContextInstance.DataRow["description"].ToString();

            int type = Convert.ToInt16(testContextInstance.DataRow["type"]);

            F1502AccountManagementData actual;

            actual = TerraScan.Helper.WSHelper.F1502_GetAccountElementMgmt(function, description, type);

            if (actual == null || actual.GetAccountElementMgmt.Count < 1)
            {
                Assert.Fail(" Record not found");
            }
        }
        #endregion

        #region F1502_SaveAccountElementMgmt
        /// <summary>
        ///A test for F1502_SaveAccountElementMgmt (string, int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "1502account", DataAccessMethod.Sequential), TestMethod()]
        public void F1502_SaveAccountElementMgmtTest()
        {
            string functionElemnts = testContextInstance.DataRow["functions"].ToString(); // TODO: Initialize to an appropriate value

            int userId = (int)testContextInstance.DataRow["UserID"];

            int expected = 0;
            int actual;

            actual = TerraScan.Helper.WSHelper.F1502_SaveAccountElementMgmt(functionElemnts, userId);

        }
        #endregion

        #region F1502_DeleteAccountElementMgmt
        /// <summary>
        ///A test for F1502_DeleteAccountElementMgmt (string, int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "1502_delete", DataAccessMethod.Sequential), TestMethod()]
        public void F1502_DeleteAccountElementMgmtTest()
        {
            string functionId = testContextInstance.DataRow["FunctionID"].ToString(); // TODO: Initialize to an appropriate value

            int userId = (int)testContextInstance.DataRow["UserID"];

            TerraScan.Helper.WSHelper.F1502_DeleteAccountElementMgmt(functionId, userId);


        }
        #endregion

        #endregion

        #region F1503_Generic Element Mgmt

        // Created By: Sudhag

        #region F1503_GetGenericElementMgmt
        /// <summary>
        ///A test for F1503_GetGenericElementMgmt (string, string, string)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "1503_get_bar", DataAccessMethod.Sequential), TestMethod()]
        public void F1503_GetGenericElementMgmtTest()
        {
            string keyValue = testContextInstance.DataRow["kvalue"].ToString(); // TODO: Initialize to an appropriate value

            string description = testContextInstance.DataRow["desc"].ToString(); // TODO: Initialize to an appropriate value

            string formName = testContextInstance.DataRow["fname"].ToString(); // TODO: Initialize to an appropriate value

            F1503GenericManagementData expected = null;
            F1503GenericManagementData actual;

            actual = TerraScan.Helper.WSHelper.F1503_GetGenericElementMgmt(keyValue, description, formName);

            if (actual == null || actual.GetGenericElementMgmt.Count < 1)
            {
                Assert.Fail(" Record not found");
            }
        }
        #endregion

        #region F1503_SaveGenericElementMgmt
        /// <summary>
        ///A test for F1503_SaveGenericElementMgmt (string, string, int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "1503_get_bar", DataAccessMethod.Sequential), TestMethod()]
        public void F1503_SaveGenericElementMgmtTest()
        {
            string functionElemnts = testContextInstance.DataRow["Function"].ToString();  // TODO: Initialize to an appropriate value

            string formName = testContextInstance.DataRow["fname"].ToString(); // TODO: Initialize to an appropriate value

            int userId = (int)testContextInstance.DataRow["UserID"];

            int expected = 0;
            int actual;

            actual = TerraScan.Helper.WSHelper.F1503_SaveGenericElementMgmt(functionElemnts, formName, userId);

        }

        #endregion

        #region  F1503_DeleteGenericElementMgmt
        /// <summary>
        ///A test for F1503_DeleteGenericElementMgmt (string, string, int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "1503_delete", DataAccessMethod.Sequential), TestMethod()]
        public void F1503_DeleteGenericElementMgmtTest()
        {
            string elementId = testContextInstance.DataRow["elementId"].ToString();  // TODO: Initialize to an appropriate value

            string formName = testContextInstance.DataRow["fname"].ToString();  // TODO: Initialize to an appropriate value

            int userId = (int)testContextInstance.DataRow["UserID"];

            TerraScan.Helper.WSHelper.F1503_DeleteGenericElementMgmt(elementId, formName, userId);

        }
        #endregion

        #endregion

        # region F1530_Institution

        // Created By: Yavana Rani

        #region F1530_SaveInstitution
        /// <summary>
        ///A test for F1530_SaveInstitution (int, string, int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "1530InstitutionID", DataAccessMethod.Sequential), TestMethod()]
        public void F1530_SaveInstitutionTest()
        {
            int institutionId = Convert.ToInt32(testContextInstance.DataRow["InstitutionID"]); // TODO: Initialize to an appropriate value

            string institutionElements = testContextInstance.DataRow["Institution Element"].ToString(); // TODO: Initialize to an appropriate value

            int userId = (int)testContextInstance.DataRow["UserID"];

            int expected = 0;
            int actual;

            actual = TerraScan.Helper.WSHelper.F1530_SaveInstitution(institutionId, institutionElements, userId);

            if (actual == null)
            {
                Assert.Fail("Record not Saved");
            }

        }
        #endregion

        # region F1530_GetInstitutionDetail
        /// <summary>
        ///A test for F1530_GetInstitutionDetail (int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "1530InstitutionID", DataAccessMethod.Sequential), TestMethod()]
        public void F1530_GetInstitutionDetailTest()
        {
            int institutionId = Convert.ToInt32(testContextInstance.DataRow["InstitutionID"]); // TODO: Initialize to an appropriate value

            F1530CashAccountManagementData expected = null;
            F1530CashAccountManagementData actual;

            actual = TerraScan.Helper.WSHelper.F1530_GetInstitutionDetail(institutionId);

            if (actual == null)
            {
                Assert.Fail("Record Not Listed");
            }
        }
        #endregion

        #endregion

        #region F1531_CashAccount

        // Created By: Yavana Rani

        # region F1531_SaveCashAccount
        /// <summary>
        ///A test for F1531_SaveCashAccount (int, string, int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "1531_Save", DataAccessMethod.Sequential), TestMethod()]
        public void F1531_SaveCashAccountTest()
        {
            int registerId = Convert.ToInt32(testContextInstance.DataRow["RegisterID"]); // TODO: Initialize to an appropriate value

            string registerItems = testContextInstance.DataRow["RegisterItem"].ToString(); // TODO: Initialize to an appropriate value

            int userId = (int)testContextInstance.DataRow["UserID"];

            int expected = 0;
            int actual;

            actual = TerraScan.Helper.WSHelper.F1531_SaveCashAccount(registerId, registerItems, userId);

            if (actual == 0)
            {
                Assert.Fail("Record not saved");
            }
        }
        #endregion

        #region F1531_GetCashAccountDetail
        // <summary>
        ///A test for F1531_GetCashAccountDetail (int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "1531_Save", DataAccessMethod.Sequential), TestMethod()]
        public void F1531_GetCashAccountDetailTest()
        {
            int registerId = Convert.ToInt16(testContextInstance.DataRow["RegisterID"]);
            F1530CashAccountManagementData expected = null;
            F1530CashAccountManagementData actual;

            actual = TerraScan.Helper.WSHelper.F1531_GetCashAccountDetail(registerId);

            if (actual == null)
            {
                Assert.Fail("Record not saved");
            }

        }
        #endregion

        #endregion

        #region F1532_CashAccount

        // Created By: Yavana Rani

        #region F1532_SaveInstitutionContact

        /// <summary>
        ///A test for F1532_SaveInstitutionContact (int, string, int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "1532_COntact", DataAccessMethod.Sequential), TestMethod()]
        public void F1532_SaveInstitutionContactTest()
        {
            int contactId = Convert.ToInt16(testContextInstance.DataRow["ContactID"]); // TODO: Initialize to an appropriate value

            string acctEmelemts = testContextInstance.DataRow["AcctElement"].ToString(); // TODO: Initialize to an appropriate value

            int userId = (int)testContextInstance.DataRow["UserID"];

            int expected = 0;
            int actual;

            actual = TerraScan.Helper.WSHelper.F1532_SaveInstitutionContact(contactId, acctEmelemts, userId);

            if (actual == null)
            {
                Assert.Fail("Record not saved");
            }
        }
        #endregion

        #region F1532_GetInstitutionContactDetail
        /// <summary>
        ///A test for F1532_GetInstitutionContactDetail (int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "1532_COntact", DataAccessMethod.Sequential), TestMethod()]
        public void F1532_GetInstitutionContactDetailTest()
        {
            int contactId = Convert.ToInt16(testContextInstance.DataRow["ContactID"]); // TODO: Initialize to an appropriate value

            F1530CashAccountManagementData expected = null;
            F1530CashAccountManagementData actual;

            actual = TerraScan.Helper.WSHelper.F1532_GetInstitutionContactDetail(contactId);
            if (actual == null || actual.GetInstitutionContact.Count < 1)
            {
                Assert.Fail("Record NotListed");
            }

        }
        #endregion

        #endregion

        # region F9503_SubFundManagementDetails

        // Created By: Yavana Rani

        #region 9503_GetSubFundManagementDetails
        /// <summary>
        ///A test for F9503_GetSubFundManagementDetails (int?)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "9503_list", DataAccessMethod.Sequential), TestMethod()]
        public void F9503_GetSubFundManagementDetailsTest()
        {
            int subFundId = Convert.ToInt32(testContextInstance.DataRow["subfundID"]); // TODO: Initialize to an appropriate value

            F9503SubFundManagementData expected = null;
            F9503SubFundManagementData actual;

            actual = TerraScan.Helper.WSHelper.F9503_GetSubFundManagementDetails(subFundId);

            if (actual == null || actual.ListSubFundIds.Count < 1)
            {
                Assert.Fail("Record Not Listed");
            }

        }
        #endregion

        #region F9503_CreateOrEditSubFund

        /// <summary>
        ///A test for F9503_CreateOrEditSubFund (int?, string, int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "9503_list", DataAccessMethod.Sequential), TestMethod()]
        public void F9503_CreateOrEditSubFundTest()
        {
            int subFundId = Convert.ToInt32(testContextInstance.DataRow["subfundID"]);// TODO: Initialize to an appropriate value

            string subFundElments = testContextInstance.DataRow["SubfundElemnts"].ToString(); // TODO: Initialize to an appropriate value

            int userId = (int)testContextInstance.DataRow["UserID"];

            int expected = 0;
            int actual;

            actual = TerraScan.Helper.WSHelper.F9503_CreateOrEditSubFund(subFundId, subFundElments, userId);

            if (actual == null)
            {
                Assert.Fail("Record not saved");
            }
        }
        #endregion

        #endregion

        #endregion

        # region Sprint 15

        # region F1109_Excise Management

        // Created By: Shireesha

        # region Management Work Queue

        # region F1109_ListManagementQueueTest

        // 
        // Added Statement Number newly in Sprint 35 (Edited by Shireesha)
        //

        /// <summary>
        ///A test for F1109_ListManagementQueue (string, string, string, string, string, string, string, int, string)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;Persist Security Info=True;User ID=sa;Password=100%sec", "F1109", DataAccessMethod.Sequential), TestMethod()]
        public void F1109_ListManagementQueueTest()
        {
            string parcelNumber = (string)testContextInstance.DataRow["parcelNumber"];

            string name = (string)testContextInstance.DataRow["name"];

            string saleDate = (string)testContextInstance.DataRow["saleDate"];

            string address = (string)testContextInstance.DataRow["address"];

            string taxCode = (string)testContextInstance.DataRow["taxCode"];

            string treasurer = (string)testContextInstance.DataRow["treasurer"];

            string assessor = (string)testContextInstance.DataRow["assessor"];

            int rollYear = (int)testContextInstance.DataRow["RollYear"];

            string statementNumber = (string)testContextInstance.DataRow["StatementNumber"];

            AffidavitManagementQueue actual;

            actual = TerraScan.Helper.WSHelper.F1109_ListManagementQueue(parcelNumber, name, saleDate, address, taxCode, treasurer, assessor, rollYear, statementNumber);

            if (actual == null || actual.ListManagementQueue.Rows.Count < 1)
            {
                Assert.Fail("No Records Found");
            }
        }


        # endregion

        # region F1109_ManagementQueueFilterResultTest

        /// <summary>
        ///A test for F1109_ManagementQueueFilterResult (int, int, string, string)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;Persist Security Info=True;User ID=sa;Password=100%sec", "F1109FilterResult", DataAccessMethod.Sequential), TestMethod()]
        public void F1109_ManagementQueueFilterResultTest()
        {
            int statusFilterId = (int)testContextInstance.DataRow["StatusFilterID"];

            int rollYear = (int)testContextInstance.DataRow["RollYear"];

            string filterFromDate = (string)testContextInstance.DataRow["FilterFromDate"];

            string filterToDate = (string)testContextInstance.DataRow["FilterToDate"];

            AffidavitManagementQueue actual;

            actual = TerraScan.Helper.WSHelper.F1109_ManagementQueueFilterResult(statusFilterId, rollYear, filterFromDate, filterToDate);

            if (actual == null)
            {
                Assert.Fail("No records found");
            }
        }

        # endregion

        # region F1109_ListRollYear

        /// <summary>
        ///A test for F1109_ListRollYear ()
        ///</summary>
        [TestMethod()]
        public void F1109_ListRollYearTest()
        {
            AffidavitManagementQueue actual;

            actual = TerraScan.Helper.WSHelper.F1109_ListRollYear();

            if (actual == null)
            {
                Assert.Fail("No Records Found");
            }
        }

        # endregion

        # region F1109_FilterSearchAffidavitTest

        /// <summary>
        ///A test for F1109_FilterSearchAffidavit (string)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;Persist Security Info=True;User ID=sa;Password=100%sec", "F1109", DataAccessMethod.Sequential), TestMethod()]
        public void F1109_FilterSearchAffidavitTest()
        {
            string filterXml = (string)testContextInstance.DataRow["FilterXML"];

            AffidavitManagementQueue actual;

            actual = TerraScan.Helper.WSHelper.F1109_FilterSearchAffidavit(filterXml);

            if (actual == null || actual.ListManagementQueue.Rows.Count < 1)
            {
                Assert.Fail("No Filter found");
            }
        }

        # endregion

        # endregion

        # endregion

        # region F1030_DistrictDefinition

        // Created By: Soundharrajan

        # region F1030_ListDistrictDefinitionTypeTest

        /// <summary>
        ///A test for F1030_ListDistrictDefinitionType ()
        ///</summary>
        //[TestMethod()]
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;Persist Security Info=True;User ID=sa;Password=100%sec", "SADistrict", DataAccessMethod.Sequential), TestMethod()]
        public void F1030_ListDistrictDefinitionTypeTest()
        {
            F1030SpecialDistrictDefinitionData expected = null;
            F1030SpecialDistrictDefinitionData actual;

            actual = TerraScan.Helper.WSHelper.F1030_ListDistrictDefinitionType();

            if (actual.GetDistrictDefinitionDetails.Rows.Count < 0)
            {
                Assert.Fail("No record found");
            }
        }

        # endregion

        # region F1030_GetDistrictDefinitionDetailsTest

        /// <summary>
        ///A test for F1030_GetDistrictDefinitionDetails (int)
        ///</summary>
        //[TestMethod()]
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;Persist Security Info=True;User ID=sa;Password=100%sec", "DistrictNumber", DataAccessMethod.Sequential), TestMethod()]
        public void F1030_GetDistrictDefinitionDetailsTest()
        {
            int districtNo = (int)testContextInstance.DataRow["DisctrictNo"]; // TODO: Initialize to an appropriate value

            //F1030SpecialDistrictDefinitionData expected = null;
            F1030SpecialDistrictDefinitionData actual;

            actual = TerraScan.Helper.WSHelper.F1030_GetDistrictDefinitionDetails(districtNo);

            if (actual.GetDistrictDefinitionDetails.Rows.Count < 0)
            {
                Assert.Fail("No record Found");
            }
            //Assert.AreEqual(expected, actual, "TerraScan.Helper.WSHelper.F1030_GetDistrictDefinitionDetails did not return the e" +
            //        "xpected value.");
            //Assert.Inconclusive("Verify the correctness of this test method.");
        }

        # endregion

        # region F1030_DeleteDistrictDefinitionTest

        /// <summary>
        ///A test for F1030_DeleteDistrictDefinition (int, int)
        ///</summary>
        //[TestMethod()]
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;Persist Security Info=True;User ID=sa;Password=100%sec", "DeleteDistrictDefinition", DataAccessMethod.Sequential), TestMethod()]
        public void F1030_DeleteDistrictDefinitionTest()
        {
            int specialDistrictID = (int)testContextInstance.DataRow["specialDistrictID"];

            int userId = (int)testContextInstance.DataRow["UserID"];

            TerraScan.Helper.WSHelper.F1030_DeleteDistrictDefinition(specialDistrictID, userId);

            //Assert.Inconclusive("A method that does not return a value cannot be verified.");
        }

        # endregion

        # region F1030_DeleteDistrictDefinitionRateTest

        /// <summary>
        ///A test for F1030_DeleteDistrictDefinitionRate (int, int)
        ///</summary>
        //[TestMethod()]
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;Persist Security Info=True;User ID=sa;Password=100%sec", "DeleteDistrictDefinitionRate", DataAccessMethod.Sequential), TestMethod()]
        public void F1030_DeleteDistrictDefinitionRateTest()
        {
            int speialDistrictRateItemID = (int)testContextInstance.DataRow["speialDistrictRateItemID"];

            int userId = (int)testContextInstance.DataRow["UserID"];

            TerraScan.Helper.WSHelper.F1030_DeleteDistrictDefinitionRate(speialDistrictRateItemID, userId);

            //Assert.Inconclusive("A method that does not return a value cannot be verified.");
        }

        # endregion

        # region F1030_SaveDistrictDefinitionTest

        /// <summary>
        ///A test for F1030_SaveDistrictDefinition (int, string, string, string, bool, int)
        ///</summary>
        //[TestMethod()]
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;Persist Security Info=True;User ID=sa;Password=100%sec", "SaveDistrictDefinition", DataAccessMethod.Sequential), TestMethod()]
        public void F1030_SaveDistrictDefinitionTest()
        {
            int districtNo = (int)testContextInstance.DataRow["districtNo"];

            string districtItem = (string)testContextInstance.DataRow["districtItem"];

            string rateItem = (string)testContextInstance.DataRow["rateItem"];

            string distributionItem = (string)testContextInstance.DataRow["distributionItem"];

            bool flagOverride = (bool)testContextInstance.DataRow["flagOverride"];

            int userId = (int)testContextInstance.DataRow["UserID"];

            string actual;

            actual = TerraScan.Helper.WSHelper.F1030_SaveDistrictDefinition(districtNo, districtItem, rateItem, distributionItem, flagOverride, userId);

            if (actual == null)
            {
                Assert.Fail("No data found");
            }
        }

        # endregion

        # region F1033_ListPostTypesTest

        /// <summary>
        ///A test for F1033_ListPostTypes (int?)
        ///</summary>
        //[TestMethod()]
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;Persist Security Info=True;User ID=sa;Password=100%sec", "SaveDistrictDefinition", DataAccessMethod.Sequential), TestMethod()]
        public void F1033_ListPostTypesTest()
        {
            System.Nullable<int> form = new System.Nullable<int>(); // TODO: Initialize to an appropriate value

            F1033SpecialDistrictSelectionData.ListPostTypeDataTable expected = null;
            F1033SpecialDistrictSelectionData.ListPostTypeDataTable actual;

            actual = TerraScan.Helper.WSHelper.F1033_ListPostTypes(form);

            if (actual.Rows.Count < 0)
            {
                Assert.Fail("No data found");
            }

            //Assert.AreEqual(expected, actual, "TerraScan.Helper.WSHelper.F1033_ListPostTypes did not return the expected value.");
            //Assert.Inconclusive("Verify the correctness of this test method.");
        }

        # endregion

        # region F1033_ListSpecialDistrictsTest

        /// <summary>
        ///A test for F1033_ListSpecialDistricts (int?, int?, string, int?)
        ///</summary>
        //[TestMethod()]
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;Persist Security Info=True;User ID=sa;Password=100%sec", "SpecialDistricts", DataAccessMethod.Sequential), TestMethod()]
        public void F1033_ListSpecialDistrictsTest()
        {
            System.Nullable<int> district = (int)testContextInstance.DataRow["district"];//new System.Nullable<int>(); // TODO: Initialize to an appropriate value

            System.Nullable<int> rollYear = (int)testContextInstance.DataRow["rollyear"];//new System.Nullable<int>(); // TODO: Initialize to an appropriate value

            string description = (string)testContextInstance.DataRow["description"].ToString(); // TODO: Initialize to an appropriate value

            System.Nullable<int> postTypeID = (int)testContextInstance.DataRow["posttypeid"];//new System.Nullable<int>(); // TODO: Initialize to an appropriate value

            F1033SpecialDistrictSelectionData.ListSpecialDistrictDataTable expected = null;
            F1033SpecialDistrictSelectionData.ListSpecialDistrictDataTable actual;

            actual = TerraScan.Helper.WSHelper.F1033_ListSpecialDistricts(district, rollYear, description, postTypeID);

            if (actual.Rows.Count < 0)
            {
                Assert.Fail("Nodata");
            }
            //Assert.AreEqual(expected, actual, "TerraScan.Helper.WSHelper.F1033_ListSpecialDistricts did not return the expected " +
            //        "value.");
            //Assert.Inconclusive("Verify the correctness of this test method.");
        }

        # endregion

        #endregion

        # region F9600_Search

        //Created by :- S.SATHIYAN.

        # region F9600_ListSearchResult
        /// <summary>
        ///A test for F9600_ListSearchResult (string, int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "F9600_Search", DataAccessMethod.Sequential), TestMethod()]
        public void F9600_ListSearchResultTest()
        {
            string searchValue = (string)testContextInstance.DataRow["searchValue"];

            int appId = (int)testContextInstance.DataRow["appId"];

            F9600SearchData expected = null;
            F9600SearchData actual;

            actual = TerraScan.Helper.WSHelper.F9600_ListSearchResult(searchValue, appId);

            if (actual == null || actual.ListSearchTable.Rows.Count < 0)
            {
                Assert.Fail(" No records Found");
            }

        }

        # endregion

        # endregion

        # region F1031_DistrictAssessment

        // Created by :- S.SATHIYAN.

        # region F1031_SaveDistrictAssessmentDetails

        /// <summary>
        ///A test for F1031_SaveDistrictAssessmentDetails (string, string, bool, bool, int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "F1031_DistrictAssessment", DataAccessMethod.Sequential), TestMethod()]
        public void F1031_SaveDistrictAssessmentDetailsTest()
        {
            string districtProperty = (string)testContextInstance.DataRow["districtProperty"];

            string districtRates = (string)testContextInstance.DataRow["districtRates"];

            bool overrideStatus = false;

            bool ownerRide = false;

            int userId = (int)testContextInstance.DataRow["UserID"];

            int actual;

            actual = TerraScan.Helper.WSHelper.F1031_SaveDistrictAssessmentDetails(districtProperty, districtRates, overrideStatus, ownerRide, userId);

            if (actual == null)
            {
                Assert.Fail("No records saved");
            }

        }

        # endregion

        # region F1031_ListDistrictAssessmentDetails

        /// <summary>
        ///A test for F1031_ListDistrictAssessmentDetails (int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "F1031_DistrictAssessment", DataAccessMethod.Sequential), TestMethod()]
        public void F1031_ListDistrictAssessmentDetailsTest()
        {
            int statementId = (int)testContextInstance.DataRow["statementId"];

            //F1031SpecialDistrictAssessmentData expected = null;
            F1031SpecialDistrictAssessmentData actual;

            actual = TerraScan.Helper.WSHelper.F1031_ListDistrictAssessmentDetails(statementId);

            if (actual == null)
            {
                Assert.Fail("No record found");
            }
        }
        # endregion

        # region F1031_ListDistrictAssessmentID

        /// <summary>
        ///A test for F1031_ListDistrictAssessmentIDs ()
        ///</summary>
        [TestMethod()]
        public void F1031_ListDistrictAssessmentIDsTest()
        {
            F1031SpecialDistrictAssessmentData expected = null;
            F1031SpecialDistrictAssessmentData actual;

            actual = TerraScan.Helper.WSHelper.F1031_ListDistrictAssessmentIDs();

            if (actual == null || actual.ListDistrictAssessmentID.Rows.Count < 0)
            {
                Assert.Fail("No record found");
            }
        }
        # endregion

        # region F1031_GetDistrictAssessmentParcelID

        /// <summary>
        ///A test for F1031_GetDistrictAssessmentParcelID (string, int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "F1031_DistrictAssessment", DataAccessMethod.Sequential), TestMethod()]
        public void F1031_GetDistrictAssessmentParcelIDTest()
        {
            string parcelNumber = (string)testContextInstance.DataRow["parcelNumber"];

            int parcelId = (int)testContextInstance.DataRow["parcelId"];
            int? rollYear = (int)testContextInstance.DataRow["RollYear"];

            //F1031SpecialDistrictAssessmentData expected = null;
            F1031SpecialDistrictAssessmentData actual;

            actual = TerraScan.Helper.WSHelper.F1031_GetDistrictAssessmentParcelID(parcelNumber, parcelId,rollYear);

            if (actual == null)
            {
                Assert.Fail("No record found");
            }
        }
        # endregion

        # region F1031_ListDistrictAssessment

        /// <summary>
        ///A test for F1031_ListDistrictAssessment (int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "F1031_DistrictAssessment", DataAccessMethod.Sequential), TestMethod()]
        public void F1031_ListDistrictAssessmentTest()
        {
            int districtId = (int)testContextInstance.DataRow["districtId"];

            //F1031SpecialDistrictAssessmentData expected = null;
            F1031SpecialDistrictAssessmentData actual;

            actual = TerraScan.Helper.WSHelper.F1031_ListDistrictAssessment(districtId);

            if (actual == null)
            {
                Assert.Fail("No record found");
            }
        }

        # endregion

        # region F1031_DeleteDistrictAssessment

        /// <summary>
        ///A test for F1031_DeleteDistrictAssessment (int, int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "F1031_DistrictAssessment", DataAccessMethod.Sequential), TestMethod()]
        public void F1031_DeleteDistrictAssessmentTest()
        {
            int statementId = (int)testContextInstance.DataRow["statementId"]; // TODO: Initialize to an appropriate value

            int userId = (int)testContextInstance.DataRow["UserID"];

            int actual;

            actual = TerraScan.Helper.WSHelper.F1031_DeleteDistrictAssessment(statementId, userId);

            if (actual == null)
            {
                Assert.Fail(" No Record Found");
            }
        }

        # endregion

        # endregion

        #endregion

        # region Sprint 16

        //    // 9015 SQL Support (Updated)

        //    // 1345 Acount Seleect (Updated)

        //    // 15007 FS Account Mgmt (Updated)

        //    //15005 FS Subfund Mgmt (Updated)

        //    //15003 FS Fund Mgmt (Updated)

        //    //15004 FS Agency Mgmt (Updated)

        //    //9030 Form Master (Updated)

        # region F9033_QueryEngine

        // Created by :- S.SATHIYAN.

        # region F9033_ListQueryEngine

        /// <summary>
        ///A test for F9033_ListQueryEngine (int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "F9033_QueryEngine", DataAccessMethod.Sequential), TestMethod()]
        public void F9033_ListQueryEngineTest()
        {
            int queryViewId = (int)testContextInstance.DataRow["queryViewId"];

            //DataSet expected = null;
            DataSet actual;

            actual = TerraScan.Helper.WSHelper.F9033_ListQueryEngine(queryViewId);

            if (actual == null)
            {
                Assert.Fail("No record found");
            }
        }

        # endregion

        # region F9033_ListQueryView
        /// <summary>
        ///A test for F9033_ListQueryView (int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "F9033_QueryEngine", DataAccessMethod.Sequential), TestMethod()]
        public void F9033_ListQueryViewTest()
        {
            int formId = (int)testContextInstance.DataRow["formId"];

            F9033QueryEngineData expected = null;
            F9033QueryEngineData actual;

            actual = TerraScan.Helper.WSHelper.F9033_ListQueryView(formId);

            if (actual == null || actual.ListQueryView.Count < 1)
            {
                Assert.Fail(" Record not found");
            }
        }
        # endregion

        # region F9033_GetDefaultLayout
        /// <summary>
        ///A test for F9033_GetDefaultLayout (int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "F9033_QueryEngine", DataAccessMethod.Sequential), TestMethod()]
        public void F9033_GetDefaultLayoutTest()
        {
            int queryViewId = (int)testContextInstance.DataRow["queryViewId"];

            F9033QueryEngineData expected = null;
            F9033QueryEngineData actual;

            actual = TerraScan.Helper.WSHelper.F9033_GetDefaultLayout(queryViewId);

            if (actual == null || actual.GetDefaultLayoutXML.Count < 0)
            {
                Assert.Fail(" Record not found");
            }
        }
        # endregion

        # endregion

        # region Layout Management

        // Created by:- S.SATHIYAN.

        # region F9038_SaveLayoutInformation

        /// <summary>
        ///A test for F9038_SaveLayoutInformation (int, string, string, int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "F9038_LayoutManagement", DataAccessMethod.Sequential), TestMethod()]
        public void F9038_SaveLayoutInformationTest()
        {
            int queryLayoutID = (int)testContextInstance.DataRow["queryLayoutID"];

            string layoutManagement = (string)testContextInstance.DataRow["layoutManagement"];

            string layoutXML = (string)testContextInstance.DataRow["layoutXML"];

            int userId = (int)testContextInstance.DataRow["userID"];

            int expected = 0;
            int actual;

            actual = TerraScan.Helper.WSHelper.F9038_SaveLayoutInformation(queryLayoutID, layoutManagement, layoutXML, userId);

            if (actual == null)
            {
                Assert.Fail(" Record not found");
            }
        }
        # endregion

        # region F9038_LoadLayoutInformation

        /// <summary>
        ///A test for F9038_LoadLayoutInformation (int, int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "F9038_LayoutManagement", DataAccessMethod.Sequential), TestMethod()]
        public void F9038_LoadLayoutInformationTest()
        {
            int queryViewID = (int)testContextInstance.DataRow["queryViewID"];

            int userID = (int)testContextInstance.DataRow["userID"];

            F9038LayoutManagementData expected = null;
            F9038LayoutManagementData actual;

            actual = TerraScan.Helper.WSHelper.F9038_LoadLayoutInformation(queryViewID, userID);

            if (actual == null)
            {
                Assert.Fail(" Record not found");
            }
        }
        # endregion

        # region F9038_DeleteLayoutInformation

        /// <summary>
        ///A test for F9038_DeleteLayoutInformation (int,int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "F9038_LayoutManagement", DataAccessMethod.Sequential), TestMethod()]
        public void F9038_DeleteLayoutInformationTest()
        {
            int queryLayoutID = (int)testContextInstance.DataRow["queryLayoutID"];

            int userId = (int)testContextInstance.DataRow["userID"];

            TerraScan.Helper.WSHelper.F9038_DeleteLayoutInformation(queryLayoutID, userId);

        }
        # endregion

        # endregion

        #region F84722_Water Valve Location

        // Created By: Sudhag

        #region F84722_GetWaterValveLocation

        /// <summary>
        ///A test for F84722_GetWaterValveLocation (int, int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "84722_GetWaterValveLocation", DataAccessMethod.Sequential), TestMethod()]
        public void F84722_GetWaterValveLocationTest()
        {
            int keyId = Convert.ToInt32(testContextInstance.DataRow["keyId"]); // TODO: Initialize to an appropriate value

            int formId = Convert.ToInt32(testContextInstance.DataRow["formId"]); // TODO: Initialize to an appropriate value

            F84722WaterValveLocationData expected = null;
            F84722WaterValveLocationData actual;

            actual = TerraScan.Helper.WSHelper.F84722_GetWaterValveLocation(keyId, formId);

            if (actual == null)
            {
                Assert.Fail(" Record not found");
            }

        }
        #endregion

        #region F84722_Save Water ValveLocation
        /// <summary>
        ///A test for F84722_SaveWaterValveLocation (int, string, int, int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "84724_save", DataAccessMethod.Sequential), TestMethod()]
        public void F84722_SaveWaterValveLocationTest()
        {
            int keyId = Convert.ToInt32(testContextInstance.DataRow["keyId"]);

            string waterValveLocation = testContextInstance.DataRow["waterValveLocation"].ToString();

            int formId = Convert.ToInt32(testContextInstance.DataRow["formId"]);

            int userId = (int)testContextInstance.DataRow["UserID"];

            int expected = 0;
            int actual;

            actual = TerraScan.Helper.WSHelper.F84722_SaveWaterValveLocation(keyId, waterValveLocation, formId, userId);


        }
        #endregion

        #endregion

        #region F84723_ Water Hydrant Properties

        // Created By: Sudhag

        #region F84723_Get Water Hydrant Properties
        /// <summary>
        ///A test for F84723_GetWaterHydrantProperties (int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "84723_get", DataAccessMethod.Sequential), TestMethod()]
        public void F84723_GetWaterHydrantPropertiesTest()
        {
            int hydrantId = Convert.ToInt32(testContextInstance.DataRow["hydrantId"]); // TODO: Initialize to an appropriate value

            F84723WaterHydrantPropertiesData expected = null;
            F84723WaterHydrantPropertiesData actual;

            actual = TerraScan.Helper.WSHelper.F84723_GetWaterHydrantProperties(hydrantId);

            if (actual == null || actual.GetWaterHydrantPropertiesDataTable.Count < 1)
            {
                Assert.Fail(" Record not found");
            }
        }
        #endregion

        #region F84723_Save Water Hydrant Properties
        /// <summary>
        ///A test for F84723_SaveWaterHydrantProperties (int, string, int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "84723_save", DataAccessMethod.Sequential), TestMethod()]
        public void F84723_SaveWaterHydrantPropertiesTest()
        {
            int hydrantId = Convert.ToInt32(testContextInstance.DataRow["hydrantId"]);

            string waterHydrantPropties = testContextInstance.DataRow["waterHydrantPropties"].ToString();

            int userId = (int)testContextInstance.DataRow["UserID"];

            int expected = 0;
            int actual;

            actual = TerraScan.Helper.WSHelper.F84723_SaveWaterHydrantProperties(hydrantId, waterHydrantPropties, userId);

        }
        #endregion

        #region F84723_Delete Water Hydrant Properties

        /// <summary>
        ///A test for F84723_DeleteWaterHydrantProperties (int, int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "84723_delete", DataAccessMethod.Sequential), TestMethod()]
        public void F84723_DeleteWaterHydrantPropertiesTest()
        {
            int hydrantId = Convert.ToInt32(testContextInstance.DataRow["hydrantId"]);

            int userId = (int)testContextInstance.DataRow["UserID"];

            TerraScan.Helper.WSHelper.F84723_DeleteWaterHydrantProperties(hydrantId, userId);


        }
        #endregion

        #region F84723_Check Main ValveId
        /// <summary>
        ///A test for F84723_CheckMainValveId (int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "84723_check", DataAccessMethod.Sequential), TestMethod()]
        public void F84723_CheckMainValveIdTest()
        {
            int mainValveId = Convert.ToInt32(testContextInstance.DataRow["mainValveId"]); // TODO: Initialize to an appropriate value

            int expected = 0;
            int actual;

            actual = TerraScan.Helper.WSHelper.F84723_CheckMainValveId(mainValveId);


        }
        #endregion

        #endregion

        #region F84725_Water Pipe Properties

        // Created By: Sudhag


        #region F84725_Get Water Pipe Properties

        /// <summary>
        ///A test for F84725_GetWaterPipeProperties (int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "84725_get", DataAccessMethod.Sequential), TestMethod()]
        public void F84725_GetWaterPipePropertiesTest()
        {
            int pipeId = Convert.ToInt32(testContextInstance.DataRow["pipeId"]); // TODO: Initialize to an appropriate value

            F84725WaterPipePropertiesData expected = null;
            F84725WaterPipePropertiesData actual;

            actual = TerraScan.Helper.WSHelper.F84725_GetWaterPipeProperties(pipeId);


            if (actual == null || actual.GetWaterPipePropertiesDataTable.Count < 1)
            {
                Assert.Fail(" Record not found");
            }
        }
        #endregion

        #region F84725_Save Water Pipe Properties

        /// <summary>
        ///A test for F84725_SaveWaterPipeProperties (int, string, int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "84725_save", DataAccessMethod.Sequential), TestMethod()]
        public void F84725_SaveWaterPipePropertiesTest()
        {
            int pipeId = Convert.ToInt32(testContextInstance.DataRow["pipeId"]);

            string waterPipeProperties = testContextInstance.DataRow["waterPipeProperties"].ToString();

            int userId = (int)testContextInstance.DataRow["UserID"];

            int actual;

            actual = TerraScan.Helper.WSHelper.F84725_SaveWaterPipeProperties(pipeId, waterPipeProperties, userId);

        }

        #endregion

        #region F84725_Delete Water Pipe Properties

        /// <summary>
        ///A test for F84725_DeleteWaterPipeProperties (int, int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "84725_delete", DataAccessMethod.Sequential), TestMethod()]
        public void F84725_DeleteWaterPipePropertiesTest()
        {
            int pipeId = Convert.ToInt32(testContextInstance.DataRow["pipeId"]);

            int userId = (int)testContextInstance.DataRow["UserID"];

            TerraScan.Helper.WSHelper.F84725_DeleteWaterPipeProperties(pipeId, userId);


        }
        #endregion

        #endregion

        #region F84726_Water Pipe Location

        // Created By: Sudhag

        #region F84726_Get Water Pipe Location
        /// <summary>
        ///A test for F84726_GetWaterPipeLocation (int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "84726_get", DataAccessMethod.Sequential), TestMethod()]
        public void F84726_GetWaterPipeLocationTest()
        {
            int pipeId = Convert.ToInt16(testContextInstance.DataRow["pipeId"]);

            F84726WaterPipeLocationData actual;

            actual = TerraScan.Helper.WSHelper.F84726_GetWaterPipeLocation(pipeId);

            if (actual == null || actual.GetWaterPipeLocationDataTable.Count < 1)
            {
                Assert.Fail(" Record not found");
            }

        }
        #endregion

        #region F84726_Save Water Pipe Location
        /// <summary>
        ///A test for F84726_SaveWaterPipeLocation (int, string, int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "84726_save", DataAccessMethod.Sequential), TestMethod()]
        public void F84726_SaveWaterPipeLocationTest()
        {
            int pipeId = Convert.ToInt16(testContextInstance.DataRow["pipeId"]);

            string waterPipeLocation = testContextInstance.DataRow["waterPipeLocation"].ToString();

            int userId = (int)testContextInstance.DataRow["UserID"];

            int expected = 0;
            int actual;

            actual = TerraScan.Helper.WSHelper.F84726_SaveWaterPipeLocation(pipeId, waterPipeLocation, userId);

        }
        #endregion

        #endregion

        #region F8000_GDoc Commons

        // Created By: Sudhag

        #region F8000_GetGDocDiameter
        /// <summary>
        ///A test for F8000_GetGDocDiameter (int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "F8000_GetGDocDiameter", DataAccessMethod.Sequential), TestMethod()]
        public void F8000_GetGDocDiameterTest()
        {
            int featureClassId = Convert.ToInt32(testContextInstance.DataRow["featureClassId"]);

            GDocCommonData actual;

            actual = TerraScan.Helper.WSHelper.F8000_GetGDocDiameter(featureClassId);

            if (actual == null || actual.ListGDocDiameter.Count < 1)
            {
                Assert.Fail(" Record not found");
            }

        }
        #endregion

        #region F8000_GetGDocPropertyReference
        /// <summary>
        ///A test for F8000_GetGDocPropertyReference (int, string)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "F8000_GetGDocPropertyReference", DataAccessMethod.Sequential), TestMethod()]
        public void F8000_GetGDocPropertyReferenceTest()
        {
            int featureClassId = Convert.ToInt32(testContextInstance.DataRow["featureClassId"]);

            string refField = testContextInstance.DataRow["refField"].ToString();

            GDocCommonData actual;

            actual = TerraScan.Helper.WSHelper.F8000_GetGDocPropertyReference(featureClassId, refField);

            if (actual == null || actual.ListGDocPropertyReference.Count < 1)
            {
                Assert.Fail(" Record not found");
            }

        }
        #endregion

        # region F8000_GetGDocBusiness
        /// <summary>
        ///A test for F8000_GetGDocBusiness ()
        ///</summary>
        [TestMethod()]
        public void F8000_GetGDocBusinessTest()
        {
            GDocCommonData expected = null;
            GDocCommonData actual;

            actual = TerraScan.Helper.WSHelper.F8000_GetGDocBusiness();

            if (actual == null)
            {
                Assert.Fail(" Record not found");
            }
        }
        # endregion

        # region F8000_GetGDocUser
        /// <summary>
        ///A test for F8000_GetGDocUser ()
        ///</summary>
        [TestMethod()]
        public void F8000_GetGDocUserTest()
        {
            GDocCommonData expected = null;
            GDocCommonData actual;

            actual = TerraScan.Helper.WSHelper.F8000_GetGDocUser();


            if (actual == null)
            {
                Assert.Fail(" Record not found");
            }

        }
        # endregion

        # region F8000_wListStreets
        /// <summary>
        ///A test for wListStreets ()
        ///</summary>
        [TestMethod()]
        public void wListStreetsTest()
        {
            GDocCommonData expected = null;
            GDocCommonData actual;

            actual = TerraScan.Helper.WSHelper.wListStreets();

            if (actual == null)
            {
                Assert.Fail(" Record not found");
            }
        }
        #endregion

        #endregion

        #region F15002_District fund

        //  Created By: Yavana Rani
        //  Modified by :- S.SATHIYAN
        #region F15002_ListAllFunds
        // Modified by :- S.SATHIYAN

        /// <summary>
        ///A test for F15002_ListAllFunds (int?, string, int?)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "15002_Dist Management", DataAccessMethod.Sequential), TestMethod()]
        public void F15002_ListAllFundsTest()
        {
            // Here the fundid is subfundid

            int? fundId;

            if (!string.IsNullOrEmpty(testContextInstance.DataRow["FundID"].ToString()))
            {
                fundId = (System.Nullable<int>)testContextInstance.DataRow["FundID"];
            }
            else
            {
                fundId = null;
            }

            string fund = (string)testContextInstance.DataRow["Fund"];

            int? rollYear;

            if (!string.IsNullOrEmpty(testContextInstance.DataRow["Rollyear"].ToString()))
            {
                rollYear = (System.Nullable<int>)testContextInstance.DataRow["Rollyear"];
            }
            else
            {
                rollYear = null;
            }

            F15002DistMgmtData actual;

            actual = TerraScan.Helper.WSHelper.F15002_ListAllFunds(fundId, fund, rollYear);

            if (actual == null || actual.ListAllFunds.Rows.Count < 1)
            {
                Assert.Fail("No Records Found");
            }
        }

        #endregion

        #region F15002_GetDistirctFundDetails
        /// <summary>
        ///A test for F15002_GetDistirctFundDetails (int?)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "15002_Dist Management", DataAccessMethod.Sequential), TestMethod()]
        public void F15002_GetDistirctFundDetailsTest()
        {
            int districtId = (int)testContextInstance.DataRow["districtID"];

            F15002DistMgmtData expected = null;
            F15002DistMgmtData actual;

            actual = TerraScan.Helper.WSHelper.F15002_GetDistirctFundDetails(districtId);

            if (actual == null || actual.ListAllFunds.Rows.Count < 1)
            {
                Assert.Fail("No Records Found");
            }

        }
        #endregion

        # region F15002_CheckDistrict

        // Created By:- S.SATHIYAN.

        /// <summary>
        ///A test for F15002_CheckDistrict (int?, string, int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "15002_Dist Management", DataAccessMethod.Sequential), TestMethod()]
        public void F15002_CheckDistrictTest()
        {
            int? districtId;
            if (!string.IsNullOrEmpty(testContextInstance.DataRow["districtID1"].ToString()))
            {
                districtId = (System.Nullable<int>)testContextInstance.DataRow["districtID1"];
            }
            else
            {
                districtId = null;
            }

            string district = (string)testContextInstance.DataRow["district"];

            int rollYear = (int)testContextInstance.DataRow["Rollyear1"];

            int expected = 0;
            int actual;

            actual = TerraScan.Helper.WSHelper.F15002_CheckDistrict(districtId, district, rollYear);

            if (actual != 0)
            {
                Assert.Fail("No Records Found");
            }
        }

        #endregion

        #endregion

        #region F84721_Water Valve Properties

        // Created By: Logesh

        #region F84721_Get Water Valve Properties
        /// <summary>
        ///A test for F84721_GetWaterValveProperties (int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "84721_get", DataAccessMethod.Sequential), TestMethod()]
        public void F84721_GetWaterValvePropeTest()
        {
            int valveId = Convert.ToInt16(testContextInstance.DataRow["valveId"]);

            F84721WaterValvePropertiesData actual;

            actual = TerraScan.Helper.WSHelper.F84721_GetWaterValveProperties(valveId);

            if (actual == null || actual.GetWaterValveProperties.Count < 1)
            {
                Assert.Fail(" Record not found");
            }
        }
        #endregion

        #region F84721_Save Water Valve Properties
        /// <summary>
        ///A test for F84721_SaveWaterValveProperties (int, string, int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "84721_save", DataAccessMethod.Sequential), TestMethod()]
        public void F84721_SaveWaterValvePropertiesTest()
        {
            int valveId = Convert.ToInt16(testContextInstance.DataRow["valveId"]);

            string waterValveProperties = testContextInstance.DataRow["waterValveProperties"].ToString();

            int userId = (int)testContextInstance.DataRow["UserID"];

            int expected = 0;
            int actual;

            actual = TerraScan.Helper.WSHelper.F84721_SaveWaterValveProperties(valveId, waterValveProperties, userId);


        }
        #endregion

        #region  F84721_DeleteWaterValveProperties
        /// <summary>
        ///A test for F84721_DeleteWaterValveProperties (int, int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "84721_delete", DataAccessMethod.Sequential), TestMethod()]
        public void F84721_DeleteWaterValvePropertiesTest()
        {
            int valveId = Convert.ToInt16(testContextInstance.DataRow["valveId"]);

            int userId = (int)testContextInstance.DataRow["UserID"];

            TerraScan.Helper.WSHelper.F84721_DeleteWaterValveProperties(valveId, userId);


        }
        #endregion

        #endregion

        #region F84121_Sanitary Manhole Properties

        // Created By: Logesh

        #region F84121_Get Sanitary Manhole Properties
        /// <summary>
        ///A test for F84121_GetSanitaryManholeProperties (int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "84121_Get", DataAccessMethod.Sequential), TestMethod()]
        public void F84121_GetSanitaryManholePropertiesTest()
        {
            int manholeId = Convert.ToInt16(testContextInstance.DataRow["manholeId"]);

            F84121SanitaryManholePropertiesData actual;

            actual = TerraScan.Helper.WSHelper.F84121_GetSanitaryManholeProperties(manholeId);

            if (actual == null || actual.GetSanitaryManholeProperties.Count < 1)
            {
                Assert.Fail(" Record not found");
            }

        }
        #endregion

        #region F84121_Save Sanitary Manhole Properties
        /// <summary>
        ///A test for F84121_SaveSanitaryManholeProperties (int, string, int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "84121_save", DataAccessMethod.Sequential), TestMethod()]
        public void F84121_SaveSanitaryManholePropertiesTest()
        {
            int manholeId = Convert.ToInt16(testContextInstance.DataRow["manholeId"]);

            string sanitaryManholeProperties = testContextInstance.DataRow["sanitaryManholeProperties"].ToString();

            int userId = (int)testContextInstance.DataRow["UserID"];

            int actual;

            actual = TerraScan.Helper.WSHelper.F84121_SaveSanitaryManholeProperties(manholeId, sanitaryManholeProperties, userId);


        }
        #endregion

        #region  F84121_Delete Sanitary Manhole Properties
        /// <summary>
        ///A test for F84121_DeleteSanitaryManholeProperties (int, int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "84121_delete", DataAccessMethod.Sequential), TestMethod()]
        public void F84121_DeleteSanitaryManholePropertiesTest()
        {
            int manholeId = Convert.ToInt16(testContextInstance.DataRow["manholeId"]);

            int userId = (int)testContextInstance.DataRow["UserID"];

            TerraScan.Helper.WSHelper.F84121_DeleteSanitaryManholeProperties(manholeId, userId);


        }
        #endregion

        #endregion

        #region F84123_ Sanitary Pipe Properties

        #region F84123_Get Sanitary Pipe Properties
        /// <summary>
        ///A test for F84123_GetSanitaryPipeProperties (int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "84123_get", DataAccessMethod.Sequential), TestMethod()]
        public void F84123_GetSanitaryPipePropertiesTest()
        {
            int pipeId = Convert.ToInt32(testContextInstance.DataRow["pipeId"]); // TODO: Initialize to an appropriate value

            F84123SanitaryPipePropertiesData expected = null;
            F84123SanitaryPipePropertiesData actual;

            actual = TerraScan.Helper.WSHelper.F84123_GetSanitaryPipeProperties(pipeId);

            if (actual == null || actual.GetSanitaryPipeProperties.Count < 1)
            {
                Assert.Fail(" Record not found");
            }

        }
        #endregion

        #region F84123_Delete Sanitary Pipe Properties
        /// <summary>
        ///A test for F84123_DeleteSanitaryPipeProperties (int, int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "84123_delete", DataAccessMethod.Sequential), TestMethod()]
        public void F84123_DeleteSanitaryPipePropertiesTest()
        {
            int pipeId = Convert.ToInt32(testContextInstance.DataRow["pipeId"]);

            int userId = (int)testContextInstance.DataRow["UserID"];

            TerraScan.Helper.WSHelper.F84123_DeleteSanitaryPipeProperties(pipeId, userId);


        }
        #endregion

        #region F84123_Save Sanitary Pipe Properties
        /// <summary>
        ///A test for F84123_SaveSanitaryPipeProperties (int, string, int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "84123_save", DataAccessMethod.Sequential), TestMethod()]
        public void F84123_SaveSanitaryPipePropertiesTest()
        {
            int pipeId = Convert.ToInt32(testContextInstance.DataRow["pipeId"]);

            string sanitaryPipeProperties = testContextInstance.DataRow["sanitaryPipeProperties"].ToString();

            int userId = (int)testContextInstance.DataRow["UserID"];

            int expected = 0;
            int actual;

            actual = TerraScan.Helper.WSHelper.F84123_SaveSanitaryPipeProperties(pipeId, sanitaryPipeProperties, userId);


        }
        #endregion

        #endregion

        # region F9030_Form Master

        //CREATED BY :- S.SATHIYAN

        # region F9030_GetSandwichAndItsSliceInformation
        /// <summary>
        ///A test for GetSandwichAndItsSliceInformation (int, int, int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "9030_Form Master", DataAccessMethod.Sequential), TestMethod()]
        public void GetSandwichAndItsSliceInformationTest()
        {
            int form = (int)testContextInstance.DataRow["form"];

            int keyID = (int)testContextInstance.DataRow["keyID"];

            int userID = (int)testContextInstance.DataRow["userID"];

            FormMasterData expected = null;
            FormMasterData actual;

            actual = TerraScan.Helper.WSHelper.GetSandwichAndItsSliceInformation(form, keyID, userID);

            if (actual == null)
            {
                Assert.Fail(" No records Found");
            }
        }
        # endregion

        # region F9030_GetSandwichSubTitleInformation

        // CREATED BY :- S.SATHIYAN

        /// <summary>
        ///A test for GetSandwichSubTitleInformation (int, int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "9030_Form Master", DataAccessMethod.Sequential), TestMethod()]
        public void GetSandwichSubTitleInformationTest()
        {
            int form = (int)testContextInstance.DataRow["form"];

            int keyID = (int)testContextInstance.DataRow["keyID"];
            int userId = (int)testContextInstance.DataRow["UserID"];

            FormMasterData expected = null;
            FormMasterData actual;

            actual = TerraScan.Helper.WSHelper.GetSandwichSubTitleInformation(form, keyID,userId);

            if (actual == null)
            {
                Assert.Fail(" No records Found");
            }
        }
        # endregion

        # endregion

        #endregion

        # region Sprint 17

        // Created By: Shireesha

        # region 1410_OwnerReceipting

        # region F1410_GetOwnerReceiptingTest

        /// <summary>
        ///A test for F1410_GetOwnerReceipting (string, int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;Persist Security Info=True;User ID=sa;Password=100%sec", "F1410", DataAccessMethod.Sequential), TestMethod()]
        public void F1410_GetOwnerReceiptingTest()
        {
            // F1410_SaveOwnerReceiptingTest();

            string interestDate = (string)testContextInstance.DataRow["InterestDate"];

            string ownerId = (string)testContextInstance.DataRow["OwnerXml"];
            string parcelIDs = (string)testContextInstance.DataRow["ParcelIDs"];
            F1410OwnerReceiptingData actual;

            actual = TerraScan.Helper.WSHelper.F1410_GetOwnerReceipting(interestDate, ownerId,parcelIDs);

            if (actual == null || actual.ListOwnerReceiptTable.Rows.Count < 1 || actual.ListOwnerStatementTable.Rows.Count < 1)
            {
                Assert.Fail("No Records Found");
            }
        }

        # endregion

        # region F1410_ListOwnerReceiptingTest

        /// <summary>
        ///A test for F1410_ListOwnerReceipting (string, string)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;Persist Security Info=True;User ID=sa;Password=100%sec", "F1410", DataAccessMethod.Sequential), TestMethod()]
        public void F1410_ListOwnerReceiptingTest()
        {
            //F1410_SaveOwnerReceiptingTest();

            string interestDate = (string)testContextInstance.DataRow["InterestDate"];

            string statementXml = (string)testContextInstance.DataRow["StatementXml"];
            string formBackColor = (string)testContextInstance.DataRow["FormBackColor"];
            F1410OwnerReceiptingData actual;

            actual = TerraScan.Helper.WSHelper.F1410_ListOwnerReceipting(interestDate, statementXml,formBackColor);

            if (actual == null)
            {
                Assert.Fail("No Records Found");
            }
        }

        # endregion

        # region F1410_DeleteOwnerReceiptingTest

        /// <summary>
        ///A test for F1410_DeleteOwnerReceipting (int, string, string, int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;Persist Security Info=True;User ID=sa;Password=100%sec", "F1410", DataAccessMethod.Sequential), TestMethod()]
        public void F1410_DeleteOwnerReceiptingTest()
        {
            F1410_SaveOwnerReceiptingTest();

            int ownerId = (int)testContextInstance.DataRow["OwnerID"];

            string ownerXml = (string)testContextInstance.DataRow["OwnerXml"];

            string statementXml = (string)testContextInstance.DataRow["StatementXml"];

            int userId = (int)testContextInstance.DataRow["UserID"];
            string formBackColor = (string)testContextInstance.DataRow["FormBackColor"];

            F1410OwnerReceiptingData actual;

            actual = TerraScan.Helper.WSHelper.F1410_DeleteOwnerReceipting(ownerId, ownerXml, statementXml, userId, formBackColor);

            if (actual == null || actual.ListOwnerStatementTable.Rows.Count < 1)
            {
                Assert.Fail("No Records Found");
            }
        }

        # endregion

        # region F1410_SaveOwnerReceiptingTest

        /// <summary>
        ///A test for F1410_SaveOwnerReceipting (int, string, string, int, int, string)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;Persist Security Info=True;User ID=sa;Password=100%sec", "F1410", DataAccessMethod.Sequential), TestMethod()]
        public void F1410_SaveOwnerReceiptingTest()
        {
            int userId = (int)testContextInstance.DataRow["UserID"];

            string receiptDate = (string)testContextInstance.DataRow["ReceiptDate"];

            string interestDate = (string)testContextInstance.DataRow["InterestDate"];

            int ppaymentId = (int)testContextInstance.DataRow["PPaymentID"];

            int paymentOption = (int)testContextInstance.DataRow["PaymentOption"];

            string statementXml = (string)testContextInstance.DataRow["StatementXml"];

           // F1410OwnerReceiptingData actual;
            string actual;
            actual = TerraScan.Helper.WSHelper.F1410_SaveOwnerReceipting(userId, receiptDate, interestDate, ppaymentId, paymentOption, statementXml);

            if (actual == null)
            {
                Assert.Fail("No records Found");
            }
        }

        # endregion

        # endregion

        # region Real Property Statement

        # region F11020_GetRealPropertyStatementTest

        /// <summary>
        ///A test for F11020_GetRealPropertyStatement (int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;Persist Security Info=True;User ID=sa;Password=100%sec", "F11020_RealPropertyStatement", DataAccessMethod.Sequential), TestMethod()]
        public void F11020_GetRealPropertyStatementTest()
        {
            int statementId = (int)testContextInstance.DataRow["StatementID"];

            F11020RealPropertyData actual;

            actual = TerraScan.Helper.WSHelper.F11020_GetRealPropertyStatement(statementId);

            if (actual == null)
            {
                Assert.Fail("No Satements Found");
            }
        }

        # endregion

        # region F1423_UpdateRealPropertyStatementTest

        /// <summary>
        ///A test for F1423_UpdateRealPropertyStatement (int, string, int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;Persist Security Info=True;User ID=sa;Password=100%sec", "F11020_RealPropertyStatement", DataAccessMethod.Sequential), TestMethod()]
        public void F1423_UpdateRealPropertyStatementTest()
        {
            int statementId = (int)testContextInstance.DataRow["StatementID"];

            string statementItems = (string)testContextInstance.DataRow["StatementItems"];

            int userId = (int)testContextInstance.DataRow["UserID"];

            TerraScan.Helper.WSHelper.F1423_UpdateRealPropertyStatement(statementId, statementItems, userId);

        }

        # endregion

        # region F1423_ListMortgageNameTest

        /// <summary>
        ///A test for F1423_ListMortgageName ()
        ///</summary>
        [TestMethod()]
        public void F1423_ListMortgageNameTest()
        {
            F11020RealPropertyData actual;

            actual = TerraScan.Helper.WSHelper.F1423_ListMortgageName();

            if (actual == null || actual.ListMortgageName.Rows.Count < 1)
            {
                Assert.Fail("No Mortgage Name found");
            }
        }

        # endregion

        # region F15020_ListHistoryGridTest

        /// <summary>
        ///A test for F15020_ListHistoryGrid (int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;Persist Security Info=True;User ID=sa;Password=100%sec", "F11020_RealPropertyStatement", DataAccessMethod.Sequential), TestMethod()]
        public void F15020_ListHistoryGridTest()
        {
            int statementId = (int)testContextInstance.DataRow["StatementID"];

            F15020ReceiptEngineData actual;

            actual = TerraScan.Helper.WSHelper.F15020_ListHistoryGrid(statementId);

            if (actual == null || actual.ListHistoryGrid.Rows.Count < 1 || actual.GetReceiptDetails.Rows.Count < 1 || actual.PaymentItems.Rows.Count < 1)
            {
                Assert.Fail("No Records found");
            }
        }
        # endregion

        # region F15020_GetReceiptDetailsTest

        /// <summary>
        ///A test for F15020_GetReceiptDetails (int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;Persist Security Info=True;User ID=sa;Password=100%sec", "F11020_RealPropertyReceipt", DataAccessMethod.Sequential), TestMethod()]
        public void F15020_GetReceiptDetailsTest()
        {
            int receiptId = (int)testContextInstance.DataRow["ReceiptID"];

            F15020ReceiptEngineData actual;

            actual = TerraScan.Helper.WSHelper.F15020_GetReceiptDetails(receiptId);

            if (actual == null || actual.GetReceiptDetails.Rows.Count < 1)
            {
                Assert.Fail("No Receipts Found");
            }
        }

        # endregion

        # region F1003_GetMinTaxDueTest

        /// <summary>
        ///A test for F1003_GetMinTaxDue (int, string)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;Persist Security Info=True;User ID=sa;Password=100%sec", "F11020_RealPropertyReceipt", DataAccessMethod.Sequential), TestMethod()]
        public void F1003_GetMinTaxDueTest()
        {
            int statmentId = (int)testContextInstance.DataRow["StatementID"];

            string interestDate = (string)testContextInstance.DataRow["InterestDate"];

            decimal actual;

            actual = TerraScan.Helper.WSHelper.F1003_GetMinTaxDue(statmentId, interestDate);

            if (actual == 0)
            {
                Assert.Fail("No Tax Due");
            }
        }

        # endregion

        # region F1004_GetInterestAmountTest

        /// <summary>
        ///A test for F1004_GetInterestAmount (int, string, decimal)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;Persist Security Info=True;User ID=sa;Password=100%sec", "11020_GetInterest", DataAccessMethod.Sequential), TestMethod()]
        public void F1004_GetInterestAmountTest()
        {
            int statmentId = (int)testContextInstance.DataRow["StatementID"];

            string interestDate = (string)testContextInstance.DataRow["InterestDate"];

            decimal taxDueAmount = (decimal)testContextInstance.DataRow["TaxDueAmount"];

            decimal actual;

            actual = TerraScan.Helper.WSHelper.F1004_GetInterestAmount(statmentId, interestDate, taxDueAmount);

        }

        # endregion

        # region F1009_GetValidReceiptTestTest

        /// <summary>
        ///A test for F1009_GetValidReceiptTest (int, DateTime)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;Persist Security Info=True;User ID=sa;Password=100%sec", "F11020_RealPropertyReceipt", DataAccessMethod.Sequential), TestMethod()]
        public void F1009_GetValidReceiptTestTest()
        {
            int statementId = (int)testContextInstance.DataRow["StatementID"];

            DateTime receiptDate = (DateTime)testContextInstance.DataRow["ReceiptDate"];

            string actual;

            actual = TerraScan.Helper.WSHelper.F1009_GetValidReceiptTest(statementId, receiptDate);

            if (actual == null)
            {
                Assert.Fail("No Valid Receipts are there");
            }
        }

        # endregion

        # region F1405_SaveMasterReceiptTest

        /// <summary>
        ///A test for F1405_SaveMasterReceipt (int, int, string)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;Persist Security Info=True;User ID=sa;Password=100%sec", "F11020_RealPropertyReceipt", DataAccessMethod.Sequential), TestMethod()]
        public void F1405_SaveMasterReceiptTest()
        {
            int statementId = (int)testContextInstance.DataRow["StatementID"];

            int receiptSourceId = (int)testContextInstance.DataRow["ReceiptSourceID"];

            string otherParameterInfo = (string)testContextInstance.DataRow["OtherParameterInfo"];
            int? sharedPaymentId = (int)testContextInstance.DataRow["SharedPaymentId"];
            int actual;

            actual = TerraScan.Helper.WSHelper.F1405_SaveMasterReceipt(statementId, receiptSourceId, otherParameterInfo,sharedPaymentId);

            if (actual == 0)
            {
                Assert.Fail("Receipt not saved");
            }
        }

        # endregion

        # endregion

        # endregion

        # region Sprint 19

        # region 15010_Excise Affidavit

        // Created By: Shireesha

        # region F15010_GetExciseIndividualTypeTest

        /// <summary>
        ///A test for F15010_GetExciseIndividualType ()
        ///</summary>
        [TestMethod()]
        public void F15010_GetExciseIndividualTypeTest()
        {
            F15010ExciseAffidavitData actual;

            actual = TerraScan.Helper.WSHelper.F15010_GetExciseIndividualType();

            if (actual == null || actual.ExciseIndividualType.Rows.Count < 1)
            {
                Assert.Fail("No Owner Found");
            }
        }

        # endregion

        # region F15010_SaveAffiDavitDetailsTest

        //
        // Added MobileHome Details parameter newly
        //

        /// <summary>
        ///A test for F15010_SaveAffiDavitDetails (int, string, string, string, string, int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;Persist Security Info=True;User ID=sa;Password=100%sec", "F15010_ExciseAffidavit", DataAccessMethod.Sequential), TestMethod()]
        public void F15010_SaveAffiDavitDetailsTest()
        {
            int statementId = (int)testContextInstance.DataRow["StatementID"];

            string partiesAddress = (string)testContextInstance.DataRow["PartiesAddress"];

            string parcelDetails = (string)testContextInstance.DataRow["ParcelDetails"];

            string exciseAffidavitDetails = (string)testContextInstance.DataRow["ExciseAffidavitDetails"];

            string mobileHomeDetails = (string)testContextInstance.DataRow["MobileHomeDetails"];

            int userId = (int)testContextInstance.DataRow["UserID"];

            int actual;

            actual = TerraScan.Helper.WSHelper.F15010_SaveAffiDavitDetails(statementId, partiesAddress, parcelDetails, exciseAffidavitDetails, mobileHomeDetails, userId);

            if (actual == 0)
            {
                Assert.Fail("Record not saved properly");
            }
        }

        # endregion

        # region F15010_DeleteAffidavitDetailsTest

        /// <summary>
        ///A test for F15010_DeleteAffidavitDetails (int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;Persist Security Info=True;User ID=sa;Password=100%sec", "F15010_ExciseAffidavit", DataAccessMethod.Sequential), TestMethod()]
        public void F15010_DeleteAffidavitDetailsTest()
        {
            int statementId = (int)testContextInstance.DataRow["StatementID"];

            string partiesAddress = (string)testContextInstance.DataRow["PartiesAddress"];

            string parcelDetails = (string)testContextInstance.DataRow["ParcelDetails"];

            string exciseAffidavitDetails = (string)testContextInstance.DataRow["ExciseAffidavitDetails"];

            string mobileHomeDetails = (string)testContextInstance.DataRow["MobileHomeDetails"];

            int userId = (int)testContextInstance.DataRow["UserID"];

            int actual;

            actual = TerraScan.Helper.WSHelper.F15010_SaveAffiDavitDetails(statementId, partiesAddress, parcelDetails, exciseAffidavitDetails, mobileHomeDetails, userId);

            if (actual == 0)
            {
                Assert.Fail("Record not saved properly");
            }

            TerraScan.Helper.WSHelper.F15010_DeleteAffidavitDetails(actual, userId);

        }

        # endregion

        # region F15010_GetExciseTaxAffidavitCalulateAmountDueTest

        /// <summary>
        ///A test for F15010_GetExciseTaxAffidavitCalulateAmountDue (DateTime, DateTime, int, int, double)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;Persist Security Info=True;User ID=sa;Password=100%sec", "F15010_AmountDue", DataAccessMethod.Sequential), TestMethod()]
        public void F15010_GetExciseTaxAffidavitCalulateAmountDueTest()
        {
            DateTime saleDate = (DateTime)testContextInstance.DataRow["SaleDate"];

            DateTime paymentDate = (DateTime)testContextInstance.DataRow["PaymentDate"];

            int exciseRateID = (int)testContextInstance.DataRow["ExciseRateID"];

            int taxCode = (int)testContextInstance.DataRow["TaxCode"];

            double taxableSaleAmount = Convert.ToDouble(testContextInstance.DataRow["TaxableSaleAmount"]);

            F15010ExciseAffidavitData actual;

            actual = TerraScan.Helper.WSHelper.F15010_GetExciseTaxAffidavitCalulateAmountDue(saleDate, paymentDate, exciseRateID, taxCode, taxableSaleAmount);

            if (actual == null || actual.CalAmountDue.Rows.Count < 1)
            {
                Assert.Fail("No Records Found");
            }
        }

        # endregion

        # region F15010_GetExciseTaxAffidavitDetailsTest

        /// <summary>
        ///A test for F15010_GetExciseTaxAffidavitDetails (int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;Persist Security Info=True;User ID=sa;Password=100%sec", "F15010_ExciseAffidavit", DataAccessMethod.Sequential), TestMethod()]
        public void F15010_GetExciseTaxAffidavitDetailsTest()
        {
            int statementId = (int)testContextInstance.DataRow["StatementID"];

            string partiesAddress = (string)testContextInstance.DataRow["PartiesAddress"];

            string parcelDetails = (string)testContextInstance.DataRow["ParcelDetails"];

            string exciseAffidavitDetails = (string)testContextInstance.DataRow["ExciseAffidavitDetails"];

            string mobileHomeDetails = (string)testContextInstance.DataRow["MobileHomeDetails"];

            int userId = (int)testContextInstance.DataRow["UserID"];

            int actualsave;

            actualsave = TerraScan.Helper.WSHelper.F15010_SaveAffiDavitDetails(statementId, partiesAddress, parcelDetails, exciseAffidavitDetails, mobileHomeDetails, userId);

            if (actualsave == 0)
            {
                Assert.Fail("Record not saved properly");
            }

            F15010ExciseAffidavitData actual;

            actual = TerraScan.Helper.WSHelper.F15010_GetExciseTaxAffidavitDetails(actualsave);

            if (actual == null || actual.General.Rows.Count < 1 || actual.PartiesHeader.Rows.Count < 1 || actual.ParcelHeader.Rows.Count < 1 || actual.Affidavit.Rows.Count < 1 || actual.AmountDue.Rows.Count < 1 || actual.Suppliment.Rows.Count < 1)
            {
                Assert.Fail("No records Found");
            }
        }

        # endregion

        # region F15010_GetOwnerDetailsTest

        /// <summary>
        ///A test for F15010_GetOwnerDetails (int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;Persist Security Info=True;User ID=sa;Password=100%sec", "Owner", DataAccessMethod.Sequential), TestMethod()]
        public void F15010_GetOwnerDetailsTest()
        {
            int ownerId = (int)testContextInstance.DataRow["OwnerID"];

            F15010ExciseAffidavitData actual;

            actual = TerraScan.Helper.WSHelper.F15010_GetOwnerDetails(ownerId);

            if (actual == null || actual.ListPartiesOwnerDetail.Rows.Count < 1)
            {
                Assert.Fail("No Owners Found");
            }
        }

        # endregion

        # region F15010_GetDistrictSelectionTest

        /// <summary>
        ///A test for F15010_GetDistrictSelection (int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;Persist Security Info=True;User ID=sa;Password=100%sec", "ExciseTaxRate", DataAccessMethod.Sequential), TestMethod()]
        public void F15010_GetDistrictSelectionTest()
        {
            int exciseRateId = (int)testContextInstance.DataRow["ExciseRateID"];

            F15010ExciseAffidavitData actual;

            actual = TerraScan.Helper.WSHelper.F15010_GetDistrictSelection(exciseRateId);

            if (actual == null || actual.ListAffidavitDistrictSelection.Rows.Count < 1)
            {
                Assert.Fail("No District Found");
            }
        }

        # endregion

        // F15010_GetAffidavitStatementId doesn't exist

        # endregion

        # region F15013_ExciseTaxRate

        // Created By:yavana rani

        #region F15013_SaveExciseTaxRate
        /// <summary>
        ///A test for F15013_SaveExciseTaxRate (int, string, int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "15013_excisr rate", DataAccessMethod.Sequential), TestMethod()]
        public void F15013_SaveExciseTaxRateTest()
        {
            int exciseRateId = (int)testContextInstance.DataRow["ExciseRateID"];

            string exciseTaxDetails = (String)testContextInstance.DataRow["ExciseTaxDetails"];

            int userId = (int)testContextInstance.DataRow["UserID"];

            int actual;

            actual = TerraScan.Helper.WSHelper.F15013_SaveExciseTaxRate(exciseRateId, exciseTaxDetails, userId);

        }

        ///// <summary>
        /////A test for F15013_SaveExciseTaxRate (int, string)
        /////</summary>
        //[TestMethod()]
        //public void F15013_SaveExciseTaxRateTest()
        //{
        //    int exciseRateId = (int)testContextInstance.DataRow["ExciseRateID"];

        //    string exciseTaxDetails = null; // TODO: Initialize to an appropriate value

        //    int expected = 0;
        //    int actual;

        //    actual = TerraScan.Helper.WSHelper.F15013_SaveExciseTaxRate(exciseRateId, exciseTaxDetails);

        //    Assert.AreEqual(expected, actual, "TerraScan.Helper.WSHelper.F15013_SaveExciseTaxRate did not return the expected va" +
        //            "lue.");
        //    Assert.Inconclusive("Verify the correctness of this test method.");
        //}

        #endregion

        # region F15013_GetExciseTaxRate
        /// <summary>
        ///A test for F15013_GetExciseTaxRate (int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "15013_excisr rate", DataAccessMethod.Sequential), TestMethod()]
        public void F15013_GetExciseTaxRateTest()
        {
            int exciseRateId = (int)testContextInstance.DataRow["GetExciseRateID"];  // TODO: Initialize to an appropriate value

            F15013ExciseTaxRateData expected = null;
            F15013ExciseTaxRateData actual;

            actual = TerraScan.Helper.WSHelper.F15013_GetExciseTaxRate(exciseRateId);

            if (actual == null || actual.Tables.Count < 0 || actual.Tables[0].Rows.Count < 0)
            {
                Assert.Fail(" Record not saved");
            }

        }
        #endregion

        #region F15013_ListExciseTaxRate (SP removed)
        ///// <summary>
        /////A test for F15013_ListExciseTaxRate ()
        /////</summary>
        //[TestMethod()]
        //public void F15013_ListExciseTaxRateTest()
        //{
        //    F15013ExciseTaxRateData expected = null;
        //    F15013ExciseTaxRateData actual;

        //    actual = TerraScan.Helper.WSHelper.F15013_ListExciseTaxRate();

        //}

        #endregion

        #region F15013_DeleteExciseTaxRate
        /// <summary>
        ///A test for F15013_DeleteExciseTaxRate (int, int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "15013_excisr rate", DataAccessMethod.Sequential), TestMethod()]
        public void F15013_DeleteExciseTaxRateTest()
        {
            int exciseRateId = (int)testContextInstance.DataRow["ExciseRateID"];

            int userId = (int)testContextInstance.DataRow["UserID"];

            int expected = 0;
            int actual;

            actual = TerraScan.Helper.WSHelper.F15013_DeleteExciseTaxRate(exciseRateId, userId);

            if (actual == 0)
            {
                Assert.Fail(" NO record Available");
            }

        }
        #endregion

        #region F15013_GetDistrictName
        /// <summary>
        ///A test for F15013_GetDistrictName (int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "ExciseDistrictID", DataAccessMethod.Sequential), TestMethod()]
        public void F15013_GetDistrictNameTest()
        {
            int districtId = (int)testContextInstance.DataRow["districtID"];

            F15013ExciseTaxRateData expected = null;
            F15013ExciseTaxRateData actual;

            actual = TerraScan.Helper.WSHelper.F15013_GetDistrictName(districtId);
            if (actual == null || actual.Tables.Count < 0 || actual.Tables[0].Rows.Count < 0)
            {
                Assert.Fail(" Record not saved");
            }

        }
        #endregion

        #region F15013_GetAccountName
        // <summary>
        ///A test for F15013_GetAccountName (int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "AccountName", DataAccessMethod.Sequential), TestMethod()]
        public void F15013_GetAccountNameTest()
        {
            int accountId = (int)testContextInstance.DataRow["accountId"];  // TODO: Initialize to an appropriate value

            F15013ExciseTaxRateData expected = null;
            F15013ExciseTaxRateData actual;

            actual = TerraScan.Helper.WSHelper.F15013_GetAccountName(accountId);

            if (actual == null || actual.Tables.Count < 0 || actual.Tables[0].Rows.Count < 0)
            {
                Assert.Fail(" Record not saved");
            }
        }
        #endregion

        #endregion

        # endregion

        #region Sprint 20

        #region 15003_Fund_MGMT

        // Created By: Arun Senthil

        #region 15003_Get

        #region F15003_Get

        /// <summary>
        ///A test for F15003_GetFundSubFundDetails
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "F15003 Fund Management", DataAccessMethod.Sequential), TestMethod()]
        public void F15003_GetFundSubFundDetails()
        {
            int fundId = Convert.ToInt32(testContextInstance.DataRow["fundId"]);// TODO: Initialize to an appropriate value

            F15003FundMgmtData expected = null;
            F15003FundMgmtData actual;

            actual = TerraScan.Helper.WSHelper.F15003_GetFundSubFundDetails(fundId);

            if (actual == null || actual.FundHeader.Rows.Count < 0)
            {
                Assert.Fail("No Records Found");
            }

        }
        #endregion

        #region F15003_ListAvailableSubFunds

        /// <summary>
        ///A test for F15003_ListAvailableSubFunds (string, string, int?, int?)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "F15003 Fund Management", DataAccessMethod.Sequential), TestMethod()]
        public void F15003_ListAvailableSubFundsTest()
        {
            string subFund = (string)testContextInstance.DataRow["subFund"];

            string description = (string)testContextInstance.DataRow["description"];

            int rollYear = (int)testContextInstance.DataRow["rollYear"];

            int fundId = (int)testContextInstance.DataRow["fundId"];

            F15003FundMgmtData actual;

            actual = TerraScan.Helper.WSHelper.F15003_ListAvailableSubFunds(subFund, description, rollYear, fundId);

            if (actual.ListAvailableSubFundItems.Rows.Count <= 0)
            {
                Assert.Fail("No Records Found");
            }
        }

        #endregion

        #region F15003_ListFundType

        /// <summary>
        ///A test for F15003_ListFundType ()
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "F15003 Fund Management", DataAccessMethod.Sequential), TestMethod()]
        public void F15003_ListFundTypeTest()
        {
            F15003FundMgmtData.ListFundTypeDataTable actual;

            actual = TerraScan.Helper.WSHelper.F15003_ListFundType();

            if (actual.Rows.Count <= 0)
            {
                Assert.Fail("No Records Found");
            }
        }

        #endregion

        #endregion

        #region 15003_SaveProcess

        #region F15003_CheckFundTest

        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "F15003 Fund Management", DataAccessMethod.Sequential), TestMethod()]
        public void F15003_CheckFundTest()
        {

            //int fundId = (int)testContextInstance.DataRow["fundId"];
            System.Nullable<int> fundId = (System.Nullable<int>)testContextInstance.DataRow["FundID"];

            string fund = (string)testContextInstance.DataRow["fund"];

            int rollYear = (int)testContextInstance.DataRow["rollYear"];

            int actual;

            actual = TerraScan.Helper.WSHelper.F15003_CheckFund(fundId, fund, rollYear);

            if (actual < 0)
            {
                Assert.Fail("No Records Found");
            }


        }

        #endregion

        #region F15003_CreateOrEditFundMgmtTest

        /// <summary>
        //A test for F15003_CreateOrEditFundMgmt (int?, int, int, string, int?, string, int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "F15003 Fund Management", DataAccessMethod.Sequential), TestMethod()]

        public void F15003_CreateOrEditFundMgmtTest()
        {
            // int? fundId = null;
            System.Nullable<int> fundId = (System.Nullable<int>)testContextInstance.DataRow["FundID"];

            // int? fundGroupId = null;
            System.Nullable<int> fundGroupId = (System.Nullable<int>)testContextInstance.DataRow["fundGroupId"];

            //try
            //{
            //    fundId = Convert.ToInt32(testContextInstance.DataRow["fundId"]);
            //}
            //catch
            //{

            //}

            string fund = (string)testContextInstance.DataRow["fund"];

            int rollYear = (int)testContextInstance.DataRow["rollYear"];

            string description = (string)testContextInstance.DataRow["description"];

            int userId = (int)testContextInstance.DataRow["UserID"];

            //try
            //{
            //    fundGroupId = (int)testContextInstance.DataRow["fundGroupId"];
            //}
            //catch
            //{
            //}

            string fundItems = (string)testContextInstance.DataRow["fundItems"];

            int actual;

            actual = TerraScan.Helper.WSHelper.F15003_CreateOrEditFundMgmt(fundId, fund, rollYear, description, fundGroupId, fundItems, userId);

            if (actual <= 0)
            {
                Assert.Fail("Record Can Not be Saved");
            }

        }


        #endregion

        #endregion

        #endregion

        #region F9008_ReportDetails

        // Created By: Sudhag

        #region F9008_Get_ReportDetails

        // Created By: Sudha

        /// <summary>
        ///A test for F9008GetReportDetails (int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "9008_Get", DataAccessMethod.Sequential), TestMethod()]
        public void F9008GetReportDetailsTest()
        {
            int userID = Convert.ToInt32(testContextInstance.DataRow["userID"]);

            F9008ReportDetailsData actual;

            actual = TerraScan.Helper.WSHelper.F9008GetReportDetails(userID);

            if (actual == null || actual.F9008GetReportDetails.Count < 1)
            {
                Assert.Fail(" Record not found");
            }

        }
        #endregion

        #region F9008_Save ReportDetails
        /// <summary>
        ///A test for F9008_SaveReportDetails (int, string)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "F9008_save", DataAccessMethod.Sequential), TestMethod()]
        public void F9008_SaveReportDetailsTest()
        {
            int userId = Convert.ToInt32(testContextInstance.DataRow["userId"]); ; // TODO: Initialize to an appropriate value

            string printerConf = testContextInstance.DataRow["printerConf"].ToString();  // TODO: Initialize to an appropriate value

            TerraScan.Helper.WSHelper.F9008_SaveReportDetails(userId, printerConf);

        }
        #endregion

        #endregion

        #endregion

        # region Sprint 22

        # region F15019
        // Created By:yavana rani

        #region F15019GetJournalEntryDetails
        /// <summary>
        ///A test for F15019GetJournalEntryDetails (int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;Integrated Security=True", "15019_journal entry", DataAccessMethod.Sequential), TestMethod()]
        public void F15019GetJournalEntryDetailsTest()
        {
            int receiptId = (int)testContextInstance.DataRow["Receipt ID"];

            F15019JournalEntryData actual;

            actual = TerraScan.Helper.WSHelper.F15019GetJournalEntryDetails(receiptId);

            if (actual == null || actual.F15019GetJournalEntryDetails.Rows.Count < 1)
            {
                Assert.Fail("No Records Found");
            }
        }
        #endregion

        #endregion

        #region F1025 AutoFund Transfer

        // Created By: Arun Senthil

        #region List RollYear

        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;Persist Security Info=True;User ID=sa;Password=100%sec", "F1025_AutoFund Transfer", DataAccessMethod.Sequential), TestMethod()]
        public void F1025_ListRollYearTest()
        {
            //F1025AutoFundTransferData expected = null;
            F1025AutoFundTransferData actual;

            actual = TerraScan.Helper.WSHelper.F1025_ListRollYear();
            if (actual == null || actual.ListAutoFundRollYear.Rows.Count < 1)
            {
                Assert.Fail("No Records Found");
            }

        }
        #endregion

        #region ListAutoFundTransferDetails

        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;Integrated Security=True", "F1025_AutoFund Transfer", DataAccessMethod.Sequential), TestMethod()]
        public void F1025_ListAutoFundTransferDetailsTest()
        {
            int rollYear = (int)testContextInstance.DataRow["rollYear"];

            F1025AutoFundTransferData actual;

            actual = TerraScan.Helper.WSHelper.F1025_ListAutoFundTransferDetails(rollYear);

            if (actual == null || actual.ListAutoFundAccountTransferDetails.Rows.Count < 1)
            {
                Assert.Fail("No Records Found");
            }

        }

        #endregion ListAutoFundTransferDetails

        #region Delete AutoFund Transfer

        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;Integrated Security=True", "F1025_AutoFund Transfer", DataAccessMethod.Sequential), TestMethod()]
        public void F1025_DeleteAutoFundTransferDetailsTest()
        {
            int autoTransferID = (int)testContextInstance.DataRow["autoTransferID"];

            int userId = (int)testContextInstance.DataRow["UserID"];

            int actual;
            actual = TerraScan.Helper.WSHelper.F1025_DeleteAutoFundTransferDetails(autoTransferID, userId);

            if (actual == 0)
            {
                Assert.Fail(" NO record Available");
            }

        }

        # endregion DeleteAutoFundTransfer

        #region Update AutoFund Transfer

        /// <summary>
        ///A test for F1025_UpdateAutoFundTransferDetails (string, int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;Persist Security Info=True;User ID=sa;Password=100%sec", "F1025_AutoFund Transfer", DataAccessMethod.Sequential), TestMethod()]
        public void F1025_UpdateAutoFundTransferDetailsTest()
        {
            string autoFundItems = (string)testContextInstance.DataRow["autoFundItems"];

            int userId = (int)testContextInstance.DataRow["UserID"];

            int actual;

            actual = TerraScan.Helper.WSHelper.F1025_UpdateAutoFundTransferDetails(autoFundItems, userId);
        }

        #endregion Update AutoFund Transfer

        # endregion

        #endregion

        # region Sprint 23

        // Created By: Shireesha

        # region F9013_NextNumber Configuration

        // Created By: Shireesha

        # region F9013_CheckNextNumberTest

        /// <summary>
        ///A test for F9013_CheckNextNumber (int, int, string)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;Persist Security Info=True;User ID=sa;Password=100%sec", "F9013", DataAccessMethod.Sequential), TestMethod()]
        public void F9013_CheckNextNumberTest()
        {
            int rollYear = (int)testContextInstance.DataRow["RollYear"];

            int nextNum = (int)testContextInstance.DataRow["NextNum"];

            string formula = (string)testContextInstance.DataRow["Formula"];

            DataSet actual;

            actual = TerraScan.Helper.WSHelper.F9013_CheckNextNumber(rollYear, nextNum, formula);

            if (actual == null || actual.Tables.Count < 1)
            {
                Assert.Fail("No Records Found");
            }
        }

        #endregion

        # region F9013_ListNextNumberConfigurationTest

        /// <summary>
        ///A test for F9013_ListNextNumberConfiguration (int, int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;Persist Security Info=True;User ID=sa;Password=100%sec", "F9013", DataAccessMethod.Sequential), TestMethod()]
        public void F9013_ListNextNumberConfigurationTest()
        {
            int rollYear = (int)testContextInstance.DataRow["RollYear"];

            int userId = (int)testContextInstance.DataRow["UserID"];

            F9013NextNumberData actual;

            actual = TerraScan.Helper.WSHelper.F9013_ListNextNumberConfiguration(rollYear, userId);

            if (actual == null || actual.LisNextNumberConfiguration.Rows.Count < 1)
            {
                Assert.Fail("No Records Found");
            }
        }

        # endregion

        # region F9013_ListNextNumberRollYearTest

        /// <summary>
        ///A test for F9013_ListNextNumberRollYear (int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;Persist Security Info=True;User ID=sa;Password=100%sec", "F9013", DataAccessMethod.Sequential), TestMethod()]
        public void F9013_ListNextNumberRollYearTest()
        {
            int userId = (int)testContextInstance.DataRow["UserID"];

            F9013NextNumberData actual;

            actual = TerraScan.Helper.WSHelper.F9013_ListNextNumberRollYear(userId);

            if (actual == null || actual.ListNextNumberRollYear.Rows.Count < 1)
            {
                Assert.Fail("No Records Found");
            }
        }

        # endregion

        # region F9013_UpdateNextNumberConfigDetailsTest

        /// <summary>
        ///A test for F9013_UpdateNextNumberConfigDetails (int, int, string, int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;Persist Security Info=True;User ID=sa;Password=100%sec", "F9013", DataAccessMethod.Sequential), TestMethod()]
        public void F9013_UpdateNextNumberConfigDetailsTest()
        {
            int nextNumId = (int)testContextInstance.DataRow["NextNumId"];

            int nextNum = (int)testContextInstance.DataRow["NextNum"];

            string formula = (string)testContextInstance.DataRow["Formula"];

            int userId = (int)testContextInstance.DataRow["UserID"];

            TerraScan.Helper.WSHelper.F9013_UpdateNextNumberConfigDetails(nextNumId, nextNum, formula, userId);

        }

        # endregion

        # endregion

        # region F11018_Miscellaneous Receipt

        // Created By: Shireesha

        # region F15018_GetMiscReceiptTest

        /// <summary>
        ///A test for F15018_GetMiscReceipt (int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;Persist Security Info=True;User ID=sa;Password=100%sec", "F11018_MiscReceipt", DataAccessMethod.Sequential), TestMethod()]
        public void F15018_GetMiscReceiptTest()
        {
            int receiptId = (int)testContextInstance.DataRow["ReceiptID"];

            F11018MiscReceiptData actual;

            actual = TerraScan.Helper.WSHelper.F15018_GetMiscReceipt(receiptId);

            if (actual == null || actual.GetMiscReceipt.Rows.Count < 1)
            {
                Assert.Fail("No Records Found");
            }
        }

        # endregion

        # region F1021_GetMiscReceiptTemplateTest

        /// <summary>
        ///A test for F1021_GetMiscReceiptTemplate (int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;Persist Security Info=True;User ID=sa;Password=100%sec", "F11018_MiscReceipt", DataAccessMethod.Sequential), TestMethod()]
        public void F1021_GetMiscReceiptTemplateTest()
        {
            int miscTemplateID = (int)testContextInstance.DataRow["MiscTemplateID"];

            F11018MiscReceiptData actual;

            actual = TerraScan.Helper.WSHelper.F1021_GetMiscReceiptTemplate(miscTemplateID);

            if (actual == null || actual.ListReceiptItem.Rows.Count < 1)
            {
                Assert.Fail("No Records Found");
            }
        }

        # endregion

        # region F1021_SaveMiscReceiptTemplateTest

        /// <summary>
        ///A test for F1021_SaveMiscReceiptTemplate (string, string, int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;Persist Security Info=True;User ID=sa;Password=100%sec", "F11018_MiscReceipt", DataAccessMethod.Sequential), TestMethod()]
        public void F1021_SaveMiscReceiptTemplateTest()
        {
            string miscTemplateDetails = (string)testContextInstance.DataRow["MiscTemplateDetails"];

            string templateItems = (string)testContextInstance.DataRow["TemplateItems"];

            int userId = (int)testContextInstance.DataRow["UserID"];

            int actual;

            actual = TerraScan.Helper.WSHelper.F1021_SaveMiscReceiptTemplate(miscTemplateDetails, templateItems, userId);

            if (actual == 0)
            {
                Assert.Fail("Records not Saved");
            }
        }

        # endregion

        # region F1022_DeleteMiscReceiptTemplateTest

        /// <summary>
        ///A test for F1022_DeleteMiscReceiptTemplate (int, int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;Persist Security Info=True;User ID=sa;Password=100%sec", "F11018_MiscReceipt_delete", DataAccessMethod.Sequential), TestMethod()]
        public void F1022_DeleteMiscReceiptTemplateTest()
        {
            // F1021_SaveMiscReceiptTemplateTest();

            int miscTemplateID = (int)testContextInstance.DataRow["MiscTemplateID"];

            int userId = (int)testContextInstance.DataRow["UserID"];

            TerraScan.Helper.WSHelper.F1022_DeleteMiscReceiptTemplate(miscTemplateID, userId);

        }

        # endregion

        # region F1022_ListMiscReceiptTemplateTest

        /// <summary>
        ///A test for F1022_ListMiscReceiptTemplate ()
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;Persist Security Info=True;User ID=sa;Password=100%sec", "F11018_MiscReceipt", DataAccessMethod.Sequential), TestMethod()]
        public void F1022_ListMiscReceiptTemplateTest()
        {
            F11018MiscReceiptData actual;

            actual = TerraScan.Helper.WSHelper.F1022_ListMiscReceiptTemplate();

            if (actual == null || actual.ListMiscReceiptTemplate.Rows.Count < 1)
            {
                Assert.Fail("No Records Found");
            }
        }

        # endregion

        # region F9075_GetCommentTest

        /// <summary>
        ///A test for F9075_GetComment (int, int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;Persist Security Info=True;User ID=sa;Password=100%sec", "F11018_MiscReceipt", DataAccessMethod.Sequential), TestMethod()]
        public void F9075_GetCommentTest()
        {
            int keyId = (int)testContextInstance.DataRow["KeyID"];

            int formId = (int)testContextInstance.DataRow["FormID"];

            CommentsData actual;

            actual = TerraScan.Helper.WSHelper.F9075_GetComment(keyId, formId);

            if (actual == null || actual.GetComments.Rows.Count < 1)
            {
                Assert.Fail("No Comments Found");
            }
        }

        # endregion

        # endregion

        # endregion

        # region Sprint 24

        # region 35000_AppraisalSummary

        // Created By: Shireesha

        # region F35000_GetAppraisalSummaryObjectsTest

        /// <summary>
        ///A test for F35000_GetAppraisalSummaryObjects (int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;Persist Security Info=True;User ID=sa;Password=100%sec", "F35000_AppraisalSummary", DataAccessMethod.Sequential), TestMethod()]
        public void F35000_GetAppraisalSummaryObjectsTest()
        {
            int parcelId = (int)testContextInstance.DataRow["ParcelID"];

            F35000AppraisalSummaryData actual;

            actual = TerraScan.Helper.WSHelper.F35000_GetAppraisalSummaryObjects(parcelId);

            if (actual == null || actual.GetObjectSummaryTable.Rows.Count < 1 || actual.GetSliceSummaryTable.Rows.Count < 1)
            {
                Assert.Fail("No records found");
            }
        }

        # endregion

        # region F35000_InsertObjectTest

        /// <summary>
        ///A test for F35000_InsertObject (int, short, string, int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;Persist Security Info=True;User ID=sa;Password=100%sec", "F35000_AppraisalSummary", DataAccessMethod.Sequential), TestMethod()]
        public void F35000_InsertObjectTest()
        {
            int parcelID = (int)testContextInstance.DataRow["ParcelID"];

            short objectTypeID = (short)testContextInstance.DataRow["ObjectTypeID"];

            string description = (string)testContextInstance.DataRow["Description"];

            int userId = (int)testContextInstance.DataRow["UserID"];

            int actual;

            actual = TerraScan.Helper.WSHelper.F35000_InsertObject(parcelID, objectTypeID, description, userId);

            if (actual == 0)
            {
                Assert.Fail("Records not saved");
            }
        }

        # endregion

        # region F35000_InsertOrUpdateValueSliceTest

        /// <summary>
        ///A test for F35000_InsertOrUpdateValueSlice (int?, string, int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;Persist Security Info=True;User ID=sa;Password=100%sec", "F35000_AppraisalSummary", DataAccessMethod.Sequential), TestMethod()]
        public void F35000_InsertOrUpdateValueSliceTest()
        {
            int valueSliceID = (int)testContextInstance.DataRow["ValueSliceID"];

            string valueSliceHeaderItems = (string)testContextInstance.DataRow["ValueSliceHeaderItems"];

            int userId = (int)testContextInstance.DataRow["UserID"];

            int actual;

            actual = TerraScan.Helper.WSHelper.F35000_InsertOrUpdateValueSlice(valueSliceID, valueSliceHeaderItems, userId);

            if (actual == 0)
            {
                Assert.Fail("Records not saved");
            }
        }

        # endregion

        # region F35000_ListObjectSliceTypesTest

        /// <summary>
        ///A test for F35000_ListObjectSliceTypes ()
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;Persist Security Info=True;User ID=sa;Password=100%sec", "F35000_AppraisalSummary", DataAccessMethod.Sequential), TestMethod()]
        public void F35000_ListObjectSliceTypesTest()
        {
            F35000AppraisalSummaryData actual;

            actual = TerraScan.Helper.WSHelper.F35000_ListObjectSliceTypes();

            if (actual == null || actual.ListObjectTypes.Rows.Count < 1 || actual.ListSliceTypes.Rows.Count < 1)
            {
                Assert.Fail("No Records found");
            }
        }

        # endregion

        # endregion

        # region 35001_ValueSliceHeader

        # region F35001_DeleteValueSliceTest

        /// <summary>
        ///A test for F35001_DeleteValueSlice (int, int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "F35000_AppraisalSummary", DataAccessMethod.Sequential), TestMethod()]
        public void F35001_DeleteValueSliceTest()
        {
            int valueSliceID = (int)testContextInstance.DataRow["ValueSliceDelID"];

            int userId = (int)testContextInstance.DataRow["UserID"];

            TerraScan.Helper.WSHelper.F35001_DeleteValueSlice(valueSliceID, userId);

        }

        # endregion

        # region F35001_GetAdjustmentSliceValueTest

        /// <summary>
        ///A test for F35001_GetAdjustmentSliceValue (int, byte, bool, decimal)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "F35000_AppraisalSummary", DataAccessMethod.Sequential), TestMethod()]
        public void F35001_GetAdjustmentSliceValueTest()
        {
            int valueSliceID = (int)testContextInstance.DataRow["ValueSliceID"];

            byte type = (byte)testContextInstance.DataRow["Type"];

            bool isvalue = (bool)testContextInstance.DataRow["IsValue"];

            decimal adjustmentValue = (decimal)testContextInstance.DataRow["AdjustmentValue"];

            object actual;

            actual = TerraScan.Helper.WSHelper.F35001_GetAdjustmentSliceValue(valueSliceID, type, isvalue, adjustmentValue);

            if (actual == null)
            {
                Assert.Fail("No records found");
            }
        }

        # endregion

        # region F35001_GetValueSliceHeaderTest

        /// <summary>
        ///A test for F35001_GetValueSliceHeader (int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "F35000_AppraisalSummary", DataAccessMethod.Sequential), TestMethod()]
        public void F35001_GetValueSliceHeaderTest()
        {
            int valueSliceID = (int)testContextInstance.DataRow["ValueSliceID"];

            F35001ValueSliceHeaderData actual;

            actual = TerraScan.Helper.WSHelper.F35001_GetValueSliceHeader(valueSliceID);

            if (actual == null || actual.GetValueSliceHeader.Rows.Count < 1)
            {
                Assert.Fail("No records found");
            }
        }

        # endregion

        # endregion

        # region 35002_AdjustmentValueSlice

        # region F35002_ListAdjustmentTypeTest

        // Edited By: Shireesha

        /// <summary>
        ///A test for F35002_ListAdjustmentType (int)
        ///</summary>
        [TestMethod()]
        public void F35002_ListAdjustmentTypeTest()
        {
            System.Nullable<int> masterFromNo = new System.Nullable<int>();

            F35001ValueSliceHeaderData.ListAdjustmentTypeDataTable actual;

            actual = TerraScan.Helper.WSHelper.F35002_ListAdjustmentType(masterFromNo);

            if (actual == null)
            {
                Assert.Fail("No records found");
            }
        }

        # endregion

        # endregion

        #region F36000_Marshal&SwiftResidential

        #region F36000_GetHouseTypeCollection

        //CREATED BY:- S.SATHIYAN
        // create a new record for M&S residential through application and enter the value in the UTC table.

        /// <summary>
        ///A test for F36000_GetHouseTypeCollection (int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "36000_M&S Residential", DataAccessMethod.Sequential), TestMethod()]
        public void F36000_GetHouseTypeCollectionTest()
        {
            int valueSliceId = (int)testContextInstance.DataRow["valueSliceId"];

            F36000MarshalAndSwiftData expected = null;
            F36000MarshalAndSwiftData actual;

            actual = TerraScan.Helper.WSHelper.F36000_GetHouseTypeCollection(valueSliceId);

            if (actual == null)
            {
                Assert.Fail(" No records Found");
            }
        }

        #endregion

        #endregion

        # endregion

        # region Sprint 25

        #region F25000_Get Parcel Details

        // Created By: Sudhag

        /// <summary>
        ///A test for F25000_GetParcelDetails (int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "25000_get", DataAccessMethod.Sequential), TestMethod()]
        public void F25000_GetParcelDetailsTest()
        {
            int eventId = Convert.ToInt32(testContextInstance.DataRow["eventId"]); // TODO: Initialize to an appropriate value

            F25000ParcelHeaderData expected = null;
            F25000ParcelHeaderData actual;

            actual = TerraScan.Helper.WSHelper.F25000_GetParcelDetails(eventId);

            if (actual == null || actual.f25000ParcelHeader.Count < 1)
            {
                Assert.Fail(" Record not found");
            }
        }
        #endregion

        #region F15016_Get statement Header SlimDetails

        // Created By: Sudhag
        /// <summary>
        ///A test for F15016_GetstatementHeaderSlimDetails (int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "15016_get", DataAccessMethod.Sequential), TestMethod()]
        public void F15016_GetstatementHeaderSlimDetailsTest()
        {
            int statementId = Convert.ToInt32(testContextInstance.DataRow["statementId"]);  // TODO: Initialize to an appropriate value

            F15016StatementHeaderData expected = null;
            F15016StatementHeaderData actual;

            actual = TerraScan.Helper.WSHelper.F15016_GetstatementHeaderSlimDetails(statementId);

            if (actual == null || actual.f15016StatementHeaderSlim.Count < 1)
            {
                Assert.Fail(" Record not found");
            }

        }
        #endregion

        #region F27007_Get Parcel Header SlimDetails

        /// <summary>
        ///A test for F27007_GetParcelHeaderSlimDetails (int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "27007_get", DataAccessMethod.Sequential), TestMethod()]
        public void F27007_GetParcelHeaderSlimDetailsTest()
        {
            int parcelId = Convert.ToInt32(testContextInstance.DataRow["parcelId"]); // TODO: Initialize to an appropriate value

            F27007ParcelHeaderSlimData expected = null;
            F27007ParcelHeaderSlimData actual;

            actual = TerraScan.Helper.WSHelper.F27007_GetParcelHeaderSlimDetails(parcelId);

            if (actual == null || actual.f27007ParcelHeaderSlim.Count < 1)
            {
                Assert.Fail(" Record not found");
            }

        }
        #endregion

        #region F27006_ParcelOwnership

        // Created By: Sudhag

        #region F27006_ListParcelOwnership

        // Created By: Sudhag

        /// <summary>
        ///A test for F27006_ListParcelOwnership (int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "F27006_ListParcelOwnership", DataAccessMethod.Sequential), TestMethod()]
        public void F27006_ListParcelOwnershipTest()
        {
            int parcelId = Convert.ToInt32(testContextInstance.DataRow["parcelId"]);  // TODO: Initialize to an appropriate value

            F27006ParcelOwnershipData expected = null;
            F27006ParcelOwnershipData actual;

            actual = TerraScan.Helper.WSHelper.F27006_ListParcelOwnership(parcelId);

            if (actual == null || actual.ListParcelOwnershipDataTable.Count < 1)
            {
                Assert.Fail(" Record not found");
            }

        }
        #endregion

        #region F27006_ListALLOwnerDetails

        // Created By: Sudhag

        /// <summary>
        ///A test for F27006_ListALLOwnerDetails (string, string, string, string, string)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "F27006_ListALLOwnerDetails", DataAccessMethod.Sequential), TestMethod()]
        public void F27006_ListALLOwnerDetailsTest()
        {
            string firstName = testContextInstance.DataRow["firstName"].ToString(); // TODO: Initialize to an appropriate value

            string lastName = testContextInstance.DataRow["lastName"].ToString(); // TODO: Initialize to an appropriate value

            string address1 = testContextInstance.DataRow["address1"].ToString(); // TODO: Initialize to an appropriate value

            string address2 = testContextInstance.DataRow["address2"].ToString(); // TODO: Initialize to an appropriate value

            string city = testContextInstance.DataRow["city"].ToString(); // TODO: Initialize to an appropriate value

            F27006ParcelOwnershipData expected = null;
            F27006ParcelOwnershipData actual;

            actual = TerraScan.Helper.WSHelper.F27006_ListALLOwnerDetails(firstName, lastName, address1, address2, city);

            if (actual == null || actual.ListAllOwnersDetailDataTable.Count < 1)
            {
                Assert.Fail(" Record not found");
            }

        }
        #endregion

        #region F27006_SaveParcelOwnership

        // Created By: Sudhag

        /// <summary>
        ///A test for F27006_SaveParcelOwnership (string, int, int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "F27006_SaveParcelOwnership", DataAccessMethod.Sequential), TestMethod()]
        public void F27006_SaveParcelOwnershipTest()
        {
            string parcelOwnership = testContextInstance.DataRow["parcelOwnership"].ToString();

            int parcelId = Convert.ToInt32(testContextInstance.DataRow["parcelId"]);

            int userId = Convert.ToInt32(testContextInstance.DataRow["UserId"]);
            bool isfuturePush = (bool)testContextInstance.DataRow["IsfuturePush"];

            TerraScan.Helper.WSHelper.F27006_SaveParcelOwnership(parcelOwnership, parcelId, userId,isfuturePush);


        }
        #endregion

        #region F27006_CheckOwnershipDetails

        // Created By: Sudhag

        /// <summary>
        ///A test for F27006_CheckOwnershipDetails (string)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "F27006_CheckOwnershipDetails", DataAccessMethod.Sequential), TestMethod()]
        public void F27006_CheckOwnershipDetailsTest()
        {
            string ownershipDetails = testContextInstance.DataRow["ownershipDetails"].ToString(); // TODO: Initialize to an appropriate value

            int expected = 0;
            int actual;

            actual = TerraScan.Helper.WSHelper.F27006_CheckOwnershipDetails(ownershipDetails);


        }
        #endregion

        #endregion

        #region F15015_StatementOwnership

        // Created By: Sudhag

        #region F15015_ListStatementOwnership

        // Created By: Sudhag

        /// <summary>
        ///A test for F15015_ListStatementOwnership (int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "F15015_ListStatementOwnership", DataAccessMethod.Sequential), TestMethod()]
        public void F15015_ListStatementOwnershipTest()
        {
            int statementId = Convert.ToInt32(testContextInstance.DataRow["statementId"]);  // TODO: Initialize to an appropriate value

            F15015StatementOwnershipData expected = null;
            F15015StatementOwnershipData actual;

            actual = TerraScan.Helper.WSHelper.F15015_ListStatementOwnership(statementId);

            if (actual == null || actual.ListStatementOwnershipDataTable.Count < 1)
            {
                Assert.Fail(" Record not found");
            }


        }
        #endregion

        #region F15015_SaveStatementOwnership

        // Created By: Sudhag

        /// <summary>
        ///A test for F15015_SaveStatementOwnership (int, string, int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "F15015_SaveStatementOwnership", DataAccessMethod.Sequential), TestMethod()]
        public void F15015_SaveStatementOwnershipTest()
        {
            int statementId = Convert.ToInt32(testContextInstance.DataRow["statementId"]);

            string statementOwner = testContextInstance.DataRow["statementOwner"].ToString();

            int userId = Convert.ToInt32(testContextInstance.DataRow["UserId"]);

            TerraScan.Helper.WSHelper.F15015_SaveStatementOwnership(statementId, statementOwner, userId);

        }

        #endregion

        #endregion

        #endregion

        # region Sprint 26

        # region Situs Management

        // Created By: Yavana Rani

        # region F25003_DeleteSitusManagement

        /// <summary>
        ///A test for F25003_DeleteSitusManagement (int, int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "F25003_Situs Management", DataAccessMethod.Sequential), TestMethod()]
        public void F25003_DeleteSitusManagementTest()
        {
            int situsId = (int)testContextInstance.DataRow["SitusDelID"];

            int userId = Convert.ToInt32(testContextInstance.DataRow["UserID"]);

            TerraScan.Helper.WSHelper.F25003_DeleteSitusManagement(situsId, userId);

        }

        # endregion

        # region F25003_ListSitusMangement

        /// <summary>
        ///A test for F25003_ListSitusMangement (int, int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "F25003_Situs Management", DataAccessMethod.Sequential), TestMethod()]
        public void F25003_ListSitusMangementTest()
        {
            int parcelId = (int)testContextInstance.DataRow["ParcelId"];

            int situsId = (int)testContextInstance.DataRow["SitusId"];

            F25003SitusManagementData actual;

            actual = TerraScan.Helper.WSHelper.F25003_ListSitusMangement(parcelId, situsId);

            if (actual == null || actual.ListSitusManagement.Rows.Count <= 0)
            {
                Assert.Fail("No Records Found");
            }
        }

        # endregion

        # region F25003_ListStreet

        /// <summary>
        ///A test for F25003_ListStreet ()
        ///</summary>
        //[DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "F25003_Situs Management", DataAccessMethod.Sequential), TestMethod()]
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "F25003_Situs Management", DataAccessMethod.Sequential), TestMethod()]

        public void F25003_ListStreetTest()
        {
            F25003SitusManagementData actual;

            actual = TerraScan.Helper.WSHelper.F25003_ListStreet();

            if (actual == null || actual.ListStreet.Rows.Count <= 0)
            {
                Assert.Fail("No Records Found");
            }
        }

        # endregion

        # region F25003_ListUnitTypeTest

        /// <summary>
        ///A test for F25003_ListUnitType ()
        ///</summary>
        [TestMethod()]
        public void F25003_ListUnitTypeTest()
        {
            F25003SitusManagementData actual;

            actual = TerraScan.Helper.WSHelper.F25003_ListUnitType();

            if (actual == null || actual.ListUnitType.Rows.Count <= 0)
            {
                Assert.Fail("No Unit Types Found");
            }
        }

        # endregion

        # region F25003_SaveListMangementTest

        /// <summary>
        ///A test for F25003_SaveListMangement (int, string, int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "F25003_Situs Management", DataAccessMethod.Sequential), TestMethod()]
        public void F25003_SaveListMangementTest()
        {
            int situsId = (int)testContextInstance.DataRow["SitusID"];

            string situsItems = (string)testContextInstance.DataRow["SitusItems"];

            int userId = Convert.ToInt32(testContextInstance.DataRow["UserID"]);
            bool isfuturePush = (bool)testContextInstance.DataRow["IsfuturePush"];

            int actual;

            actual = TerraScan.Helper.WSHelper.F25003_SaveListMangement(situsId, situsItems,isfuturePush, userId);

            if (actual == 0)
            {
                Assert.Fail("Record Not saved");
            }
        }
        # endregion

        # endregion

        # region F11035_Suspended Payments

        // Created By: Shireesha

        # region F1060_SuspendedPaymentSelection

        # region F1060_ListSuspendedPaymentTest

        /// <summary>
        ///A test for F1060_ListSuspendedPayment (string, string, string)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "F1060_SuspendedPaymentSelect", DataAccessMethod.Sequential), TestMethod()]
        public void F1060_ListSuspendedPaymentTest()
        {
           // string lastName = (string)testContextInstance.DataRow["LastName"];

           // string firstName = (string)testContextInstance.DataRow["FirstName"];

          //  string receiptDate = Convert.ToString(testContextInstance.DataRow["ReceiptDate"]);
            string searchDetail = (string)testContextInstance.DataRow["SearchDetail"];

            F1060SudpendedPaymentSelectionData actual;
            actual = TerraScan.Helper.WSHelper.F1060_ListSuspendedPayment(searchDetail);

           // actual = TerraScan.Helper.WSHelper.F1060_ListSuspendedPayment(lastName, firstName, receiptDate);

            if (actual == null || actual.ListSuspendedPayment.Rows.Count <= 0)
            {
                Assert.Fail("No Records Found");
            }
        }

        # endregion

        # endregion

        # region F11035_SuspendedPayments

        # region F15035_CheckSuspendedAccounts

        /// <summary>
        ///A test for F15035_CheckSuspendedAccounts ()
        ///</summary>
        [TestMethod()]
        public void F15035_CheckSuspendedAccountsTest()
        {
            int actual;

            actual = TerraScan.Helper.WSHelper.F15035_CheckSuspendedAccounts();

            if (actual == 0)
            {
                Assert.Fail("No records found");
            }
        }

        # endregion

        # region F15035_DeleteSuspendedPayment

        /// <summary>
        ///A test for F15035_DeleteSuspendedPayment (int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;Persist Security Info=True;User ID=sa;Password=100%sec", "F11020_RealPropertyReceipt", DataAccessMethod.Sequential), TestMethod()]
        public void F15035_DeleteSuspendedPaymentTest()
        {
            // Here they used the F1405_SaveMasterReceipt method for saving a receipt. 
            // Output of this method is ReceiptID.
            //So first creating a receipt and deleting that same receipt.

            int statementId = (int)testContextInstance.DataRow["StatementID"];

            int receiptSourceId = (int)testContextInstance.DataRow["ReceiptSourceID"];

            string otherParameterInfo = (string)testContextInstance.DataRow["OtherParameterInfo"];
            int? sharedPaymentId = (int)testContextInstance.DataRow["SharedPaymentId"];
            int actualsavereceipt;

            actualsavereceipt = TerraScan.Helper.WSHelper.F1405_SaveMasterReceipt(statementId, receiptSourceId, otherParameterInfo,sharedPaymentId);

            if (actualsavereceipt == 0)
            {
                Assert.Fail("Receipt not saved");
            }

            int userId = (int)testContextInstance.DataRow["UserID"];

            TerraScan.Helper.WSHelper.F15035_DeleteSuspendedPayment(actualsavereceipt, userId);

        }

        # endregion

        # region F15035SuspendedPayments

        // This is get method but the name was given wrongly in all layers

        /// <summary>
        ///A test for F15035SuspendedPayments (int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;Persist Security Info=True;User ID=sa;Password=100%sec", "F11035_SuspendedPayment", DataAccessMethod.Sequential), TestMethod()]
        public void F15035SuspendedPaymentsTest()
        {
            int receiptId = (int)testContextInstance.DataRow["ReceiptID"];

            F15035SuspendedPaymentsData actual;

            actual = TerraScan.Helper.WSHelper.F15035SuspendedPayments(receiptId);

            if (actual == null || actual.ListReceiptPaymentItem.Rows.Count < 1)
            {
                Assert.Fail("No record Found");
            }
        }

        # endregion

        # endregion

        # endregion

        # region F2000_ParcelStatus

        // Created by: Arun .t.

        #region F2000_List ParcelStatus

        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "F2000_ Parcel Status", DataAccessMethod.Sequential), TestMethod()]
        public void F2000_ListParcelStatusTest()
        {
            int parcelId = Convert.ToInt32(testContextInstance.DataRow["parcelId"]);

            F2000ParcelStatusData.ListParcelStatusDataTableDataTable actual;

            actual = TerraScan.Helper.WSHelper.F2000_ListParcelStatus(parcelId);

            if (actual == null || actual.Rows.Count < 1)
            {
                Assert.Fail(" Record not found");
            }

        }
        #endregion F2000_List ParcelStatus

        #region F2000_Update Parcel Status

        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "F2000_ Parcel Status", DataAccessMethod.Sequential), TestMethod()]
        public void F2000_UpdateParcelStatusTest()
        {
            int parcelId = Convert.ToInt32(testContextInstance.DataRow["parcelId"]);

            string description = (string)testContextInstance.DataRow["description"];

            string ParcelType = (string)testContextInstance.DataRow["ParcelType"];

            // int isActive = Convert.ToInt32(testContextInstance.DataRow["isActive"]);

            int isExempt = Convert.ToInt32(testContextInstance.DataRow["isExempt"]);

            int isOwnerPrimary = Convert.ToInt32(testContextInstance.DataRow["isOwnerPrimary"]);

            int userId = (int)testContextInstance.DataRow["UserID"];

            int actual;

            actual = TerraScan.Helper.WSHelper.F2000_UpdateParcelStatus(parcelId, description, ParcelType, isExempt, isOwnerPrimary, userId);

        }

        #endregion F2000_Update Parcel Status

        #region F2000_Delete Parcel Status

        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "F2000_ Parcel Status", DataAccessMethod.Sequential), TestMethod()]
        public void F2000_DeleteParcelStatusTest()
        {
            int parcelId = Convert.ToInt32(testContextInstance.DataRow["DelParcelID"]);

            int userId = (int)testContextInstance.DataRow["UserId"];

            TerraScan.Helper.WSHelper.F2000_DeleteParcelStatus(parcelId, userId);

        }
        #endregion F2000_Delete Parcel Status


        # endregion

        # region F25011_StreetListManagement

        //Created By: Aroon .t.

        # region F25011_ListMasterStreetList

        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;Integrated Security=True", "F2000_ Parcel Status", DataAccessMethod.Sequential), TestMethod()]

        public void F25011_ListMasterStreetListTest()
        {

            int streetId = Convert.ToInt32(testContextInstance.DataRow["streetId"]);

            string streetName = (string)testContextInstance.DataRow["streetName"];

            string city = (string)testContextInstance.DataRow["city"];

            F25011StreetListManagementData actual;

            actual = TerraScan.Helper.WSHelper.F25011_ListMasterStreetList(streetId, streetName, city);

            if (actual == null || actual.ListStreetManagement.Rows.Count < 1)
            {
                Assert.Fail(" Record not found");
            }

        }

        #endregion F25011_ListMasterStreetList

        # region F25011_ListStreetCityDirectionalSuffixDetails

        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "F2000_ Parcel Status", DataAccessMethod.Sequential), TestMethod()]

        public void F25011_ListStreetCityDirectionalSuffixDetailsTest()
        {
            // F25011StreetListManagementData expected = null;
            F25011StreetListManagementData actual;

            actual = TerraScan.Helper.WSHelper.F25011_ListStreetCityDirectionalSuffixDetails();

        }

        #endregion F25011_ListStreetCityDirectionalSuffixDetails

        # region F25011_SaveStreetListManagement

        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "F2000_ Parcel Status", DataAccessMethod.Sequential), TestMethod()]

        public void F25011_SaveStreetListManagementTest()
        {
            int streetId = Convert.ToInt32(testContextInstance.DataRow["streetId"]);

            string streetListMgmt = (string)testContextInstance.DataRow["streetListMgmt"];

            int userId = (int)testContextInstance.DataRow["UserID"];

            int actual;

            actual = TerraScan.Helper.WSHelper.F25011_SaveStreetListManagement(streetId, streetListMgmt, userId);

            if (actual == 0)
            {
                Assert.Fail("Record not saved properly");
            }

        }

        # endregion F25011_SaveStreetListManagement

        #endregion F25011_StreetListManagement

        # region F16030_SpecialDistrictDefinition

        // Created by:  Arun Senthil

        # region F16030_ListDistrictDefinitionType()

        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "F2000_ Parcel Status", DataAccessMethod.Sequential), TestMethod()]

        public void F16030_ListDistrictDefinitionTypeTest()
        {
            //F1030SpecialDistrictDefinitionData expected = null;
            F1030SpecialDistrictDefinitionData actual;

            actual = TerraScan.Helper.WSHelper.F16030_ListDistrictDefinitionType();


        }
        # endregion F16030_ListDistrictDefinitionType()

        # region F16030_GetDistrictDefinitionDetails

        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "F2000_ Parcel Status", DataAccessMethod.Sequential), TestMethod()]
        public void F1030_GetDistrictDefinitionDetailsTest1()
        {
            int districtNo = Convert.ToInt32(testContextInstance.DataRow["districtNo"]);

            F1030SpecialDistrictDefinitionData actual;

            actual = TerraScan.Helper.WSHelper.F1030_GetDistrictDefinitionDetails(districtNo);

            if (actual == null || actual.GetDistrictDefinitionDetails.Rows.Count < 1)
            {
                Assert.Fail(" Record not found");
            }
        }

        # endregion F16030_GetDistrictDefinitionDetails

        #region F16030_DeleteDistrictDefinition

        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "F2000_ Parcel Status", DataAccessMethod.Sequential), TestMethod()]
        public void F1030_DeleteDistrictDefinitionTest1()
        {
            int specialDistrictID = (int)testContextInstance.DataRow["specialDistrictID"];

            int userId = (int)testContextInstance.DataRow["UserID"];

            int actual;

            actual = TerraScan.Helper.WSHelper.F1030_DeleteDistrictDefinition(specialDistrictID, userId);

            //TerraScan.Helper.WSHelper.F1030_DeleteDistrictDefinition(specialDistrictID);
        }

        #endregion F16030_DeleteDistrictDefinition

        #endregion F16030_SpecialDistrictDefinition

        # region F15110_ReceiptActions

        //CREATED BY :- KALYANI.

        # region F15110_GetReceiptActions

        /// <summary>
        ///A test for F15110_GetReceiptActions (int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "15110_ReceiptActions", DataAccessMethod.Sequential), TestMethod()]
        public void F15110_GetReceiptActionsTest()
        {
            int receiptId = (int)testContextInstance.DataRow["receiptId"];

            F15110ReceiptActionsData expected = null;
            F15110ReceiptActionsData actual;

            actual = TerraScan.Helper.WSHelper.F15110_GetReceiptActions(receiptId);

            if (actual == null || actual.GetReceiptAction.Rows.Count < 1)
            {
                Assert.Fail("No records found");
            }

        }
        # endregion

        # endregion

        #region  F1555_ReceiptDetails

        //Created By:- Kalyani

        #region F1555_GetReceiptDetails

        /// <summary>
        ///A test for F1555_GetReceiptDetails (int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "1555_ReceiptDetails", DataAccessMethod.Sequential), TestMethod()]
        public void F1555_GetReceiptDetailsTest()
        {
            int receiptId = (int)testContextInstance.DataRow["receiptId"];

            F1555_ReceiptDetailsData expected = null;
            F1555_ReceiptDetailsData actual;

            actual = TerraScan.Helper.WSHelper.F1555_GetReceiptDetails(receiptId);

            if (actual == null || actual.GetReceiptDetails.Count < 1)
            {
                Assert.Fail("No Records found");
            }
        }
        #endregion

        #endregion


        # endregion Sprint 26

        # region Sprint 27

        #region F8058_ResourcesConfig

        // Created By: Sudhag

        #region F8058_ListResourcesConfig

        // Created By: Sudhag

        /// <summary>
        ///A test for F8058_ListResourcesConfigDetails ()
        ///</summary>
        [TestMethod()]
        public void F8058_ListResourcesConfigDetailsTest()
        {
            F8058ResourcesConfigData expected = null;
            F8058ResourcesConfigData actual;

            actual = TerraScan.Helper.WSHelper.F8058_ListResourcesConfigDetails();

            if (actual == null || actual.F8058ListResourceConfigDetails.Count < 1)
            {
                Assert.Fail(" Record not found");
            }
        }
        # endregion

        #region F8058_DeleteResourcesConfig

        // Created By: Sudhag

        /// <summary>
        ///A test for F8058_DeleteResourcesConfigDetails (int, int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "F8058_DeleteResourcesConfig", DataAccessMethod.Sequential), TestMethod()]
        public void F8058_DeleteResourcesConfigDetailsTest()
        {
            int equipmentId = Convert.ToInt32(testContextInstance.DataRow["equipmentId"]);

            int userId = (int)testContextInstance.DataRow["UserID"];

            TerraScan.Helper.WSHelper.F8058_DeleteResourcesConfigDetails(equipmentId, userId);
        }
        #endregion

        #region F8058_InsertResourcesConfig

        // Created By: Sudhag

        /// <summary>
        ///A test for F8058_InsertResourcesConfigDetails (int, string, int, int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "F8058_InsertResourcesConfig", DataAccessMethod.Sequential), TestMethod()]
        public void F8058_InsertResourcesConfigDetailsTest()
        {
            int equipmentId = Convert.ToInt32(testContextInstance.DataRow["equipmentId"]);

            string equiptResource = testContextInstance.DataRow["equiptResource"].ToString();

            int applicationId = Convert.ToInt32(testContextInstance.DataRow["applicationId"]);

            int userId = (int)testContextInstance.DataRow["UserID"];

            int expected = 0;
            int actual;

            actual = TerraScan.Helper.WSHelper.F8058_InsertResourcesConfigDetails(equipmentId, equiptResource, applicationId, userId);

        }
        # endregion

        #endregion

        #region F8062_ComponentsConfiguration

        // Created By: Sudhag

        #region F8062_ListComponentsConfiguration

        // Created By: Sudhag

        /// <summary>
        ///A test for F8062_ListComponentsConfiguration (int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "F8062_ListComponentsConfiguration", DataAccessMethod.Sequential), TestMethod()]
        public void F8062_ListComponentsConfigurationTest()
        {
            int applicationId = Convert.ToInt32(testContextInstance.DataRow["applicationId"]); // TODO: Initialize to an appropriate value

            F8062ComponentsConfigData expected = null;
            F8062ComponentsConfigData actual;

            actual = TerraScan.Helper.WSHelper.F8062_ListComponentsConfiguration(applicationId);

            if (actual == null || actual.ListComponentsConfiguration.Count < 1)
            {
                Assert.Fail(" Record not found");
            }

        }
        # endregion

        #region F8062_ListFeatureClass

        // Created By: Sudhag

        /// <summary>
        ///A test for F8062_ListFeatureClass (int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "F8062_ListFeatureClass", DataAccessMethod.Sequential), TestMethod()]
        public void F8062_ListFeatureClassTest()
        {
            int application = Convert.ToInt32(testContextInstance.DataRow["application"]); // TODO: Initialize to an appropriate value

            F8062ComponentsConfigData expected = null;
            F8062ComponentsConfigData actual;

            actual = TerraScan.Helper.WSHelper.F8062_ListFeatureClass(application);

            if (actual == null || actual.ListFeatureClass.Count < 1)
            {
                Assert.Fail(" Record not found");
            }

        }
        # endregion

        #region F8062_DeleteComponentsConfiguration

        // Created By: Sudhag

        /// <summary>
        ///A test for F8062_DeleteComponentsConfiguration (int, int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "F8062_DeleteComponentsConfiguration", DataAccessMethod.Sequential), TestMethod()]
        public void F8062_DeleteComponentsConfigurationTest()
        {
            int componentId = Convert.ToInt32(testContextInstance.DataRow["componentId"]);

            int userId = (int)testContextInstance.DataRow["UserID"];

            TerraScan.Helper.WSHelper.F8062_DeleteComponentsConfiguration(componentId, userId);


        }
        # endregion

        #region F8062_SaveComponentsConfiguration

        // Created By: Sudhag

        /// <summary>
        ///A test for F8062_SaveComponentsConfiguration (string)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "F8062_SaveComponentsConfiguration", DataAccessMethod.Sequential), TestMethod()]
        public void F8062_SaveComponentsConfigurationTest()
        {
            string componentsConfig = testContextInstance.DataRow["componentsConfig"].ToString();

            int userId = (int)testContextInstance.DataRow["UserID"];

            TerraScan.Helper.WSHelper.F8062_SaveComponentsConfiguration(componentsConfig, userId);

        }
        # endregion

        #endregion

        #region F8060_PartsConfig

        // Created By: Sudhag

        #region F8060_ListPartsConfig

        // Created By: Sudhag

        /// <summary>
        ///A test for F8060_ListPartsConfig (int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "F8060_ListPartsConfig", DataAccessMethod.Sequential), TestMethod()]
        public void F8060_ListPartsConfigTest()
        {
            int componentId = Convert.ToInt32(testContextInstance.DataRow["componentId"]); // TODO: Initialize to an appropriate value

            F8060PartsConfigData expected = null;
            F8060PartsConfigData actual;

            actual = TerraScan.Helper.WSHelper.F8060_ListPartsConfig(componentId);

            if (actual == null || actual.ListPartsConfiguration.Count < 1)
            {
                Assert.Fail(" Record not found");
            }
        }
        # endregion

        #region F8060_ListComponents

        // Created By: Sudhag

        /// <summary>
        ///A test for F8060_ListComponents ()
        ///</summary>
        [TestMethod()]
        public void F8060_ListComponentsTest()
        {
            F8060PartsConfigData expected = null;
            F8060PartsConfigData actual;

            actual = TerraScan.Helper.WSHelper.F8060_ListComponents();

            if (actual == null || actual.ListComponents.Count < 1)
            {
                Assert.Fail(" Record not found");
            }


        }
        # endregion

        #region F8060_DeletePartsConfiguration

        // Created By: Sudhag


        /// <summary>
        ///A test for F8060_DeletePartsConfiguration (int, int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "F8060_DeletePartsConfiguration", DataAccessMethod.Sequential), TestMethod()]
        public void F8060_DeletePartsConfigurationTest()
        {
            int partId = Convert.ToInt32(testContextInstance.DataRow["partId"]);

            int userId = (int)testContextInstance.DataRow["UserID"];

            TerraScan.Helper.WSHelper.F8060_DeletePartsConfiguration(partId, userId);

        }
        # endregion

        #region F8060_SavePartsConfiguration

        // Created By: Sudhag

        /// <summary>
        ///A test for F8060_SavePartsConfiguration (int, string, int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "F8060_SavePartsConfiguration", DataAccessMethod.Sequential), TestMethod()]
        public void F8060_SavePartsConfigurationTest()
        {
            int partId = Convert.ToInt32(testContextInstance.DataRow["partId"]);

            string partsConfig = testContextInstance.DataRow["partsConfig"].ToString();

            int userId = (int)testContextInstance.DataRow["UserID"];

            TerraScan.Helper.WSHelper.F8060_SavePartsConfiguration(partId, partsConfig, userId);


        }
        # endregion

        # endregion

        # region F25009_LegalManagement

        //CREATED BY:- S.SATHIYAN.

        # region F25009_SaveLegalManagement

        /// <summary>
        ///A test for F25009_SaveLegalManagement (int, string, int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "25009_LegalManagement", DataAccessMethod.Sequential), TestMethod()]
        public void F25009_SaveLegalManagementTest()
        {
            int legalId = (int)testContextInstance.DataRow["legalId"];

            string legalItems = (string)testContextInstance.DataRow["legalItems"];

            int userId = (int)testContextInstance.DataRow["UserID"];
            bool isfuturePush = (bool)testContextInstance.DataRow["IsfuturePush"];

            int actual;

            actual = TerraScan.Helper.WSHelper.F25009_SaveLegalManagement(legalId, legalItems,isfuturePush, userId);

            if (actual == 0)
            {
                Assert.Fail(" No records Found");
            }
        }

        # endregion

        # region F25009_GetLegalManagement
        /// <summary>
        ///A test for F25009_GetLegalManagement (int, int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "25009_LegalManagement", DataAccessMethod.Sequential), TestMethod()]
        public void F25009_GetLegalManagementTest()
        {
            int parcelId = (int)testContextInstance.DataRow["parcelId"];

            int userId = (int)testContextInstance.DataRow["UserID"];

            F25009LegalManagementData actual;

            actual = TerraScan.Helper.WSHelper.F25009_GetLegalManagement(parcelId, userId);

            if (actual == null || actual.GetLegalManagement.Rows.Count < 1)
            {
                Assert.Fail(" No records Found");
            }
        }

        # endregion

        # region F25009_ListSubdivision

        /// <summary>
        ///A test for F25009_ListSubdivision ()
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "25009_LegalManagement", DataAccessMethod.Sequential), TestMethod()]
        public void F25009_ListSubdivisionTest()
        {
            F25009LegalManagementData expected = null;
            F25009LegalManagementData actual;

            actual = TerraScan.Helper.WSHelper.F25009_ListSubdivision();

            if (actual == null || actual.ListSubdivision.Rows.Count < 1)
            {
                Assert.Fail(" No records Found");
            }
        }
        # endregion

        # endregion

        # region F9033_QueryEngine

        //CREATED BY :- S.SATHIYAN

        # region F9033_ListQuerySnapShot

        /// <summary>
        ///A test for F9033_ListQuerySnapShot (int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "F9033_QueryEngine", DataAccessMethod.Sequential), TestMethod()]
        public void F9033_ListQuerySnapShotTest1()
        {
            int formId = (int)testContextInstance.DataRow["formId"];
            F9033QueryEngineData expected = null;
            F9033QueryEngineData actual;


            actual = TerraScan.Helper.WSHelper.F9033_ListQuerySnapShot(formId);

            if (actual == null || actual.ListQuerySnapShot.Rows.Count < 0)
            {
                Assert.Fail(" No records Found");
            }
        }

        # endregion

        # region F9033_ListQueryLayout

        /// <summary>
        ///A test for F9033_ListQueryLayout (int, int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "F9033_QueryEngine", DataAccessMethod.Sequential), TestMethod()]
        public void F9033_ListQueryLayoutTest()
        {
            int queryViewId = (int)testContextInstance.DataRow["queryViewId"];

            int userId = (int)testContextInstance.DataRow["userId"];

            F9033QueryEngineData expected = null;
            F9033QueryEngineData actual;

            actual = TerraScan.Helper.WSHelper.F9033_ListQueryLayout(queryViewId, userId);

            if (actual == null || actual.ListQueryLayout.Rows.Count < 1)
            {
                Assert.Fail("No Records found");
            }
        }

        # endregion

        # region F9033_GetSnapShotRecordSet

        /// <summary>
        ///A test for F9033_GetSnapShotRecordSet (int, int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "F9033_QueryEngine", DataAccessMethod.Sequential), TestMethod()]
        public void F9033_GetSnapShotRecordSetTest()
        {
            int snapShotId = (int)testContextInstance.DataRow["snapShotId"];

            int queryViewId = (int)testContextInstance.DataRow["queryViewId"];

            DataSet expected = null;
            DataSet actual;

            actual = TerraScan.Helper.WSHelper.F9033_GetSnapShotRecordSet(snapShotId, queryViewId);

            if (actual == null || actual.Tables.Count < 1 || actual.Tables[0].Rows.Count < 1)
            {
                Assert.Fail("No Records found");
            }
        }
        # endregion

        # region F9033_InsertSnapShotItems

        /// <summary>
        ///A test for F9033_InsertSnapShotItems (int?, string)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "F9033_QueryEngine", DataAccessMethod.Sequential), TestMethod()]
        public void F9033_InsertSnapShotItemsTest()
        {
            int? userId = (int?)testContextInstance.DataRow["userId"];

            string systemSnapShotXML = (string)testContextInstance.DataRow["systemSnapShotXML"];

            int expected = 0;
            int actual;

            actual = TerraScan.Helper.WSHelper.F9033_InsertSnapShotItems(userId, systemSnapShotXML);

            if (actual == 0)
            {
                Assert.Fail("No Records found");
            }
        }
        # endregion

        # region F9033_GetSystemSnapShotCount

        /// <summary>
        ///A test for F9033_GetSystemSnapShotCount (int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "F9033_QueryEngine", DataAccessMethod.Sequential), TestMethod()]
        public void F9033_GetSystemSnapShotCountTest()
        {
            int systemSnapShotId = (int)testContextInstance.DataRow["systemSnapShotId"];

            //F9033QueryEngineData expected = null;
            F9033QueryEngineData actual;

            actual = TerraScan.Helper.WSHelper.F9033_GetSystemSnapShotCount(systemSnapShotId);

            if (actual == null || actual.GetSystemSnapshotCount.Rows.Count < 1)
            {
                Assert.Fail("No Records found");
            }
        }

        # endregion

        # region F9033_GetSystemSnapShotRecordSet

        /// <summary>
        ///A test for F9033_GetSystemSnapShotRecordSet (int, int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "F9033_QueryEngine", DataAccessMethod.Sequential), TestMethod()]
        public void F9033_GetSystemSnapShotRecordSetTest()
        {
            int systemSnapShotId = (int)testContextInstance.DataRow["systemSnapShotId"];

            int masterFormNO = (int)testContextInstance.DataRow["masterFormNO"];

            string filterValue = null;
            if (testContextInstance.DataRow["Filter"].ToString() != string.Empty)
            {
                filterValue = (string)testContextInstance.DataRow["Filter"];
            }

            string sortValue = null;
            if (testContextInstance.DataRow["Summary"].ToString() != string.Empty)
            {
                sortValue = (string)testContextInstance.DataRow["Summary"];
            }

            string summaryValue = null;
            if (testContextInstance.DataRow["Sort"].ToString() != string.Empty)
            {
                summaryValue = (string)testContextInstance.DataRow["Sort"];
            }

            string columnValue = null;
            if (testContextInstance.DataRow["CalculatedColumn"].ToString() != string.Empty)
            {
                columnValue = (string)testContextInstance.DataRow["CalculatedColumn"];
            }

            string keyCollection = null;
            if (testContextInstance.DataRow["KeyCollection"].ToString() != string.Empty)
            {
                keyCollection = (string)testContextInstance.DataRow["KeyCollection"];
            }

            int isFilter = (int)testContextInstance.DataRow["IsFilter"];


            DataSet expected = null;
            DataSet actual;

            actual = TerraScan.Helper.WSHelper.F9033_GetSystemSnapShotRecordSet(systemSnapShotId, masterFormNO, filterValue, sortValue, summaryValue, columnValue, keyCollection, isFilter);

            if (actual == null || actual.Tables.Count < 1 || actual.Tables[0].Rows.Count < 1)
            {
                Assert.Fail("No Records found");
            }
        }
        # endregion

        # endregion

        # region F9040_SnapshotUtility

        //CREATED BY :- S.SATHIYAN

        # region F9040_SaveSnapShot

        /// <summary>
        ///A test for F9040_SaveSnapShot (int, string, string, int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "9040_snapshot", DataAccessMethod.Sequential), TestMethod()]
        public void F9040_SaveSnapShotTest()
        {
            int snapShotId = (int)testContextInstance.DataRow["snapShotId"];

            string snapShotXML = (string)testContextInstance.DataRow["snapShotXML"];

            string snapshotItemsXML = (string)testContextInstance.DataRow["snapshotItemsXML"];

            int userId = (int)testContextInstance.DataRow["UserID"];

            string filterValue = (string)testContextInstance.DataRow["Filter"];

            string pinnedValue = (string)testContextInstance.DataRow["Pinned"];
            int parentSnapShotID = (int)testContextInstance.DataRow["ParentSnapShotID"];
            int actual;

            actual = TerraScan.Helper.WSHelper.F9040_SaveSnapShot(snapShotId, snapShotXML, snapshotItemsXML, filterValue, pinnedValue, userId,parentSnapShotID);

            if (actual == 0)
            {
                Assert.Fail("No Records Found");
            }
        }

        # endregion

        #region F9040_ListSnapShots

        /// <summary>
        ///A test for F9040_ListSnapShots (int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "9040_snapshot", DataAccessMethod.Sequential), TestMethod()]
        public void F9040_ListSnapShotsTest()
        {
            int formId = (int)testContextInstance.DataRow["formId"];

            F9040SnapShotUtilityData actual;

            actual = TerraScan.Helper.WSHelper.F9040_ListSnapShots(formId);

            if (actual == null || actual.ListSnapShot.Rows.Count <= 0)
            {
                Assert.Fail("No Records Found");
            }
        }
        #endregion

        # region F9040_DeleteSnapShot

        /// <summary>
        ///A test for F9040_DeleteSnapShot (int, int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "9040_snapshot", DataAccessMethod.Sequential), TestMethod()]
        public void F9040_DeleteSnapShotTest()
        {
            F9040_SaveSnapShotTest();

            int snapshotId = (int)testContextInstance.DataRow["snapshotId"];

            int userId = (int)testContextInstance.DataRow["UserID"];

            TerraScan.Helper.WSHelper.F9040_DeleteSnapShot(snapshotId, userId);

        }

        # endregion

        # endregion

        # endregion

        # region Sprint 28

        #region F36001_Marshal&SwiftCommercial

        //CREATED BY :- S.SATHIYAN

        #region F36001_SaveMarshalAndSwiftCommercial

        /// <summary>
        ///A test for F36001_SaveMarshalAndSwiftCommercial (int, string, string, string, int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "36001_M&S Commecial", DataAccessMethod.Sequential), TestMethod()]
        public void F36001_SaveMarshalAndSwiftCommercialTest()
        {
            int valueSliceId = (int)testContextInstance.DataRow["valueSliceId"];

            string estimateDetails = (string)testContextInstance.DataRow["estimateDetails"];

            string occupancyDetails = (string)testContextInstance.DataRow["occupancyDetails"];

            string componentDetails = (string)testContextInstance.DataRow["componentDetails"];

            string depreciationXml = (string)testContextInstance.DataRow["depreciationXml"];

            int userId = (int)testContextInstance.DataRow["UserID"];

            int actual = 0;

            actual = TerraScan.Helper.WSHelper.F36001_SaveMarshalAndSwiftCommercial(valueSliceId, estimateDetails, occupancyDetails, componentDetails, depreciationXml, userId);

            if (actual == 0)
            {
                Assert.Fail(" No records Found");
            }
        }
        # endregion

        #region F36001_GetMarshalAndSwiftCommercial

        /// <summary>
        ///A test for F36001_GetMarshalAndSwiftCommercial (int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "36001_M&S Commecial", DataAccessMethod.Sequential), TestMethod()]
        public void F36001_GetMarshalAndSwiftCommercialTest()
        {
            //F36001_SaveMarshalAndSwiftCommercialTest();

            int valueSliceId = (int)testContextInstance.DataRow["valueSliceId"];

            F36001MarshalAndSwiftCommercialData actual;

            actual = TerraScan.Helper.WSHelper.F36001_GetMarshalAndSwiftCommercial(valueSliceId);

            if (actual == null || actual.Tables.Count == 0)
            {
                Assert.Fail(" No records Found");
            }
        }

        # endregion

        # endregion

        #region F3501_F3502_3503_NeighborhoodParcelLocks

        //Created By: Kalyani

        #region F3501_F3502_3503_ListNeighborhoodParcelLocksTest

        /// <summary>
        ///A test for ListNeighborhoodParcelLocks (int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "3501_NeighborhoodParcelLocks", DataAccessMethod.Sequential), TestMethod()]
        public void ListNeighborhoodParcelLocksTest()
        {
            int nbhdID = (int)testContextInstance.DataRow["nbhdID"];

            F3501NeighborhoodParcelLocksData actual;

            actual = TerraScan.Helper.WSHelper.ListNeighborhoodParcelLocks(nbhdID);

            if (actual == null || actual.f35100NeighborhoodParcelLocks.Rows.Count < 1)
            {
                Assert.Fail("No Records Found");
            }
        }

        #endregion

        #endregion

        #region F35100_NeighborhoodHeader

        //Created By: Kalyani

        #region F35100_GetNeighborhoodHeaderDetailsTest

        /// <summary>
        ///A test for GetNeighborhoodHeaderDetails (int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "35100_NeighborhoodHeader", DataAccessMethod.Sequential), TestMethod()]
        public void GetNeighborhoodHeaderDetailsTest()
        {
            int neighborId = (int)testContextInstance.DataRow["neighborId"];

            F35100NeighborhoodHeaderData actual;

            actual = TerraScan.Helper.WSHelper.GetNeighborhoodHeaderDetails(neighborId);

            if (actual == null || actual.f35100NeighborhoodHeaderDataTable.Rows.Count < 1)
            {
                Assert.Fail("No Records Found");
            }

        }
        #endregion

        #region F35100_GetParentNeighborhoodHeaderDetailsTest

        /// <summary>
        ///A test for GetParentNeighborhoodHeaderDetails (int, int, int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "35100_NeighborhoodHeader", DataAccessMethod.Sequential), TestMethod()]
        public void GetParentNeighborhoodHeaderDetailsTest()
        {
            int rollyear = (int)testContextInstance.DataRow["rollyear"];

            int type = (int)testContextInstance.DataRow["type"];

            int parentNeighborhood = (int)testContextInstance.DataRow["parentNeighborhood"];

            F35100NeighborhoodHeaderData actual;

            actual = TerraScan.Helper.WSHelper.GetParentNeighborhoodHeaderDetails(rollyear, type, parentNeighborhood);

            if (actual == null || actual.f35100GrpNeighborhood.Rows.Count < 1 || actual.f35100pclstNeighborhoodDataTable.Rows.Count < 1)
            {
                Assert.Fail("No Record Found");
            }
        }
        #endregion

        #endregion

        #region F35102_NeighborhoodCfg

        //Created By: Kalyani

        #region F35102_GetNeighborhoodCfgDetailsTest

        /// <summary>
        ///A test for GetNeighborhoodCfgDetails (int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "35102_NeighborhoodCfg", DataAccessMethod.Sequential), TestMethod()]
        public void GetNeighborhoodCfgDetailsTest()
        {
            int nbhdID = (int)testContextInstance.DataRow["nbhdID"];

            F35102NeighborhoodCfgData expected = null;
            F35102NeighborhoodCfgData actual;

            actual = TerraScan.Helper.WSHelper.GetNeighborhoodCfgDetails(nbhdID);

            if (actual == null || actual.ListNeighborhoodConfigurationTable.Rows.Count < 1)
            {
                Assert.Fail("No Records Found");

            }

        }

        #endregion

        #endregion

        #region GetParcelTypeDetailsTest

        /// <summary>
        ///A test for GetParcelTypeDetails (int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "F2004_GetparcelDetails", DataAccessMethod.Sequential), TestMethod()]
        public void GetParcelTypeDetailsTest()
        {
            int eventId = Convert.ToInt32(testContextInstance.DataRow["ParcelID"]); // TODO: Initialize to an appropriate value

            F2004ParcelCopyData expected = null;
            F2004ParcelCopyData actual;

            actual = TerraScan.Helper.WSHelper.GetParcelTypeDetails(eventId);

            if (actual == null || actual.f2004ListParcelType.Count < 1)
            {
                Assert.Fail(" Record not found");
            }
        }

        #endregion GetParcelTypeDetailsTest

        #region CreateNewParcelCopyTest1

        /// <summary>
        ///A test for CreateNewParcelCopy (int, int, int, int, int, int, string, int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "F2004_CreateNewParcel", DataAccessMethod.Sequential), TestMethod()]
        public void CreateNewParcelCopyTest1()
        {
            int parcelId = Convert.ToInt32(testContextInstance.DataRow["ParcelID"]); // TODO: Initialize to an appropriate value

            int parcelTypeId = Convert.ToInt32(testContextInstance.DataRow["ParcelTypeID"]); // TODO: Initialize to an appropriate value

            int copyAllObjects = Convert.ToInt32(testContextInstance.DataRow["CopyAllObjects"]); // TODO: Initialize to an appropriate value

            int copyAllSlices = Convert.ToInt32(testContextInstance.DataRow["CopyAllSlices"]); // TODO: Initialize to an appropriate value

            int copyAttachments = Convert.ToInt32(testContextInstance.DataRow["CopyAttachments"]); // TODO: Initialize to an appropriate value

            int copyComments = Convert.ToInt32(testContextInstance.DataRow["CopyComments"]); // TODO: Initialize to an appropriate value

            string parcelElements = testContextInstance.DataRow["ParcelElements"].ToString(); // TODO: Initialize to an appropriate value

            int userId = Convert.ToInt32(testContextInstance.DataRow["UserID"]); // TODO: Initialize to an appropriate value

            int expected = 0;
            int actual;

            actual = TerraScan.Helper.WSHelper.CreateNewParcelCopy(parcelId, parcelTypeId, copyAllObjects, copyAllSlices, copyAttachments, copyComments, parcelElements, userId);

            if (actual == 0)
            {
                Assert.Fail(" Record not found");
            }
        }

        #endregion CreateNewParcelCopyTest1

        #region GetParcelAttachmentDetailsTest

        /// <summary>
        ///A test for GetParcelAttachmentDetails (int, int, int, int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "F2004_GetAttachmentDetails", DataAccessMethod.Sequential), TestMethod()]
        public void GetParcelAttachmentDetailsTest()
        {
            int oldParcelID = Convert.ToInt32(testContextInstance.DataRow["OldParcelID"]); // TODO: Initialize to an appropriate value

            int newParcelID = Convert.ToInt32(testContextInstance.DataRow["NewParcelID"]); // TODO: Initialize to an appropriate value

            int userID = Convert.ToInt32(testContextInstance.DataRow["UserID"]); // TODO: Initialize to an appropriate value

            int moduleID = Convert.ToInt32(testContextInstance.DataRow["ModuleID"]); // TODO: Initialize to an appropriate value

            F2004ParcelCopyData expected = null;
            F2004ParcelCopyData actual;

            actual = TerraScan.Helper.WSHelper.GetParcelAttachmentDetails(oldParcelID, newParcelID, userID, moduleID);

            if (actual == null || actual.getParcelAttachmentTable.Count < 1)
            {
                Assert.Fail(" Record not found");
            }
        }

        #endregion GetParcelAttachmentDetailsTest

        # endregion

        # region Sprint 29

        # region Special District Assessment

        # region F1031_CheckSpecialDistrictStatementOrOwnerTest

        /// <summary>
        ///A test for F1031_CheckSpecialDistrictStatementOrOwner (string, bool)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "F16031_DistrictAssessment", DataAccessMethod.Sequential), TestMethod()]
        public void F1031_CheckSpecialDistrictStatementOrOwnerTest()
        {
            string districtProperty = (string)testContextInstance.DataRow["DistrictProperty"];

            bool statementFlag = (bool)testContextInstance.DataRow["StatementFlag"];

            int actual;

            actual = TerraScan.Helper.WSHelper.F1031_CheckSpecialDistrictStatementOrOwner(districtProperty, statementFlag);

            if (actual == 0)
            {
                Assert.Fail("Record not found");
            }
        }

        # endregion

        # endregion

        ////# region F36010_MiscImprovementCatalog

        ////// Created By: Shireesha

        ////# region F36010_CheckMiscImprovementCatalog

        /////// <summary>
        ///////A test for F36010_CheckMiscImprovementCatalog (int, string, int)
        ///////</summary>
        ////[DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;Integrated Security=True", "36010_MiscImprovementsCatalog", DataAccessMethod.Sequential), TestMethod()]
        ////public void F36010_CheckMiscImprovementCatalogTest()
        ////{
        ////    int miscCodeID = (int)testContextInstance.DataRow["MiscCodeID"];

        ////    string miscCatalogItems = (string)testContextInstance.DataRow["MiscCatalogItems"];

        ////    int userId = (int)testContextInstance.DataRow["UserID"];

        ////    int actualsave;

        ////    actualsave = TerraScan.Helper.WSHelper.F36010_SaveMiscImprovementCatalog(miscCodeID, miscCatalogItems, userId);

        ////    if (actualsave == 0)
        ////    {
        ////        Assert.Fail("Record not saved Properly");
        ////    }

        ////    string miscCode = (string)testContextInstance.DataRow["MiscCode"];

        ////    int rollYear = (int)testContextInstance.DataRow["RollYear"];

        ////    int actual;

        ////    actual = TerraScan.Helper.WSHelper.F36010_CheckMiscImprovementCatalog(actualsave, miscCode, rollYear);

        ////    if (actual == 0)
        ////    {
        ////        Assert.Fail("No Record Found");
        ////    }
        ////}

        ////# endregion

        ////# region F36010_DeleteMiscImprovementCatalog

        /////// <summary>
        ///////A test for F36010_DeleteMiscImprovementCatalog (int)
        ///////</summary>
        ////[DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;Integrated Security=True", "36010_MiscImprovementsCatalog", DataAccessMethod.Sequential), TestMethod()]
        ////public void F36010_DeleteMiscImprovementCatalogTest()
        ////{
        ////    int miscCodeID = (int)testContextInstance.DataRow["MiscCodeID"];

        ////    string miscCatalogItems = (string)testContextInstance.DataRow["MiscCatalogItems"];

        ////    int userId = (int)testContextInstance.DataRow["UserID"];

        ////    int actualsave;

        ////    actualsave = TerraScan.Helper.WSHelper.F36010_SaveMiscImprovementCatalog(miscCodeID, miscCatalogItems, userId);

        ////    if (actualsave == 0)
        ////    {
        ////        Assert.Fail("Record not saved Properly");
        ////    }

        ////    TerraScan.Helper.WSHelper.F36010_DeleteMiscImprovementCatalog(actualsave, userId);

        ////}

        ////# endregion

        ////# region F36010_GetMiscImprovementCatalog

        /////// <summary>
        ///////A test for F36010_GetMiscImprovementCatalog (int)
        ///////</summary>
        ////[DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;Integrated Security=True", "36010_MiscImprovementsCatalog", DataAccessMethod.Sequential), TestMethod()]
        ////public void F36010_GetMiscImprovementCatalogTest()
        ////{
        ////    int miscCodeID = (int)testContextInstance.DataRow["MiscCodeID"];

        ////    string miscCatalogItems = (string)testContextInstance.DataRow["MiscCatalogItems"];

        ////    int userId = (int)testContextInstance.DataRow["UserID"];

        ////    int actualsave;

        ////    actualsave = TerraScan.Helper.WSHelper.F36010_SaveMiscImprovementCatalog(miscCodeID, miscCatalogItems, userId);

        ////    if (actualsave == 0)
        ////    {
        ////        Assert.Fail("Record not saved Properly");
        ////    }

        ////    F36010MiscImprovementCatalog actual;

        ////    actual = TerraScan.Helper.WSHelper.F36010_GetMiscImprovementCatalog(actualsave);

        ////    if (actual == null || actual.GetMICatalog.Rows.Count < 1)
        ////    {
        ////        Assert.Fail("No record Found");
        ////    }
        ////}

        ////# endregion

        ////# region F36010_SaveMiscImprovementCatalog

        /////// <summary>
        ///////A test for F36010_SaveMiscImprovementCatalog (int, string, int)
        ///////</summary>
        ////[DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;Integrated Security=True", "36010_MiscImprovementsCatalog", DataAccessMethod.Sequential), TestMethod()]
        ////public void F36010_SaveMiscImprovementCatalogTest()
        ////{
        ////    int miscCodeID = (int)testContextInstance.DataRow["MiscCodeID"];

        ////    string miscCatalogItems = (string)testContextInstance.DataRow["MiscCatalogItems"];

        ////    int userId = (int)testContextInstance.DataRow["UserID"];

        ////    int actual;

        ////    actual = TerraScan.Helper.WSHelper.F36010_SaveMiscImprovementCatalog(miscCodeID, miscCatalogItems, userId);

        ////    if (actual == 0)
        ////    {
        ////        Assert.Fail("Record not saved Properly");
        ////    }
        ////}

        ////# endregion

        ////# endregion F36010_Misc Improvement Catalog

        # region F36011_Misc Improvement Overview

        //Created By:- Logesh.r

        #region F36011_ListDeprTable

        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;Integrated Security=True", "F36011_MiscImprovement", DataAccessMethod.Sequential), TestMethod()]

        public void F36011_ListDeprTableTest()
        {
            int valuesliceId = Convert.ToInt16(testContextInstance.DataRow["valueSliceId"]); // TODO: Initialize to an appropriate value

            F36011MiscImprovementOverviewData actual;

            actual = TerraScan.Helper.WSHelper.F36011_ListDeprTable(valuesliceId);

            if (actual == null || actual.ListDeprTable.Count < 1)
            {
                Assert.Fail(" Record not found");
            }

        }

        # endregion F36011_ListDeprTable

        #region F36011_ListMiscCode

        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;Integrated Security=True", "F36011_MiscImprovement", DataAccessMethod.Sequential), TestMethod()]

        public void F36011_ListMiscCodeTest()
        {
            int valueSliceId = (int)testContextInstance.DataRow["valueSliceId"];

            F36011MiscImprovementOverviewData actual;

            actual = TerraScan.Helper.WSHelper.F36011_ListMiscCode(valueSliceId);

            if (actual == null || actual.ListMICode.Rows.Count < 1)
            {
                Assert.Fail("No record Found");
            }

        }
        # endregion F36011_ListMiscCode

        # region F36011_ListMiscImprovements

        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "F36011_MiscImprovement", DataAccessMethod.Sequential), TestMethod()]

        public void F36011_ListMiscImprovementsTest()
        {
            int miscId = (int)testContextInstance.DataRow["miscId"];
            F36011MiscImprovementOverviewData actual;

            actual = TerraScan.Helper.WSHelper.F36011_ListMiscImprovements(miscId);

            if (actual == null || actual.ListMiscImprovements.Rows.Count < 1)
            {
                Assert.Fail("No record Found");
            }
        }

        # endregion F36011_ListMiscImprovements

        # region F36011_ListMICatalogCode

        /// <summary>
        ///A test for F36011_ListCatalogCode (int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;Integrated Security=True", "F36011_MiscImprovement", DataAccessMethod.Sequential), TestMethod()]
        public void F36011_ListCatalogCodeTest()
        {
            int valueSliceId = (int)testContextInstance.DataRow["valueSliceId"];

            //F36011MiscImprovementOverviewData expected = null;
            F36011MiscImprovementOverviewData actual;

            actual = TerraScan.Helper.WSHelper.F36011_ListCatalogCode(valueSliceId);

            if (actual == null || actual.ListMICodeComboboxDatatable.Rows.Count < 1)
            {
                Assert.Fail("No record Found");
            }

        }

        # endregion F36011_ListMICatalogCode

        #region  F36011_DeleteMICode

        /// <summary>
        ///A test for F36011_DeleteMICode (int, int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;Integrated Security=True", "F36011_MiscImprovement", DataAccessMethod.Sequential), TestMethod()]
        public void F36011_DeleteMICodeTest()
        {
            int miscId = (int)testContextInstance.DataRow["miscId"];

            int userId = (int)testContextInstance.DataRow["UserID"];

            TerraScan.Helper.WSHelper.F36011_DeleteMICode(miscId, userId);

            //Assert.Inconclusive("A method that does not return a value cannot be verified.");
        }

        # endregion  F36011_DeleteMICode

        # region F36011_SaveMiscImprovements

        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;Integrated Security=True", "F36011_MiscImprovement", DataAccessMethod.Sequential), TestMethod()]

        public void F36011_SaveMiscImprovementTest()
        {
            int miscmId = (int)testContextInstance.DataRow["miscmId"];

            string miscItems = (string)testContextInstance.DataRow["miscItems"];

            int userId = (int)testContextInstance.DataRow["UserID"];

            int actual;

            actual = TerraScan.Helper.WSHelper.F36011_SaveMiscImprovement(miscmId, miscItems, userId);

            if (actual == 0)
            {
                Assert.Fail("Record Not saved");
            }
        }

        # endregion F36011_SaveMiscImprovements


        # endregion F36011_MiscImprovementOverview

        # endregion

        # region Sprint 31

        # region F2550_TaxRoll Correction

        // Created By: Shireesha

        # region F2550_ExecTaxRollCorrections

        /// <summary>
        ///A test for F2550_ExecTaxRollCorrections (string, int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;Integrated Security=True", "F2550_TaxRoll Correction", DataAccessMethod.Sequential), TestMethod()]
        public void F2550_ExecTaxRollCorrectionsTest()
        {
            string parcelItems = (string)testContextInstance.DataRow["ParcelItems"];

            int userId = (int)testContextInstance.DataRow["UserID"];

            int actual;

            actual = TerraScan.Helper.WSHelper.F2550_ExecTaxRollCorrections(parcelItems, userId);

            if (actual == 0)
            {
                Assert.Fail("Not records to execute");
            }
        }

        # endregion

        # region F2550_ListParcelDetails

        /// <summary>
        ///A test for F2550_ListParcelDetails (int?, int?)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "F2550_TaxRoll Correction", DataAccessMethod.Sequential), TestMethod()]
        public void F2550_ListParcelDetailsTest()
        {
            //System.Nullable<int> parcelId = Convert.ToInt32(testContextInstance.DataRow["ParcelID"]); // TODO: Initialize to an appropriate value

           // System.Nullable<int> scheduleId = new System.Nullable<int>(); // TODO: Initialize to an appropriate value
            //System.Nullable<int> stateId = Convert.ToInt32(testContextInstance.DataRow["StateID"]);
            string parcelId = (string)testContextInstance.DataRow["ParcelID"];
            string scheduleId = (string)testContextInstance.DataRow["ScheduleID"];
            string stateId = (string)testContextInstance.DataRow["StateID"];
            F2550TaxRollCorrectionData expected = null;
            F2550TaxRollCorrectionData actual;

            actual = TerraScan.Helper.WSHelper.F2550_ListParcelDetails(parcelId, scheduleId,stateId);

            if (actual == null || actual.ListParcelDetailsTable.Count < 1)
            {
                Assert.Fail(" Record not found");
            }
        }

        # endregion

        #endregion F2550_TaxRoll Correction

        # region F95101_AuditTrail

        // Created By: Sudhag

        #region F95101_ListAuditTrail

        /// <summary>
        ///A test for F95101_ListAuditTrail (int, int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "F95101_ListAuditTrail", DataAccessMethod.Sequential), TestMethod()]
        public void F95101_ListAuditTrailTest()
        {
            int form = Convert.ToInt32(testContextInstance.DataRow["form"]);

            int keyId = Convert.ToInt32(testContextInstance.DataRow["keyId"]);

            F95101AuditTrailData actual;

            actual = TerraScan.Helper.WSHelper.F95101_ListAuditTrail(form, keyId);

            if (actual == null || actual.F95101ListAuditTrail.Rows.Count < 1)
            {
                Assert.Fail(" Record not found");
            }
        }

        #endregion

        #endregion

        # endregion Sprint 31

        # region Sprint 32

        # region F85000_GDocEventEngine

        // created by Arun .t.

        # region F85000_InsertGDocEventEngineData

        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;Integrated Security=True", "85000_GDocEventEngine", DataAccessMethod.Sequential), TestMethod()]

        public void InsertGDocEventEngineDataTest()
        {
            string eventEngineInsertData = (string)testContextInstance.DataRow["eventEngineInsertData"];

            int userId = (int)testContextInstance.DataRow["UserID"];

            int actual;

            TerraScan.Helper.WSHelper.InsertGDocEventEngineData(eventEngineInsertData, userId);

        }

        # endregion F85000_InsertGDocEventEngineData

        # region 85000_ListEventTypeStatusDetails

        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;Persist Security Info=True;User ID=sa;Password=100%sec", "85000_GDocEventEngine", DataAccessMethod.Sequential), TestMethod()]
        public void ListEventTypeStatusDetailsTest1()
        {
            int featureClassID = (int)testContextInstance.DataRow["featureClassID"];

            GDocEventEngineTypeStatusData actual;

            actual = TerraScan.Helper.WSHelper.ListEventTypeStatusDetails(featureClassID);

            if (actual == null || actual.ListEventStatusTypeTable.Rows.Count < 1)
            {
                Assert.Fail("No record Found");
            }

        }


        # endregion 85000_ListEventTypeStatusDetails

        # region 85000_LoadEventEngineDataTest

        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "85000_GDocEventEngine", DataAccessMethod.Sequential), TestMethod()]
        public void LoadEventEngineDataTest()
        {
            int featureClassID = (int)testContextInstance.DataRow["featureClassID"];

            int featureID = (int)testContextInstance.DataRow["featureID"];

            GDocEventEngineData actual;

            actual = TerraScan.Helper.WSHelper.LoadEventEngineData(featureClassID, featureID);

            if (actual == null || actual.GDocEventEngineDataTable.Rows.Count < 1)
            {
                Assert.Fail("No record Found");
            }
        }

        # endregion 85000_LoadEventEngineDataTest

        # endregion F85000_GDocEventEngine

        #region F2004_CreateNewParcelCopy

        // Created By: Nirmal John

        /// <summary>
        ///A test for CreateNewParcelCopy (int, int, int, int, int, int, string, int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "CreateNewParcelCopyTest", DataAccessMethod.Sequential), TestMethod()]
        public void CreateNewParcelCopyTest()
        {
            int parcelID = Convert.ToInt32(testContextInstance.DataRow["parcelID"]);

            int parcelTypeID = Convert.ToInt32(testContextInstance.DataRow["parcelTypeID"]);

            int copyAllObjects = Convert.ToInt32(testContextInstance.DataRow["copyAllObjects"]);

            int copyAllSlices = Convert.ToInt32(testContextInstance.DataRow["copyAllSlices"]);

            int copyAttachments = Convert.ToInt32(testContextInstance.DataRow["copyAttachments"]);

            int copyComments = Convert.ToInt32(testContextInstance.DataRow["copyComments"]);

            string parcelElements = testContextInstance.DataRow["parcelElements"].ToString();

            int userId = (int)testContextInstance.DataRow["UserID"];

            int expected = 0;
            int actual;

            actual = TerraScan.Helper.WSHelper.CreateNewParcelCopy(parcelID, parcelTypeID, copyAllObjects, copyAllSlices, copyAttachments, copyComments, parcelElements, userId);


        }
        #endregion

        #region F1401_ParcelSearch

        // Created by Arun .t.

        #region F1401_GetParcelType

        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "F2550_TaxRoll Correction", DataAccessMethod.Sequential), TestMethod()]
        public void F1401_GetParcelTypeTest()
        {
            System.Nullable<int> parcelId = new System.Nullable<int>();

            F1401ParcelSearch actual = new F1401ParcelSearch();

            actual = TerraScan.Helper.WSHelper.F1401_GetParcelType(parcelId);

            if (actual == null || actual.ParcelTypeDataTable.Count < 1)
            {
                Assert.Fail(" Record not found");
            }

        }

        #endregion F1401_GetParcelType

        # region F1401_GetSearchResult
        /// <param name="parcelSearchXml">The parcel search XML.</param>

        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "F2550_TaxRoll Correction", DataAccessMethod.Sequential), TestMethod()]
        public void F1401_GetSearchResultTest()
        {
            string parcelSearchXml = (string)testContextInstance.DataRow["parcelSearchXml"];

            F1401ParcelSearch actual;

            actual = TerraScan.Helper.WSHelper.F1401_GetSearchResult(parcelSearchXml);

            if (actual == null || actual.ParcelSearchDataTable.Count < 1)
            {
                Assert.Fail(" Record not found");
            }

        }


        # endregion F1401_GetSearchResult


        #endregion F1401_ParcelSearch

        # region F3001_ObjectManagement

        #region F3001_SaveObjectManagement

        // Created By: Nirmal John

        /// <summary>
        ///A test for F3001_SaveObjectManagement (int, string, bool, bool, int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "F3001_SaveObjectManagement", DataAccessMethod.Sequential), TestMethod()]
        public void F3001_SaveObjectManagementTest()
        {
            int objectId = Convert.ToInt16(testContextInstance.DataRow["objectId"]);

            string objectItems = testContextInstance.DataRow["ObjectItems"].ToString();

            int userId = (int)testContextInstance.DataRow["UserID"];

            int expected = 0;
            int actual;


            actual = TerraScan.Helper.WSHelper.F3001_SaveObjectManagement(objectId, objectItems, userId);

            if (actual == 0)
            {
                Assert.Fail(" Record not Saved");
            }
        }
        #endregion

        #region F3001_GetObjectDetail

        // Created by Nirmal

        /// <summary>
        ///A test for F3001_GetObjectDetail (int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;Persist Security Info=True;User ID=sa;Password=100%sec", "F3001_GetObjectDetail", DataAccessMethod.Sequential), TestMethod()]
        public void F3001_GetObjectDetailTest()
        {
            int objectId = Convert.ToInt32(testContextInstance.DataRow["objectId"]);

            F3001ObjectManagementData expected = null;
            F3001ObjectManagementData actual;

            actual = TerraScan.Helper.WSHelper.F3001_GetObjectDetail(objectId);

            if (actual == null || actual.ObjectDetailDataTable.Count < 1)
            {
                Assert.Fail(" Record not found");
            }


        }
        #endregion

        #region F3001_DeleteObjectManagement

        // Created by Nirmal
        /// <summary>
        ///A test for F3001_DeleteObjectManagement (int, int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;Persist Security Info=True;User ID=sa;Password=100%sec", "F3001_DeleteObjectManagement", DataAccessMethod.Sequential), TestMethod()]
        public void F3001_DeleteObjectManagementTest()
        {
            int objectId = Convert.ToInt32(testContextInstance.DataRow["objectId"]);

            int userId = (int)testContextInstance.DataRow["UserID"];

            TerraScan.Helper.WSHelper.F3001_DeleteObjectManagement(objectId, userId);


        }
        #endregion

        # endregion

        #region F9002_Permissions

        // Edited By: Kalyani

        #region F9002_GetUserGroupDetails

        /// <summary>
        ///A test for GetUserGroupDetails (int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "9002_Permissions", DataAccessMethod.Sequential), TestMethod()]
        public void GetUserGroupDetailsTest()
        {
            int applicationId = (int)testContextInstance.DataRow["applicationId"];

            UserManagementData expected = null;
            UserManagementData actual;

            actual = TerraScan.Helper.WSHelper.GetUserGroupDetails(applicationId);

            if (actual == null || actual.ListUserGroupDetail.Rows.Count < 1)
            {
                Assert.Fail("No Records Found");
            }
        }
        #endregion

        #region F9002_GetGroupDetails

        /// <summary>
        ///A test for GetGroupDetails (int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "9002_Permissions", DataAccessMethod.Sequential), TestMethod()]

        public void GetGroupDetailsTest()
        {
            int userId = (int)testContextInstance.DataRow["userId"];

            UserManagementData expected = null;
            UserManagementData actual;

            actual = TerraScan.Helper.WSHelper.GetGroupDetails(userId);
            if (actual == null || actual.ListGroupDetail.Rows.Count < 1)
            {
                Assert.Fail("No Records Found");
            }
        }
        #endregion

        #region F9002_GetGroupPermissionDetailsTest
        /// <summary>
        ///A test for GetGroupPermissionDetails (int)
        ///</summary>        
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "9002_Permissions", DataAccessMethod.Sequential), TestMethod()]
        public void GetGroupPermissionDetailsTest()
        {
            int userId = (int)testContextInstance.DataRow["userId"];

            UserManagementData expected = null;
            UserManagementData actual;

            actual = TerraScan.Helper.WSHelper.GetGroupPermissionDetails(userId);
            if (actual == null || actual.ListPermissionGroupDetail.Rows.Count < 1)
            {
                Assert.Fail("No Records Found");
            }

        }
        #endregion


        #endregion

        # endregion Sprint 32

        # region Sprint 34

        # region F27080_ExemptionDefinition

        //  By Arun.t.

        # region F27080_ListExemptionTypeCombo

        /// <summary>
        ///A test for F27080_ListExemptionTypeCombo (int)
        ///</summary>

        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;Integrated Security=True", "F27080_ExemptionDefinition", DataAccessMethod.Sequential), TestMethod()]
        public void F27080_ListExemptionTypeComboTest()
        {
            int applicationId = (int)testContextInstance.DataRow["applicationId"];

            //F27080ExemptionDefinitionData expected = null;
            F27080ExemptionDefinitionData actual;

            actual = TerraScan.Helper.WSHelper.F27080_ListExemptionTypeCombo(applicationId);

            if (actual == null || actual.ListExemptionTypeTable.Rows.Count < 1)
            {
                Assert.Fail("No record Found");
            }

        }
        # endregion F27080_ListExemptionTypeCombo

        # region F27080_FillExemptionTypeGrid

        /// <summary>
        ///A test for F27080_FillExemptionTypeGrid (int)
        ///</summary>

        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;Integrated Security=True", "F27080_ExemptionDefinition", DataAccessMethod.Sequential), TestMethod()]
        public void F27080_FillExemptionTypeGridTest()
        {
            int exemptionId = (int)testContextInstance.DataRow["exemptionId"];

            //F27080ExemptionDefinitionData expected = null;
            F27080ExemptionDefinitionData actual;

            actual = TerraScan.Helper.WSHelper.F27080_FillExemptionTypeGrid(exemptionId);
            if (actual == null || actual.GridLoadExemptionTypeTable.Rows.Count < 1)
            {
                Assert.Fail("No record Found");
            }

        }

        # endregion F27080_FillExemptionTypeGrid

        # region F27080_SaveExemptionType

        /// <summary>
        ///A test for F27080_SaveExemptionType (int, string, string, int, int)
        ///</summary>

        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;Integrated Security=True", "F27080_ExemptionDefinition", DataAccessMethod.Sequential), TestMethod()]
        public void F27080_SaveExemptionTypeTest1()
        {
            int exemptionID = (int)testContextInstance.DataRow["exemptionId"];

            string seniorExemption = (string)testContextInstance.DataRow["seniorExemption"];

            string exemptionType = (string)testContextInstance.DataRow["exemptionType"];

            int checkError = (int)testContextInstance.DataRow["CheckError"];

            int userId = (int)testContextInstance.DataRow["UserID"];

            int actual;

            actual = TerraScan.Helper.WSHelper.F27080_SaveExemptionType(exemptionID, seniorExemption, exemptionType, checkError, userId);

            if (actual == 0)
            {
                Assert.Fail("Record Not saved");
            }
        }

        # endregion F27080_SaveExemptionType

        # endregion F27080_ExemptionDefinition

        # region F29530_AssociationEvent

        //  By Arun.t.

        # region F29530_FillAssociationEventGrid

        /// <summary>
        ///A test for F29530_FillAssociationEventGrid (int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;Integrated Security=True", "F27080_ExemptionDefinition", DataAccessMethod.Sequential), TestMethod()]
        public void F29530_FillAssociationEventGridTest()
        {
            int eventId = (int)testContextInstance.DataRow["eventId"];

            //F29530EventAssociationData expected = null;
            F29530EventAssociationData actual;

            actual = TerraScan.Helper.WSHelper.F29530_FillAssociationEventGrid(eventId);

            if (actual == null || actual.ListEventAssociationTable.Rows.Count < 1)
            {
                Assert.Fail("No record Found");
            }

        }

        # endregion F29530_FillAssociationEventGrid

        # endregion F29530_Association Event

        #region F29500_Parcelsplit

        // Created By:yavana rani

        #region F29500_GetBaseParcelValue
        /// <summary>
        ///A test for F29500_GetBaseParcelValue (int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;" ), TestMethod()]
        public void F29500_GetBaseParcelValueTest()
        {
            int parcelId = (int)testContextInstance.DataRow["Parcel ID"]; // TODO: Initialize to an appropriate value

            F29500ParcelSplitData expected = null;
            F29500ParcelSplitData actual;

            actual = TerraScan.Helper.WSHelper.F29500_GetBaseParcelValue(parcelId);

            if (actual == null || actual.ListParcelSplitObject.Rows.Count < 1 || actual.ListParcelSplitValueSlices.Rows.Count < 1 || actual.ListSplitObject.Rows.Count < 1 || actual.ListSplitValuseSlice.Rows.Count < 1)
            {
                Assert.Fail("No Records Found");
            }

            //Assert.AreEqual(expected, actual, "TerraScan.Helper.WSHelper.F29500_GetBaseParcelValue did not return the expected v" + "alue.");
            //Assert.Inconclusive("Verify the correctness of this test method.");
        }
        # endregion

        #region F29500_ParcelSplitLoad
        /// <summary>
        ///A test for F29500_ParcelSplitLoad (int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "F29500_Parcelsplit", DataAccessMethod.Sequential), TestMethod()]
        public void F29500_ParcelSplitLoadTest()
        {
            int eventId = (int)testContextInstance.DataRow["Event ID"]; // TODO: Initialize to an appropriate value

            F29500ParcelSplitData actual;

            actual = TerraScan.Helper.WSHelper.F29500_ParcelSplitLoad(eventId);

            if (actual == null || actual.Tables.Count < 0 || actual.ListSplitDefinitionHeader.Rows.Count < 0)
            {
                Assert.Fail("No Records Found");
            }

            //Assert.AreEqual(expected, actual, "TerraScan.Helper.WSHelper.F29500_ParcelSplitLoad did not return the expected valu" + "e.");
            //Assert.Inconclusive("Verify the correctness of this test method.");
        }
        # endregion

        #region F29500_SaveParcelSplit
        /// <summary>
        ///A test for F29500_SaveParcelSplit (string, string, string, int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "F29500_Parcelsplit", DataAccessMethod.Sequential), TestMethod()]
        public void F29500_SaveParcelSplitTest()
        {
            string splitDefinitionXml = (string)testContextInstance.DataRow["Split Definition"]; // TODO: Initialize to an appropriate value

            string splitHeaderXml = (string)testContextInstance.DataRow["Split Header"]; // TODO: Initialize to an appropriate value

            string parcelSplitXml = (string)testContextInstance.DataRow["Parcel Split"]; // TODO: Initialize to an appropriate value

            string objectXml = (string)testContextInstance.DataRow["ObjectValue"];

            string cropXml = (string)testContextInstance.DataRow["CropValue"];

            int userId = (int)testContextInstance.DataRow["UserID"];

            int actual;

            actual = TerraScan.Helper.WSHelper.F29500_SaveParcelSplit(splitDefinitionXml, splitHeaderXml, parcelSplitXml, objectXml, cropXml, userId);

            if (actual == 0)
            {
                Assert.Fail("Record Not saved");
            }


            //Assert.AreEqual(expected, actual, "TerraScan.Helper.WSHelper.F29500_SaveParcelSplit did not return the expected valu" + "e.");
            //Assert.Inconclusive("Verify the correctness of this test method.");
        }
        #endregion

        #region F29500_CreateParcel
        /// <summary>
        ///A test for F29500_CreateParcel (int, int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "F29500_Parcelsplit", DataAccessMethod.Sequential), TestMethod()]
        public void F29500_CreateParcelTest()
        {
            int splitId = (int)testContextInstance.DataRow["Split ID"];

            int userId = (int)testContextInstance.DataRow["UserID"];

            TerraScan.Helper.WSHelper.F29500_CreateParcel(splitId, userId);

            //Assert.Inconclusive("A method that does not return a value cannot be verified.");

        }
        # endregion

        # endregion

        # region F29600_SeniorExemption

        ////# region F29600_GetSeniorExemptionDetails

        /////// <summary>
        ///////A test for F29600_GetSeniorExemptionDetails (int)
        ///////</summary>

        ////[DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "F29600_SeniorExemptData", DataAccessMethod.Sequential), TestMethod()]
        ////public void F29600_GetSeniorExemptionDetailsTest()
        ////{
        ////    int eventId = (int)testContextInstance.DataRow["eventId"];

        ////    //F29600SeniorExemptData expected = null;
        ////    F29600SeniorExemptData actual;

        ////    actual = TerraScan.Helper.WSHelper.F29600_GetSeniorExemptionDetails(eventId);

        ////    if (actual == null || actual.f29600ListSeniorExemptionDataTable.Rows.Count < 1)
        ////    {
        ////        Assert.Fail("No record Found");
        ////    }

        ////}

        ////# endregion F29600_GetSeniorExemptionDetails

        # region F29600_GetSeniorExemptionCodeTest

        /// <summary>
        ///A test for F29600_GetSeniorExemptionCode (string)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "F29600_SeniorExemptData", DataAccessMethod.Sequential), TestMethod()]
        public void F29600_GetSeniorExemptionCodeTest()
        {
            string effectiveDate = (string)testContextInstance.DataRow["effectiveDate"];

            //F29600SeniorExemptData expected = null;
            F29600SeniorExemptData actual;

            actual = TerraScan.Helper.WSHelper.F29600_GetSeniorExemptionCode(effectiveDate);

            if (actual == null || actual.f29600ListExemptionCodeDataTable.Rows.Count < 1)
            {
                Assert.Fail("No record Found");
            }

        }


        # endregion F29600_GetSeniorExemptionCodeTest

        #region F29600_saveSeniorExemptionDetails

        /// <summary>
        ///A test for F29600_saveSeniorExemptionDetails (int, string, int)
        ///</summary>        
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "F29600_SeniorExemptData", DataAccessMethod.Sequential), TestMethod()]
        public void F29600_saveSeniorExemptionDetailsTest()
        {
            int eventId = (int)testContextInstance.DataRow["eventId"];

            string seniorExemptDetails = (string)testContextInstance.DataRow["seniorExemptDetails"];

            int userId = (int)testContextInstance.DataRow["UserID"];

            int actual;

            actual = TerraScan.Helper.WSHelper.F29600_saveSeniorExemptionDetails(eventId, seniorExemptDetails, userId);

            if (actual == 0)
            {
                Assert.Fail("Record Not saved");
            }
        }

        #endregion F29600_saveSeniorExemptionDetails

        # endregion F29600_SeniorExemption

        #region F29510_Combine Parcel

        //Created By: Kalyani

        #region F29510_GetCombineParcelDetails

        /// <summary>
        ///A test for F29510_GetCombineParcelDetails (int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "29510_CombineParcel", DataAccessMethod.Sequential), TestMethod()]
        public void F29510_GetCombineParcelDetailsTest()
        {
            int parcelId = (int)testContextInstance.DataRow["ParcelID"];
            //DataSet expected = null;
            DataSet actual;

            actual = TerraScan.Helper.WSHelper.F29510_GetCombineParcelDetails(parcelId);
            if (actual == null || actual.Tables.Count < 1 || actual.Tables[0].Rows.Count < 1)
            {
                Assert.Fail("No records Found");
            }
        }
        #endregion

        #region F29510_SaveCombineParcelDetails

        /// <summary>
        ///A test for F29510_SaveCombineParcelDetails (int?, string, string, int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "29510_CombineParcel", DataAccessMethod.Sequential), TestMethod()]
        public void F29510_SaveCombineParcelDetailsTest()
        {
            System.Nullable<int> combineId = new System.Nullable<int>();

            string parcelNumber = (string)testContextInstance.DataRow["ParcelNumber"];

            string combineItems = (string)testContextInstance.DataRow["CombineItems"];

            int userId = (int)testContextInstance.DataRow["UserID"];

            int actual;

            actual = TerraScan.Helper.WSHelper.F29510_SaveCombineParcelDetails(combineId, parcelNumber, combineItems, userId);

            if (actual == 0)
            {
                Assert.Fail("No Records Found");
            }
        }
        #endregion

        #region F29510_CreateCombinedParcel
        /// <summary>
        ///A test for F29510_CreateCombinedParcel (int, string, string, int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "29510_CombineParcel", DataAccessMethod.Sequential), TestMethod()]
        public void F29510_CreateCombinedParcelTest()
        {
            int combineId = (int)testContextInstance.DataRow["combinedId"];

            string eventId = (string)testContextInstance.DataRow["EventId"];

            string parcelNumber = (string)testContextInstance.DataRow["ParcelNumber"];

            int userId = (int)testContextInstance.DataRow["UserID"];

            //int actual;
            F29510ParcelCombineData actual;

            actual = TerraScan.Helper.WSHelper.F29510_CreateCombinedParcel(combineId, eventId, parcelNumber, userId);

            if (actual == null )
            {
                Assert.Fail("No Record Inserted");
            }
        }
        #endregion

        #region F29510_GetBaseParcelValue
        /// <summary>
        ///A test for F29510_GetBaseParcelValue (int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "29510_BaseParcel", DataAccessMethod.Sequential), TestMethod()]
        public void F29510_GetBaseParcelValueTest()
        {
            int eventId = (int)testContextInstance.DataRow["EventID"];

            DataSet expected = null;
            DataSet actual;

            actual = TerraScan.Helper.WSHelper.F29510_GetBaseParcelValue(eventId);

            if (actual == null || actual.Tables.Count < 1 || actual.Tables[0].Rows.Count < 1)
            {
                Assert.Fail("No records Found");
            }
        }
        #endregion

        #endregion

        #region F20000_ParcelHeader

        //Created By: Kalyani

        #region UpdateParcelHeaderDetails
        /// <summary>
        ///A test for UpdateParcelHeaderDetails (int, string, int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "20000_ParcelHeader", DataAccessMethod.Sequential), TestMethod()]
        public void UpdateParcelHeaderDetailsTest()
        {
            int parcelID = (int)testContextInstance.DataRow["ParcelID"];

            string parcelDetails = (string)testContextInstance.DataRow["Parceldetails"];

            int userId = (int)testContextInstance.DataRow["UserID"];
            bool isCopyHeader = (bool)testContextInstance.DataRow["IsCopyHeader"];
            int actual;

            actual = TerraScan.Helper.WSHelper.UpdateParcelHeaderDetails(parcelID, parcelDetails,isCopyHeader, userId);

            if (actual == 0)
            {
                Assert.Fail("No Records Found");
            }
        }
        #endregion

        #endregion

        # endregion Sprint 34

        # region Sprint 35

        #region F36032 Land Codes

        // Created By: Sudhag


        #region F36032_SaveLandCodeDetails

        // Created By: Sudhag

        /// <summary>
        ///A test for F36032_SaveLandCodeDetails (int?, string, int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "F36032_LandCodeDetails", DataAccessMethod.Sequential), TestMethod()]
        public void F36032_SaveLandCodeDetailsTest()
        {
            int? landCodeId;
            if (!string.IsNullOrEmpty(testContextInstance.DataRow["landCodeId"].ToString()))
            {
                landCodeId = (int?)testContextInstance.DataRow["landCodeId"];
            }
            else
            {
                landCodeId = null;
            }

            string landItems = testContextInstance.DataRow["landItems"].ToString();

            int userId = (int)testContextInstance.DataRow["UserID"];

            int actual;

            actual = TerraScan.Helper.WSHelper.F36032_SaveLandCodeDetails(landCodeId, landItems, userId);

            if (actual <= 0)
            {
                Assert.Fail("Record Can not be saved: Failed F36032_SaveLandCodeDetails");
            }

            F36032LandCodesData expected = null;
            F36032LandCodesData actualData;

            actualData = TerraScan.Helper.WSHelper.F36032_ListLandCodeDetails();

            if (actualData == null)
            {
                Assert.Fail(" Record not found :Failed F36032_ListLandCodeDetails");
            }

            System.Nullable<int> rollYear = new System.Nullable<int>(); // TODO: Initialize to an appropriate value

            //F36032LandCodesData expected = null;
            F36032LandCodesData actualLandCode = new F36032LandCodesData();

            actualLandCode = TerraScan.Helper.WSHelper.F36032_ListLandItems(rollYear);

            if (actualLandCode == null || actualLandCode.ListLandCode.Count < 1)
            {
                Assert.Fail(" Record not found : Failed F36032_ListLandItems ");
            }

            // Delete Method
            TerraScan.Helper.WSHelper.F36032_DeleteLandCode(actual, userId);




        }
        #endregion

        //   #region F36032_ListLandCodeDetails

        // Created By: Sudhag
        /*

        /// <summary>
        ///A test for F36032_ListLandCodeDetails ()
        ///</summary>
        [TestMethod()]
        public void F36032_ListLandCodeDetailsTest()
        {
            F36032LandCodesData expected = null;
            F36032LandCodesData actual;

            actual = TerraScan.Helper.WSHelper.F36032_ListLandCodeDetails();

            if (actual == null)
            {
                Assert.Fail(" Record not found");
            }
        }
        #endregion
          

        #region F36032_ListLandItems

        // Created By: Sudhag

        /// <summary>
        ///A test for F36032_ListLandItems (int?)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "F36032_ListLandItems", DataAccessMethod.Sequential), TestMethod()]
        public void F36032_ListLandItemsTest()
        {
            System.Nullable<int> rollYear = new System.Nullable<int>(); // TODO: Initialize to an appropriate value

            //F36032LandCodesData expected = null;
            F36032LandCodesData actual = new F36032LandCodesData();

            actual = TerraScan.Helper.WSHelper.F36032_ListLandItems(rollYear);

            if (actual == null || actual.ListLandCode.Count < 1)
            {
                Assert.Fail(" Record not found");
            }

        }
        #endregion
          */

        /*
        
        #region F36032_DeleteLandCode

        // Created By: Sudhag

        /// <summary>
        ///A test for F36032_DeleteLandCode (int, int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "F36032_DeleteLandCode", DataAccessMethod.Sequential), TestMethod()]
        public void F36032_DeleteLandCodeTest()
        {
            int landCodeID = Convert.ToInt16(testContextInstance.DataRow["landCodeID"]);

            int userId = (int)testContextInstance.DataRow["UserID"];
 
            TerraScan.Helper.WSHelper.F36032_DeleteLandCode(landCodeID,userId);


        }
        #endregion
        
        */

        #endregion


        # region F36033_LandCodeValues

        // CREATED BY:- S.SATHIYAN.

        # region F36033_ListLandCodeValues

        /// <summary>
        ///A test for F36033_ListLandCodeValues ()
        ///</summary>
        [TestMethod()]
        public void F36033_ListLandCodeValuesTest()
        {
            F36033LandCodesValuesData expected = null;
            F36033LandCodesValuesData actual;

            actual = TerraScan.Helper.WSHelper.F36033_ListLandCodeValues();

            if (actual == null || actual.ListLandCodeValueDetails.Count < 1)
            {
                Assert.Fail("No records found");
            }

        }

        # endregion

        # region F36033_ListIndividualLandCodeValuesItems
        /// <summary>
        ///A test for F36033_ListIndividualLandCodeValuesItems ()
        ///</summary>
        [TestMethod()]
        public void F36033_ListIndividualLandCodeValuesItemsTest()
        {
            F36033LandCodesValuesData expected = null;
            F36033LandCodesValuesData actual;

            actual = TerraScan.Helper.WSHelper.F36033_ListIndividualLandCodeValuesItems();

            if (actual == null || actual.ListLandCode.Count < 1)
            {
                Assert.Fail(" Record not found");
            }
        }

        # endregion

        # region F36033_SaveLandCodeValue

        /// <summary>
        ///A test for F36033_SaveLandCodeValue (int?, string, int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "36033_LandCodeValues", DataAccessMethod.Sequential), TestMethod()]
        public void F36033_SaveLandCodeValueTest()
        {
            ///// System.Nullable<int> landUnqiueId = (System.Nullable<int>)testContextInstance.DataRow["landUnqiueId"];

            int? landUnqiueId;

            if (!string.IsNullOrEmpty(testContextInstance.DataRow["landUnqiueId"].ToString()))
            {
                landUnqiueId = (System.Nullable<int>)testContextInstance.DataRow["landUnqiueId"];
            }
            else
            {
                landUnqiueId = null;
            }

            string landValueItems = testContextInstance.DataRow["landValueItems"].ToString();

            int userId = (int)testContextInstance.DataRow["UserID"];

            int actual;

            actual = TerraScan.Helper.WSHelper.F36033_SaveLandCodeValue(landUnqiueId, landValueItems, userId);

            if (actual == 0)
            {
                Assert.Fail("No records found");
            }
        }

        # endregion

        # region F36033_DeleteLandCodevalue

        /// <summary>
        ///A test for F36033_DeleteLandCodevalue (int, int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "36033_LandCodeValues", DataAccessMethod.Sequential), TestMethod()]
        public void F36033_DeleteLandCodevalueTest()
        {
            int luvId = (int)testContextInstance.DataRow["luvId"];

            int userId = (int)testContextInstance.DataRow["UserID"];

            TerraScan.Helper.WSHelper.F36033_DeleteLandCodevalue(luvId, userId);

        }

        # endregion

        # endregion

        # region F36035_Land Details

        // Created By: Sudhag

        #region F36035_InsertLandDetails

        // Created By: Sudhag

        /// <summary>
        ///A test for F36035_InsertLandDetails (int, string, int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "F36035_LandDetails", DataAccessMethod.Sequential), TestMethod()]
        public void F36035_InsertLandDetailsTest()
        {
            int LUID = Convert.ToInt16(testContextInstance.DataRow["LUID"]); // TODO: Initialize to an appropriate value

            string landUnitItems = testContextInstance.DataRow["landUnitItems"].ToString(); // TODO: Initialize to an appropriate value
            string influenceItems = (string)testContextInstance.DataRow["InfluenceItems"];
            int userId = (int)testContextInstance.DataRow["UserID"];

            int actual;

            actual = TerraScan.Helper.WSHelper.F36035_InsertLandDetails(LUID, landUnitItems,influenceItems, userId);


        }
        # endregion

        #region F36035_ListLandDetails

        // Created By: Sudhag

        /// <summary>
        ///A test for F36035_ListLandDetails (int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "F36035_LandDetails", DataAccessMethod.Sequential), TestMethod()]
        public void F36035_ListLandDetailsTest()
        {
            int valueSliceID = Convert.ToInt16(testContextInstance.DataRow["valueSliceID"]);

            F36035LandData expected = null;
            F36035LandData actual;

            actual = TerraScan.Helper.WSHelper.F36035_ListLandDetails(valueSliceID);

            if (actual == null || actual.ListLandValueSliceDetails.Count < 1)
            {
                Assert.Fail(" Record not found");
            }

        }
        # endregion

        #region F36035_ListLandTypeDetails

        // Created By: Sudhag

        /// <summary>
        ///A test for F36035_ListLandTypeDetails (int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "F36035_LandDetails", DataAccessMethod.Sequential), TestMethod()]
        public void F36035_ListLandTypeDetailsTest()
        {
            int valueSliceID = Convert.ToInt16(testContextInstance.DataRow["valueSliceID"]); // TODO: Initialize to an appropriate value

            F36035LandData expected = null;
            F36035LandData actual;

            actual = TerraScan.Helper.WSHelper.F36035_ListLandTypeDetails(valueSliceID);

            if (actual == null || actual.ListLandType1.Count < 1 || actual.ListLandType2.Count < 1 || actual.ListLandType3.Count < 1)
            {
                Assert.Fail(" Record not found");
            }
        }
        # endregion

        #region F36035_GetLandCode

        // Created By: Sudhag

        /// <summary>
        ///A test for F36035_GetLandCode (int, int, int, int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "F36035_LandDetails", DataAccessMethod.Sequential), TestMethod()]
        public void F36035_GetLandCodeTest()
        {
            int rollYear = Convert.ToInt16(testContextInstance.DataRow["rollYear"]); // TODO: Initialize to an appropriate value

            int landType1 = Convert.ToInt16(testContextInstance.DataRow["landType1"]); // TODO: Initialize to an appropriate value

            int landType2 = Convert.ToInt16(testContextInstance.DataRow["landType2"]); // TODO: Initialize to an appropriate value

            int landType3 = Convert.ToInt16(testContextInstance.DataRow["landType3"]); // TODO: Initialize to an appropriate value

            int valuesliceId = Convert.ToInt16(testContextInstance.DataRow["valueSliceID"]); // TODO: Initialize to an appropriate value
            int? aglandId = Convert.ToInt16(testContextInstance.DataRow["AglandID"]);

            /// F36035LandData expected = null;
            F36035LandData actual;

            actual = TerraScan.Helper.WSHelper.F36035_GetLandCode(rollYear, landType1, landType2, landType3, valuesliceId, aglandId);

            if (actual == null || actual.ListLandCode.Count < 0)
            {
                Assert.Fail(" Record not found");
            }
        }

        # endregion

        # region F36035_GetLandCodeBaseValue

        /// <summary>
        ///A test for F36035_GetLandCodeBaseValue (string, int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "F36035_LandDetails", DataAccessMethod.Sequential), TestMethod()]
        public void F36035_GetLandCodeBaseValueTest()
        {
            string landCode = (string)testContextInstance.DataRow["landCode"];

            int valueSliceId = (int)testContextInstance.DataRow["valueSliceId"];
           int aglandID= (int)testContextInstance.DataRow["AglandID"];

            F36035LandData expected = null;
            F36035LandData actual;

            actual = TerraScan.Helper.WSHelper.F36035_GetLandCodeBaseValue(landCode, valueSliceId, aglandID);

            if (actual == null || actual.Get_LandCodeBaseValue.Count < 0)
            {
                Assert.Fail(" Record not found");
            }

        }

        # endregion

        # region F36035_DeleteLandDetails

        /// <summary>
        ///A test for F36035_DeleteLandDetails (int, int)
        ///</summary>
        ///
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "F36035_LandDetails", DataAccessMethod.Sequential), TestMethod()]

        public void F36035_DeleteLandDetailsTest()
        {
            int lUID = Convert.ToInt16(testContextInstance.DataRow["LUID"]);

            int userId = (int)testContextInstance.DataRow["UserID"];

            TerraScan.Helper.WSHelper.F36035_DeleteLandDetails(lUID, userId);


        }
        # endregion


        # endregion

        # endregion

        # region Sprint_37

        # region 36040_PermanentCrop
        // Created By: SadhaShivudu

        # region F36040_ListCropCatalog

        /// <summary>
        ///A test for F36040_ListCropCatalog ()
        ///</summary>
        ///
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "F36040_ CropCatalog", DataAccessMethod.Sequential), TestMethod()]

        public void F36040_ListCropCatalogTest()
        {
            //F36040PermanentCropData expected = null;
            F36040PermanentCropData actual;

            actual = TerraScan.Helper.WSHelper.F36040_ListCropCatalog();

            if (actual == null || actual.ListCropCatalogDetials.Count < 1)
            {
                Assert.Fail(" Record not found");
            }

        }

        # endregion F36040_ListCropCatalog

        # region F36040_SaveCropCatalog

        /// <summary>
        ///A test for F36040_SaveCropCatalog (int?, string, int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "F36040_ CropCatalog", DataAccessMethod.Sequential), TestMethod()]
        public void F36040_SaveCropCatalogTest()
        {
            int cropUnqiueId = (int)testContextInstance.DataRow["cropUnqiueId"];

            string cropCatalogItems = (string)testContextInstance.DataRow["cropCatalogItems"];

            int userId = (int)testContextInstance.DataRow["UserID"];

            int actual;

            actual = TerraScan.Helper.WSHelper.F36040_SaveCropCatalog(cropUnqiueId, cropCatalogItems, userId);

            if (actual == 0)
            {
                Assert.Fail("Record Not saved");
            }

        }

        # endregion F36040_SaveCropCatalog

        # region F36040_DeleteCropCatalog

        /// <summary>
        ///A test for F36040_DeleteCropCatalog (int, int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "F36040_ CropCatalog", DataAccessMethod.Sequential), TestMethod()]
        public void F36040_DeleteCropCatalogTest()
        {
            int cropVId = (int)testContextInstance.DataRow["cropVId"];

            int userId = (int)testContextInstance.DataRow["userId"];

            //int expected = 0;
            int actual;

            actual = TerraScan.Helper.WSHelper.F36040_DeleteCropCatalog(cropVId, userId);

        }

        # endregion F36040_DeleteCropCatalog


        # endregion 36040_PermanentCrop


        # endregion Sprint_37

        //}

        #region Sprint_36

        #region F81001_EventFeeCatalog
        // Created By: Latha

        # region F81001_GetEventFeeCatalog
        /// <summary>
        ///A test for F81001_GetEventFeeCatalog (int)
        ///</summary>
        ///
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "81001_EventFeeCatalog", DataAccessMethod.Sequential), TestMethod()]

        public void F81001_GetEventFeeCatalogTest1()
        {
            int feeCatId = Convert.ToInt32(testContextInstance.DataRow["feeCatId"]);

            F81001FeeCatalogData expected = null;
            F81001FeeCatalogData actual;

            actual = TerraScan.Helper.WSHelper.F81001_GetEventFeeCatalog(feeCatId);

            if (actual == null || actual.GetFeeCatalog.Count < 1)
            {
                Assert.Fail(" Record not found");
            }


        }
        # endregion

        #region F81001_SaveEventFeeCatalog

        /// <summary>
        ///A test for F81001_SaveEventFeeCatalog (int, string, int)
        ///</summary>
        ///
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "81001_EventFeeCatalog", DataAccessMethod.Sequential), TestMethod()]
        public void F81001_SaveEventFeeCatalogTest()
        {
            int feeCatId = Convert.ToInt32(testContextInstance.DataRow["feeCatId"]);

            string feeCatalogItems = (string)testContextInstance.DataRow["feeCatalogItems"];

            int userId = Convert.ToInt32(testContextInstance.DataRow["userId"]);

            int actual;

            actual = TerraScan.Helper.WSHelper.F81001_SaveEventFeeCatalog(feeCatId, feeCatalogItems, userId);

            if (actual == 0)
            {
                Assert.Fail("Record Not saved");
            }
        }

        #endregion F81001_SaveEventFeeCatalog

        #region F81001_DeleteEventFeeCatalog

        /// <summary>
        ///A test for F81001_DeleteEventFeeCatalog (int, int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "81001_EventFeeCatalog", DataAccessMethod.Sequential), TestMethod()]
        public void F81001_DeleteEventFeeCatalogTest()
        {
            int feeCatId = Convert.ToInt32(testContextInstance.DataRow["feeCatId"]);

            int userId = Convert.ToInt32(testContextInstance.DataRow["userId"]);

            TerraScan.Helper.WSHelper.F81001_DeleteEventFeeCatalog(feeCatId, userId);

        }

        #endregion F81001_DeleteEventFeeCatalog

        #region F81001_CheckEventFeeCatalog

        /// <summary>
        ///A test for F81001_CheckEventFeeCatalog (int, string, DateTime)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "81001_EventFeeCatalog", DataAccessMethod.Sequential), TestMethod()]
        public void F81001_CheckEventFeeCatalogTest()
        {
            int feeCatId = (int)testContextInstance.DataRow["feeCatId"];

            string formNumber = (string)testContextInstance.DataRow["formNumber"];

            DateTime effectiveDate = (DateTime)testContextInstance.DataRow["effectiveDate"];

            int expected = 0;
            int actual;

            actual = TerraScan.Helper.WSHelper.F81001_CheckEventFeeCatalog(feeCatId, formNumber, effectiveDate);

            if (actual != 0)
            {
                Assert.Fail("No Record");
            }
        }

        #endregion F81001_CheckEventFeeCatalog

        #endregion F81001_EventFeeCatalog

        #region F81002 Event Fee

        // Created By: Jaya Prakash

        #region F81002_SaveEventFee

        /// <summary>
        ///A test for F81002_SaveEventFee (int, string, int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "F81002_EventFee", DataAccessMethod.Sequential), TestMethod()]

        public void F81002_SaveEventFeeTest()
        {
            int EventId = Convert.ToInt32(testContextInstance.DataRow["EventId"]);

            string FeeItems = (string)testContextInstance.DataRow["FeeItems"];

            int userId = Convert.ToInt32(testContextInstance.DataRow["userId"]);

            int expected = 0;
            int actual;

            actual = TerraScan.Helper.WSHelper.F81002_SaveEventFee(EventId, FeeItems, userId);

            if (actual == 0)
            {
                Assert.Fail("Record Not saved");
            }

        }
        # endregion

        #region F81002_GetEventFee

        /// <summary>
        ///A test for F81002_GetEventFee (int, int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "F81002_EventFee", DataAccessMethod.Sequential), TestMethod()]

        public void F81002_GetEventFeeTest()
        {
            int EventId = Convert.ToInt32(testContextInstance.DataRow["EventId"]);

            int form = Convert.ToInt32(testContextInstance.DataRow["form"]);


            F81002EventFeeData expected = null;
            F81002EventFeeData actual;

            actual = TerraScan.Helper.WSHelper.F81002_GetEventFee(EventId, form);

            if (actual == null || actual.GetFeeEvent.Count < 1)
            {
                Assert.Fail(" Record not found");
            }



        }
        # endregion

        #region F81002_DeleteEventFee

        /// <summary>
        ///A test for F81002_DeleteEventFee (int, int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "F81002_EventFee", DataAccessMethod.Sequential), TestMethod()]

        public void F81002_DeleteEventFeeTest()
        {
            int EventID = Convert.ToInt32(testContextInstance.DataRow["EventID"]);

            int userId = Convert.ToInt32(testContextInstance.DataRow["userId"]);

            TerraScan.Helper.WSHelper.F81002_DeleteEventFee(EventID, userId);


        }
        # endregion

        #endregion

        #region F29550 ParcelSale Tracking

        #region F29550_GetParcelSaleTrackingDetails

        /// <summary>
        ///A test for F29550_GetParcelSaleTrackingDetails (int)
        ///</summary>
        ///
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "F29550_ParcelSaleTrackingDetails", DataAccessMethod.Sequential), TestMethod()]

        public void F29550_GetParcelSaleTrackingDetailsTest()
        {
            int eventId = Convert.ToInt32(testContextInstance.DataRow["EventId"]);

            F29550ParcelSaleTracking expected = null;
            F29550ParcelSaleTracking actual;

            actual = TerraScan.Helper.WSHelper.F29550_GetParcelSaleTrackingDetails(eventId);

            if (actual == null || actual.f29550ListParcelSaleTracking.Count < 1)
            {
                Assert.Fail(" Record not found");
            }
        }
        #endregion

        #region F29550_GetParcelSaleTrackingComboDetailsTest
        /// <summary>
        ///A test for F29550_GetParcelSaleTrackingComboDetails ()
        ///</summary>
        [TestMethod()]
        public void F29550_GetParcelSaleTrackingComboDetailsTest()
        {
            F29550ParcelSaleTracking expected = null;

            F29550ParcelSaleTracking actual;

            actual = TerraScan.Helper.WSHelper.F29550_GetParcelSaleTrackingComboDetails();

            //Assert.AreEqual(expected, actual, "TerraScan.Helper.WSHelper.F29550_GetParcelSaleTrackingComboDetails did not return" +
            //        " the expected value.");
            //Assert.Inconclusive("Verify the correctness of this test method.");
            if (actual == null || actual.Tables["Table1"].Rows.Count < 1)
            {
                Assert.Fail(" Record not found");
            }
        }
        #endregion

        #region F29550_GetParcelDetailsTest

        /// <summary>
        ///A test for F29550_GetParcelDetails (string, int, int)
        ///</summary>

        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "F29550_InculededParcelDetails", DataAccessMethod.Sequential), TestMethod()]

        public void F29550_GetParcelDetailsTest()
        {
            string parcelIdDetails = testContextInstance.DataRow["ParcelIDlist"].ToString();////null; // TODO: Initialize to an appropriate value

            int newParcelId = Convert.ToInt32(testContextInstance.DataRow["NewParcelID"]);////0; // TODO: Initialize to an appropriate value

            int saleId = Convert.ToInt32(testContextInstance.DataRow["SaleID"]);//// 0; // TODO: Initialize to an appropriate value

            F29550ParcelSaleTracking expected = null;
            F29550ParcelSaleTracking actual;

            actual = TerraScan.Helper.WSHelper.F29550_GetParcelDetails(parcelIdDetails, newParcelId, saleId);

            if (actual == null || actual.Tables["Table1"].Rows.Count < 1)
            {
                Assert.Fail(" Record not found");
            }
            ////Assert.AreEqual(expected, actual, "TerraScan.Helper.WSHelper.F29550_GetParcelDetails did not return the expected val" +
            ////        "ue.");
            ////Assert.Inconclusive("Verify the correctness of this test method.");
        }
        #endregion

        #region F29550_saveParcelSaleDetailsTest
        /// <summary>
        ///A test for F29550_saveParcelSaleDetails (int, string, string, string, int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "F29550_SaveParcelSaleTracking", DataAccessMethod.Sequential), TestMethod()]
        public void F29550_saveParcelSaleDetailsTest()
        {
            int eventId = (int)testContextInstance.DataRow["EventID"]; // TODO: Initialize to an appropriate value

            string saleItems = (string)testContextInstance.DataRow["SalesItem"]; // TODO: Initialize to an appropriate value

            string parcelItems = (string)testContextInstance.DataRow["ParcelItem"]; // TODO: Initialize to an appropriate value

            string ownerItems = (string)testContextInstance.DataRow["OwnerItem"]; // TODO: Initialize to an appropriate value

            int userId = (int)testContextInstance.DataRow["UserID"];  // TODO: Initialize to an appropriate value

            int expected = 0;
            int actual;

            actual = TerraScan.Helper.WSHelper.F29550_saveParcelSaleDetails(eventId, saleItems, parcelItems, ownerItems, userId);

            if (actual == 0)
            {
                Assert.Fail(" Record not found");
            }
        }
        #endregion F29550_saveParcelSaleDetailsTest

        #region F29550_GetPushOwnerTest
        /// <summary>
        ///A test for F29550_GetPushOwner (int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "F29550_PushOwnerAndParcelDetails", DataAccessMethod.Sequential), TestMethod()]
        public void F29550_GetPushOwnerTest()
        {
            int saleId = Convert.ToInt32(testContextInstance.DataRow["SaleID"]); // TODO: Initialize to an appropriate value

            F29550ParcelSaleTracking expected = null;
            F29550ParcelSaleTracking actual;

            actual = TerraScan.Helper.WSHelper.F29550_GetPushOwner(saleId);

            if (actual == null || actual.f29550_PushSaleOwner.Rows.Count < 1)
            {
                Assert.Fail(" Record not found");
            }
            //Assert.AreEqual(expected, actual, "TerraScan.Helper.WSHelper.F29550_GetPushOwner did not return the expected value.");
            //Assert.Inconclusive("Verify the correctness of this test method.");
        }
        #endregion F29550_GetPushOwnerTest
        #endregion Sprint_36

        # endregion

        #region Sprint_37

        #region F36041 Crop

        // Created By: Vasantha Malliga

        #region F36041_SaveCropCodeDetails

        /// <summary>
        ///A test for F36041_SaveCropCodeDetails (int, string, int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "F36041_CropCodeDetails", DataAccessMethod.Sequential), TestMethod()]
        public void F36041_SaveCropCodeDetailsTest()
        {
            int valueSliceId = Convert.ToInt32(testContextInstance.DataRow["valueSliceId"]);

            string cropItems = (string)testContextInstance.DataRow["cropItems"];

            int userId = Convert.ToInt32(testContextInstance.DataRow["userId"]);
            int expected = 0;
            int actual;

            actual = TerraScan.Helper.WSHelper.F36041_SaveCropCodeDetails(valueSliceId, cropItems, userId);

            if (actual == 0)
            {
                Assert.Fail("Record Not saved");
            }

        }
        #endregion

        #region F36041_CropCodeDetails

        /// <summary>
        ///A test for F36041_CropCodeDetails (int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "F36041_CropCodeDetails", DataAccessMethod.Sequential), TestMethod()]

        public void F36041_CropCodeDetailsTest()
        {
            int valueSliceID = Convert.ToInt32(testContextInstance.DataRow["valueSliceId"]);

            F36041CropData expected = null;
            F36041CropData actual;

            actual = TerraScan.Helper.WSHelper.F36041_CropCodeDetails(valueSliceID);

            if (actual == null || actual.GetCropCodeDetails.Count < 1)
            {
                Assert.Fail(" Record not found");
            }

        }
        #endregion

        #region F36041_CropDetails

        /// <summary>
        ///A test for F36041_CropDetails (int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "F36041_CropCodeDetails", DataAccessMethod.Sequential), TestMethod()]

        public void F36041_CropDetailsTest()
        {
            int valueSliceID = Convert.ToInt32(testContextInstance.DataRow["valueSliceId"]);

            F36041CropData expected = null;
            F36041CropData actual;

            actual = TerraScan.Helper.WSHelper.F36041_CropDetails(valueSliceID);

            if (actual == null || actual.GetCropDetails.Count < 1)
            {
                Assert.Fail(" Record not found");
            }


        }
        #endregion

        #region F36041_DeleteCrop

        /// <summary>
        ///A test for F36041_DeleteCrop (int, int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "F36041_DeleteCrop", DataAccessMethod.Sequential), TestMethod()]

        public void F36041_DeleteCropTest()
        {
            int cropId = Convert.ToInt32(testContextInstance.DataRow["cropId"]);

            int userId = Convert.ToInt32(testContextInstance.DataRow["userId"]);

            TerraScan.Helper.WSHelper.F36041_DeleteCrop(cropId, userId);


        }
        #endregion

        #endregion

        # endregion

        #region Sprint_38

        #region 9066_CheckIn
        ////Created By: Latha

        #region GetAuditCount
        /// <summary>
        ///A test for F9066_GetAuditCount ()
        ///</summary>
        //[DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "F9066_CheckIn", DataAccessMethod.Sequential), TestMethod()]
        //public void F9066_GetAuditCountTest()
        //{
        //    int expected = 0;
        //    int actual;
        //    actual = TerraScan.Helper.WSHelper.F9066_GetAuditCount();
        //    if (actual != 0)
        //    {
        //        Assert.Fail("No Record");
        //    }
        //}
        #endregion GetAuditCount

        #region GetCheckInData
        /// <summary>
        ///A test for F9066_GetCheckInData ()
        ///</summary>
       // [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "F9066_CheckIn", DataAccessMethod.Sequential), TestMethod()]
        //public void F9066_GetCheckInDataTest()
        //{
        //    F9066CheckInData expected = null;
        //    F9066CheckInData actual;

        //    actual = TerraScan.Helper.WSHelper.F9066_GetCheckInData();

        //    if (actual == null || actual.GetCheckInDetails.Count < 1)
        //    {
        //        Assert.Fail(" Record not found");
        //    }
        //}
        #endregion GetCheckInData

        #region SaveData
        /// <summary>
        ///A test for F9066_SaveData (string, string)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "F9066_CheckIn", DataAccessMethod.Sequential), TestMethod()]
        public void F9066_SaveDataTest()
        {
            string insertValue;
            string updateValue;
            if (testContextInstance.DataRow["InsertXML"].ToString() == "null")
            {
                insertValue = null;
            }
            else
            {
                insertValue = (string)testContextInstance.DataRow["InsertXML"];
            }

            if (testContextInstance.DataRow["UpdateXML"].ToString() == "null")
            {
                updateValue = null;
            }
            else
            {
                updateValue = (string)testContextInstance.DataRow["UpdateXML"];
            }

            TerraScan.Helper.WSHelper.F9066_SaveData(insertValue, updateValue);
        }
        #endregion SaveData

        #endregion 9066_CheckIn

        #endregion Sprint_38

        #region Sprint 39

        #region F1440 Batch Button SmartPart

        #region F1440_SaveRecieptinSnapShotBatchButtonControl

        //// created by M.Vijayakumar        
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "F1440_BatchButtonControl", DataAccessMethod.Sequential), TestMethod()]
        public void F1440_SaveRecieptinSnapShotBatchButtonControlTest()
        {
            int snapshotId = Convert.ToInt32(testContextInstance.DataRow["snapshotId"]);

            ////when receipt id is passed as null then the no of items in the snapshot collection is returned
            //// when the receipt id is passed then it will insert the receipt in to the snapshot collection

            System.Nullable<int> receiptId;

            if (!string.IsNullOrEmpty(testContextInstance.DataRow["receiptId"].ToString()))
            {

                receiptId = (System.Nullable<int>)testContextInstance.DataRow["receiptId"];
            }
            else
            {
                ////when receipt id is passed as null then the no of items in the snapshot collection is returned
                receiptId = null;
            }

            int userId = Convert.ToInt32(testContextInstance.DataRow["userId"]);

            int actual;

            actual = TerraScan.Helper.WSHelper.F1440_SaveRecieptinSnapShotBatchButtonControl(snapshotId, receiptId, userId);

            /////after successfull save the no of items in the snapshot item collection is returned

            if (actual == 0)
            {
                Assert.Fail("Record Not saved");
            }
        }

        #endregion F1440_SaveRecieptinSnapShotBatchButtonControl

        #region F9040_ListBatchButtonSnapShots

        //// created by M.Vijayakumar  
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "9040_snapshot", DataAccessMethod.Sequential), TestMethod()]
        public void F9040_ListBatchButtonSnapShotsTest()
        {
            int formsSliceNo = Convert.ToInt32(testContextInstance.DataRow["FormsSliceNo"]);

            F9040SnapShotUtilityData actual;

            actual = TerraScan.Helper.WSHelper.F9040_ListBatchButtonSnapShots(formsSliceNo);

            if (actual == null || actual.ListSnapShot.Rows.Count <= 0)
            {
                Assert.Fail("No record Found");
            }
        }

        #endregion F9040_ListBatchButtonSnapShots

        #region F9040_SaveBatchButtonSnapShots

        //// created by M.Vijayakumar 
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "9040_snapshot", DataAccessMethod.Sequential), TestMethod()]
        public void F9040_SaveBatchButtonSnapShotsTest()
        {
            int snapShotId = 0;
            string snapShotDetails = testContextInstance.DataRow["BatchButtonSnapShotDetails"].ToString();
            int userId = Convert.ToInt32(testContextInstance.DataRow["UserID"]);
            int actual;

            actual = TerraScan.Helper.WSHelper.F9040_SaveBatchButtonSnapShots(snapShotId, snapShotDetails, userId);

            if (actual > 0)
            {
                /*here saved value is sent for Update*/
                actual = TerraScan.Helper.WSHelper.F9040_SaveBatchButtonSnapShots(actual, snapShotDetails, userId);

                if (actual <= 0)
                {
                    Assert.Fail("Record Not saved");
                }
            }
            else
            {
                Assert.Fail("Record Not saved");
            }
        }

        #endregion F9040_SaveBatchButtonSnapShots

        #endregion F1440 Batch Button SmartPart

        # region F1430_GetCalculatorDetails

        // Created By: Jaya Prakash

        #region Get Calculator Details
        /// <summary>
        ///A test for F1430_GetCalculatorDetails (int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "F1430_CalculatorDetails", DataAccessMethod.Sequential), TestMethod()]

        public void F1430_GetCalculatorDetailsTest()
        {
            int statementId = Convert.ToInt32(testContextInstance.DataRow["statementId"]); // TODO: Initialize to an appropriate value

            // F1430InterestCalculatorData expected = null;
            F1430InterestCalculatorData actual;

            actual = TerraScan.Helper.WSHelper.F1430_GetCalculatorDetails(statementId);

            if (actual == null || actual.CalculatorFields.Count < 1)
            {
                Assert.Fail(" Record not found");
            }

        }

        #endregion Get Calculator Details

        #region Get Interest Details
        /// <summary>
        ///A test for F1430_GetInterestDetails (int, DateTime, decimal)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "F1430_CalculatorDetails", DataAccessMethod.Sequential), TestMethod()]
        public void F1430_GetInterestDetailsTest()
        {
            int statementId = Convert.ToInt32(testContextInstance.DataRow["statementId"]); // TODO: Initialize to an appropriate value

            DateTime interestDate = Convert.ToDateTime(testContextInstance.DataRow["interestDate"]);  // TODO: Initialize to an appropriate value

            decimal taxAmount = Convert.ToDecimal(testContextInstance.DataRow["taxAmount"]); // TODO: Initialize to an appropriate value

            F1430InterestCalculatorData expected = null;
            F1430InterestCalculatorData actual;

            actual = TerraScan.Helper.WSHelper.F1430_GetInterestDetails(statementId, interestDate, taxAmount);

            if (actual == null || actual.InterestDescription.Rows.Count < 1)
            {
                Assert.Fail(" Record not found");
            }
        }

        # endregion Get Interest Details

        #endregion

        #region F36060DepreciationComp

        // Created By: M.Vijayakumar

        #region F36060_GetDepreciationTables

        // Created By: M.Vijayakumar
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "F36060_DepreciationTables", DataAccessMethod.Sequential), TestMethod()]
        public void F36060_GetDepreciationTablesTest()
        {
            //// new record is inserted which used for get method
            int deprTableId = this.F36060_SaveDepreciation();

            F36060DepreciationData actual;

            actual = TerraScan.Helper.WSHelper.F36060_GetDepreciationTables(deprTableId);

            if (actual == null || actual.GetDepreciationTables.Rows.Count <= 0)
            {
                Assert.Fail("No record Found");
            }
        }

        #endregion F36060_GetDepreciationTables

        #region F36060_SaveDepreciationTables

        // Created By: M.Vijayakumar
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "F36060_DepreciationTables", DataAccessMethod.Sequential), TestMethod()]
        public void F36060_SaveDepreciationTablesTest()
        {
            int actual;
            actual = this.F36060_SaveDepreciation();

            if (actual > 0)
            {
                string deprecationItem = testContextInstance.DataRow["DeprecationItem"].ToString();
                string otherDeprItem = testContextInstance.DataRow["OtherDeprItem"].ToString();
                int userId = Convert.ToInt32(testContextInstance.DataRow["UserID"]);

                /*here saved value is sent for Update*/
                actual = TerraScan.Helper.WSHelper.F36060_SaveDepreciationTables(actual, deprecationItem, otherDeprItem, userId);

                if (actual <= 0)
                {
                    Assert.Fail("Record Not saved");
                }
            }
            else
            {
                Assert.Fail("Record Not saved");
            }
        }

        #endregion F36060_SaveDepreciationTables

        #region F36060_SaveDepreciation

        /// <summary>
        /// To save the Save deprecation values
        /// here this method is used both in delete and save method
        /// </summary>
        /// <returns>returens the save deprTableId</returns>
        private int F36060_SaveDepreciation()
        {
            // Created By: M.Vijayakumar

            ////here this method is used both in delete and save method
            int deprTableId = Convert.ToInt32(testContextInstance.DataRow["DeprTableID"]);
            string deprecationItem = testContextInstance.DataRow["DeprecationItem"].ToString();
            string otherDeprItem = testContextInstance.DataRow["OtherDeprItem"].ToString();
            int userId = Convert.ToInt32(testContextInstance.DataRow["UserID"]);

            return TerraScan.Helper.WSHelper.F36060_SaveDepreciationTables(deprTableId, deprecationItem, otherDeprItem, userId);
        }

        #endregion F36060_SaveDepreciation

        #region F36060_DeleteDepreciationTablesTest

        // Created By: M.Vijayakumar
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "F36060_DepreciationTables", DataAccessMethod.Sequential), TestMethod()]
        public void F36060_DeleteDepreciationTablesTest()
        {
            ////here new recored is created which will be deleted later
            //// zero is passed so new recored is created and will used to delete
            int deprTableId = this.F36060_SaveDepreciation();
            int userId = Convert.ToInt32(testContextInstance.DataRow["UserID"]);
            TerraScan.Helper.WSHelper.F36060_DeleteDepreciationTables(deprTableId, userId);
        }

        #endregion F36060_DeleteDepreciationTablesTest

        #endregion F36060DepreciationComp

        #region F82002_ContractorManagement

        //Created by Sriparameswari

        #region f82002_InsertBuildingPermitDetails
        /// <summary>
        ///A test for F82002_InsertBuildingPermitDetails (int?, string, int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "F82002_ContractorDetails", DataAccessMethod.Sequential), TestMethod()]
        public void F82002_InsertBuildingPermitDetailsTest()
        {
            System.Nullable<int> contractorID = new System.Nullable<int>(); // TODO: Initialize to an appropriate value

            string contractorItems = (string)testContextInstance.DataRow["ContractorItems"];
            int userID = (int)testContextInstance.DataRow["UserID"];

            int expected = 0;

            expected = TerraScan.Helper.WSHelper.F82002_InsertBuildingPermitDetails(contractorID, contractorItems, userID);

            if (expected == 0)
            {
                Assert.Fail(" Record not found");
            }
        }
        #endregion

        #region F82002_DeleteContractorManagement

        /// <summary>
        ///A test for F82002_DeleteContractorManagement (int, int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;Persist Security Info=True;User ID=sa;Password=100%sec", "F82002_ContractorDetails", DataAccessMethod.Sequential), TestMethod()]
        public void F82002_DeleteContractorManagementTest1()
        {
            int contractorId = (int)testContextInstance.DataRow["ContractorID"];////0; // TODO: Initialize to an appropriate value

            int userID = (int)testContextInstance.DataRow["UserID"];////0; // TODO: Initialize to an appropriate value

            TerraScan.Helper.WSHelper.F82002_DeleteContractorManagement(contractorId, userID);

        }

        #endregion

        #region F82002_ListContractorManagementData

        /// <summary>

        ///A test for F82002_ListContractorManagementData (int?, string)

        ///</summary>

        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "F82002_ContractorManagement", DataAccessMethod.Sequential), TestMethod()]

        public void F82002_ListContractorManagementDataTest()
        {
            System.Nullable<int> icontractorID = new System.Nullable<int>(); // TODO: Initialize to an appropriate value
            string contractorXML = (string)testContextInstance.DataRow["contractorXML"]; ; // TODO: Initialize to an appropriate value
            F82002ContractorManagementData expected = null;
            F82002ContractorManagementData actual;
            actual = TerraScan.Helper.WSHelper.F82002_ListContractorManagementData(icontractorID, contractorXML);
            actual = TerraScan.Helper.WSHelper.F82002_ListContractorManagementData(icontractorID, contractorXML);

            if (actual == null || actual.ListContractorManagement.Count < 1)
            {
                Assert.Fail(" Record not found");
            }
        }
        #endregion
        #endregion

        #endregion Sprint 39

        #region Sprint_40

        //created by Kuppusamy.B

        #region F82001_BuildingPermit

        #region GetBuildingPermit

        /// <summary>
        ///A test for F82001_GetBuildingPermitDetails (int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "82001_Buildingpermit", DataAccessMethod.Sequential), TestMethod()]

        public void F82001_GetBuildingPermitDetailsTest()
        {
            //int eventID = Convert.ToInt32(testContextInstance.DataRow["eventID"]);

            //int eventID = (int)testContextInstance.DataRow["eventID"];

            int eventID = Convert.ToInt32(testContextInstance.DataRow["eventID"]);

            //F82001BuildingPermitData expected = null;
            F82001BuildingPermitData actual;

            actual = TerraScan.Helper.WSHelper.F82001_GetBuildingPermitDetails(eventID);

            if (actual == null || actual.F82001GetBuildingPermitDetails.Count < 1)
            {
                Assert.Fail(" Record not found");
            }

        }

        # endregion GetBuildingPermit

        #region SaveBuildingPermit

        /// <summary>
        ///A test for F82001_InsertBuildingPermitDetails (int, string, int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "82001_Buildingpermit", DataAccessMethod.Sequential), TestMethod()]
        public void F82001_InsertBuildingPermitDetailsTest()
        {
            int permitId = Convert.ToInt32(testContextInstance.DataRow["permitId"]);
            //int permitId = (int)testContextInstance.DataRow["permitId"];

            string buildingPermitItems = (string)testContextInstance.DataRow["buildingPermitItems"];

            int userId = Convert.ToInt32(testContextInstance.DataRow["userId"]);

            //int expected = 0;
            int actual;

            actual = TerraScan.Helper.WSHelper.F82001_InsertBuildingPermitDetails(permitId, buildingPermitItems, userId);

            if (actual == 0)
            {
                Assert.Fail("Record Not saved");
            }

        }

        #endregion SaveBuildingPermit

        #endregion F82001_BuildingPermit

        #region F2010-Statecode selection

        /// <summary>
        ///A test for F2010_ListStateCodeSelection ()
        ///</summary> 
        [TestMethod()]
        public void F2010_ListStateCodeSelectionTest()
        {
            //F2010StateCodeSelectionData expected = null;
            F2010StateCodeSelectionData actual;

            actual = TerraScan.Helper.WSHelper.F2010_ListStateCodeSelection();

            if (actual == null || actual.F2010_ListStateCode.Count < 1)
            {
                Assert.Fail(" Record not found");
            }
        }

        #endregion F2010-Statecode selection

        #region F3510 Neighborhood Selection

        // Created by: Malliga

        #region Get Neighborhood Type
        /// <summary>
        ///A test for F3510_ListNeighborhoodType ()
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "F3510_NeighborhoodSelection", DataAccessMethod.Sequential), TestMethod()]
        public void F3510_ListNeighborhoodTypeTest()
        {
            F3510NeighborhoodSelectionData expected = null;
            F3510NeighborhoodSelectionData actual;

            actual = TerraScan.Helper.WSHelper.F3510_ListNeighborhoodType();
            if (actual == null || actual.GetNeighborhoodType.Count < 1)
            {
                Assert.Fail(" Record not found");
            }

        }
        #endregion

        #region Get Neighborhood Selection
        /// <summary>
        ///A test for F3510_ListNeighborhoodSelectionDetails (string, string, string, string, string)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "F3510_NeighborhoodSelection", DataAccessMethod.Sequential), TestMethod()]
        public void F3510_ListNeighborhoodSelectionDetailsTest()
        {
            string neighborhood = null; // TODO: Initialize to an appropriate value

            string childof = null; // TODO: Initialize to an appropriate value

            string rollyear = (String)testContextInstance.DataRow["year"]; // TODO: Initialize to an appropriate value

            string type = null; // TODO: Initialize to an appropriate value

            string description = null; // TODO: Initialize to an appropriate value

            F3510NeighborhoodSelectionData expected = null;
            F3510NeighborhoodSelectionData actual;

            actual = TerraScan.Helper.WSHelper.F3510_ListNeighborhoodSelectionDetails(neighborhood, childof, rollyear, type, description);

            if (actual == null || actual.GetNeighborhoodSelection.Count < 1)
            {
                Assert.Fail(" Record not found");
            }

        }
        #endregion

        #endregion

        #endregion Sprint_40

        #region F1013_ListSnapShotItems

        // Created By: M.Vijayakumar
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "F1013_UnpaidReceipts", DataAccessMethod.Sequential), TestMethod()]
        public void F1013_ListSnapShotItemsTest()
        {
            int snapShotId = Convert.ToInt32(testContextInstance.DataRow["SnapShotID"]);
            F1013BatchPaymentMgmtData actual;
            actual = TerraScan.Helper.WSHelper.F1013_ListSnapShotItems(snapShotId);
            if (actual == null || actual.ListSnapShotItems.Rows.Count <= 0)
            {
                Assert.Fail("No record Found");
            }
        }

        #endregion F1013_ListSnapShotItems

        #region Sprint41

        #region F49910_GetInstrumentHeaderDetailsTest

        /// <summary>
        ///A test for F49910_GetInstrumentHeaderDetails (int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "F49910_GetInstrumentHeaderDetails", DataAccessMethod.Sequential), TestMethod()]
        public void F49910_GetInstrumentHeaderDetailsTest()
        {
            int instId = Convert.ToInt32(testContextInstance.DataRow["InstID"]); // TODO: Initialize to an appropriate value

            F49910InstrumentHeaderDataSet expected = null;
            F49910InstrumentHeaderDataSet actual;

            actual = TerraScan.Helper.WSHelper.F49910_GetInstrumentHeaderDetails(instId);

            if (actual == null || actual.f49901RecorderDetailsDataTable.Count < 1)
            {
                Assert.Fail(" Record not found");
            }
        }

        #endregion F49910_GetInstrumentHeaderDetailsTest

        #region F49910_GetInstrumentTypeDetailsTest

        /// <summary>
        ///A test for F49910_GetInstrumentTypeDetails ()
        ///</summary>
        [TestMethod()]
        public void F49910_GetInstrumentTypeDetailsTest()
        {
            F49910InstrumentHeaderDataSet expected = null;
            F49910InstrumentHeaderDataSet actual;

            actual = TerraScan.Helper.WSHelper.F49910_GetInstrumentTypeDetails();

            if (actual == null || actual.f49910_pclst_GrantList.Count < 1)
            {
                Assert.Fail(" Record not found");
            }
        }

        #endregion F49910_GetInstrumentTypeDetailsTest

        #region F49910_DeleteInstrumentHeaderTest

        /// <summary>
        ///A test for F49910_DeleteInstrumentHeader (int, int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "F49910_DeleteInstrumentHeaderDetails", DataAccessMethod.Sequential), TestMethod()]
        public void F49910_DeleteInstrumentHeaderTest()
        {
            int instId = Convert.ToInt32(testContextInstance.DataRow["InstID"]); // TODO: Initialize to an appropriate value

            int userId = Convert.ToInt32(testContextInstance.DataRow["UserID"]); // TODO: Initialize to an appropriate value

            int expected = 0;
            int actual;

            actual = TerraScan.Helper.WSHelper.F49910_DeleteInstrumentHeader(instId, userId);
            if (actual == 0)
            {
                Assert.Fail(" Record not found");
            }

        }

        #endregion F49910_DeleteInstrumentHeaderTest

        #region F49910_GetGranterAddressDetailsTest

        /// <summary>
        ///A test for F49910_GetGranterAddressDetails (int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "F49910_GetGrantorAddress", DataAccessMethod.Sequential), TestMethod()]
        public void F49910_GetGranterAddressDetailsTest()
        {
            int grantId = Convert.ToInt32(testContextInstance.DataRow["GrantID"]); // TODO: Initialize to an appropriate value

            F49910InstrumentHeaderDataSet expected = null;
            F49910InstrumentHeaderDataSet actual;

            actual = TerraScan.Helper.WSHelper.F49910_GetGranterAddressDetails(grantId);
            if (actual == null || actual.f49910GrantListValues.Count < 1)
            {
                Assert.Fail(" Record not found");
            }

        }

        #endregion F49910_GetGranterAddressDetailsTest

        #region F49910_SaveInstrumentHeaderDetailsTest

        /// <summary>
        ///A test for F49910_SaveInstrumentHeaderDetails (int, string, string, int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "F49910_SaveInstrumentheader", DataAccessMethod.Sequential), TestMethod()]
        public void F49910_SaveInstrumentHeaderDetailsTest()
        {
            int instId = Convert.ToInt32(testContextInstance.DataRow["InstID"]); // TODO: Initialize to an appropriate value

            string instrumentItems = testContextInstance.DataRow["InstrumentItems"].ToString(); // TODO: Initialize to an appropriate value

            string paymentItems = testContextInstance.DataRow["PaymentItems"].ToString();  // TODO: Initialize to an appropriate value

            int userId = Convert.ToInt32(testContextInstance.DataRow["UserID"]); // TODO: Initialize to an appropriate value

            int expected = 0;
            int actual;

            actual = TerraScan.Helper.WSHelper.F49910_SaveInstrumentHeaderDetails(instId, instrumentItems, paymentItems, userId);
            if (actual == 0)
            {
                Assert.Fail(" Record not found");
            }

        }

        #endregion F49910_SaveInstrumentHeaderDetailsTest

        #region M&S RE 36000

        /// <summary>
        ///A test for F36000_GetDeprPercentage (int, decimal, int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "F36000_Residence", DataAccessMethod.Sequential), TestMethod()]
        public void F36000_GetDeprPercentageTest()
        {
            int age = (int)testContextInstance.DataRow["age"];  // TODO: Initialize to an appropriate value
            decimal objectCondition = (decimal)testContextInstance.DataRow["objectCondition"]; // TODO: Initialize to an appropriate value
            int deprTableId = (int)testContextInstance.DataRow["deprTableId"]; // TODO: Initialize to an appropriate value

            string actual;
            int value = 0;

            actual = TerraScan.Helper.WSHelper.F36000_GetDeprPercentage(age, objectCondition, deprTableId);
            int.TryParse(actual, out value);

            if (value > 0)
            {
                Assert.Fail(" Record not found");
            }
        }

        /// <summary>
        ///A test for F36000_GetDeprTableNameId (int, int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "F36000_Residence", DataAccessMethod.Sequential), TestMethod()]
        public void F36000_GetDeprTableNameIdTest()
        {
            int valueSliceId = (int)testContextInstance.DataRow["valueSliceId"]; // TODO: Initialize to an appropriate value

            int propertyQuality = (int)testContextInstance.DataRow["propertyQuality"]; // TODO: Initialize to an appropriate value

            int actual;

            actual = TerraScan.Helper.WSHelper.F36000_GetDeprTableNameId(valueSliceId, propertyQuality);

            if (actual == 0)
            {
                Assert.Fail(" Record not found");
            }
        }

        /// <summary>
        ///A test for F36000_SaveDepreciationDetails (string, int, int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "F36000_Residence", DataAccessMethod.Sequential), TestMethod()]
        public void F36000_SaveDepreciationDetailsTest()
        {
            string depreciationXml = testContextInstance.DataRow["depreciationXml"].ToString(); // TODO: Initialize to an appropriate value

            int valueSliceId = (int)testContextInstance.DataRow["valueSliceId"]; // TODO: Initialize to an appropriate value

            int userId = (int)testContextInstance.DataRow["userId"]; // TODO: Initialize to an appropriate value

            int actual;

            actual = TerraScan.Helper.WSHelper.F36000_SaveDepreciationDetails(depreciationXml, valueSliceId, userId);

            if (actual == 0)
            {
                Assert.Fail(" Record not found");
            }
        }

        #endregion

        #region F49920 Instrument Search Engine

        #region Instrument Search Load
        /// <summary>
        ///A test for F49920_ListInstrumentLoad ()
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "F49920_InstumentSearch", DataAccessMethod.Sequential), TestMethod()]
        public void F49920_ListInstrumentLoadTest()
        {
            F49920InstrumentSearchEngineData expected = null;
            F49920InstrumentSearchEngineData actual;

            actual = TerraScan.Helper.WSHelper.F49920_ListInstrumentLoad();

            if (actual == null || actual.ListInstrumentLoadItems.Count < 1)
            {
                Assert.Fail(" Record not found");
            }
        }

        #endregion

        #region Instrument Search

        /// <summary>
        ///A test for F49920_ListInstrumentSearch (string)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "F49920_InstumentSearch", DataAccessMethod.Sequential), TestMethod()]
        public void F49920_ListInstrumentSearchTest()
        {
            string instrumentcondition = (String)testContextInstance.DataRow["instumentcondition"]; ; // TODO: Initialize to an appropriate value

            F49920InstrumentSearchEngineData expected = null;
            F49920InstrumentSearchEngineData actual;

            actual = TerraScan.Helper.WSHelper.F49920_ListInstrumentSearch(instrumentcondition);

            if (actual == null || actual.ListInstrument.Count < 1)
            {
                Assert.Fail(" Record not found");
            }
        }
        #endregion

        #endregion

        # region F49911_Parties

        # region F49911_InsertPartiesFieldDetailsTest

        // Created By Kuppuswamy.B
        /// <summary>
        ///A test for F49911_InsertPartiesFieldDetails (int, string, string, int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "F49911_Parties", DataAccessMethod.Sequential), TestMethod()]
        public void F49911_InsertPartiesFieldDetailsTest()
        {
            int instid = (int)testContextInstance.DataRow["instid"];

            string grantorItems = (string)testContextInstance.DataRow["grantorItems"];

            string granteeItems = (string)testContextInstance.DataRow["granteeItems"];

            int userId = (int)testContextInstance.DataRow["userId"];

            int iscopy = (int)testContextInstance.DataRow["iscopy"];

            //int expected = 0;
            int actual;

            actual = TerraScan.Helper.WSHelper.F49911_InsertPartiesFieldDetails(instid, grantorItems, granteeItems, userId, iscopy);

            if (actual == 0)
            {
                Assert.Fail(" Record not found");
            }
        }

        #endregion

        #endregion

        #region F49912_Legal

        // Created By: Kuppu

        #region GetLegalDetails

        /// <summary>
        ///A test for F49912_ListLegalField (int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;Persist Security Info=True;User ID=sa;Password=100%sec", "F49910_GetInstrumentHeaderDetails", DataAccessMethod.Sequential), TestMethod()]
        public void F49912_ListLegalFieldTest()
        {
            int instID = Convert.ToInt32(testContextInstance.DataRow["InstID"]);

            // F49912LegalData expected = null;
            F49912LegalData actual;

            actual = TerraScan.Helper.WSHelper.F49912_ListLegalField(instID);

            if (actual == null || actual.SubDivisionTable.Count < 1)
            {
                Assert.Fail(" Record not found");
            }
        }

        #endregion GetLegalDetails

        #region InsertLegalDetails

        /// <summary>
        ///A test for F49912_InsertLegalFieldDetails (int, string, int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;Persist Security Info=True;User ID=sa;Password=100%sec", "F49911_Parties", DataAccessMethod.Sequential), TestMethod()]
        public void F49912_InsertLegalFieldDetailsTest()
        {
            int instid = (int)testContextInstance.DataRow["instid"];

            string legalItems = (string)testContextInstance.DataRow["legalItems"];

            int userId = (int)testContextInstance.DataRow["userId"];

            int iscopy = (int)testContextInstance.DataRow["iscopy"];

            //int expected = 0;
            int actual;

            actual = TerraScan.Helper.WSHelper.F49912_InsertLegalFieldDetails(instid, legalItems, userId, iscopy);

            if (actual == 0)
            {
                Assert.Fail(" Record not Inserted ");
            }
        }

        #endregion InsertLegalDetails

        #endregion F49912_Legal

        #endregion Sprint41

        #region Sprint42

        #region F2200_EditSchedule

        //Created by Sriparameswari

        #region F2200_ListEditScheduleDetails
        /// <summary>
        ///A test for F2200_ListEditScheduleDetails (int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "F2200_EditSchedule", DataAccessMethod.Sequential), TestMethod()]
        public void F2200_ListEditScheduleDetailsTest()
        {
            int SheduleID = (int)testContextInstance.DataRow["ScheduleID"];

            F2200EditScheduleData expected = null;
            F2200EditScheduleData actual;

            actual = TerraScan.Helper.WSHelper.F2200_ListEditScheduleDetails(SheduleID);

            if (actual == null || actual.f2200ListScheduleDataTable.Rows.Count < 1)
            {
                Assert.Fail("No Records Found");
            }
        }
        # endregion

        #region F2200_InsertEditSchedule

        /// <summary>
        ///A test for F2200_InsertEditSchedule (int?, string, int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;Persist Security Info=True;User ID=sa;Password=100%sec", "F2200_EditSchedule", DataAccessMethod.Sequential), TestMethod()]
        public void F2200_InsertEditScheduleTest()
        {
            System.Nullable<int> ScheduleID = new System.Nullable<int>(); // TODO: Initialize to an appropriate value

            string ScheduleItems = (string)testContextInstance.DataRow["ScheduleItems"]; // TODO: Initialize to an appropriate value

            int UserID = (int)testContextInstance.DataRow["UserID"]; // TODO: Initialize to an appropriate value

            int expected = 0;
          //  int actual;
            F2200EditScheduleData actual;
           
            actual = TerraScan.Helper.WSHelper.F2200_InsertEditSchedule(ScheduleID, ScheduleItems, UserID);

            //modified by purushotham

            if (actual == null || actual.ListOutputValue.Rows.Count <= 0)
            {
                Assert.Fail("Record not found");
            }

        }
        #endregion

        #region F2200_UpdateEditSchedule
        /// <summary>
        ///A test for F2200_UpdateEditSchedule (int, string, int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;Persist Security Info=True;User ID=sa;Password=100%sec", "F2200_EditSchedule", DataAccessMethod.Sequential), TestMethod()]
        public void F2200_UpdateEditScheduleTest()
        {
            int ScheduleID = (int)testContextInstance.DataRow["ScheduleID"];

            string ScheduleItems = (string)testContextInstance.DataRow["ScheduleItems"]; // TODO: Initialize to an appropriate value

            int UserID = (int)testContextInstance.DataRow["UserID"]; // TODO: Initialize to an appropriate value
            int expected = 0;
            int actual;

            actual = TerraScan.Helper.WSHelper.F2200_UpdateEditSchedule(ScheduleID, ScheduleItems, UserID);

            if (actual == 0)
            {
                Assert.Fail("No Records Found");
            }
        }

        #endregion

        #region F2200_DeleteEditSchedule
        /// <summary>
        ///A test for F2200_DeleteEditSchedule (int, int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;Persist Security Info=True;User ID=sa;Password=100%sec", "F2200_EditSchedule", DataAccessMethod.Sequential), TestMethod()]
        public void F2200_DeleteEditScheduleTest()
        {
            int ScheduleID = (int)testContextInstance.DataRow["ScheduleID"]; // TODO: Initialize to an appropriate value
            int UserID = (int)testContextInstance.DataRow["UserID"]; // TODO: Initialize to an appropriate value

            int expected = 0;
            int actual;

            actual = TerraScan.Helper.WSHelper.F2200_DeleteEditSchedule(ScheduleID, UserID);

        }
        #endregion F2200_DeleteEditSchedule

        #endregion F2200_EditSchedule

        #region F36061 Depreciation Control

        // Created By: M.Vijayakumar

        #region F36061_ListDepr

        /// <summary>
        /// Used to List the Depr Details
        /// </summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "F36061_DepreciationControl", DataAccessMethod.Sequential), TestMethod()]
        public void F36061_ListDeprTest()
        {
            int nbhdId = Convert.ToInt32(testContextInstance.DataRow["NBHDID"]);

            F36061DepreciationControlData actual;

            actual = TerraScan.Helper.WSHelper.F36061_ListDepr(nbhdId);

            if (actual == null || actual.ListDepr.Rows.Count <= 0)
            {
                Assert.Fail("No record Found");
            }
        }

        #endregion F36061_ListDepr

        #region F36061_ListDeprControlItems

        /// <summary>
        /// Used to Get the Depreciation Control Items Details.
        /// </summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "F36061_DepreciationControl", DataAccessMethod.Sequential), TestMethod()]
        public void F36061_ListDeprControlItemsTest()
        {
            int nbhdId = Convert.ToInt32(testContextInstance.DataRow["NBHDID"]);
            F36061DepreciationControlData actual;

            actual = TerraScan.Helper.WSHelper.F36061_ListDeprControlItems(nbhdId);

            if (actual == null || actual.ListDeprControlItems.Rows.Count <= 0)
            {
                Assert.Fail("No record Found");
            }
        }

        #endregion F36061_ListDeprControlItems

        #region F36061_SaveDeprControlItems

        /// <summary>
        /// Used to save the Depreciation Control Items Details .
        /// </summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "F36061_DepreciationControl", DataAccessMethod.Sequential), TestMethod()]
        public void F36061_SaveDeprControlItemsTest()
        {
            System.Nullable<int> nbhdId = new System.Nullable<int>(); // TODO: Initialize to an appropriate value

            nbhdId = Convert.ToInt32(testContextInstance.DataRow["NBHDID"]);

            string deprControlItems = testContextInstance.DataRow["DeprControlItems"].ToString();

            int userId = Convert.ToInt32(testContextInstance.DataRow["UserID"]);

            int actual;

            actual = TerraScan.Helper.WSHelper.F36061_SaveDeprControlItems(nbhdId, deprControlItems, userId);

            if (actual <= 0)
            {
                Assert.Fail("Record Not saved");
            }
        }

        #endregion F36061_SaveDeprControlItems

        // Created By: M.Vijayakumar

        #endregion F36061 Depreciation Control

        #endregion Sprint 42

        #region Sprint 43
        /// <summary>
        ///A test for GetFilePath (string, int, int, string, int)
        ///</summary>
        //[DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;Persist Security Info=True;User ID=sa;Password=100%sec", "Attachment", DataAccessMethod.Sequential), TestMethod()]
        //public void GetFilePathTest()
        //{
        //    string source = (string)testContextInstance.DataRow["Source"]; // TODO: Initialize to an appropriate value

        //    int formId = (int)testContextInstance.DataRow["Form"]; // TODO: Initialize to an appropriate value

        //    int keyId = (int)testContextInstance.DataRow["KeyID"]; // TODO: Initialize to an appropriate value

        //    string extension = (string)testContextInstance.DataRow["Extension"]; // TODO: Initialize to an appropriate value

        //    int userId = (int)testContextInstance.DataRow["UserID"]; // TODO: Initialize to an appropriate value

        //    AttachmentsData expected = null;
        //    AttachmentsData actual;

        //    actual = TerraScan.Helper.WSHelper.GetFilePath(source, formId, keyId, extension, userId);

        //    if (actual == null || actual.GetFilePath.Rows.Count < 1)
        //    {
        //        Assert.Fail("No Attachments are there");
        //    }
        //}


        /// <summary>
        ///A test for F1402_ListScheduleSearch (string)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "F1402_ScheduleSearch", DataAccessMethod.Sequential), TestMethod()]
        public void F1402_ListScheduleSearchTest()
        {
            string ScheduleConditionXML = (String)testContextInstance.DataRow["ScheduleCondition"]; // TODO: Initialize to an appropriate value

            F1402ScheduleSelectionData expected = null;
            F1402ScheduleSelectionData actual;

            actual = TerraScan.Helper.WSHelper.F1402_ListScheduleSearch(ScheduleConditionXML);

            if (actual == null || actual.GetScheduleSelection.Count < 1)
            {
                Assert.Fail(" Record not found");
            }
        }
        #endregion

        #region Sprint 45

        #region F29610_HoHExemption
        /// <summary>
        ///A test for F29610_SaveHoHExemptionDetails (int, string, int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "F24610_HoHExemption", DataAccessMethod.Sequential), TestMethod()]
        public void F29610_SaveHoHExemptionDetailsTest()
        {
            int eventId = Convert.ToInt32(testContextInstance.DataRow["eventId"]);  // TODO: Initialize to an appropriate value

            string HoHItems = (String)testContextInstance.DataRow["HoHItems"]; // TODO: Initialize to an appropriate value

            int userId = Convert.ToInt32(testContextInstance.DataRow["userId"]); ; // TODO: Initialize to an appropriate value

            int expected = 0;
            int actual;

            actual = TerraScan.Helper.WSHelper.F29610_SaveHoHExemptionDetails(eventId, HoHItems, userId);

            if (actual == 0)
            {
                Assert.Fail("Record Not saved");
            }
        }
        #endregion

        #region F29531_AssociationLinks
        /// <summary>
        ///A test for F29531_SaveAssociationLink (int, string, int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "F24531_AssociationLinks", DataAccessMethod.Sequential), TestMethod()]
        public void F29531_SaveAssociationLinkTest()
        {
            int associationid = Convert.ToInt32(testContextInstance.DataRow["associationid"]); // TODO: Initialize to an appropriate value

            string associationLinkItems = (String)testContextInstance.DataRow["associationLinkItems"]; // TODO: Initialize to an appropriate value

            int userId = Convert.ToInt32(testContextInstance.DataRow["userId"]); // TODO: Initialize to an appropriate value

            int expected = 0;
            int actual;

            actual = TerraScan.Helper.WSHelper.F29531_SaveAssociationLink(associationid, associationLinkItems, userId);

            if (actual == 0)
            {
                Assert.Fail("Record Not saved");
            }
        }
        #endregion

        #endregion

        #region Sprint 55

        ////#region F82006 Contractor Management

        /////// <summary>
        ///////A test for F82006_GetContractorList
        ///////</summary>
        ////[DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;Persist Security Info=True;User ID=sa;Password=100%sec", "F82006_ContractorManagement", DataAccessMethod.Sequential), TestMethod()]
        ////public void F82006_GetContractorListTest()
        ////{
        ////    //test initialization
        ////    int contractorID = Convert.ToInt32(testContextInstance.DataRow["ContractorID"]);
        ////    F82006ContractManagementData actual;

        ////    //test excecution
        ////    actual = TerraScan.Helper.WSHelper.F82006_GetContractorList(contractorID);

        ////    //test assertion
        ////    Assert.IsNotNull(actual, "Failed to execute the method.");
        ////    Assert.IsTrue(actual.GetContractorList.Rows.Count > 0, "Record not found");
        ////}

        /////// <summary>
        ///////A test for F82006_SaveContractorList (int?, string, string)
        ///////</summary>
        ///////<remarks>New record insertion</remarks>
        ////[DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;Persist Security Info=True;User ID=sa;Password=100%sec", "F82006_ContractorManagement", DataAccessMethod.Sequential), TestMethod()]
        ////public void F82006_SaveContractorList_NewRecord_DeleteRecordTest()
        ////{
        ////    //test initialization
        ////    int? contractorID = null;
        ////    string contractorXml = testContextInstance.DataRow["ContractorXml"].ToString();
        ////    string contractorEmployeeXml = testContextInstance.DataRow["ContractorEmployeeXml"].ToString();

        ////    //test excecution
        ////    int actual;
        ////    actual = TerraScan.Helper.WSHelper.F82006_SaveContractorList(contractorID, contractorXml, contractorEmployeeXml);

        ////    //test assertion
        ////    Assert.IsTrue(actual > 0, "Record not saved.");

        ////    F82006ContractManagementData getContractorEmployee;

        ////    //test excecution
        ////    getContractorEmployee = TerraScan.Helper.WSHelper.F82006_GetContractorList(actual);

        ////    //test assertion
        ////    Assert.IsNotNull(getContractorEmployee, "Failed to execute the method.");

        ////    int employeeId = 0;
        ////    if (getContractorEmployee.ListContractorEmployee.Rows.Count > 0)
        ////    {
        ////        int.TryParse(getContractorEmployee.ListContractorEmployee.Rows[0][getContractorEmployee.ListContractorEmployee.EmployeeIDColumn.ColumnName].ToString(), out employeeId);
        ////    }

        ////    if (employeeId > 0)
        ////    {
        ////        //test for delete contractorEmployee record
        ////        TerraScan.Helper.WSHelper.F82006_DeleteContractorEmployee(actual, employeeId);
        ////    }

        ////    //test for delete contractor record
        ////    TerraScan.Helper.WSHelper.F82006_DeleteContractorList(actual);
        ////}

        /////// <summary>
        ///////A test for F82006_SaveContractorList (int?, string, string)
        ///////</summary>
        ///////<remarks>Existing record updation</remarks>
        ////[DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;Persist Security Info=True;User ID=sa;Password=100%sec", "F82006_ContractorManagement", DataAccessMethod.Sequential), TestMethod()]
        ////public void F82006_SaveContractorList_UpdateRecordTest()
        ////{
        ////    //test initialization
        ////    int? contractorID = Convert.ToInt32(testContextInstance.DataRow["ContractorID"]);
        ////    string contractorXml = testContextInstance.DataRow["ContractorXml"].ToString();
        ////    string contractorEmployeeXml = testContextInstance.DataRow["ContractorEmployeeXml"].ToString();

        ////    //test excecution
        ////    int actual;
        ////    actual = TerraScan.Helper.WSHelper.F82006_SaveContractorList(contractorID, contractorXml, contractorEmployeeXml);

        ////    //test assertion
        ////    Assert.IsTrue(actual > 0, "Contractor record not updated.");
        ////}

        ////#endregion F82006 Contractor Management

        #region F9041 QueryViewDescription

        /// <summary>
        ///A test for F9041GetQueryDescription (int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "F9033_QueryEngine", DataAccessMethod.Sequential), TestMethod()]
        public void F9041GetQueryDescriptionTest()
        {
            F9041QueryViewDescriptionData actual;

            int queryViewId = (int)testContextInstance.DataRow["queryViewId"];

            actual = TerraScan.Helper.WSHelper.F9041GetQueryDescription(queryViewId);

            if (actual == null)
            {
                Assert.Fail("No record found");
            }
        }

        #endregion F9041 QueryViewDescription

        #endregion Sprint 55

        #region Sprint 58

        #region F9510 WebForm
        /// <summary>
        ///A test for F9510GetWebFormXML (int, int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "F9510WebForm", DataAccessMethod.Sequential), TestMethod()]
        public void F9510GetWebFormXMLTest()
        {
            int form = (int)testContextInstance.DataRow["FormNo"];

            int userId = (int)testContextInstance.DataRow["UserId"];

            F95010GetWebFormXMLData actual;

            actual = TerraScan.Helper.WSHelper.F9510GetWebFormXML(form, userId);

            if (actual == null)
            {
                Assert.Fail("No record found");
            }
        }
        #endregion F9510 WebForm

        #region F81003 Selection Catalog

        /// <summary>
        /// F81003_s the selection catalog CRUD methods test.
        /// </summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;Persist Security Info=True;User ID=sa;Password=100%sec", "F81003_SelectionCatalog", DataAccessMethod.Sequential), TestMethod()]
        public void F81003_SelectionCatalog_CRUDMethodsTest()
        {
            #region Test Initialization

            //test initialization
            int? catalogId = null;
            int actual;
            F81003SelectionCatalogData getSelectionCatalog;
            string selectionItemsInsertXml = testContextInstance.DataRow["SelectionItemsInsertXml"].ToString();
            string selectionItemsUpdateXml = testContextInstance.DataRow["SelectionItemsUpdateXml"].ToString();

            #endregion Test Initialization

            #region Insert

            //test excecution
            actual = TerraScan.Helper.WSHelper.F81003_SaveSelectionCatalog(catalogId, selectionItemsInsertXml);

            //test assertion
            Assert.IsTrue(actual > 0, "Record not saved.");

            #endregion Insert

            #region Get

            //test excecution
            getSelectionCatalog = TerraScan.Helper.WSHelper.F81003_GetSelectionCatalogDetails(actual);

            //test assertion
            Assert.IsNotNull(getSelectionCatalog, "Failed to execute the method.");
            Assert.IsTrue(getSelectionCatalog.GetSelectionCatalog.Rows.Count > 0, "Record not found");

            #endregion Get

            #region Update

            //test excecution
            actual = TerraScan.Helper.WSHelper.F81003_SaveSelectionCatalog(actual, selectionItemsUpdateXml);

            //test assertion
            Assert.IsTrue(actual > 0, "Failed to updated record.");

            #endregion Upadate

            #region Delete

            //test excecution
            TerraScan.Helper.WSHelper.F81003_DeleteSelectionCatalog(actual);

            #endregion Delete
        }

        #endregion F81003 Selection Catalog

        #endregion Sprint 58

        #region Sprint 71

        #region F36033 Land Code Values
        ////Created By Latha

        /// <summary>
        ///A test for F36033_ListNeighborhoodType (int)
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "36033_RollYear", DataAccessMethod.Sequential), TestMethod()]
        public void F36033_ListNeighborhoodTypeTest()
        {
            int rollYear = (int)testContextInstance.DataRow["RollYear"];
            F36033LandCodesValuesData actual;

            actual = TerraScan.Helper.WSHelper.F36033_ListNeighborhoodType(rollYear);

            if (actual == null || actual.ListNeighborhoodType.Rows.Count < 1)
            {
                Assert.Fail(" Record not found");
            }
        }
        #endregion F36033 Land Code Values

        #endregion Sprint 71

        #region Sprint 77

        #region F29640 Frozen

        /// <summary>
        ///A test for GetFrozenValue
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "F29640_Frozen", DataAccessMethod.Sequential), TestMethod()]
        public void GetFrozenValueTest()
        {
            int eventId = (int)testContextInstance.DataRow["EventId"];
            F29640FrozenValueData actual;
            actual = TerraScan.Helper.WSHelper.GetFrozenValue(eventId);
            if (actual == null || actual.GetFrozenValues.Rows.Count < 1)
            {
                Assert.Fail(" Record not found");
            }
        }

        /// <summary>
        ///A test for SaveFrozenDetails
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "F29640_Frozen", DataAccessMethod.Sequential), TestMethod()]
        public void SaveFrozenDetailsTest()
        {
            string frozenElements = (string)testContextInstance.DataRow["FrozenElements"];
            int userId = (int)testContextInstance.DataRow["UserId"];
            TerraScan.Helper.WSHelper.SaveFrozenDetails(frozenElements, userId);
        }


        /// <summary>
        ///A test for DeleteFrozenDetails
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "F29640_Frozen", DataAccessMethod.Sequential), TestMethod()]
        public void DeleteFrozenDetailsTest()
        {
            int eventId = (int)testContextInstance.DataRow["EventId"];
            int frozenId = (int)testContextInstance.DataRow["FrozenId"];
            int userId = (int)testContextInstance.DataRow["UserId"];
            TerraScan.Helper.WSHelper.DeleteFrozenDetails(eventId, frozenId, userId);
        }

        #endregion Frozen

        #region F29650 Exemption

        /// <summary>
        ///A test for GetExemptionDetails
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "F29650_Exemption", DataAccessMethod.Sequential), TestMethod()]
        public void GetExemptionDetailsTest()
        {
            int eventId = (int)testContextInstance.DataRow["EventId"];
            F29650ExemptionData actual;
            actual = TerraScan.Helper.WSHelper.GetExemptionDetails(eventId);
            if (actual == null || actual.GetExemption.Rows.Count < 1)
            {
                Assert.Fail(" Record not found");
            }
        }

        /// <summary>
        ///A test for GetExemptionType
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "F29650_Exemption", DataAccessMethod.Sequential), TestMethod()]
        public void GetExemptionTypeTest()
        {
            int eventId = (int)testContextInstance.DataRow["EventId"];
            F29650ExemptionData actual;
            actual = TerraScan.Helper.WSHelper.GetExemptionType(eventId);
            if (actual == null || actual.ListExemptionType.Rows.Count < 1)
            {
                Assert.Fail(" Record not found");
            }
        }

        /// <summary>
        ///A test for GetExemptionLoss
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "F29650_Exemption", DataAccessMethod.Sequential), TestMethod()]
        public void GetExemptionLossTest()
        {
            Decimal lossValue = (Decimal)testContextInstance.DataRow["LossValue"];
            Decimal maxValue = (Decimal)testContextInstance.DataRow["MaxValue"];
            
            Decimal actual;
            actual = TerraScan.Helper.WSHelper.GetExemptionLoss(lossValue, maxValue);
            if (actual == 0)
            {
                Assert.Fail(" Record not found");
            }
        }

        /// <summary>
        ///A test for SaveExemptionDetails
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "F29650_Exemption", DataAccessMethod.Sequential), TestMethod()]
        public void SaveExemptionDetailsTest()
        {
            string exemptionElements = (string)testContextInstance.DataRow["ExemptionElements"];
            int userId = (int)testContextInstance.DataRow["UserId"];
            TerraScan.Helper.WSHelper.SaveExemptionDetails(exemptionElements, userId);
        }

        /// <summary>
        ///A test for DeleteExemptionDetails
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "F29650_Exemption", DataAccessMethod.Sequential), TestMethod()]
        public void DeleteExemptionDetailsTest()
        {
            int eventId = (int)testContextInstance.DataRow["EventId"];
            int exemptionEventId = (int)testContextInstance.DataRow["ExemptionEventId"];
            int userId = (int)testContextInstance.DataRow["UserId"];
            TerraScan.Helper.WSHelper.DeleteExemptionDetails(eventId, exemptionEventId, userId);
        }

        #endregion F29650 Exemption

        #region F35060 Schedule Item Code

        /// <summary>
        ///A test for GetScheduleItemCodes
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "F35060_ScheduleItemCode", DataAccessMethod.Sequential), TestMethod()]
        public void GetScheduleItemCodesTest()
        {
            F35060ScheduleItemCodeData actual;
            actual = TerraScan.Helper.WSHelper.GetScheduleItemCodes();
            if (actual == null || actual.GetScheduleItemCode.Rows.Count < 1)
            {
                Assert.Fail(" Record not found");
            }
        }

        /// <summary>
        ///A test for SaveScheduleItemCodes
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "F35060_ScheduleItemCode", DataAccessMethod.Sequential), TestMethod()]
        public void SaveScheduleItemCodesTest()
        {
            string scheduleCodeElements =  (string)testContextInstance.DataRow["ScheduleElements"];
            int userId = (int)testContextInstance.DataRow["UserId"];
            TerraScan.Helper.WSHelper.SaveScheduleItemCodes(scheduleCodeElements, userId);
        }

        /// <summary>
        ///A test for DeleteScheduleItemCodes
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "F35060_ScheduleItemCode", DataAccessMethod.Sequential), TestMethod()]
        public void DeleteScheduleItemCodesTest()
        {
            string itemCodeId = (string)testContextInstance.DataRow["ItemCodeElements"];
            int userId = (int)testContextInstance.DataRow["UserId"];
            TerraScan.Helper.WSHelper.DeleteScheduleItemCodes(itemCodeId, userId);
        }

        #endregion F35060 Schedule Item Code

        #endregion Sprint 77

        #region Sprint 83

        #region F2205 Move Schedule

        /// <summary>
        /// A test for Moves the schedule items.
        /// </summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "F2205_MoveSchedule", DataAccessMethod.Sequential), TestMethod()]
        public void MoveScheduleItems()
        {
            int scheduleId = (int)testContextInstance.DataRow["ScheduleId"];
            bool isNewSchedule = (bool)testContextInstance.DataRow["IsNewSchedule"];
            string scheduleLineItems = (string)testContextInstance.DataRow["ScheduleLineItems"];
            int userId = (int)testContextInstance.DataRow["UserId"];
            int actual;

            if (isNewSchedule)
            {
                string scheduleHeaderItems = (string)testContextInstance.DataRow["ScheduleHeaderDetails"];
                actual = TerraScan.Helper.WSHelper.F2205CreateSchedule(null, isNewSchedule, scheduleHeaderItems, scheduleLineItems, userId);
            }
            else
            {
                actual = TerraScan.Helper.WSHelper.F2205CreateSchedule(scheduleId, isNewSchedule, null, scheduleLineItems, userId);
            }

            //test assertion
            Assert.IsTrue(actual > 0, "Successfully moved.");
        }

        #endregion F2205 Move Schedule

        #region F25005 Personal Property Header

        /// <summary>
        ///A test for Load F25055 Personal property header 
        ///</summary>
        [DataSource("System.Data.SqlClient", "Data Source=TERRASCANPMS;Initial Catalog=TerrascanDevDB20130618;User ID=sa;Password=100%sec", "F25055_PPHeader", DataAccessMethod.Sequential), TestMethod()]
        public void GetPersonalPropertyDetails()
        {
            int scheduleId = (int)testContextInstance.DataRow["ScheduleId"];
            F25055PropertyHeaderData actual;

             //test excecution
            actual = TerraScan.Helper.WSHelper.GetPropertyHeaderDetails(scheduleId);

            //test assertion
            Assert.IsNotNull(actual, "Failed to execute the method.");
            Assert.IsTrue(actual.GetPersonalPropertyDetail.Rows.Count > 0, "Record not found");
        }

        #endregion F25005 Personal Property Header

        #region F35051 Shedule Line Items

        [DataSource("System.Data.SqlClient", "Data Source=TerrascanPMS\\SQL2008;Initial Catalog=TerrascanDevDB20130618;Persist Security Info=True;User ID=sa;Password=100%sec", "F35051_ScheduleLineItems", DataAccessMethod.Sequential), TestMethod()]
        public void F35051_ScheduleLineItems_CRUDMethodsTest()
        {
            #region Test Initialization

            //test initialization

            int actual;
            F35051ScheduleLineItemsData getScheduleLineItemsData;
            int scheduleId;
            int.TryParse(testContextInstance.DataRow["ScheduleID"].ToString(), out scheduleId);
            string scheduleItemsInsertXML = testContextInstance.DataRow["ScheduleItemsInsertXML"].ToString();
            string scheduleItemsUpdateXML = testContextInstance.DataRow["ScheduleItemsUpdateXML"].ToString();
            int userId = 200001;

            #endregion Test Initialization

            #region Insert

            //test excecution
            actual = TerraScan.Helper.WSHelper.F35051_SaveScheduleLineItem(scheduleId, scheduleItemsInsertXML, userId);

            //test assertion
            Assert.IsTrue(actual > 0, "Record not saved.");

            #endregion Insert

            #region Get

            //test excecution
            getScheduleLineItemsData = TerraScan.Helper.WSHelper.F35051_GetScheduleLineItemDetails(scheduleId);

            //test assertion
            Assert.IsNotNull(getScheduleLineItemsData, "Failed to execute the method.");
            Assert.IsTrue(getScheduleLineItemsData.ListSchedlueLineItem.Rows.Count > 0, "Record not found");

            scheduleItemsUpdateXML = scheduleItemsUpdateXML.Replace("204125", actual.ToString());

            #endregion Get

            #region Update

            //test excecution
            actual = TerraScan.Helper.WSHelper.F35051_SaveScheduleLineItem(scheduleId, scheduleItemsUpdateXML, userId);

            //test assertion
            Assert.IsTrue(actual > 0, "Failed to updated record.");

            #endregion Upadate

            #region Delete

            //test excecution
            actual = TerraScan.Helper.WSHelper.F35051_DeleteScheduleLineItem(scheduleId, scheduleItemsUpdateXML, userId);

            //test assertion
            Assert.IsTrue(actual > 0, "Failed to delete record.");

            #endregion Delete
        }

        #endregion F35051 Shedule Line Items

        #region F35055 Shedule Line Items

        [DataSource("System.Data.SqlClient", "Data Source=TerrascanPMS\\SQL2008;Initial Catalog=TerrascanDevDB20130618;Persist Security Info=True;User ID=sa;Password=100%sec", "F35055_ScheduleLineItems", DataAccessMethod.Sequential), TestMethod()]
        public void F35055_ScheduleLineItems_CRUDMethodsTest()
        {
            #region Test Initialization

            //test initialization

            int actual;
            F35055PPLineItemData getScheduleLineItemsData;
            int scheduleId;
            int PpDeprTableId;
            int originalValue;
            int trend;
            short year;
            short rollYear;
            int userId = 200001;

            int.TryParse(testContextInstance.DataRow["ScheduleID"].ToString(), out scheduleId);
            string scheduleItemsInsertXML = testContextInstance.DataRow["ScheduleItemsInsertXML"].ToString();
            string scheduleItemsUpdateXML = testContextInstance.DataRow["ScheduleItemsUpdateXML"].ToString();
            int.TryParse(testContextInstance.DataRow["PpDeprTableId"].ToString(), out PpDeprTableId);
            int.TryParse(testContextInstance.DataRow["OriginalValue"].ToString(), out originalValue);
            int.TryParse(testContextInstance.DataRow["Trend"].ToString(), out trend);
            short.TryParse(testContextInstance.DataRow["Year"].ToString(), out year);
            short.TryParse(testContextInstance.DataRow["RollYear"].ToString(), out rollYear);
                  
            #endregion Test Initialization

            #region Insert

            //test excecution
            actual = TerraScan.Helper.WSHelper.F35055_SaveScheduleLineItem(scheduleId, scheduleItemsInsertXML, userId);

            //test assertion
            Assert.IsTrue(actual > 0, "Record not saved.");

            #endregion Insert

            #region Get

            //test excecution
            getScheduleLineItemsData = TerraScan.Helper.WSHelper.F35055_GetPPLineItemsDetails(scheduleId);

            //test assertion
            Assert.IsNotNull(getScheduleLineItemsData, "Failed to execute the method.");
            Assert.IsTrue(getScheduleLineItemsData.F35055_GetSchedlueLineItem.Rows.Count > 0, "Record not found");

            scheduleItemsUpdateXML = scheduleItemsUpdateXML.Replace("200232", actual.ToString());

            #endregion Get

            #region Update

            //test excecution
            actual = TerraScan.Helper.WSHelper.F35055_SaveScheduleLineItem(scheduleId, scheduleItemsUpdateXML, userId);

            //test assertion
            Assert.IsTrue(actual > 0, "Failed to updated record.");

            #endregion Upadate

            #region Delete

            //test excecution
            actual = TerraScan.Helper.WSHelper.F35055_DeleteScheduleLineItem(scheduleId, scheduleItemsUpdateXML, userId);

            //test assertion
            Assert.IsTrue(actual > 0, "Failed to delete record.");

            #endregion Delete

            #region Value and Factored Value Calcualtion

            //test excecution
            getScheduleLineItemsData = TerraScan.Helper.WSHelper.F35055_GetValueCalculation(scheduleId, PpDeprTableId, originalValue, trend, year, rollYear);      

            //test assertion
            Assert.IsNotNull(getScheduleLineItemsData, "Failed to execute the method.");
            Assert.IsTrue(getScheduleLineItemsData.F35055_ValueCalculation.Rows.Count > 0, "Record not found");


           #endregion
        }

        #endregion F35055 Shedule Line Items

        #endregion Sprint 83
    }
}









